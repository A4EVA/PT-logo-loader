
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000212d4 vaddr 0x000212d4 paddr 0x000212d4 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000212ec memsz 0x000212ec flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x000212ec align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00021358 align 2**16
         filesz 0x00000000 memsz 0x0000a5f0 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              000192b4  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000212d4  000212d4  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  000212d4  000212d4  000212d4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  000212ec  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000a5f0  20000148  00021358  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000a738  2000a738  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004a523  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000891bf  00000000  00000000  0007a8d9  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ebb6  00000000  00000000  00103a98  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005e08  00000000  00000000  00112650  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005f5d2  00000000  00000000  00118458  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013513  00000000  00000000  00177a2a  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a130  00000000  00000000  0018af3d  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f39c  00000000  00000000  001a5070  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000060  00000000  00000000  001b440c  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00018ddd  00000000  00000000  001b446c  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00035ef2  00000000  00000000  001cd249  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000212d4 l    d  .ARM.extab	00000000 .ARM.extab
000212d4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000a738 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 29v7ssp6j8vk2cgm
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
00032171 l       .debug_str	00000000 
00057dfd l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003219e l       .debug_str	00000000 
00032190 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000598df l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0000f4a4 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
0005d517 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ac9yj7x9inahmak
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0005b209 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0005c359 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0000161a l       .debug_str	00000000 
00001641 l       .debug_str	00000000 
00001649 l       .debug_str	00000000 
00001650 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
0005ad43 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0000168a l       .debug_str	00000000 
0000168f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
0000120a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00000e6e l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00000e7a l       .debug_str	00000000 
00000eb1 l       .debug_str	00000000 
00000ebc l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00000ec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00000ed2 l       .debug_str	00000000 
0005e0cb l       .debug_str	00000000 
00000edb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000ee5 l       .debug_str	00000000 
00001632 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
000074cc l       .debug_str	00000000 
00000f25 l       .debug_str	00000000 
00000f53 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000103f l       .debug_str	00000000 
00001076 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0005dbff l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000107f l       .debug_str	00000000 
00001093 l       .debug_str	00000000 
000010c6 l       .debug_str	00000000 
000010d1 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000011c6 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000123f l       .debug_str	00000000 
00001282 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000012da l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00001329 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001377 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
200001f8 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8f3c7b5d2c207abfE
2000014c l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h64b26c24ec50591aE
2000014c l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h41aa62dc06660831E
200001e0 l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h248d1b5995e7331aE
20000148 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17hc6437d039f5b5b2dE
00008bc8 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E
0000931a l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E
00008a8e l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E
00008a42 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE
2000019e l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h7dd26ed30d22a01eE
200001f0 l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17h66f4f9260b49f5dfE
0001d470 l     O .text	00000021 str.0
0001d4b0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 3av1m1so5ua992q
00001b35 l       .debug_str	00000000 
000598c6 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001ac7 l       .debug_str	00000000 
00001ad4 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00001b5f l       .debug_str	00000000 
0000777d l       .debug_str	00000000 
00001b62 l       .debug_str	00000000 
0004a9ad l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000593bf l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00001b87 l       .debug_str	00000000 
00002262 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001b76 l       .debug_str	00000000 
0003b620 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001eaee l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
00019d26 l       .debug_str	00000000 
00001b90 l       .debug_str	00000000 
00001b99 l       .debug_str	00000000 
0005d269 l       .debug_str	00000000 
0000d92f l       .debug_str	00000000 
0000d935 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00001b59 l       .debug_str	00000000 
00001693 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000016a1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00001706 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000170f l       .debug_str	00000000 
00058603 l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
0003b621 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00001829 l       .debug_str	00000000 
00001887 l       .debug_str	00000000 
00001890 l       .debug_str	00000000 
000018f3 l       .debug_str	00000000 
00001900 l       .debug_str	00000000 
0000195f l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
0000197c l       .debug_str	00000000 
000019d7 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
000019dd l       .debug_str	00000000 
00001a37 l       .debug_str	00000000 
00001a3c l       .debug_str	00000000 
200001f9 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17h6824cb449058aaa8E
0001dc90 l     O .text	00000021 str.0
0001dcd0 l     O .text	0000001c str.1
0001dd30 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3k1rew1y0sa9p4cs
0000209d l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
0000da03 l       .debug_str	00000000 
00002283 l       .debug_str	00000000 
0000227e l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00059da5 l       .debug_str	00000000 
00002253 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00001ca7 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00001d33 l       .debug_str	00000000 
00001d68 l       .debug_str	00000000 
00001d82 l       .debug_str	00000000 
00001db7 l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e20 l       .debug_str	00000000 
00001e56 l       .debug_str	00000000 
00001e71 l       .debug_str	00000000 
00001ec5 l       .debug_str	00000000 
00001ee7 l       .debug_str	00000000 
00001f59 l       .debug_str	00000000 
00001f8f l       .debug_str	00000000 
00001faa l       .debug_str	00000000 
00001fe0 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002225 l       .debug_str	00000000 
00001ffb l       .debug_str	00000000 
000021eb l       .debug_str	00000000 
000021cd l       .debug_str	00000000 
00002194 l       .debug_str	00000000 
00002031 l       .debug_str	00000000 
00002178 l       .debug_str	00000000 
00002141 l       .debug_str	00000000 
0000204c l       .debug_str	00000000 
00002125 l       .debug_str	00000000 
000020ee l       .debug_str	00000000 
000020d3 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
0001ea7c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
000022c3 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00001b5f l       .debug_str	00000000 
0000777d l       .debug_str	00000000 
00001b62 l       .debug_str	00000000 
0004a9ad l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000593bf l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022bd l       .debug_str	00000000 
000022b7 l       .debug_str	00000000 
000022b1 l       .debug_str	00000000 
000022ab l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005ad43 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000dae8 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000022a8 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00001b59 l       .debug_str	00000000 
00001b87 l       .debug_str	00000000 
00002262 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00001bb1 l       .debug_str	00000000 
00001bd7 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00001bf5 l       .debug_str	00000000 
00001c81 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000594f7 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
0001de70 l     O .text	0000001c str.0
0001e0f0 l     O .text	00000021 str.1
0001e3d0 l     O .text	00000039 str.2
0001e430 l     O .text	00000021 str.3
0001e470 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 4g2px1fyklyi5loj
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00002325 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000022d4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4li2bx5hst9qmla8
00001b71 l       .debug_str	00000000 
0000239a l       .debug_str	00000000 
000023d6 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000023df l       .debug_str	00000000 
00007aa2 l       .debug_str	00000000 
0000240a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
00002468 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001eae9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4omwjvgyphguh48u
00002587 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
00002518 l       .debug_str	00000000 
00002559 l       .debug_str	00000000 
000025c8 l       .debug_str	00000000 
0000262b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0000267b l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
00002750 l       .debug_str	00000000 
000027d0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00002487 l       .debug_str	00000000 
000024ca l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 52x5s6n74aarru7s
00002a3c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
000029a8 l       .debug_str	00000000 
00002a85 l       .debug_str	00000000 
00002acf l       .debug_str	00000000 
00002b22 l       .debug_str	00000000 
00002bb1 l       .debug_str	00000000 
00002c14 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002c8c l       .debug_str	00000000 
00002cfe l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0000288e l       .debug_str	00000000 
00002918 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 ltoum6qebj303de
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00002dca l       .debug_str	00000000 
00002e07 l       .debug_str	00000000 
00002e18 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2faay6g6bya59u
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00002e57 l       .debug_str	00000000 
00002ed3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xuw4v3fy8tiv1h2
00003087 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000304c l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000030f0 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
00003220 l       .debug_str	00000000 
0000322e l       .debug_str	00000000 
00003299 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003320 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00003377 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00002f00 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
00002f52 l       .debug_str	00000000 
00002f8b l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002fb4 l       .debug_str	00000000 
00002fed l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00003e12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
000034b6 l       .debug_str	00000000 
000034bf l       .debug_str	00000000 
000034c7 l       .debug_str	00000000 
000034d0 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
000034dd l       .debug_str	00000000 
000034ed l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
0000350f l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0000353e l       .debug_str	00000000 
00003544 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003559 l       .debug_str	00000000 
00003563 l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
000035b4 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00003656 l       .debug_str	00000000 
0000367f l       .debug_str	00000000 
00003688 l       .debug_str	00000000 
000036e5 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000370b l       .debug_str	00000000 
00003733 l       .debug_str	00000000 
00003765 l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037fe l       .debug_str	00000000 
0000385b l       .debug_str	00000000 
000038b8 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000038ea l       .debug_str	00000000 
0000392f l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000393b l       .debug_str	00000000 
0005797d l       .debug_str	00000000 
00003977 l       .debug_str	00000000 
000039bb l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00003a0d l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00003ab8 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
00003aca l       .debug_str	00000000 
00003b05 l       .debug_str	00000000 
00003b43 l       .debug_str	00000000 
00003b73 l       .debug_str	00000000 
00003b87 l       .debug_str	00000000 
00003bb7 l       .debug_str	00000000 
00003bcb l       .debug_str	00000000 
00003bfb l       .debug_str	00000000 
00003c0f l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
00003c5a l       .debug_str	00000000 
00003cb1 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003d0b l       .debug_str	00000000 
0000668d l       .debug_str	00000000 
00003d82 l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
00003e89 l       .debug_str	00000000 
00003f0e l       .debug_str	00000000 
00003f19 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00003fa2 l       .debug_str	00000000 
00021f68 l       .debug_str	00000000 
00004019 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
000040ae l       .debug_str	00000000 
00004145 l       .debug_str	00000000 
000041e0 l       .debug_str	00000000 
00004275 l       .debug_str	00000000 
0000430c l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
0000446f l       .debug_str	00000000 
0000447a l       .debug_str	00000000 
00004546 l       .debug_str	00000000 
000045d6 l       .debug_str	00000000 
000045e2 l       .debug_str	00000000 
00004688 l       .debug_str	00000000 
00004694 l       .debug_str	00000000 
00004738 l       .debug_str	00000000 
000047da l       .debug_str	00000000 
0000487e l       .debug_str	00000000 
000048d2 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
0000497c l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
000049ff l       .debug_str	00000000 
00004a83 l       .debug_str	00000000 
00004b07 l       .debug_str	00000000 
0000de2b l       .debug_str	00000000 
00004b4e l       .debug_str	00000000 
0000de31 l       .debug_str	00000000 
00004b95 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00004bdc l       .debug_str	00000000 
00004c5a l       .debug_str	00000000 
00004cd9 l       .debug_str	00000000 
00004d74 l       .debug_str	00000000 
00004e08 l       .debug_str	00000000 
00004e55 l       .debug_str	00000000 
00004e61 l       .debug_str	00000000 
00004ec4 l       .debug_str	00000000 
00004f0c l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00004f18 l       .debug_str	00000000 
00004fac l       .debug_str	00000000 
00005012 l       .debug_str	00000000 
000050a3 l       .debug_str	00000000 
00005142 l       .debug_str	00000000 
000051d3 l       .debug_str	00000000 
00005272 l       .debug_str	00000000 
00005314 l       .debug_str	00000000 
000053a5 l       .debug_str	00000000 
00005453 l       .debug_str	00000000 
00005503 l       .debug_str	00000000 
000055b7 l       .debug_str	00000000 
000056aa l       .debug_str	00000000 
000056b5 l       .debug_str	00000000 
000057ac l       .debug_str	00000000 
00005858 l       .debug_str	00000000 
00005862 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00005949 l       .debug_str	00000000 
000059bc l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005aa0 l       .debug_str	00000000 
00005b17 l       .debug_str	00000000 
00005b8c l       .debug_str	00000000 
00005c01 l       .debug_str	00000000 
00005c71 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00005d03 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00005d14 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00005d68 l       .debug_str	00000000 
00005d72 l       .debug_str	00000000 
00005d7c l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00005d86 l       .debug_str	00000000 
00005db7 l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005dec l       .debug_str	00000000 
00005df6 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005e00 l       .debug_str	00000000 
00005e09 l       .debug_str	00000000 
00005e38 l       .debug_str	00000000 
00005e45 l       .debug_str	00000000 
00005e48 l       .debug_str	00000000 
00005e4b l       .debug_str	00000000 
00005e4e l       .debug_str	00000000 
00005e51 l       .debug_str	00000000 
00005e54 l       .debug_str	00000000 
00005e57 l       .debug_str	00000000 
00005ea5 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00005f38 l       .debug_str	00000000 
00005f91 l       .debug_str	00000000 
00005f6c l       .debug_str	00000000 
00005fc2 l       .debug_str	00000000 
00005f9e l       .debug_str	00000000 
00005ff3 l       .debug_str	00000000 
00005fce l       .debug_str	00000000 
00006027 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
0000605c l       .debug_str	00000000 
00006036 l       .debug_str	00000000 
00006090 l       .debug_str	00000000 
0000606a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000033d7 l       .debug_str	00000000 
00003437 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
0000e17a l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
0000e26e l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
0000e2dc l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0000e314 l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00006d2b l       .debug_str	00000000 
00006691 l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
000066fa l       .debug_str	00000000 
00006730 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
000067a4 l       .debug_str	00000000 
000067e0 l       .debug_str	00000000 
00006806 l       .debug_str	00000000 
00006812 l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
00006846 l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
000068e5 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00006937 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000698c l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
00006a2d l       .debug_str	00000000 
00006a7b l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00006a8a l       .debug_str	00000000 
00006adb l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00006af3 l       .debug_str	00000000 
00006b48 l       .debug_str	00000000 
00006b64 l       .debug_str	00000000 
00006b6c l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
00006bba l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00006c0e l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00006c7d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00006cda l       .debug_str	00000000 
00006d3d l       .debug_str	00000000 
00006d95 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00006dab l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00006db6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00006ddf l       .debug_str	00000000 
00006e42 l       .debug_str	00000000 
00006e6c l       .debug_str	00000000 
00006ecf l       .debug_str	00000000 
00006ed8 l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00006f57 l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
00006fde l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0000703e l       .debug_str	00000000 
00007071 l       .debug_str	00000000 
000070db l       .debug_str	00000000 
0000710e l       .debug_str	00000000 
00007113 l       .debug_str	00000000 
00007177 l       .debug_str	00000000 
0005c65d l       .debug_str	00000000 
000071d2 l       .debug_str	00000000 
0000720e l       .debug_str	00000000 
0000721c l       .debug_str	00000000 
0000724b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0000738e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00033a4f l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
000073b2 l       .debug_str	00000000 
000073ca l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000073e7 l       .debug_str	00000000 
00007216 l       .debug_str	00000000 
00007400 l       .debug_str	00000000 
0000741c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000609e l       .debug_str	00000000 
000060f3 l       .debug_str	00000000 
0000613d l       .debug_str	00000000 
00006144 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00005f2a l       .debug_str	00000000 
00005f35 l       .debug_str	00000000 
0000ccb7 l       .debug_str	00000000 
0000ccc2 l       .debug_str	00000000 
000073c4 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00006157 l       .debug_str	00000000 
00006180 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
000061ad l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00006226 l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0000624d l       .debug_str	00000000 
00006299 l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
000062b9 l       .debug_str	00000000 
000062e2 l       .debug_str	00000000 
000062ef l       .debug_str	00000000 
000062f9 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
000062fd l       .debug_str	00000000 
000588db l       .debug_str	00000000 
00007416 l       .debug_str	00000000 
000073e0 l       .debug_str	00000000 
00006307 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00006366 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
000063bc l       .debug_str	00000000 
000063fa l       .debug_str	00000000 
00006415 l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000647a l       .debug_str	00000000 
000064aa l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00006503 l       .debug_str	00000000 
00006548 l       .debug_str	00000000 
00006554 l       .debug_str	00000000 
0000659a l       .debug_str	00000000 
000065a7 l       .debug_str	00000000 
000065ed l       .debug_str	00000000 
000065fa l       .debug_str	00000000 
00006638 l       .debug_str	00000000 
0000663e l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0000e4c4 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0000e52e l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0000e558 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0000e596 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0000e666 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
00009697 l       .debug_str	00000000 
0000776a l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007779 l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00007784 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
0005de01 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000783b l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00007870 l       .debug_str	00000000 
000078a2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
000078b4 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00007902 l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0000792b l       .debug_str	00000000 
00007955 l       .debug_str	00000000 
0000797e l       .debug_str	00000000 
000079ca l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000079ee l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00007a46 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
000596cc l       .debug_str	00000000 
0004c71f l       .debug_str	00000000 
0005a431 l       .debug_str	00000000 
0005bd4a l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000c813 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000cb6c l       .debug_str	00000000 
0000cacb l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
00007a65 l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0000c783 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000cba5 l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000cb84 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000c7d4 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00007a74 l       .debug_str	00000000 
00007a9d l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
00007ab8 l       .debug_str	00000000 
00007acb l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00007ae4 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00007af9 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
00007b0c l       .debug_str	00000000 
00007b4e l       .debug_str	00000000 
00007b63 l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
00007b80 l       .debug_str	00000000 
00007b8a l       .debug_str	00000000 
00007bbc l       .debug_str	00000000 
00007bd0 l       .debug_str	00000000 
00007be5 l       .debug_str	00000000 
0000bd7e l       .debug_str	00000000 
0000bf87 l       .debug_str	00000000 
00007bec l       .debug_str	00000000 
00007bf7 l       .debug_str	00000000 
00007c7b l       .debug_str	00000000 
00007ca9 l       .debug_str	00000000 
00007d2f l       .debug_str	00000000 
000407b9 l       .debug_str	00000000 
00007d57 l       .debug_str	00000000 
00007d68 l       .debug_str	00000000 
00007df2 l       .debug_str	00000000 
00007e10 l       .debug_str	00000000 
00007e9e l       .debug_str	00000000 
00007ec5 l       .debug_str	00000000 
00007f54 l       .debug_str	00000000 
00007f9c l       .debug_str	00000000 
00007fcb l       .debug_str	00000000 
00008013 l       .debug_str	00000000 
00008032 l       .debug_str	00000000 
0000807a l       .debug_str	00000000 
0000808a l       .debug_str	00000000 
000080d2 l       .debug_str	00000000 
000080e3 l       .debug_str	00000000 
0000812b l       .debug_str	00000000 
00008133 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008185 l       .debug_str	00000000 
000081cd l       .debug_str	00000000 
000081e7 l       .debug_str	00000000 
0000822f l       .debug_str	00000000 
00008248 l       .debug_str	00000000 
00008290 l       .debug_str	00000000 
000082a3 l       .debug_str	00000000 
000082eb l       .debug_str	00000000 
000082f4 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
0000833c l       .debug_str	00000000 
00008386 l       .debug_str	00000000 
000083d1 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
00008440 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0000847e l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
000084b2 l       .debug_str	00000000 
000084d7 l       .debug_str	00000000 
00008536 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000859d l       .debug_str	00000000 
000085c7 l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
00008627 l       .debug_str	00000000 
00008658 l       .debug_str	00000000 
00008662 l       .debug_str	00000000 
000086bf l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000086f1 l       .debug_str	00000000 
00008717 l       .debug_str	00000000 
00008739 l       .debug_str	00000000 
0000875f l       .debug_str	00000000 
00008781 l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
000087cf l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
00008824 l       .debug_str	00000000 
0000882d l       .debug_str	00000000 
000088b7 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
000088d4 l       .debug_str	00000000 
00008960 l       .debug_str	00000000 
0000897d l       .debug_str	00000000 
0000899d l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
000089a4 l       .debug_str	00000000 
000089df l       .debug_str	00000000 
00008a11 l       .debug_str	00000000 
00008a22 l       .debug_str	00000000 
00008a5d l       .debug_str	00000000 
00008aa3 l       .debug_str	00000000 
00003bfb l       .debug_str	00000000 
00008ad3 l       .debug_str	00000000 
00008b03 l       .debug_str	00000000 
00008b21 l       .debug_str	00000000 
00008b51 l       .debug_str	00000000 
00008b64 l       .debug_str	00000000 
00008b94 l       .debug_str	00000000 
00008ba9 l       .debug_str	00000000 
00008bd9 l       .debug_str	00000000 
00008bf5 l       .debug_str	00000000 
00008c25 l       .debug_str	00000000 
00008c43 l       .debug_str	00000000 
00008c73 l       .debug_str	00000000 
00008c8e l       .debug_str	00000000 
00008cbe l       .debug_str	00000000 
00008ce2 l       .debug_str	00000000 
00008d12 l       .debug_str	00000000 
00008d4c l       .debug_str	00000000 
00008d7c l       .debug_str	00000000 
00008da1 l       .debug_str	00000000 
00008dd1 l       .debug_str	00000000 
00008dfb l       .debug_str	00000000 
00008e31 l       .debug_str	00000000 
00008e62 l       .debug_str	00000000 
00008e9c l       .debug_str	00000000 
00008ed1 l       .debug_str	00000000 
00008f0d l       .debug_str	00000000 
00008f33 l       .debug_str	00000000 
00008f55 l       .debug_str	00000000 
00008f7c l       .debug_str	00000000 
00008f9f l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00008fed l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0000903e l       .debug_str	00000000 
0000908f l       .debug_str	00000000 
0000909c l       .debug_str	00000000 
000090ee l       .debug_str	00000000 
000090fc l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
00009159 l       .debug_str	00000000 
000091a4 l       .debug_str	00000000 
000091b8 l       .debug_str	00000000 
000091fb l       .debug_str	00000000 
00009208 l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
0000924b l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
000092b8 l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
0000932b l       .debug_str	00000000 
0000937d l       .debug_str	00000000 
000093cf l       .debug_str	00000000 
000093d9 l       .debug_str	00000000 
0000942e l       .debug_str	00000000 
00009483 l       .debug_str	00000000 
000094d9 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
0000953b l       .debug_str	00000000 
00009577 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
000095b5 l       .debug_str	00000000 
000095f0 l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
000095fb l       .debug_str	00000000 
00009642 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00009658 l       .debug_str	00000000 
000096e9 l       .debug_str	00000000 
000096ff l       .debug_str	00000000 
00009744 l       .debug_str	00000000 
0000975e l       .debug_str	00000000 
000097c1 l       .debug_str	00000000 
000097e1 l       .debug_str	00000000 
00009820 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00009881 l       .debug_str	00000000 
000098c0 l       .debug_str	00000000 
0000c9a6 l       .debug_str	00000000 
000098e7 l       .debug_str	00000000 
00009927 l       .debug_str	00000000 
0000995a l       .debug_str	00000000 
00009971 l       .debug_str	00000000 
000099b7 l       .debug_str	00000000 
000099d3 l       .debug_str	00000000 
00009a37 l       .debug_str	00000000 
00009a59 l       .debug_str	00000000 
00009a9b l       .debug_str	00000000 
00009abc l       .debug_str	00000000 
00009afe l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
00009b2e l       .debug_str	00000000 
00009b72 l       .debug_str	00000000 
00009bc7 l       .debug_str	00000000 
00009c0b l       .debug_str	00000000 
00009c61 l       .debug_str	00000000 
00009ca5 l       .debug_str	00000000 
00009d1d l       .debug_str	00000000 
00009d61 l       .debug_str	00000000 
00009da1 l       .debug_str	00000000 
00009dbc l       .debug_str	00000000 
00009dfd l       .debug_str	00000000 
00009e53 l       .debug_str	00000000 
00009e97 l       .debug_str	00000000 
00009ec4 l       .debug_str	00000000 
00009f09 l       .debug_str	00000000 
00009f51 l       .debug_str	00000000 
00009f62 l       .debug_str	00000000 
00009faa l       .debug_str	00000000 
00009fbb l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
00009ff6 l       .debug_str	00000000 
0000a032 l       .debug_str	00000000 
0000a038 l       .debug_str	00000000 
0000a06e l       .debug_str	00000000 
0000a081 l       .debug_str	00000000 
0000a0b8 l       .debug_str	00000000 
0000a0cc l       .debug_str	00000000 
0000a10e l       .debug_str	00000000 
0000a12d l       .debug_str	00000000 
0000a172 l       .debug_str	00000000 
0000a18d l       .debug_str	00000000 
0000a1f2 l       .debug_str	00000000 
0000a259 l       .debug_str	00000000 
0000a264 l       .debug_str	00000000 
0000a2aa l       .debug_str	00000000 
0000a2f0 l       .debug_str	00000000 
0000a2fa l       .debug_str	00000000 
0000a341 l       .debug_str	00000000 
0000a34c l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0000a393 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a425 l       .debug_str	00000000 
0000a45e l       .debug_str	00000000 
0000a479 l       .debug_str	00000000 
0000a488 l       .debug_str	00000000 
0000a4c1 l       .debug_str	00000000 
0000a4e6 l       .debug_str	00000000 
0000a51f l       .debug_str	00000000 
0000a558 l       .debug_str	00000000 
0000a57e l       .debug_str	00000000 
0000a5b7 l       .debug_str	00000000 
0000a5f5 l       .debug_str	00000000 
0000a62f l       .debug_str	00000000 
0000a63b l       .debug_str	00000000 
0000a677 l       .debug_str	00000000 
0000a68a l       .debug_str	00000000 
0000a6c6 l       .debug_str	00000000 
0000a6df l       .debug_str	00000000 
0000a71c l       .debug_str	00000000 
0000a72d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
0000a77e l       .debug_str	00000000 
0000a7cf l       .debug_str	00000000 
0000a7d8 l       .debug_str	00000000 
0000a833 l       .debug_str	00000000 
0000a896 l       .debug_str	00000000 
0000a8b2 l       .debug_str	00000000 
0000a912 l       .debug_str	00000000 
0000a972 l       .debug_str	00000000 
0000a9d6 l       .debug_str	00000000 
0000a9f1 l       .debug_str	00000000 
0000aa55 l       .debug_str	00000000 
0000aa60 l       .debug_str	00000000 
0000aaca l       .debug_str	00000000 
0000aad9 l       .debug_str	00000000 
0000ab48 l       .debug_str	00000000 
0000ab60 l       .debug_str	00000000 
0000abd0 l       .debug_str	00000000 
0000abe9 l       .debug_str	00000000 
0000ac54 l       .debug_str	00000000 
0000ac69 l       .debug_str	00000000 
0000acd9 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
0000ad5e l       .debug_str	00000000 
0000ad70 l       .debug_str	00000000 
0000ade1 l       .debug_str	00000000 
0000adf4 l       .debug_str	00000000 
0000ae65 l       .debug_str	00000000 
0000ae7b l       .debug_str	00000000 
0000ae8d l       .debug_str	00000000 
0000aef9 l       .debug_str	00000000 
0000af0b l       .debug_str	00000000 
0000af77 l       .debug_str	00000000 
0000af86 l       .debug_str	00000000 
0000afee l       .debug_str	00000000 
0000aff8 l       .debug_str	00000000 
0000b06c l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
0000b077 l       .debug_str	00000000 
0000b0ef l       .debug_str	00000000 
0000b108 l       .debug_str	00000000 
0000b180 l       .debug_str	00000000 
0000b216 l       .debug_str	00000000 
0000b232 l       .debug_str	00000000 
0000b2c8 l       .debug_str	00000000 
0000b35e l       .debug_str	00000000 
0000b3f4 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
0000b469 l       .debug_str	00000000 
0000b4dd l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
0000b5d5 l       .debug_str	00000000 
0000b5e6 l       .debug_str	00000000 
0000b666 l       .debug_str	00000000 
0000b6c8 l       .debug_str	00000000 
0000cc6f l       .debug_str	00000000 
0000b719 l       .debug_str	00000000 
0000b73b l       .debug_str	00000000 
0000b768 l       .debug_str	00000000 
0000b797 l       .debug_str	00000000 
0000b7b9 l       .debug_str	00000000 
0000b7e0 l       .debug_str	00000000 
0000b809 l       .debug_str	00000000 
0000b83b l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0000b88b l       .debug_str	00000000 
0000b8d1 l       .debug_str	00000000 
0000b8e4 l       .debug_str	00000000 
0000b938 l       .debug_str	00000000 
0000b9aa l       .debug_str	00000000 
0000ba1c l       .debug_str	00000000 
0000ba8e l       .debug_str	00000000 
0000badd l       .debug_str	00000000 
0000bb0b l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0000bb70 l       .debug_str	00000000 
0000bbe8 l       .debug_str	00000000 
0000bc60 l       .debug_str	00000000 
0000bcb5 l       .debug_str	00000000 
0000bcea l       .debug_str	00000000 
00005efb l       .debug_str	00000000 
0000bd15 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0000bd44 l       .debug_str	00000000 
0000bd74 l       .debug_str	00000000 
0000bd8c l       .debug_str	00000000 
0000bdbd l       .debug_str	00000000 
0000bdef l       .debug_str	00000000 
0000be2e l       .debug_str	00000000 
0000be41 l       .debug_str	00000000 
0000be79 l       .debug_str	00000000 
0000be85 l       .debug_str	00000000 
0000beb5 l       .debug_str	00000000 
0000bee6 l       .debug_str	00000000 
0000beec l       .debug_str	00000000 
0000bf19 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf7d l       .debug_str	00000000 
0000bf97 l       .debug_str	00000000 
0000bfcb l       .debug_str	00000000 
0000bffe l       .debug_str	00000000 
00057915 l       .debug_str	00000000 
0000c04b l       .debug_str	00000000 
0000c094 l       .debug_str	00000000 
000578f8 l       .debug_str	00000000 
0000c0df l       .debug_str	00000000 
0000c107 l       .debug_str	00000000 
0000c14d l       .debug_str	00000000 
0000c153 l       .debug_str	00000000 
0000c181 l       .debug_str	00000000 
0000c19d l       .debug_str	00000000 
0000c1ca l       .debug_str	00000000 
0000c1da l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
0000c28b l       .debug_str	00000000 
0000c2ae l       .debug_str	00000000 
0000c2dd l       .debug_str	00000000 
0000c2ef l       .debug_str	00000000 
0000c322 l       .debug_str	00000000 
0000c338 l       .debug_str	00000000 
0000c385 l       .debug_str	00000000 
0000c3d8 l       .debug_str	00000000 
0000c40b l       .debug_str	00000000 
0000c41b l       .debug_str	00000000 
0000c471 l       .debug_str	00000000 
0000c4cb l       .debug_str	00000000 
0000c519 l       .debug_str	00000000 
0000c56b l       .debug_str	00000000 
0000c5c0 l       .debug_str	00000000 
0000c610 l       .debug_str	00000000 
0000c664 l       .debug_str	00000000 
0000c6bb l       .debug_str	00000000 
0000c711 l       .debug_str	00000000 
0000c768 l       .debug_str	00000000 
0000c7b4 l       .debug_str	00000000 
0000c7fc l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000c831 l       .debug_str	00000000 
0000c85d l       .debug_str	00000000 
0000c879 l       .debug_str	00000000 
0000c886 l       .debug_str	00000000 
0000c894 l       .debug_str	00000000 
0000c899 l       .debug_str	00000000 
0000c8a0 l       .debug_str	00000000 
0000c8b7 l       .debug_str	00000000 
0000c8cd l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000c8dd l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
0000c900 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
0000c921 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000c928 l       .debug_str	00000000 
0000c97b l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0000c9a1 l       .debug_str	00000000 
00005d7c l       .debug_str	00000000 
0000c9b5 l       .debug_str	00000000 
0000c9c9 l       .debug_str	00000000 
0000c9d2 l       .debug_str	00000000 
0000c9dd l       .debug_str	00000000 
0000c9ef l       .debug_str	00000000 
0000ca03 l       .debug_str	00000000 
0000ca14 l       .debug_str	00000000 
0000ca2e l       .debug_str	00000000 
0000ca5e l       .debug_str	00000000 
0000ca79 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
0000ca99 l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0000cadb l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000cae1 l       .debug_str	00000000 
0000cb02 l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000cb0a l       .debug_str	00000000 
00059739 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
0005a1a8 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
0000cb1b l       .debug_str	00000000 
0000cb3a l       .debug_str	00000000 
0000cb44 l       .debug_str	00000000 
0000cb4f l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cb78 l       .debug_str	00000000 
0000cb8a l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0005a053 l       .debug_str	00000000 
00035157 l       .debug_str	00000000 
0000cbfc l       .debug_str	00000000 
0000774b l       .debug_str	00000000 
0000cc0e l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0000cc22 l       .debug_str	00000000 
0000cc38 l       .debug_str	00000000 
0000cc48 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000cc54 l       .debug_str	00000000 
0000cc69 l       .debug_str	00000000 
0000cc80 l       .debug_str	00000000 
0000cc7f l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000ccc5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000074f9 l       .debug_str	00000000 
0000754b l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00007592 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00007599 l       .debug_str	00000000 
0000898e l       .debug_str	00000000 
0000ca19 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
000075a2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0000c14e l       .debug_str	00000000 
000075a9 l       .debug_str	00000000 
000075cc l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
000075e3 l       .debug_str	00000000 
00007605 l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
0000764c l       .debug_str	00000000 
0000765c l       .debug_str	00000000 
00007689 l       .debug_str	00000000 
0000769a l       .debug_str	00000000 
000076c8 l       .debug_str	00000000 
000076da l       .debug_str	00000000 
0000c9bf l       .debug_str	00000000 
0000cc4d l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0000770d l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
00007734 l       .debug_str	00000000 
0000c9fa l       .debug_str	00000000 
0000c9f4 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000ca33 l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0000ca7e l       .debug_str	00000000 
0000773b l       .debug_str	00000000 
00007744 l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
0000c9e8 l       .debug_str	00000000 
0000c9e2 l       .debug_str	00000000 
0000ca08 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000317dc l       .debug_str	00000000 
0005ca30 l       .debug_str	00000000 
00007750 l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007762 l       .debug_str	00000000 
0000ed0a l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
0000ece0 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
0000ec06 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
0000eca2 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
0000ed34 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0000ed44 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
0000ecc4 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
0000ecd0 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0000eef8 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
0000ed5e l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0000ed86 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
200009fc l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000e8 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
0000ebfc l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001ef40 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0000ed54 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
0000ebf2 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
0000e98c l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
0000e9c4 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
0000e9da l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
0000e9ea l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
0000ea90 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
0000ef1e l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0000efc8 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
0000ef0a l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
0000eb56 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000ce21 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f264 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dc16 l       .debug_str	00000000 
0000cce7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cd04 l       .debug_str	00000000 
0000cd89 l       .debug_str	00000000 
0000cd9f l       .debug_str	00000000 
0005aa5f l       .debug_str	00000000 
0000cdc6 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0000cdee l       .debug_str	00000000 
0000ce1c l       .debug_str	00000000 
0000ce26 l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
0000ce58 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000ce80 l       .debug_str	00000000 
0005efab l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0000ced9 l       .debug_str	00000000 
0000cee1 l       .debug_str	00000000 
0000cf11 l       .debug_str	00000000 
0000cf1c l       .debug_str	00000000 
0000cf49 l       .debug_str	00000000 
0000cf52 l       .debug_str	00000000 
0000cf88 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
0000ce20 l       .debug_str	00000000 
0005797e l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000cfc3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
0000e6eb l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000ebdc l       .debug_str	00000000 
0000ec1c l       .debug_str	00000000 
0000ec6a l       .debug_str	00000000 
0000ecaa l       .debug_str	00000000 
0000ecd1 l       .debug_str	00000000 
0000ed11 l       .debug_str	00000000 
0000ed1f l       .debug_str	00000000 
0000ed8e l       .debug_str	00000000 
0000edb9 l       .debug_str	00000000 
0000ade1 l       .debug_str	00000000 
0000ee29 l       .debug_str	00000000 
0000ee99 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000eec5 l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e708 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb41 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000ebcf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
0000f0a9 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f264 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000f01e l       .debug_str	00000000 
0000f081 l       .debug_str	00000000 
0000f127 l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
0000f1b7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
0000f24d l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000eee7 l       .debug_str	00000000 
0000ef71 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000ef7f l       .debug_str	00000000 
0000f014 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0000f2ca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000f279 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
0000ffb1 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
0001004b l       .debug_str	00000000 
000100b3 l       .debug_str	00000000 
0001012b l       .debug_str	00000000 
00010158 l       .debug_str	00000000 
00010170 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
000101e2 l       .debug_str	00000000 
000101e8 l       .debug_str	00000000 
000101f2 l       .debug_str	00000000 
0001026c l       .debug_str	00000000 
000102d8 l       .debug_str	00000000 
00010351 l       .debug_str	00000000 
000103ca l       .debug_str	00000000 
00010435 l       .debug_str	00000000 
000104a4 l       .debug_str	00000000 
000104ab l       .debug_str	00000000 
000104b6 l       .debug_str	00000000 
000104de l       .debug_str	00000000 
00010553 l       .debug_str	00000000 
000105d0 l       .debug_str	00000000 
000104cf l       .debug_str	00000000 
000105dc l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
00010653 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
000106bc l       .debug_str	00000000 
0001073a l       .debug_str	00000000 
000107aa l       .debug_str	00000000 
00010824 l       .debug_str	00000000 
0001083e l       .debug_str	00000000 
000108aa l       .debug_str	00000000 
000108b3 l       .debug_str	00000000 
000108bf l       .debug_str	00000000 
00010935 l       .debug_str	00000000 
000109ab l       .debug_str	00000000 
00010a21 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00010af8 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00010b65 l       .debug_str	00000000 
00010bda l       .debug_str	00000000 
00010bef l       .debug_str	00000000 
00010c56 l       .debug_str	00000000 
00010c5f l       .debug_str	00000000 
00010c6a l       .debug_str	00000000 
00010c71 l       .debug_str	00000000 
000598e7 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00010ca6 l       .debug_str	00000000 
00059320 l       .debug_str	00000000 
00010ce0 l       .debug_str	00000000 
00010d28 l       .debug_str	00000000 
000591c7 l       .debug_str	00000000 
0005e65e l       .debug_str	00000000 
00010d5b l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00010d68 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
00010d89 l       .debug_str	00000000 
00010d8e l       .debug_str	00000000 
00010d93 l       .debug_str	00000000 
00010d98 l       .debug_str	00000000 
00010d9d l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00010dad l       .debug_str	00000000 
00010db8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f2ec l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0000f360 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000f36c l       .debug_str	00000000 
0000f392 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000f39e l       .debug_str	00000000 
0000f3c5 l       .debug_str	00000000 
0000f3d0 l       .debug_str	00000000 
0000f3db l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000f495 l       .debug_str	00000000 
0000f3ec l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000f473 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000f47a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000f4a9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
0000f56b l       .debug_str	00000000 
0000f573 l       .debug_str	00000000 
0000f595 l       .debug_str	00000000 
0000f57c l       .debug_str	00000000 
0000f5ad l       .debug_str	00000000 
0000f5d3 l       .debug_str	00000000 
0000f64b l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
0000f6c2 l       .debug_str	00000000 
0000f72b l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
0000f7a3 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
0000f80d l       .debug_str	00000000 
0000f886 l       .debug_str	00000000 
0005e65c l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0000f88b l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
0000f8b1 l       .debug_str	00000000 
0000f898 l       .debug_str	00000000 
0000f893 l       .debug_str	00000000 
0000f8bc l       .debug_str	00000000 
0000f8d5 l       .debug_str	00000000 
0000f940 l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
0000f9b0 l       .debug_str	00000000 
0000f9c0 l       .debug_str	00000000 
0000fa38 l       .debug_str	00000000 
00058e77 l       .debug_str	00000000 
00058bd1 l       .debug_str	00000000 
0000fa42 l       .debug_str	00000000 
0000fa49 l       .debug_str	00000000 
0000fa6c l       .debug_str	00000000 
0000fa53 l       .debug_str	00000000 
0000fa4e l       .debug_str	00000000 
0000fa76 l       .debug_str	00000000 
0000fa8e l       .debug_str	00000000 
0000faf8 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000fb6d l       .debug_str	00000000 
0000fbd4 l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fdab l       .debug_str	00000000 
0000fe18 l       .debug_str	00000000 
0000fe95 l       .debug_str	00000000 
0000fe9d l       .debug_str	00000000 
00010149 l       .debug_str	00000000 
00010130 l       .debug_str	00000000 
0000fea7 l       .debug_str	00000000 
0000fec4 l       .debug_str	00000000 
0000ff33 l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
00013753 l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
0001486a l       .debug_str	00000000 
0001489a l       .debug_str	00000000 
000148fd l       .debug_str	00000000 
0001492d l       .debug_str	00000000 
00014958 l       .debug_str	00000000 
00014b5e l       .debug_str	00000000 
00014b68 l       .debug_str	00000000 
00014bc1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
000144c3 l       .debug_str	00000000 
000144f3 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
00014703 l       .debug_str	00000000 
00014733 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00014fd0 l       .debug_str	00000000 
00014fd9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00014be2 l       .debug_str	00000000 
000154d5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00014c19 l       .debug_str	00000000 
00014c6c l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00014cd4 l       .debug_str	00000000 
00014d1b l       .debug_str	00000000 
00014d24 l       .debug_str	00000000 
00014d6d l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
00014d79 l       .debug_str	00000000 
00014df5 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
00014e1f l       .debug_str	00000000 
00014e9b l       .debug_str	00000000 
00014eca l       .debug_str	00000000 
00014f50 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
00014f5e l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00014fc8 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005ad42 l       .debug_str	00000000 
000151ec l       .debug_str	00000000 
000578f8 l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005f370 l       .debug_str	00000000 
0005f36f l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00014fe0 l       .debug_str	00000000 
0005781b l       .debug_str	00000000 
00014fe4 l       .debug_str	00000000 
00015015 l       .debug_str	00000000 
0001501b l       .debug_str	00000000 
0001505c l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015071 l       .debug_str	00000000 
000150a8 l       .debug_str	00000000 
000150b3 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
000150e5 l       .debug_str	00000000 
0005795f l       .debug_str	00000000 
00015119 l       .debug_str	00000000 
0005794e l       .debug_str	00000000 
0001514d l       .debug_str	00000000 
00057906 l       .debug_str	00000000 
00015184 l       .debug_str	00000000 
00057998 l       .debug_str	00000000 
000151bc l       .debug_str	00000000 
000577c9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
0000f3b9 l       .debug_str	00000000 
00015526 l       .debug_str	00000000 
0001554d l       .debug_str	00000000 
00015558 l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015589 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001521d l       .debug_str	00000000 
000062e2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00015246 l       .debug_str	00000000 
00015258 l       .debug_str	00000000 
00015269 l       .debug_str	00000000 
000152b5 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
000152c1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
000152c5 l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6eb l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e708 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00058684 l       .debug_str	00000000 
000152d2 l       .debug_str	00000000 
0001538a l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000153ee l       .debug_str	00000000 
00015424 l       .debug_str	00000000 
0001543d l       .debug_str	00000000 
00015477 l       .debug_str	00000000 
00015494 l       .debug_str	00000000 
000154cf l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
000154ec l       .debug_str	00000000 
000154f6 l       .debug_str	00000000 
0001551c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005d3b0 l       .debug_str	00000000 
00015606 l       .debug_str	00000000 
00015642 l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000159a9 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000159af l       .debug_str	00000000 
000159c6 l       .debug_str	00000000 
0005b6ef l       .debug_str	00000000 
000595e1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00015689 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
000156b4 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000156e0 l       .debug_str	00000000 
0005f083 l       .debug_str	00000000 
00015751 l       .debug_str	00000000 
0001577d l       .debug_str	00000000 
000157aa l       .debug_str	00000000 
00015816 l       .debug_str	00000000 
0001581e l       .debug_str	00000000 
0001588b l       .debug_str	00000000 
00015894 l       .debug_str	00000000 
000158c1 l       .debug_str	00000000 
0001593b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00015944 l       .debug_str	00000000 
0001599c l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
00015982 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f220 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
0000e708 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
00015d7d l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000cb3a l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0000cb44 l       .debug_str	00000000 
00015589 l       .debug_str	00000000 
0000cb4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
000159de l       .debug_str	00000000 
00015a26 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00015a45 l       .debug_str	00000000 
00015a80 l       .debug_str	00000000 
00015aa5 l       .debug_str	00000000 
00015acc l       .debug_str	00000000 
00015b2c l       .debug_str	00000000 
00015b35 l       .debug_str	00000000 
00015ba0 l       .debug_str	00000000 
00015bb0 l       .debug_str	00000000 
00015c1c l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6eb l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015c2f l       .debug_str	00000000 
00015c92 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00015d12 l       .debug_str	00000000 
00015d75 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00016099 l       .debug_str	00000000 
000160ca l       .debug_str	00000000 
00016351 l       .debug_str	00000000 
000160e4 l       .debug_str	00000000 
00016115 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00016145 l       .debug_str	00000000 
00016176 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
00016180 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00016186 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0001618c l       .debug_str	00000000 
000161de l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000162ed l       .debug_str	00000000 
00016350 l       .debug_str	00000000 
0001637c l       .debug_str	00000000 
000163f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dc16 l       .debug_str	00000000 
0000cce7 l       .debug_str	00000000 
0000110c l       .debug_str	00000000 
00015e10 l       .debug_str	00000000 
00016372 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00015e1f l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
00015e67 l       .debug_str	00000000 
00015eaf l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00015eb7 l       .debug_str	00000000 
00015b2c l       .debug_str	00000000 
00015eff l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00015f47 l       .debug_str	00000000 
00015f8f l       .debug_str	00000000 
00015f98 l       .debug_str	00000000 
00015fc9 l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00015fd2 l       .debug_str	00000000 
00016003 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
0001600d l       .debug_str	00000000 
0001603e l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0001608f l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
00016580 l       .debug_str	00000000 
0001648d l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000164d6 l       .debug_str	00000000 
000164e2 l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00016535 l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00016448 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0001007c l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
0001796c l       .debug_str	00000000 
00016b6d l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00016bb0 l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
00016c0c l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
00016c6b l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00016cbd l       .debug_str	00000000 
00016d12 l       .debug_str	00000000 
00016d68 l       .debug_str	00000000 
00016d96 l       .debug_str	00000000 
00016da2 l       .debug_str	00000000 
00016dd4 l       .debug_str	00000000 
00016dfb l       .debug_str	00000000 
00016e2d l       .debug_str	00000000 
00016e3d l       .debug_str	00000000 
00016e72 l       .debug_str	00000000 
00016e85 l       .debug_str	00000000 
00016ebb l       .debug_str	00000000 
00016ecf l       .debug_str	00000000 
00016f19 l       .debug_str	00000000 
00016f2a l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00016f66 l       .debug_str	00000000 
00057c63 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00016fa4 l       .debug_str	00000000 
00016fe2 l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
00016ff4 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00017002 l       .debug_str	00000000 
0001702a l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
00017069 l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
0001714f l       .debug_str	00000000 
0003eb44 l       .debug_str	00000000 
000171e7 l       .debug_str	00000000 
00017281 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00017339 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
000173ad l       .debug_str	00000000 
0001741f l       .debug_str	00000000 
00017449 l       .debug_str	00000000 
00017487 l       .debug_str	00000000 
0001749a l       .debug_str	00000000 
000174e5 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
000174ee l       .debug_str	00000000 
00017530 l       .debug_str	00000000 
00018833 l       .debug_str	00000000 
0001756a l       .debug_str	00000000 
000175af l       .debug_str	00000000 
000175cb l       .debug_str	00000000 
0001760e l       .debug_str	00000000 
00017624 l       .debug_str	00000000 
00017689 l       .debug_str	00000000 
000176ee l       .debug_str	00000000 
00017729 l       .debug_str	00000000 
00017736 l       .debug_str	00000000 
00016a60 l       .debug_str	00000000 
00017769 l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
000177af l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
000177f5 l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0001783c l       .debug_str	00000000 
00017885 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00017908 l       .debug_str	00000000 
0001794d l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000179a5 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
000179bd l       .debug_str	00000000 
000179f8 l       .debug_str	00000000 
00017a1c l       .debug_str	00000000 
00017a42 l       .debug_str	00000000 
00017a7d l       .debug_str	00000000 
00017aa0 l       .debug_str	00000000 
00017ac5 l       .debug_str	00000000 
00017b02 l       .debug_str	00000000 
00017b19 l       .debug_str	00000000 
00017b56 l       .debug_str	00000000 
00017b6d l       .debug_str	00000000 
00017bbe l       .debug_str	00000000 
00017bdc l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
00017c37 l       .debug_str	00000000 
00017c9a l       .debug_str	00000000 
00017cdc l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
00017d4a l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00017db7 l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00017e19 l       .debug_str	00000000 
00017e27 l       .debug_str	00000000 
00017e92 l       .debug_str	00000000 
00017eac l       .debug_str	00000000 
00017ec2 l       .debug_str	00000000 
00017f2d l       .debug_str	00000000 
00017f3d l       .debug_str	00000000 
00017fa9 l       .debug_str	00000000 
00017fbb l       .debug_str	00000000 
00018027 l       .debug_str	00000000 
00018038 l       .debug_str	00000000 
0001809f l       .debug_str	00000000 
000180d7 l       .debug_str	00000000 
00018141 l       .debug_str	00000000 
000181c9 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
00018246 l       .debug_str	00000000 
000182c8 l       .debug_str	00000000 
000182df l       .debug_str	00000000 
0001831d l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
00018330 l       .debug_str	00000000 
0001833f l       .debug_str	00000000 
0001837d l       .debug_str	00000000 
00018390 l       .debug_str	00000000 
000183bc l       .debug_str	00000000 
000183c5 l       .debug_str	00000000 
000183f1 l       .debug_str	00000000 
000183fa l       .debug_str	00000000 
0001845a l       .debug_str	00000000 
0003169d l       .debug_str	00000000 
000184ab l       .debug_str	00000000 
000184fc l       .debug_str	00000000 
00018559 l       .debug_str	00000000 
000185b7 l       .debug_str	00000000 
000188a3 l       .debug_str	00000000 
00018608 l       .debug_str	00000000 
00018631 l       .debug_str	00000000 
00018694 l       .debug_str	00000000 
000186a5 l       .debug_str	00000000 
000186b2 l       .debug_str	00000000 
000186c7 l       .debug_str	00000000 
00018718 l       .debug_str	00000000 
00018741 l       .debug_str	00000000 
000187a4 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
000187c8 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00057937 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
000187e9 l       .debug_str	00000000 
0000dae8 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000187ed l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
000167bd l       .debug_str	00000000 
000187ff l       .debug_str	00000000 
00018804 l       .debug_str	00000000 
00018809 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0001882e l       .debug_str	00000000 
0001886a l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
00018880 l       .debug_str	00000000 
00018889 l       .debug_str	00000000 
00035008 l       .debug_str	00000000 
000589d3 l       .debug_str	00000000 
0004ac1a l       .debug_str	00000000 
00018892 l       .debug_str	00000000 
00018896 l       .debug_str	00000000 
000352ce l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000188b8 l       .debug_str	00000000 
000188b3 l       .debug_str	00000000 
00058754 l       .debug_str	00000000 
000188bc l       .debug_str	00000000 
00036da5 l       .debug_str	00000000 
000188c5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003985f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016590 l       .debug_str	00000000 
000165ea l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
00016644 l       .debug_str	00000000 
000187da l       .debug_str	00000000 
000187cd l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0001664c l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
00016662 l       .debug_str	00000000 
00057851 l       .debug_str	00000000 
00031cd3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0001887a l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005a97c l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0001884e l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
0005de01 l       .debug_str	00000000 
000166bf l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
000166e8 l       .debug_str	00000000 
000078a2 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00016727 l       .debug_str	00000000 
00018818 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00016735 l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
0001678a l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000579ec l       .debug_str	00000000 
000167a5 l       .debug_str	00000000 
000167a9 l       .debug_str	00000000 
000167b4 l       .debug_str	00000000 
000167c3 l       .debug_str	00000000 
0001680b l       .debug_str	00000000 
0001682b l       .debug_str	00000000 
00037af1 l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
00016876 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000168c1 l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00016940 l       .debug_str	00000000 
0001696e l       .debug_str	00000000 
00016980 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
000169c8 l       .debug_str	00000000 
000169f8 l       .debug_str	00000000 
00016a23 l       .debug_str	00000000 
00016a5a l       .debug_str	00000000 
00016a73 l       .debug_str	00000000 
00016a7f l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
00016b22 l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001891d l       .debug_str	00000000 
00018966 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
00018c02 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018c0f l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00018c15 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00018c55 l       .debug_str	00000000 
00018cc4 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
000189da l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
000189e7 l       .debug_str	00000000 
00018a2d l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
00018a51 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
00018a54 l       .debug_str	00000000 
00018a94 l       .debug_str	00000000 
00018aa3 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00018aeb l       .debug_str	00000000 
00018b32 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018b40 l       .debug_str	00000000 
00018b84 l       .debug_str	00000000 
00018b8f l       .debug_str	00000000 
00018b98 l       .debug_str	00000000 
00018ba0 l       .debug_str	00000000 
0005a529 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018ba9 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
00018bc5 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00018bdf l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001d4bd l       .debug_str	00000000 
00018bf5 l       .debug_str	00000000 
00018bfb l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
0005daa9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
200000f0 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000a1c l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
00018a51 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
0001ab65 l       .debug_str	00000000 
00059ccf l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0001abb5 l       .debug_str	00000000 
0001abc1 l       .debug_str	00000000 
0001ac5d l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
0001a586 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0001ad00 l       .debug_str	00000000 
0001adca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
00018ccb l       .debug_str	00000000 
00018cd1 l       .debug_str	00000000 
0001abba l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
00018cd6 l       .debug_str	00000000 
00018cdd l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
00019d20 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001abe5 l       .debug_str	00000000 
00019d2c l       .debug_str	00000000 
00019d32 l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
0001a580 l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
0001ad24 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0001a58a l       .debug_str	00000000 
0001a5ed l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001a6bd l       .debug_str	00000000 
0001a700 l       .debug_str	00000000 
0001a7a5 l       .debug_str	00000000 
0001a7e3 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
0001a897 l       .debug_str	00000000 
0001a939 l       .debug_str	00000000 
0001a9c7 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ce31 l       .debug_str	00000000 
0001ce4d l       .debug_str	00000000 
0001aa38 l       .debug_str	00000000 
0001aac8 l       .debug_str	00000000 
0001d544 l       .debug_str	00000000 
0001d4e6 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0001f320 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0001b7d1 l       .debug_str	00000000 
0001b735 l       .debug_str	00000000 
0001b77b l       .debug_str	00000000 
0001b81a l       .debug_str	00000000 
0001b860 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00000e74 l       .debug_str	00000000 
0001b89a l       .debug_str	00000000 
0001b8e1 l       .debug_str	00000000 
0001b92f l       .debug_str	00000000 
0001b97b l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
00018c02 l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
0005daa9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018c0f l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00018c15 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00018c55 l       .debug_str	00000000 
0001b9bb l       .debug_str	00000000 
0001ba67 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bb39 l       .debug_str	00000000 
0001ab65 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
0001bb52 l       .debug_str	00000000 
0003ea72 l       .debug_str	00000000 
000073c7 l       .debug_str	00000000 
0003b622 l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0002443b l       .debug_str	00000000 
0001bb55 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0001bb5c l       .debug_str	00000000 
0005b312 l       .debug_str	00000000 
00018a41 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0005a529 l       .debug_str	00000000 
000159c6 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001bb68 l       .debug_str	00000000 
0001bb74 l       .debug_str	00000000 
0001bb80 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0001bb8d l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001abb5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001add3 l       .debug_str	00000000 
0001addc l       .debug_str	00000000 
0001ade6 l       .debug_str	00000000 
0001adf6 l       .debug_str	00000000 
0001bb46 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
0001af08 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
00018a51 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001af14 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001af1f l       .debug_str	00000000 
0001af5b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001af7a l       .debug_str	00000000 
0001afc8 l       .debug_str	00000000 
0001b009 l       .debug_str	00000000 
0001b075 l       .debug_str	00000000 
0001b0b7 l       .debug_str	00000000 
0001b123 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001b18f l       .debug_str	00000000 
0001b1dd l       .debug_str	00000000 
0001b35d l       .debug_str	00000000 
0001b3ab l       .debug_str	00000000 
0001b3ec l       .debug_str	00000000 
0001b43a l       .debug_str	00000000 
0001b47b l       .debug_str	00000000 
0001b4cb l       .debug_str	00000000 
0001b64d l       .debug_str	00000000 
0001b69e l       .debug_str	00000000 
0001b6e2 l       .debug_str	00000000 
0001f4a0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0001af08 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bc6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001bc04 l       .debug_str	00000000 
0001bc40 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0001bcd6 l       .debug_str	00000000 
000039bb l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001bd14 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001bc92 l       .debug_str	00000000 
00011bf2 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0001c39a l       .debug_str	00000000 
0001c9be l       .debug_str	00000000 
0001cb11 l       .debug_str	00000000 
0001cb41 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
00018bc5 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00018bdf l       .debug_str	00000000 
0001d4bd l       .debug_str	00000000 
0001d4a0 l       .debug_str	00000000 
0001cc68 l       .debug_str	00000000 
0001cc98 l       .debug_str	00000000 
0001d544 l       .debug_str	00000000 
0001d4e6 l       .debug_str	00000000 
0001ccda l       .debug_str	00000000 
0001cd0a l       .debug_str	00000000 
0001cd59 l       .debug_str	00000000 
0001cd89 l       .debug_str	00000000 
0001cd9b l       .debug_str	00000000 
0001cdcb l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0001ce0d l       .debug_str	00000000 
0001ce3a l       .debug_str	00000000 
0001ce7d l       .debug_str	00000000 
0001ce93 l       .debug_str	00000000 
0001cfd7 l       .debug_str	00000000 
0001d073 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0001d156 l       .debug_str	00000000 
0001d235 l       .debug_str	00000000 
0001d37e l       .debug_str	00000000 
0001d49b l       .debug_str	00000000 
0001d4d3 l       .debug_str	00000000 
0001d518 l       .debug_str	00000000 
0001d520 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
0001bd1f l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001bd44 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
0001bd4b l       .debug_str	00000000 
0001bd86 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001bdbd l       .debug_str	00000000 
0001bded l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
00018ccb l       .debug_str	00000000 
00018cd6 l       .debug_str	00000000 
00018cdd l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
0001ce31 l       .debug_str	00000000 
0001be00 l       .debug_str	00000000 
0001be30 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ce4d l       .debug_str	00000000 
0001be67 l       .debug_str	00000000 
0001be97 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
0001bee4 l       .debug_str	00000000 
0001bf14 l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
0001bf34 l       .debug_str	00000000 
0001bf64 l       .debug_str	00000000 
0001abba l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
00019d20 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001abe5 l       .debug_str	00000000 
0001c0b2 l       .debug_str	00000000 
0001c0e2 l       .debug_str	00000000 
00018cd1 l       .debug_str	00000000 
00019d2c l       .debug_str	00000000 
00019d32 l       .debug_str	00000000 
0001a580 l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
0001ad24 l       .debug_str	00000000 
0001c188 l       .debug_str	00000000 
0001c1b8 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c292 l       .debug_str	00000000 
0001c2c2 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
00026cca l       .debug_str	00000000 
0001c875 l       .debug_str	00000000 
0001c8a5 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
0001c98e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
000584e9 l       .debug_str	00000000 
0001d54f l       .debug_str	00000000 
0001d580 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0001d589 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0001db54 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
0001d9d0 l       .debug_str	00000000 
0001da8d l       .debug_str	00000000 
0001dac8 l       .debug_str	00000000 
0001db21 l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001dc0c l       .debug_str	00000000 
0001dc70 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0001dc73 l       .debug_str	00000000 
00019d26 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
0001dce3 l       .debug_str	00000000 
00024d73 l       .debug_str	00000000 
00057b62 l       .debug_str	00000000 
0005f482 l       .debug_str	00000000 
0001dd1d l       .debug_str	00000000 
0001dd20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005d86 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
0001dd2d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001d5db l       .debug_str	00000000 
0001d678 l       .debug_str	00000000 
0001d6b1 l       .debug_str	00000000 
0001d750 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
0001d789 l       .debug_str	00000000 
0001d826 l       .debug_str	00000000 
0001d85a l       .debug_str	00000000 
0001d8fd l       .debug_str	00000000 
0001d99c l       .debug_str	00000000 
0001f600 l     O .text	0000001c str.0
0001f630 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0001dd2d l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0001ddec l       .debug_str	00000000 
0001de61 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
0001de98 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd7d l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
0001ed35 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
0001dffb l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bc6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001df27 l       .debug_str	00000000 
0001dfe8 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00024d3b l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bb39 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001add3 l       .debug_str	00000000 
0001addc l       .debug_str	00000000 
0001ade6 l       .debug_str	00000000 
0001adf6 l       .debug_str	00000000 
0001bb46 l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e0e9 l       .debug_str	00000000 
0001dfe8 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
0001e190 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001b71 l       .debug_str	00000000 
0001e287 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0001e237 l       .debug_str	00000000 
0001e270 l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000d930 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
0001e2c0 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1dj5xwzbw170pcth
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e39f l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1h94gy75t1lfyk2m
00000f66 l       .debug_str	00000000 
0001e40e l       .debug_str	00000000 
0001e44e l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00010ce0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 21g9i1epq5ht4p79
0000c922 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0000cbfc l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e495 l       .debug_str	00000000 
0000663b l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000ca08 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 22m4u7gnp4iz6z75
0000cae1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007762 l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000776a l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007779 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
0001e4fe l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jghko95f1fcw2kw
0001e6fe l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001e57d l       .debug_str	00000000 
0000659a l       .debug_str	00000000 
0001e5c2 l       .debug_str	00000000 
0001e607 l       .debug_str	00000000 
0001e614 l       .debug_str	00000000 
0001e659 l       .debug_str	00000000 
0001e666 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
0001e6ab l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001e6f3 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
0001e746 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001e78c l       .debug_str	00000000 
0001e7d2 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e539 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2t4h7x9pofzwxo58
0001e8ad l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0001e8ec l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
0001e95f l       .debug_str	00000000 
0001e99e l       .debug_str	00000000 
0001ea7c l       .debug_str	00000000 
0001e9db l       .debug_str	00000000 
0001ea3e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001ea65 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001e818 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31djkeejljxsexfi
00005f22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ea86 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001eae9 l       .debug_str	00000000 
0001eadd l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0001eaf0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44vzahdamekpfupi
00007261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001eafb l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 48kp7dqlhcnw98ww
0001492d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
00014bc1 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001eb4d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4jc7ajwyicjft5df
00006b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001eb7d l       .debug_str	00000000 
0001eba3 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xzrg48g93icjbc1
0005a053 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0001ebac l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ebbf l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001ec4b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0001ec54 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0001ec64 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
0002009c l       .debug_str	00000000 
0001f190 l       .debug_str	00000000 
0001f1ba l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0001f208 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
0001f255 l       .debug_str	00000000 
0001f2af l       .debug_str	00000000 
0001f2bd l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
0001f318 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0001f36d l       .debug_str	00000000 
000063fa l       .debug_str	00000000 
0001f3ab l       .debug_str	00000000 
0001f40a l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001f46f l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
0001f4a0 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
0001f4d2 l       .debug_str	00000000 
0001696e l       .debug_str	00000000 
0001f500 l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
0001f526 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0001f56d l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
0001f5b8 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001f5be l       .debug_str	00000000 
0001f64a l       .debug_str	00000000 
0001f665 l       .debug_str	00000000 
0001f695 l       .debug_str	00000000 
0001f6ca l       .debug_str	00000000 
0001f6fa l       .debug_str	00000000 
0001f710 l       .debug_str	00000000 
00006730 l       .debug_str	00000000 
0001f746 l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
0001f780 l       .debug_str	00000000 
0001f7bc l       .debug_str	00000000 
00006806 l       .debug_str	00000000 
0001f7e2 l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
0001f809 l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
0001f857 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0001f8a8 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
0001f8fa l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
0001f945 l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
0001f988 l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
0001f9e4 l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
0001fa43 l       .debug_str	00000000 
0001fa99 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
0001fb2e l       .debug_str	00000000 
0001fbc8 l       .debug_str	00000000 
0001fbd9 l       .debug_str	00000000 
0001fbfe l       .debug_str	00000000 
0001fca7 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0001fcb8 l       .debug_str	00000000 
0001fd40 l       .debug_str	00000000 
0001fcf7 l       .debug_str	00000000 
0001fd3b l       .debug_str	00000000 
0001fd85 l       .debug_str	00000000 
0001fdc6 l       .debug_str	00000000 
0001fdeb l       .debug_str	00000000 
0001fe3c l       .debug_str	00000000 
0001fe81 l       .debug_str	00000000 
0001fed4 l       .debug_str	00000000 
0001ff35 l       .debug_str	00000000 
0001ff9c l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0001ffe3 l       .debug_str	00000000 
0002002e l       .debug_str	00000000 
0002003b l       .debug_str	00000000 
00020115 l       .debug_str	00000000 
0002010d l       .debug_str	00000000 
0002011d l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
00020139 l       .debug_str	00000000 
000201ae l       .debug_str	00000000 
000201d9 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
00020252 l       .debug_str	00000000 
00020278 l       .debug_str	00000000 
000202b1 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
000202c9 l       .debug_str	00000000 
00020302 l       .debug_str	00000000 
0002033a l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
00020373 l       .debug_str	00000000 
000203ae l       .debug_str	00000000 
000203f2 l       .debug_str	00000000 
00020438 l       .debug_str	00000000 
00020474 l       .debug_str	00000000 
0002049c l       .debug_str	00000000 
000204d8 l       .debug_str	00000000 
000204fc l       .debug_str	00000000 
00020559 l       .debug_str	00000000 
0002056d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
000205be l       .debug_str	00000000 
0002060f l       .debug_str	00000000 
00020626 l       .debug_str	00000000 
00017bbe l       .debug_str	00000000 
00020677 l       .debug_str	00000000 
00006d2b l       .debug_str	00000000 
000206c8 l       .debug_str	00000000 
00006d95 l       .debug_str	00000000 
00020720 l       .debug_str	00000000 
00020783 l       .debug_str	00000000 
000207ae l       .debug_str	00000000 
00020811 l       .debug_str	00000000 
00020886 l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
000208ea l       .debug_str	00000000 
00020955 l       .debug_str	00000000 
00020964 l       .debug_str	00000000 
000209d0 l       .debug_str	00000000 
00020a02 l       .debug_str	00000000 
00020a28 l       .debug_str	00000000 
00020a97 l       .debug_str	00000000 
00020ab7 l       .debug_str	00000000 
00020b27 l       .debug_str	00000000 
00020b48 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
00020bbc l       .debug_str	00000000 
00020c3c l       .debug_str	00000000 
00020c82 l       .debug_str	00000000 
00020cab l       .debug_str	00000000 
00020cb2 l       .debug_str	00000000 
00020cea l       .debug_str	00000000 
00020d29 l       .debug_str	00000000 
00020d30 l       .debug_str	00000000 
00020da9 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00020e40 l       .debug_str	00000000 
00020ebe l       .debug_str	00000000 
00020ec8 l       .debug_str	00000000 
00020f56 l       .debug_str	00000000 
00021002 l       .debug_str	00000000 
00021049 l       .debug_str	00000000 
00021056 l       .debug_str	00000000 
000210a3 l       .debug_str	00000000 
000210b6 l       .debug_str	00000000 
00021108 l       .debug_str	00000000 
00021178 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211e9 l       .debug_str	00000000 
0002124e l       .debug_str	00000000 
0002127e l       .debug_str	00000000 
00021287 l       .debug_str	00000000 
000212c3 l       .debug_str	00000000 
000212d7 l       .debug_str	00000000 
00021312 l       .debug_str	00000000 
00021358 l       .debug_str	00000000 
00021376 l       .debug_str	00000000 
000213a6 l       .debug_str	00000000 
000213af l       .debug_str	00000000 
000213e9 l       .debug_str	00000000 
000213fb l       .debug_str	00000000 
00021429 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
0002143c l       .debug_str	00000000 
00021446 l       .debug_str	00000000 
00021450 l       .debug_str	00000000 
00021473 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
000214c8 l       .debug_str	00000000 
00021528 l       .debug_str	00000000 
00021534 l       .debug_str	00000000 
00021584 l       .debug_str	00000000 
000215e7 l       .debug_str	00000000 
0002164e l       .debug_str	00000000 
000216bd l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
0002174d l       .debug_str	00000000 
00059c1d l       .debug_str	00000000 
0004e17c l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00005d14 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00021774 l       .debug_str	00000000 
0002179f l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
0000738e l       .debug_str	00000000 
000217ab l       .debug_str	00000000 
00020ec3 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000217cb l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
00021806 l       .debug_str	00000000 
0002180d l       .debug_str	00000000 
00035157 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
0002186f l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00021891 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001ec8b l       .debug_str	00000000 
0001ece3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001ed30 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ed3a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001ed46 l       .debug_str	00000000 
00021785 l       .debug_str	00000000 
00021779 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001ed57 l       .debug_str	00000000 
00006180 l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
0001ed80 l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00006226 l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0001eda9 l       .debug_str	00000000 
00006299 l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00021828 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0001edf5 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0002026a l       .debug_str	00000000 
000217de l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000216e1 l       .debug_str	00000000 
00021672 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001edfb l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00020253 l       .debug_str	00000000 
0001ee24 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
00006dab l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00006db6 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
0001ee58 l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
000227e4 l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0001ee8f l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001678a l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
0001eed1 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0001eee0 l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
0002187b l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0001eeea l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
0001ef7a l       .debug_str	00000000 
0001f00c l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001f052 l       .debug_str	00000000 
0001f0e6 l       .debug_str	00000000 
0001f148 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0002190b l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0002195c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021899 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000218b8 l       .debug_str	00000000 
0000a7cf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00021fb7 l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
00005e00 l       .debug_str	00000000 
00021a03 l       .debug_str	00000000 
00021a38 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00021a44 l       .debug_str	00000000 
00021a7c l       .debug_str	00000000 
00021a96 l       .debug_str	00000000 
00021aa0 l       .debug_str	00000000 
00021aa8 l       .debug_str	00000000 
00021ab0 l       .debug_str	00000000 
00021aec l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00021aff l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00021b07 l       .debug_str	00000000 
00021b3f l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00021b47 l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
00021b87 l       .debug_str	00000000 
00021bbf l       .debug_str	00000000 
00021bd9 l       .debug_str	00000000 
00021be2 l       .debug_str	00000000 
00021c1a l       .debug_str	00000000 
00021c23 l       .debug_str	00000000 
00021c5b l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00021ce3 l       .debug_str	00000000 
00021d2b l       .debug_str	00000000 
00021d36 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00021d74 l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
00021d9d l       .debug_str	00000000 
00021dc2 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000859d l       .debug_str	00000000 
00021e21 l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
00021e49 l       .debug_str	00000000 
00021e7a l       .debug_str	00000000 
00021e86 l       .debug_str	00000000 
00021ee5 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00021f17 l       .debug_str	00000000 
00021f5f l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00021f6c l       .debug_str	00000000 
00021fc7 l       .debug_str	00000000 
00021fd5 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
00008a11 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
0002201d l       .debug_str	00000000 
00008a5d l       .debug_str	00000000 
00022058 l       .debug_str	00000000 
00016a5a l       .debug_str	00000000 
00016a73 l       .debug_str	00000000 
0002208f l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
000220e1 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
00022136 l       .debug_str	00000000 
00016a60 l       .debug_str	00000000 
00022169 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
000221af l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
000221f8 l       .debug_str	00000000 
0002226d l       .debug_str	00000000 
0002229a l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00022326 l       .debug_str	00000000 
000223a9 l       .debug_str	00000000 
000223d8 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00022425 l       .debug_str	00000000 
00022455 l       .debug_str	00000000 
000224a3 l       .debug_str	00000000 
000224d3 l       .debug_str	00000000 
00022521 l       .debug_str	00000000 
00022551 l       .debug_str	00000000 
0002259f l       .debug_str	00000000 
000225d0 l       .debug_str	00000000 
0002261f l       .debug_str	00000000 
00022650 l       .debug_str	00000000 
0002269f l       .debug_str	00000000 
000226cf l       .debug_str	00000000 
000226d7 l       .debug_str	00000000 
00022707 l       .debug_str	00000000 
0002270f l       .debug_str	00000000 
0002274d l       .debug_str	00000000 
00022762 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014fc8 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0002278e l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
000227e4 l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
000227e3 l       .debug_str	00000000 
000227e7 l       .debug_str	00000000 
000227f1 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000227f7 l       .debug_str	00000000 
000227fb l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
00022800 l       .debug_str	00000000 
000227ff l       .debug_str	00000000 
00022803 l       .debug_str	00000000 
00022807 l       .debug_str	00000000 
0002280c l       .debug_str	00000000 
0002280b l       .debug_str	00000000 
0002280f l       .debug_str	00000000 
00022813 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021964 l       .debug_str	00000000 
000219b9 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00013100 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00022817 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
0002289c l       .debug_str	00000000 
00022909 l       .debug_str	00000000 
0002297b l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000229d9 l       .debug_str	00000000 
0004c75b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0000c922 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000229f6 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00022a57 l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00022aba l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002301f l       .debug_str	00000000 
0002308a l       .debug_str	00000000 
000230d0 l       .debug_str	00000000 
00023142 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00023339 l       .debug_str	00000000 
000233ab l       .debug_str	00000000 
000233f5 l       .debug_str	00000000 
0002343f l       .debug_str	00000000 
0002363e l       .debug_str	00000000 
0002367a l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
000236bf l       .debug_str	00000000 
000236fc l       .debug_str	00000000 
000238ef l       .debug_str	00000000 
0002392c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00023972 l       .debug_str	00000000 
00023b78 l       .debug_str	00000000 
00023bd1 l       .debug_str	00000000 
00023dd3 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
00022b22 l       .debug_str	00000000 
00022d14 l       .debug_str	00000000 
00022d7c l       .debug_str	00000000 
00022dc1 l       .debug_str	00000000 
00022e2c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00023e28 l       .debug_str	00000000 
00023e84 l       .debug_str	00000000 
00023ee1 l       .debug_str	00000000 
00023f3e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0000c9d7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00023f9b l       .debug_str	00000000 
0002400c l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00024018 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
00024089 l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
000245b1 l       .debug_str	00000000 
00024556 l       .debug_str	00000000 
00024569 l       .debug_str	00000000 
000245a8 l       .debug_str	00000000 
000245c3 l       .debug_str	00000000 
000245fb l       .debug_str	00000000 
0002460f l       .debug_str	00000000 
0001593b l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0005dd4d l       .debug_str	00000000 
0002463b l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
0002463f l       .debug_str	00000000 
0005d27b l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
0000ffb1 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
0005c359 l       .debug_str	00000000 
0004a9a6 l       .debug_str	00000000 
00016e32 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00059b6b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00024647 l       .debug_str	00000000 
0005d3af l       .debug_str	00000000 
0005b6ef l       .debug_str	00000000 
000595e1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b312 l       .debug_str	00000000 
000189da l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
000240fa l       .debug_str	00000000 
0002412b l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
00024137 l       .debug_str	00000000 
00024167 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
00024174 l       .debug_str	00000000 
000241a5 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
00010c56 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
00010bda l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
00010c5f l       .debug_str	00000000 
00010c6a l       .debug_str	00000000 
000241ad l       .debug_str	00000000 
000241d8 l       .debug_str	00000000 
000241e9 l       .debug_str	00000000 
0002421e l       .debug_str	00000000 
000101da l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0000fe95 l       .debug_str	00000000 
0000fe9d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fea7 l       .debug_str	00000000 
00010149 l       .debug_str	00000000 
00010130 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
0001012b l       .debug_str	00000000 
00010158 l       .debug_str	00000000 
000101e2 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000101e8 l       .debug_str	00000000 
0002422d l       .debug_str	00000000 
00024260 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
00024270 l       .debug_str	00000000 
000242a4 l       .debug_str	00000000 
000242ad l       .debug_str	00000000 
000242d9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000242e8 l       .debug_str	00000000 
0002431b l       .debug_str	00000000 
00024328 l       .debug_str	00000000 
00024334 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00024365 l       .debug_str	00000000 
0002439a l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000243ab l       .debug_str	00000000 
000243dd l       .debug_str	00000000 
000243eb l       .debug_str	00000000 
00024429 l       .debug_str	00000000 
00024443 l       .debug_str	00000000 
0002447e l       .debug_str	00000000 
00024495 l       .debug_str	00000000 
000244d1 l       .debug_str	00000000 
000244e9 l       .debug_str	00000000 
0002451f l       .debug_str	00000000 
20000a20 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20000a28 l     O .bss	00000804 _ZN6mynewt3spi12PENDING_DATA17h17892bfe7f609123E
200016b4 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00013e98 l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000123c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
200012b4 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20001254 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20001234 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
0001412c l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
00014316 l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00014934 l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000145fe l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000122c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20001264 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00014a5c l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001f8f0 l     O .text	00000021 str.0
0001f930 l     O .text	0000001c str.1
0001f980 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
0000ffde l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00024652 l       .debug_str	00000000 
000246a4 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000ffb1 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0001bd1a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000246c9 l       .debug_str	00000000 
000246f2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00024783 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000246ff l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00024728 l       .debug_str	00000000 
0002477d l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00024a64 l       .debug_str	00000000 
000248cc l       .debug_str	00000000 
00024908 l       .debug_str	00000000 
00024924 l       .debug_str	00000000 
00024960 l       .debug_str	00000000 
00024996 l       .debug_str	00000000 
000249d2 l       .debug_str	00000000 
000249dd l       .debug_str	00000000 
00024a19 l       .debug_str	00000000 
00024a27 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00024a9b l       .debug_str	00000000 
00024ad8 l       .debug_str	00000000 
00024ae7 l       .debug_str	00000000 
00024b24 l       .debug_str	00000000 
00024b67 l       .debug_str	00000000 
00024ba4 l       .debug_str	00000000 
0001bd1f l       .debug_str	00000000 
00024bdb l       .debug_str	00000000 
00024c19 l       .debug_str	00000000 
00024c50 l       .debug_str	00000000 
00024c8f l       .debug_str	00000000 
00024cc8 l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00024d2c l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001de98 l       .debug_str	00000000 
00024d47 l       .debug_str	00000000 
00024d64 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
00005e09 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dce3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024d73 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00024787 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
000247a3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
000247b0 l       .debug_str	00000000 
000247e9 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
00024884 l       .debug_str	00000000 
000248c0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005c691 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
00025854 l       .debug_str	00000000 
000258bf l       .debug_str	00000000 
000259f0 l       .debug_str	00000000 
00025a5d l       .debug_str	00000000 
00025acf l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
00025be8 l       .debug_str	00000000 
00025c5a l       .debug_str	00000000 
00025d8f l       .debug_str	00000000 
00025e01 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
00025eec l       .debug_str	00000000 
00025f36 l       .debug_str	00000000 
00026073 l       .debug_str	00000000 
000260ae l       .debug_str	00000000 
000261b6 l       .debug_str	00000000 
000261f1 l       .debug_str	00000000 
00026320 l       .debug_str	00000000 
0002635b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024787 l       .debug_str	00000000 
00026425 l       .debug_str	00000000 
00026461 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
0002654c l       .debug_str	00000000 
00026588 l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
00026691 l       .debug_str	00000000 
000266ce l       .debug_str	00000000 
000267d8 l       .debug_str	00000000 
00026815 l       .debug_str	00000000 
00026946 l       .debug_str	00000000 
000269c7 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
00026afc l       .debug_str	00000000 
00026b7a l       .debug_str	00000000 
00026caa l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00026cb6 l       .debug_str	00000000 
00026d95 l       .debug_str	00000000 
00026eae l       .debug_str	00000000 
00026fee l       .debug_str	00000000 
0002710b l       .debug_str	00000000 
0002724f l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c39a l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
00026cca l       .debug_str	00000000 
00024db5 l       .debug_str	00000000 
00024e43 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00024f4b l       .debug_str	00000000 
00024f64 l       .debug_str	00000000 
0002d43f l       .debug_str	00000000 
00024f8a l       .debug_str	00000000 
00024ff0 l       .debug_str	00000000 
000250fa l       .debug_str	00000000 
00025160 l       .debug_str	00000000 
00025291 l       .debug_str	00000000 
000252f9 l       .debug_str	00000000 
000253c4 l       .debug_str	00000000 
0002542c l       .debug_str	00000000 
00025535 l       .debug_str	00000000 
0002559d l       .debug_str	00000000 
000256cd l       .debug_str	00000000 
00025738 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0001fae0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00027398 l       .debug_str	00000000 
000273e3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00025f36 l       .debug_str	00000000 
0002969f l       .debug_str	00000000 
00029728 l       .debug_str	00000000 
00029862 l       .debug_str	00000000 
000298eb l       .debug_str	00000000 
000299fe l       .debug_str	00000000 
00029a8a l       .debug_str	00000000 
00029b16 l       .debug_str	00000000 
00029c2c l       .debug_str	00000000 
00029cb8 l       .debug_str	00000000 
00029da6 l       .debug_str	00000000 
00026461 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
00029e24 l       .debug_str	00000000 
00026588 l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
00029ea2 l       .debug_str	00000000 
000266ce l       .debug_str	00000000 
00029f21 l       .debug_str	00000000 
00026815 l       .debug_str	00000000 
00029fa0 l       .debug_str	00000000 
00024ff0 l       .debug_str	00000000 
0002a01f l       .debug_str	00000000 
00025160 l       .debug_str	00000000 
0002a09e l       .debug_str	00000000 
0002a120 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
0002a22d l       .debug_str	00000000 
0002a2af l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002a394 l       .debug_str	00000000 
0002a416 l       .debug_str	00000000 
0002a4e5 l       .debug_str	00000000 
0002a4fc l       .debug_str	00000000 
0002a57e l       .debug_str	00000000 
0002a6b2 l       .debug_str	00000000 
0002a734 l       .debug_str	00000000 
0002a819 l       .debug_str	00000000 
0002a89b l       .debug_str	00000000 
0002a9a8 l       .debug_str	00000000 
0002aa2a l       .debug_str	00000000 
0002ab5e l       .debug_str	00000000 
0002abe0 l       .debug_str	00000000 
0002acaf l       .debug_str	00000000 
0002ad31 l       .debug_str	00000000 
0002ae65 l       .debug_str	00000000 
0002aee7 l       .debug_str	00000000 
0002aff4 l       .debug_str	00000000 
0002b050 l       .debug_str	00000000 
0002b14a l       .debug_str	00000000 
0002b282 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
0002b3e1 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0002b4fe l       .debug_str	00000000 
0002d374 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b510 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0002b515 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0002b649 l       .debug_str	00000000 
0002b7a4 l       .debug_str	00000000 
0002b8b0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00027415 l       .debug_str	00000000 
00027482 l       .debug_str	00000000 
00027518 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
000275d7 l       .debug_str	00000000 
0002769c l       .debug_str	00000000 
0002776e l       .debug_str	00000000 
00027837 l       .debug_str	00000000 
00027921 l       .debug_str	00000000 
00027a28 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b3f3 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c39a l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027b2e l       .debug_str	00000000 
00027bb0 l       .debug_str	00000000 
00027c9e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
00027d86 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
00027e96 l       .debug_str	00000000 
00027ee7 l       .debug_str	00000000 
00027fd6 l       .debug_str	00000000 
000280be l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
000281cc l       .debug_str	00000000 
00028247 l       .debug_str	00000000 
00028331 l       .debug_str	00000000 
00028415 l       .debug_str	00000000 
00028521 l       .debug_str	00000000 
0002856d l       .debug_str	00000000 
00028658 l       .debug_str	00000000 
00028742 l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
0002884c l       .debug_str	00000000 
0002894d l       .debug_str	00000000 
000289a3 l       .debug_str	00000000 
00028aa1 l       .debug_str	00000000 
00028af7 l       .debug_str	00000000 
00028c44 l       .debug_str	00000000 
00028c9a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028dc0 l       .debug_str	00000000 
00028e47 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
00028f1a l       .debug_str	00000000 
00028fa1 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
000290b2 l       .debug_str	00000000 
00029139 l       .debug_str	00000000 
00029271 l       .debug_str	00000000 
000292f9 l       .debug_str	00000000 
000293cd l       .debug_str	00000000 
00029456 l       .debug_str	00000000 
0002952b l       .debug_str	00000000 
000295b4 l       .debug_str	00000000 
0001fb60 l     O .text	00000021 str.0
0001fba0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0000996c l       .debug_str	00000000 
0002bcab l       .debug_str	00000000 
0002bcb8 l       .debug_str	00000000 
0002bcf8 l       .debug_str	00000000 
0002bdf5 l       .debug_str	00000000 
0002be35 l       .debug_str	00000000 
0002be44 l       .debug_str	00000000 
0002be84 l       .debug_str	00000000 
0002bea3 l       .debug_str	00000000 
0002bee3 l       .debug_str	00000000 
0002beff l       .debug_str	00000000 
0002bf3f l       .debug_str	00000000 
0002bf4d l       .debug_str	00000000 
0002bf8d l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001af14 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002bf9b l       .debug_str	00000000 
0002bfdc l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
0002c011 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0002c01b l       .debug_str	00000000 
0002c05c l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
0002c0a9 l       .debug_str	00000000 
0002c0ea l       .debug_str	00000000 
0002c11f l       .debug_str	00000000 
0002c12a l       .debug_str	00000000 
0002c16b l       .debug_str	00000000 
0002c1b8 l       .debug_str	00000000 
0002c1f9 l       .debug_str	00000000 
0002c22e l       .debug_str	00000000 
0002c29d l       .debug_str	00000000 
0002c39e l       .debug_str	00000000 
0000ad5e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002c40d l       .debug_str	00000000 
0002c42c l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
000587bf l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
0005e82a l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00027415 l       .debug_str	00000000 
00027482 l       .debug_str	00000000 
00027518 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
000275d7 l       .debug_str	00000000 
0002769c l       .debug_str	00000000 
0002776e l       .debug_str	00000000 
00027837 l       .debug_str	00000000 
00027921 l       .debug_str	00000000 
00027a28 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b3f3 l       .debug_str	00000000 
0002884c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002b9a6 l       .debug_str	00000000 
0002ba86 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
0002bb84 l       .debug_str	00000000 
0002bb8b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002bb93 l       .debug_str	00000000 
0002bba7 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002bbd9 l       .debug_str	00000000 
0002bbed l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002bc1f l       .debug_str	00000000 
0002bc5e l       .debug_str	00000000 
0002bc6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0001c514 l       .debug_str	00000000 
0002c5b8 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
0002c6ab l       .debug_str	00000000 
0002c723 l       .debug_str	00000000 
0002c83d l       .debug_str	00000000 
0002c8b5 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002c981 l       .debug_str	00000000 
0002c9f9 l       .debug_str	00000000 
0002cac5 l       .debug_str	00000000 
0002cb3d l       .debug_str	00000000 
0002cbe2 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
0002ccd8 l       .debug_str	00000000 
0002cd50 l       .debug_str	00000000 
0002cda7 l       .debug_str	00000000 
0002ce1f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0002c44a l       .debug_str	00000000 
0002c4c2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
0002c540 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001b71 l       .debug_str	00000000 
0002cf8d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002cec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002cf28 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002d10b l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
0002d12a l       .debug_str	00000000 
0002d1a8 l       .debug_str	00000000 
0002d238 l       .debug_str	00000000 
0002d24f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002cff2 l       .debug_str	00000000 
0002d07e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0002d08d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002d69f l       .debug_str	00000000 
0002d5e3 l       .debug_str	00000000 
0002d600 l       .debug_str	00000000 
0002d609 l       .debug_str	00000000 
0002d64f l       .debug_str	00000000 
0002d658 l       .debug_str	00000000 
0002d8d4 l       .debug_str	00000000 
0002d6e8 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
0002d6f4 l       .debug_str	00000000 
0002d770 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
0002d79b l       .debug_str	00000000 
0002d817 l       .debug_str	00000000 
0002d849 l       .debug_str	00000000 
0002d8cf l       .debug_str	00000000 
0002d8de l       .debug_str	00000000 
0002d238 l       .debug_str	00000000 
0002d94f l       .debug_str	00000000 
0002d9c3 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d9cd l       .debug_str	00000000 
0002d9da l       .debug_str	00000000 
0002da51 l       .debug_str	00000000 
0002da6b l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d2d6 l       .debug_str	00000000 
0002d2ff l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0002b4fe l       .debug_str	00000000 
0002d374 l       .debug_str	00000000 
0002d30c l       .debug_str	00000000 
0002d34e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0002d37e l       .debug_str	00000000 
0002d3a7 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00024f4b l       .debug_str	00000000 
00024f64 l       .debug_str	00000000 
0002d43f l       .debug_str	00000000 
0002d3c4 l       .debug_str	00000000 
0002d409 l       .debug_str	00000000 
0002d42d l       .debug_str	00000000 
0002d45c l       .debug_str	00000000 
00030e95 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
0002d48f l       .debug_str	00000000 
00030ef3 l       .debug_str	00000000 
0002a4e5 l       .debug_str	00000000 
0002d4c2 l       .debug_str	00000000 
00030f75 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
0002d4f9 l       .debug_str	00000000 
00030ff9 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
0002d530 l       .debug_str	00000000 
0002d57e l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0002d58e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001b71 l       .debug_str	00000000 
0002db9b l       .debug_str	00000000 
0002dbed l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002da8c l       .debug_str	00000000 
0002dada l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0002dae3 l       .debug_str	00000000 
0002db33 l       .debug_str	00000000 
0002db3e l       .debug_str	00000000 
0002db8f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002dd09 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0002dbfa l       .debug_str	00000000 
0002dc45 l       .debug_str	00000000 
0002dc58 l       .debug_str	00000000 
0002dca3 l       .debug_str	00000000 
0002dcc6 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0002dd25 l       .debug_str	00000000 
0002d6e8 l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
00016188 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
0002dd68 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2bp05xqc1vzz7bvb
00014b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0002de2d l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4fx9oaepmfmbf8wt
00058907 l       .debug_str	00000000 
0002dfb8 l       .debug_str	00000000 
0002dfd4 l       .debug_str	00000000 
0002dffa l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002de8f l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0002deb8 l       .debug_str	00000000 
0002dec9 l       .debug_str	00000000 
0002ded9 l       .debug_str	00000000 
0002df25 l       .debug_str	00000000 
0002df30 l       .debug_str	00000000 
0002df66 l       .debug_str	00000000 
0002df7e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0002343f l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
0002e7bf l       .debug_str	00000000 
0002392c l       .debug_str	00000000 
0002e83e l       .debug_str	00000000 
000236fc l       .debug_str	00000000 
0002e8bd l       .debug_str	00000000 
0002e93f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002eb35 l       .debug_str	00000000 
0002ebb7 l       .debug_str	00000000 
0002ec00 l       .debug_str	00000000 
0002ec82 l       .debug_str	00000000 
0002ee78 l       .debug_str	00000000 
0002eefa l       .debug_str	00000000 
0002ef43 l       .debug_str	00000000 
0002efc5 l       .debug_str	00000000 
0002f1bb l       .debug_str	00000000 
0002f23d l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002f286 l       .debug_str	00000000 
0002f2fa l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b510 l       .debug_str	00000000 
0002f51b l       .debug_str	00000000 
0002f738 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002e003 l       .debug_str	00000000 
0002e08a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0002e0d7 l       .debug_str	00000000 
0002e15e l       .debug_str	00000000 
0002e358 l       .debug_str	00000000 
0002e3e1 l       .debug_str	00000000 
0002e5dd l       .debug_str	00000000 
0002e666 l       .debug_str	00000000 
0002e6b5 l       .debug_str	00000000 
0002e741 l       .debug_str	00000000 
0002367a l       .debug_str	00000000 
0001fca0 l     O .text	0000001c str.0
0001fce0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f7a8 l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002f7f8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002fea4 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
0002fabd l       .debug_str	00000000 
0002fb35 l       .debug_str	00000000 
0002fcc4 l       .debug_str	00000000 
0002fd3c l       .debug_str	00000000 
0002ff1c l       .debug_str	00000000 
0002ff9a l       .debug_str	00000000 
00030012 l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00030105 l       .debug_str	00000000 
0003017d l       .debug_str	00000000 
0003035a l       .debug_str	00000000 
000303d2 l       .debug_str	00000000 
0003049e l       .debug_str	00000000 
00030516 l       .debug_str	00000000 
00030546 l       .debug_str	00000000 
000305be l       .debug_str	00000000 
00030663 l       .debug_str	00000000 
000306db l       .debug_str	00000000 
0003081c l       .debug_str	00000000 
00030894 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0002f85c l       .debug_str	00000000 
0002f8d4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
0002f92b l       .debug_str	00000000 
0002f9a3 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
0002477d l       .debug_str	00000000 
00030a4a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00030aaa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0000996c l       .debug_str	00000000 
0002db8f l       .debug_str	00000000 
00030c0e l       .debug_str	00000000 
0002dbed l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062af l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030b0a l       .debug_str	00000000 
0002dada l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00030b5c l       .debug_str	00000000 
00030baf l       .debug_str	00000000 
00030bb9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
000584e9 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00030c64 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00030cc1 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00031011 l       .debug_str	00000000 
00030f17 l       .debug_str	00000000 
00030f34 l       .debug_str	00000000 
00030f6f l       .debug_str	00000000 
00030f9d l       .debug_str	00000000 
00030fb8 l       .debug_str	00000000 
00030ff3 l       .debug_str	00000000 
0003101c l       .debug_str	00000000 
00030baf l       .debug_str	00000000 
00031042 l       .debug_str	00000000 
00031068 l       .debug_str	00000000 
00031082 l       .debug_str	00000000 
0002db33 l       .debug_str	00000000 
000310a9 l       .debug_str	00000000 
000310d0 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030d32 l       .debug_str	00000000 
00030d44 l       .debug_str	00000000 
00030d55 l       .debug_str	00000000 
00030da1 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00030dad l       .debug_str	00000000 
00030dcf l       .debug_str	00000000 
00030df0 l       .debug_str	00000000 
00030e3c l       .debug_str	00000000 
00030e58 l       .debug_str	00000000 
00030e8f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00030ea9 l       .debug_str	00000000 
00030eb6 l       .debug_str	00000000 
00030eed l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 27tt2oece7npu1p2
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000310eb l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00031114 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
0002477d l       .debug_str	00000000 
00031150 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000311b0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0003127c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031210 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031285 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
00007261 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000312f6 l       .debug_str	00000000 
00031334 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0003134d l       .debug_str	00000000 
0003138b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
000313b4 l       .debug_str	00000000 
000313c7 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000313f8 l       .debug_str	00000000 
00031400 l       .debug_str	00000000 
00031409 l       .debug_str	00000000 
00031452 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00031410 l       .debug_str	00000000 
0003144f l       .debug_str	00000000 
00031458 l       .debug_str	00000000 
0003149a l       .debug_str	00000000 
000314a4 l       .debug_str	00000000 
000314e7 l       .debug_str	00000000 
000314f1 l       .debug_str	00000000 
00031534 l       .debug_str	00000000 
0003153e l       .debug_str	00000000 
00031581 l       .debug_str	00000000 
0003158c l       .debug_str	00000000 
000315d1 l       .debug_str	00000000 
000315dc l       .debug_str	00000000 
00031621 l       .debug_str	00000000 
00031627 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00031634 l       .debug_str	00000000 
00031644 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0001887a l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0003168a l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00032060 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000588db l       .debug_str	00000000 
0003169c l       .debug_str	00000000 
000316a1 l       .debug_str	00000000 
0005e9fb l       .debug_str	00000000 
000316ac l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
000316b6 l       .debug_str	00000000 
00031d2a l       .debug_str	00000000 
000316c0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00031d6a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000320a3 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000316ce l       .debug_str	00000000 
00031742 l       .debug_str	00000000 
00031f84 l       .debug_str	00000000 
00031754 l       .debug_str	00000000 
00031d70 l       .debug_str	00000000 
00031d4a l       .debug_str	00000000 
0002026a l       .debug_str	00000000 
00031fc7 l       .debug_str	00000000 
00031759 l       .debug_str	00000000 
000317cd l       .debug_str	00000000 
000320dc l       .debug_str	00000000 
00032123 l       .debug_str	00000000 
00032029 l       .debug_str	00000000 
000317e5 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0003213e l       .debug_str	00000000 
00031ff8 l       .debug_str	00000000 
0003185d l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000318b5 l       .debug_str	00000000 
000318ba l       .debug_str	00000000 
000318cc l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
000318d5 l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
000318fd l       .debug_str	00000000 
0003190d l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00031966 l       .debug_str	00000000 
0003196e l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00031976 l       .debug_str	00000000 
00021806 l       .debug_str	00000000 
00031982 l       .debug_str	00000000 
0003198c l       .debug_str	00000000 
00031999 l       .debug_str	00000000 
000319a6 l       .debug_str	00000000 
000319bb l       .debug_str	00000000 
000319cf l       .debug_str	00000000 
000319e5 l       .debug_str	00000000 
000319ed l       .debug_str	00000000 
000319fa l       .debug_str	00000000 
00031a07 l       .debug_str	00000000 
00032310 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00031a14 l       .debug_str	00000000 
00031a41 l       .debug_str	00000000 
00031a70 l       .debug_str	00000000 
00031a97 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031ab6 l       .debug_str	00000000 
00031acb l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00031ad5 l       .debug_str	00000000 
00031afa l       .debug_str	00000000 
00031ae0 l       .debug_str	00000000 
00031b79 l       .debug_str	00000000 
00031b0a l       .debug_str	00000000 
00031b10 l       .debug_str	00000000 
00031b1f l       .debug_str	00000000 
00031b2a l       .debug_str	00000000 
00031b5f l       .debug_str	00000000 
00031b84 l       .debug_str	00000000 
00031b94 l       .debug_str	00000000 
000590f3 l       .debug_str	00000000 
00031bc6 l       .debug_str	00000000 
00031bcb l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00033429 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00033457 l       .debug_str	00000000 
0003348b l       .debug_str	00000000 
00031bd1 l       .debug_str	00000000 
00006221 l       .debug_str	00000000 
00031c0f l       .debug_str	00000000 
00033434 l       .debug_str	00000000 
00033481 l       .debug_str	00000000 
00031bf0 l       .debug_str	00000000 
00031bdd l       .debug_str	00000000 
00031bf6 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00031c1e l       .debug_str	00000000 
00031c26 l       .debug_str	00000000 
0003d0ef l       .debug_str	00000000 
00031c2c l       .debug_str	00000000 
0004ac1a l       .debug_str	00000000 
00031c53 l       .debug_str	00000000 
00031c37 l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
00031c5b l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
00016644 l       .debug_str	00000000 
000187da l       .debug_str	00000000 
00031c60 l       .debug_str	00000000 
00031c84 l       .debug_str	00000000 
00031c8a l       .debug_str	00000000 
00031c92 l       .debug_str	00000000 
0004d285 l       .debug_str	00000000 
0003cceb l       .debug_str	00000000 
00031c97 l       .debug_str	00000000 
00031cbf l       .debug_str	00000000 
00031ca1 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0001664c l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
00016662 l       .debug_str	00000000 
00057851 l       .debug_str	00000000 
00031cd3 l       .debug_str	00000000 
00031cc7 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
00031ce0 l       .debug_str	00000000 
00031cec l       .debug_str	00000000 
00031d0f l       .debug_str	00000000 
00031cf9 l       .debug_str	00000000 
00031d1d l       .debug_str	00000000 
00031d3d l       .debug_str	00000000 
00031d5d l       .debug_str	00000000 
00031d78 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00031d99 l       .debug_str	00000000 
00031d9d l       .debug_str	00000000 
00031dae l       .debug_str	00000000 
00031da1 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00031dc3 l       .debug_str	00000000 
00031dbe l       .debug_str	00000000 
00031dd6 l       .debug_str	00000000 
00031e22 l       .debug_str	00000000 
00031dfb l       .debug_str	00000000 
00031e12 l       .debug_str	00000000 
00031e3c l       .debug_str	00000000 
00031e2d l       .debug_str	00000000 
00031e84 l       .debug_str	00000000 
00031e64 l       .debug_str	00000000 
00031edd l       .debug_str	00000000 
00031ebd l       .debug_str	00000000 
00057843 l       .debug_str	00000000 
00031f34 l       .debug_str	00000000 
00031f39 l       .debug_str	00000000 
00031f3f l       .debug_str	00000000 
00031f62 l       .debug_str	00000000 
00031f44 l       .debug_str	00000000 
00031f6d l       .debug_str	00000000 
00031fb8 l       .debug_str	00000000 
00031fe9 l       .debug_str	00000000 
0003201a l       .debug_str	00000000 
00032049 l       .debug_str	00000000 
00032094 l       .debug_str	00000000 
000320c5 l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000c8a0 l       .debug_str	00000000 
00032116 l       .debug_str	00000000 
0003212f l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
0003215c l       .debug_str	00000000 
00032171 l       .debug_str	00000000 
00032162 l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003219e l       .debug_str	00000000 
00032190 l       .debug_str	00000000 
0003218f l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0005f370 l       .debug_str	00000000 
000321a7 l       .debug_str	00000000 
000321ab l       .debug_str	00000000 
000321ae l       .debug_str	00000000 
0005de60 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
000321b1 l       .debug_str	00000000 
00007416 l       .debug_str	00000000 
000321b5 l       .debug_str	00000000 
000321b4 l       .debug_str	00000000 
000321ba l       .debug_str	00000000 
0003228c l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
000321d8 l       .debug_str	00000000 
000321c6 l       .debug_str	00000000 
000321fd l       .debug_str	00000000 
000322c5 l       .debug_str	00000000 
0003221b l       .debug_str	00000000 
00032209 l       .debug_str	00000000 
00032240 l       .debug_str	00000000 
00032259 l       .debug_str	00000000 
00032247 l       .debug_str	00000000 
00032265 l       .debug_str	00000000 
0003227d l       .debug_str	00000000 
000322b6 l       .debug_str	00000000 
0000741c l       .debug_str	00000000 
000322ef l       .debug_str	00000000 
000322fc l       .debug_str	00000000 
000322fb l       .debug_str	00000000 
00032304 l       .debug_str	00000000 
00032331 l       .debug_str	00000000 
0003231c l       .debug_str	00000000 
0003234e l       .debug_str	00000000 
0003235a l       .debug_str	00000000 
00032404 l       .debug_str	00000000 
00032366 l       .debug_str	00000000 
0003236d l       .debug_str	00000000 
00032376 l       .debug_str	00000000 
00032384 l       .debug_str	00000000 
0003238b l       .debug_str	00000000 
00032393 l       .debug_str	00000000 
0003239a l       .debug_str	00000000 
000323e0 l       .debug_str	00000000 
000323bb l       .debug_str	00000000 
000323a6 l       .debug_str	00000000 
000323cb l       .debug_str	00000000 
000323ef l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00032410 l       .debug_str	00000000 
000187ed l       .debug_str	00000000 
0005bd4a l       .debug_str	00000000 
0000c813 l       .debug_str	00000000 
0000c7fc l       .debug_str	00000000 
0003242a l       .debug_str	00000000 
0003244d l       .debug_str	00000000 
00032436 l       .debug_str	00000000 
00032497 l       .debug_str	00000000 
0003248b l       .debug_str	00000000 
00031902 l       .debug_str	00000000 
000324b4 l       .debug_str	00000000 
0003249d l       .debug_str	00000000 
000324fd l       .debug_str	00000000 
00032525 l       .debug_str	00000000 
0003250e l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000325d4 l       .debug_str	00000000 
000325b6 l       .debug_str	00000000 
000326ca l       .debug_str	00000000 
000326aa l       .debug_str	00000000 
0003273d l       .debug_str	00000000 
0003271d l       .debug_str	00000000 
00048d43 l       .debug_str	00000000 
00032790 l       .debug_str	00000000 
0003279d l       .debug_str	00000000 
000327a8 l       .debug_str	00000000 
000327be l       .debug_str	00000000 
000327c8 l       .debug_str	00000000 
0003281e l       .debug_str	00000000 
00032830 l       .debug_str	00000000 
00032882 l       .debug_str	00000000 
00032896 l       .debug_str	00000000 
000328ea l       .debug_str	00000000 
000328f1 l       .debug_str	00000000 
00032937 l       .debug_str	00000000 
00032946 l       .debug_str	00000000 
000329a0 l       .debug_str	00000000 
000329f6 l       .debug_str	00000000 
00032a4e l       .debug_str	00000000 
00032a98 l       .debug_str	00000000 
00032a9e l       .debug_str	00000000 
00032aee l       .debug_str	00000000 
00032b3a l       .debug_str	00000000 
00032b88 l       .debug_str	00000000 
00018893 l       .debug_str	00000000 
00032bc8 l       .debug_str	00000000 
00032c15 l       .debug_str	00000000 
00032c5e l       .debug_str	00000000 
00032ca9 l       .debug_str	00000000 
00032ce6 l       .debug_str	00000000 
00032cf6 l       .debug_str	00000000 
00032d51 l       .debug_str	00000000 
00032da8 l       .debug_str	00000000 
00032e01 l       .debug_str	00000000 
000400d7 l       .debug_str	00000000 
00032e4c l       .debug_str	00000000 
00032ea0 l       .debug_str	00000000 
00032ef0 l       .debug_str	00000000 
00032f42 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00032f86 l       .debug_str	00000000 
00032fd2 l       .debug_str	00000000 
0003301a l       .debug_str	00000000 
00033064 l       .debug_str	00000000 
0003ff0d l       .debug_str	00000000 
000330a0 l       .debug_str	00000000 
000330f4 l       .debug_str	00000000 
00033144 l       .debug_str	00000000 
00033196 l       .debug_str	00000000 
000331da l       .debug_str	00000000 
000331e6 l       .debug_str	00000000 
0003323d l       .debug_str	00000000 
00033290 l       .debug_str	00000000 
000332e5 l       .debug_str	00000000 
0003332c l       .debug_str	00000000 
00033338 l       .debug_str	00000000 
0003334f l       .debug_str	00000000 
00033348 l       .debug_str	00000000 
00033361 l       .debug_str	00000000 
00033376 l       .debug_str	00000000 
000333c7 l       .debug_str	00000000 
000333d7 l       .debug_str	00000000 
00033428 l       .debug_str	00000000 
00033433 l       .debug_str	00000000 
00033456 l       .debug_str	00000000 
0003348a l       .debug_str	00000000 
000334a0 l       .debug_str	00000000 
000334ce l       .debug_str	00000000 
000334c2 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
000334db l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
000187ff l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00018804 l       .debug_str	00000000 
000334df l       .debug_str	00000000 
0003351f l       .debug_str	00000000 
00033527 l       .debug_str	00000000 
00033567 l       .debug_str	00000000 
00033571 l       .debug_str	00000000 
0005797d l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000335ad l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
000335d5 l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
000335fe l       .debug_str	00000000 
00033623 l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
000589d3 l       .debug_str	00000000 
0003362a l       .debug_str	00000000 
00033633 l       .debug_str	00000000 
0003366c l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00033674 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
00033709 l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00033754 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0003379b l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
000337f0 l       .debug_str	00000000 
0003382d l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00033838 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0003388d l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
000338df l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
00033926 l       .debug_str	00000000 
00014f50 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
000339ac l       .debug_str	00000000 
000339ed l       .debug_str	00000000 
00033a10 l       .debug_str	00000000 
00033a4b l       .debug_str	00000000 
00033a55 l       .debug_str	00000000 
00033adf l       .debug_str	00000000 
00033b11 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00033b85 l       .debug_str	00000000 
00033bd6 l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
00033c18 l       .debug_str	00000000 
00033c9f l       .debug_str	00000000 
00033cae l       .debug_str	00000000 
00033d38 l       .debug_str	00000000 
00033db4 l       .debug_str	00000000 
00033de4 l       .debug_str	00000000 
00033e1f l       .debug_str	00000000 
00033e29 l       .debug_str	00000000 
0000f014 l       .debug_str	00000000 
00033ea0 l       .debug_str	00000000 
00033ef5 l       .debug_str	00000000 
00033efe l       .debug_str	00000000 
00033f4f l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00033f5b l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
00033f68 l       .debug_str	00000000 
00033f71 l       .debug_str	00000000 
00033f87 l       .debug_str	00000000 
00033f94 l       .debug_str	00000000 
00033fd9 l       .debug_str	00000000 
00033fed l       .debug_str	00000000 
00034042 l       .debug_str	00000000 
0003404b l       .debug_str	00000000 
0004b1fa l       .debug_str	00000000 
00034083 l       .debug_str	00000000 
000340c0 l       .debug_str	00000000 
000340cb l       .debug_str	00000000 
0003414e l       .debug_str	00000000 
00034159 l       .debug_str	00000000 
000341df l       .debug_str	00000000 
00034254 l       .debug_str	00000000 
00034280 l       .debug_str	00000000 
00034309 l       .debug_str	00000000 
00034318 l       .debug_str	00000000 
00034325 l       .debug_str	00000000 
00034339 l       .debug_str	00000000 
0003438f l       .debug_str	00000000 
000343fe l       .debug_str	00000000 
0003447e l       .debug_str	00000000 
000344ec l       .debug_str	00000000 
00034577 l       .debug_str	00000000 
000345ec l       .debug_str	00000000 
0003462c l       .debug_str	00000000 
000346af l       .debug_str	00000000 
000346f0 l       .debug_str	00000000 
00048c05 l       .debug_str	00000000 
0004c71f l       .debug_str	00000000 
00034755 l       .debug_str	00000000 
00034804 l       .debug_str	00000000 
0003484f l       .debug_str	00000000 
0001fca7 l       .debug_str	00000000 
000348f8 l       .debug_str	00000000 
00034974 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
00034999 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
000349e6 l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
00034a39 l       .debug_str	00000000 
00034a74 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00034b0b l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
00034b8e l       .debug_str	00000000 
00034c16 l       .debug_str	00000000 
0002226d l       .debug_str	00000000 
00034c8b l       .debug_str	00000000 
00034d11 l       .debug_str	00000000 
000201ae l       .debug_str	00000000 
00034d86 l       .debug_str	00000000 
00015d75 l       .debug_str	00000000 
00034de9 l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00034e4b l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
00034e91 l       .debug_str	00000000 
00034ed9 l       .debug_str	00000000 
00034ee3 l       .debug_str	00000000 
00034f24 l       .debug_str	00000000 
00034f3e l       .debug_str	00000000 
000188b8 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00034f44 l       .debug_str	00000000 
00034f4d l       .debug_str	00000000 
00034fb2 l       .debug_str	00000000 
00034fc1 l       .debug_str	00000000 
00035003 l       .debug_str	00000000 
0003500d l       .debug_str	00000000 
00035072 l       .debug_str	00000000 
000350b4 l       .debug_str	00000000 
000350fe l       .debug_str	00000000 
0003510d l       .debug_str	00000000 
00035143 l       .debug_str	00000000 
0003514c l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00035156 l       .debug_str	00000000 
00035159 l       .debug_str	00000000 
00035191 l       .debug_str	00000000 
0003519b l       .debug_str	00000000 
000351df l       .debug_str	00000000 
000351f5 l       .debug_str	00000000 
0003523e l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
000188a3 l       .debug_str	00000000 
00035283 l       .debug_str	00000000 
000352cc l       .debug_str	00000000 
000352da l       .debug_str	00000000 
00035322 l       .debug_str	00000000 
00016f19 l       .debug_str	00000000 
0003536c l       .debug_str	00000000 
0003eb44 l       .debug_str	00000000 
00035404 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0003549e l       .debug_str	00000000 
0001741f l       .debug_str	00000000 
00035510 l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
000355b3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000355e5 l       .debug_str	00000000 
0003562c l       .debug_str	00000000 
0003563a l       .debug_str	00000000 
00035644 l       .debug_str	00000000 
00035692 l       .debug_str	00000000 
000356a2 l       .debug_str	00000000 
000356ed l       .debug_str	00000000 
000356fb l       .debug_str	00000000 
00035789 l       .debug_str	00000000 
00035798 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
000357e1 l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00035826 l       .debug_str	00000000 
00035860 l       .debug_str	00000000 
00035869 l       .debug_str	00000000 
000358b5 l       .debug_str	00000000 
000358cd l       .debug_str	00000000 
0003592f l       .debug_str	00000000 
0000668d l       .debug_str	00000000 
00035964 l       .debug_str	00000000 
0003598c l       .debug_str	00000000 
000359c4 l       .debug_str	00000000 
000359ed l       .debug_str	00000000 
000359f8 l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
00035a1d l       .debug_str	00000000 
00035aac l       .debug_str	00000000 
00035ae3 l       .debug_str	00000000 
00035b69 l       .debug_str	00000000 
00035bb7 l       .debug_str	00000000 
00035bc0 l       .debug_str	00000000 
00035c46 l       .debug_str	00000000 
00035c59 l       .debug_str	00000000 
00035ce2 l       .debug_str	00000000 
00035d3e l       .debug_str	00000000 
00035d80 l       .debug_str	00000000 
00035e32 l       .debug_str	00000000 
00035e71 l       .debug_str	00000000 
00035f16 l       .debug_str	00000000 
00035faa l       .debug_str	00000000 
00035fd0 l       .debug_str	00000000 
0003604c l       .debug_str	00000000 
00036087 l       .debug_str	00000000 
00036094 l       .debug_str	00000000 
000360cd l       .debug_str	00000000 
000360e5 l       .debug_str	00000000 
00036125 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00036131 l       .debug_str	00000000 
0003618e l       .debug_str	00000000 
000361eb l       .debug_str	00000000 
00036298 l       .debug_str	00000000 
000362f5 l       .debug_str	00000000 
00021528 l       .debug_str	00000000 
00036362 l       .debug_str	00000000 
000363c6 l       .debug_str	00000000 
000363d1 l       .debug_str	00000000 
00036401 l       .debug_str	00000000 
0003642d l       .debug_str	00000000 
00036499 l       .debug_str	00000000 
000364c9 l       .debug_str	00000000 
00036505 l       .debug_str	00000000 
0003654f l       .debug_str	00000000 
0003655f l       .debug_str	00000000 
00036594 l       .debug_str	00000000 
000365d9 l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
00036624 l       .debug_str	00000000 
00036632 l       .debug_str	00000000 
000366be l       .debug_str	00000000 
0003673a l       .debug_str	00000000 
0003675a l       .debug_str	00000000 
000367b4 l       .debug_str	00000000 
000367c1 l       .debug_str	00000000 
000367fa l       .debug_str	00000000 
00036802 l       .debug_str	00000000 
00036857 l       .debug_str	00000000 
000368a9 l       .debug_str	00000000 
0003578e l       .debug_str	00000000 
000368f0 l       .debug_str	00000000 
00036964 l       .debug_str	00000000 
000369a8 l       .debug_str	00000000 
000369f4 l       .debug_str	00000000 
00036a33 l       .debug_str	00000000 
00036a59 l       .debug_str	00000000 
00036a6b l       .debug_str	00000000 
00036a75 l       .debug_str	00000000 
00036ab7 l       .debug_str	00000000 
0000ef71 l       .debug_str	00000000 
00036b3e l       .debug_str	00000000 
00002ed3 l       .debug_str	00000000 
00036bba l       .debug_str	00000000 
00036c31 l       .debug_str	00000000 
00036c7f l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
00036d0f l       .debug_str	00000000 
00036d4b l       .debug_str	00000000 
00036d58 l       .debug_str	00000000 
00036d9e l       .debug_str	00000000 
00036dab l       .debug_str	00000000 
00037af1 l       .debug_str	00000000 
00036ddd l       .debug_str	00000000 
00036e2d l       .debug_str	00000000 
00036e44 l       .debug_str	00000000 
00036ece l       .debug_str	00000000 
00014e9b l       .debug_str	00000000 
00036f4a l       .debug_str	00000000 
00036f5e l       .debug_str	00000000 
00036fbb l       .debug_str	00000000 
00036fca l       .debug_str	00000000 
00036fdb l       .debug_str	00000000 
00037035 l       .debug_str	00000000 
00037044 l       .debug_str	00000000 
000370cd l       .debug_str	00000000 
000370db l       .debug_str	00000000 
00037131 l       .debug_str	00000000 
00037185 l       .debug_str	00000000 
000371fe l       .debug_str	00000000 
00037216 l       .debug_str	00000000 
00037220 l       .debug_str	00000000 
000372b7 l       .debug_str	00000000 
000372d1 l       .debug_str	00000000 
0000a45e l       .debug_str	00000000 
0003730a l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0003736f l       .debug_str	00000000 
00037406 l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
000376ff l       .debug_str	00000000 
0003740f l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
00037441 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
0003747f l       .debug_str	00000000 
00014c6c l       .debug_str	00000000 
000374d2 l       .debug_str	00000000 
0003755e l       .debug_str	00000000 
000375da l       .debug_str	00000000 
000375f9 l       .debug_str	00000000 
00037644 l       .debug_str	00000000 
00037651 l       .debug_str	00000000 
000376c5 l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
0004d13e l       .debug_str	00000000 
000376e4 l       .debug_str	00000000 
00037704 l       .debug_str	00000000 
00037720 l       .debug_str	00000000 
0003772a l       .debug_str	00000000 
000377b6 l       .debug_str	00000000 
00037832 l       .debug_str	00000000 
00037863 l       .debug_str	00000000 
000378e6 l       .debug_str	00000000 
00037906 l       .debug_str	00000000 
0003798c l       .debug_str	00000000 
00037a01 l       .debug_str	00000000 
0001ec54 l       .debug_str	00000000 
0005a97c l       .debug_str	00000000 
00037a42 l       .debug_str	00000000 
000174e5 l       .debug_str	00000000 
00037a8d l       .debug_str	00000000 
00037ae9 l       .debug_str	00000000 
00037af5 l       .debug_str	00000000 
00037b3e l       .debug_str	00000000 
00037b4e l       .debug_str	00000000 
00037b93 l       .debug_str	00000000 
00037bdc l       .debug_str	00000000 
00037c21 l       .debug_str	00000000 
00037c7d l       .debug_str	00000000 
00037cc8 l       .debug_str	00000000 
00037d0f l       .debug_str	00000000 
00037d6d l       .debug_str	00000000 
00037db8 l       .debug_str	00000000 
00037dff l       .debug_str	00000000 
00037e5d l       .debug_str	00000000 
00037ea8 l       .debug_str	00000000 
00037eef l       .debug_str	00000000 
00037f4d l       .debug_str	00000000 
00037f96 l       .debug_str	00000000 
00037fdb l       .debug_str	00000000 
00038037 l       .debug_str	00000000 
00038080 l       .debug_str	00000000 
000380c5 l       .debug_str	00000000 
00038121 l       .debug_str	00000000 
0003816b l       .debug_str	00000000 
000381b1 l       .debug_str	00000000 
0003820e l       .debug_str	00000000 
00038258 l       .debug_str	00000000 
0003829e l       .debug_str	00000000 
000382fb l       .debug_str	00000000 
00038356 l       .debug_str	00000000 
0003839e l       .debug_str	00000000 
000383e2 l       .debug_str	00000000 
0003842a l       .debug_str	00000000 
0003846e l       .debug_str	00000000 
000384c9 l       .debug_str	00000000 
00038512 l       .debug_str	00000000 
00038557 l       .debug_str	00000000 
000385b3 l       .debug_str	00000000 
000385fc l       .debug_str	00000000 
00038641 l       .debug_str	00000000 
0003869d l       .debug_str	00000000 
000386e6 l       .debug_str	00000000 
0003872b l       .debug_str	00000000 
00038787 l       .debug_str	00000000 
000387d1 l       .debug_str	00000000 
00038817 l       .debug_str	00000000 
00038874 l       .debug_str	00000000 
000388be l       .debug_str	00000000 
00038904 l       .debug_str	00000000 
00038961 l       .debug_str	00000000 
000389ab l       .debug_str	00000000 
000389f1 l       .debug_str	00000000 
00038a4e l       .debug_str	00000000 
00038aa9 l       .debug_str	00000000 
00038af1 l       .debug_str	00000000 
00038b35 l       .debug_str	00000000 
00038b7d l       .debug_str	00000000 
00038bc1 l       .debug_str	00000000 
00038c1c l       .debug_str	00000000 
00038c77 l       .debug_str	00000000 
00038cbf l       .debug_str	00000000 
00038d03 l       .debug_str	00000000 
00038d4c l       .debug_str	00000000 
00038d91 l       .debug_str	00000000 
00038ded l       .debug_str	00000000 
00038e49 l       .debug_str	00000000 
00038e92 l       .debug_str	00000000 
00038ed7 l       .debug_str	00000000 
00038f33 l       .debug_str	00000000 
00038f7c l       .debug_str	00000000 
00038fc1 l       .debug_str	00000000 
0003901d l       .debug_str	00000000 
00039066 l       .debug_str	00000000 
000390ab l       .debug_str	00000000 
00016ff4 l       .debug_str	00000000 
00039107 l       .debug_str	00000000 
00039146 l       .debug_str	00000000 
0003917b l       .debug_str	00000000 
00010dce l       .debug_str	00000000 
0001edf5 l       .debug_str	00000000 
0001eed1 l       .debug_str	00000000 
00039185 l       .debug_str	00000000 
00020d29 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
000391bf l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00039251 l       .debug_str	00000000 
000202b1 l       .debug_str	00000000 
0003928a l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
000392b1 l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000392eb l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00039311 l       .debug_str	00000000 
0001f2af l       .debug_str	00000000 
0003936b l       .debug_str	00000000 
0001fbc8 l       .debug_str	00000000 
00039405 l       .debug_str	00000000 
0001eee0 l       .debug_str	00000000 
0003948e l       .debug_str	00000000 
00039535 l       .debug_str	00000000 
0003956e l       .debug_str	00000000 
000395e3 l       .debug_str	00000000 
0003960c l       .debug_str	00000000 
0002c011 l       .debug_str	00000000 
00039641 l       .debug_str	00000000 
0003967d l       .debug_str	00000000 
0003968e l       .debug_str	00000000 
000396c7 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
000396d4 l       .debug_str	00000000 
000396e3 l       .debug_str	00000000 
00034fba l       .debug_str	00000000 
0003972c l       .debug_str	00000000 
0003975f l       .debug_str	00000000 
0003976c l       .debug_str	00000000 
0005e66f l       .debug_str	00000000 
000397b7 l       .debug_str	00000000 
0003980f l       .debug_str	00000000 
00039824 l       .debug_str	00000000 
0003985a l       .debug_str	00000000 
00039865 l       .debug_str	00000000 
0002c11f l       .debug_str	00000000 
000398c4 l       .debug_str	00000000 
00039937 l       .debug_str	00000000 
0003999e l       .debug_str	00000000 
000399be l       .debug_str	00000000 
000399fd l       .debug_str	00000000 
00039a1c l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00039a8f l       .debug_str	00000000 
00039b0c l       .debug_str	00000000 
00039b71 l       .debug_str	00000000 
00039bd1 l       .debug_str	00000000 
00039c44 l       .debug_str	00000000 
00039cc1 l       .debug_str	00000000 
00020ebe l       .debug_str	00000000 
00039d39 l       .debug_str	00000000 
00039dae l       .debug_str	00000000 
00039e28 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00039e88 l       .debug_str	00000000 
0005c65d l       .debug_str	00000000 
00039ec6 l       .debug_str	00000000 
00039f08 l       .debug_str	00000000 
00039f33 l       .debug_str	00000000 
00039f74 l       .debug_str	00000000 
00039f7e l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005d517 l       .debug_str	00000000 
00057dfd l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00039fda l       .debug_str	00000000 
000023d6 l       .debug_str	00000000 
0003a016 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0003a05d l       .debug_str	00000000 
0003a0bb l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0003a112 l       .debug_str	00000000 
0003a16c l       .debug_str	00000000 
0003a176 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
0003a1b9 l       .debug_str	00000000 
0003a1ef l       .debug_str	00000000 
0003a1ff l       .debug_str	00000000 
0003a20e l       .debug_str	00000000 
0003a219 l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
0003a253 l       .debug_str	00000000 
0003a29c l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0003a2e3 l       .debug_str	00000000 
0003a31e l       .debug_str	00000000 
0003a343 l       .debug_str	00000000 
0003a3af l       .debug_str	00000000 
0003a3c2 l       .debug_str	00000000 
0003a439 l       .debug_str	00000000 
0003a444 l       .debug_str	00000000 
0003a481 l       .debug_str	00000000 
0003a48c l       .debug_str	00000000 
0003a50d l       .debug_str	00000000 
0003a553 l       .debug_str	00000000 
0003a57a l       .debug_str	00000000 
0003a5a9 l       .debug_str	00000000 
0003a5ba l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
0003a616 l       .debug_str	00000000 
0003a647 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
0003a68f l       .debug_str	00000000 
00021aec l       .debug_str	00000000 
0003a6cd l       .debug_str	00000000 
0003a711 l       .debug_str	00000000 
0003a764 l       .debug_str	00000000 
000371ff l       .debug_str	00000000 
0003a7dc l       .debug_str	00000000 
0003a82b l       .debug_str	00000000 
0003a8c1 l       .debug_str	00000000 
0003a905 l       .debug_str	00000000 
0003e643 l       .debug_str	00000000 
0003a97d l       .debug_str	00000000 
0003a9cc l       .debug_str	00000000 
0003aa62 l       .debug_str	00000000 
0003aa7c l       .debug_str	00000000 
0003aacb l       .debug_str	00000000 
0003ab04 l       .debug_str	00000000 
0003ab1f l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
0003ab83 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
0003abfc l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
0003ac6d l       .debug_str	00000000 
0003ad03 l       .debug_str	00000000 
0003ad9b l       .debug_str	00000000 
0003ae0d l       .debug_str	00000000 
0003ae35 l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
0003aeed l       .debug_str	00000000 
0001794d l       .debug_str	00000000 
0003af32 l       .debug_str	00000000 
0003afe8 l       .debug_str	00000000 
0003b02d l       .debug_str	00000000 
0000e12a l       .debug_str	00000000 
0003b06f l       .debug_str	00000000 
0003b0ca l       .debug_str	00000000 
0003b0cf l       .debug_str	00000000 
0003b128 l       .debug_str	00000000 
0003b15c l       .debug_str	00000000 
0003b170 l       .debug_str	00000000 
0003b1ab l       .debug_str	00000000 
0003b1ed l       .debug_str	00000000 
0003b203 l       .debug_str	00000000 
0003b26f l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0003b2b1 l       .debug_str	00000000 
0003b2f1 l       .debug_str	00000000 
0003b34b l       .debug_str	00000000 
0003b38d l       .debug_str	00000000 
0003b3e8 l       .debug_str	00000000 
0003b42a l       .debug_str	00000000 
0003b435 l       .debug_str	00000000 
0003b475 l       .debug_str	00000000 
0003b47b l       .debug_str	00000000 
0003b4d5 l       .debug_str	00000000 
0003b4de l       .debug_str	00000000 
0003b520 l       .debug_str	00000000 
0003b578 l       .debug_str	00000000 
0003b5ba l       .debug_str	00000000 
0003b613 l       .debug_str	00000000 
0003b61d l       .debug_str	00000000 
0003b625 l       .debug_str	00000000 
0003b62e l       .debug_str	00000000 
0003b621 l       .debug_str	00000000 
0003b670 l       .debug_str	00000000 
0003b6c5 l       .debug_str	00000000 
0003b702 l       .debug_str	00000000 
0003b744 l       .debug_str	00000000 
0003b79b l       .debug_str	00000000 
0003b7dd l       .debug_str	00000000 
0003b835 l       .debug_str	00000000 
0003b86d l       .debug_str	00000000 
0003b879 l       .debug_str	00000000 
0003b8b6 l       .debug_str	00000000 
0003b918 l       .debug_str	00000000 
0003b959 l       .debug_str	00000000 
0003b962 l       .debug_str	00000000 
0003b9c0 l       .debug_str	00000000 
0003b9f9 l       .debug_str	00000000 
0003ba08 l       .debug_str	00000000 
0003ba47 l       .debug_str	00000000 
0003ba5c l       .debug_str	00000000 
0003baa2 l       .debug_str	00000000 
0003baaf l       .debug_str	00000000 
0003bab5 l       .debug_str	00000000 
0003baee l       .debug_str	00000000 
0003bb7a l       .debug_str	00000000 
0003bbb6 l       .debug_str	00000000 
000579ec l       .debug_str	00000000 
0003bbc8 l       .debug_str	00000000 
0003bc00 l       .debug_str	00000000 
0003bc0c l       .debug_str	00000000 
0003bc49 l       .debug_str	00000000 
0003bcab l       .debug_str	00000000 
0003bcec l       .debug_str	00000000 
0003bd4a l       .debug_str	00000000 
0003bd84 l       .debug_str	00000000 
0003bdde l       .debug_str	00000000 
0003be27 l       .debug_str	00000000 
0003be37 l       .debug_str	00000000 
0003be70 l       .debug_str	00000000 
0003bef2 l       .debug_str	00000000 
0003bf2c l       .debug_str	00000000 
0003bf86 l       .debug_str	00000000 
0003bfc1 l       .debug_str	00000000 
0003c021 l       .debug_str	00000000 
0003c05c l       .debug_str	00000000 
0003c0bc l       .debug_str	00000000 
0003c0fa l       .debug_str	00000000 
0003c158 l       .debug_str	00000000 
0003c196 l       .debug_str	00000000 
0003c1f4 l       .debug_str	00000000 
0003c23f l       .debug_str	00000000 
0003c248 l       .debug_str	00000000 
0003c297 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003c2a3 l       .debug_str	00000000 
0003c2d4 l       .debug_str	00000000 
0003c2ff l       .debug_str	00000000 
0003c34d l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
0003c354 l       .debug_str	00000000 
0003c3b9 l       .debug_str	00000000 
0003c3ea l       .debug_str	00000000 
0003c3f2 l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
0003c423 l       .debug_str	00000000 
0003c47c l       .debug_str	00000000 
0003c50a l       .debug_str	00000000 
0003c556 l       .debug_str	00000000 
0003c57b l       .debug_str	00000000 
0003c598 l       .debug_str	00000000 
0003c5c2 l       .debug_str	00000000 
000079ee l       .debug_str	00000000 
00007af9 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
0003c5e4 l       .debug_str	00000000 
0003c631 l       .debug_str	00000000 
0003c676 l       .debug_str	00000000 
0003c6b5 l       .debug_str	00000000 
0003c701 l       .debug_str	00000000 
0003c790 l       .debug_str	00000000 
0003c7dd l       .debug_str	00000000 
0003c863 l       .debug_str	00000000 
000598ee l       .debug_str	00000000 
0003c888 l       .debug_str	00000000 
0003c8b2 l       .debug_str	00000000 
0003c8bb l       .debug_str	00000000 
0003c8f1 l       .debug_str	00000000 
0003c8fa l       .debug_str	00000000 
0003c988 l       .debug_str	00000000 
0003c9ce l       .debug_str	00000000 
0003c9ed l       .debug_str	00000000 
0003ca04 l       .debug_str	00000000 
0003ca28 l       .debug_str	00000000 
0003ca44 l       .debug_str	00000000 
0003ca8b l       .debug_str	00000000 
0003cad0 l       .debug_str	00000000 
0003cb0f l       .debug_str	00000000 
0003cb55 l       .debug_str	00000000 
0003cbe4 l       .debug_str	00000000 
0003cc2b l       .debug_str	00000000 
0003ccb1 l       .debug_str	00000000 
0003cce6 l       .debug_str	00000000 
0003ccf0 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0003cd5b l       .debug_str	00000000 
0003cd90 l       .debug_str	00000000 
0003cd9a l       .debug_str	00000000 
0003cdcd l       .debug_str	00000000 
0003cdd5 l       .debug_str	00000000 
0003ce09 l       .debug_str	00000000 
0003ce1b l       .debug_str	00000000 
0003ce55 l       .debug_str	00000000 
0003ce73 l       .debug_str	00000000 
0003ce99 l       .debug_str	00000000 
0003cea4 l       .debug_str	00000000 
0003cecd l       .debug_str	00000000 
0003cedb l       .debug_str	00000000 
0003cf15 l       .debug_str	00000000 
0003cf4b l       .debug_str	00000000 
0003cf71 l       .debug_str	00000000 
0003cf94 l       .debug_str	00000000 
0003cfbd l       .debug_str	00000000 
0003cfe3 l       .debug_str	00000000 
0003d021 l       .debug_str	00000000 
0003d03b l       .debug_str	00000000 
0003d079 l       .debug_str	00000000 
0003d0ab l       .debug_str	00000000 
0003d0b7 l       .debug_str	00000000 
0005f083 l       .debug_str	00000000 
0003d0eb l       .debug_str	00000000 
0003d0f8 l       .debug_str	00000000 
00016dd4 l       .debug_str	00000000 
0003d12a l       .debug_str	00000000 
0003d194 l       .debug_str	00000000 
0003d204 l       .debug_str	00000000 
0003d26b l       .debug_str	00000000 
0003d288 l       .debug_str	00000000 
0003d2c7 l       .debug_str	00000000 
0003d2e3 l       .debug_str	00000000 
00016d96 l       .debug_str	00000000 
0003d311 l       .debug_str	00000000 
00016e72 l       .debug_str	00000000 
0003d346 l       .debug_str	00000000 
0003d382 l       .debug_str	00000000 
0003d3a8 l       .debug_str	00000000 
0003d3e7 l       .debug_str	00000000 
0003d3f7 l       .debug_str	00000000 
0003d45b l       .debug_str	00000000 
0003d492 l       .debug_str	00000000 
0003d4a8 l       .debug_str	00000000 
0003d4f7 l       .debug_str	00000000 
0003d503 l       .debug_str	00000000 
0003d5d5 l       .debug_str	00000000 
0003d54a l       .debug_str	00000000 
0003d5d0 l       .debug_str	00000000 
0003d5f4 l       .debug_str	00000000 
0003d62f l       .debug_str	00000000 
0003d63f l       .debug_str	00000000 
0005efab l       .debug_str	00000000 
0003d680 l       .debug_str	00000000 
0003d6ba l       .debug_str	00000000 
0003d6c9 l       .debug_str	00000000 
0003d702 l       .debug_str	00000000 
0003d710 l       .debug_str	00000000 
0003d749 l       .debug_str	00000000 
0003d757 l       .debug_str	00000000 
0003d7a7 l       .debug_str	00000000 
0003d7b4 l       .debug_str	00000000 
0003d82a l       .debug_str	00000000 
0003d835 l       .debug_str	00000000 
0003d847 l       .debug_str	00000000 
0003d893 l       .debug_str	00000000 
0003d8b0 l       .debug_str	00000000 
0003d944 l       .debug_str	00000000 
0003d9da l       .debug_str	00000000 
0003da4c l       .debug_str	00000000 
0003da72 l       .debug_str	00000000 
0003db11 l       .debug_str	00000000 
0003db82 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0003dbc7 l       .debug_str	00000000 
0003dc2a l       .debug_str	00000000 
0003dc4d l       .debug_str	00000000 
0003dca1 l       .debug_str	00000000 
0003dcb8 l       .debug_str	00000000 
0002477d l       .debug_str	00000000 
0003dd05 l       .debug_str	00000000 
0003dd12 l       .debug_str	00000000 
0003dd4d l       .debug_str	00000000 
0003dd75 l       .debug_str	00000000 
0003ddd7 l       .debug_str	00000000 
0003985f l       .debug_str	00000000 
0003de40 l       .debug_str	00000000 
0004066e l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0002deb8 l       .debug_str	00000000 
0002dec9 l       .debug_str	00000000 
0003de8d l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
0003ded8 l       .debug_str	00000000 
0003df5b l       .debug_str	00000000 
0003df8b l       .debug_str	00000000 
0003e013 l       .debug_str	00000000 
0003e088 l       .debug_str	00000000 
0003e0db l       .debug_str	00000000 
0003e167 l       .debug_str	00000000 
0003e19f l       .debug_str	00000000 
0003e1f4 l       .debug_str	00000000 
0003e225 l       .debug_str	00000000 
0003e277 l       .debug_str	00000000 
0003e2a5 l       .debug_str	00000000 
0003e2f9 l       .debug_str	00000000 
0003e31f l       .debug_str	00000000 
00021a38 l       .debug_str	00000000 
0003e356 l       .debug_str	00000000 
0003e3a1 l       .debug_str	00000000 
0003e3bd l       .debug_str	00000000 
0003e413 l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
0003e48c l       .debug_str	00000000 
0003e4dc l       .debug_str	00000000 
0003e573 l       .debug_str	00000000 
0003e5c9 l       .debug_str	00000000 
0003e642 l       .debug_str	00000000 
0003e65a l       .debug_str	00000000 
0003e6f1 l       .debug_str	00000000 
0003e72a l       .debug_str	00000000 
0003e95a l       .debug_str	00000000 
0003e773 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0003e7b0 l       .debug_str	00000000 
0003e7f4 l       .debug_str	00000000 
0003e83f l       .debug_str	00000000 
0003e87f l       .debug_str	00000000 
0003e8a9 l       .debug_str	00000000 
0003e8f2 l       .debug_str	00000000 
0003e901 l       .debug_str	00000000 
0003e952 l       .debug_str	00000000 
0003e969 l       .debug_str	00000000 
00048c09 l       .debug_str	00000000 
0005a1a8 l       .debug_str	00000000 
0003e9d0 l       .debug_str	00000000 
0003ea31 l       .debug_str	00000000 
0003ea50 l       .debug_str	00000000 
0003ea59 l       .debug_str	00000000 
0003ea65 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
0003ea6b l       .debug_str	00000000 
0003ea75 l       .debug_str	00000000 
0003eaa7 l       .debug_str	00000000 
0003eab7 l       .debug_str	00000000 
0003eb3f l       .debug_str	00000000 
0003eb48 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0003ebb5 l       .debug_str	00000000 
0003ebf4 l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
0002143c l       .debug_str	00000000 
00021446 l       .debug_str	00000000 
0003ec03 l       .debug_str	00000000 
0003ec73 l       .debug_str	00000000 
0003ec98 l       .debug_str	00000000 
0003ed07 l       .debug_str	00000000 
0003ed2d l       .debug_str	00000000 
0003ed9c l       .debug_str	00000000 
0003edc6 l       .debug_str	00000000 
0003edfd l       .debug_str	00000000 
0003ee08 l       .debug_str	00000000 
0003ee44 l       .debug_str	00000000 
0003ee63 l       .debug_str	00000000 
0003ee9d l       .debug_str	00000000 
0003eed8 l       .debug_str	00000000 
0003ef14 l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0003ef2e l       .debug_str	00000000 
0003ef6a l       .debug_str	00000000 
0003ef77 l       .debug_str	00000000 
00057c63 l       .debug_str	00000000 
0003efb5 l       .debug_str	00000000 
0003effb l       .debug_str	00000000 
0003f083 l       .debug_str	00000000 
0003f09c l       .debug_str	00000000 
0003f0f6 l       .debug_str	00000000 
0003f13c l       .debug_str	00000000 
0003f154 l       .debug_str	00000000 
0003f1d4 l       .debug_str	00000000 
0003f6a8 l       .debug_str	00000000 
0003f1e4 l       .debug_str	00000000 
0003f223 l       .debug_str	00000000 
0003f263 l       .debug_str	00000000 
0003f2ed l       .debug_str	00000000 
0003f304 l       .debug_str	00000000 
0003f355 l       .debug_str	00000000 
0003f363 l       .debug_str	00000000 
0003f368 l       .debug_str	00000000 
0003f3c3 l       .debug_str	00000000 
0003fd7d l       .debug_str	00000000 
0003f41a l       .debug_str	00000000 
0003f44d l       .debug_str	00000000 
0003f494 l       .debug_str	00000000 
0003f4ce l       .debug_str	00000000 
0003f4fd l       .debug_str	00000000 
0003f57b l       .debug_str	00000000 
0003f5ff l       .debug_str	00000000 
0003f68c l       .debug_str	00000000 
0003f6a1 l       .debug_str	00000000 
0003f6b1 l       .debug_str	00000000 
0003f6fd l       .debug_str	00000000 
0003f742 l       .debug_str	00000000 
0003f7d9 l       .debug_str	00000000 
0003f7f5 l       .debug_str	00000000 
0003f83c l       .debug_str	00000000 
0003f86a l       .debug_str	00000000 
0003f8a3 l       .debug_str	00000000 
0003f8c5 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
0003f943 l       .debug_str	00000000 
0003f9c3 l       .debug_str	00000000 
0003fa02 l       .debug_str	00000000 
0003fa8c l       .debug_str	00000000 
0003fad8 l       .debug_str	00000000 
0003faf6 l       .debug_str	00000000 
0003fb01 l       .debug_str	00000000 
0003fb63 l       .debug_str	00000000 
0003fbba l       .debug_str	00000000 
0003fc47 l       .debug_str	00000000 
0003fc93 l       .debug_str	00000000 
0003fd2a l       .debug_str	00000000 
0003fd74 l       .debug_str	00000000 
0003fd90 l       .debug_str	00000000 
0003fdea l       .debug_str	00000000 
0003fdf3 l       .debug_str	00000000 
0003fe52 l       .debug_str	00000000 
0003fea9 l       .debug_str	00000000 
0003ff02 l       .debug_str	00000000 
0003ff17 l       .debug_str	00000000 
0003ff64 l       .debug_str	00000000 
0003ffaf l       .debug_str	00000000 
0003ffc2 l       .debug_str	00000000 
0000b8d1 l       .debug_str	00000000 
00006b64 l       .debug_str	00000000 
0004000d l       .debug_str	00000000 
00040022 l       .debug_str	00000000 
0004002e l       .debug_str	00000000 
00040073 l       .debug_str	00000000 
000400cc l       .debug_str	00000000 
000400e1 l       .debug_str	00000000 
0004012e l       .debug_str	00000000 
00040179 l       .debug_str	00000000 
0004018c l       .debug_str	00000000 
000401d7 l       .debug_str	00000000 
000401ea l       .debug_str	00000000 
0004024e l       .debug_str	00000000 
00040287 l       .debug_str	00000000 
000402b3 l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
0005909d l       .debug_str	00000000 
00040332 l       .debug_str	00000000 
00040338 l       .debug_str	00000000 
00040341 l       .debug_str	00000000 
00040379 l       .debug_str	00000000 
00040396 l       .debug_str	00000000 
000403d2 l       .debug_str	00000000 
000403ef l       .debug_str	00000000 
0004044b l       .debug_str	00000000 
00040483 l       .debug_str	00000000 
000404df l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00040517 l       .debug_str	00000000 
00040555 l       .debug_str	00000000 
00040571 l       .debug_str	00000000 
000405c7 l       .debug_str	00000000 
0004062e l       .debug_str	00000000 
00040666 l       .debug_str	00000000 
00040672 l       .debug_str	00000000 
000406d9 l       .debug_str	00000000 
00040718 l       .debug_str	00000000 
00040729 l       .debug_str	00000000 
00040762 l       .debug_str	00000000 
0004e70a l       .debug_str	00000000 
0004077d l       .debug_str	00000000 
000407b9 l       .debug_str	00000000 
000407b2 l       .debug_str	00000000 
000407c2 l       .debug_str	00000000 
000407d4 l       .debug_str	00000000 
0004081f l       .debug_str	00000000 
00040837 l       .debug_str	00000000 
00040841 l       .debug_str	00000000 
00040858 l       .debug_str	00000000 
00040867 l       .debug_str	00000000 
000408a9 l       .debug_str	00000000 
000408c2 l       .debug_str	00000000 
00040936 l       .debug_str	00000000 
00040945 l       .debug_str	00000000 
0004097e l       .debug_str	00000000 
00040994 l       .debug_str	00000000 
000409d4 l       .debug_str	00000000 
000409df l       .debug_str	00000000 
00040a5e l       .debug_str	00000000 
00058816 l       .debug_str	00000000 
00040a7d l       .debug_str	00000000 
00040a92 l       .debug_str	00000000 
00040a9c l       .debug_str	00000000 
000073c7 l       .debug_str	00000000 
00040aa1 l       .debug_str	00000000 
00040ad2 l       .debug_str	00000000 
00040ae5 l       .debug_str	00000000 
00040aef l       .debug_str	00000000 
00040b0c l       .debug_str	00000000 
00040b47 l       .debug_str	00000000 
00040b7c l       .debug_str	00000000 
00040bad l       .debug_str	00000000 
00040bc1 l       .debug_str	00000000 
00040bcc l       .debug_str	00000000 
00040bea l       .debug_str	00000000 
00040c25 l       .debug_str	00000000 
00040c5b l       .debug_str	00000000 
00040c8c l       .debug_str	00000000 
00040ca0 l       .debug_str	00000000 
00040cab l       .debug_str	00000000 
00040cc9 l       .debug_str	00000000 
00040d04 l       .debug_str	00000000 
00040d3a l       .debug_str	00000000 
00040d6b l       .debug_str	00000000 
00040d7f l       .debug_str	00000000 
00040d8a l       .debug_str	00000000 
00040da8 l       .debug_str	00000000 
00040de3 l       .debug_str	00000000 
00040e19 l       .debug_str	00000000 
00040e4a l       .debug_str	00000000 
00045697 l       .debug_str	00000000 
00040e5f l       .debug_str	00000000 
00040e6b l       .debug_str	00000000 
00040e8a l       .debug_str	00000000 
00040ec5 l       .debug_str	00000000 
00040efc l       .debug_str	00000000 
00040f2d l       .debug_str	00000000 
00040f40 l       .debug_str	00000000 
00040f4a l       .debug_str	00000000 
00040f67 l       .debug_str	00000000 
00040fa2 l       .debug_str	00000000 
00040fd7 l       .debug_str	00000000 
00041008 l       .debug_str	00000000 
0004101c l       .debug_str	00000000 
00041027 l       .debug_str	00000000 
00041045 l       .debug_str	00000000 
00041080 l       .debug_str	00000000 
000410b6 l       .debug_str	00000000 
000410e7 l       .debug_str	00000000 
000410fb l       .debug_str	00000000 
0004116a l       .debug_str	00000000 
000411a5 l       .debug_str	00000000 
000411ee l       .debug_str	00000000 
00041233 l       .debug_str	00000000 
0004128f l       .debug_str	00000000 
000412d8 l       .debug_str	00000000 
0004131d l       .debug_str	00000000 
00041379 l       .debug_str	00000000 
000413c2 l       .debug_str	00000000 
00041407 l       .debug_str	00000000 
00041463 l       .debug_str	00000000 
0004146e l       .debug_str	00000000 
0004148c l       .debug_str	00000000 
000414c7 l       .debug_str	00000000 
000414fd l       .debug_str	00000000 
0004152e l       .debug_str	00000000 
00041542 l       .debug_str	00000000 
0004154d l       .debug_str	00000000 
0004156b l       .debug_str	00000000 
000415a6 l       .debug_str	00000000 
000415dc l       .debug_str	00000000 
0004164b l       .debug_str	00000000 
00041686 l       .debug_str	00000000 
000416b7 l       .debug_str	00000000 
000416cc l       .debug_str	00000000 
000416d1 l       .debug_str	00000000 
000416dd l       .debug_str	00000000 
000416fc l       .debug_str	00000000 
00041737 l       .debug_str	00000000 
0004176e l       .debug_str	00000000 
000417dd l       .debug_str	00000000 
00041819 l       .debug_str	00000000 
00014d6d l       .debug_str	00000000 
00041862 l       .debug_str	00000000 
0004186d l       .debug_str	00000000 
000418b4 l       .debug_str	00000000 
000418be l       .debug_str	00000000 
00041940 l       .debug_str	00000000 
0004195d l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
000419b8 l       .debug_str	00000000 
00041a12 l       .debug_str	00000000 
00041a1f l       .debug_str	00000000 
00041a91 l       .debug_str	00000000 
00041af5 l       .debug_str	00000000 
00041b00 l       .debug_str	00000000 
00041b79 l       .debug_str	00000000 
00041b85 l       .debug_str	00000000 
00041c01 l       .debug_str	00000000 
00041c07 l       .debug_str	00000000 
00041c0e l       .debug_str	00000000 
00041c4a l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00041c93 l       .debug_str	00000000 
00041cd7 l       .debug_str	00000000 
00041d22 l       .debug_str	00000000 
00041d61 l       .debug_str	00000000 
00041d86 l       .debug_str	00000000 
00041ddc l       .debug_str	00000000 
00041e4a l       .debug_str	00000000 
00041eca l       .debug_str	00000000 
00041f37 l       .debug_str	00000000 
00041fc2 l       .debug_str	00000000 
00042036 l       .debug_str	00000000 
00042076 l       .debug_str	00000000 
000420f7 l       .debug_str	00000000 
00042138 l       .debug_str	00000000 
0004219c l       .debug_str	00000000 
0004224b l       .debug_str	00000000 
00042295 l       .debug_str	00000000 
000422e2 l       .debug_str	00000000 
00042328 l       .debug_str	00000000 
00042332 l       .debug_str	00000000 
0004236b l       .debug_str	00000000 
0004239a l       .debug_str	00000000 
000423fb l       .debug_str	00000000 
0004242a l       .debug_str	00000000 
00042467 l       .debug_str	00000000 
000424f6 l       .debug_str	00000000 
0004252b l       .debug_str	00000000 
000425b1 l       .debug_str	00000000 
00042637 l       .debug_str	00000000 
0004268b l       .debug_str	00000000 
00042714 l       .debug_str	00000000 
00006a7b l       .debug_str	00000000 
00042762 l       .debug_str	00000000 
000427f0 l       .debug_str	00000000 
00042844 l       .debug_str	00000000 
00042883 l       .debug_str	00000000 
000428ce l       .debug_str	00000000 
00042950 l       .debug_str	00000000 
0004296c l       .debug_str	00000000 
000429c5 l       .debug_str	00000000 
00042a1e l       .debug_str	00000000 
00042a5b l       .debug_str	00000000 
00042a9c l       .debug_str	00000000 
00042afd l       .debug_str	00000000 
00042b6e l       .debug_str	00000000 
00042b9e l       .debug_str	00000000 
00042be4 l       .debug_str	00000000 
00042c56 l       .debug_str	00000000 
00042cea l       .debug_str	00000000 
00042d0e l       .debug_str	00000000 
00042d8a l       .debug_str	00000000 
00042dc4 l       .debug_str	00000000 
00042e06 l       .debug_str	00000000 
00042eb6 l       .debug_str	00000000 
00042ef5 l       .debug_str	00000000 
00042f98 l       .debug_str	00000000 
00042ff4 l       .debug_str	00000000 
00043051 l       .debug_str	00000000 
000430fc l       .debug_str	00000000 
00043135 l       .debug_str	00000000 
000431b1 l       .debug_str	00000000 
000431e9 l       .debug_str	00000000 
000431f5 l       .debug_str	00000000 
00043232 l       .debug_str	00000000 
0004328a l       .debug_str	00000000 
000432aa l       .debug_str	00000000 
00043303 l       .debug_str	00000000 
0004335c l       .debug_str	00000000 
000433b5 l       .debug_str	00000000 
0004340f l       .debug_str	00000000 
00043445 l       .debug_str	00000000 
00043455 l       .debug_str	00000000 
00043464 l       .debug_str	00000000 
0004346d l       .debug_str	00000000 
000434a4 l       .debug_str	00000000 
000434e0 l       .debug_str	00000000 
000434f0 l       .debug_str	00000000 
0004354c l       .debug_str	00000000 
000435ae l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
000435f8 l       .debug_str	00000000 
00043633 l       .debug_str	00000000 
00043658 l       .debug_str	00000000 
000436b7 l       .debug_str	00000000 
00043701 l       .debug_str	00000000 
0004373c l       .debug_str	00000000 
00043761 l       .debug_str	00000000 
000437c0 l       .debug_str	00000000 
00043829 l       .debug_str	00000000 
00043832 l       .debug_str	00000000 
00043869 l       .debug_str	00000000 
000438c5 l       .debug_str	00000000 
00043927 l       .debug_str	00000000 
00043986 l       .debug_str	00000000 
000439e5 l       .debug_str	00000000 
00043a1b l       .debug_str	00000000 
00043a2c l       .debug_str	00000000 
00043a3c l       .debug_str	00000000 
00043a46 l       .debug_str	00000000 
00043a7e l       .debug_str	00000000 
00043adb l       .debug_str	00000000 
00043b3e l       .debug_str	00000000 
00043b89 l       .debug_str	00000000 
00043bc4 l       .debug_str	00000000 
00043bea l       .debug_str	00000000 
00043c4a l       .debug_str	00000000 
00043c95 l       .debug_str	00000000 
00043cd0 l       .debug_str	00000000 
00043cf6 l       .debug_str	00000000 
00043d56 l       .debug_str	00000000 
00043d8c l       .debug_str	00000000 
00043d9d l       .debug_str	00000000 
00043dad l       .debug_str	00000000 
00043db7 l       .debug_str	00000000 
00043def l       .debug_str	00000000 
00043e4c l       .debug_str	00000000 
00043eaf l       .debug_str	00000000 
00043f0f l       .debug_str	00000000 
00043f6f l       .debug_str	00000000 
00043fa5 l       .debug_str	00000000 
00043fb6 l       .debug_str	00000000 
00043fc6 l       .debug_str	00000000 
00043fd0 l       .debug_str	00000000 
00044008 l       .debug_str	00000000 
00044065 l       .debug_str	00000000 
000440c8 l       .debug_str	00000000 
00044113 l       .debug_str	00000000 
0004414e l       .debug_str	00000000 
00044174 l       .debug_str	00000000 
000441d4 l       .debug_str	00000000 
0004421f l       .debug_str	00000000 
0004425a l       .debug_str	00000000 
00044280 l       .debug_str	00000000 
000442e0 l       .debug_str	00000000 
00044316 l       .debug_str	00000000 
00044327 l       .debug_str	00000000 
00044337 l       .debug_str	00000000 
00044341 l       .debug_str	00000000 
00044379 l       .debug_str	00000000 
000443d6 l       .debug_str	00000000 
00044439 l       .debug_str	00000000 
00044499 l       .debug_str	00000000 
000444f9 l       .debug_str	00000000 
0004452f l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00044542 l       .debug_str	00000000 
00044554 l       .debug_str	00000000 
00044560 l       .debug_str	00000000 
0004459b l       .debug_str	00000000 
000445fa l       .debug_str	00000000 
0004465f l       .debug_str	00000000 
000446c1 l       .debug_str	00000000 
000446fc l       .debug_str	00000000 
00044724 l       .debug_str	00000000 
00044786 l       .debug_str	00000000 
0000a06e l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
000447bc l       .debug_str	00000000 
000447f7 l       .debug_str	00000000 
00044837 l       .debug_str	00000000 
00044854 l       .debug_str	00000000 
00044898 l       .debug_str	00000000 
000448b9 l       .debug_str	00000000 
000448f9 l       .debug_str	00000000 
00044916 l       .debug_str	00000000 
0004495a l       .debug_str	00000000 
0004497b l       .debug_str	00000000 
000449dd l       .debug_str	00000000 
00044a44 l       .debug_str	00000000 
00044a7f l       .debug_str	00000000 
00044aa2 l       .debug_str	00000000 
00044b08 l       .debug_str	00000000 
00044b43 l       .debug_str	00000000 
00044b65 l       .debug_str	00000000 
00044ba0 l       .debug_str	00000000 
00044bc4 l       .debug_str	00000000 
00044bff l       .debug_str	00000000 
00044c22 l       .debug_str	00000000 
00044c5d l       .debug_str	00000000 
00044c81 l       .debug_str	00000000 
00044cbc l       .debug_str	00000000 
00044cdf l       .debug_str	00000000 
00044d1a l       .debug_str	00000000 
00044d3e l       .debug_str	00000000 
00044d89 l       .debug_str	00000000 
00044deb l       .debug_str	00000000 
00044e26 l       .debug_str	00000000 
00044e49 l       .debug_str	00000000 
00044e94 l       .debug_str	00000000 
00044ecf l       .debug_str	00000000 
00044ef5 l       .debug_str	00000000 
00044f30 l       .debug_str	00000000 
00044f56 l       .debug_str	00000000 
00044fa7 l       .debug_str	00000000 
00044ff5 l       .debug_str	00000000 
00045040 l       .debug_str	00000000 
00045073 l       .debug_str	00000000 
000450ae l       .debug_str	00000000 
000450d3 l       .debug_str	00000000 
0004515f l       .debug_str	00000000 
00045193 l       .debug_str	00000000 
0004520f l       .debug_str	00000000 
00045254 l       .debug_str	00000000 
000452a0 l       .debug_str	00000000 
00045303 l       .debug_str	00000000 
0004533e l       .debug_str	00000000 
00045362 l       .debug_str	00000000 
0004539d l       .debug_str	00000000 
000453c4 l       .debug_str	00000000 
00045410 l       .debug_str	00000000 
0004544b l       .debug_str	00000000 
00045472 l       .debug_str	00000000 
000454bd l       .debug_str	00000000 
00045509 l       .debug_str	00000000 
00045555 l       .debug_str	00000000 
00045586 l       .debug_str	00000000 
0004558e l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
000455da l       .debug_str	00000000 
0004560f l       .debug_str	00000000 
0004563d l       .debug_str	00000000 
00045646 l       .debug_str	00000000 
00045694 l       .debug_str	00000000 
0004569c l       .debug_str	00000000 
00045701 l       .debug_str	00000000 
00045754 l       .debug_str	00000000 
000457b4 l       .debug_str	00000000 
000457d3 l       .debug_str	00000000 
00045836 l       .debug_str	00000000 
00045858 l       .debug_str	00000000 
000458a3 l       .debug_str	00000000 
00045908 l       .debug_str	00000000 
0004592a l       .debug_str	00000000 
00045993 l       .debug_str	00000000 
000459d0 l       .debug_str	00000000 
00045a39 l       .debug_str	00000000 
00045ac9 l       .debug_str	00000000 
00015eaf l       .debug_str	00000000 
00045b29 l       .debug_str	00000000 
00045b8c l       .debug_str	00000000 
00045bf5 l       .debug_str	00000000 
00045c28 l       .debug_str	00000000 
00045c70 l       .debug_str	00000000 
00045cea l       .debug_str	00000000 
00045d3b l       .debug_str	00000000 
00045d92 l       .debug_str	00000000 
000081cd l       .debug_str	00000000 
00045dda l       .debug_str	00000000 
00045e38 l       .debug_str	00000000 
00045e55 l       .debug_str	00000000 
00045ec1 l       .debug_str	00000000 
00045f06 l       .debug_str	00000000 
00045f54 l       .debug_str	00000000 
00045f9c l       .debug_str	00000000 
00045fa6 l       .debug_str	00000000 
00046014 l       .debug_str	00000000 
00046050 l       .debug_str	00000000 
00046073 l       .debug_str	00000000 
000460e3 l       .debug_str	00000000 
0004612b l       .debug_str	00000000 
00046134 l       .debug_str	00000000 
00046191 l       .debug_str	00000000 
000461f4 l       .debug_str	00000000 
00046254 l       .debug_str	00000000 
000462b4 l       .debug_str	00000000 
00046310 l       .debug_str	00000000 
0004636f l       .debug_str	00000000 
000463cf l       .debug_str	00000000 
000463ea l       .debug_str	00000000 
0000812b l       .debug_str	00000000 
0004643e l       .debug_str	00000000 
000464bc l       .debug_str	00000000 
000464e6 l       .debug_str	00000000 
00046548 l       .debug_str	00000000 
000465a9 l       .debug_str	00000000 
00046603 l       .debug_str	00000000 
00046668 l       .debug_str	00000000 
000466ba l       .debug_str	00000000 
00046702 l       .debug_str	00000000 
0004671d l       .debug_str	00000000 
00046797 l       .debug_str	00000000 
000467e4 l       .debug_str	00000000 
0004685e l       .debug_str	00000000 
000468ab l       .debug_str	00000000 
000468ff l       .debug_str	00000000 
00046951 l       .debug_str	00000000 
000469b9 l       .debug_str	00000000 
00046a19 l       .debug_str	00000000 
00046a73 l       .debug_str	00000000 
00046ad2 l       .debug_str	00000000 
00046b2c l       .debug_str	00000000 
00046b89 l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
00046bc7 l       .debug_str	00000000 
00017729 l       .debug_str	00000000 
00046c02 l       .debug_str	00000000 
00046c74 l       .debug_str	00000000 
00046d47 l       .debug_str	00000000 
000082eb l       .debug_str	00000000 
00046d8f l       .debug_str	00000000 
00046ddd l       .debug_str	00000000 
00046de7 l       .debug_str	00000000 
00046e2f l       .debug_str	00000000 
00046e3b l       .debug_str	00000000 
00046eaf l       .debug_str	00000000 
00046eba l       .debug_str	00000000 
00046ef6 l       .debug_str	00000000 
00046f1d l       .debug_str	00000000 
00046f6e l       .debug_str	00000000 
00046f7b l       .debug_str	00000000 
00046f89 l       .debug_str	00000000 
00046f9c l       .debug_str	00000000 
00046fa7 l       .debug_str	00000000 
00046fe9 l       .debug_str	00000000 
00046ffe l       .debug_str	00000000 
00047068 l       .debug_str	00000000 
000470c5 l       .debug_str	00000000 
00047125 l       .debug_str	00000000 
00047185 l       .debug_str	00000000 
000471f7 l       .debug_str	00000000 
00047244 l       .debug_str	00000000 
000472a3 l       .debug_str	00000000 
000472fd l       .debug_str	00000000 
00047370 l       .debug_str	00000000 
0004737d l       .debug_str	00000000 
000473dd l       .debug_str	00000000 
000473fc l       .debug_str	00000000 
00047464 l       .debug_str	00000000 
0004747f l       .debug_str	00000000 
000474d7 l       .debug_str	00000000 
00047521 l       .debug_str	00000000 
00047585 l       .debug_str	00000000 
000475a4 l       .debug_str	00000000 
00047606 l       .debug_str	00000000 
0004766c l       .debug_str	00000000 
000476ec l       .debug_str	00000000 
0004773b l       .debug_str	00000000 
000477b1 l       .debug_str	00000000 
00047827 l       .debug_str	00000000 
000478fc l       .debug_str	00000000 
00047959 l       .debug_str	00000000 
000479b7 l       .debug_str	00000000 
00047a37 l       .debug_str	00000000 
00047aa6 l       .debug_str	00000000 
00047b24 l       .debug_str	00000000 
00047b77 l       .debug_str	00000000 
00047bdc l       .debug_str	00000000 
00047c3c l       .debug_str	00000000 
00047caa l       .debug_str	00000000 
00047d42 l       .debug_str	00000000 
00047dd1 l       .debug_str	00000000 
00047e5f l       .debug_str	00000000 
00047eed l       .debug_str	00000000 
00047ffd l       .debug_str	00000000 
00048071 l       .debug_str	00000000 
000480b3 l       .debug_str	00000000 
000480fc l       .debug_str	00000000 
00048156 l       .debug_str	00000000 
000481cf l       .debug_str	00000000 
000481dc l       .debug_str	00000000 
000481e1 l       .debug_str	00000000 
0004824d l       .debug_str	00000000 
00048294 l       .debug_str	00000000 
0004831e l       .debug_str	00000000 
0004833d l       .debug_str	00000000 
000483c7 l       .debug_str	00000000 
000483eb l       .debug_str	00000000 
0004842f l       .debug_str	00000000 
00048493 l       .debug_str	00000000 
000484d7 l       .debug_str	00000000 
00048549 l       .debug_str	00000000 
00048607 l       .debug_str	00000000 
00048669 l       .debug_str	00000000 
00048701 l       .debug_str	00000000 
000487b0 l       .debug_str	00000000 
00048846 l       .debug_str	00000000 
000488d9 l       .debug_str	00000000 
0004891d l       .debug_str	00000000 
00048970 l       .debug_str	00000000 
000489f4 l       .debug_str	00000000 
00048a82 l       .debug_str	00000000 
00048ad6 l       .debug_str	00000000 
00048ae7 l       .debug_str	00000000 
00048b6c l       .debug_str	00000000 
00048bf8 l       .debug_str	00000000 
00048c01 l       .debug_str	00000000 
00048c0e l       .debug_str	00000000 
00048c65 l       .debug_str	00000000 
00048cea l       .debug_str	00000000 
00048d3c l       .debug_str	00000000 
00048d4b l       .debug_str	00000000 
00048d92 l       .debug_str	00000000 
00048df6 l       .debug_str	00000000 
00048e17 l       .debug_str	00000000 
00048e97 l       .debug_str	00000000 
00048f02 l       .debug_str	00000000 
00048f80 l       .debug_str	00000000 
00048fcf l       .debug_str	00000000 
0004902e l       .debug_str	00000000 
000490c6 l       .debug_str	00000000 
0004916c l       .debug_str	00000000 
00049202 l       .debug_str	00000000 
0004928c l       .debug_str	00000000 
00049302 l       .debug_str	00000000 
0004934b l       .debug_str	00000000 
000493a7 l       .debug_str	00000000 
00049422 l       .debug_str	00000000 
0004948e l       .debug_str	00000000 
00049518 l       .debug_str	00000000 
0004955c l       .debug_str	00000000 
000495bd l       .debug_str	00000000 
00049601 l       .debug_str	00000000 
00049685 l       .debug_str	00000000 
0004970f l       .debug_str	00000000 
00049761 l       .debug_str	00000000 
000497df l       .debug_str	00000000 
00049864 l       .debug_str	00000000 
000498bb l       .debug_str	00000000 
0004993c l       .debug_str	00000000 
000499fa l       .debug_str	00000000 
00049a59 l       .debug_str	00000000 
00049abc l       .debug_str	00000000 
00049ae1 l       .debug_str	00000000 
00049b45 l       .debug_str	00000000 
00049b66 l       .debug_str	00000000 
00049be6 l       .debug_str	00000000 
00049c51 l       .debug_str	00000000 
00049ccf l       .debug_str	00000000 
00049d1e l       .debug_str	00000000 
00049d7d l       .debug_str	00000000 
00049e15 l       .debug_str	00000000 
00049ebb l       .debug_str	00000000 
00049f51 l       .debug_str	00000000 
00049fdb l       .debug_str	00000000 
0004a051 l       .debug_str	00000000 
0004a09a l       .debug_str	00000000 
0004a0f6 l       .debug_str	00000000 
0004a171 l       .debug_str	00000000 
0004a1dd l       .debug_str	00000000 
0004a267 l       .debug_str	00000000 
0004a2ab l       .debug_str	00000000 
0004a30c l       .debug_str	00000000 
0004a350 l       .debug_str	00000000 
0004a3d4 l       .debug_str	00000000 
0004a45e l       .debug_str	00000000 
0004a4dc l       .debug_str	00000000 
0004a561 l       .debug_str	00000000 
0004a5b8 l       .debug_str	00000000 
0004a639 l       .debug_str	00000000 
0004a6f7 l       .debug_str	00000000 
0004a756 l       .debug_str	00000000 
0004a789 l       .debug_str	00000000 
0004a7bc l       .debug_str	00000000 
0004a7ef l       .debug_str	00000000 
0004a822 l       .debug_str	00000000 
0004a855 l       .debug_str	00000000 
0004a888 l       .debug_str	00000000 
0004a8bb l       .debug_str	00000000 
0004a90f l       .debug_str	00000000 
0004a93d l       .debug_str	00000000 
0004a991 l       .debug_str	00000000 
0005d36e l       .debug_str	00000000 
00001676 l       .debug_str	00000000 
0004a9a4 l       .debug_str	00000000 
0004a9a8 l       .debug_str	00000000 
0004a9ac l       .debug_str	00000000 
0004a9b0 l       .debug_str	00000000 
0004a9b7 l       .debug_str	00000000 
0004a9bc l       .debug_str	00000000 
0004a9ec l       .debug_str	00000000 
0004aa3e l       .debug_str	00000000 
0004aa7f l       .debug_str	00000000 
0004aa8c l       .debug_str	00000000 
0004aacb l       .debug_str	00000000 
0004aad6 l       .debug_str	00000000 
0004ab12 l       .debug_str	00000000 
0004ab20 l       .debug_str	00000000 
0004ab54 l       .debug_str	00000000 
0004ab8f l       .debug_str	00000000 
0004abcd l       .debug_str	00000000 
0004abdb l       .debug_str	00000000 
0004ac14 l       .debug_str	00000000 
0004ac1e l       .debug_str	00000000 
0004ac5a l       .debug_str	00000000 
0004acb6 l       .debug_str	00000000 
0004acbd l       .debug_str	00000000 
0004ad1b l       .debug_str	00000000 
0004ad24 l       .debug_str	00000000 
0004ad8b l       .debug_str	00000000 
0004ad9c l       .debug_str	00000000 
0004adf9 l       .debug_str	00000000 
0004ae58 l       .debug_str	00000000 
0004aeb4 l       .debug_str	00000000 
0004af12 l       .debug_str	00000000 
0004af79 l       .debug_str	00000000 
0004afd6 l       .debug_str	00000000 
0004b035 l       .debug_str	00000000 
0004b06e l       .debug_str	00000000 
0004b078 l       .debug_str	00000000 
0004b0e0 l       .debug_str	00000000 
0004b113 l       .debug_str	00000000 
0004b11d l       .debug_str	00000000 
0004b153 l       .debug_str	00000000 
0004b15f l       .debug_str	00000000 
0004b196 l       .debug_str	00000000 
0004b1a3 l       .debug_str	00000000 
0004b1e7 l       .debug_str	00000000 
0004b201 l       .debug_str	00000000 
0004b272 l       .debug_str	00000000 
0004b285 l       .debug_str	00000000 
0004b2f6 l       .debug_str	00000000 
0004b339 l       .debug_str	00000000 
0004b343 l       .debug_str	00000000 
0004b38d l       .debug_str	00000000 
0004b3d4 l       .debug_str	00000000 
0004b421 l       .debug_str	00000000 
0004b46b l       .debug_str	00000000 
0004b49d l       .debug_str	00000000 
0004b4a6 l       .debug_str	00000000 
0004b4da l       .debug_str	00000000 
0004b513 l       .debug_str	00000000 
0004b54f l       .debug_str	00000000 
0004b561 l       .debug_str	00000000 
0004b5a2 l       .debug_str	00000000 
0004b601 l       .debug_str	00000000 
0004b632 l       .debug_str	00000000 
0004b648 l       .debug_str	00000000 
0004b67d l       .debug_str	00000000 
0004b6da l       .debug_str	00000000 
0004b73e l       .debug_str	00000000 
0004b79d l       .debug_str	00000000 
0004b7fd l       .debug_str	00000000 
0004b85b l       .debug_str	00000000 
00021d2b l       .debug_str	00000000 
0004b8c0 l       .debug_str	00000000 
0004b906 l       .debug_str	00000000 
0004b946 l       .debug_str	00000000 
0004b9ce l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
0004ba55 l       .debug_str	00000000 
0004ba88 l       .debug_str	00000000 
0004bafc l       .debug_str	00000000 
0004bb75 l       .debug_str	00000000 
0004bbe9 l       .debug_str	00000000 
0004bc48 l       .debug_str	00000000 
0004bca5 l       .debug_str	00000000 
0004bcff l       .debug_str	00000000 
0004bd5b l       .debug_str	00000000 
0004bdb8 l       .debug_str	00000000 
0004be17 l       .debug_str	00000000 
0004be7f l       .debug_str	00000000 
0004bee9 l       .debug_str	00000000 
0004bf52 l       .debug_str	00000000 
0004bfb0 l       .debug_str	00000000 
0004c022 l       .debug_str	00000000 
0004c026 l       .debug_str	00000000 
0004c099 l       .debug_str	00000000 
0004c0f7 l       .debug_str	00000000 
0004c153 l       .debug_str	00000000 
0004c1c4 l       .debug_str	00000000 
0004c23a l       .debug_str	00000000 
0004c271 l       .debug_str	00000000 
0004c2cd l       .debug_str	00000000 
0004c321 l       .debug_str	00000000 
0004c37f l       .debug_str	00000000 
0004c3eb l       .debug_str	00000000 
0004c440 l       .debug_str	00000000 
0004c473 l       .debug_str	00000000 
0004c481 l       .debug_str	00000000 
0004c4b9 l       .debug_str	00000000 
0004c4cc l       .debug_str	00000000 
0004c501 l       .debug_str	00000000 
0004c537 l       .debug_str	00000000 
0004c592 l       .debug_str	00000000 
0004c5c5 l       .debug_str	00000000 
0004c5cc l       .debug_str	00000000 
0004c60e l       .debug_str	00000000 
0004c63f l       .debug_str	00000000 
0004c670 l       .debug_str	00000000 
0004c6a3 l       .debug_str	00000000 
0004c6aa l       .debug_str	00000000 
0004c6d7 l       .debug_str	00000000 
0004c712 l       .debug_str	00000000 
0004c725 l       .debug_str	00000000 
0004c756 l       .debug_str	00000000 
0004c760 l       .debug_str	00000000 
0004c7c1 l       .debug_str	00000000 
0004c829 l       .debug_str	00000000 
0004c866 l       .debug_str	00000000 
0004c8b4 l       .debug_str	00000000 
0004c8f0 l       .debug_str	00000000 
0004c92c l       .debug_str	00000000 
0004c965 l       .debug_str	00000000 
0004c99f l       .debug_str	00000000 
0004c9d8 l       .debug_str	00000000 
0004ca0f l       .debug_str	00000000 
0004ca48 l       .debug_str	00000000 
0004ca82 l       .debug_str	00000000 
0004cac8 l       .debug_str	00000000 
0004caeb l       .debug_str	00000000 
0004cb31 l       .debug_str	00000000 
0004cb54 l       .debug_str	00000000 
0004cb9d l       .debug_str	00000000 
0004cbc3 l       .debug_str	00000000 
0004cc0c l       .debug_str	00000000 
0004cc32 l       .debug_str	00000000 
0004cc7c l       .debug_str	00000000 
0004cca3 l       .debug_str	00000000 
0004cced l       .debug_str	00000000 
0004cd14 l       .debug_str	00000000 
0004cd61 l       .debug_str	00000000 
0004cd8b l       .debug_str	00000000 
0004cdd8 l       .debug_str	00000000 
0004ce02 l       .debug_str	00000000 
0004ce35 l       .debug_str	00000000 
0004ce61 l       .debug_str	00000000 
0004ceb7 l       .debug_str	00000000 
0004cee2 l       .debug_str	00000000 
0004cf3a l       .debug_str	00000000 
0004cf90 l       .debug_str	00000000 
0004cfc9 l       .debug_str	00000000 
0004cfd4 l       .debug_str	00000000 
0000bb0b l       .debug_str	00000000 
0004d00d l       .debug_str	00000000 
0004d034 l       .debug_str	00000000 
0004d06d l       .debug_str	00000000 
0004d0b4 l       .debug_str	00000000 
0004d0c1 l       .debug_str	00000000 
0004d2db l       .debug_str	00000000 
0004d0f0 l       .debug_str	00000000 
0004d130 l       .debug_str	00000000 
0004d144 l       .debug_str	00000000 
0004d186 l       .debug_str	00000000 
0004d1b7 l       .debug_str	00000000 
0004d1e7 l       .debug_str	00000000 
0004d218 l       .debug_str	00000000 
0004d249 l       .debug_str	00000000 
0004d280 l       .debug_str	00000000 
0004d28b l       .debug_str	00000000 
0004d2cb l       .debug_str	00000000 
0004d2df l       .debug_str	00000000 
0004d31b l       .debug_str	00000000 
0004d32b l       .debug_str	00000000 
0004d360 l       .debug_str	00000000 
0004d36a l       .debug_str	00000000 
0004d39f l       .debug_str	00000000 
0004d3a9 l       .debug_str	00000000 
0004d3fe l       .debug_str	00000000 
0004d446 l       .debug_str	00000000 
0004d48c l       .debug_str	00000000 
0004d4d3 l       .debug_str	00000000 
0004d51c l       .debug_str	00000000 
0004d56e l       .debug_str	00000000 
0004d5c0 l       .debug_str	00000000 
0004d65e l       .debug_str	00000000 
0004d690 l       .debug_str	00000000 
0004d6c9 l       .debug_str	00000000 
0004d6de l       .debug_str	00000000 
0004d719 l       .debug_str	00000000 
0004d730 l       .debug_str	00000000 
0004d76e l       .debug_str	00000000 
0004d788 l       .debug_str	00000000 
0004d7ea l       .debug_str	00000000 
0004d80f l       .debug_str	00000000 
0004d86a l       .debug_str	00000000 
0004d879 l       .debug_str	00000000 
0004d8ee l       .debug_str	00000000 
0004d90b l       .debug_str	00000000 
0004d945 l       .debug_str	00000000 
0004d982 l       .debug_str	00000000 
0004d98d l       .debug_str	00000000 
0004d9c5 l       .debug_str	00000000 
0004d9cc l       .debug_str	00000000 
0004da4b l       .debug_str	00000000 
0004daab l       .debug_str	00000000 
0004db09 l       .debug_str	00000000 
0004db67 l       .debug_str	00000000 
0004db9f l       .debug_str	00000000 
0004dbd4 l       .debug_str	00000000 
0004dbff l       .debug_str	00000000 
0004dc09 l       .debug_str	00000000 
0004dc39 l       .debug_str	00000000 
0004dc47 l       .debug_str	00000000 
0004dca0 l       .debug_str	00000000 
0004dcf3 l       .debug_str	00000000 
0004dd6f l       .debug_str	00000000 
0004ddd3 l       .debug_str	00000000 
0004de37 l       .debug_str	00000000 
0004de6d l       .debug_str	00000000 
0004de81 l       .debug_str	00000000 
0004dec2 l       .debug_str	00000000 
0004deda l       .debug_str	00000000 
0004df8e l       .debug_str	00000000 
0004dfc1 l       .debug_str	00000000 
0004dfd2 l       .debug_str	00000000 
0004e018 l       .debug_str	00000000 
0004e025 l       .debug_str	00000000 
0004e062 l       .debug_str	00000000 
0004e0a6 l       .debug_str	00000000 
0004e0e7 l       .debug_str	00000000 
0004e129 l       .debug_str	00000000 
0004e133 l       .debug_str	00000000 
0004e177 l       .debug_str	00000000 
0004e182 l       .debug_str	00000000 
0004e1d0 l       .debug_str	00000000 
0004e21e l       .debug_str	00000000 
0004e264 l       .debug_str	00000000 
0004e2ac l       .debug_str	00000000 
0004e2f4 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0004e35b l       .debug_str	00000000 
0004e3b4 l       .debug_str	00000000 
0004e41e l       .debug_str	00000000 
00003f0e l       .debug_str	00000000 
0004e488 l       .debug_str	00000000 
0004e503 l       .debug_str	00000000 
0004e578 l       .debug_str	00000000 
0004e583 l       .debug_str	00000000 
0004e5f8 l       .debug_str	00000000 
0004e603 l       .debug_str	00000000 
0004e65a l       .debug_str	00000000 
0004e6be l       .debug_str	00000000 
0004e6ca l       .debug_str	00000000 
0004e707 l       .debug_str	00000000 
0004e714 l       .debug_str	00000000 
0004e748 l       .debug_str	00000000 
0004e783 l       .debug_str	00000000 
0004e7df l       .debug_str	00000000 
0004e83a l       .debug_str	00000000 
0004e894 l       .debug_str	00000000 
000352ce l       .debug_str	00000000 
0004e8da l       .debug_str	00000000 
0004e940 l       .debug_str	00000000 
0004e977 l       .debug_str	00000000 
0004e97f l       .debug_str	00000000 
0004e9b7 l       .debug_str	00000000 
0004e9c0 l       .debug_str	00000000 
0004e9f8 l       .debug_str	00000000 
0004ea01 l       .debug_str	00000000 
0004ea38 l       .debug_str	00000000 
0004ea40 l       .debug_str	00000000 
0004ea78 l       .debug_str	00000000 
0004ea81 l       .debug_str	00000000 
0004eab9 l       .debug_str	00000000 
0004eac2 l       .debug_str	00000000 
0004eaf9 l       .debug_str	00000000 
0004eb01 l       .debug_str	00000000 
0004eb7b l       .debug_str	00000000 
0004ebf5 l       .debug_str	00000000 
0004ec6f l       .debug_str	00000000 
0004eceb l       .debug_str	00000000 
00007a65 l       .debug_str	00000000 
0004ed49 l       .debug_str	00000000 
0004eda8 l       .debug_str	00000000 
0004ee07 l       .debug_str	00000000 
0004ee66 l       .debug_str	00000000 
0004eec6 l       .debug_str	00000000 
0004ef24 l       .debug_str	00000000 
0004ef83 l       .debug_str	00000000 
0004efe2 l       .debug_str	00000000 
0004f041 l       .debug_str	00000000 
0004f0a1 l       .debug_str	00000000 
0004f0f6 l       .debug_str	00000000 
0004f14b l       .debug_str	00000000 
0004f1a5 l       .debug_str	00000000 
0004f1ff l       .debug_str	00000000 
0004f239 l       .debug_str	00000000 
0004f242 l       .debug_str	00000000 
0004f27c l       .debug_str	00000000 
0004f285 l       .debug_str	00000000 
0004f2c2 l       .debug_str	00000000 
000367b9 l       .debug_str	00000000 
0004f2fb l       .debug_str	00000000 
0004f35c l       .debug_str	00000000 
0004f3ba l       .debug_str	00000000 
0004f3fb l       .debug_str	00000000 
0004f439 l       .debug_str	00000000 
0004f472 l       .debug_str	00000000 
0004f4b1 l       .debug_str	00000000 
0004f4ef l       .debug_str	00000000 
0004f52d l       .debug_str	00000000 
0004f56e l       .debug_str	00000000 
0004f5b2 l       .debug_str	00000000 
0004f5ef l       .debug_str	00000000 
0004f655 l       .debug_str	00000000 
0004f6bc l       .debug_str	00000000 
0004f71f l       .debug_str	00000000 
0004f781 l       .debug_str	00000000 
0004f7e6 l       .debug_str	00000000 
0004f84f l       .debug_str	00000000 
0004f8b5 l       .debug_str	00000000 
0004f91b l       .debug_str	00000000 
0004f976 l       .debug_str	00000000 
0004f9dd l       .debug_str	00000000 
0004fa48 l       .debug_str	00000000 
0004faa3 l       .debug_str	00000000 
0004fafe l       .debug_str	00000000 
000167b4 l       .debug_str	00000000 
0004fb45 l       .debug_str	00000000 
0004fb8d l       .debug_str	00000000 
0004fbd5 l       .debug_str	00000000 
0004fc1d l       .debug_str	00000000 
0004fc66 l       .debug_str	00000000 
0004fcb0 l       .debug_str	00000000 
0004fcf7 l       .debug_str	00000000 
0004fd4a l       .debug_str	00000000 
0004fd65 l       .debug_str	00000000 
0004fdad l       .debug_str	00000000 
0004fe01 l       .debug_str	00000000 
0004fe49 l       .debug_str	00000000 
0004fe9d l       .debug_str	00000000 
0004fee5 l       .debug_str	00000000 
0004ff39 l       .debug_str	00000000 
0004ff82 l       .debug_str	00000000 
0004ffd7 l       .debug_str	00000000 
00050021 l       .debug_str	00000000 
00050079 l       .debug_str	00000000 
000500db l       .debug_str	00000000 
0005013a l       .debug_str	00000000 
0005019a l       .debug_str	00000000 
000501fa l       .debug_str	00000000 
0005025a l       .debug_str	00000000 
000502bb l       .debug_str	00000000 
0005031a l       .debug_str	00000000 
0005037a l       .debug_str	00000000 
000503da l       .debug_str	00000000 
0005043a l       .debug_str	00000000 
0005049b l       .debug_str	00000000 
000504f8 l       .debug_str	00000000 
00050553 l       .debug_str	00000000 
000505a9 l       .debug_str	00000000 
00050607 l       .debug_str	00000000 
0005065b l       .debug_str	00000000 
000506bc l       .debug_str	00000000 
00050722 l       .debug_str	00000000 
0005078a l       .debug_str	00000000 
000507f1 l       .debug_str	00000000 
0005084d l       .debug_str	00000000 
000508ae l       .debug_str	00000000 
00050908 l       .debug_str	00000000 
00050962 l       .debug_str	00000000 
000509c0 l       .debug_str	00000000 
00050a14 l       .debug_str	00000000 
00050a90 l       .debug_str	00000000 
00050af9 l       .debug_str	00000000 
00050b75 l       .debug_str	00000000 
00050bf1 l       .debug_str	00000000 
00050c5a l       .debug_str	00000000 
00050cd6 l       .debug_str	00000000 
00050d43 l       .debug_str	00000000 
00050d9d l       .debug_str	00000000 
00050df6 l       .debug_str	00000000 
00050e4e l       .debug_str	00000000 
00050ead l       .debug_str	00000000 
00050f0c l       .debug_str	00000000 
00050f6b l       .debug_str	00000000 
00050fcb l       .debug_str	00000000 
0005102b l       .debug_str	00000000 
0005108b l       .debug_str	00000000 
000510eb l       .debug_str	00000000 
0005114d l       .debug_str	00000000 
000511af l       .debug_str	00000000 
00051210 l       .debug_str	00000000 
00051272 l       .debug_str	00000000 
000512d4 l       .debug_str	00000000 
00051335 l       .debug_str	00000000 
00051397 l       .debug_str	00000000 
000513f9 l       .debug_str	00000000 
000367fd l       .debug_str	00000000 
00051442 l       .debug_str	00000000 
0005148e l       .debug_str	00000000 
00051496 l       .debug_str	00000000 
000514e0 l       .debug_str	00000000 
0005152b l       .debug_str	00000000 
00051532 l       .debug_str	00000000 
0005157d l       .debug_str	00000000 
000515c8 l       .debug_str	00000000 
00051614 l       .debug_str	00000000 
0005165e l       .debug_str	00000000 
000516ab l       .debug_str	00000000 
000516f6 l       .debug_str	00000000 
00051742 l       .debug_str	00000000 
0005178e l       .debug_str	00000000 
000517da l       .debug_str	00000000 
00051827 l       .debug_str	00000000 
00051871 l       .debug_str	00000000 
000518be l       .debug_str	00000000 
00051909 l       .debug_str	00000000 
00051955 l       .debug_str	00000000 
000519a1 l       .debug_str	00000000 
000519ed l       .debug_str	00000000 
00051a3a l       .debug_str	00000000 
00051a84 l       .debug_str	00000000 
00051ad1 l       .debug_str	00000000 
00051b1c l       .debug_str	00000000 
00051b68 l       .debug_str	00000000 
00051bb4 l       .debug_str	00000000 
00051c00 l       .debug_str	00000000 
00051c4d l       .debug_str	00000000 
00051c98 l       .debug_str	00000000 
00051ce6 l       .debug_str	00000000 
00051d32 l       .debug_str	00000000 
00051d7f l       .debug_str	00000000 
00051dcc l       .debug_str	00000000 
00051e19 l       .debug_str	00000000 
00051e67 l       .debug_str	00000000 
00051eb2 l       .debug_str	00000000 
00051efd l       .debug_str	00000000 
00051f49 l       .debug_str	00000000 
00051f95 l       .debug_str	00000000 
00051fe2 l       .debug_str	00000000 
0005202e l       .debug_str	00000000 
0005207b l       .debug_str	00000000 
000520c8 l       .debug_str	00000000 
00052127 l       .debug_str	00000000 
00052184 l       .debug_str	00000000 
000521e0 l       .debug_str	00000000 
0005223e l       .debug_str	00000000 
0005229b l       .debug_str	00000000 
000522f9 l       .debug_str	00000000 
00052356 l       .debug_str	00000000 
000523b4 l       .debug_str	00000000 
00052411 l       .debug_str	00000000 
00052470 l       .debug_str	00000000 
000524ce l       .debug_str	00000000 
0005252f l       .debug_str	00000000 
00052590 l       .debug_str	00000000 
000525f3 l       .debug_str	00000000 
00052624 l       .debug_str	00000000 
0005262c l       .debug_str	00000000 
0005268f l       .debug_str	00000000 
000526f2 l       .debug_str	00000000 
00052756 l       .debug_str	00000000 
000527ba l       .debug_str	00000000 
0005281e l       .debug_str	00000000 
00052882 l       .debug_str	00000000 
000528e5 l       .debug_str	00000000 
00052948 l       .debug_str	00000000 
000529ac l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052a74 l       .debug_str	00000000 
00052ad8 l       .debug_str	00000000 
00052b09 l       .debug_str	00000000 
00052b11 l       .debug_str	00000000 
00052b75 l       .debug_str	00000000 
00052bd9 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
00052ca1 l       .debug_str	00000000 
00052d01 l       .debug_str	00000000 
00052d61 l       .debug_str	00000000 
00052d8f l       .debug_str	00000000 
00052d98 l       .debug_str	00000000 
00052df9 l       .debug_str	00000000 
00052e5a l       .debug_str	00000000 
00052ebb l       .debug_str	00000000 
00052f1c l       .debug_str	00000000 
00052f73 l       .debug_str	00000000 
00052fc6 l       .debug_str	00000000 
0005300e l       .debug_str	00000000 
00053036 l       .debug_str	00000000 
0005307e l       .debug_str	00000000 
00053094 l       .debug_str	00000000 
000530dc l       .debug_str	00000000 
00053111 l       .debug_str	00000000 
00053159 l       .debug_str	00000000 
00053194 l       .debug_str	00000000 
000531dc l       .debug_str	00000000 
00053224 l       .debug_str	00000000 
00053245 l       .debug_str	00000000 
0005328d l       .debug_str	00000000 
00053298 l       .debug_str	00000000 
000532e0 l       .debug_str	00000000 
0005331d l       .debug_str	00000000 
00053365 l       .debug_str	00000000 
000533be l       .debug_str	00000000 
00053406 l       .debug_str	00000000 
00053422 l       .debug_str	00000000 
0005346a l       .debug_str	00000000 
00053516 l       .debug_str	00000000 
0005355e l       .debug_str	00000000 
0005357c l       .debug_str	00000000 
000535c4 l       .debug_str	00000000 
000535ce l       .debug_str	00000000 
00053616 l       .debug_str	00000000 
00053651 l       .debug_str	00000000 
00053699 l       .debug_str	00000000 
000536e8 l       .debug_str	00000000 
00053730 l       .debug_str	00000000 
00053757 l       .debug_str	00000000 
0005379f l       .debug_str	00000000 
000537c9 l       .debug_str	00000000 
00053811 l       .debug_str	00000000 
0005388c l       .debug_str	00000000 
000538d4 l       .debug_str	00000000 
0005391c l       .debug_str	00000000 
00053932 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
0005397a l       .debug_str	00000000 
000539c2 l       .debug_str	00000000 
00053a0a l       .debug_str	00000000 
00053a3b l       .debug_str	00000000 
00053a83 l       .debug_str	00000000 
00053ae7 l       .debug_str	00000000 
00053b2f l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
00053b77 l       .debug_str	00000000 
00053bbf l       .debug_str	00000000 
00053bcc l       .debug_str	00000000 
00053c14 l       .debug_str	00000000 
00053c1e l       .debug_str	00000000 
00053c66 l       .debug_str	00000000 
00053c6f l       .debug_str	00000000 
00053cb7 l       .debug_str	00000000 
00053cdf l       .debug_str	00000000 
00053d27 l       .debug_str	00000000 
00053d6f l       .debug_str	00000000 
00053d91 l       .debug_str	00000000 
00053dd9 l       .debug_str	00000000 
00053e0a l       .debug_str	00000000 
00053e52 l       .debug_str	00000000 
00053e9a l       .debug_str	00000000 
00053ed2 l       .debug_str	00000000 
00053f1a l       .debug_str	00000000 
00053f4f l       .debug_str	00000000 
00053f97 l       .debug_str	00000000 
00053fc0 l       .debug_str	00000000 
00054008 l       .debug_str	00000000 
0005402c l       .debug_str	00000000 
00054074 l       .debug_str	00000000 
00054099 l       .debug_str	00000000 
000540e1 l       .debug_str	00000000 
000540fe l       .debug_str	00000000 
00054146 l       .debug_str	00000000 
00054151 l       .debug_str	00000000 
00054199 l       .debug_str	00000000 
000541c1 l       .debug_str	00000000 
00054209 l       .debug_str	00000000 
00054218 l       .debug_str	00000000 
00054260 l       .debug_str	00000000 
000542a8 l       .debug_str	00000000 
000542c4 l       .debug_str	00000000 
0005430c l       .debug_str	00000000 
00054383 l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00054442 l       .debug_str	00000000 
0005448a l       .debug_str	00000000 
00054493 l       .debug_str	00000000 
000544db l       .debug_str	00000000 
00054501 l       .debug_str	00000000 
00054549 l       .debug_str	00000000 
0005457c l       .debug_str	00000000 
000545c4 l       .debug_str	00000000 
000545e1 l       .debug_str	00000000 
00054629 l       .debug_str	00000000 
00054632 l       .debug_str	00000000 
0005467a l       .debug_str	00000000 
000546c2 l       .debug_str	00000000 
000546e6 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
0005472e l       .debug_str	00000000 
00054776 l       .debug_str	00000000 
000547be l       .debug_str	00000000 
000548b6 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
000548fe l       .debug_str	00000000 
00054946 l       .debug_str	00000000 
0005498e l       .debug_str	00000000 
000549bb l       .debug_str	00000000 
00015f8f l       .debug_str	00000000 
00054a03 l       .debug_str	00000000 
00054a4b l       .debug_str	00000000 
00054aa8 l       .debug_str	00000000 
00054af0 l       .debug_str	00000000 
00054af9 l       .debug_str	00000000 
00054b41 l       .debug_str	00000000 
00054b5e l       .debug_str	00000000 
00054ba6 l       .debug_str	00000000 
00054bdc l       .debug_str	00000000 
00054c24 l       .debug_str	00000000 
00054c59 l       .debug_str	00000000 
00054ca1 l       .debug_str	00000000 
00054cda l       .debug_str	00000000 
00054d22 l       .debug_str	00000000 
00054d3e l       .debug_str	00000000 
00054d86 l       .debug_str	00000000 
00054d8e l       .debug_str	00000000 
00054dd6 l       .debug_str	00000000 
00054df1 l       .debug_str	00000000 
00054e39 l       .debug_str	00000000 
00054e61 l       .debug_str	00000000 
00054eab l       .debug_str	00000000 
00054ef5 l       .debug_str	00000000 
00054f54 l       .debug_str	00000000 
00054fb1 l       .debug_str	00000000 
0005500a l       .debug_str	00000000 
00055069 l       .debug_str	00000000 
000550c8 l       .debug_str	00000000 
00055129 l       .debug_str	00000000 
0005518c l       .debug_str	00000000 
000551f4 l       .debug_str	00000000 
00055256 l       .debug_str	00000000 
000552bc l       .debug_str	00000000 
0005531e l       .debug_str	00000000 
00055383 l       .debug_str	00000000 
000553e6 l       .debug_str	00000000 
00055442 l       .debug_str	00000000 
00055499 l       .debug_str	00000000 
000554f2 l       .debug_str	00000000 
00055545 l       .debug_str	00000000 
000555a1 l       .debug_str	00000000 
00055607 l       .debug_str	00000000 
0005565d l       .debug_str	00000000 
000556ba l       .debug_str	00000000 
0005571c l       .debug_str	00000000 
00055775 l       .debug_str	00000000 
000557d0 l       .debug_str	00000000 
0005582b l       .debug_str	00000000 
00055886 l       .debug_str	00000000 
000558e3 l       .debug_str	00000000 
00055940 l       .debug_str	00000000 
00055986 l       .debug_str	00000000 
000559d0 l       .debug_str	00000000 
00055a10 l       .debug_str	00000000 
00055a4d l       .debug_str	00000000 
00055a91 l       .debug_str	00000000 
00055acd l       .debug_str	00000000 
00055b11 l       .debug_str	00000000 
00055b5a l       .debug_str	00000000 
00055b63 l       .debug_str	00000000 
00055bac l       .debug_str	00000000 
00055bb5 l       .debug_str	00000000 
00055c1e l       .debug_str	00000000 
00055c7b l       .debug_str	00000000 
00055cde l       .debug_str	00000000 
00055d34 l       .debug_str	00000000 
00055d8a l       .debug_str	00000000 
00055de3 l       .debug_str	00000000 
00055e3b l       .debug_str	00000000 
00055e9f l       .debug_str	00000000 
00055f25 l       .debug_str	00000000 
00055f2b l       .debug_str	00000000 
00055fb1 l       .debug_str	00000000 
00055fb7 l       .debug_str	00000000 
00056039 l       .debug_str	00000000 
000560bb l       .debug_str	00000000 
0005613e l       .debug_str	00000000 
00056145 l       .debug_str	00000000 
000561c8 l       .debug_str	00000000 
000561cf l       .debug_str	00000000 
00056255 l       .debug_str	00000000 
000562db l       .debug_str	00000000 
0005635e l       .debug_str	00000000 
000563e1 l       .debug_str	00000000 
00056463 l       .debug_str	00000000 
000564e9 l       .debug_str	00000000 
0005656f l       .debug_str	00000000 
000565f9 l       .debug_str	00000000 
00056681 l       .debug_str	00000000 
00056709 l       .debug_str	00000000 
00056771 l       .debug_str	00000000 
000567da l       .debug_str	00000000 
00056844 l       .debug_str	00000000 
000568af l       .debug_str	00000000 
0005690d l       .debug_str	00000000 
0005696b l       .debug_str	00000000 
000569c9 l       .debug_str	00000000 
00056a28 l       .debug_str	00000000 
00056a86 l       .debug_str	00000000 
00056ae5 l       .debug_str	00000000 
00056b43 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00056c01 l       .debug_str	00000000 
00056c60 l       .debug_str	00000000 
00056cbe l       .debug_str	00000000 
00056d1d l       .debug_str	00000000 
00056d7c l       .debug_str	00000000 
00056ddb l       .debug_str	00000000 
00056e3a l       .debug_str	00000000 
00056e99 l       .debug_str	00000000 
00056ef8 l       .debug_str	00000000 
00056f57 l       .debug_str	00000000 
00056fb6 l       .debug_str	00000000 
00057015 l       .debug_str	00000000 
00057074 l       .debug_str	00000000 
000570d3 l       .debug_str	00000000 
00057132 l       .debug_str	00000000 
00057191 l       .debug_str	00000000 
000571f0 l       .debug_str	00000000 
0005724f l       .debug_str	00000000 
000572ae l       .debug_str	00000000 
0005730d l       .debug_str	00000000 
0005736c l       .debug_str	00000000 
000573cb l       .debug_str	00000000 
0005742b l       .debug_str	00000000 
0005748a l       .debug_str	00000000 
000574e9 l       .debug_str	00000000 
00057548 l       .debug_str	00000000 
000575a8 l       .debug_str	00000000 
00057607 l       .debug_str	00000000 
00057666 l       .debug_str	00000000 
000576c5 l       .debug_str	00000000 
00057725 l       .debug_str	00000000 
00016870 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00018890 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
0001889a l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00016f16 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00017f3e l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00016e10 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00016ec0 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00017438 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00016820 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00016884 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0002083c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
000208b7 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00020aa8 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001fe10 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00016eea l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00016ef0 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00016ee4 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00016822 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
000188a8 l     F .text	00000024 __semihost
000188cc l     F .text	00000010 debugger_connected
000188dc l     F .text	0000002e semihost_write
000189b0 l     F .text	0000001c semihosting_console_write_ch
200016b4 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200016b8 l     O .bss	00000010 avail_queue
200016c8 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200016d4 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00018b80 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00018bd4 l     F .text	00000050 hal_gpio_irq_handler
00018c24 l     F .text	0000002c hal_gpio_irq_setup
00018c50 l     F .text	0000001c hal_gpio_find_empty_slot
00018c6c l     F .text	00000038 hal_gpio_find_pin
200016d8 l     O .bss	00000040 hal_gpio_irqs
20001718 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00018e00 l     F .text	0000007a hal_i2c_delay_us
00018e7c l     F .text	00000024 hal_i2c_resolve
00018ea0 l     F .text	0000001c hal_i2c_convert_status
00018ebc l     F .text	00000012 read_gpio_inbuffer
00018ece l     F .text	000000a2 hal_i2c_clear_bus
00020f10 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001926c l     F .text	0000006e nrf52_irqm_handler
000192f4 l     F .text	00000014 hal_spi_stop_transfer
00019308 l     F .text	0000004c hal_spi_config_slave
00019354 l     F .text	000000b8 hal_spi_init_master
0001940c l     F .text	000000e0 hal_spi_config_master
00020f18 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
000197f0 l     F .text	0000000e nrf52_hal_wdt_default_handler
00019800 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00019a18 l     F .text	00000016 os_main
20001820 l     O .bss	00004000 g_os_main_stack
20001720 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00019d28 l     F .text	0000005c os_dev_add
00019d84 l     F .text	00000026 os_dev_initialize
00019daa l     F .text	00000020 os_dev_init
20005820 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20005828 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001a2d4 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001a3e8 l     F .text	00000010 os_msys_find_biggest_pool
0001a3f8 l     F .text	0000002c os_msys_find_pool
0001a470 l     F .text	00000044 os_msys_init_once
20005838 l     O .bss	00004900 os_msys_1_data
2000a138 l     O .bss	0000000c os_msys_1_mbuf_pool
2000a144 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001a6cc l     F .text	00000020 os_sanity_check_list_lock
0001a6ec l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001ab60 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001ac50 l     F .text	0000004c os_deltatime
0001ac9c l     F .text	0000005c os_time_tick
2000a168 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001afb8 l       .text	00000000 SVC_User
0001afd6 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001b078 l       .text	00000000 test1
0001b06c l       .text	00000000 loop1
0001b07e l       .text	00000000 res1
0001b09a l       .text	00000000 test2
0001b0a2 l       .text	00000000 done
0001b08e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001b0ae l       .text	00000000 test1
0001b0aa l       .text	00000000 loop1
0001b0bc l       .text	00000000 test2
0001b0b8 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001b126 l     F .text	000000c0 ui2a
0001b1e6 l     F .text	00000020 i2a
0001b206 l     F .text	00000030 a2d
0001b236 l     F .text	00000036 a2i
0001b26c l     F .text	0000002a putf
0001b298 l     F .text	0000011c putchw
0001b3b4 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001b738 l     F .text	00000004 stdin_read
0001b73c l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b7ec l     F .text	00000028 nrf52k_flash_wait_ready
0001b814 l     F .text	00000054 nrf52k_flash_erase_sector
0001b868 l     F .text	00000004 nrf52k_flash_init
0001b86c l     F .text	00000020 nrf52k_flash_sector_info
0001b88c l     F .text	000000d0 nrf52k_flash_write
0001b95c l     F .text	0000000e nrf52k_flash_read
000210d0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001b96c l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001bb78 l     F .text	0000000a nrf_read_timer_cntr
0001bb84 l     F .text	000000b4 nrf_timer_set_ocmp
0001bc38 l     F .text	0000000a nrf_timer_disable_ocmp
0001bc42 l     F .text	0000000a nrf_rtc_disable_ocmp
0001bc4c l     F .text	00000054 hal_timer_read_bsptimer
0001bca0 l     F .text	00000076 hal_timer_chk_queue
0001bd16 l     F .text	0000002c hal_timer_irq_handler
000210ec l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001bedc l     F .text	00000034 nrf52_periph_create_timers
0001bf10 l     F .text	00000020 nrf52_periph_create_i2c
0001bf30 l     F .text	00000020 nrf52_periph_create_spi
00021104 l     O .text	0000000c hal_i2c1_cfg
00021110 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001bf64 l     F .text	00000028 sensor_mgr_remove
0001bf8c l     F .text	00000060 sensor_mgr_insert
0001bfec l     F .text	0000000a sensor_type_traits_empty
0001bff8 l     F .text	0000000c sensor_mgr_evq_set
0001c032 l     F .text	0000005c sensor_read_data_func
0001c090 l     F .text	00000048 sensor_base_ts_update_event
0001c0d8 l     F .text	00000050 sensor_up_timestamp
0001c160 l     F .text	000000a0 sensor_mgr_init
0001c3cc l     F .text	0000007c sensor_mgr_wakeup_event
0001c22a l     F .text	00000032 sensor_update_nextrun
0001c25c l     F .text	0000001e sensor_calc_nextrun_delta
0001c27c l     F .text	00000024 sensor_find_min_nextrun_sensor
0001c354 l     F .text	0000004a sensor_mgr_poll_bytype
0001c39e l     F .text	0000002e sensor_poll_per_type_trait
2000a19c l     O .bss	00000078 sensor_notify_evt_area
2000a214 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000a230 l     O .bss	00000008 oc_sem
2000a238 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000a23c l     O .bss	0000000c hw_id
2000a248 l     O .bss	00000004 hw_id_len
2000a250 l     O .bss	00000008 sensor_node_address
2000a258 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00021128 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00021134 l     O .text	0000003c SENSOR_NODE_HW_IDS
000211d0 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001c5f0 l     F .text	00000050 config_device
2000a290 l     O .bss	00000014 adc_1_itf_temp_stub
2000a2a8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001c69c l     F .text	00000004 temp_stub_close
0001c6a0 l     F .text	0000001c temp_stub_sensor_get_config
0001c6bc l     F .text	00000026 temp_stub_open
0001c798 l     F .text	0000007c temp_stub_sensor_read
00021214 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001c83c l     F .text	00000030 oc_buffer_tx
0001c86c l     F .text	0000002c oc_buffer_rx
2000a368 l     O .bss	00000018 oc_inq
2000a380 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000a398 l     O .bss	000000c8 oc_client_cb_area
2000a460 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000a47c l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000a480 l     O .bss	0000001c oc_rep_objects
2000a49c l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001c9c0 l     F .text	00000078 flash_map_read_mfg
2000a4cc l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001cb14 l     F .text	00000094 mfg_seek_next_aux
0001cba8 l     F .text	00000070 mfg_read_mmr
0001cc18 l     F .text	00000054 mfg_read_next_mmr
0001cc6c l     F .text	0000003c mfg_open_flash_area
0001cca8 l     F .text	00000044 mfg_read_tlv_body
0001cd74 l     F .text	0000004e mfg_read_mmr_refs
2000a544 l     O .bss	00000001 mfg_initialized
2000a548 l     O .bss	00000018 mfg_mmrs
2000a560 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001cdda l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
00007425 l       .debug_str	00000000 
0000747c l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000074c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000074d0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00009922 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE
00016a28 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00015a4a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
00015176 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009a94 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E
000114b2 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
00019ff8 g     F .text	00000040 os_eventq_remove
00011c48 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0000da06 g     F .text	0000007a _ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E
00009a52 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17hb422a4f740ac0e1bE
0001ae44 g     F .text	00000018 os_arch_init
0001b060 g     F .text	00000048 memcmp
0000ea9a g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
000165cc g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00011d50 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00012ee6 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014d5a g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
0000ee0a g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
0001630c g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00016194 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
000100c0 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
0000fcca g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00016a58 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
00011c2a g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
0000f7a6 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00014c26 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
000186b8 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000a680 g     O .bss	0000001c nrf52_hal_timer0
00014fc2 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000f78c g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00014e38 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001c220 g     F .text	0000000a sensor_unlock
0001283e g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00014f66 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
00010d3a g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00012f3a g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014f4a g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00015e62 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
0000f5f8 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001a718 g     F .text	00000024 os_sanity_check_register
0001c6f0 g     F .text	0000007c temp_stub_init
0001a7b8 g     F .text	00000054 os_sched_insert
2000a564 g     O .bss	00000001 g_silence_console
00015490 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
0001060e g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
00015548 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
000131de g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001ce78 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000167f2 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00009888 g     F .text	0000008e _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE
00014d1e g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00010ec4 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00015c0a g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
0000e044 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E
00012b76 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE
0000f364 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
000158d0 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00018304 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
00016804 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
000151da g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
00015634 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
0000e1be g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
0000f19a g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
000100f2 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001c8fc g     F .text	00000020 oc_send_buffer
0001aeec g     F .text	00000030 os_arch_start
000159ba g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
00011cbc g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001c514 g     F .text	0000001a is_standalone_node
00019ee4 g     F .text	00000010 os_eventq_init
00017916 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
000132a6 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00016ffa g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00012f24 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
0000f45a g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
000164de g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001c448 g     F .text	00000028 init_sensor_coap
0001c91c g     F .text	0000004c oc_send_multicast_message
00015c1a g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00012df2 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE
0000e7c0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
000178d2 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000a6a0 g     O .bss	00000034 sensor_mgr
00018a4c g     F .text	0000002c console_dump
0001a8e4 g     F .text	00000078 os_sched_wakeup
0001316e g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00018498 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
0000f1d2 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001cdd8 g     F .text	00000002 _fini
00019d1c g     F .text	0000000a os_cputime_get32
00012fea g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
0000fb6c g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000a565 g     O .bss	00000001 g_console_input_ignore
000099f6 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE
0001add4 g     F .text	00000014 os_arch_ctx_sw
000131b4 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00012cb0 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E
00015304 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001b022 g     F .text	0000000c SysTick_Handler
0001c488 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0000ebb6 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00012f50 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
00010014 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
0000dc12 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E
000131e8 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001b0fa g     F .text	0000001c strcmp
00015be6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000a598 g     O .bss	00000050 g_idle_task
00019ed4 g     F .text	00000010 os_dev_reset
000166be g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
0001013c g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001aa34 g     F .text	00000010 os_sem_init
0000deac g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E
00013226 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE
000189cc g     F .text	00000070 console_printhex
000100ec g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
000212d4 g       .text	00000000 __exidx_start
0001c4f8 g     F .text	0000001c is_collector_node
000105be g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0000db4a g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE
0001b0c2 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
000181e8 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00013296 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E
0001895c g     F .text	00000054 console_buffer
00019ef4 g     F .text	0000000a os_eventq_inited
00018b94 g     F .text	0000000c sysinit_end
00016142 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
000169d0 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000a738 g       .bss	00000000 __HeapBase
000154e0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
0001542e g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
0000ffc0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
00011c8e g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
0000fc9e g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00014da2 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001ca78 g     F .text	00000026 flash_area_read
0001319e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001c98e g     F .text	00000002 oc_register_ip4
0000f6b0 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001c990 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00012c02 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE
0001cdf8 g     F .text	00000028 hal_flash_init
00019e9c g     F .text	00000036 os_dev_close
0002126c g     O .text	00000048 sysflash_map_dflt
00009ab0 g     F .text	000000d2 _ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E
0001b7e0 g     F .text	0000000c hal_bsp_init
0000d91a g     F .text	000000ec _ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E
0000f27e g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00011dfc g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000e8bc g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00015e90 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E
00012c58 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E
000110dc g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
0000e782 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001d1d4 g     F .text	00000004 __aeabi_memcpy4
00015d36 g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
00019638 g     F .text	0000002c hal_spi_set_txrx_cb
0001d1cc g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000a568 g     O .bss	00000004 console_is_midline
0001d1cc g     F .text	00000006 __aeabi_memclr4
000094b4 g     F .text	000000e2 .hidden _ZN3app5chip88on_start17hf865f4cce3d1fe15E
00011c7e g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
00019130 g     F .text	0000013c hal_i2c_master_read
000155c8 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001b418 g     F .text	0000025c tfp_format
000164ae g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001c2ec g     F .text	00000068 sensor_read
00012bba g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E
0000f772 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014fd2 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015b3e g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001d1d4 g     F .text	00000004 __aeabi_memcpy
0001d1d4 g     F .text	00000004 __aeabi_memcpy8
2000a6d4 g     O .bss	00000020 st_up_osco
0001af1c g     F .text	0000005c os_arch_os_start
0001c2ce g     F .text	0000001e sensor_init
20000000 g       .bss	00000000 _ram_start
0001ad44 g     F .text	00000026 os_time_delay
00014fe2 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0001c98c g     F .text	00000002 oc_register_gatt
00012e06 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E
20000a00 g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001ce74 g     F .text	00000004 hal_bsp_hw_id_len
00019cdc g     F .text	00000034 os_callout_wakeup_ticks
00012e9a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h8a25dee97102e103E
0001a052 g     F .text	00000026 os_mqueue_get
00018f70 g     F .text	00000098 hal_i2c_init
000177a4 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
000181e8 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001ee08 g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
0000e340 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00012dde g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E
000123dc g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
0001647e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001a9e4 g     F .text	00000022 os_sched
0000f376 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000e244 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
0000e902 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
00011d0c g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001c004 g     F .text	0000002e sensor_mgr_match_bytype
0000e7d6 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014ee8 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
000129c0 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001a520 g     F .text	00000014 os_mutex_init
0000f664 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
0001146e g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000a570 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00015658 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
0000e9e2 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
000163ee g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000fe50 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000ff96 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
0000f276 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00013392 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001a4c4 g     F .text	00000028 os_msys_get_pkthdr
0001c76c g     F .text	0000002c temp_stub_get_raw_temperature
0001a95c g     F .text	0000003c os_sched_os_timer_exp
00019dcc g     F .text	00000040 os_dev_create
00011ca0 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
00016648 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00016234 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE
0001a708 g     F .text	00000010 os_sanity_check_init
00016aba g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00019d10 g     F .text	0000000c os_cputime_init
00019fe0 g     F .text	00000018 os_eventq_run
0000ed96 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001a4ec g     F .text	00000034 os_msys_init
00015e6a g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
000161b8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE
00016018 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001adca g     F .text	0000000a timer_handler
0000e148 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000167f6 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
0000ff26 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
0000f2b0 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014f1a g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
000167ee g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00016a98 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0001247c g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00018498 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
000150bc g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001b674 g     F .text	00000008 vfprintf
00014ab0 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
0000e92e g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
000130b4 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001a0f2 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
0001644e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00017ca6 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00011d74 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
00016a2c g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001adfa g     F .text	0000000a os_arch_in_critical
0000de72 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E
00015534 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001a7a8 g     F .text	00000010 os_sanity_init
00012ae0 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE
00015e56 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
000150e6 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00018498 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00014f84 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
000198bc g     F .text	0000004c __assert_func
00016220 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00015826 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00015104 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001a392 g     F .text	0000001e os_memblock_put_from_cb
0001af7c g     F .text	00000014 os_set_env
2000a65c g     O .bss	00000004 g_os_last_ctx_sw_time
000131fa g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00018b2c g     F .text	00000048 console_printf
00013210 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
00012910 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
0000e802 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
000130ba g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
0001638e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001af90 g     F .text	00000006 os_arch_init_task_stack
0001cd64 g     F .text	00000010 mfg_open
00018498 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
000099fe g     F .text	00000054 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE
0001c8c0 g     F .text	00000030 oc_ri_mem_init
00010c2a g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001b7d0 g     F .text	00000010 hal_bsp_flash_dev
0001caa0 g     F .text	00000070 flash_map_init
2000a670 g     O .bss	00000004 g_os_time
00014ed0 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
00010898 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001b02e g     F .text	0000001e os_default_irq_asm
00019908 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00019570 g     F .text	00000068 hal_spi_disable
00015d0c g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0000f744 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001c992 g     F .text	00000002 oc_register_lora
00018304 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001a174 g     F .text	000000a8 os_mbuf_append
0001c640 g     F .text	0000005c temp_stub_create
0001ce20 g     F .text	00000054 hal_flash_read
0001890c g     F .text	00000048 console_flush
000165a0 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014f32 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
00019b5c g     F .text	0000001a os_start
0001bd54 g     F .text	00000060 hal_timer_init
00012f64 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001b74c g     F .text	00000010 rust_sysinit
0000e0c0 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE
00008164  w    F .text	00000002 I2S_IRQHandler
00018a3c g     F .text	00000010 console_printint
0001aa08 g     F .text	0000002c os_sched_resort
000210ac g     O .text	00000008 MemFile_methods
0001b720 g     F .text	00000018 fmemopen_w
00014006 g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
000194ec g     F .text	00000038 hal_spi_config
0001d1c8  w    F .text	00000002 .hidden __aeabi_ldiv0
0001a3d8 g     F .text	00000010 os_mempool_module_init
0001a9d8 g     F .text	0000000c os_sched_next_task
00015cb0 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
00011cd6 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00018d2a g     F .text	00000034 hal_gpio_read
00019bb0 g     F .text	0000001a os_callout_init
0001a4b4 g     F .text	00000010 os_msys_reset
00009916 g     F .text	0000000c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E
0001b67c g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001cecc g     F .text	00000000 .hidden __aeabi_uldivmod
0000dc60 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E
0001ad6c g     F .text	00000038 os_gettimeofday
00018ab8 g     F .text	0000001e console_write
0001653e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
0001776e g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
0000dc8c g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E
00010d26 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00019a3c g     F .text	00000070 os_init_idle_task
0001ae5c g     F .text	0000008c os_arch_os_init
000103aa g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
0000ff5e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00019aac g     F .text	000000b0 os_init
2000a648 g     O .bss	00000008 g_os_mempool_list
00010d1c g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011ce6 g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
0000e818 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0000ddda g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E
00018ab4 g     F .text	00000004 semihosting_console_init
0001ccfe g     F .text	0000001a mfg_seek_next_with_type
0001a5ec g     F .text	000000e0 os_mutex_pend
00013256 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00018d08 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
0000dcb8 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE
0000e8fa g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
0000e962 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001cdc4 g     F .text	00000014 __wrap_coap_receive
000163be g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000a56c g     O .bss	00000001 sysinit_active
000132b6 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014bfc g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001b6f0 g     F .text	0000002e memfile_write
0001d1c8  w    F .text	00000002 .hidden __aeabi_idiv0
00015e2a g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
00019a30 g     F .text	0000000c os_started
00015aaa g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001c898 g     F .text	00000028 oc_buffer_init
0000fccc g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000ff42 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000a650 g     O .bss	0000000c g_os_sanity_check_mu
0000f7b6 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000dee4 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE
0001d1cc g     F .text	00000006 __aeabi_memclr
000087d2 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E
0001d1d8 g     F .text	0000009a __aeabi_memset4
0001341e g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00017776 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
000165b8 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
0000de5e g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E
0001ad04 g     F .text	00000040 os_time_advance
00019524 g     F .text	0000004c hal_spi_enable
0000e12a g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE
0001cd2c g     F .text	00000038 mfg_init
0000f7ec g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000a5e8 g     O .bss	00000050 g_os_main_task
0000dbcc g     F .text	00000030 _ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E
0001d1d8 g     F .text	0000009a __aeabi_memset8
00018246 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f26a g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
000212ec g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000a04 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00016db8 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
0000f1f8 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
000187ac g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00018ba0 g     F .text	00000034 NVIC_Relocate
00018b88 g     F .text	0000000c sysinit_start
00015e12 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00015e42 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
000210b8 g     O .text	00000018 nrf52k_flash_dev
00015ec6 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E
0001bdb4 g     F .text	000000f8 hal_timer_config
00014eb8 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014cd2 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001b6dc g     F .text	00000014 vprintf
0000f696 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00018954 g     F .text	00000008 disable_buffer
0000db92 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE
2000a638 g     O .bss	00000004 g_os_started
00016a20 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00014e78 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
00019e38 g     F .text	00000020 os_dev_lookup
00015a1a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
0000fe44 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0000dfa8 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE
00019898 g     F .text	00000010 hal_watchdog_enable
2000a674 g     O .bss	0000000c g_hal_os_tick
0001adf4 g     F .text	00000006 os_arch_restore_sr
00019c08 g     F .text	00000078 os_callout_reset
00010d30 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001cd18 g     F .text	0000000a mfg_read_tlv_flash_area
00013272 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
000166ce g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E
00015dfc g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001a040 g     F .text	00000012 os_mqueue_init
0000e3d2 g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
0001641e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00012ea2 g     F .text	00000012 _ZN4core3mem4swap17h9f9b2c00c891c39bE
000156e0 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0000dbfc g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE
0001c6e2 g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
00019bcc g     F .text	0000003c os_callout_stop
0001567e g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001a13c g     F .text	00000024 os_mbuf_free_chain
00009936 g     F .text	000000c0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E
0000f7e2 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001b75c g     F .text	00000030 mem_init_mbuf_pool
0000f35c g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00013204 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00019008 g     F .text	00000128 hal_i2c_master_write
00015a7a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00013400 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0000e5d6 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0000d73e g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E
00015ba8 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001a038 g     F .text	00000008 os_eventq_dflt_get
0001c208 g     F .text	00000018 sensor_lock
00012efc g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00012cd2 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E
00018ae0 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001a160 g     F .text	00000014 os_mbuf_len
0001a128 g     F .text	00000014 os_mbuf_free
00010560 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
0001500e g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
0000e7ec g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
0000eda2 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00018ad6 g     F .text	00000008 console_blocking_mode
0001039e g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
00015e78 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE
00011d1c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00011208 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00012f10 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001bf50 g     F .text	00000010 nrf52_periph_create
00015afc g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001a73c g     F .text	0000006c os_sanity_run
00009c2c g     F .text	00003b12 _ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E
0000dc2e g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00015f1e g     F .text	00000042 _ZN4core3ptr4read17h10ae8fa070723038E
00014ac4 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014d36 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
00016662 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
0001a34c g     F .text	00000014 os_mempool_init
000210b4 g     O .text	00000004 stdout
00012a70 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00019e0c g     F .text	0000002c os_dev_initialize_all
0000f396 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014e58 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
000161e2 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00012a8c g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E
00012be0 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE
000199a0 g     F .text	00000078 os_idle_task
0000f44a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00016324 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00011c60 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
0001658c g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00011026 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000d822 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE
0001746c g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001ca38 g     F .text	00000040 flash_area_open
00015cca g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015af2 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
00014d7e g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
0000d786 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E
00008164 g     F .text	00000002 Default_Handler
00016a1e g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000fe6a g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001a424 g     F .text	0000004c os_msys_register
00015cf2 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
0000fd22 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000a160 g     O .bss	00000004 g_os_sanity_check_list
00012874 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
0000e938 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
0000dcc8 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E
0000e512 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
000195d8 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001c144 g     F .text	00000010 sensor_mgr_unlock
2000a730 g     O .bss	00000004 flash_map_entries
0001818a g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0000db64 g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E
0001632e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00015440 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001c994 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
000161a6 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E
0001597a g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
000124a8 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
000100d6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
00015122 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000eaac g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001ccec g     F .text	00000012 mfg_seek_next
0000d878 g     F .text	000000a2 _ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E
00015732 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
000159ea g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0000edac g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
0001514c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
000171dc g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001a0b6 g     F .text	0000000a os_mbuf_pool_init
2000a640 g     O .bss	00000008 g_callout_list
0001a848 g     F .text	0000000c os_sched_set_current_task
00019c80 g     F .text	0000005c os_callout_tick
0000e134 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E
0000fd3e g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
0000ea14 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
00016576 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
00019820 g     F .text	00000078 hal_watchdog_init
2000a664 g     O .bss	00000001 g_task_id
0001856e g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
00011d04 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
00019e58 g     F .text	00000044 os_dev_open
2000a660 g     O .bss	00000004 g_current_task
000167ea g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
000162a0 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
0000f25e g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0000e0e8 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E
000095a0 g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E
000192dc g     F .text	00000018 nrf52_spi0_irq_handler
0001c200 g     F .text	00000008 sensor_pkg_init
0000dc40 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E
0001c814 g     F .text	00000028 temp_stub_config
0001a078 g     F .text	0000003e os_mqueue_put
000187ac g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00019664 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001a83c g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000130d6 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001cb10 g     F .text	00000002 modlog_init
00012e3c g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E
000153ca g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015ab4 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
00019710 g     F .text	000000e0 hal_spi_txrx_noblock
00016998 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
0001777e g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000f782 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
0000f5d4 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001a80c g     F .text	00000030 os_sched_ctx_sw_hook
00009b82 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E
0001c2a0 g     F .text	0000002e sensor_mgr_register
000169d0 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00012d24 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E
0001701c g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
0000fcb4 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000fdba g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
0001663a g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
0000f452 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
0000e7b4 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001a0c0 g     F .text	00000032 os_mbuf_get
000095b0 g     F .text	000002d8 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E
2000a668 g     O .bss	00000008 g_os_task_list
0000f04e g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00016ce6 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001b6a0 g     F .text	0000003a vsnprintf
0000dc52 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E
00013ed2 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
00012b20 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E
0001a534 g     F .text	000000b8 os_mutex_release
0000edb4 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00012af8 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E
0000eb68 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001c154 g     F .text	0000000c sensor_mgr_evq_get
00012e18 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E
0000d762 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E
00012424 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
0000e916 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
0001555c g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
0000da80 g     F .text	000000ba _ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E
2000a63c g     O .bss	00000004 g_os_idle_ctr
00018ca4 g     F .text	0000002c hal_gpio_init_in
0000e8b2 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00010e52 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001bf60 g     F .text	00000002 sensor_dev_create
0000e424 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000f002 g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00018cd0 g     F .text	00000038 hal_gpio_init_out
0000f474 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0000e546 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
0001656e g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00015ca6 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
0001003e g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001acf8 g     F .text	0000000c os_time_get
00016a20 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
00011bbc g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001a3b0 g     F .text	00000026 os_memblock_put
00013f62 g     F .text	000000a4 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001a854 g     F .text	00000090 os_sched_sleep
0000e8f0 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001c128 g     F .text	0000001c sensor_mgr_lock
0001cefc g     F .text	000002cc .hidden __udivmoddi4
00012f1c g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001bad8 g     F .text	000000a0 os_tick_init
00014c80 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
00016a1a g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
0000f6f6 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001a998 g     F .text	00000040 os_sched_wakeup_ticks
0001620c g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE
0000db3a g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE
0000ff7a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001beac g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00018dd8 g     F .text	00000028 hal_gpio_irq_enable
00012eb4 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE
0001c8f0 g     F .text	0000000c oc_evq_set
0001c470 g     F .text	00000018 is_sensor_node
00009bd8 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E
0001818a g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001c968 g     F .text	00000024 oc_init
000183c2 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
000183c2 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00010c60 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
0001795a g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00015f8a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE
2000a6f8 g     O .bss	00000018 sensor_base_ts
000186b8 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
000212ec g       .ARM.exidx	00000000 __etext
00012b98 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E
00018246 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00018b74 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000f73a g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
0001523e g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001ab78 g     F .text	000000d8 os_task_init
00011d46 g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
0000f66e g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
0000e4f8 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
0000e8e0 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
0001667c g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
0001650e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0000de12 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E
0001aa44 g     F .text	00000064 os_sem_release
0001d1d8 g     F .text	0000009a __aeabi_memset
0001a21c g     F .text	000000b8 os_mbuf_dup
0001afdc g     F .text	00000046 PendSV_Handler
0001af96 g     F .text	00000046 SVC_Handler
0001ade8 g     F .text	0000000c os_arch_save_sr
00014e98 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
00009596 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E
0000815c  w    F .text	00000002 UsageFault_Handler
0001bd44 g     F .text	00000010 nrf52_timer0_irq_handler
0001ae04 g     F .text	00000040 os_arch_task_stack_init
0000d7fc g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE
2000a738 g       .bss	00000000 __bss_end__
0001a360 g     F .text	00000032 os_memblock_get
2000a734 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
0001607c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E
0000e610 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00012ff0 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
000198a8 g     F .text	00000014 hal_watchdog_tickle
00011c50 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
0001598a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
00019f66 g     F .text	0000007a os_eventq_get
0001ceac g     F .text	00000020 sprintf
0001ada4 g     F .text	00000026 os_time_ms_to_ticks
0000f012 g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
00009a80 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E
00016572 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
000128da g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000a198 g     O .bss	00000004 os_flags
0001c998 g     F .text	00000028 oc_rep_init
0001b0a8 g     F .text	0000001a memcpy
0000df0e g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E
0001b78c g     F .text	00000044 sysinit_app
00015bdc g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00015fb4 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE
0001635e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
000185e8 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
0000f7fc g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00013188 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00018a78 g     F .text	0000003c console_out_nolock
2000a710 g     O .bss	00000020 oc_transports
00018d60 g     F .text	00000078 hal_gpio_irq_init
00014fa2 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001b116 g     F .text	00000010 strlen
0001aaa8 g     F .text	000000b8 os_sem_pend
0000e164 g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001ba40 g     F .text	00000098 os_tick_idle
000131ce g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
00013324 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00015bc2 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
00019b78 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
0000ffea g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000e4b2 g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
00011c10 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
0001577c g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
0000fb68 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
000183c2 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00014b42 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0000d776 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE
00019efe g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
0001550a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00010e88 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
0000e32e g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001541c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001cd22 g     F .text	0000000a mfg_read_tlv_mmr_ref
0000f246 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
00012cf4 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E
0001c530 g     F .text	000000c0 sensor_network_init
000183c2 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00012a7e g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE
00015f60 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0000f2f2 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
0001323e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001af97 	.word	0x0001af97
	...
    8058:	0001afdd 	.word	0x0001afdd
    805c:	0001b023 	.word	0x0001b023
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000a738 	.word	0x2000a738
    ldr    r1, =__etext
    8138:	000212ec 	.word	0x000212ec
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000a738 	.word	0x2000a738
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f010 fb17 	bl	18ba0 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f011 fa52 	bl	19aac <os_init>
    os_start();
    8608:	f011 faa8 	bl	19b5c <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f006 fcf3 	bl	f002 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f007 fd8d 	bl	1013c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24d 2172 	movw	r1, #53874	; 0xd272
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24d 23a8 	movw	r3, #53928	; 0xd2a8
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f006 fddd 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f000 f8c7 	bl	87d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24d 217a 	movw	r1, #53882	; 0xd27a
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24d 23b8 	movw	r3, #53944	; 0xd2b8
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f006 fdcc 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f000 ff27 	bl	94b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24d 21c8 	movw	r1, #53960	; 0xd2c8
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24d 23d4 	movw	r3, #53972	; 0xd2d4
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f006 fdbb 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f006 fe75 	bl	f376 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24d 2182 	movw	r1, #53890	; 0xd282
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24d 23e4 	movw	r3, #53988	; 0xd2e4
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f00a f9f3 	bl	12a8c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f006 fe5a 	bl	f364 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24d 218a 	movw	r1, #53898	; 0xd28a
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24d 23f4 	movw	r3, #54004	; 0xd2f4
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f006 fd96 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24d 3104 	movw	r1, #54020	; 0xd304
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f007 f807 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00e f995 	bl	16a1a <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24d 300a 	movw	r0, #54026	; 0xd30a
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f006 fff6 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00e f985 	bl	16a20 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00e f983 	bl	16a28 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24d 3011 	movw	r0, #54033	; 0xd311
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f006 ffdf 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f007 f801 	bl	f744 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24d 3014 	movw	r0, #54036	; 0xd314
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f006 ffd2 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f007 f80c 	bl	f772 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24d 301a 	movw	r0, #54042	; 0xd31a
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f006 ffc6 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f007 f809 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f007 f805 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00e f94d 	bl	16a20 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f005 fa34 	bl	dbfc <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24d 311c 	movw	r1, #54044	; 0xd31c
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f005 fca1 	bl	e0e8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f006 ffa0 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24d 301a 	movw	r0, #54042	; 0xd31a
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f006 ff98 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f006 ffdb 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    87d2:	b5b0      	push	{r4, r5, r7, lr}
    87d4:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    87d6:	f24d 302c 	movw	r0, #54060	; 0xd32c
    87da:	f2c0 0001 	movt	r0, #1
    87de:	2112      	movs	r1, #18
    87e0:	f006 ff89 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87e4:	e7ff      	b.n	87e6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    87e6:	f240 1048 	movw	r0, #328	; 0x148
    87ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    87ee:	210a      	movs	r1, #10
    87f0:	f007 f9bc 	bl	fb6c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    87f4:	9012      	str	r0, [sp, #72]	; 0x48
    87f6:	e7ff      	b.n	87f8 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x26>
    87f8:	9812      	ldr	r0, [sp, #72]	; 0x48
    87fa:	f006 fd3c 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    87fe:	9014      	str	r0, [sp, #80]	; 0x50
    8800:	e7ff      	b.n	8802 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x30>
    8802:	9814      	ldr	r0, [sp, #80]	; 0x50
    8804:	1e41      	subs	r1, r0, #1
    8806:	bf18      	it	ne
    8808:	2101      	movne	r1, #1
    880a:	2801      	cmp	r0, #1
    880c:	d001      	beq.n	8812 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x40>
    880e:	e7ff      	b.n	8810 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x3e>
    8810:	e008      	b.n	8824 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    8812:	f240 1048 	movw	r0, #328	; 0x148
    8816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    881a:	f007 fa40 	bl	fc9e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    881e:	9011      	str	r0, [sp, #68]	; 0x44
    8820:	e00f      	b.n	8842 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8822:	defe      	udf	#254	; 0xfe
    8824:	9814      	ldr	r0, [sp, #80]	; 0x50
    8826:	9036      	str	r0, [sp, #216]	; 0xd8
    8828:	f006 fd98 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    882c:	9010      	str	r0, [sp, #64]	; 0x40
    882e:	e002      	b.n	8836 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    8830:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8832:	b03e      	add	sp, #248	; 0xf8
    8834:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8836:	9810      	ldr	r0, [sp, #64]	; 0x40
    8838:	f006 fd11 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    883c:	9013      	str	r0, [sp, #76]	; 0x4c
    883e:	e7ff      	b.n	8840 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x6e>
    8840:	e7f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_low() ? ;
    8842:	9811      	ldr	r0, [sp, #68]	; 0x44
    8844:	f006 fd17 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    8848:	9015      	str	r0, [sp, #84]	; 0x54
    884a:	e7ff      	b.n	884c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x7a>
    884c:	9815      	ldr	r0, [sp, #84]	; 0x54
    884e:	1e41      	subs	r1, r0, #1
    8850:	bf18      	it	ne
    8852:	2101      	movne	r1, #1
    8854:	2801      	cmp	r0, #1
    8856:	d001      	beq.n	885c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x8a>
    8858:	e7ff      	b.n	885a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x88>
    885a:	e008      	b.n	886e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    885c:	f240 104c 	movw	r0, #332	; 0x14c
    8860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8864:	2114      	movs	r1, #20
    8866:	f007 fa31 	bl	fccc <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    886a:	e00d      	b.n	8888 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb6>
        TOUCH_RESET.set_low() ? ;
    886c:	defe      	udf	#254	; 0xfe
    886e:	9815      	ldr	r0, [sp, #84]	; 0x54
    8870:	9037      	str	r0, [sp, #220]	; 0xdc
    8872:	f006 fd73 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    8876:	900f      	str	r0, [sp, #60]	; 0x3c
    8878:	e7ff      	b.n	887a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xa8>
    887a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    887c:	f006 fcef 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    8880:	9013      	str	r0, [sp, #76]	; 0x4c
    8882:	e7ff      	b.n	8884 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb2>
    8884:	e7ff      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
    8886:	e7d3      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_high() ? ;
    8888:	f240 1048 	movw	r0, #328	; 0x148
    888c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8890:	f007 fa10 	bl	fcb4 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    8894:	900e      	str	r0, [sp, #56]	; 0x38
    8896:	e7ff      	b.n	8898 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xc6>
    8898:	980e      	ldr	r0, [sp, #56]	; 0x38
    889a:	f006 fcec 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    889e:	9016      	str	r0, [sp, #88]	; 0x58
    88a0:	e7ff      	b.n	88a2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xd0>
    88a2:	9816      	ldr	r0, [sp, #88]	; 0x58
    88a4:	1e41      	subs	r1, r0, #1
    88a6:	bf18      	it	ne
    88a8:	2101      	movne	r1, #1
    88aa:	2801      	cmp	r0, #1
    88ac:	d001      	beq.n	88b2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xe0>
    88ae:	e7ff      	b.n	88b0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xde>
    88b0:	e008      	b.n	88c4 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88b2:	f240 104c 	movw	r0, #332	; 0x14c
    88b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88ba:	21c8      	movs	r1, #200	; 0xc8
    88bc:	f007 fa06 	bl	fccc <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88c0:	e00c      	b.n	88dc <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x10a>
        TOUCH_RESET.set_high() ? ;
    88c2:	defe      	udf	#254	; 0xfe
    88c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    88c6:	9038      	str	r0, [sp, #224]	; 0xe0
    88c8:	f006 fd48 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    88cc:	900d      	str	r0, [sp, #52]	; 0x34
    88ce:	e7ff      	b.n	88d0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xfe>
    88d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    88d2:	f006 fcc4 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    88d6:	9013      	str	r0, [sp, #76]	; 0x4c
    88d8:	e7ff      	b.n	88da <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x108>
    88da:	e7d4      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88dc:	f240 104c 	movw	r0, #332	; 0x14c
    88e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88e4:	21c8      	movs	r1, #200	; 0xc8
    88e6:	f007 f9f1 	bl	fccc <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88ea:	e7ff      	b.n	88ec <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    88ec:	f648 208f 	movw	r0, #35471	; 0x8a8f
    88f0:	f2c0 0000 	movt	r0, #0
    88f4:	9017      	str	r0, [sp, #92]	; 0x5c
    88f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    88f8:	f240 11e0 	movw	r1, #480	; 0x1e0
    88fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8900:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    8902:	f648 2043 	movw	r0, #35395	; 0x8a43
    8906:	f2c0 0000 	movt	r0, #0
    890a:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    890c:	e7ff      	b.n	890e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    890e:	9919      	ldr	r1, [sp, #100]	; 0x64
    8910:	4668      	mov	r0, sp
    8912:	2201      	movs	r2, #1
    8914:	6002      	str	r2, [r0, #0]
    8916:	201c      	movs	r0, #28
    8918:	2200      	movs	r2, #0
    891a:	2302      	movs	r3, #2
    891c:	f010 fa20 	bl	18d60 <hal_gpio_irq_init>
    8920:	9018      	str	r0, [sp, #96]	; 0x60
    8922:	e7ff      	b.n	8924 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    8924:	f24d 3044 	movw	r0, #54084	; 0xd344
    8928:	f2c0 0001 	movt	r0, #1
    892c:	6800      	ldr	r0, [r0, #0]
    892e:	a918      	add	r1, sp, #96	; 0x60
    8930:	911a      	str	r1, [sp, #104]	; 0x68
    8932:	901b      	str	r0, [sp, #108]	; 0x6c
    8934:	981a      	ldr	r0, [sp, #104]	; 0x68
    8936:	9039      	str	r0, [sp, #228]	; 0xe4
    8938:	991b      	ldr	r1, [sp, #108]	; 0x6c
    893a:	913a      	str	r1, [sp, #232]	; 0xe8
    893c:	6802      	ldr	r2, [r0, #0]
    893e:	680b      	ldr	r3, [r1, #0]
    8940:	429a      	cmp	r2, r3
    8942:	900c      	str	r0, [sp, #48]	; 0x30
    8944:	910b      	str	r1, [sp, #44]	; 0x2c
    8946:	d104      	bne.n	8952 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x180>
    8948:	e7ff      	b.n	894a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x178>
    894a:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    894c:	f010 fa44 	bl	18dd8 <hal_gpio_irq_enable>
    8950:	e072      	b.n	8a38 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    8952:	f24d 309c 	movw	r0, #54172	; 0xd39c
    8956:	f2c0 0001 	movt	r0, #1
    895a:	6801      	ldr	r1, [r0, #0]
    895c:	980c      	ldr	r0, [sp, #48]	; 0x30
    895e:	902b      	str	r0, [sp, #172]	; 0xac
    8960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8962:	922c      	str	r2, [sp, #176]	; 0xb0
    8964:	f24d 33b8 	movw	r3, #54200	; 0xd3b8
    8968:	f2c0 0301 	movt	r3, #1
    896c:	681b      	ldr	r3, [r3, #0]
    896e:	f24d 3cbc 	movw	ip, #54204	; 0xd3bc
    8972:	f2c0 0c01 	movt	ip, #1
    8976:	f8dc c000 	ldr.w	ip, [ip]
    897a:	46ee      	mov	lr, sp
    897c:	2400      	movs	r4, #0
    897e:	f8ce 4000 	str.w	r4, [lr]
    8982:	a82d      	add	r0, sp, #180	; 0xb4
    8984:	2201      	movs	r2, #1
    8986:	910a      	str	r1, [sp, #40]	; 0x28
    8988:	4619      	mov	r1, r3
    898a:	4663      	mov	r3, ip
    898c:	f005 fa8e 	bl	deac <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8990:	e7ff      	b.n	8992 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1c0>
    8992:	a82b      	add	r0, sp, #172	; 0xac
    8994:	9028      	str	r0, [sp, #160]	; 0xa0
    8996:	a82c      	add	r0, sp, #176	; 0xb0
    8998:	9029      	str	r0, [sp, #164]	; 0xa4
    899a:	a82d      	add	r0, sp, #180	; 0xb4
    899c:	902a      	str	r0, [sp, #168]	; 0xa8
    899e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    89a0:	903b      	str	r0, [sp, #236]	; 0xec
    89a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    89a4:	913c      	str	r1, [sp, #240]	; 0xf0
    89a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    89a8:	923d      	str	r2, [sp, #244]	; 0xf4
    89aa:	f24e 1349 	movw	r3, #57673	; 0xe149
    89ae:	f2c0 0300 	movt	r3, #0
    89b2:	9109      	str	r1, [sp, #36]	; 0x24
    89b4:	4619      	mov	r1, r3
    89b6:	9208      	str	r2, [sp, #32]
    89b8:	f007 faed 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89bc:	9007      	str	r0, [sp, #28]
    89be:	9106      	str	r1, [sp, #24]
    89c0:	e7ff      	b.n	89c2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1f0>
    89c2:	f24e 1149 	movw	r1, #57673	; 0xe149
    89c6:	f2c0 0100 	movt	r1, #0
    89ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    89cc:	f007 fae3 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89d0:	9005      	str	r0, [sp, #20]
    89d2:	9104      	str	r1, [sp, #16]
    89d4:	e7ff      	b.n	89d6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x204>
    89d6:	f646 71fb 	movw	r1, #28667	; 0x6ffb
    89da:	f2c0 0101 	movt	r1, #1
    89de:	9808      	ldr	r0, [sp, #32]
    89e0:	f007 fb18 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    89e4:	9003      	str	r0, [sp, #12]
    89e6:	9102      	str	r1, [sp, #8]
    89e8:	e7ff      	b.n	89ea <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x218>
    89ea:	9807      	ldr	r0, [sp, #28]
    89ec:	9022      	str	r0, [sp, #136]	; 0x88
    89ee:	9906      	ldr	r1, [sp, #24]
    89f0:	9123      	str	r1, [sp, #140]	; 0x8c
    89f2:	9a05      	ldr	r2, [sp, #20]
    89f4:	9224      	str	r2, [sp, #144]	; 0x90
    89f6:	9b04      	ldr	r3, [sp, #16]
    89f8:	9325      	str	r3, [sp, #148]	; 0x94
    89fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
    89fe:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    8a02:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a06:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    8a0a:	466c      	mov	r4, sp
    8a0c:	2503      	movs	r5, #3
    8a0e:	6025      	str	r5, [r4, #0]
    8a10:	a81c      	add	r0, sp, #112	; 0x70
    8a12:	ab22      	add	r3, sp, #136	; 0x88
    8a14:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a16:	462a      	mov	r2, r5
    8a18:	f005 fa48 	bl	deac <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8a1c:	e7ff      	b.n	8a1e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x24c>
    8a1e:	f24d 30dc 	movw	r0, #54236	; 0xd3dc
    8a22:	f2c0 0001 	movt	r0, #1
    8a26:	f00d fffa 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a2a:	9001      	str	r0, [sp, #4]
    8a2c:	e7ff      	b.n	8a2e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x25c>
    8a2e:	a81c      	add	r0, sp, #112	; 0x70
    8a30:	9901      	ldr	r1, [sp, #4]
    8a32:	f00e f831 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a36:	defe      	udf	#254	; 0xfe
    8a38:	2000      	movs	r0, #0
    Ok(())
    8a3a:	9013      	str	r0, [sp, #76]	; 0x4c
    8a3c:	2001      	movs	r0, #1
    8a3e:	9013      	str	r0, [sp, #76]	; 0x4c
}
    8a40:	e6f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>

00008a42 <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    8a42:	b580      	push	{r7, lr}
    8a44:	b086      	sub	sp, #24
    8a46:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    8a48:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a50:	6088      	str	r0, [r1, #8]
    8a52:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    8a54:	f006 fc8f 	bl	f376 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    8a58:	e7ff      	b.n	8a5a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x18>
    8a5a:	f24d 2182 	movw	r1, #53890	; 0xd282
    8a5e:	f2c0 0101 	movt	r1, #1
    8a62:	f24d 33f4 	movw	r3, #54260	; 0xd3f4
    8a66:	f2c0 0301 	movt	r3, #1
    8a6a:	a802      	add	r0, sp, #8
    8a6c:	2208      	movs	r2, #8
    8a6e:	f00a f80d 	bl	12a8c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    8a72:	4601      	mov	r1, r0
    8a74:	9005      	str	r0, [sp, #20]
    8a76:	9101      	str	r1, [sp, #4]
    8a78:	e7ff      	b.n	8a7a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    8a7a:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a7e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a82:	9801      	ldr	r0, [sp, #4]
    8a84:	f011 fa3b 	bl	19efe <os_eventq_put>
    8a88:	e7ff      	b.n	8a8a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x48>
    //console::print("touch\n"); ////
}
    8a8a:	b006      	add	sp, #24
    8a8c:	bd80      	pop	{r7, pc}

00008a8e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    8a8e:	b580      	push	{r7, lr}
    8a90:	b094      	sub	sp, #80	; 0x50
    8a92:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    8a94:	f240 104c 	movw	r0, #332	; 0x14c
    8a98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8a9c:	f000 f894 	bl	8bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>
    8aa0:	9006      	str	r0, [sp, #24]
    8aa2:	e7ff      	b.n	8aa4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x16>
    8aa4:	f24d 4104 	movw	r1, #54276	; 0xd404
    8aa8:	f2c0 0101 	movt	r1, #1
    8aac:	f24d 4314 	movw	r3, #54292	; 0xd414
    8ab0:	f2c0 0301 	movt	r3, #1
    8ab4:	220e      	movs	r2, #14
    8ab6:	9806      	ldr	r0, [sp, #24]
    8ab8:	f006 fb9e 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8abc:	e7ff      	b.n	8abe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    8abe:	f240 104c 	movw	r0, #332	; 0x14c
    8ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ac6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    8aca:	2100      	movs	r1, #0
    8acc:	9107      	str	r1, [sp, #28]
    8ace:	9008      	str	r0, [sp, #32]
    8ad0:	9807      	ldr	r0, [sp, #28]
    8ad2:	9908      	ldr	r1, [sp, #32]
    8ad4:	f005 ff2b 	bl	e92e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8ad8:	9005      	str	r0, [sp, #20]
    8ada:	9104      	str	r1, [sp, #16]
    8adc:	e7ff      	b.n	8ade <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x50>
    8ade:	9805      	ldr	r0, [sp, #20]
    8ae0:	9009      	str	r0, [sp, #36]	; 0x24
    8ae2:	9904      	ldr	r1, [sp, #16]
    8ae4:	910a      	str	r1, [sp, #40]	; 0x28
    8ae6:	e7ff      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8ae8:	a809      	add	r0, sp, #36	; 0x24
    8aea:	f005 fe95 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8aee:	910c      	str	r1, [sp, #48]	; 0x30
    8af0:	900b      	str	r0, [sp, #44]	; 0x2c
    8af2:	e7ff      	b.n	8af4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x66>
    8af4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8af6:	2800      	cmp	r0, #0
    8af8:	d001      	beq.n	8afe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x70>
    8afa:	e7ff      	b.n	8afc <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x6e>
    8afc:	e002      	b.n	8b04 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    8afe:	b014      	add	sp, #80	; 0x50
    8b00:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    8b02:	defe      	udf	#254	; 0xfe
    8b04:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b06:	900f      	str	r0, [sp, #60]	; 0x3c
    8b08:	9010      	str	r0, [sp, #64]	; 0x40
    8b0a:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8b0c:	2809      	cmp	r0, #9
    8b0e:	9003      	str	r0, [sp, #12]
    8b10:	d851      	bhi.n	8bb6 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x128>
    8b12:	e7ff      	b.n	8b14 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x86>
    8b14:	f240 104c 	movw	r0, #332	; 0x14c
    8b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8b1c:	9903      	ldr	r1, [sp, #12]
    8b1e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8b22:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    8b26:	4603      	mov	r3, r0
    8b28:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    8b2c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    8b30:	46e6      	mov	lr, ip
    8b32:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    8b36:	7912      	ldrb	r2, [r2, #4]
    8b38:	4694      	mov	ip, r2
    8b3a:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    8b3e:	2800      	cmp	r0, #0
    8b40:	9302      	str	r3, [sp, #8]
    8b42:	f8cd e004 	str.w	lr, [sp, #4]
    8b46:	f8cd c000 	str.w	ip, [sp]
    8b4a:	d008      	beq.n	8b5e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xd0>
    8b4c:	e003      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b4e:	2001      	movs	r0, #1
    8b50:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b54:	e008      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b56:	2000      	movs	r0, #0
    8b58:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b5c:	e004      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b5e:	9801      	ldr	r0, [sp, #4]
    8b60:	0401      	lsls	r1, r0, #16
    8b62:	2900      	cmp	r1, #0
    8b64:	d0f3      	beq.n	8b4e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc0>
    8b66:	e7f6      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b68:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    8b6c:	07c0      	lsls	r0, r0, #31
    8b6e:	2800      	cmp	r0, #0
    8b70:	d105      	bne.n	8b7e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf0>
    8b72:	e7ff      	b.n	8b74 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xe6>
            if action != 0 && action != 2 { continue; }
    8b74:	9800      	ldr	r0, [sp, #0]
    8b76:	0601      	lsls	r1, r0, #24
    8b78:	2900      	cmp	r1, #0
    8b7a:	d10a      	bne.n	8b92 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x104>
    8b7c:	e005      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
            if x == 0 && y == 0 { continue; }
    8b7e:	e7ff      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
    8b80:	e7b2      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8b82:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    8b84:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b88:	e008      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b8a:	2000      	movs	r0, #0
    8b8c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b90:	e004      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b92:	9800      	ldr	r0, [sp, #0]
    8b94:	b2c1      	uxtb	r1, r0
    8b96:	2902      	cmp	r1, #2
    8b98:	d1f3      	bne.n	8b82 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf4>
    8b9a:	e7f6      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
    8b9c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    8ba0:	07c0      	lsls	r0, r0, #31
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d105      	bne.n	8bb2 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x124>
    8ba6:	e7ff      	b.n	8ba8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x11a>
            super::handle_touch(x, y);
    8ba8:	9802      	ldr	r0, [sp, #8]
    8baa:	9901      	ldr	r1, [sp, #4]
    8bac:	f000 ff51 	bl	9a52 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>
    8bb0:	e000      	b.n	8bb4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x126>
            if action != 0 && action != 2 { continue; }
    8bb2:	e7e5      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    8bb4:	e798      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8bb6:	f24d 4024 	movw	r0, #54308	; 0xd424
    8bba:	f2c0 0001 	movt	r0, #1
    8bbe:	220a      	movs	r2, #10
    8bc0:	9903      	ldr	r1, [sp, #12]
    8bc2:	f00d ff49 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    8bc6:	defe      	udf	#254	; 0xfe

00008bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    8bc8:	b580      	push	{r7, lr}
    8bca:	b0de      	sub	sp, #376	; 0x178
    8bcc:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    8bce:	4669      	mov	r1, sp
    8bd0:	223f      	movs	r2, #63	; 0x3f
    8bd2:	600a      	str	r2, [r1, #0]
    8bd4:	f240 139e 	movw	r3, #414	; 0x19e
    8bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bdc:	2115      	movs	r1, #21
    8bde:	f04f 0c00 	mov.w	ip, #0
    8be2:	9026      	str	r0, [sp, #152]	; 0x98
    8be4:	4608      	mov	r0, r1
    8be6:	4661      	mov	r1, ip
    8be8:	f000 fb97 	bl	931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>
    8bec:	9025      	str	r0, [sp, #148]	; 0x94
    8bee:	e7ff      	b.n	8bf0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x28>
    8bf0:	f24d 4134 	movw	r1, #54324	; 0xd434
    8bf4:	f2c0 0101 	movt	r1, #1
    8bf8:	f24d 4348 	movw	r3, #54344	; 0xd448
    8bfc:	f2c0 0301 	movt	r3, #1
    8c00:	2213      	movs	r2, #19
    8c02:	9825      	ldr	r0, [sp, #148]	; 0x94
    8c04:	f006 faf8 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8c08:	e7ff      	b.n	8c0a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x42>
    8c0a:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    8c0e:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    8c10:	9024      	str	r0, [sp, #144]	; 0x90
    8c12:	9123      	str	r1, [sp, #140]	; 0x8c
    8c14:	f014 fada 	bl	1d1cc <__aeabi_memclr>
    8c18:	a827      	add	r0, sp, #156	; 0x9c
    8c1a:	9924      	ldr	r1, [sp, #144]	; 0x90
    8c1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8c1e:	f014 fad9 	bl	1d1d4 <__aeabi_memcpy>
    8c22:	e7ff      	b.n	8c24 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5c>
    8c24:	a927      	add	r1, sp, #156	; 0x9c
    8c26:	2252      	movs	r2, #82	; 0x52
    8c28:	9826      	ldr	r0, [sp, #152]	; 0x98
    8c2a:	f014 fad3 	bl	1d1d4 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    8c2e:	f240 119e 	movw	r1, #414	; 0x19e
    8c32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8c36:	7889      	ldrb	r1, [r1, #2]
    8c38:	f001 010f 	and.w	r1, r1, #15
    8c3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c3e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    8c42:	2100      	movs	r1, #0
    data.count     = 0;
    8c44:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    8c48:	9150      	str	r1, [sp, #320]	; 0x140
    8c4a:	2105      	movs	r1, #5
    8c4c:	9151      	str	r1, [sp, #324]	; 0x144
    8c4e:	9950      	ldr	r1, [sp, #320]	; 0x140
    8c50:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8c52:	9022      	str	r0, [sp, #136]	; 0x88
    8c54:	4608      	mov	r0, r1
    8c56:	4619      	mov	r1, r3
    8c58:	f005 fe69 	bl	e92e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8c5c:	9021      	str	r0, [sp, #132]	; 0x84
    8c5e:	9120      	str	r1, [sp, #128]	; 0x80
    8c60:	e7ff      	b.n	8c62 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x9a>
    8c62:	9821      	ldr	r0, [sp, #132]	; 0x84
    8c64:	9052      	str	r0, [sp, #328]	; 0x148
    8c66:	9920      	ldr	r1, [sp, #128]	; 0x80
    8c68:	9153      	str	r1, [sp, #332]	; 0x14c
    8c6a:	e7ff      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
    8c6c:	a852      	add	r0, sp, #328	; 0x148
    8c6e:	f005 fdd3 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8c72:	9155      	str	r1, [sp, #340]	; 0x154
    8c74:	9054      	str	r0, [sp, #336]	; 0x150
    8c76:	e7ff      	b.n	8c78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb0>
    8c78:	9854      	ldr	r0, [sp, #336]	; 0x150
    8c7a:	2800      	cmp	r0, #0
    8c7c:	d001      	beq.n	8c82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xba>
    8c7e:	e7ff      	b.n	8c80 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb8>
    8c80:	e001      	b.n	8c86 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xbe>
    8c82:	e00d      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
    8c84:	defe      	udf	#254	; 0xfe
    8c86:	9855      	ldr	r0, [sp, #340]	; 0x154
    8c88:	9058      	str	r0, [sp, #352]	; 0x160
    8c8a:	9059      	str	r0, [sp, #356]	; 0x164
    8c8c:	905a      	str	r0, [sp, #360]	; 0x168
    8c8e:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8c90:	fba1 1200 	umull	r1, r2, r1, r0
    8c94:	2a00      	cmp	r2, #0
    8c96:	901f      	str	r0, [sp, #124]	; 0x7c
    8c98:	911e      	str	r1, [sp, #120]	; 0x78
    8c9a:	f040 81c1 	bne.w	9020 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x458>
    8c9e:	e002      	b.n	8ca6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xde>
    8ca0:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    8ca2:	b05e      	add	sp, #376	; 0x178
    8ca4:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8ca6:	981e      	ldr	r0, [sp, #120]	; 0x78
    8ca8:	1d41      	adds	r1, r0, #5
    8caa:	460a      	mov	r2, r1
    8cac:	4281      	cmp	r1, r0
    8cae:	921d      	str	r2, [sp, #116]	; 0x74
    8cb0:	f0c0 81c2 	bcc.w	9038 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x470>
    8cb4:	e7ff      	b.n	8cb6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xee>
    8cb6:	981d      	ldr	r0, [sp, #116]	; 0x74
    8cb8:	283e      	cmp	r0, #62	; 0x3e
    8cba:	f200 81c9 	bhi.w	9050 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x488>
    8cbe:	e7ff      	b.n	8cc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xf8>
    8cc0:	f240 109e 	movw	r0, #414	; 0x19e
    8cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8cc8:	991d      	ldr	r1, [sp, #116]	; 0x74
    8cca:	5c40      	ldrb	r0, [r0, r1]
    8ccc:	0900      	lsrs	r0, r0, #4
    8cce:	901c      	str	r0, [sp, #112]	; 0x70
    8cd0:	e7ff      	b.n	8cd2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x10a>
    8cd2:	981c      	ldr	r0, [sp, #112]	; 0x70
    8cd4:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    8cd8:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    8cda:	290e      	cmp	r1, #14
    8cdc:	d80b      	bhi.n	8cf6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x12e>
    8cde:	e7ff      	b.n	8ce0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x118>
        data.count += 1;
    8ce0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ce2:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    8ce6:	3101      	adds	r1, #1
    8ce8:	b2ca      	uxtb	r2, r1
    8cea:	460b      	mov	r3, r1
    8cec:	428a      	cmp	r2, r1
    8cee:	931b      	str	r3, [sp, #108]	; 0x6c
    8cf0:	f040 81b7 	bne.w	9062 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x49a>
    8cf4:	e001      	b.n	8cfa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    8cf6:	e7ff      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
    8cf8:	e7d2      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
        data.count += 1;
    8cfa:	981b      	ldr	r0, [sp, #108]	; 0x6c
    8cfc:	9926      	ldr	r1, [sp, #152]	; 0x98
    8cfe:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    8d02:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d06:	fba2 2c03 	umull	r2, ip, r2, r3
    8d0a:	f1bc 0f00 	cmp.w	ip, #0
    8d0e:	921a      	str	r2, [sp, #104]	; 0x68
    8d10:	f040 81b3 	bne.w	907a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4b2>
    8d14:	e7ff      	b.n	8d16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x14e>
    8d16:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d18:	1cc1      	adds	r1, r0, #3
    8d1a:	460a      	mov	r2, r1
    8d1c:	4281      	cmp	r1, r0
    8d1e:	9219      	str	r2, [sp, #100]	; 0x64
    8d20:	f0c0 81b7 	bcc.w	9092 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4ca>
    8d24:	e7ff      	b.n	8d26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x15e>
    8d26:	9819      	ldr	r0, [sp, #100]	; 0x64
    8d28:	283e      	cmp	r0, #62	; 0x3e
    8d2a:	f200 81be 	bhi.w	90aa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4e2>
    8d2e:	e7ff      	b.n	8d30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x168>
    8d30:	f240 109e 	movw	r0, #414	; 0x19e
    8d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d38:	9919      	ldr	r1, [sp, #100]	; 0x64
    8d3a:	5c40      	ldrb	r0, [r0, r1]
    8d3c:	f000 000f 	and.w	r0, r0, #15
    8d40:	4602      	mov	r2, r0
    8d42:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    8d46:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d4a:	fba0 0c03 	umull	r0, ip, r0, r3
    8d4e:	f1bc 0f00 	cmp.w	ip, #0
    8d52:	9218      	str	r2, [sp, #96]	; 0x60
    8d54:	9017      	str	r0, [sp, #92]	; 0x5c
    8d56:	f040 81b1 	bne.w	90bc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4f4>
    8d5a:	e7ff      	b.n	8d5c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x194>
    8d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8d5e:	1d01      	adds	r1, r0, #4
    8d60:	460a      	mov	r2, r1
    8d62:	4281      	cmp	r1, r0
    8d64:	9216      	str	r2, [sp, #88]	; 0x58
    8d66:	f0c0 81b5 	bcc.w	90d4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x50c>
    8d6a:	e7ff      	b.n	8d6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1a4>
    8d6c:	9816      	ldr	r0, [sp, #88]	; 0x58
    8d6e:	283e      	cmp	r0, #62	; 0x3e
    8d70:	f200 81bc 	bhi.w	90ec <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x524>
    8d74:	e7ff      	b.n	8d76 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ae>
    8d76:	f240 109e 	movw	r0, #414	; 0x19e
    8d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d7e:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d80:	5c40      	ldrb	r0, [r0, r1]
    8d82:	4602      	mov	r2, r0
    8d84:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    8d88:	9818      	ldr	r0, [sp, #96]	; 0x60
    8d8a:	0203      	lsls	r3, r0, #8
    8d8c:	9215      	str	r2, [sp, #84]	; 0x54
    8d8e:	9314      	str	r3, [sp, #80]	; 0x50
    8d90:	e7ff      	b.n	8d92 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ca>
    8d92:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8d94:	2809      	cmp	r0, #9
    8d96:	f200 81b2 	bhi.w	90fe <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x536>
    8d9a:	e7ff      	b.n	8d9c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1d4>
    8d9c:	9814      	ldr	r0, [sp, #80]	; 0x50
    8d9e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da0:	ea40 0201 	orr.w	r2, r0, r1
    8da4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8da6:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    8daa:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    8dae:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8db0:	fba2 2e0c 	umull	r2, lr, r2, ip
    8db4:	f1be 0f00 	cmp.w	lr, #0
    8db8:	9213      	str	r2, [sp, #76]	; 0x4c
    8dba:	f040 81a9 	bne.w	9110 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x548>
    8dbe:	e7ff      	b.n	8dc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1f8>
    8dc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8dc2:	1d41      	adds	r1, r0, #5
    8dc4:	460a      	mov	r2, r1
    8dc6:	4281      	cmp	r1, r0
    8dc8:	9212      	str	r2, [sp, #72]	; 0x48
    8dca:	f0c0 81ad 	bcc.w	9128 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x560>
    8dce:	e7ff      	b.n	8dd0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x208>
    8dd0:	9812      	ldr	r0, [sp, #72]	; 0x48
    8dd2:	283e      	cmp	r0, #62	; 0x3e
    8dd4:	f200 81b4 	bhi.w	9140 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x578>
    8dd8:	e7ff      	b.n	8dda <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x212>
    8dda:	f240 109e 	movw	r0, #414	; 0x19e
    8dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8de2:	9912      	ldr	r1, [sp, #72]	; 0x48
    8de4:	5c40      	ldrb	r0, [r0, r1]
    8de6:	f000 000f 	and.w	r0, r0, #15
    8dea:	4602      	mov	r2, r0
    8dec:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    8df0:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8df4:	fba0 0c03 	umull	r0, ip, r0, r3
    8df8:	f1bc 0f00 	cmp.w	ip, #0
    8dfc:	9211      	str	r2, [sp, #68]	; 0x44
    8dfe:	9010      	str	r0, [sp, #64]	; 0x40
    8e00:	f040 81a7 	bne.w	9152 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x58a>
    8e04:	e7ff      	b.n	8e06 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x23e>
    8e06:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e08:	1d81      	adds	r1, r0, #6
    8e0a:	460a      	mov	r2, r1
    8e0c:	4281      	cmp	r1, r0
    8e0e:	920f      	str	r2, [sp, #60]	; 0x3c
    8e10:	f0c0 81ab 	bcc.w	916a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5a2>
    8e14:	e7ff      	b.n	8e16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x24e>
    8e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8e18:	283e      	cmp	r0, #62	; 0x3e
    8e1a:	f200 81b2 	bhi.w	9182 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5ba>
    8e1e:	e7ff      	b.n	8e20 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x258>
    8e20:	f240 109e 	movw	r0, #414	; 0x19e
    8e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8e2a:	5c40      	ldrb	r0, [r0, r1]
    8e2c:	4602      	mov	r2, r0
    8e2e:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    8e32:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e34:	0203      	lsls	r3, r0, #8
    8e36:	920e      	str	r2, [sp, #56]	; 0x38
    8e38:	930d      	str	r3, [sp, #52]	; 0x34
    8e3a:	e7ff      	b.n	8e3c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x274>
    8e3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e3e:	2809      	cmp	r0, #9
    8e40:	f200 81a8 	bhi.w	9194 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5cc>
    8e44:	e7ff      	b.n	8e46 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x27e>
    8e46:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e48:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8e4a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    8e54:	ea43 0e0c 	orr.w	lr, r3, ip
    8e58:	f8a2 e002 	strh.w	lr, [r2, #2]
    8e5c:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    8e5e:	fba2 2e01 	umull	r2, lr, r2, r1
    8e62:	f1be 0f00 	cmp.w	lr, #0
    8e66:	920c      	str	r2, [sp, #48]	; 0x30
    8e68:	f040 819d 	bne.w	91a6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5de>
    8e6c:	e7ff      	b.n	8e6e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2a6>
    8e6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e70:	1cc1      	adds	r1, r0, #3
    8e72:	460a      	mov	r2, r1
    8e74:	4281      	cmp	r1, r0
    8e76:	920b      	str	r2, [sp, #44]	; 0x2c
    8e78:	f0c0 81a1 	bcc.w	91be <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5f6>
    8e7c:	e7ff      	b.n	8e7e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2b6>
    8e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e80:	283e      	cmp	r0, #62	; 0x3e
    8e82:	f200 81a8 	bhi.w	91d6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x60e>
    8e86:	e7ff      	b.n	8e88 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2c0>
    8e88:	f240 109e 	movw	r0, #414	; 0x19e
    8e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e92:	5c40      	ldrb	r0, [r0, r1]
    8e94:	0980      	lsrs	r0, r0, #6
    8e96:	900a      	str	r0, [sp, #40]	; 0x28
    8e98:	e7ff      	b.n	8e9a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2d2>
        data.touches[i].action =
    8e9a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e9c:	2809      	cmp	r0, #9
    8e9e:	f200 81a3 	bhi.w	91e8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x620>
    8ea2:	e7ff      	b.n	8ea4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2dc>
    8ea4:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ea6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8ea8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8eae:	7113      	strb	r3, [r2, #4]
    8eb0:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    8eb2:	fba2 2c01 	umull	r2, ip, r2, r1
    8eb6:	f1bc 0f00 	cmp.w	ip, #0
    8eba:	9209      	str	r2, [sp, #36]	; 0x24
    8ebc:	f040 819d 	bne.w	91fa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x632>
    8ec0:	e7ff      	b.n	8ec2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2fa>
    8ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ec4:	1d41      	adds	r1, r0, #5
    8ec6:	460a      	mov	r2, r1
    8ec8:	4281      	cmp	r1, r0
    8eca:	9208      	str	r2, [sp, #32]
    8ecc:	f0c0 81a1 	bcc.w	9212 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x64a>
    8ed0:	e7ff      	b.n	8ed2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x30a>
    8ed2:	9808      	ldr	r0, [sp, #32]
    8ed4:	283e      	cmp	r0, #62	; 0x3e
    8ed6:	f200 81a8 	bhi.w	922a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x662>
    8eda:	e7ff      	b.n	8edc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x314>
    8edc:	f240 109e 	movw	r0, #414	; 0x19e
    8ee0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ee4:	9908      	ldr	r1, [sp, #32]
    8ee6:	5c40      	ldrb	r0, [r0, r1]
    8ee8:	0900      	lsrs	r0, r0, #4
    8eea:	9007      	str	r0, [sp, #28]
    8eec:	e7ff      	b.n	8eee <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x326>
        data.touches[i].finger =
    8eee:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8ef0:	2809      	cmp	r0, #9
    8ef2:	f200 81a3 	bhi.w	923c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x674>
    8ef6:	e7ff      	b.n	8ef8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x330>
    8ef8:	9826      	ldr	r0, [sp, #152]	; 0x98
    8efa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8efc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f00:	9b07      	ldr	r3, [sp, #28]
    8f02:	7153      	strb	r3, [r2, #5]
    8f04:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    8f06:	fba2 2c01 	umull	r2, ip, r2, r1
    8f0a:	f1bc 0f00 	cmp.w	ip, #0
    8f0e:	9206      	str	r2, [sp, #24]
    8f10:	f040 819d 	bne.w	924e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x686>
    8f14:	e7ff      	b.n	8f16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x34e>
    8f16:	9806      	ldr	r0, [sp, #24]
    8f18:	1dc1      	adds	r1, r0, #7
    8f1a:	460a      	mov	r2, r1
    8f1c:	4281      	cmp	r1, r0
    8f1e:	9205      	str	r2, [sp, #20]
    8f20:	f0c0 81a1 	bcc.w	9266 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x69e>
    8f24:	e7ff      	b.n	8f26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x35e>
    8f26:	9805      	ldr	r0, [sp, #20]
    8f28:	283e      	cmp	r0, #62	; 0x3e
    8f2a:	f200 81a8 	bhi.w	927e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6b6>
    8f2e:	e7ff      	b.n	8f30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x368>
    8f30:	f240 109e 	movw	r0, #414	; 0x19e
    8f34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f38:	9905      	ldr	r1, [sp, #20]
    8f3a:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    8f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8f3e:	2a09      	cmp	r2, #9
    8f40:	9004      	str	r0, [sp, #16]
    8f42:	f200 81a5 	bhi.w	9290 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6c8>
    8f46:	e7ff      	b.n	8f48 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x380>
    8f48:	9826      	ldr	r0, [sp, #152]	; 0x98
    8f4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8f4c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f50:	9b04      	ldr	r3, [sp, #16]
    8f52:	7193      	strb	r3, [r2, #6]
    8f54:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    8f56:	fba2 2c01 	umull	r2, ip, r2, r1
    8f5a:	f1bc 0f00 	cmp.w	ip, #0
    8f5e:	9203      	str	r2, [sp, #12]
    8f60:	f040 819f 	bne.w	92a2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6da>
    8f64:	e7ff      	b.n	8f66 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x39e>
    8f66:	9803      	ldr	r0, [sp, #12]
    8f68:	f100 0108 	add.w	r1, r0, #8
    8f6c:	460a      	mov	r2, r1
    8f6e:	4281      	cmp	r1, r0
    8f70:	9202      	str	r2, [sp, #8]
    8f72:	f0c0 81a2 	bcc.w	92ba <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6f2>
    8f76:	e7ff      	b.n	8f78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3b0>
    8f78:	9802      	ldr	r0, [sp, #8]
    8f7a:	283e      	cmp	r0, #62	; 0x3e
    8f7c:	f200 81a9 	bhi.w	92d2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x70a>
    8f80:	e7ff      	b.n	8f82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3ba>
    8f82:	f240 109e 	movw	r0, #414	; 0x19e
    8f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f8a:	9902      	ldr	r1, [sp, #8]
    8f8c:	5c40      	ldrb	r0, [r0, r1]
    8f8e:	0900      	lsrs	r0, r0, #4
    8f90:	9001      	str	r0, [sp, #4]
    8f92:	e7ff      	b.n	8f94 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3cc>
        data.touches[i].area =
    8f94:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8f96:	2809      	cmp	r0, #9
    8f98:	f200 81a4 	bhi.w	92e4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x71c>
    8f9c:	e7ff      	b.n	8f9e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3d6>
    8f9e:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fa0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8fa2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8fa6:	9b01      	ldr	r3, [sp, #4]
    8fa8:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8faa:	290a      	cmp	r1, #10
    8fac:	d326      	bcc.n	8ffc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x434>
    8fae:	e1a2      	b.n	92f6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x72e>
    8fb0:	2001      	movs	r0, #1
    8fb2:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fb6:	e009      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
    8fb8:	2000      	movs	r0, #0
    8fba:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fbe:	e005      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
            && (data.point_num == 0) {
    8fc0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fc2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8fc6:	2900      	cmp	r1, #0
    8fc8:	d0f2      	beq.n	8fb0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3e8>
    8fca:	e7f5      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8fcc:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    8fd0:	07c0      	lsls	r0, r0, #31
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d123      	bne.n	901e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x456>
    8fd6:	e021      	b.n	901c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x454>
    8fd8:	2001      	movs	r0, #1
    8fda:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fde:	e007      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe0:	2000      	movs	r0, #0
    8fe2:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fe6:	e003      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8fea:	280a      	cmp	r0, #10
    8fec:	d30e      	bcc.n	900c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x444>
    8fee:	e18b      	b.n	9308 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x740>
    8ff0:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    8ff4:	07c0      	lsls	r0, r0, #31
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d1e2      	bne.n	8fc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f8>
    8ffa:	e7dd      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8ffc:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ffe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9000:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9004:	7912      	ldrb	r2, [r2, #4]
    9006:	2a00      	cmp	r2, #0
    9008:	d0e6      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    900a:	e7ed      	b.n	8fe8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x420>
    900c:	9826      	ldr	r0, [sp, #152]	; 0x98
    900e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9010:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9014:	7912      	ldrb	r2, [r2, #4]
    9016:	2a02      	cmp	r2, #2
    9018:	d0de      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    901a:	e7e1      	b.n	8fe0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    901c:	e626      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
            break;
    901e:	e66b      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    9020:	f24d 4070 	movw	r0, #54384	; 0xd470
    9024:	f2c0 0001 	movt	r0, #1
    9028:	f24d 4258 	movw	r2, #54360	; 0xd458
    902c:	f2c0 0201 	movt	r2, #1
    9030:	2121      	movs	r1, #33	; 0x21
    9032:	f00d fcfb 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9036:	defe      	udf	#254	; 0xfe
    9038:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    903c:	f2c0 0001 	movt	r0, #1
    9040:	f24d 4294 	movw	r2, #54420	; 0xd494
    9044:	f2c0 0201 	movt	r2, #1
    9048:	211c      	movs	r1, #28
    904a:	f00d fcef 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    904e:	defe      	udf	#254	; 0xfe
    9050:	f24d 40cc 	movw	r0, #54476	; 0xd4cc
    9054:	f2c0 0001 	movt	r0, #1
    9058:	223f      	movs	r2, #63	; 0x3f
    905a:	991d      	ldr	r1, [sp, #116]	; 0x74
    905c:	f00d fcfc 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9060:	defe      	udf	#254	; 0xfe
        data.count += 1;
    9062:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    9066:	f2c0 0001 	movt	r0, #1
    906a:	f24d 42dc 	movw	r2, #54492	; 0xd4dc
    906e:	f2c0 0201 	movt	r2, #1
    9072:	211c      	movs	r1, #28
    9074:	f00d fcda 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9078:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    907a:	f24d 4070 	movw	r0, #54384	; 0xd470
    907e:	f2c0 0001 	movt	r0, #1
    9082:	f24d 42ec 	movw	r2, #54508	; 0xd4ec
    9086:	f2c0 0201 	movt	r2, #1
    908a:	2121      	movs	r1, #33	; 0x21
    908c:	f00d fcce 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9090:	defe      	udf	#254	; 0xfe
    9092:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    9096:	f2c0 0001 	movt	r0, #1
    909a:	f24d 42fc 	movw	r2, #54524	; 0xd4fc
    909e:	f2c0 0201 	movt	r2, #1
    90a2:	211c      	movs	r1, #28
    90a4:	f00d fcc2 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90a8:	defe      	udf	#254	; 0xfe
    90aa:	f24d 500c 	movw	r0, #54540	; 0xd50c
    90ae:	f2c0 0001 	movt	r0, #1
    90b2:	223f      	movs	r2, #63	; 0x3f
    90b4:	9919      	ldr	r1, [sp, #100]	; 0x64
    90b6:	f00d fccf 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90ba:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    90bc:	f24d 4070 	movw	r0, #54384	; 0xd470
    90c0:	f2c0 0001 	movt	r0, #1
    90c4:	f24d 521c 	movw	r2, #54556	; 0xd51c
    90c8:	f2c0 0201 	movt	r2, #1
    90cc:	2121      	movs	r1, #33	; 0x21
    90ce:	f00d fcad 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90d2:	defe      	udf	#254	; 0xfe
    90d4:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    90d8:	f2c0 0001 	movt	r0, #1
    90dc:	f24d 522c 	movw	r2, #54572	; 0xd52c
    90e0:	f2c0 0201 	movt	r2, #1
    90e4:	211c      	movs	r1, #28
    90e6:	f00d fca1 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90ea:	defe      	udf	#254	; 0xfe
    90ec:	f24d 503c 	movw	r0, #54588	; 0xd53c
    90f0:	f2c0 0001 	movt	r0, #1
    90f4:	223f      	movs	r2, #63	; 0x3f
    90f6:	9916      	ldr	r1, [sp, #88]	; 0x58
    90f8:	f00d fcae 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90fc:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    90fe:	f24d 504c 	movw	r0, #54604	; 0xd54c
    9102:	f2c0 0001 	movt	r0, #1
    9106:	220a      	movs	r2, #10
    9108:	991f      	ldr	r1, [sp, #124]	; 0x7c
    910a:	f00d fca5 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    910e:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    9110:	f24d 4070 	movw	r0, #54384	; 0xd470
    9114:	f2c0 0001 	movt	r0, #1
    9118:	f24d 525c 	movw	r2, #54620	; 0xd55c
    911c:	f2c0 0201 	movt	r2, #1
    9120:	2121      	movs	r1, #33	; 0x21
    9122:	f00d fc83 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9126:	defe      	udf	#254	; 0xfe
    9128:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    912c:	f2c0 0001 	movt	r0, #1
    9130:	f24d 526c 	movw	r2, #54636	; 0xd56c
    9134:	f2c0 0201 	movt	r2, #1
    9138:	211c      	movs	r1, #28
    913a:	f00d fc77 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    913e:	defe      	udf	#254	; 0xfe
    9140:	f24d 507c 	movw	r0, #54652	; 0xd57c
    9144:	f2c0 0001 	movt	r0, #1
    9148:	223f      	movs	r2, #63	; 0x3f
    914a:	9912      	ldr	r1, [sp, #72]	; 0x48
    914c:	f00d fc84 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9150:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    9152:	f24d 4070 	movw	r0, #54384	; 0xd470
    9156:	f2c0 0001 	movt	r0, #1
    915a:	f24d 528c 	movw	r2, #54668	; 0xd58c
    915e:	f2c0 0201 	movt	r2, #1
    9162:	2121      	movs	r1, #33	; 0x21
    9164:	f00d fc62 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9168:	defe      	udf	#254	; 0xfe
    916a:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    916e:	f2c0 0001 	movt	r0, #1
    9172:	f24d 529c 	movw	r2, #54684	; 0xd59c
    9176:	f2c0 0201 	movt	r2, #1
    917a:	211c      	movs	r1, #28
    917c:	f00d fc56 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9180:	defe      	udf	#254	; 0xfe
    9182:	f24d 50ac 	movw	r0, #54700	; 0xd5ac
    9186:	f2c0 0001 	movt	r0, #1
    918a:	223f      	movs	r2, #63	; 0x3f
    918c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    918e:	f00d fc63 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9192:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    9194:	f24d 50bc 	movw	r0, #54716	; 0xd5bc
    9198:	f2c0 0001 	movt	r0, #1
    919c:	220a      	movs	r2, #10
    919e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91a0:	f00d fc5a 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91a4:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    91a6:	f24d 4070 	movw	r0, #54384	; 0xd470
    91aa:	f2c0 0001 	movt	r0, #1
    91ae:	f24d 52cc 	movw	r2, #54732	; 0xd5cc
    91b2:	f2c0 0201 	movt	r2, #1
    91b6:	2121      	movs	r1, #33	; 0x21
    91b8:	f00d fc38 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91bc:	defe      	udf	#254	; 0xfe
    91be:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    91c2:	f2c0 0001 	movt	r0, #1
    91c6:	f24d 52dc 	movw	r2, #54748	; 0xd5dc
    91ca:	f2c0 0201 	movt	r2, #1
    91ce:	211c      	movs	r1, #28
    91d0:	f00d fc2c 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91d4:	defe      	udf	#254	; 0xfe
    91d6:	f24d 50ec 	movw	r0, #54764	; 0xd5ec
    91da:	f2c0 0001 	movt	r0, #1
    91de:	223f      	movs	r2, #63	; 0x3f
    91e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91e2:	f00d fc39 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91e6:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    91e8:	f24d 50fc 	movw	r0, #54780	; 0xd5fc
    91ec:	f2c0 0001 	movt	r0, #1
    91f0:	220a      	movs	r2, #10
    91f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91f4:	f00d fc30 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91f8:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    91fa:	f24d 4070 	movw	r0, #54384	; 0xd470
    91fe:	f2c0 0001 	movt	r0, #1
    9202:	f24d 620c 	movw	r2, #54796	; 0xd60c
    9206:	f2c0 0201 	movt	r2, #1
    920a:	2121      	movs	r1, #33	; 0x21
    920c:	f00d fc0e 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9210:	defe      	udf	#254	; 0xfe
    9212:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    9216:	f2c0 0001 	movt	r0, #1
    921a:	f24d 621c 	movw	r2, #54812	; 0xd61c
    921e:	f2c0 0201 	movt	r2, #1
    9222:	211c      	movs	r1, #28
    9224:	f00d fc02 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9228:	defe      	udf	#254	; 0xfe
    922a:	f24d 602c 	movw	r0, #54828	; 0xd62c
    922e:	f2c0 0001 	movt	r0, #1
    9232:	223f      	movs	r2, #63	; 0x3f
    9234:	9908      	ldr	r1, [sp, #32]
    9236:	f00d fc0f 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    923a:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    923c:	f24d 603c 	movw	r0, #54844	; 0xd63c
    9240:	f2c0 0001 	movt	r0, #1
    9244:	220a      	movs	r2, #10
    9246:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9248:	f00d fc06 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    924c:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    924e:	f24d 4070 	movw	r0, #54384	; 0xd470
    9252:	f2c0 0001 	movt	r0, #1
    9256:	f24d 624c 	movw	r2, #54860	; 0xd64c
    925a:	f2c0 0201 	movt	r2, #1
    925e:	2121      	movs	r1, #33	; 0x21
    9260:	f00d fbe4 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9264:	defe      	udf	#254	; 0xfe
    9266:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    926a:	f2c0 0001 	movt	r0, #1
    926e:	f24d 625c 	movw	r2, #54876	; 0xd65c
    9272:	f2c0 0201 	movt	r2, #1
    9276:	211c      	movs	r1, #28
    9278:	f00d fbd8 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    927c:	defe      	udf	#254	; 0xfe
    927e:	f24d 606c 	movw	r0, #54892	; 0xd66c
    9282:	f2c0 0001 	movt	r0, #1
    9286:	223f      	movs	r2, #63	; 0x3f
    9288:	9905      	ldr	r1, [sp, #20]
    928a:	f00d fbe5 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    928e:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    9290:	f24d 607c 	movw	r0, #54908	; 0xd67c
    9294:	f2c0 0001 	movt	r0, #1
    9298:	220a      	movs	r2, #10
    929a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    929c:	f00d fbdc 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92a0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    92a2:	f24d 4070 	movw	r0, #54384	; 0xd470
    92a6:	f2c0 0001 	movt	r0, #1
    92aa:	f24d 628c 	movw	r2, #54924	; 0xd68c
    92ae:	f2c0 0201 	movt	r2, #1
    92b2:	2121      	movs	r1, #33	; 0x21
    92b4:	f00d fbba 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92b8:	defe      	udf	#254	; 0xfe
    92ba:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    92be:	f2c0 0001 	movt	r0, #1
    92c2:	f24d 629c 	movw	r2, #54940	; 0xd69c
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	211c      	movs	r1, #28
    92cc:	f00d fbae 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92d0:	defe      	udf	#254	; 0xfe
    92d2:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
    92d6:	f2c0 0001 	movt	r0, #1
    92da:	223f      	movs	r2, #63	; 0x3f
    92dc:	9902      	ldr	r1, [sp, #8]
    92de:	f00d fbbb 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92e2:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    92e4:	f24d 60bc 	movw	r0, #54972	; 0xd6bc
    92e8:	f2c0 0001 	movt	r0, #1
    92ec:	220a      	movs	r2, #10
    92ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
    92f0:	f00d fbb2 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92f4:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    92f6:	f24d 60cc 	movw	r0, #54988	; 0xd6cc
    92fa:	f2c0 0001 	movt	r0, #1
    92fe:	220a      	movs	r2, #10
    9300:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9302:	f00d fba9 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9306:	defe      	udf	#254	; 0xfe
    9308:	f24d 60dc 	movw	r0, #55004	; 0xd6dc
    930c:	f2c0 0001 	movt	r0, #1
    9310:	220a      	movs	r2, #10
    9312:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9314:	f00d fba0 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9318:	defe      	udf	#254	; 0xfe

0000931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    931a:	b5b0      	push	{r4, r5, r7, lr}
    931c:	b094      	sub	sp, #80	; 0x50
    931e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    9322:	4696      	mov	lr, r2
    9324:	460c      	mov	r4, r1
    9326:	4605      	mov	r5, r0
    9328:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    932c:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    9330:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    9334:	9310      	str	r3, [sp, #64]	; 0x40
    9336:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    933a:	4618      	mov	r0, r3
    933c:	4661      	mov	r1, ip
    933e:	930d      	str	r3, [sp, #52]	; 0x34
    9340:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9344:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9348:	940a      	str	r4, [sp, #40]	; 0x28
    934a:	9509      	str	r5, [sp, #36]	; 0x24
    934c:	f005 fac8 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9350:	9008      	str	r0, [sp, #32]
    9352:	e7ff      	b.n	9354 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x3a>
    9354:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9356:	b2c1      	uxtb	r1, r0
    9358:	9a08      	ldr	r2, [sp, #32]
    935a:	428a      	cmp	r2, r1
    935c:	d30d      	bcc.n	937a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x60>
    935e:	e7ff      	b.n	9360 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9360:	980a      	ldr	r0, [sp, #40]	; 0x28
    9362:	b2c1      	uxtb	r1, r0
    9364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9366:	fa51 f182 	uxtab	r1, r1, r2
    936a:	b2cb      	uxtb	r3, r1
    936c:	468c      	mov	ip, r1
    936e:	428b      	cmp	r3, r1
    9370:	f8cd c01c 	str.w	ip, [sp, #28]
    9374:	f040 8092 	bne.w	949c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x182>
    9378:	e00b      	b.n	9392 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    937a:	f24d 60ec 	movw	r0, #55020	; 0xd6ec
    937e:	f2c0 0001 	movt	r0, #1
    9382:	f24d 62f4 	movw	r2, #55028	; 0xd6f4
    9386:	f2c0 0201 	movt	r2, #1
    938a:	2107      	movs	r1, #7
    938c:	f00d fb4e 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9390:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9392:	9807      	ldr	r0, [sp, #28]
    9394:	b241      	sxtb	r1, r0
    9396:	2900      	cmp	r1, #0
    9398:	d411      	bmi.n	93be <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xa4>
    939a:	e7ff      	b.n	939c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    939c:	f240 10f8 	movw	r0, #504	; 0x1f8
    93a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    93a6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    93a8:	f240 12f0 	movw	r2, #496	; 0x1f0
    93ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93b2:	7013      	strb	r3, [r2, #0]
    93b4:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93b6:	f005 fa93 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    93ba:	9006      	str	r0, [sp, #24]
    93bc:	e00b      	b.n	93d6 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    93be:	f24d 30ec 	movw	r0, #54252	; 0xd3ec
    93c2:	f2c0 0001 	movt	r0, #1
    93c6:	f24d 7214 	movw	r2, #55060	; 0xd714
    93ca:	f2c0 0201 	movt	r2, #1
    93ce:	2108      	movs	r1, #8
    93d0:	f00d fb2c 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    93d4:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93d6:	f240 10f0 	movw	r0, #496	; 0x1f0
    93da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93de:	9906      	ldr	r1, [sp, #24]
    93e0:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    93e2:	f240 10f8 	movw	r0, #504	; 0x1f8
    93e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93ea:	2101      	movs	r1, #1
    93ec:	f005 fa61 	bl	e8b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    93f0:	9005      	str	r0, [sp, #20]
    93f2:	e7ff      	b.n	93f4 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xda>
    93f4:	f240 10f0 	movw	r0, #496	; 0x1f0
    93f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93fc:	9905      	ldr	r1, [sp, #20]
    93fe:	6041      	str	r1, [r0, #4]
    9400:	2201      	movs	r2, #1
    9402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9406:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    940a:	9004      	str	r0, [sp, #16]
    940c:	4610      	mov	r0, r2
    940e:	9904      	ldr	r1, [sp, #16]
    9410:	461a      	mov	r2, r3
    9412:	4663      	mov	r3, ip
    9414:	f00f fdf8 	bl	19008 <hal_i2c_master_write>
    9418:	9012      	str	r0, [sp, #72]	; 0x48
    941a:	e7ff      	b.n	941c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    941c:	f240 10f8 	movw	r0, #504	; 0x1f8
    9420:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9424:	2100      	movs	r1, #0
    9426:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    9428:	f240 10f0 	movw	r0, #496	; 0x1f0
    942c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9430:	9909      	ldr	r1, [sp, #36]	; 0x24
    9432:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    9434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9436:	b2d3      	uxtb	r3, r2
    9438:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    943a:	980d      	ldr	r0, [sp, #52]	; 0x34
    943c:	990c      	ldr	r1, [sp, #48]	; 0x30
    943e:	f005 fa38 	bl	e8b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    9442:	9003      	str	r0, [sp, #12]
    9444:	e7ff      	b.n	9446 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x12c>
    9446:	f240 10f0 	movw	r0, #496	; 0x1f0
    944a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    944e:	9903      	ldr	r1, [sp, #12]
    9450:	6041      	str	r1, [r0, #4]
    9452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9456:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    9458:	9002      	str	r0, [sp, #8]
    945a:	4618      	mov	r0, r3
    945c:	9902      	ldr	r1, [sp, #8]
    945e:	f00f fe67 	bl	19130 <hal_i2c_master_read>
    9462:	4601      	mov	r1, r0
    9464:	9013      	str	r0, [sp, #76]	; 0x4c
    9466:	9101      	str	r1, [sp, #4]
    9468:	e7ff      	b.n	946a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    946a:	9801      	ldr	r0, [sp, #4]
    946c:	2804      	cmp	r0, #4
    946e:	d005      	beq.n	947c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x162>
    9470:	e7ff      	b.n	9472 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x158>
    9472:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    9474:	900e      	str	r0, [sp, #56]	; 0x38
    9476:	2001      	movs	r0, #1
    9478:	900e      	str	r0, [sp, #56]	; 0x38
}
    947a:	e00c      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
        console::print("i2c fail\n"); ////
    947c:	f24d 7024 	movw	r0, #55076	; 0xd724
    9480:	f2c0 0001 	movt	r0, #1
    9484:	2109      	movs	r1, #9
    9486:	f006 f936 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    948a:	e7ff      	b.n	948c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x172>
    948c:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    948e:	900e      	str	r0, [sp, #56]	; 0x38
    9490:	2001      	movs	r0, #1
    9492:	900e      	str	r0, [sp, #56]	; 0x38
    9494:	e7ff      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
}
    9496:	980e      	ldr	r0, [sp, #56]	; 0x38
    9498:	b014      	add	sp, #80	; 0x50
    949a:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    949c:	f24d 40b0 	movw	r0, #54448	; 0xd4b0
    94a0:	f2c0 0001 	movt	r0, #1
    94a4:	f24d 7204 	movw	r2, #55044	; 0xd704
    94a8:	f2c0 0201 	movt	r2, #1
    94ac:	211c      	movs	r1, #28
    94ae:	f00d fabd 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    94b2:	defe      	udf	#254	; 0xfe

000094b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>:
    sys::console,
    kernel::os,
};

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    94b4:	b580      	push	{r7, lr}
    94b6:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    94ba:	b08e      	sub	sp, #56	; 0x38
    console::print("Rust CHIP8\n"); console::flush();
    94bc:	f24d 702d 	movw	r0, #55085	; 0xd72d
    94c0:	f2c0 0001 	movt	r0, #1
    94c4:	210b      	movs	r1, #11
    94c6:	f006 f916 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    94ca:	e7ff      	b.n	94cc <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x18>
    94cc:	f006 f959 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    94d0:	e7ff      	b.n	94d2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x1e>
    94d2:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    94d4:	9009      	str	r0, [sp, #36]	; 0x24
    94d6:	9909      	ldr	r1, [sp, #36]	; 0x24
    94d8:	f004 ff29 	bl	e32e <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94dc:	9008      	str	r0, [sp, #32]
    94de:	9107      	str	r1, [sp, #28]
    94e0:	e7ff      	b.n	94e2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x2e>
    94e2:	20ef      	movs	r0, #239	; 0xef
    94e4:	9006      	str	r0, [sp, #24]
    94e6:	9906      	ldr	r1, [sp, #24]
    94e8:	f004 ff21 	bl	e32e <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94ec:	9005      	str	r0, [sp, #20]
    94ee:	9104      	str	r1, [sp, #16]
    94f0:	e7ff      	b.n	94f2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x3e>
    let background = Rectangle::<Rgb565>
    94f2:	4668      	mov	r0, sp
    94f4:	9904      	ldr	r1, [sp, #16]
    94f6:	6001      	str	r1, [r0, #0]
    94f8:	a811      	add	r0, sp, #68	; 0x44
    94fa:	9908      	ldr	r1, [sp, #32]
    94fc:	9a07      	ldr	r2, [sp, #28]
    94fe:	9b05      	ldr	r3, [sp, #20]
    9500:	f008 ff90 	bl	12424 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9504:	e7ff      	b.n	9506 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x52>
    9506:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    9508:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
    950c:	f88d 0065 	strb.w	r0, [sp, #101]	; 0x65
    9510:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
    9514:	f89d 0066 	ldrb.w	r0, [sp, #102]	; 0x66
    9518:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
    951c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    9520:	f004 ff80 	bl	e424 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    9524:	9003      	str	r0, [sp, #12]
    9526:	e7ff      	b.n	9528 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x74>
    9528:	9803      	ldr	r0, [sp, #12]
    952a:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
    952e:	2101      	movs	r1, #1
    9530:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
    let background = Rectangle::<Rgb565>
    9534:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    9538:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    953c:	a80a      	add	r0, sp, #40	; 0x28
    953e:	a911      	add	r1, sp, #68	; 0x44
    9540:	f008 fc06 	bl	11d50 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    9544:	e7ff      	b.n	9546 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x92>
    9546:	a81a      	add	r0, sp, #104	; 0x68
    //  Render background to display
    //  druid::draw_to_display(background);
    //  unsafe { os::os_time_delay(1000) };  ////

    //  Start the emulator
    let chip8 = libchip8::Chip8::new(Hardware);
    9548:	f000 fab2 	bl	9ab0 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>
    954c:	e7ff      	b.n	954e <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x9a>
    954e:	f10d 0e10 	add.w	lr, sp, #16
    9552:	f50e 5085 	add.w	r0, lr, #4256	; 0x10a0
    9556:	a91a      	add	r1, sp, #104	; 0x68
    9558:	f241 0248 	movw	r2, #4168	; 0x1048
    chip8.run(include_bytes!("../roms/invaders.ch8"));
    955c:	9002      	str	r0, [sp, #8]
    955e:	f013 fe39 	bl	1d1d4 <__aeabi_memcpy>
    9562:	f24d 7138 	movw	r1, #55096	; 0xd738
    9566:	f2c0 0101 	movt	r1, #1
    956a:	f240 5215 	movw	r2, #1301	; 0x515
    956e:	9802      	ldr	r0, [sp, #8]
    9570:	f000 fb32 	bl	9bd8 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>
    9574:	e7ff      	b.n	9576 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xc2>
    console::print("CHIP8 done\n"); console::flush();
    9576:	f64d 404d 	movw	r0, #56397	; 0xdc4d
    957a:	f2c0 0001 	movt	r0, #1
    957e:	210b      	movs	r1, #11
    9580:	f006 f8b9 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9584:	e7ff      	b.n	9586 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xd2>
    9586:	f006 f8fc 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    958a:	e7ff      	b.n	958c <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xd8>
    958c:	2001      	movs	r0, #1

    //  Return success to the caller
    Ok(())
}
    958e:	f50d 5d03 	add.w	sp, sp, #8384	; 0x20c0
    9592:	b00e      	add	sp, #56	; 0x38
    9594:	bd80      	pop	{r7, pc}

00009596 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>:
static mut SCREEN_BUFFER: [u8; SCREEN_WIDTH * SCREEN_HEIGHT] = [0; SCREEN_WIDTH * SCREEN_HEIGHT];

struct Hardware;

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    9596:	b081      	sub	sp, #4
    9598:	9000      	str	r0, [sp, #0]
    959a:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    959c:	b001      	add	sp, #4
    959e:	4770      	bx	lr

000095a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>:

    fn key(&mut self, _key: u8) -> bool {
    95a0:	b082      	sub	sp, #8
    95a2:	460a      	mov	r2, r1
    95a4:	9000      	str	r0, [sp, #0]
    95a6:	f88d 1007 	strb.w	r1, [sp, #7]
    95aa:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    95ac:	b002      	add	sp, #8
    95ae:	4770      	bx	lr

000095b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    95b0:	b510      	push	{r4, lr}
    95b2:	b0b0      	sub	sp, #192	; 0xc0
    95b4:	469c      	mov	ip, r3
    95b6:	9029      	str	r0, [sp, #164]	; 0xa4
    95b8:	912a      	str	r1, [sp, #168]	; 0xa8
    95ba:	922b      	str	r2, [sp, #172]	; 0xac
    95bc:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
    95c0:	f64d 4058 	movw	r0, #56408	; 0xdc58
    95c4:	f2c0 0001 	movt	r0, #1
    95c8:	2304      	movs	r3, #4
    95ca:	910f      	str	r1, [sp, #60]	; 0x3c
    95cc:	4619      	mov	r1, r3
    95ce:	920e      	str	r2, [sp, #56]	; 0x38
    95d0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    95d4:	f006 f88f 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    95d8:	e7ff      	b.n	95da <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2a>
    95da:	980f      	ldr	r0, [sp, #60]	; 0x3c
    95dc:	f006 f8c9 	bl	f772 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    95e0:	e7ff      	b.n	95e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x32>
    95e2:	f64d 405c 	movw	r0, #56412	; 0xdc5c
    95e6:	f2c0 0001 	movt	r0, #1
    95ea:	2102      	movs	r1, #2
    95ec:	f006 f883 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    95f0:	e7ff      	b.n	95f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x42>
    95f2:	980e      	ldr	r0, [sp, #56]	; 0x38
    95f4:	f006 f8bd 	bl	f772 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    95f8:	e7ff      	b.n	95fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x4a>
    95fa:	f64d 405e 	movw	r0, #56414	; 0xdc5e
    95fe:	f2c0 0001 	movt	r0, #1
    9602:	2101      	movs	r1, #1
    9604:	f006 f877 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9608:	e7ff      	b.n	960a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x5a>
    960a:	f006 f8ba 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    960e:	e7ff      	b.n	9610 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x60>
        let i = x + y * SCREEN_WIDTH;
    9610:	980e      	ldr	r0, [sp, #56]	; 0x38
    9612:	0181      	lsls	r1, r0, #6
    9614:	0e82      	lsrs	r2, r0, #26
    9616:	2a00      	cmp	r2, #0
    9618:	910c      	str	r1, [sp, #48]	; 0x30
    961a:	f040 80cb 	bne.w	97b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x204>
    961e:	e7ff      	b.n	9620 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x70>
    9620:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9622:	990c      	ldr	r1, [sp, #48]	; 0x30
    9624:	1842      	adds	r2, r0, r1
    9626:	4613      	mov	r3, r2
    9628:	4282      	cmp	r2, r0
    962a:	930b      	str	r3, [sp, #44]	; 0x2c
    962c:	f0c0 80ce 	bcc.w	97cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x21c>
    9630:	e7ff      	b.n	9632 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x82>
    9632:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9634:	902d      	str	r0, [sp, #180]	; 0xb4
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    9636:	990d      	ldr	r1, [sp, #52]	; 0x34
    9638:	07ca      	lsls	r2, r1, #31
    963a:	2a00      	cmp	r2, #0
    963c:	d104      	bne.n	9648 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x98>
    963e:	e7ff      	b.n	9640 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x90>
    9640:	2000      	movs	r0, #0
    9642:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    9646:	e003      	b.n	9650 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xa0>
    9648:	2001      	movs	r0, #1
    964a:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    964e:	e7ff      	b.n	9650 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xa0>
    9650:	2000      	movs	r0, #0
    9652:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9654:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    9658:	f040 80c4 	bne.w	97e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x234>
    965c:	e7ff      	b.n	965e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xae>
    965e:	f240 10f9 	movw	r0, #505	; 0x1f9
    9662:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9666:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
    966a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    966c:	5481      	strb	r1, [r0, r2]
    966e:	2003      	movs	r0, #3
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    9670:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9672:	fb81 0300 	smull	r0, r3, r1, r0
    9676:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    967a:	ebb3 7fe0 	cmp.w	r3, r0, asr #31
    967e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    9682:	f040 80b9 	bne.w	97f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x248>
    9686:	e7ff      	b.n	9688 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xd8>
    9688:	980a      	ldr	r0, [sp, #40]	; 0x28
    968a:	902e      	str	r0, [sp, #184]	; 0xb8
    968c:	2103      	movs	r1, #3
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    968e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9690:	fb82 1301 	smull	r1, r3, r2, r1
    9694:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    9698:	ebb3 7fe1 	cmp.w	r3, r1, asr #31
    969c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    96a0:	f040 80b6 	bne.w	9810 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x260>
    96a4:	e7ff      	b.n	96a6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xf6>
    96a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    96a8:	902f      	str	r0, [sp, #188]	; 0xbc
        let color = if d { Rgb565::from(( 0x00, 0x00, 0xff )) } else { Rgb565::from(( 0x00, 0x00, 0x00 )) };
    96aa:	990d      	ldr	r1, [sp, #52]	; 0x34
    96ac:	07ca      	lsls	r2, r1, #31
    96ae:	2a00      	cmp	r2, #0
    96b0:	d112      	bne.n	96d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x128>
    96b2:	e7ff      	b.n	96b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x104>
    96b4:	2000      	movs	r0, #0
    96b6:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
    96ba:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
    96be:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    96c2:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    96c6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    96ca:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    96ce:	f004 fea9 	bl	e424 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    96d2:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    96d6:	e013      	b.n	9700 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x150>
    96d8:	2000      	movs	r0, #0
    96da:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    96de:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    96e2:	20ff      	movs	r0, #255	; 0xff
    96e4:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    96e8:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    96ec:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    96f0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    96f4:	f004 fe96 	bl	e424 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    96f8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    96fc:	e7ff      	b.n	96fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x14e>
    96fe:	e000      	b.n	9702 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x152>
    9700:	e7ff      	b.n	9702 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x152>
        let pixel = Rectangle::<Rgb565>
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    9702:	980a      	ldr	r0, [sp, #40]	; 0x28
    9704:	9909      	ldr	r1, [sp, #36]	; 0x24
    9706:	f004 fe12 	bl	e32e <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    970a:	9008      	str	r0, [sp, #32]
    970c:	9107      	str	r1, [sp, #28]
    970e:	e7ff      	b.n	9710 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x160>
    9710:	980a      	ldr	r0, [sp, #40]	; 0x28
    9712:	1cc1      	adds	r1, r0, #3
    9714:	460a      	mov	r2, r1
    9716:	4281      	cmp	r1, r0
    9718:	9206      	str	r2, [sp, #24]
    971a:	f180 8085 	bvs.w	9828 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x278>
    971e:	e7ff      	b.n	9720 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x170>
    9720:	9806      	ldr	r0, [sp, #24]
    9722:	1e41      	subs	r1, r0, #1
    9724:	460a      	mov	r2, r1
    9726:	4281      	cmp	r1, r0
    9728:	9205      	str	r2, [sp, #20]
    972a:	f180 8089 	bvs.w	9840 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x290>
    972e:	e7ff      	b.n	9730 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x180>
    9730:	9809      	ldr	r0, [sp, #36]	; 0x24
    9732:	1cc1      	adds	r1, r0, #3
    9734:	460a      	mov	r2, r1
    9736:	4281      	cmp	r1, r0
    9738:	9204      	str	r2, [sp, #16]
    973a:	f180 808d 	bvs.w	9858 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2a8>
    973e:	e7ff      	b.n	9740 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x190>
    9740:	9804      	ldr	r0, [sp, #16]
    9742:	1e41      	subs	r1, r0, #1
    9744:	460a      	mov	r2, r1
    9746:	4281      	cmp	r1, r0
    9748:	9203      	str	r2, [sp, #12]
    974a:	f180 8091 	bvs.w	9870 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2c0>
    974e:	e7ff      	b.n	9750 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1a0>
    9750:	9805      	ldr	r0, [sp, #20]
    9752:	9903      	ldr	r1, [sp, #12]
    9754:	f004 fdeb 	bl	e32e <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    9758:	9002      	str	r0, [sp, #8]
    975a:	9101      	str	r1, [sp, #4]
    975c:	e7ff      	b.n	975e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1ae>
        let pixel = Rectangle::<Rgb565>
    975e:	4668      	mov	r0, sp
    9760:	9901      	ldr	r1, [sp, #4]
    9762:	6001      	str	r1, [r0, #0]
    9764:	a81a      	add	r0, sp, #104	; 0x68
    9766:	9908      	ldr	r1, [sp, #32]
    9768:	9a07      	ldr	r2, [sp, #28]
    976a:	9b02      	ldr	r3, [sp, #8]
    976c:	f008 fe5a 	bl	12424 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9770:	e7ff      	b.n	9772 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1c2>
            .fill( Some( color ) );
    9772:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
    9776:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    977a:	2001      	movs	r0, #1
    977c:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
        let pixel = Rectangle::<Rgb565>
    9780:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
    9784:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
    9788:	a813      	add	r0, sp, #76	; 0x4c
    978a:	a91a      	add	r1, sp, #104	; 0x68
    978c:	f008 fae0 	bl	11d50 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    9790:	e7ff      	b.n	9792 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1e2>
    9792:	a813      	add	r0, sp, #76	; 0x4c
    9794:	a922      	add	r1, sp, #136	; 0x88
        druid::draw_to_display(pixel);
    9796:	460a      	mov	r2, r1
    9798:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    979c:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    97a0:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    97a4:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    97a8:	4608      	mov	r0, r1
    97aa:	f006 fca2 	bl	100f2 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    97ae:	e7ff      	b.n	97b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x200>

        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    97b0:	b030      	add	sp, #192	; 0xc0
    97b2:	bd10      	pop	{r4, pc}
        let i = x + y * SCREEN_WIDTH;
    97b4:	f64d 4090 	movw	r0, #56464	; 0xdc90
    97b8:	f2c0 0001 	movt	r0, #1
    97bc:	f64d 4274 	movw	r2, #56436	; 0xdc74
    97c0:	f2c0 0201 	movt	r2, #1
    97c4:	2121      	movs	r1, #33	; 0x21
    97c6:	f00d f931 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97ca:	defe      	udf	#254	; 0xfe
    97cc:	f64d 40d0 	movw	r0, #56528	; 0xdcd0
    97d0:	f2c0 0001 	movt	r0, #1
    97d4:	f64d 42b4 	movw	r2, #56500	; 0xdcb4
    97d8:	f2c0 0201 	movt	r2, #1
    97dc:	211c      	movs	r1, #28
    97de:	f00d f925 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97e2:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    97e4:	f64d 40ec 	movw	r0, #56556	; 0xdcec
    97e8:	f2c0 0001 	movt	r0, #1
    97ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    97f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97f2:	f00d f931 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    97f6:	defe      	udf	#254	; 0xfe
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    97f8:	f64d 4090 	movw	r0, #56464	; 0xdc90
    97fc:	f2c0 0001 	movt	r0, #1
    9800:	f64d 42fc 	movw	r2, #56572	; 0xdcfc
    9804:	f2c0 0201 	movt	r2, #1
    9808:	2121      	movs	r1, #33	; 0x21
    980a:	f00d f90f 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    980e:	defe      	udf	#254	; 0xfe
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    9810:	f64d 4090 	movw	r0, #56464	; 0xdc90
    9814:	f2c0 0001 	movt	r0, #1
    9818:	f64d 520c 	movw	r2, #56588	; 0xdd0c
    981c:	f2c0 0201 	movt	r2, #1
    9820:	2121      	movs	r1, #33	; 0x21
    9822:	f00d f903 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9826:	defe      	udf	#254	; 0xfe
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    9828:	f64d 40d0 	movw	r0, #56528	; 0xdcd0
    982c:	f2c0 0001 	movt	r0, #1
    9830:	f64d 521c 	movw	r2, #56604	; 0xdd1c
    9834:	f2c0 0201 	movt	r2, #1
    9838:	211c      	movs	r1, #28
    983a:	f00d f8f7 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    983e:	defe      	udf	#254	; 0xfe
    9840:	f64d 5030 	movw	r0, #56624	; 0xdd30
    9844:	f2c0 0001 	movt	r0, #1
    9848:	f64d 521c 	movw	r2, #56604	; 0xdd1c
    984c:	f2c0 0201 	movt	r2, #1
    9850:	2121      	movs	r1, #33	; 0x21
    9852:	f00d f8eb 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9856:	defe      	udf	#254	; 0xfe
    9858:	f64d 40d0 	movw	r0, #56528	; 0xdcd0
    985c:	f2c0 0001 	movt	r0, #1
    9860:	f64d 5254 	movw	r2, #56660	; 0xdd54
    9864:	f2c0 0201 	movt	r2, #1
    9868:	211c      	movs	r1, #28
    986a:	f00d f8df 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    986e:	defe      	udf	#254	; 0xfe
    9870:	f64d 5030 	movw	r0, #56624	; 0xdd30
    9874:	f2c0 0001 	movt	r0, #1
    9878:	f64d 5254 	movw	r2, #56660	; 0xdd54
    987c:	f2c0 0201 	movt	r2, #1
    9880:	2121      	movs	r1, #33	; 0x21
    9882:	f00d f8d3 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9886:	defe      	udf	#254	; 0xfe

00009888 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    9888:	b088      	sub	sp, #32
    988a:	9004      	str	r0, [sp, #16]
    988c:	9105      	str	r1, [sp, #20]
    988e:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        let i = x + y * SCREEN_WIDTH;
    9890:	0190      	lsls	r0, r2, #6
    9892:	0e92      	lsrs	r2, r2, #26
    9894:	2a00      	cmp	r2, #0
    9896:	9103      	str	r1, [sp, #12]
    9898:	9002      	str	r0, [sp, #8]
    989a:	d11a      	bne.n	98d2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x4a>
    989c:	e7ff      	b.n	989e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x16>
    989e:	9803      	ldr	r0, [sp, #12]
    98a0:	9902      	ldr	r1, [sp, #8]
    98a2:	1842      	adds	r2, r0, r1
    98a4:	4613      	mov	r3, r2
    98a6:	4282      	cmp	r2, r0
    98a8:	9301      	str	r3, [sp, #4]
    98aa:	d31e      	bcc.n	98ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x62>
    98ac:	e7ff      	b.n	98ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x26>
    98ae:	9801      	ldr	r0, [sp, #4]
    98b0:	9007      	str	r0, [sp, #28]
    98b2:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    98b4:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    98b8:	d123      	bne.n	9902 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x7a>
    98ba:	e7ff      	b.n	98bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x34>
    98bc:	f240 10f9 	movw	r0, #505	; 0x1f9
    98c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    98c4:	9901      	ldr	r1, [sp, #4]
    98c6:	5c40      	ldrb	r0, [r0, r1]
    98c8:	2800      	cmp	r0, #0
    98ca:	bf18      	it	ne
    98cc:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    98ce:	b008      	add	sp, #32
    98d0:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    98d2:	f64d 4090 	movw	r0, #56464	; 0xdc90
    98d6:	f2c0 0001 	movt	r0, #1
    98da:	f64d 5264 	movw	r2, #56676	; 0xdd64
    98de:	f2c0 0201 	movt	r2, #1
    98e2:	2121      	movs	r1, #33	; 0x21
    98e4:	f00d f8a2 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98e8:	defe      	udf	#254	; 0xfe
    98ea:	f64d 40d0 	movw	r0, #56528	; 0xdcd0
    98ee:	f2c0 0001 	movt	r0, #1
    98f2:	f64d 5274 	movw	r2, #56692	; 0xdd74
    98f6:	f2c0 0201 	movt	r2, #1
    98fa:	211c      	movs	r1, #28
    98fc:	f00d f896 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9900:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    9902:	f64d 5084 	movw	r0, #56708	; 0xdd84
    9906:	f2c0 0001 	movt	r0, #1
    990a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    990e:	9901      	ldr	r1, [sp, #4]
    9910:	f00d f8a2 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9914:	defe      	udf	#254	; 0xfe

00009916 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>:

    fn vram_setsize(&mut self, _size: (usize, usize)) {
    9916:	b083      	sub	sp, #12
    9918:	9000      	str	r0, [sp, #0]
    991a:	9101      	str	r1, [sp, #4]
    991c:	9202      	str	r2, [sp, #8]
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    991e:	b003      	add	sp, #12
    9920:	4770      	bx	lr

00009922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>:

    fn vram_size(&mut self) -> (usize, usize) {
    9922:	b083      	sub	sp, #12
    9924:	9002      	str	r0, [sp, #8]
    9926:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    9928:	9000      	str	r0, [sp, #0]
    992a:	2020      	movs	r0, #32
    992c:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    992e:	9800      	ldr	r0, [sp, #0]
    9930:	9901      	ldr	r1, [sp, #4]
    9932:	b003      	add	sp, #12
    9934:	4770      	bx	lr

00009936 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>:

    fn clock(&mut self) -> u64 {
    9936:	b5b0      	push	{r4, r5, r7, lr}
    9938:	b086      	sub	sp, #24
    993a:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    993c:	f64a 40f9 	movw	r0, #44281	; 0xacf9
    9940:	f2c0 0001 	movt	r0, #1
    9944:	2100      	movs	r1, #0
    9946:	fba1 2300 	umull	r2, r3, r1, r0
    994a:	2b00      	cmp	r3, #0
    994c:	bf18      	it	ne
    994e:	2301      	movne	r3, #1
    9950:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9954:	fba1 e40c 	umull	lr, r4, r1, ip
    9958:	2c00      	cmp	r4, #0
    995a:	bf18      	it	ne
    995c:	2401      	movne	r4, #1
    995e:	ea43 0304 	orr.w	r3, r3, r4
    9962:	4472      	add	r2, lr
    9964:	fba0 0c0c 	umull	r0, ip, r0, ip
    9968:	eb12 020c 	adds.w	r2, r2, ip
    996c:	f141 0100 	adc.w	r1, r1, #0
    9970:	ea41 0103 	orr.w	r1, r1, r3
    9974:	2900      	cmp	r1, #0
    9976:	9004      	str	r0, [sp, #16]
    9978:	9203      	str	r2, [sp, #12]
    997a:	d124      	bne.n	99c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x90>
    997c:	e7ff      	b.n	997e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x48>
    997e:	2000      	movs	r0, #0
    9980:	9904      	ldr	r1, [sp, #16]
    9982:	fba0 2301 	umull	r2, r3, r0, r1
    9986:	2b00      	cmp	r3, #0
    9988:	bf18      	it	ne
    998a:	2301      	movne	r3, #1
    998c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9990:	f8dd e00c 	ldr.w	lr, [sp, #12]
    9994:	fbae 450c 	umull	r4, r5, lr, ip
    9998:	2d00      	cmp	r5, #0
    999a:	bf18      	it	ne
    999c:	2501      	movne	r5, #1
    999e:	ea43 0305 	orr.w	r3, r3, r5
    99a2:	4422      	add	r2, r4
    99a4:	fba1 c40c 	umull	ip, r4, r1, ip
    99a8:	1912      	adds	r2, r2, r4
    99aa:	f140 0000 	adc.w	r0, r0, #0
    99ae:	ea40 0003 	orr.w	r0, r0, r3
    99b2:	2800      	cmp	r0, #0
    99b4:	f8cd c008 	str.w	ip, [sp, #8]
    99b8:	9201      	str	r2, [sp, #4]
    99ba:	d110      	bne.n	99de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0xa8>
    99bc:	e7ff      	b.n	99be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x88>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    99be:	9802      	ldr	r0, [sp, #8]
    99c0:	9901      	ldr	r1, [sp, #4]
    99c2:	b006      	add	sp, #24
    99c4:	bdb0      	pop	{r4, r5, r7, pc}
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    99c6:	f64d 4090 	movw	r0, #56464	; 0xdc90
    99ca:	f2c0 0001 	movt	r0, #1
    99ce:	f64d 5294 	movw	r2, #56724	; 0xdd94
    99d2:	f2c0 0201 	movt	r2, #1
    99d6:	2121      	movs	r1, #33	; 0x21
    99d8:	f00d f828 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99dc:	defe      	udf	#254	; 0xfe
    99de:	f64d 4090 	movw	r0, #56464	; 0xdc90
    99e2:	f2c0 0001 	movt	r0, #1
    99e6:	f64d 5294 	movw	r2, #56724	; 0xdd94
    99ea:	f2c0 0201 	movt	r2, #1
    99ee:	2121      	movs	r1, #33	; 0x21
    99f0:	f00d f81c 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99f4:	defe      	udf	#254	; 0xfe

000099f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>:

    fn beep(&mut self) {
    99f6:	b081      	sub	sp, #4
    99f8:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    99fa:	b001      	add	sp, #4
    99fc:	4770      	bx	lr

000099fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>:

    fn sched(&mut self) -> bool {
    99fe:	b580      	push	{r7, lr}
    9a00:	b086      	sub	sp, #24
    9a02:	9005      	str	r0, [sp, #20]
    9a04:	a803      	add	r0, sp, #12
        //  Called in every step; return true for shutdown.
        os::eventq_run(               //  Process events...
            os::eventq_dflt_get()     //  From Mynewt default event queue.
    9a06:	f005 fcb6 	bl	f376 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    9a0a:	e7ff      	b.n	9a0c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0xe>
    9a0c:	f24d 2182 	movw	r1, #53890	; 0xd282
    9a10:	f2c0 0101 	movt	r1, #1
    9a14:	f64d 53a4 	movw	r3, #56740	; 0xdda4
    9a18:	f2c0 0301 	movt	r3, #1
    9a1c:	a803      	add	r0, sp, #12
    9a1e:	2208      	movs	r2, #8
    9a20:	f009 f834 	bl	12a8c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    9a24:	9002      	str	r0, [sp, #8]
    9a26:	e7ff      	b.n	9a28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0x2a>
        os::eventq_run(               //  Process events...
    9a28:	9802      	ldr	r0, [sp, #8]
    9a2a:	f005 fc9b 	bl	f364 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    9a2e:	9001      	str	r0, [sp, #4]
    9a30:	e7ff      	b.n	9a32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0x34>
    9a32:	f24d 218a 	movw	r1, #53898	; 0xd28a
    9a36:	f2c0 0101 	movt	r1, #1
    9a3a:	f64d 53b4 	movw	r3, #56756	; 0xddb4
    9a3e:	f2c0 0301 	movt	r3, #1
    9a42:	2208      	movs	r2, #8
    9a44:	9801      	ldr	r0, [sp, #4]
    9a46:	f005 fbd7 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9a4a:	e7ff      	b.n	9a4c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0x4e>
    9a4c:	2000      	movs	r0, #0
                .map(|b| if b { 0xffffff } else { 0 })
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
    }
    9a4e:	b006      	add	sp, #24
    9a50:	bd80      	pop	{r7, pc}

00009a52 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    9a52:	b580      	push	{r7, lr}
    9a54:	b084      	sub	sp, #16
    9a56:	460a      	mov	r2, r1
    9a58:	4603      	mov	r3, r0
    9a5a:	f8ad 000c 	strh.w	r0, [sp, #12]
    9a5e:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    9a62:	f64d 50c4 	movw	r0, #56772	; 0xddc4
    9a66:	f2c0 0001 	movt	r0, #1
    9a6a:	2118      	movs	r1, #24
    9a6c:	9202      	str	r2, [sp, #8]
    9a6e:	9301      	str	r3, [sp, #4]
    9a70:	f005 fe41 	bl	f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9a74:	e7ff      	b.n	9a76 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x24>
    9a76:	f005 fe84 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9a7a:	e7ff      	b.n	9a7c <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x2a>
    9a7c:	b004      	add	sp, #16
    9a7e:	bd80      	pop	{r7, pc}

00009a80 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>:
    9a80:	b580      	push	{r7, lr}
    9a82:	b082      	sub	sp, #8
    9a84:	9200      	str	r2, [sp, #0]
    9a86:	9101      	str	r1, [sp, #4]
    9a88:	9a00      	ldr	r2, [sp, #0]
    9a8a:	f003 fe58 	bl	d73e <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>
    9a8e:	e7ff      	b.n	9a90 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E+0x10>
    9a90:	b002      	add	sp, #8
    9a92:	bd80      	pop	{r7, pc}

00009a94 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>:
    9a94:	b580      	push	{r7, lr}
    9a96:	b084      	sub	sp, #16
    9a98:	9102      	str	r1, [sp, #8]
    9a9a:	9003      	str	r0, [sp, #12]
    9a9c:	9902      	ldr	r1, [sp, #8]
    9a9e:	f003 fe60 	bl	d762 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>
    9aa2:	9001      	str	r0, [sp, #4]
    9aa4:	9100      	str	r1, [sp, #0]
    9aa6:	e7ff      	b.n	9aa8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E+0x14>
    9aa8:	9801      	ldr	r0, [sp, #4]
    9aaa:	9900      	ldr	r1, [sp, #0]
    9aac:	b004      	add	sp, #16
    9aae:	bd80      	pop	{r7, pc}

00009ab0 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    9ab0:	b570      	push	{r4, r5, r6, lr}
    9ab2:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    9ab6:	f10d 0e04 	add.w	lr, sp, #4
    9aba:	f50e 5182 	add.w	r1, lr, #4160	; 0x1040
    9abe:	2200      	movs	r2, #0
        Self {
            v: [0; REGS],
    9ac0:	9209      	str	r2, [sp, #36]	; 0x24
    9ac2:	9208      	str	r2, [sp, #32]
    9ac4:	9207      	str	r2, [sp, #28]
    9ac6:	9206      	str	r2, [sp, #24]
    9ac8:	ab0a      	add	r3, sp, #40	; 0x28
    9aca:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    9ace:	9005      	str	r0, [sp, #20]
    9ad0:	4618      	mov	r0, r3
    9ad2:	9104      	str	r1, [sp, #16]
    9ad4:	4661      	mov	r1, ip
    9ad6:	9203      	str	r2, [sp, #12]
    9ad8:	9302      	str	r3, [sp, #8]
    9ada:	f8cd c004 	str.w	ip, [sp, #4]
    9ade:	f013 fb75 	bl	1d1cc <__aeabi_memclr>
            stack: [0; STACKS],
    9ae2:	9803      	ldr	r0, [sp, #12]
    9ae4:	9904      	ldr	r1, [sp, #16]
    9ae6:	6008      	str	r0, [r1, #0]
    9ae8:	f841 0c04 	str.w	r0, [r1, #-4]
    9aec:	f841 0c08 	str.w	r0, [r1, #-8]
    9af0:	f841 0c0c 	str.w	r0, [r1, #-12]
    9af4:	f841 0c10 	str.w	r0, [r1, #-16]
    9af8:	f841 0c14 	str.w	r0, [r1, #-20]
    9afc:	f841 0c18 	str.w	r0, [r1, #-24]
    9b00:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    9b04:	6088      	str	r0, [r1, #8]
    9b06:	6048      	str	r0, [r1, #4]
        Self {
    9b08:	9a06      	ldr	r2, [sp, #24]
    9b0a:	9b07      	ldr	r3, [sp, #28]
    9b0c:	f8dd c020 	ldr.w	ip, [sp, #32]
    9b10:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    9b14:	9c05      	ldr	r4, [sp, #20]
    9b16:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    9b1a:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    9b1e:	63a3      	str	r3, [r4, #56]	; 0x38
    9b20:	6362      	str	r2, [r4, #52]	; 0x34
    9b22:	8220      	strh	r0, [r4, #16]
    9b24:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    9b28:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    9b2c:	8260      	strh	r0, [r4, #18]
    9b2e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    9b32:	f104 0047 	add.w	r0, r4, #71	; 0x47
    9b36:	9902      	ldr	r1, [sp, #8]
    9b38:	9a01      	ldr	r2, [sp, #4]
    9b3a:	f013 fb4b 	bl	1d1d4 <__aeabi_memcpy>
    9b3e:	9905      	ldr	r1, [sp, #20]
    9b40:	f101 0214 	add.w	r2, r1, #20
    9b44:	f10d 0e08 	add.w	lr, sp, #8
    9b48:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    9b4c:	2320      	movs	r3, #32
    9b4e:	9000      	str	r0, [sp, #0]
    9b50:	4610      	mov	r0, r2
    9b52:	461a      	mov	r2, r3
    9b54:	f013 fb3e 	bl	1d1d4 <__aeabi_memcpy>
    9b58:	9904      	ldr	r1, [sp, #16]
    9b5a:	684a      	ldr	r2, [r1, #4]
    9b5c:	688b      	ldr	r3, [r1, #8]
    9b5e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    9b62:	f8d1 e010 	ldr.w	lr, [r1, #16]
    9b66:	9c05      	ldr	r4, [sp, #20]
    9b68:	6063      	str	r3, [r4, #4]
    9b6a:	6022      	str	r2, [r4, #0]
    9b6c:	f8c4 e00c 	str.w	lr, [r4, #12]
    9b70:	f8c4 c008 	str.w	ip, [r4, #8]
    9b74:	f241 0247 	movw	r2, #4167	; 0x1047
    9b78:	9b03      	ldr	r3, [sp, #12]
    9b7a:	54a3      	strb	r3, [r4, r2]
            running: false,
            hw,
        }
    }
    9b7c:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    9b80:	bd70      	pop	{r4, r5, r6, pc}

00009b82 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    9b82:	b580      	push	{r7, lr}
    9b84:	b086      	sub	sp, #24
    9b86:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    9b88:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    9b8c:	2201      	movs	r2, #1
    9b8e:	9003      	str	r0, [sp, #12]
    9b90:	4608      	mov	r0, r1
    9b92:	4611      	mov	r1, r2
    9b94:	f009 f824 	bl	12be0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>
    9b98:	9002      	str	r0, [sp, #8]
    9b9a:	e7ff      	b.n	9b9c <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x1a>
    9b9c:	9802      	ldr	r0, [sp, #8]
    9b9e:	9903      	ldr	r1, [sp, #12]
    9ba0:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    9ba4:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    9ba8:	4613      	mov	r3, r2
    9baa:	2a0f      	cmp	r2, #15
    9bac:	9301      	str	r3, [sp, #4]
    9bae:	d80a      	bhi.n	9bc6 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x44>
    9bb0:	e7ff      	b.n	9bb2 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x30>
    9bb2:	9803      	ldr	r0, [sp, #12]
    9bb4:	9901      	ldr	r1, [sp, #4]
    9bb6:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    9bba:	8a92      	ldrh	r2, [r2, #20]
    9bbc:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    9bc0:	4610      	mov	r0, r2
    9bc2:	b006      	add	sp, #24
    9bc4:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    9bc6:	f64d 6034 	movw	r0, #56884	; 0xde34
    9bca:	f2c0 0001 	movt	r0, #1
    9bce:	2210      	movs	r2, #16
    9bd0:	9901      	ldr	r1, [sp, #4]
    9bd2:	f00c ff41 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9bd6:	defe      	udf	#254	; 0xfe

00009bd8 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>:
    pub fn run(mut self, rom: &[u8]) {
    9bd8:	b580      	push	{r7, lr}
    9bda:	b086      	sub	sp, #24
    9bdc:	9104      	str	r1, [sp, #16]
    9bde:	9205      	str	r2, [sp, #20]
        self.setup();
    9be0:	9003      	str	r0, [sp, #12]
    9be2:	9202      	str	r2, [sp, #8]
    9be4:	9101      	str	r1, [sp, #4]
    9be6:	f003 ff0e 	bl	da06 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>
    9bea:	e7ff      	b.n	9bec <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x14>
        self.load(rom);
    9bec:	9803      	ldr	r0, [sp, #12]
    9bee:	9901      	ldr	r1, [sp, #4]
    9bf0:	9a02      	ldr	r2, [sp, #8]
    9bf2:	f003 fdc8 	bl	d786 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>
    9bf6:	e7ff      	b.n	9bf8 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x20>
        while self.running {
    9bf8:	e7ff      	b.n	9bfa <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    9bfa:	f241 0047 	movw	r0, #4167	; 0x1047
    9bfe:	9903      	ldr	r1, [sp, #12]
    9c00:	5c08      	ldrb	r0, [r1, r0]
    9c02:	07c0      	lsls	r0, r0, #31
    9c04:	2800      	cmp	r0, #0
    9c06:	d101      	bne.n	9c0c <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x34>
    9c08:	e7ff      	b.n	9c0a <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x32>
    }
    9c0a:	e00c      	b.n	9c26 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4e>
            self.sched();
    9c0c:	9803      	ldr	r0, [sp, #12]
    9c0e:	f003 fe84 	bl	d91a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    9c12:	e7ff      	b.n	9c14 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x3c>
            self.eval();
    9c14:	9803      	ldr	r0, [sp, #12]
    9c16:	f000 f809 	bl	9c2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>
    9c1a:	e7ff      	b.n	9c1c <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x44>
            self.next();
    9c1c:	9803      	ldr	r0, [sp, #12]
    9c1e:	f003 fded 	bl	d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    9c22:	e7ff      	b.n	9c24 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4c>
        while self.running {
    9c24:	e7e9      	b.n	9bfa <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    }
    9c26:	b006      	add	sp, #24
    9c28:	bd80      	pop	{r7, pc}
	...

00009c2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    9c2c:	b570      	push	{r4, r5, r6, lr}
    9c2e:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    9c32:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    9c36:	8a41      	ldrh	r1, [r0, #18]
    9c38:	460a      	mov	r2, r1
    9c3a:	2300      	movs	r3, #0
    9c3c:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9c40:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    9c44:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    9c48:	f043 82a9 	bne.w	d19e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3572>
    9c4c:	e7ff      	b.n	9c4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22>
    9c4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9c52:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    9c56:	1842      	adds	r2, r0, r1
    9c58:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9c5c:	4613      	mov	r3, r2
    9c5e:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    9c62:	8a42      	ldrh	r2, [r0, #18]
    9c64:	3201      	adds	r2, #1
    9c66:	fa1f fc82 	uxth.w	ip, r2
    9c6a:	4696      	mov	lr, r2
    9c6c:	4594      	cmp	ip, r2
    9c6e:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    9c72:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    9c76:	f043 829d 	bne.w	d1b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3588>
    9c7a:	e7ff      	b.n	9c7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50>
    9c7c:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    9c80:	b281      	uxth	r1, r0
    9c82:	460a      	mov	r2, r1
    9c84:	2300      	movs	r3, #0
    9c86:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9c8a:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    9c8e:	f043 829d 	bne.w	d1cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35a0>
    9c92:	e7ff      	b.n	9c94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x68>
    9c94:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9c98:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    9c9c:	1842      	adds	r2, r0, r1
    9c9e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9ca2:	4613      	mov	r3, r2
    9ca4:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    9ca8:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    9cac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    9cb0:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    9cb4:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    9cb8:	e7ff      	b.n	9cba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e>
    9cba:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    9cbe:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    9cc2:	ea40 0201 	orr.w	r2, r0, r1
    9cc6:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    9cca:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9cce:	f36f 321f 	bfc	r2, #12, #20
    9cd2:	4613      	mov	r3, r2
    9cd4:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    9cd8:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9cdc:	f002 020f 	and.w	r2, r2, #15
    9ce0:	4694      	mov	ip, r2
    9ce2:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    9ce6:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9cea:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    9cee:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    9cf2:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    9cf6:	e7ff      	b.n	9cf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcc>
    9cf8:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    9cfc:	f000 010f 	and.w	r1, r0, #15
    9d00:	460a      	mov	r2, r1
    9d02:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    9d06:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9d0a:	0909      	lsrs	r1, r1, #4
    9d0c:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    9d10:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    9d14:	e7ff      	b.n	9d16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xea>
    9d16:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    9d1a:	f000 010f 	and.w	r1, r0, #15
    9d1e:	460a      	mov	r2, r1
    9d20:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    9d24:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9d28:	b2cb      	uxtb	r3, r1
    9d2a:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    9d2e:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9d32:	0b09      	lsrs	r1, r1, #12
    9d34:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    9d38:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    9d3c:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    9d40:	e7ff      	b.n	9d42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x116>
    9d42:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    9d46:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    9d4a:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9d4e:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    9d52:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    9d56:	e7ff      	b.n	9d58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12c>
    9d58:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    9d5c:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    9d60:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9d64:	0912      	lsrs	r2, r2, #4
    9d66:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    9d6a:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    9d6e:	e7ff      	b.n	9d70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144>
    9d70:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    9d74:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    9d78:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9d7c:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    9d80:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    9d84:	e7ff      	b.n	9d86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15a>
    9d86:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    9d8a:	f000 010f 	and.w	r1, r0, #15
        match (
    9d8e:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    9d92:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    9d96:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    9d9a:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    9d9e:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    9da2:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    9da6:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    9daa:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    9dae:	468e      	mov	lr, r1
    9db0:	290f      	cmp	r1, #15
    9db2:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    9db6:	d84f      	bhi.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9db8:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    9dbc:	e8df f011 	tbh	[pc, r1, lsl #1]
    9dc0:	03010010 	.word	0x03010010
    9dc4:	042d0394 	.word	0x042d0394
    9dc8:	002c04cd 	.word	0x002c04cd
    9dcc:	06af061a 	.word	0x06af061a
    9dd0:	00750032 	.word	0x00750032
    9dd4:	0edf0e54 	.word	0x0edf0e54
    9dd8:	101e0f80 	.word	0x101e0f80
    9ddc:	0095007b 	.word	0x0095007b
    9de0:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    9de4:	2800      	cmp	r0, #0
    9de6:	f040 825c 	bne.w	a2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9dea:	e7ff      	b.n	9dec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c0>
    9dec:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9df0:	280e      	cmp	r0, #14
    9df2:	f040 8256 	bne.w	a2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9df6:	e7ff      	b.n	9df8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc>
    9df8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9dfc:	4601      	mov	r1, r0
    9dfe:	2800      	cmp	r0, #0
    9e00:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    9e04:	f000 80c0 	beq.w	9f88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35c>
    9e08:	e7ff      	b.n	9e0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de>
    9e0a:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    9e0e:	b281      	uxth	r1, r0
    9e10:	290e      	cmp	r1, #14
    9e12:	f000 81b1 	beq.w	a178 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54c>
    9e16:	e244      	b.n	a2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    9e18:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e1c:	2800      	cmp	r0, #0
    9e1e:	f000 853c 	beq.w	a89a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6e>
    9e22:	e019      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    9e24:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e28:	4601      	mov	r1, r0
    9e2a:	280e      	cmp	r0, #14
    9e2c:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    9e30:	d812      	bhi.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9e32:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    9e36:	e8df f011 	tbh	[pc, r1, lsl #1]
    9e3a:	0719      	.short	0x0719
    9e3c:	086207bb 	.word	0x086207bb
    9e40:	09b00909 	.word	0x09b00909
    9e44:	0b360a72 	.word	0x0b360a72
    9e48:	000f0beb 	.word	0x000f0beb
    9e4c:	000f000f 	.word	0x000f000f
    9e50:	000f000f 	.word	0x000f000f
    9e54:	0caf000f 	.word	0x0caf000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    9e58:	f64e 2048 	movw	r0, #59976	; 0xea48
    9e5c:	f2c0 0001 	movt	r0, #1
    9e60:	6801      	ldr	r1, [r0, #0]
    9e62:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9e66:	f100 0212 	add.w	r2, r0, #18
    9e6a:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    9e6e:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    9e72:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    9e76:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    9e7a:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    9e7e:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    9e82:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    9e86:	f248 2c47 	movw	ip, #33351	; 0x8247
    9e8a:	f2c0 0c01 	movt	ip, #1
    9e8e:	4610      	mov	r0, r2
    9e90:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    9e94:	4661      	mov	r1, ip
    9e96:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    9e9a:	f007 ff3f 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    9e9e:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    9ea2:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    9ea6:	f003 b938 	b.w	d11a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34ee>
            (9, _, _, 0) => {
    9eaa:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9eae:	2800      	cmp	r0, #0
    9eb0:	f001 852d 	beq.w	b90e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ce2>
    9eb4:	e7d0      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 9, 0xe) => {
    9eb6:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9eba:	4601      	mov	r1, r0
    9ebc:	2809      	cmp	r0, #9
    9ebe:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    9ec2:	d006      	beq.n	9ed2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6>
    9ec4:	e7ff      	b.n	9ec6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29a>
    9ec6:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    9eca:	b281      	uxth	r1, r0
    9ecc:	290a      	cmp	r1, #10
    9ece:	d006      	beq.n	9ede <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b2>
    9ed0:	e7c2      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9ed2:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ed6:	280e      	cmp	r0, #14
    9ed8:	f002 814a 	beq.w	c170 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2544>
    9edc:	e7bc      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    9ede:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ee2:	2801      	cmp	r0, #1
    9ee4:	f002 81ea 	beq.w	c2bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2690>
    9ee8:	e7b6      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 0, 7) => {
    9eea:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9eee:	4601      	mov	r1, r0
    9ef0:	2806      	cmp	r0, #6
    9ef2:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    9ef6:	d8af      	bhi.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9ef8:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    9efc:	e8df f001 	tbb	[pc, r1]
    9f00:	322c1505 	.word	0x322c1505
    9f04:	003e3804 	.word	0x003e3804
    9f08:	e7a6      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f0a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f0e:	4601      	mov	r1, r0
    9f10:	2807      	cmp	r0, #7
    9f12:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    9f16:	f002 8277 	beq.w	c408 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27dc>
    9f1a:	e7ff      	b.n	9f1c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f0>
    9f1c:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    9f20:	b281      	uxth	r1, r0
    9f22:	290a      	cmp	r1, #10
    9f24:	f002 8309 	beq.w	c53a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x290e>
    9f28:	e796      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 1, 5) => {
    9f2a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f2e:	4601      	mov	r1, r0
    9f30:	2805      	cmp	r0, #5
    9f32:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    9f36:	f002 839a 	beq.w	c66e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a42>
    9f3a:	e7ff      	b.n	9f3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x310>
    9f3c:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9f40:	b281      	uxth	r1, r0
    9f42:	2908      	cmp	r1, #8
    9f44:	f002 8428 	beq.w	c798 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b6c>
    9f48:	e7ff      	b.n	9f4a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31e>
    9f4a:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9f4e:	b281      	uxth	r1, r0
    9f50:	290e      	cmp	r1, #14
    9f52:	f002 84b6 	beq.w	c8c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c96>
    9f56:	e77f      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 2, 9) => {
    9f58:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f5c:	2809      	cmp	r0, #9
    9f5e:	f002 8554 	beq.w	ca0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dde>
    9f62:	e779      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 3, 3) => {
    9f64:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f68:	2803      	cmp	r0, #3
    9f6a:	f002 85ff 	beq.w	cb6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f40>
    9f6e:	e773      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 5, 5) => {
    9f70:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f74:	2805      	cmp	r0, #5
    9f76:	f002 8708 	beq.w	cd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x315e>
    9f7a:	e76d      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 6, 5) => {
    9f7c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f80:	2805      	cmp	r0, #5
    9f82:	f002 87e5 	beq.w	cf50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3324>
    9f86:	e767      	b.n	9e58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f88:	2005      	movs	r0, #5
    9f8a:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    9f8e:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    9f92:	f2c0 0001 	movt	r0, #1
    9f96:	6801      	ldr	r1, [r0, #0]
    9f98:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    9f9c:	f008 fda0 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    9fa0:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    9fa4:	e01f      	b.n	9fe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ba>
    9fa6:	2001      	movs	r0, #1
    9fa8:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    9fac:	e015      	b.n	9fda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    9fae:	2000      	movs	r0, #0
    9fb0:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    9fb4:	e011      	b.n	9fda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    9fb6:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    9fb8:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    9fbc:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    9fc0:	f640 2000 	movw	r0, #2560	; 0xa00
    9fc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9fc8:	f008 fd96 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    9fcc:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    9fd0:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    9fd4:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    9fd8:	e00b      	b.n	9ff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3c6>
    9fda:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    9fde:	07c0      	lsls	r0, r0, #31
    9fe0:	2800      	cmp	r0, #0
    9fe2:	d115      	bne.n	a010 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3e4>
    9fe4:	e05e      	b.n	a0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
    9fe6:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    9fea:	07c1      	lsls	r1, r0, #31
    9fec:	2900      	cmp	r1, #0
    9fee:	d1e2      	bne.n	9fb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a>
    9ff0:	e7dd      	b.n	9fae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
    9ff2:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    9ff6:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    9ffa:	f008 fd71 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    9ffe:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    a002:	e7ff      	b.n	a004 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3d8>
    a004:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    a008:	07c1      	lsls	r1, r0, #31
    a00a:	2900      	cmp	r1, #0
    a00c:	d1cb      	bne.n	9fa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37a>
    a00e:	e7ce      	b.n	9fae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    a010:	f64e 40e8 	movw	r0, #60648	; 0xece8
    a014:	f2c0 0001 	movt	r0, #1
    a018:	6801      	ldr	r1, [r0, #0]
    a01a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a01e:	f100 0212 	add.w	r2, r0, #18
    a022:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    a026:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    a02a:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    a02e:	f248 2347 	movw	r3, #33351	; 0x8247
    a032:	f2c0 0301 	movt	r3, #1
    a036:	4610      	mov	r0, r2
    a038:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    a03c:	4619      	mov	r1, r3
    a03e:	f007 fe6d 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a042:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    a046:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    a04a:	e7ff      	b.n	a04c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x420>
    a04c:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    a050:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    a054:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    a058:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    a05c:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a060:	f2c0 0201 	movt	r2, #1
    a064:	6812      	ldr	r2, [r2, #0]
    a066:	466b      	mov	r3, sp
    a068:	f04f 0c01 	mov.w	ip, #1
    a06c:	f8c3 c008 	str.w	ip, [r3, #8]
    a070:	605a      	str	r2, [r3, #4]
    a072:	f8c3 c000 	str.w	ip, [r3]
    a076:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a07a:	2202      	movs	r2, #2
    a07c:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    a080:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    a084:	f003 fef5 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a088:	e7ff      	b.n	a08a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x45e>
    a08a:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    a08e:	f64e 5008 	movw	r0, #60680	; 0xed08
    a092:	f2c0 0001 	movt	r0, #1
    a096:	6802      	ldr	r2, [r0, #0]
    a098:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a09c:	f004 feb5 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a0a0:	e7ff      	b.n	a0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x476>
    a0a2:	e7ff      	b.n	a0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
                let (w, h) = self.hw.vram_size();
    a0a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a0a8:	f7ff fc3b 	bl	9922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    a0ac:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    a0ae:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    a0b0:	e7ff      	b.n	a0b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x486>
    a0b2:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    a0b4:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    a0b8:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    a0ba:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    a0be:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a0c0:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    a0c4:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    a0c8:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    a0cc:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    a0d0:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    a0d4:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    a0d8:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    a0dc:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    a0e0:	f008 fe7d 	bl	12dde <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>
    a0e4:	e7ff      	b.n	a0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4ba>
    a0e6:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    a0ea:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    a0ee:	f003 fd90 	bl	dc12 <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>
    a0f2:	e7ff      	b.n	a0f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4c8>
    a0f4:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a0f8:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    a0fc:	f003 feaf 	bl	de5e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>
    a100:	e7ff      	b.n	a102 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4d6>
    a102:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a106:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a10a:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    a10e:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    a112:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    a116:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a11a:	e7ff      	b.n	a11c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a11c:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    a120:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a124:	f003 fdc8 	bl	dcb8 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>
    a128:	e7ff      	b.n	a12a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4fe>
    a12a:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    a12e:	2800      	cmp	r0, #0
    a130:	d001      	beq.n	a136 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50a>
    a132:	e7ff      	b.n	a134 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x508>
    a134:	e002      	b.n	a13c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x510>
        match (
    a136:	f003 b82f 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a13a:	defe      	udf	#254	; 0xfe
    a13c:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    a140:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    a144:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    a148:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    a14c:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    a150:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    a154:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    a158:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    a15c:	2300      	movs	r3, #0
                    self.hw.vram_set(x, y, false);
    a15e:	f8dd 2490 	ldr.w	r2, [sp, #1168]	; 0x490
    a162:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    a164:	4610      	mov	r0, r2
    a166:	f8dd c3f4 	ldr.w	ip, [sp, #1012]	; 0x3f4
    a16a:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    a16c:	4661      	mov	r1, ip
    a16e:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    a170:	f7ff fa1e 	bl	95b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    a174:	e7ff      	b.n	a176 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a176:	e7d1      	b.n	a11c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a178:	2005      	movs	r0, #5
    a17a:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    a17e:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a182:	f2c0 0001 	movt	r0, #1
    a186:	6801      	ldr	r1, [r0, #0]
    a188:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a18c:	f008 fca8 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a190:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    a192:	e01f      	b.n	a1d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5a8>
    a194:	2001      	movs	r0, #1
    a196:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a19a:	e015      	b.n	a1c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a19c:	2000      	movs	r0, #0
    a19e:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a1a2:	e011      	b.n	a1c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a1a4:	2000      	movs	r0, #0
    a1a6:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    a1aa:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    a1ae:	f640 2000 	movw	r0, #2560	; 0xa00
    a1b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a1b6:	f008 fc9f 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a1ba:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    a1be:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    a1c2:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    a1c6:	e00a      	b.n	a1de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5b2>
    a1c8:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    a1cc:	07c0      	lsls	r0, r0, #31
    a1ce:	2800      	cmp	r0, #0
    a1d0:	d112      	bne.n	a1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5cc>
    a1d2:	e055      	b.n	a280 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
    a1d4:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    a1d6:	07c1      	lsls	r1, r0, #31
    a1d8:	2900      	cmp	r1, #0
    a1da:	d1e3      	bne.n	a1a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x578>
    a1dc:	e7de      	b.n	a19c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
    a1de:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a1e2:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    a1e6:	f008 fc7b 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a1ea:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    a1ec:	e7ff      	b.n	a1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5c2>
    a1ee:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    a1f0:	07c1      	lsls	r1, r0, #31
    a1f2:	2900      	cmp	r1, #0
    a1f4:	d1ce      	bne.n	a194 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x568>
    a1f6:	e7d1      	b.n	a19c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
                trace!("[{:04x}] RET", self.pc);
    a1f8:	f64e 40ac 	movw	r0, #60588	; 0xecac
    a1fc:	f2c0 0001 	movt	r0, #1
    a200:	6801      	ldr	r1, [r0, #0]
    a202:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a206:	f100 0212 	add.w	r2, r0, #18
    a20a:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    a20e:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    a212:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    a216:	f248 2347 	movw	r3, #33351	; 0x8247
    a21a:	f2c0 0301 	movt	r3, #1
    a21e:	4610      	mov	r0, r2
    a220:	91f9      	str	r1, [sp, #996]	; 0x3e4
    a222:	4619      	mov	r1, r3
    a224:	f007 fd7a 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a228:	90f8      	str	r0, [sp, #992]	; 0x3e0
    a22a:	91f7      	str	r1, [sp, #988]	; 0x3dc
    a22c:	e7ff      	b.n	a22e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x602>
    a22e:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    a230:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    a234:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    a236:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    a23a:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a23e:	f2c0 0201 	movt	r2, #1
    a242:	6812      	ldr	r2, [r2, #0]
    a244:	466b      	mov	r3, sp
    a246:	f04f 0c01 	mov.w	ip, #1
    a24a:	f8c3 c008 	str.w	ip, [r3, #8]
    a24e:	605a      	str	r2, [r3, #4]
    a250:	f8c3 c000 	str.w	ip, [r3]
    a254:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a258:	2202      	movs	r2, #2
    a25a:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    a25e:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    a260:	f003 fe07 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a264:	e7ff      	b.n	a266 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x63a>
    a266:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    a26a:	f64e 40cc 	movw	r0, #60620	; 0xeccc
    a26e:	f2c0 0001 	movt	r0, #1
    a272:	6802      	ldr	r2, [r0, #0]
    a274:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a278:	f004 fdc7 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a27c:	e7ff      	b.n	a27e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x652>
    a27e:	e7ff      	b.n	a280 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
                let addr = self.pop();
    a280:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a284:	f7ff fc7d 	bl	9b82 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>
    a288:	4601      	mov	r1, r0
    a28a:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    a28e:	91f6      	str	r1, [sp, #984]	; 0x3d8
    a290:	e7ff      	b.n	a292 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x666>
                self.jump(addr);
    a292:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a296:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    a298:	f003 fa6d 	bl	d776 <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a29c:	e7ff      	b.n	a29e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x672>
        match (
    a29e:	f002 bf7b 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a2a2:	2005      	movs	r0, #5
    a2a4:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    a2a8:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a2ac:	f2c0 0001 	movt	r0, #1
    a2b0:	6801      	ldr	r1, [r0, #0]
    a2b2:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a2b6:	f008 fc13 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a2ba:	90f5      	str	r0, [sp, #980]	; 0x3d4
    a2bc:	e01f      	b.n	a2fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6d2>
    a2be:	2001      	movs	r0, #1
    a2c0:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a2c4:	e015      	b.n	a2f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a2c6:	2000      	movs	r0, #0
    a2c8:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a2cc:	e011      	b.n	a2f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a2ce:	2000      	movs	r0, #0
    a2d0:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    a2d4:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    a2d8:	f640 2000 	movw	r0, #2560	; 0xa00
    a2dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a2e0:	f008 fc0a 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a2e4:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    a2e8:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    a2ec:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    a2f0:	e00a      	b.n	a308 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6dc>
    a2f2:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    a2f6:	07c0      	lsls	r0, r0, #31
    a2f8:	2800      	cmp	r0, #0
    a2fa:	d112      	bne.n	a322 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6f6>
    a2fc:	e055      	b.n	a3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a2fe:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    a300:	07c1      	lsls	r1, r0, #31
    a302:	2900      	cmp	r1, #0
    a304:	d1e3      	bne.n	a2ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6a2>
    a306:	e7de      	b.n	a2c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
    a308:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a30c:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    a310:	f008 fbe6 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a314:	90f4      	str	r0, [sp, #976]	; 0x3d0
    a316:	e7ff      	b.n	a318 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6ec>
    a318:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    a31a:	07c1      	lsls	r1, r0, #31
    a31c:	2900      	cmp	r1, #0
    a31e:	d1ce      	bne.n	a2be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x692>
    a320:	e7d1      	b.n	a2c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
                trace!("[{:04x}] SYS nnn", self.pc);
    a322:	f64e 4050 	movw	r0, #60496	; 0xec50
    a326:	f2c0 0001 	movt	r0, #1
    a32a:	6801      	ldr	r1, [r0, #0]
    a32c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a330:	f100 0212 	add.w	r2, r0, #18
    a334:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    a338:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    a33c:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    a340:	f248 2347 	movw	r3, #33351	; 0x8247
    a344:	f2c0 0301 	movt	r3, #1
    a348:	4610      	mov	r0, r2
    a34a:	91f3      	str	r1, [sp, #972]	; 0x3cc
    a34c:	4619      	mov	r1, r3
    a34e:	f007 fce5 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a352:	90f2      	str	r0, [sp, #968]	; 0x3c8
    a354:	91f1      	str	r1, [sp, #964]	; 0x3c4
    a356:	e7ff      	b.n	a358 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x72c>
    a358:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    a35a:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    a35e:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    a360:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    a364:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a368:	f2c0 0201 	movt	r2, #1
    a36c:	6812      	ldr	r2, [r2, #0]
    a36e:	466b      	mov	r3, sp
    a370:	f04f 0c01 	mov.w	ip, #1
    a374:	f8c3 c008 	str.w	ip, [r3, #8]
    a378:	605a      	str	r2, [r3, #4]
    a37a:	f8c3 c000 	str.w	ip, [r3]
    a37e:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a382:	2202      	movs	r2, #2
    a384:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    a388:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    a38a:	f003 fd72 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a38e:	e7ff      	b.n	a390 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x764>
    a390:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    a394:	f64e 4070 	movw	r0, #60528	; 0xec70
    a398:	f2c0 0001 	movt	r0, #1
    a39c:	6802      	ldr	r2, [r0, #0]
    a39e:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a3a2:	f004 fd32 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a3a6:	e7ff      	b.n	a3a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77c>
    a3a8:	e7ff      	b.n	a3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a3aa:	f64e 4074 	movw	r0, #60532	; 0xec74
    a3ae:	f2c0 0001 	movt	r0, #1
    a3b2:	f64e 4284 	movw	r2, #60548	; 0xec84
    a3b6:	f2c0 0201 	movt	r2, #1
    a3ba:	210f      	movs	r1, #15
    a3bc:	f00c fb36 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a3c0:	defe      	udf	#254	; 0xfe
    a3c2:	2005      	movs	r0, #5
    a3c4:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    a3c8:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a3cc:	f2c0 0001 	movt	r0, #1
    a3d0:	6801      	ldr	r1, [r0, #0]
    a3d2:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a3d6:	f008 fb83 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a3da:	90f0      	str	r0, [sp, #960]	; 0x3c0
    a3dc:	e01f      	b.n	a41e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7f2>
    a3de:	2001      	movs	r0, #1
    a3e0:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a3e4:	e015      	b.n	a412 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a3e6:	2000      	movs	r0, #0
    a3e8:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a3ec:	e011      	b.n	a412 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a3ee:	2000      	movs	r0, #0
    a3f0:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    a3f4:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    a3f8:	f640 2000 	movw	r0, #2560	; 0xa00
    a3fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a400:	f008 fb7a 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a404:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    a408:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    a40c:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    a410:	e00a      	b.n	a428 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7fc>
    a412:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    a416:	07c0      	lsls	r0, r0, #31
    a418:	2800      	cmp	r0, #0
    a41a:	d112      	bne.n	a442 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x816>
    a41c:	e055      	b.n	a4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a41e:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    a420:	07c1      	lsls	r1, r0, #31
    a422:	2900      	cmp	r1, #0
    a424:	d1e3      	bne.n	a3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7c2>
    a426:	e7de      	b.n	a3e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
    a428:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a42c:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    a430:	f008 fb56 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a434:	90ef      	str	r0, [sp, #956]	; 0x3bc
    a436:	e7ff      	b.n	a438 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x80c>
    a438:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    a43a:	07c1      	lsls	r1, r0, #31
    a43c:	2900      	cmp	r1, #0
    a43e:	d1ce      	bne.n	a3de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7b2>
    a440:	e7d1      	b.n	a3e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
                trace!("[{:04x}] JP nnn", self.pc);
    a442:	f64e 4010 	movw	r0, #60432	; 0xec10
    a446:	f2c0 0001 	movt	r0, #1
    a44a:	6801      	ldr	r1, [r0, #0]
    a44c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a450:	f100 0212 	add.w	r2, r0, #18
    a454:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    a458:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    a45c:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    a460:	f248 2347 	movw	r3, #33351	; 0x8247
    a464:	f2c0 0301 	movt	r3, #1
    a468:	4610      	mov	r0, r2
    a46a:	91ee      	str	r1, [sp, #952]	; 0x3b8
    a46c:	4619      	mov	r1, r3
    a46e:	f007 fc55 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a472:	90ed      	str	r0, [sp, #948]	; 0x3b4
    a474:	91ec      	str	r1, [sp, #944]	; 0x3b0
    a476:	e7ff      	b.n	a478 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x84c>
    a478:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    a47a:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    a47e:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    a480:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    a484:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a488:	f2c0 0201 	movt	r2, #1
    a48c:	6812      	ldr	r2, [r2, #0]
    a48e:	466b      	mov	r3, sp
    a490:	f04f 0c01 	mov.w	ip, #1
    a494:	f8c3 c008 	str.w	ip, [r3, #8]
    a498:	605a      	str	r2, [r3, #4]
    a49a:	f8c3 c000 	str.w	ip, [r3]
    a49e:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a4a2:	2202      	movs	r2, #2
    a4a4:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    a4a8:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    a4aa:	f003 fce2 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a4ae:	e7ff      	b.n	a4b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x884>
    a4b0:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    a4b4:	f64e 4030 	movw	r0, #60464	; 0xec30
    a4b8:	f2c0 0001 	movt	r0, #1
    a4bc:	6802      	ldr	r2, [r0, #0]
    a4be:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a4c2:	f004 fca2 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a4c6:	e7ff      	b.n	a4c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89c>
    a4c8:	e7ff      	b.n	a4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a4ca:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a4cc:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a4d0:	f008 fbff 	bl	12cd2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a4d4:	90eb      	str	r0, [sp, #940]	; 0x3ac
    a4d6:	e7ff      	b.n	a4d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8ac>
    a4d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a4dc:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    a4de:	f003 f94a 	bl	d776 <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a4e2:	e7ff      	b.n	a4e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8b8>
        match (
    a4e4:	f002 be58 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a4e8:	2005      	movs	r0, #5
    a4ea:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    a4ee:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a4f2:	f2c0 0001 	movt	r0, #1
    a4f6:	6801      	ldr	r1, [r0, #0]
    a4f8:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a4fc:	f008 faf0 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a500:	90ea      	str	r0, [sp, #936]	; 0x3a8
    a502:	e01f      	b.n	a544 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x918>
    a504:	2001      	movs	r0, #1
    a506:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a50a:	e015      	b.n	a538 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a50c:	2000      	movs	r0, #0
    a50e:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a512:	e011      	b.n	a538 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a514:	2000      	movs	r0, #0
    a516:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    a51a:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    a51e:	f640 2000 	movw	r0, #2560	; 0xa00
    a522:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a526:	f008 fae7 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a52a:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    a52e:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    a532:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    a536:	e00a      	b.n	a54e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x922>
    a538:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    a53c:	07c0      	lsls	r0, r0, #31
    a53e:	2800      	cmp	r0, #0
    a540:	d112      	bne.n	a568 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x93c>
    a542:	e055      	b.n	a5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
    a544:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    a546:	07c1      	lsls	r1, r0, #31
    a548:	2900      	cmp	r1, #0
    a54a:	d1e3      	bne.n	a514 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e8>
    a54c:	e7de      	b.n	a50c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
    a54e:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a552:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    a556:	f008 fac3 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a55a:	90e9      	str	r0, [sp, #932]	; 0x3a4
    a55c:	e7ff      	b.n	a55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x932>
    a55e:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    a560:	07c1      	lsls	r1, r0, #31
    a562:	2900      	cmp	r1, #0
    a564:	d1ce      	bne.n	a504 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8d8>
    a566:	e7d1      	b.n	a50c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
                trace!("[{:04x}] CALL nnn", self.pc);
    a568:	f64e 30dc 	movw	r0, #60380	; 0xebdc
    a56c:	f2c0 0001 	movt	r0, #1
    a570:	6801      	ldr	r1, [r0, #0]
    a572:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a576:	f100 0212 	add.w	r2, r0, #18
    a57a:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    a57e:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    a582:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    a586:	f248 2347 	movw	r3, #33351	; 0x8247
    a58a:	f2c0 0301 	movt	r3, #1
    a58e:	4610      	mov	r0, r2
    a590:	91e8      	str	r1, [sp, #928]	; 0x3a0
    a592:	4619      	mov	r1, r3
    a594:	f007 fbc2 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a598:	90e7      	str	r0, [sp, #924]	; 0x39c
    a59a:	91e6      	str	r1, [sp, #920]	; 0x398
    a59c:	e7ff      	b.n	a59e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x972>
    a59e:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    a5a0:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    a5a4:	99e6      	ldr	r1, [sp, #920]	; 0x398
    a5a6:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    a5aa:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a5ae:	f2c0 0201 	movt	r2, #1
    a5b2:	6812      	ldr	r2, [r2, #0]
    a5b4:	466b      	mov	r3, sp
    a5b6:	f04f 0c01 	mov.w	ip, #1
    a5ba:	f8c3 c008 	str.w	ip, [r3, #8]
    a5be:	605a      	str	r2, [r3, #4]
    a5c0:	f8c3 c000 	str.w	ip, [r3]
    a5c4:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a5c8:	2202      	movs	r2, #2
    a5ca:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    a5ce:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    a5d0:	f003 fc4f 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a5d4:	e7ff      	b.n	a5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9aa>
    a5d6:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    a5da:	f64e 30fc 	movw	r0, #60412	; 0xebfc
    a5de:	f2c0 0001 	movt	r0, #1
    a5e2:	6802      	ldr	r2, [r0, #0]
    a5e4:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a5e8:	f004 fc0f 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a5ec:	e7ff      	b.n	a5ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c2>
    a5ee:	e7ff      	b.n	a5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
                self.push(self.pc);
    a5f0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a5f4:	8a41      	ldrh	r1, [r0, #18]
    a5f6:	f003 f914 	bl	d822 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>
    a5fa:	e7ff      	b.n	a5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9d0>
    a5fc:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a5fe:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a602:	f008 fb66 	bl	12cd2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a606:	90e5      	str	r0, [sp, #916]	; 0x394
    a608:	e7ff      	b.n	a60a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9de>
    a60a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a60e:	99e5      	ldr	r1, [sp, #916]	; 0x394
    a610:	f003 f8b1 	bl	d776 <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a614:	e7ff      	b.n	a616 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9ea>
        match (
    a616:	f002 bdbf 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a61a:	2005      	movs	r0, #5
    a61c:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    a620:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a624:	f2c0 0001 	movt	r0, #1
    a628:	6801      	ldr	r1, [r0, #0]
    a62a:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a62e:	f008 fa57 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a632:	90e4      	str	r0, [sp, #912]	; 0x390
    a634:	e01f      	b.n	a676 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa4a>
    a636:	2001      	movs	r0, #1
    a638:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a63c:	e015      	b.n	a66a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a63e:	2000      	movs	r0, #0
    a640:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a644:	e011      	b.n	a66a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a646:	2000      	movs	r0, #0
    a648:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    a64c:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    a650:	f640 2000 	movw	r0, #2560	; 0xa00
    a654:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a658:	f008 fa4e 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a65c:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    a660:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    a664:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    a668:	e00a      	b.n	a680 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa54>
    a66a:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    a66e:	07c0      	lsls	r0, r0, #31
    a670:	2800      	cmp	r0, #0
    a672:	d112      	bne.n	a69a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa6e>
    a674:	e055      	b.n	a722 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
    a676:	98e4      	ldr	r0, [sp, #912]	; 0x390
    a678:	07c1      	lsls	r1, r0, #31
    a67a:	2900      	cmp	r1, #0
    a67c:	d1e3      	bne.n	a646 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa1a>
    a67e:	e7de      	b.n	a63e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
    a680:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a684:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    a688:	f008 fa2a 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a68c:	90e3      	str	r0, [sp, #908]	; 0x38c
    a68e:	e7ff      	b.n	a690 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa64>
    a690:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    a692:	07c1      	lsls	r1, r0, #31
    a694:	2900      	cmp	r1, #0
    a696:	d1ce      	bne.n	a636 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa0a>
    a698:	e7d1      	b.n	a63e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
                trace!("[{:04x}] SE Vx kk", self.pc);
    a69a:	f64e 308c 	movw	r0, #60300	; 0xeb8c
    a69e:	f2c0 0001 	movt	r0, #1
    a6a2:	6801      	ldr	r1, [r0, #0]
    a6a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a6a8:	f100 0212 	add.w	r2, r0, #18
    a6ac:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    a6b0:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    a6b4:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    a6b8:	f248 2347 	movw	r3, #33351	; 0x8247
    a6bc:	f2c0 0301 	movt	r3, #1
    a6c0:	4610      	mov	r0, r2
    a6c2:	91e2      	str	r1, [sp, #904]	; 0x388
    a6c4:	4619      	mov	r1, r3
    a6c6:	f007 fb29 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a6ca:	90e1      	str	r0, [sp, #900]	; 0x384
    a6cc:	91e0      	str	r1, [sp, #896]	; 0x380
    a6ce:	e7ff      	b.n	a6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaa4>
    a6d0:	98e1      	ldr	r0, [sp, #900]	; 0x384
    a6d2:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    a6d6:	99e0      	ldr	r1, [sp, #896]	; 0x380
    a6d8:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    a6dc:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a6e0:	f2c0 0201 	movt	r2, #1
    a6e4:	6812      	ldr	r2, [r2, #0]
    a6e6:	466b      	mov	r3, sp
    a6e8:	f04f 0c01 	mov.w	ip, #1
    a6ec:	f8c3 c008 	str.w	ip, [r3, #8]
    a6f0:	605a      	str	r2, [r3, #4]
    a6f2:	f8c3 c000 	str.w	ip, [r3]
    a6f6:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a6fa:	2202      	movs	r2, #2
    a6fc:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    a700:	99e2      	ldr	r1, [sp, #904]	; 0x388
    a702:	f003 fbb6 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a706:	e7ff      	b.n	a708 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xadc>
    a708:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    a70c:	f64e 30ac 	movw	r0, #60332	; 0xebac
    a710:	f2c0 0001 	movt	r0, #1
    a714:	6802      	ldr	r2, [r0, #0]
    a716:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a71a:	f004 fb76 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a71e:	e7ff      	b.n	a720 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf4>
    a720:	e7ff      	b.n	a722 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
                if self.v[x] == kk {
    a722:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a726:	280f      	cmp	r0, #15
    a728:	f202 87ff 	bhi.w	d72a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3afe>
    a72c:	e7ff      	b.n	a72e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb02>
    a72e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a732:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a736:	1842      	adds	r2, r0, r1
    a738:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a73c:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a740:	fa5f fc83 	uxtb.w	ip, r3
    a744:	4562      	cmp	r2, ip
    a746:	d106      	bne.n	a756 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
    a748:	e7ff      	b.n	a74a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb1e>
                    self.next();
    a74a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a74e:	f003 f855 	bl	d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a752:	e7ff      	b.n	a754 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb28>
                if self.v[x] == kk {
    a754:	e7ff      	b.n	a756 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
        match (
    a756:	f002 bd1f 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a75a:	2005      	movs	r0, #5
    a75c:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    a760:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a764:	f2c0 0001 	movt	r0, #1
    a768:	6801      	ldr	r1, [r0, #0]
    a76a:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a76e:	f008 f9b7 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a772:	90df      	str	r0, [sp, #892]	; 0x37c
    a774:	e01f      	b.n	a7b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb8a>
    a776:	2001      	movs	r0, #1
    a778:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a77c:	e015      	b.n	a7aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a77e:	2000      	movs	r0, #0
    a780:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a784:	e011      	b.n	a7aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a786:	2000      	movs	r0, #0
    a788:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    a78c:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    a790:	f640 2000 	movw	r0, #2560	; 0xa00
    a794:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a798:	f008 f9ae 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a79c:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    a7a0:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    a7a4:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    a7a8:	e00a      	b.n	a7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb94>
    a7aa:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    a7ae:	07c0      	lsls	r0, r0, #31
    a7b0:	2800      	cmp	r0, #0
    a7b2:	d112      	bne.n	a7da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbae>
    a7b4:	e055      	b.n	a862 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
    a7b6:	98df      	ldr	r0, [sp, #892]	; 0x37c
    a7b8:	07c1      	lsls	r1, r0, #31
    a7ba:	2900      	cmp	r1, #0
    a7bc:	d1e3      	bne.n	a786 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb5a>
    a7be:	e7de      	b.n	a77e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
    a7c0:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a7c4:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    a7c8:	f008 f98a 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a7cc:	90de      	str	r0, [sp, #888]	; 0x378
    a7ce:	e7ff      	b.n	a7d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xba4>
    a7d0:	98de      	ldr	r0, [sp, #888]	; 0x378
    a7d2:	07c1      	lsls	r1, r0, #31
    a7d4:	2900      	cmp	r1, #0
    a7d6:	d1ce      	bne.n	a776 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb4a>
    a7d8:	e7d1      	b.n	a77e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    a7da:	f64e 303c 	movw	r0, #60220	; 0xeb3c
    a7de:	f2c0 0001 	movt	r0, #1
    a7e2:	6801      	ldr	r1, [r0, #0]
    a7e4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a7e8:	f100 0212 	add.w	r2, r0, #18
    a7ec:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    a7f0:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    a7f4:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    a7f8:	f248 2347 	movw	r3, #33351	; 0x8247
    a7fc:	f2c0 0301 	movt	r3, #1
    a800:	4610      	mov	r0, r2
    a802:	91dd      	str	r1, [sp, #884]	; 0x374
    a804:	4619      	mov	r1, r3
    a806:	f007 fa89 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a80a:	90dc      	str	r0, [sp, #880]	; 0x370
    a80c:	91db      	str	r1, [sp, #876]	; 0x36c
    a80e:	e7ff      	b.n	a810 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbe4>
    a810:	98dc      	ldr	r0, [sp, #880]	; 0x370
    a812:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    a816:	99db      	ldr	r1, [sp, #876]	; 0x36c
    a818:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    a81c:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a820:	f2c0 0201 	movt	r2, #1
    a824:	6812      	ldr	r2, [r2, #0]
    a826:	466b      	mov	r3, sp
    a828:	f04f 0c01 	mov.w	ip, #1
    a82c:	f8c3 c008 	str.w	ip, [r3, #8]
    a830:	605a      	str	r2, [r3, #4]
    a832:	f8c3 c000 	str.w	ip, [r3]
    a836:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a83a:	2202      	movs	r2, #2
    a83c:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    a840:	99dd      	ldr	r1, [sp, #884]	; 0x374
    a842:	f003 fb16 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a846:	e7ff      	b.n	a848 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc1c>
    a848:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    a84c:	f64e 305c 	movw	r0, #60252	; 0xeb5c
    a850:	f2c0 0001 	movt	r0, #1
    a854:	6802      	ldr	r2, [r0, #0]
    a856:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a85a:	f004 fad6 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a85e:	e7ff      	b.n	a860 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc34>
    a860:	e7ff      	b.n	a862 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
                if self.v[x] != kk {
    a862:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a866:	280f      	cmp	r0, #15
    a868:	f202 8755 	bhi.w	d716 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aea>
    a86c:	e7ff      	b.n	a86e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc42>
    a86e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a872:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a876:	1842      	adds	r2, r0, r1
    a878:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a87c:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a880:	fa5f fc83 	uxtb.w	ip, r3
    a884:	4562      	cmp	r2, ip
    a886:	d006      	beq.n	a896 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
    a888:	e7ff      	b.n	a88a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc5e>
                    self.next();
    a88a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a88e:	f002 ffb5 	bl	d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a892:	e7ff      	b.n	a894 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc68>
                if self.v[x] != kk {
    a894:	e7ff      	b.n	a896 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
        match (
    a896:	f002 bc7f 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a89a:	2005      	movs	r0, #5
    a89c:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    a8a0:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a8a4:	f2c0 0001 	movt	r0, #1
    a8a8:	6801      	ldr	r1, [r0, #0]
    a8aa:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a8ae:	f008 f917 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a8b2:	90da      	str	r0, [sp, #872]	; 0x368
    a8b4:	e01f      	b.n	a8f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcca>
    a8b6:	2001      	movs	r0, #1
    a8b8:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a8bc:	e015      	b.n	a8ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a8be:	2000      	movs	r0, #0
    a8c0:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a8c4:	e011      	b.n	a8ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a8c6:	2000      	movs	r0, #0
    a8c8:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    a8cc:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    a8d0:	f640 2000 	movw	r0, #2560	; 0xa00
    a8d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a8d8:	f008 f90e 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a8dc:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    a8e0:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    a8e4:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    a8e8:	e00a      	b.n	a900 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcd4>
    a8ea:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    a8ee:	07c0      	lsls	r0, r0, #31
    a8f0:	2800      	cmp	r0, #0
    a8f2:	d112      	bne.n	a91a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcee>
    a8f4:	e055      	b.n	a9a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
    a8f6:	98da      	ldr	r0, [sp, #872]	; 0x368
    a8f8:	07c1      	lsls	r1, r0, #31
    a8fa:	2900      	cmp	r1, #0
    a8fc:	d1e3      	bne.n	a8c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc9a>
    a8fe:	e7de      	b.n	a8be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
    a900:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a904:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    a908:	f008 f8ea 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a90c:	90d9      	str	r0, [sp, #868]	; 0x364
    a90e:	e7ff      	b.n	a910 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xce4>
    a910:	98d9      	ldr	r0, [sp, #868]	; 0x364
    a912:	07c1      	lsls	r1, r0, #31
    a914:	2900      	cmp	r1, #0
    a916:	d1ce      	bne.n	a8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc8a>
    a918:	e7d1      	b.n	a8be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    a91a:	f64e 20dc 	movw	r0, #60124	; 0xeadc
    a91e:	f2c0 0001 	movt	r0, #1
    a922:	6801      	ldr	r1, [r0, #0]
    a924:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a928:	f100 0212 	add.w	r2, r0, #18
    a92c:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    a930:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    a934:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    a938:	f248 2347 	movw	r3, #33351	; 0x8247
    a93c:	f2c0 0301 	movt	r3, #1
    a940:	4610      	mov	r0, r2
    a942:	91d8      	str	r1, [sp, #864]	; 0x360
    a944:	4619      	mov	r1, r3
    a946:	f007 f9e9 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a94a:	90d7      	str	r0, [sp, #860]	; 0x35c
    a94c:	91d6      	str	r1, [sp, #856]	; 0x358
    a94e:	e7ff      	b.n	a950 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd24>
    a950:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    a952:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    a956:	99d6      	ldr	r1, [sp, #856]	; 0x358
    a958:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    a95c:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    a960:	f2c0 0201 	movt	r2, #1
    a964:	6812      	ldr	r2, [r2, #0]
    a966:	466b      	mov	r3, sp
    a968:	f04f 0c01 	mov.w	ip, #1
    a96c:	f8c3 c008 	str.w	ip, [r3, #8]
    a970:	605a      	str	r2, [r3, #4]
    a972:	f8c3 c000 	str.w	ip, [r3]
    a976:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    a97a:	2202      	movs	r2, #2
    a97c:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    a980:	99d8      	ldr	r1, [sp, #864]	; 0x360
    a982:	f003 fa76 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a986:	e7ff      	b.n	a988 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd5c>
    a988:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    a98c:	f64e 20fc 	movw	r0, #60156	; 0xeafc
    a990:	f2c0 0001 	movt	r0, #1
    a994:	6802      	ldr	r2, [r0, #0]
    a996:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    a99a:	f004 fa36 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a99e:	e7ff      	b.n	a9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd74>
    a9a0:	e7ff      	b.n	a9a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
                if self.v[x] == self.v[y] {
    a9a2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a9a6:	280f      	cmp	r0, #15
    a9a8:	f202 86a1 	bhi.w	d6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ac2>
    a9ac:	e7ff      	b.n	a9ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd82>
    a9ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a9b6:	1842      	adds	r2, r0, r1
    a9b8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a9bc:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    a9c0:	2b0f      	cmp	r3, #15
    a9c2:	92d5      	str	r2, [sp, #852]	; 0x354
    a9c4:	f202 869d 	bhi.w	d702 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ad6>
    a9c8:	e7ff      	b.n	a9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd9e>
    a9ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9ce:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    a9d2:	1842      	adds	r2, r0, r1
    a9d4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a9d8:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    a9da:	fa5f fc83 	uxtb.w	ip, r3
    a9de:	4594      	cmp	ip, r2
    a9e0:	d106      	bne.n	a9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
    a9e2:	e7ff      	b.n	a9e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdb8>
                    self.next();
    a9e4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9e8:	f002 ff08 	bl	d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a9ec:	e7ff      	b.n	a9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc2>
                if self.v[x] == self.v[y] {
    a9ee:	e7ff      	b.n	a9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
        match (
    a9f0:	f002 bbd2 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a9f4:	2005      	movs	r0, #5
    a9f6:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    a9fa:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    a9fe:	f2c0 0001 	movt	r0, #1
    aa02:	6801      	ldr	r1, [r0, #0]
    aa04:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    aa08:	f008 f86a 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aa0c:	90d4      	str	r0, [sp, #848]	; 0x350
    aa0e:	e01f      	b.n	aa50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe24>
    aa10:	2001      	movs	r0, #1
    aa12:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    aa16:	e015      	b.n	aa44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    aa18:	2000      	movs	r0, #0
    aa1a:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    aa1e:	e011      	b.n	aa44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    aa20:	2000      	movs	r0, #0
    aa22:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    aa26:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    aa2a:	f640 2000 	movw	r0, #2560	; 0xa00
    aa2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aa32:	f008 f861 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    aa36:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    aa3a:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    aa3e:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    aa42:	e00a      	b.n	aa5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe2e>
    aa44:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    aa48:	07c0      	lsls	r0, r0, #31
    aa4a:	2800      	cmp	r0, #0
    aa4c:	d112      	bne.n	aa74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe48>
    aa4e:	e055      	b.n	aafc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
    aa50:	98d4      	ldr	r0, [sp, #848]	; 0x350
    aa52:	07c1      	lsls	r1, r0, #31
    aa54:	2900      	cmp	r1, #0
    aa56:	d1e3      	bne.n	aa20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdf4>
    aa58:	e7de      	b.n	aa18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
    aa5a:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    aa5e:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    aa62:	f008 f83d 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aa66:	90d3      	str	r0, [sp, #844]	; 0x34c
    aa68:	e7ff      	b.n	aa6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe3e>
    aa6a:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    aa6c:	07c1      	lsls	r1, r0, #31
    aa6e:	2900      	cmp	r1, #0
    aa70:	d1ce      	bne.n	aa10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xde4>
    aa72:	e7d1      	b.n	aa18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    aa74:	f64e 10f4 	movw	r0, #59892	; 0xe9f4
    aa78:	f2c0 0001 	movt	r0, #1
    aa7c:	6801      	ldr	r1, [r0, #0]
    aa7e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aa82:	f100 0212 	add.w	r2, r0, #18
    aa86:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    aa8a:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    aa8e:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    aa92:	f248 2347 	movw	r3, #33351	; 0x8247
    aa96:	f2c0 0301 	movt	r3, #1
    aa9a:	4610      	mov	r0, r2
    aa9c:	91d2      	str	r1, [sp, #840]	; 0x348
    aa9e:	4619      	mov	r1, r3
    aaa0:	f007 f93c 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    aaa4:	90d1      	str	r0, [sp, #836]	; 0x344
    aaa6:	91d0      	str	r1, [sp, #832]	; 0x340
    aaa8:	e7ff      	b.n	aaaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe7e>
    aaaa:	98d1      	ldr	r0, [sp, #836]	; 0x344
    aaac:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    aab0:	99d0      	ldr	r1, [sp, #832]	; 0x340
    aab2:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    aab6:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    aaba:	f2c0 0201 	movt	r2, #1
    aabe:	6812      	ldr	r2, [r2, #0]
    aac0:	466b      	mov	r3, sp
    aac2:	f04f 0c01 	mov.w	ip, #1
    aac6:	f8c3 c008 	str.w	ip, [r3, #8]
    aaca:	605a      	str	r2, [r3, #4]
    aacc:	f8c3 c000 	str.w	ip, [r3]
    aad0:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    aad4:	2202      	movs	r2, #2
    aad6:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    aada:	99d2      	ldr	r1, [sp, #840]	; 0x348
    aadc:	f003 f9c9 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    aae0:	e7ff      	b.n	aae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xeb6>
    aae2:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    aae6:	f64e 2014 	movw	r0, #59924	; 0xea14
    aaea:	f2c0 0001 	movt	r0, #1
    aaee:	6802      	ldr	r2, [r0, #0]
    aaf0:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    aaf4:	f004 f989 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    aaf8:	e7ff      	b.n	aafa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xece>
    aafa:	e7ff      	b.n	aafc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
                self.v[x] = kk;
    aafc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ab00:	280f      	cmp	r0, #15
    ab02:	f202 85ea 	bhi.w	d6da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aae>
    ab06:	e7ff      	b.n	ab08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xedc>
    ab08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ab0c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ab10:	1842      	adds	r2, r0, r1
    ab12:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    ab16:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ab1a:	f002 bb3d 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ab1e:	2005      	movs	r0, #5
    ab20:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    ab24:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    ab28:	f2c0 0001 	movt	r0, #1
    ab2c:	6801      	ldr	r1, [r0, #0]
    ab2e:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    ab32:	f007 ffd5 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ab36:	90cf      	str	r0, [sp, #828]	; 0x33c
    ab38:	e01f      	b.n	ab7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf4e>
    ab3a:	2001      	movs	r0, #1
    ab3c:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    ab40:	e015      	b.n	ab6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    ab42:	2000      	movs	r0, #0
    ab44:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    ab48:	e011      	b.n	ab6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    ab4a:	2000      	movs	r0, #0
    ab4c:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    ab50:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    ab54:	f640 2000 	movw	r0, #2560	; 0xa00
    ab58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab5c:	f007 ffcc 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ab60:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    ab64:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    ab68:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    ab6c:	e00a      	b.n	ab84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf58>
    ab6e:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    ab72:	07c0      	lsls	r0, r0, #31
    ab74:	2800      	cmp	r0, #0
    ab76:	d112      	bne.n	ab9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf72>
    ab78:	e055      	b.n	ac26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
    ab7a:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    ab7c:	07c1      	lsls	r1, r0, #31
    ab7e:	2900      	cmp	r1, #0
    ab80:	d1e3      	bne.n	ab4a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf1e>
    ab82:	e7de      	b.n	ab42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
    ab84:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    ab88:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    ab8c:	f007 ffa8 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ab90:	90ce      	str	r0, [sp, #824]	; 0x338
    ab92:	e7ff      	b.n	ab94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf68>
    ab94:	98ce      	ldr	r0, [sp, #824]	; 0x338
    ab96:	07c1      	lsls	r1, r0, #31
    ab98:	2900      	cmp	r1, #0
    ab9a:	d1ce      	bne.n	ab3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf0e>
    ab9c:	e7d1      	b.n	ab42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    ab9e:	f64e 1094 	movw	r0, #59796	; 0xe994
    aba2:	f2c0 0001 	movt	r0, #1
    aba6:	6801      	ldr	r1, [r0, #0]
    aba8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    abac:	f100 0212 	add.w	r2, r0, #18
    abb0:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    abb4:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    abb8:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    abbc:	f248 2347 	movw	r3, #33351	; 0x8247
    abc0:	f2c0 0301 	movt	r3, #1
    abc4:	4610      	mov	r0, r2
    abc6:	91cd      	str	r1, [sp, #820]	; 0x334
    abc8:	4619      	mov	r1, r3
    abca:	f007 f8a7 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    abce:	90cc      	str	r0, [sp, #816]	; 0x330
    abd0:	91cb      	str	r1, [sp, #812]	; 0x32c
    abd2:	e7ff      	b.n	abd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfa8>
    abd4:	98cc      	ldr	r0, [sp, #816]	; 0x330
    abd6:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    abda:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    abdc:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    abe0:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    abe4:	f2c0 0201 	movt	r2, #1
    abe8:	6812      	ldr	r2, [r2, #0]
    abea:	466b      	mov	r3, sp
    abec:	f04f 0c01 	mov.w	ip, #1
    abf0:	f8c3 c008 	str.w	ip, [r3, #8]
    abf4:	605a      	str	r2, [r3, #4]
    abf6:	f8c3 c000 	str.w	ip, [r3]
    abfa:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    abfe:	2202      	movs	r2, #2
    ac00:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    ac04:	99cd      	ldr	r1, [sp, #820]	; 0x334
    ac06:	f003 f934 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ac0a:	e7ff      	b.n	ac0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfe0>
    ac0c:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    ac10:	f64e 10b4 	movw	r0, #59828	; 0xe9b4
    ac14:	f2c0 0001 	movt	r0, #1
    ac18:	6802      	ldr	r2, [r0, #0]
    ac1a:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    ac1e:	f004 f8f4 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ac22:	e7ff      	b.n	ac24 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xff8>
    ac24:	e7ff      	b.n	ac26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
                self.v[x] = self.v[x].wrapping_add(kk);
    ac26:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ac2a:	280f      	cmp	r0, #15
    ac2c:	f202 8541 	bhi.w	d6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a86>
    ac30:	e7ff      	b.n	ac32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1006>
    ac32:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ac36:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ac3a:	1842      	adds	r2, r0, r1
    ac3c:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ac40:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    ac44:	f007 ff97 	bl	12b76 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    ac48:	90ca      	str	r0, [sp, #808]	; 0x328
    ac4a:	e7ff      	b.n	ac4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1020>
    ac4c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ac50:	280f      	cmp	r0, #15
    ac52:	f202 8538 	bhi.w	d6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a9a>
    ac56:	e7ff      	b.n	ac58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x102c>
    ac58:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ac5c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ac60:	1842      	adds	r2, r0, r1
    ac62:	9bca      	ldr	r3, [sp, #808]	; 0x328
    ac64:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ac68:	f002 ba96 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ac6c:	2005      	movs	r0, #5
    ac6e:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    ac72:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    ac76:	f2c0 0001 	movt	r0, #1
    ac7a:	6801      	ldr	r1, [r0, #0]
    ac7c:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    ac80:	f007 ff2e 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ac84:	90c9      	str	r0, [sp, #804]	; 0x324
    ac86:	e01f      	b.n	acc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x109c>
    ac88:	2001      	movs	r0, #1
    ac8a:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ac8e:	e015      	b.n	acbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ac90:	2000      	movs	r0, #0
    ac92:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ac96:	e011      	b.n	acbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ac98:	2000      	movs	r0, #0
    ac9a:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    ac9e:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    aca2:	f640 2000 	movw	r0, #2560	; 0xa00
    aca6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    acaa:	f007 ff25 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    acae:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    acb2:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    acb6:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    acba:	e00a      	b.n	acd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10a6>
    acbc:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    acc0:	07c0      	lsls	r0, r0, #31
    acc2:	2800      	cmp	r0, #0
    acc4:	d112      	bne.n	acec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10c0>
    acc6:	e055      	b.n	ad74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
    acc8:	98c9      	ldr	r0, [sp, #804]	; 0x324
    acca:	07c1      	lsls	r1, r0, #31
    accc:	2900      	cmp	r1, #0
    acce:	d1e3      	bne.n	ac98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x106c>
    acd0:	e7de      	b.n	ac90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
    acd2:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    acd6:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    acda:	f007 ff01 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    acde:	90c8      	str	r0, [sp, #800]	; 0x320
    ace0:	e7ff      	b.n	ace2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10b6>
    ace2:	98c8      	ldr	r0, [sp, #800]	; 0x320
    ace4:	07c1      	lsls	r1, r0, #31
    ace6:	2900      	cmp	r1, #0
    ace8:	d1ce      	bne.n	ac88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x105c>
    acea:	e7d1      	b.n	ac90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    acec:	f64e 1034 	movw	r0, #59700	; 0xe934
    acf0:	f2c0 0001 	movt	r0, #1
    acf4:	6801      	ldr	r1, [r0, #0]
    acf6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    acfa:	f100 0212 	add.w	r2, r0, #18
    acfe:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    ad02:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    ad06:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    ad0a:	f248 2347 	movw	r3, #33351	; 0x8247
    ad0e:	f2c0 0301 	movt	r3, #1
    ad12:	4610      	mov	r0, r2
    ad14:	91c7      	str	r1, [sp, #796]	; 0x31c
    ad16:	4619      	mov	r1, r3
    ad18:	f007 f800 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ad1c:	90c6      	str	r0, [sp, #792]	; 0x318
    ad1e:	91c5      	str	r1, [sp, #788]	; 0x314
    ad20:	e7ff      	b.n	ad22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10f6>
    ad22:	98c6      	ldr	r0, [sp, #792]	; 0x318
    ad24:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    ad28:	99c5      	ldr	r1, [sp, #788]	; 0x314
    ad2a:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    ad2e:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    ad32:	f2c0 0201 	movt	r2, #1
    ad36:	6812      	ldr	r2, [r2, #0]
    ad38:	466b      	mov	r3, sp
    ad3a:	f04f 0c01 	mov.w	ip, #1
    ad3e:	f8c3 c008 	str.w	ip, [r3, #8]
    ad42:	605a      	str	r2, [r3, #4]
    ad44:	f8c3 c000 	str.w	ip, [r3]
    ad48:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ad4c:	2202      	movs	r2, #2
    ad4e:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    ad52:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    ad54:	f003 f88d 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ad58:	e7ff      	b.n	ad5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x112e>
    ad5a:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    ad5e:	f64e 1054 	movw	r0, #59732	; 0xe954
    ad62:	f2c0 0001 	movt	r0, #1
    ad66:	6802      	ldr	r2, [r0, #0]
    ad68:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ad6c:	f004 f84d 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ad70:	e7ff      	b.n	ad72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1146>
    ad72:	e7ff      	b.n	ad74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
                self.v[x] = self.v[y];
    ad74:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ad78:	280f      	cmp	r0, #15
    ad7a:	f202 8486 	bhi.w	d68a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a5e>
    ad7e:	e7ff      	b.n	ad80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1154>
    ad80:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ad84:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ad88:	1842      	adds	r2, r0, r1
    ad8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ad8e:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ad92:	2b0f      	cmp	r3, #15
    ad94:	92c4      	str	r2, [sp, #784]	; 0x310
    ad96:	f202 8482 	bhi.w	d69e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a72>
    ad9a:	e7ff      	b.n	ad9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1170>
    ad9c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ada0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ada4:	1842      	adds	r2, r0, r1
    ada6:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    ada8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    adac:	f002 b9f4 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    adb0:	2005      	movs	r0, #5
    adb2:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    adb6:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    adba:	f2c0 0001 	movt	r0, #1
    adbe:	6801      	ldr	r1, [r0, #0]
    adc0:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    adc4:	f007 fe8c 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    adc8:	90c3      	str	r0, [sp, #780]	; 0x30c
    adca:	e01f      	b.n	ae0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11e0>
    adcc:	2001      	movs	r0, #1
    adce:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    add2:	e015      	b.n	ae00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    add4:	2000      	movs	r0, #0
    add6:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    adda:	e011      	b.n	ae00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    addc:	2000      	movs	r0, #0
    adde:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    ade2:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    ade6:	f640 2000 	movw	r0, #2560	; 0xa00
    adea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    adee:	f007 fe83 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    adf2:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    adf6:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    adfa:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    adfe:	e00a      	b.n	ae16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11ea>
    ae00:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    ae04:	07c0      	lsls	r0, r0, #31
    ae06:	2800      	cmp	r0, #0
    ae08:	d112      	bne.n	ae30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1204>
    ae0a:	e055      	b.n	aeb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
    ae0c:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    ae0e:	07c1      	lsls	r1, r0, #31
    ae10:	2900      	cmp	r1, #0
    ae12:	d1e3      	bne.n	addc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11b0>
    ae14:	e7de      	b.n	add4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
    ae16:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    ae1a:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    ae1e:	f007 fe5f 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ae22:	90c2      	str	r0, [sp, #776]	; 0x308
    ae24:	e7ff      	b.n	ae26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11fa>
    ae26:	98c2      	ldr	r0, [sp, #776]	; 0x308
    ae28:	07c1      	lsls	r1, r0, #31
    ae2a:	2900      	cmp	r1, #0
    ae2c:	d1ce      	bne.n	adcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a0>
    ae2e:	e7d1      	b.n	add4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    ae30:	f64e 00d4 	movw	r0, #59604	; 0xe8d4
    ae34:	f2c0 0001 	movt	r0, #1
    ae38:	6801      	ldr	r1, [r0, #0]
    ae3a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae3e:	f100 0212 	add.w	r2, r0, #18
    ae42:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    ae46:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    ae4a:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    ae4e:	f248 2347 	movw	r3, #33351	; 0x8247
    ae52:	f2c0 0301 	movt	r3, #1
    ae56:	4610      	mov	r0, r2
    ae58:	91c1      	str	r1, [sp, #772]	; 0x304
    ae5a:	4619      	mov	r1, r3
    ae5c:	f006 ff5e 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ae60:	90c0      	str	r0, [sp, #768]	; 0x300
    ae62:	91bf      	str	r1, [sp, #764]	; 0x2fc
    ae64:	e7ff      	b.n	ae66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x123a>
    ae66:	98c0      	ldr	r0, [sp, #768]	; 0x300
    ae68:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    ae6c:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    ae6e:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    ae72:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    ae76:	f2c0 0201 	movt	r2, #1
    ae7a:	6812      	ldr	r2, [r2, #0]
    ae7c:	466b      	mov	r3, sp
    ae7e:	f04f 0c01 	mov.w	ip, #1
    ae82:	f8c3 c008 	str.w	ip, [r3, #8]
    ae86:	605a      	str	r2, [r3, #4]
    ae88:	f8c3 c000 	str.w	ip, [r3]
    ae8c:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    ae90:	2202      	movs	r2, #2
    ae92:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    ae96:	99c1      	ldr	r1, [sp, #772]	; 0x304
    ae98:	f002 ffeb 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ae9c:	e7ff      	b.n	ae9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1272>
    ae9e:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    aea2:	f64e 00f4 	movw	r0, #59636	; 0xe8f4
    aea6:	f2c0 0001 	movt	r0, #1
    aeaa:	6802      	ldr	r2, [r0, #0]
    aeac:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    aeb0:	f003 ffab 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    aeb4:	e7ff      	b.n	aeb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128a>
    aeb6:	e7ff      	b.n	aeb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
                self.v[x] |= self.v[y];
    aeb8:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    aebc:	280f      	cmp	r0, #15
    aebe:	f202 83d0 	bhi.w	d662 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a36>
    aec2:	e7ff      	b.n	aec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1298>
    aec4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aec8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    aecc:	1842      	adds	r2, r0, r1
    aece:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    aed2:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    aed6:	2b0f      	cmp	r3, #15
    aed8:	92be      	str	r2, [sp, #760]	; 0x2f8
    aeda:	f202 83cc 	bhi.w	d676 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a4a>
    aede:	e7ff      	b.n	aee0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12b4>
    aee0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aee4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    aee8:	1842      	adds	r2, r0, r1
    aeea:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    aeee:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    aef2:	ea43 030c 	orr.w	r3, r3, ip
    aef6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    aefa:	f002 b94d 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    aefe:	2005      	movs	r0, #5
    af00:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    af04:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    af08:	f2c0 0001 	movt	r0, #1
    af0c:	6801      	ldr	r1, [r0, #0]
    af0e:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    af12:	f007 fde5 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    af16:	90bd      	str	r0, [sp, #756]	; 0x2f4
    af18:	e01f      	b.n	af5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x132e>
    af1a:	2001      	movs	r0, #1
    af1c:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    af20:	e015      	b.n	af4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    af22:	2000      	movs	r0, #0
    af24:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    af28:	e011      	b.n	af4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    af2a:	2000      	movs	r0, #0
    af2c:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    af30:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    af34:	f640 2000 	movw	r0, #2560	; 0xa00
    af38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af3c:	f007 fddc 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    af40:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    af44:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    af48:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    af4c:	e00a      	b.n	af64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1338>
    af4e:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    af52:	07c0      	lsls	r0, r0, #31
    af54:	2800      	cmp	r0, #0
    af56:	d112      	bne.n	af7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1352>
    af58:	e055      	b.n	b006 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
    af5a:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    af5c:	07c1      	lsls	r1, r0, #31
    af5e:	2900      	cmp	r1, #0
    af60:	d1e3      	bne.n	af2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12fe>
    af62:	e7de      	b.n	af22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
    af64:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    af68:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    af6c:	f007 fdb8 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    af70:	90bc      	str	r0, [sp, #752]	; 0x2f0
    af72:	e7ff      	b.n	af74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1348>
    af74:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    af76:	07c1      	lsls	r1, r0, #31
    af78:	2900      	cmp	r1, #0
    af7a:	d1ce      	bne.n	af1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12ee>
    af7c:	e7d1      	b.n	af22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    af7e:	f64e 0074 	movw	r0, #59508	; 0xe874
    af82:	f2c0 0001 	movt	r0, #1
    af86:	6801      	ldr	r1, [r0, #0]
    af88:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    af8c:	f100 0212 	add.w	r2, r0, #18
    af90:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    af94:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    af98:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    af9c:	f248 2347 	movw	r3, #33351	; 0x8247
    afa0:	f2c0 0301 	movt	r3, #1
    afa4:	4610      	mov	r0, r2
    afa6:	91bb      	str	r1, [sp, #748]	; 0x2ec
    afa8:	4619      	mov	r1, r3
    afaa:	f006 feb7 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    afae:	90ba      	str	r0, [sp, #744]	; 0x2e8
    afb0:	91b9      	str	r1, [sp, #740]	; 0x2e4
    afb2:	e7ff      	b.n	afb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1388>
    afb4:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    afb6:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    afba:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    afbc:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    afc0:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    afc4:	f2c0 0201 	movt	r2, #1
    afc8:	6812      	ldr	r2, [r2, #0]
    afca:	466b      	mov	r3, sp
    afcc:	f04f 0c01 	mov.w	ip, #1
    afd0:	f8c3 c008 	str.w	ip, [r3, #8]
    afd4:	605a      	str	r2, [r3, #4]
    afd6:	f8c3 c000 	str.w	ip, [r3]
    afda:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    afde:	2202      	movs	r2, #2
    afe0:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    afe4:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    afe6:	f002 ff44 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    afea:	e7ff      	b.n	afec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13c0>
    afec:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    aff0:	f64e 0094 	movw	r0, #59540	; 0xe894
    aff4:	f2c0 0001 	movt	r0, #1
    aff8:	6802      	ldr	r2, [r0, #0]
    affa:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    affe:	f003 ff04 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b002:	e7ff      	b.n	b004 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13d8>
    b004:	e7ff      	b.n	b006 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
                self.v[x] &= self.v[y];
    b006:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b00a:	280f      	cmp	r0, #15
    b00c:	f202 8315 	bhi.w	d63a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a0e>
    b010:	e7ff      	b.n	b012 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13e6>
    b012:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b016:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b01a:	1842      	adds	r2, r0, r1
    b01c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b020:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b024:	2b0f      	cmp	r3, #15
    b026:	92b8      	str	r2, [sp, #736]	; 0x2e0
    b028:	f202 8311 	bhi.w	d64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a22>
    b02c:	e7ff      	b.n	b02e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1402>
    b02e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b032:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b036:	1842      	adds	r2, r0, r1
    b038:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b03c:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    b040:	ea03 030c 	and.w	r3, r3, ip
    b044:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b048:	f002 b8a6 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b04c:	2005      	movs	r0, #5
    b04e:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    b052:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    b056:	f2c0 0001 	movt	r0, #1
    b05a:	6801      	ldr	r1, [r0, #0]
    b05c:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b060:	f007 fd3e 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b064:	90b7      	str	r0, [sp, #732]	; 0x2dc
    b066:	e01f      	b.n	b0a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x147c>
    b068:	2001      	movs	r0, #1
    b06a:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b06e:	e015      	b.n	b09c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b070:	2000      	movs	r0, #0
    b072:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b076:	e011      	b.n	b09c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b078:	2000      	movs	r0, #0
    b07a:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    b07e:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    b082:	f640 2000 	movw	r0, #2560	; 0xa00
    b086:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b08a:	f007 fd35 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b08e:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    b092:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    b096:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    b09a:	e00a      	b.n	b0b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1486>
    b09c:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    b0a0:	07c0      	lsls	r0, r0, #31
    b0a2:	2800      	cmp	r0, #0
    b0a4:	d112      	bne.n	b0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14a0>
    b0a6:	e055      	b.n	b154 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
    b0a8:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    b0aa:	07c1      	lsls	r1, r0, #31
    b0ac:	2900      	cmp	r1, #0
    b0ae:	d1e3      	bne.n	b078 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144c>
    b0b0:	e7de      	b.n	b070 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
    b0b2:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b0b6:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    b0ba:	f007 fd11 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b0be:	90b6      	str	r0, [sp, #728]	; 0x2d8
    b0c0:	e7ff      	b.n	b0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1496>
    b0c2:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    b0c4:	07c1      	lsls	r1, r0, #31
    b0c6:	2900      	cmp	r1, #0
    b0c8:	d1ce      	bne.n	b068 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x143c>
    b0ca:	e7d1      	b.n	b070 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    b0cc:	f64e 0014 	movw	r0, #59412	; 0xe814
    b0d0:	f2c0 0001 	movt	r0, #1
    b0d4:	6801      	ldr	r1, [r0, #0]
    b0d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b0da:	f100 0212 	add.w	r2, r0, #18
    b0de:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    b0e2:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    b0e6:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    b0ea:	f248 2347 	movw	r3, #33351	; 0x8247
    b0ee:	f2c0 0301 	movt	r3, #1
    b0f2:	4610      	mov	r0, r2
    b0f4:	91b5      	str	r1, [sp, #724]	; 0x2d4
    b0f6:	4619      	mov	r1, r3
    b0f8:	f006 fe10 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b0fc:	90b4      	str	r0, [sp, #720]	; 0x2d0
    b0fe:	91b3      	str	r1, [sp, #716]	; 0x2cc
    b100:	e7ff      	b.n	b102 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14d6>
    b102:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    b104:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    b108:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    b10a:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    b10e:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    b112:	f2c0 0201 	movt	r2, #1
    b116:	6812      	ldr	r2, [r2, #0]
    b118:	466b      	mov	r3, sp
    b11a:	f04f 0c01 	mov.w	ip, #1
    b11e:	f8c3 c008 	str.w	ip, [r3, #8]
    b122:	605a      	str	r2, [r3, #4]
    b124:	f8c3 c000 	str.w	ip, [r3]
    b128:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b12c:	2202      	movs	r2, #2
    b12e:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    b132:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    b134:	f002 fe9d 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b138:	e7ff      	b.n	b13a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x150e>
    b13a:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    b13e:	f64e 0034 	movw	r0, #59444	; 0xe834
    b142:	f2c0 0001 	movt	r0, #1
    b146:	6802      	ldr	r2, [r0, #0]
    b148:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b14c:	f003 fe5d 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b150:	e7ff      	b.n	b152 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1526>
    b152:	e7ff      	b.n	b154 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
                self.v[x] ^= self.v[y];
    b154:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b158:	280f      	cmp	r0, #15
    b15a:	f202 825a 	bhi.w	d612 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39e6>
    b15e:	e7ff      	b.n	b160 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1534>
    b160:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b164:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b168:	1842      	adds	r2, r0, r1
    b16a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b16e:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b172:	2b0f      	cmp	r3, #15
    b174:	92b2      	str	r2, [sp, #712]	; 0x2c8
    b176:	f202 8256 	bhi.w	d626 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39fa>
    b17a:	e7ff      	b.n	b17c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1550>
    b17c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b180:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b184:	1842      	adds	r2, r0, r1
    b186:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b18a:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    b18e:	ea83 030c 	eor.w	r3, r3, ip
    b192:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b196:	f001 bfff 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b19a:	2005      	movs	r0, #5
    b19c:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    b1a0:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    b1a4:	f2c0 0001 	movt	r0, #1
    b1a8:	6801      	ldr	r1, [r0, #0]
    b1aa:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b1ae:	f007 fc97 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b1b2:	90b1      	str	r0, [sp, #708]	; 0x2c4
    b1b4:	e01f      	b.n	b1f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ca>
    b1b6:	2001      	movs	r0, #1
    b1b8:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b1bc:	e015      	b.n	b1ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b1be:	2000      	movs	r0, #0
    b1c0:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b1c4:	e011      	b.n	b1ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b1c6:	2000      	movs	r0, #0
    b1c8:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    b1cc:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    b1d0:	f640 2000 	movw	r0, #2560	; 0xa00
    b1d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1d8:	f007 fc8e 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b1dc:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    b1e0:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    b1e4:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    b1e8:	e00a      	b.n	b200 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15d4>
    b1ea:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    b1ee:	07c0      	lsls	r0, r0, #31
    b1f0:	2800      	cmp	r0, #0
    b1f2:	d112      	bne.n	b21a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ee>
    b1f4:	e055      	b.n	b2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
    b1f6:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    b1f8:	07c1      	lsls	r1, r0, #31
    b1fa:	2900      	cmp	r1, #0
    b1fc:	d1e3      	bne.n	b1c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x159a>
    b1fe:	e7de      	b.n	b1be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
    b200:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b204:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    b208:	f007 fc6a 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b20c:	90b0      	str	r0, [sp, #704]	; 0x2c0
    b20e:	e7ff      	b.n	b210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15e4>
    b210:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    b212:	07c1      	lsls	r1, r0, #31
    b214:	2900      	cmp	r1, #0
    b216:	d1ce      	bne.n	b1b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x158a>
    b218:	e7d1      	b.n	b1be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    b21a:	f24e 70a4 	movw	r0, #59300	; 0xe7a4
    b21e:	f2c0 0001 	movt	r0, #1
    b222:	6801      	ldr	r1, [r0, #0]
    b224:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b228:	f100 0212 	add.w	r2, r0, #18
    b22c:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    b230:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    b234:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    b238:	f248 2347 	movw	r3, #33351	; 0x8247
    b23c:	f2c0 0301 	movt	r3, #1
    b240:	4610      	mov	r0, r2
    b242:	91af      	str	r1, [sp, #700]	; 0x2bc
    b244:	4619      	mov	r1, r3
    b246:	f006 fd69 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b24a:	90ae      	str	r0, [sp, #696]	; 0x2b8
    b24c:	91ad      	str	r1, [sp, #692]	; 0x2b4
    b24e:	e7ff      	b.n	b250 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1624>
    b250:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    b252:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    b256:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    b258:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    b25c:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    b260:	f2c0 0201 	movt	r2, #1
    b264:	6812      	ldr	r2, [r2, #0]
    b266:	466b      	mov	r3, sp
    b268:	f04f 0c01 	mov.w	ip, #1
    b26c:	f8c3 c008 	str.w	ip, [r3, #8]
    b270:	605a      	str	r2, [r3, #4]
    b272:	f8c3 c000 	str.w	ip, [r3]
    b276:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b27a:	2202      	movs	r2, #2
    b27c:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    b280:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    b282:	f002 fdf6 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b286:	e7ff      	b.n	b288 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x165c>
    b288:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    b28c:	f24e 70c4 	movw	r0, #59332	; 0xe7c4
    b290:	f2c0 0001 	movt	r0, #1
    b294:	6802      	ldr	r2, [r0, #0]
    b296:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b29a:	f003 fdb6 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b29e:	e7ff      	b.n	b2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1674>
    b2a0:	e7ff      	b.n	b2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    b2a2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b2a6:	280f      	cmp	r0, #15
    b2a8:	f202 8195 	bhi.w	d5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39aa>
    b2ac:	e7ff      	b.n	b2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1682>
    b2ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b2b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b2b6:	1842      	adds	r2, r0, r1
    b2b8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b2bc:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b2c0:	2b0f      	cmp	r3, #15
    b2c2:	92ac      	str	r2, [sp, #688]	; 0x2b0
    b2c4:	f202 8191 	bhi.w	d5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39be>
    b2c8:	e7ff      	b.n	b2ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x169e>
    b2ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b2ce:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b2d2:	1842      	adds	r2, r0, r1
    b2d4:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b2d8:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    b2da:	f007 fc92 	bl	12c02 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
    b2de:	90ab      	str	r0, [sp, #684]	; 0x2ac
    b2e0:	91aa      	str	r1, [sp, #680]	; 0x2a8
    b2e2:	e7ff      	b.n	b2e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16b8>
    b2e4:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    b2e6:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    b2ea:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    b2ec:	f001 0201 	and.w	r2, r1, #1
    b2f0:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    b2f4:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b2f8:	2a0f      	cmp	r2, #15
    b2fa:	f202 8180 	bhi.w	d5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39d2>
    b2fe:	e7ff      	b.n	b300 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16d4>
    b300:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b304:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b308:	1842      	adds	r2, r0, r1
    b30a:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    b30c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    b310:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    b312:	f002 0c01 	and.w	ip, r2, #1
    b316:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    b31a:	f001 bf3d 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b31e:	2005      	movs	r0, #5
    b320:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    b324:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    b328:	f2c0 0001 	movt	r0, #1
    b32c:	6801      	ldr	r1, [r0, #0]
    b32e:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b332:	f007 fbd5 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b336:	90a9      	str	r0, [sp, #676]	; 0x2a4
    b338:	e01f      	b.n	b37a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x174e>
    b33a:	2001      	movs	r0, #1
    b33c:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b340:	e015      	b.n	b36e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b342:	2000      	movs	r0, #0
    b344:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b348:	e011      	b.n	b36e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b34a:	2000      	movs	r0, #0
    b34c:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    b350:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    b354:	f640 2000 	movw	r0, #2560	; 0xa00
    b358:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b35c:	f007 fbcc 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b360:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    b364:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    b368:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    b36c:	e00a      	b.n	b384 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1758>
    b36e:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    b372:	07c0      	lsls	r0, r0, #31
    b374:	2800      	cmp	r0, #0
    b376:	d112      	bne.n	b39e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1772>
    b378:	e055      	b.n	b426 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
    b37a:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    b37c:	07c1      	lsls	r1, r0, #31
    b37e:	2900      	cmp	r1, #0
    b380:	d1e3      	bne.n	b34a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x171e>
    b382:	e7de      	b.n	b342 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
    b384:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b388:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    b38c:	f007 fba8 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b390:	90a8      	str	r0, [sp, #672]	; 0x2a0
    b392:	e7ff      	b.n	b394 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1768>
    b394:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    b396:	07c1      	lsls	r1, r0, #31
    b398:	2900      	cmp	r1, #0
    b39a:	d1ce      	bne.n	b33a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x170e>
    b39c:	e7d1      	b.n	b342 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    b39e:	f24e 7034 	movw	r0, #59188	; 0xe734
    b3a2:	f2c0 0001 	movt	r0, #1
    b3a6:	6801      	ldr	r1, [r0, #0]
    b3a8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b3ac:	f100 0212 	add.w	r2, r0, #18
    b3b0:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    b3b4:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    b3b8:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    b3bc:	f248 2347 	movw	r3, #33351	; 0x8247
    b3c0:	f2c0 0301 	movt	r3, #1
    b3c4:	4610      	mov	r0, r2
    b3c6:	91a7      	str	r1, [sp, #668]	; 0x29c
    b3c8:	4619      	mov	r1, r3
    b3ca:	f006 fca7 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b3ce:	90a6      	str	r0, [sp, #664]	; 0x298
    b3d0:	91a5      	str	r1, [sp, #660]	; 0x294
    b3d2:	e7ff      	b.n	b3d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17a8>
    b3d4:	98a6      	ldr	r0, [sp, #664]	; 0x298
    b3d6:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    b3da:	99a5      	ldr	r1, [sp, #660]	; 0x294
    b3dc:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    b3e0:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    b3e4:	f2c0 0201 	movt	r2, #1
    b3e8:	6812      	ldr	r2, [r2, #0]
    b3ea:	466b      	mov	r3, sp
    b3ec:	f04f 0c01 	mov.w	ip, #1
    b3f0:	f8c3 c008 	str.w	ip, [r3, #8]
    b3f4:	605a      	str	r2, [r3, #4]
    b3f6:	f8c3 c000 	str.w	ip, [r3]
    b3fa:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b3fe:	2202      	movs	r2, #2
    b400:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    b404:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    b406:	f002 fd34 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b40a:	e7ff      	b.n	b40c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17e0>
    b40c:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    b410:	f24e 7054 	movw	r0, #59220	; 0xe754
    b414:	f2c0 0001 	movt	r0, #1
    b418:	6802      	ldr	r2, [r0, #0]
    b41a:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b41e:	f003 fcf4 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b422:	e7ff      	b.n	b424 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17f8>
    b424:	e7ff      	b.n	b426 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    b426:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b42a:	280f      	cmp	r0, #15
    b42c:	f202 80b5 	bhi.w	d59a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x396e>
    b430:	e7ff      	b.n	b432 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1806>
    b432:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b436:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b43a:	1842      	adds	r2, r0, r1
    b43c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b440:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b444:	2b0f      	cmp	r3, #15
    b446:	92a4      	str	r2, [sp, #656]	; 0x290
    b448:	f202 80b1 	bhi.w	d5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3982>
    b44c:	e7ff      	b.n	b44e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1822>
    b44e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b452:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b456:	1842      	adds	r2, r0, r1
    b458:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b45c:	98a4      	ldr	r0, [sp, #656]	; 0x290
    b45e:	f007 fbfb 	bl	12c58 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b462:	90a3      	str	r0, [sp, #652]	; 0x28c
    b464:	91a2      	str	r1, [sp, #648]	; 0x288
    b466:	e7ff      	b.n	b468 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x183c>
    b468:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    b46a:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    b46e:	99a2      	ldr	r1, [sp, #648]	; 0x288
    b470:	f001 0201 	and.w	r2, r1, #1
    b474:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    b478:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b47c:	2a0f      	cmp	r2, #15
    b47e:	f202 80a0 	bhi.w	d5c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3996>
    b482:	e7ff      	b.n	b484 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1858>
    b484:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b488:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b48c:	1842      	adds	r2, r0, r1
    b48e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b490:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b494:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b496:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    b49a:	ea22 020c 	bic.w	r2, r2, ip
    b49e:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b4a2:	f001 be79 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b4a6:	2005      	movs	r0, #5
    b4a8:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    b4ac:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    b4b0:	f2c0 0001 	movt	r0, #1
    b4b4:	6801      	ldr	r1, [r0, #0]
    b4b6:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b4ba:	f007 fb11 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b4be:	90a1      	str	r0, [sp, #644]	; 0x284
    b4c0:	e01f      	b.n	b502 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18d6>
    b4c2:	2001      	movs	r0, #1
    b4c4:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b4c8:	e015      	b.n	b4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b4ca:	2000      	movs	r0, #0
    b4cc:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b4d0:	e011      	b.n	b4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b4d2:	2000      	movs	r0, #0
    b4d4:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    b4d8:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    b4dc:	f640 2000 	movw	r0, #2560	; 0xa00
    b4e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4e4:	f007 fb08 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b4e8:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    b4ec:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    b4f0:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    b4f4:	e00a      	b.n	b50c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18e0>
    b4f6:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    b4fa:	07c0      	lsls	r0, r0, #31
    b4fc:	2800      	cmp	r0, #0
    b4fe:	d112      	bne.n	b526 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18fa>
    b500:	e055      	b.n	b5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
    b502:	98a1      	ldr	r0, [sp, #644]	; 0x284
    b504:	07c1      	lsls	r1, r0, #31
    b506:	2900      	cmp	r1, #0
    b508:	d1e3      	bne.n	b4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18a6>
    b50a:	e7de      	b.n	b4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
    b50c:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b510:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    b514:	f007 fae4 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b518:	90a0      	str	r0, [sp, #640]	; 0x280
    b51a:	e7ff      	b.n	b51c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18f0>
    b51c:	98a0      	ldr	r0, [sp, #640]	; 0x280
    b51e:	07c1      	lsls	r1, r0, #31
    b520:	2900      	cmp	r1, #0
    b522:	d1ce      	bne.n	b4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1896>
    b524:	e7d1      	b.n	b4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    b526:	f24e 60c4 	movw	r0, #59076	; 0xe6c4
    b52a:	f2c0 0001 	movt	r0, #1
    b52e:	6801      	ldr	r1, [r0, #0]
    b530:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b534:	f100 0212 	add.w	r2, r0, #18
    b538:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    b53c:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    b540:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    b544:	f248 2347 	movw	r3, #33351	; 0x8247
    b548:	f2c0 0301 	movt	r3, #1
    b54c:	4610      	mov	r0, r2
    b54e:	919f      	str	r1, [sp, #636]	; 0x27c
    b550:	4619      	mov	r1, r3
    b552:	f006 fbe3 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b556:	909e      	str	r0, [sp, #632]	; 0x278
    b558:	919d      	str	r1, [sp, #628]	; 0x274
    b55a:	e7ff      	b.n	b55c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1930>
    b55c:	989e      	ldr	r0, [sp, #632]	; 0x278
    b55e:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    b562:	999d      	ldr	r1, [sp, #628]	; 0x274
    b564:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    b568:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    b56c:	f2c0 0201 	movt	r2, #1
    b570:	6812      	ldr	r2, [r2, #0]
    b572:	466b      	mov	r3, sp
    b574:	f04f 0c01 	mov.w	ip, #1
    b578:	f8c3 c008 	str.w	ip, [r3, #8]
    b57c:	605a      	str	r2, [r3, #4]
    b57e:	f8c3 c000 	str.w	ip, [r3]
    b582:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b586:	2202      	movs	r2, #2
    b588:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    b58c:	999f      	ldr	r1, [sp, #636]	; 0x27c
    b58e:	f002 fc70 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b592:	e7ff      	b.n	b594 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1968>
    b594:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    b598:	f24e 60e4 	movw	r0, #59108	; 0xe6e4
    b59c:	f2c0 0001 	movt	r0, #1
    b5a0:	6802      	ldr	r2, [r0, #0]
    b5a2:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b5a6:	f003 fc30 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b5aa:	e7ff      	b.n	b5ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1980>
    b5ac:	e7ff      	b.n	b5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
                self.v[0xf] = self.v[x] & 1;
    b5ae:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b5b2:	280f      	cmp	r0, #15
    b5b4:	f201 87d3 	bhi.w	d55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3932>
    b5b8:	e7ff      	b.n	b5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x198e>
    b5ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b5be:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b5c2:	1842      	adds	r2, r0, r1
    b5c4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b5c8:	f002 0201 	and.w	r2, r2, #1
    b5cc:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    b5d0:	290f      	cmp	r1, #15
    b5d2:	f201 87ce 	bhi.w	d572 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3946>
    b5d6:	e7ff      	b.n	b5d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19ac>
    b5d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b5dc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b5e0:	1842      	adds	r2, r0, r1
    b5e2:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b5e6:	2101      	movs	r1, #1
    b5e8:	f007 fae7 	bl	12bba <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>
    b5ec:	909c      	str	r0, [sp, #624]	; 0x270
    b5ee:	e7ff      	b.n	b5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19c4>
    b5f0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b5f4:	280f      	cmp	r0, #15
    b5f6:	f201 87c6 	bhi.w	d586 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x395a>
    b5fa:	e7ff      	b.n	b5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19d0>
    b5fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b600:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b604:	1842      	adds	r2, r0, r1
    b606:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    b608:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b60c:	f001 bdc4 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b610:	2005      	movs	r0, #5
    b612:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    b616:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    b61a:	f2c0 0001 	movt	r0, #1
    b61e:	6801      	ldr	r1, [r0, #0]
    b620:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b624:	f007 fa5c 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b628:	909b      	str	r0, [sp, #620]	; 0x26c
    b62a:	e01f      	b.n	b66c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a40>
    b62c:	2001      	movs	r0, #1
    b62e:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b632:	e015      	b.n	b660 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b634:	2000      	movs	r0, #0
    b636:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b63a:	e011      	b.n	b660 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b63c:	2000      	movs	r0, #0
    b63e:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    b642:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    b646:	f640 2000 	movw	r0, #2560	; 0xa00
    b64a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b64e:	f007 fa53 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b652:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    b656:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    b65a:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    b65e:	e00a      	b.n	b676 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a4a>
    b660:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    b664:	07c0      	lsls	r0, r0, #31
    b666:	2800      	cmp	r0, #0
    b668:	d112      	bne.n	b690 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a64>
    b66a:	e055      	b.n	b718 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
    b66c:	989b      	ldr	r0, [sp, #620]	; 0x26c
    b66e:	07c1      	lsls	r1, r0, #31
    b670:	2900      	cmp	r1, #0
    b672:	d1e3      	bne.n	b63c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a10>
    b674:	e7de      	b.n	b634 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
    b676:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b67a:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    b67e:	f007 fa2f 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b682:	909a      	str	r0, [sp, #616]	; 0x268
    b684:	e7ff      	b.n	b686 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a5a>
    b686:	989a      	ldr	r0, [sp, #616]	; 0x268
    b688:	07c1      	lsls	r1, r0, #31
    b68a:	2900      	cmp	r1, #0
    b68c:	d1ce      	bne.n	b62c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a00>
    b68e:	e7d1      	b.n	b634 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    b690:	f24e 6054 	movw	r0, #58964	; 0xe654
    b694:	f2c0 0001 	movt	r0, #1
    b698:	6801      	ldr	r1, [r0, #0]
    b69a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b69e:	f100 0212 	add.w	r2, r0, #18
    b6a2:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    b6a6:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    b6aa:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    b6ae:	f248 2347 	movw	r3, #33351	; 0x8247
    b6b2:	f2c0 0301 	movt	r3, #1
    b6b6:	4610      	mov	r0, r2
    b6b8:	9199      	str	r1, [sp, #612]	; 0x264
    b6ba:	4619      	mov	r1, r3
    b6bc:	f006 fb2e 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b6c0:	9098      	str	r0, [sp, #608]	; 0x260
    b6c2:	9197      	str	r1, [sp, #604]	; 0x25c
    b6c4:	e7ff      	b.n	b6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a9a>
    b6c6:	9898      	ldr	r0, [sp, #608]	; 0x260
    b6c8:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    b6cc:	9997      	ldr	r1, [sp, #604]	; 0x25c
    b6ce:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    b6d2:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    b6d6:	f2c0 0201 	movt	r2, #1
    b6da:	6812      	ldr	r2, [r2, #0]
    b6dc:	466b      	mov	r3, sp
    b6de:	f04f 0c01 	mov.w	ip, #1
    b6e2:	f8c3 c008 	str.w	ip, [r3, #8]
    b6e6:	605a      	str	r2, [r3, #4]
    b6e8:	f8c3 c000 	str.w	ip, [r3]
    b6ec:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b6f0:	2202      	movs	r2, #2
    b6f2:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    b6f6:	9999      	ldr	r1, [sp, #612]	; 0x264
    b6f8:	f002 fbbb 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b6fc:	e7ff      	b.n	b6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ad2>
    b6fe:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    b702:	f24e 6074 	movw	r0, #58996	; 0xe674
    b706:	f2c0 0001 	movt	r0, #1
    b70a:	6802      	ldr	r2, [r0, #0]
    b70c:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b710:	f003 fb7b 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b714:	e7ff      	b.n	b716 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aea>
    b716:	e7ff      	b.n	b718 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    b718:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b71c:	280f      	cmp	r0, #15
    b71e:	f201 8700 	bhi.w	d522 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38f6>
    b722:	e7ff      	b.n	b724 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1af8>
    b724:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b728:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b72c:	1842      	adds	r2, r0, r1
    b72e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b732:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b736:	2b0f      	cmp	r3, #15
    b738:	9296      	str	r2, [sp, #600]	; 0x258
    b73a:	f201 86fc 	bhi.w	d536 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x390a>
    b73e:	e7ff      	b.n	b740 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b14>
    b740:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b744:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b748:	1842      	adds	r2, r0, r1
    b74a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b74e:	9896      	ldr	r0, [sp, #600]	; 0x258
    b750:	f007 fa82 	bl	12c58 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b754:	9095      	str	r0, [sp, #596]	; 0x254
    b756:	9194      	str	r1, [sp, #592]	; 0x250
    b758:	e7ff      	b.n	b75a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b2e>
    b75a:	9895      	ldr	r0, [sp, #596]	; 0x254
    b75c:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    b760:	9994      	ldr	r1, [sp, #592]	; 0x250
    b762:	f001 0201 	and.w	r2, r1, #1
    b766:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    b76a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b76e:	2a0f      	cmp	r2, #15
    b770:	f201 86eb 	bhi.w	d54a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x391e>
    b774:	e7ff      	b.n	b776 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b4a>
    b776:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b77a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b77e:	1842      	adds	r2, r0, r1
    b780:	9b95      	ldr	r3, [sp, #596]	; 0x254
    b782:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b786:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b788:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    b78c:	ea22 020c 	bic.w	r2, r2, ip
    b790:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b794:	f001 bd00 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b798:	2005      	movs	r0, #5
    b79a:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    b79e:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    b7a2:	f2c0 0001 	movt	r0, #1
    b7a6:	6801      	ldr	r1, [r0, #0]
    b7a8:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b7ac:	f007 f998 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b7b0:	9093      	str	r0, [sp, #588]	; 0x24c
    b7b2:	e01f      	b.n	b7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bc8>
    b7b4:	2001      	movs	r0, #1
    b7b6:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b7ba:	e015      	b.n	b7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b7bc:	2000      	movs	r0, #0
    b7be:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b7c2:	e011      	b.n	b7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b7c4:	2000      	movs	r0, #0
    b7c6:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    b7ca:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    b7ce:	f640 2000 	movw	r0, #2560	; 0xa00
    b7d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b7d6:	f007 f98f 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b7da:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    b7de:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    b7e2:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    b7e6:	e00a      	b.n	b7fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bd2>
    b7e8:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    b7ec:	07c0      	lsls	r0, r0, #31
    b7ee:	2800      	cmp	r0, #0
    b7f0:	d112      	bne.n	b818 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bec>
    b7f2:	e055      	b.n	b8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
    b7f4:	9893      	ldr	r0, [sp, #588]	; 0x24c
    b7f6:	07c1      	lsls	r1, r0, #31
    b7f8:	2900      	cmp	r1, #0
    b7fa:	d1e3      	bne.n	b7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b98>
    b7fc:	e7de      	b.n	b7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
    b7fe:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b802:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    b806:	f007 f96b 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b80a:	9092      	str	r0, [sp, #584]	; 0x248
    b80c:	e7ff      	b.n	b80e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1be2>
    b80e:	9892      	ldr	r0, [sp, #584]	; 0x248
    b810:	07c1      	lsls	r1, r0, #31
    b812:	2900      	cmp	r1, #0
    b814:	d1ce      	bne.n	b7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b88>
    b816:	e7d1      	b.n	b7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    b818:	f24e 50e0 	movw	r0, #58848	; 0xe5e0
    b81c:	f2c0 0001 	movt	r0, #1
    b820:	6801      	ldr	r1, [r0, #0]
    b822:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b826:	f100 0212 	add.w	r2, r0, #18
    b82a:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    b82e:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    b832:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    b836:	f248 2347 	movw	r3, #33351	; 0x8247
    b83a:	f2c0 0301 	movt	r3, #1
    b83e:	4610      	mov	r0, r2
    b840:	9191      	str	r1, [sp, #580]	; 0x244
    b842:	4619      	mov	r1, r3
    b844:	f006 fa6a 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b848:	9090      	str	r0, [sp, #576]	; 0x240
    b84a:	918f      	str	r1, [sp, #572]	; 0x23c
    b84c:	e7ff      	b.n	b84e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c22>
    b84e:	9890      	ldr	r0, [sp, #576]	; 0x240
    b850:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    b854:	998f      	ldr	r1, [sp, #572]	; 0x23c
    b856:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    b85a:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    b85e:	f2c0 0201 	movt	r2, #1
    b862:	6812      	ldr	r2, [r2, #0]
    b864:	466b      	mov	r3, sp
    b866:	f04f 0c01 	mov.w	ip, #1
    b86a:	f8c3 c008 	str.w	ip, [r3, #8]
    b86e:	605a      	str	r2, [r3, #4]
    b870:	f8c3 c000 	str.w	ip, [r3]
    b874:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b878:	2202      	movs	r2, #2
    b87a:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    b87e:	9991      	ldr	r1, [sp, #580]	; 0x244
    b880:	f002 faf7 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b884:	e7ff      	b.n	b886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c5a>
    b886:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    b88a:	f24e 6000 	movw	r0, #58880	; 0xe600
    b88e:	f2c0 0001 	movt	r0, #1
    b892:	6802      	ldr	r2, [r0, #0]
    b894:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b898:	f003 fab7 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b89c:	e7ff      	b.n	b89e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c72>
    b89e:	e7ff      	b.n	b8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    b8a0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b8a4:	280f      	cmp	r0, #15
    b8a6:	f201 861e 	bhi.w	d4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ba>
    b8aa:	e7ff      	b.n	b8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c80>
    b8ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b8b4:	1842      	adds	r2, r0, r1
    b8b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b8ba:	09d2      	lsrs	r2, r2, #7
    b8bc:	928e      	str	r2, [sp, #568]	; 0x238
    b8be:	e7ff      	b.n	b8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c94>
    b8c0:	988e      	ldr	r0, [sp, #568]	; 0x238
    b8c2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b8c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    b8ca:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b8ce:	2a0f      	cmp	r2, #15
    b8d0:	f201 8613 	bhi.w	d4fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ce>
    b8d4:	e7ff      	b.n	b8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1caa>
    b8d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8da:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b8de:	1842      	adds	r2, r0, r1
    b8e0:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b8e4:	2101      	movs	r1, #1
    b8e6:	f007 f957 	bl	12b98 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>
    b8ea:	908d      	str	r0, [sp, #564]	; 0x234
    b8ec:	e7ff      	b.n	b8ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc2>
    b8ee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b8f2:	280f      	cmp	r0, #15
    b8f4:	f201 860b 	bhi.w	d50e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38e2>
    b8f8:	e7ff      	b.n	b8fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cce>
    b8fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8fe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b902:	1842      	adds	r2, r0, r1
    b904:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    b906:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b90a:	f001 bc45 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b90e:	2005      	movs	r0, #5
    b910:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    b914:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    b918:	f2c0 0001 	movt	r0, #1
    b91c:	6801      	ldr	r1, [r0, #0]
    b91e:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b922:	f007 f8dd 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b926:	908c      	str	r0, [sp, #560]	; 0x230
    b928:	e01f      	b.n	b96a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d3e>
    b92a:	2001      	movs	r0, #1
    b92c:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b930:	e015      	b.n	b95e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b932:	2000      	movs	r0, #0
    b934:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b938:	e011      	b.n	b95e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b93a:	2000      	movs	r0, #0
    b93c:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    b940:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    b944:	f640 2000 	movw	r0, #2560	; 0xa00
    b948:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b94c:	f007 f8d4 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b950:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    b954:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    b958:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    b95c:	e00a      	b.n	b974 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d48>
    b95e:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    b962:	07c0      	lsls	r0, r0, #31
    b964:	2800      	cmp	r0, #0
    b966:	d112      	bne.n	b98e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d62>
    b968:	e055      	b.n	ba16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
    b96a:	988c      	ldr	r0, [sp, #560]	; 0x230
    b96c:	07c1      	lsls	r1, r0, #31
    b96e:	2900      	cmp	r1, #0
    b970:	d1e3      	bne.n	b93a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d0e>
    b972:	e7de      	b.n	b932 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
    b974:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b978:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    b97c:	f007 f8b0 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b980:	908b      	str	r0, [sp, #556]	; 0x22c
    b982:	e7ff      	b.n	b984 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d58>
    b984:	988b      	ldr	r0, [sp, #556]	; 0x22c
    b986:	07c1      	lsls	r1, r0, #31
    b988:	2900      	cmp	r1, #0
    b98a:	d1ce      	bne.n	b92a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cfe>
    b98c:	e7d1      	b.n	b932 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    b98e:	f24e 5080 	movw	r0, #58752	; 0xe580
    b992:	f2c0 0001 	movt	r0, #1
    b996:	6801      	ldr	r1, [r0, #0]
    b998:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b99c:	f100 0212 	add.w	r2, r0, #18
    b9a0:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    b9a4:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    b9a8:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    b9ac:	f248 2347 	movw	r3, #33351	; 0x8247
    b9b0:	f2c0 0301 	movt	r3, #1
    b9b4:	4610      	mov	r0, r2
    b9b6:	918a      	str	r1, [sp, #552]	; 0x228
    b9b8:	4619      	mov	r1, r3
    b9ba:	f006 f9af 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b9be:	9089      	str	r0, [sp, #548]	; 0x224
    b9c0:	9188      	str	r1, [sp, #544]	; 0x220
    b9c2:	e7ff      	b.n	b9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d98>
    b9c4:	9889      	ldr	r0, [sp, #548]	; 0x224
    b9c6:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    b9ca:	9988      	ldr	r1, [sp, #544]	; 0x220
    b9cc:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    b9d0:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    b9d4:	f2c0 0201 	movt	r2, #1
    b9d8:	6812      	ldr	r2, [r2, #0]
    b9da:	466b      	mov	r3, sp
    b9dc:	f04f 0c01 	mov.w	ip, #1
    b9e0:	f8c3 c008 	str.w	ip, [r3, #8]
    b9e4:	605a      	str	r2, [r3, #4]
    b9e6:	f8c3 c000 	str.w	ip, [r3]
    b9ea:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    b9ee:	2202      	movs	r2, #2
    b9f0:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    b9f4:	998a      	ldr	r1, [sp, #552]	; 0x228
    b9f6:	f002 fa3c 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b9fa:	e7ff      	b.n	b9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dd0>
    b9fc:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    ba00:	f24e 50a0 	movw	r0, #58784	; 0xe5a0
    ba04:	f2c0 0001 	movt	r0, #1
    ba08:	6802      	ldr	r2, [r0, #0]
    ba0a:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ba0e:	f003 f9fc 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ba12:	e7ff      	b.n	ba14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de8>
    ba14:	e7ff      	b.n	ba16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
                if self.v[x] != self.v[y] {
    ba16:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ba1a:	280f      	cmp	r0, #15
    ba1c:	f201 854f 	bhi.w	d4be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3892>
    ba20:	e7ff      	b.n	ba22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1df6>
    ba22:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba26:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ba2a:	1842      	adds	r2, r0, r1
    ba2c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ba30:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    ba34:	2b0f      	cmp	r3, #15
    ba36:	9287      	str	r2, [sp, #540]	; 0x21c
    ba38:	f201 854b 	bhi.w	d4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a6>
    ba3c:	e7ff      	b.n	ba3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e12>
    ba3e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba42:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ba46:	1842      	adds	r2, r0, r1
    ba48:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ba4c:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    ba4e:	fa5f fc83 	uxtb.w	ip, r3
    ba52:	4594      	cmp	ip, r2
    ba54:	d006      	beq.n	ba64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
    ba56:	e7ff      	b.n	ba58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e2c>
                    self.next();
    ba58:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba5c:	f001 fece 	bl	d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    ba60:	e7ff      	b.n	ba62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e36>
                if self.v[x] != self.v[y] {
    ba62:	e7ff      	b.n	ba64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
        match (
    ba64:	f001 bb98 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ba68:	2005      	movs	r0, #5
    ba6a:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    ba6e:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    ba72:	f2c0 0001 	movt	r0, #1
    ba76:	6801      	ldr	r1, [r0, #0]
    ba78:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    ba7c:	f007 f830 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ba80:	9086      	str	r0, [sp, #536]	; 0x218
    ba82:	e01f      	b.n	bac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e98>
    ba84:	2001      	movs	r0, #1
    ba86:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    ba8a:	e015      	b.n	bab8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    ba8c:	2000      	movs	r0, #0
    ba8e:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    ba92:	e011      	b.n	bab8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    ba94:	2000      	movs	r0, #0
    ba96:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    ba9a:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    ba9e:	f640 2000 	movw	r0, #2560	; 0xa00
    baa2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    baa6:	f007 f827 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    baaa:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    baae:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    bab2:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    bab6:	e00a      	b.n	bace <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ea2>
    bab8:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    babc:	07c0      	lsls	r0, r0, #31
    babe:	2800      	cmp	r0, #0
    bac0:	d112      	bne.n	bae8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ebc>
    bac2:	e055      	b.n	bb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
    bac4:	9886      	ldr	r0, [sp, #536]	; 0x218
    bac6:	07c1      	lsls	r1, r0, #31
    bac8:	2900      	cmp	r1, #0
    baca:	d1e3      	bne.n	ba94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e68>
    bacc:	e7de      	b.n	ba8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
    bace:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    bad2:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    bad6:	f007 f803 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bada:	9085      	str	r0, [sp, #532]	; 0x214
    badc:	e7ff      	b.n	bade <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1eb2>
    bade:	9885      	ldr	r0, [sp, #532]	; 0x214
    bae0:	07c1      	lsls	r1, r0, #31
    bae2:	2900      	cmp	r1, #0
    bae4:	d1ce      	bne.n	ba84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e58>
    bae6:	e7d1      	b.n	ba8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
                trace!("[{:04x}] LD I, nnn", self.pc);
    bae8:	f24e 5040 	movw	r0, #58688	; 0xe540
    baec:	f2c0 0001 	movt	r0, #1
    baf0:	6801      	ldr	r1, [r0, #0]
    baf2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    baf6:	f100 0212 	add.w	r2, r0, #18
    bafa:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    bafe:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    bb02:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    bb06:	f248 2347 	movw	r3, #33351	; 0x8247
    bb0a:	f2c0 0301 	movt	r3, #1
    bb0e:	4610      	mov	r0, r2
    bb10:	9184      	str	r1, [sp, #528]	; 0x210
    bb12:	4619      	mov	r1, r3
    bb14:	f006 f902 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bb18:	9083      	str	r0, [sp, #524]	; 0x20c
    bb1a:	9182      	str	r1, [sp, #520]	; 0x208
    bb1c:	e7ff      	b.n	bb1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ef2>
    bb1e:	9883      	ldr	r0, [sp, #524]	; 0x20c
    bb20:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    bb24:	9982      	ldr	r1, [sp, #520]	; 0x208
    bb26:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    bb2a:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    bb2e:	f2c0 0201 	movt	r2, #1
    bb32:	6812      	ldr	r2, [r2, #0]
    bb34:	466b      	mov	r3, sp
    bb36:	f04f 0c01 	mov.w	ip, #1
    bb3a:	f8c3 c008 	str.w	ip, [r3, #8]
    bb3e:	605a      	str	r2, [r3, #4]
    bb40:	f8c3 c000 	str.w	ip, [r3]
    bb44:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bb48:	2202      	movs	r2, #2
    bb4a:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    bb4e:	9984      	ldr	r1, [sp, #528]	; 0x210
    bb50:	f002 f98f 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bb54:	e7ff      	b.n	bb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f2a>
    bb56:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    bb5a:	f24e 5060 	movw	r0, #58720	; 0xe560
    bb5e:	f2c0 0001 	movt	r0, #1
    bb62:	6802      	ldr	r2, [r0, #0]
    bb64:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bb68:	f003 f94f 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bb6c:	e7ff      	b.n	bb6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f42>
    bb6e:	e7ff      	b.n	bb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
                self.i = nnn;
    bb70:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bb74:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    bb78:	8208      	strh	r0, [r1, #16]
        match (
    bb7a:	f001 bb0d 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bb7e:	2005      	movs	r0, #5
    bb80:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    bb84:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    bb88:	f2c0 0001 	movt	r0, #1
    bb8c:	6801      	ldr	r1, [r0, #0]
    bb8e:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bb92:	f006 ffa5 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bb96:	9081      	str	r0, [sp, #516]	; 0x204
    bb98:	e01f      	b.n	bbda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fae>
    bb9a:	2001      	movs	r0, #1
    bb9c:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bba0:	e015      	b.n	bbce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bba2:	2000      	movs	r0, #0
    bba4:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bba8:	e011      	b.n	bbce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bbaa:	2000      	movs	r0, #0
    bbac:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    bbb0:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    bbb4:	f640 2000 	movw	r0, #2560	; 0xa00
    bbb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbbc:	f006 ff9c 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bbc0:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    bbc4:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    bbc8:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    bbcc:	e00a      	b.n	bbe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fb8>
    bbce:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    bbd2:	07c0      	lsls	r0, r0, #31
    bbd4:	2800      	cmp	r0, #0
    bbd6:	d112      	bne.n	bbfe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fd2>
    bbd8:	e055      	b.n	bc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
    bbda:	9881      	ldr	r0, [sp, #516]	; 0x204
    bbdc:	07c1      	lsls	r1, r0, #31
    bbde:	2900      	cmp	r1, #0
    bbe0:	d1e3      	bne.n	bbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f7e>
    bbe2:	e7de      	b.n	bba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
    bbe4:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bbe8:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    bbec:	f006 ff78 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bbf0:	9080      	str	r0, [sp, #512]	; 0x200
    bbf2:	e7ff      	b.n	bbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fc8>
    bbf4:	9880      	ldr	r0, [sp, #512]	; 0x200
    bbf6:	07c1      	lsls	r1, r0, #31
    bbf8:	2900      	cmp	r1, #0
    bbfa:	d1ce      	bne.n	bb9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f6e>
    bbfc:	e7d1      	b.n	bba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    bbfe:	f24e 5000 	movw	r0, #58624	; 0xe500
    bc02:	f2c0 0001 	movt	r0, #1
    bc06:	6801      	ldr	r1, [r0, #0]
    bc08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc0c:	f100 0212 	add.w	r2, r0, #18
    bc10:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    bc14:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    bc18:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    bc1c:	f248 2347 	movw	r3, #33351	; 0x8247
    bc20:	f2c0 0301 	movt	r3, #1
    bc24:	4610      	mov	r0, r2
    bc26:	917f      	str	r1, [sp, #508]	; 0x1fc
    bc28:	4619      	mov	r1, r3
    bc2a:	f006 f877 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bc2e:	907e      	str	r0, [sp, #504]	; 0x1f8
    bc30:	917d      	str	r1, [sp, #500]	; 0x1f4
    bc32:	e7ff      	b.n	bc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2008>
    bc34:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    bc36:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    bc3a:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    bc3c:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    bc40:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    bc44:	f2c0 0201 	movt	r2, #1
    bc48:	6812      	ldr	r2, [r2, #0]
    bc4a:	466b      	mov	r3, sp
    bc4c:	f04f 0c01 	mov.w	ip, #1
    bc50:	f8c3 c008 	str.w	ip, [r3, #8]
    bc54:	605a      	str	r2, [r3, #4]
    bc56:	f8c3 c000 	str.w	ip, [r3]
    bc5a:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bc5e:	2202      	movs	r2, #2
    bc60:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    bc64:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    bc66:	f002 f904 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bc6a:	e7ff      	b.n	bc6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2040>
    bc6c:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    bc70:	f24e 5020 	movw	r0, #58656	; 0xe520
    bc74:	f2c0 0001 	movt	r0, #1
    bc78:	6802      	ldr	r2, [r0, #0]
    bc7a:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bc7e:	f003 f8c4 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bc82:	e7ff      	b.n	bc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2058>
    bc84:	e7ff      	b.n	bc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    bc86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc8a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    bc8e:	f001 ff5c 	bl	db4a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    bc92:	907c      	str	r0, [sp, #496]	; 0x1f0
    bc94:	e7ff      	b.n	bc96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x206a>
    bc96:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bc9a:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    bc9c:	f007 f808 	bl	12cb0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    bca0:	907b      	str	r0, [sp, #492]	; 0x1ec
    bca2:	e7ff      	b.n	bca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2078>
    bca4:	2102      	movs	r1, #2
    bca6:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    bca8:	f007 f813 	bl	12cd2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    bcac:	907a      	str	r0, [sp, #488]	; 0x1e8
    bcae:	e7ff      	b.n	bcb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2084>
    bcb0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bcb4:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    bcb6:	f001 fd5e 	bl	d776 <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    bcba:	e7ff      	b.n	bcbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2090>
        match (
    bcbc:	f001 ba6c 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bcc0:	2005      	movs	r0, #5
    bcc2:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    bcc6:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    bcca:	f2c0 0001 	movt	r0, #1
    bcce:	6801      	ldr	r1, [r0, #0]
    bcd0:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bcd4:	f006 ff04 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bcd8:	9079      	str	r0, [sp, #484]	; 0x1e4
    bcda:	e01f      	b.n	bd1c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20f0>
    bcdc:	2001      	movs	r0, #1
    bcde:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bce2:	e015      	b.n	bd10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bce4:	2000      	movs	r0, #0
    bce6:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bcea:	e011      	b.n	bd10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bcec:	2000      	movs	r0, #0
    bcee:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    bcf2:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    bcf6:	f640 2000 	movw	r0, #2560	; 0xa00
    bcfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bcfe:	f006 fefb 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bd02:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    bd06:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    bd0a:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    bd0e:	e00a      	b.n	bd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20fa>
    bd10:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    bd14:	07c0      	lsls	r0, r0, #31
    bd16:	2800      	cmp	r0, #0
    bd18:	d112      	bne.n	bd40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2114>
    bd1a:	e055      	b.n	bdc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
    bd1c:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    bd1e:	07c1      	lsls	r1, r0, #31
    bd20:	2900      	cmp	r1, #0
    bd22:	d1e3      	bne.n	bcec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20c0>
    bd24:	e7de      	b.n	bce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
    bd26:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bd2a:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    bd2e:	f006 fed7 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bd32:	9078      	str	r0, [sp, #480]	; 0x1e0
    bd34:	e7ff      	b.n	bd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x210a>
    bd36:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    bd38:	07c1      	lsls	r1, r0, #31
    bd3a:	2900      	cmp	r1, #0
    bd3c:	d1ce      	bne.n	bcdc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b0>
    bd3e:	e7d1      	b.n	bce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    bd40:	f24e 40b0 	movw	r0, #58544	; 0xe4b0
    bd44:	f2c0 0001 	movt	r0, #1
    bd48:	6801      	ldr	r1, [r0, #0]
    bd4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd4e:	f100 0212 	add.w	r2, r0, #18
    bd52:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    bd56:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    bd5a:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    bd5e:	f248 2347 	movw	r3, #33351	; 0x8247
    bd62:	f2c0 0301 	movt	r3, #1
    bd66:	4610      	mov	r0, r2
    bd68:	9177      	str	r1, [sp, #476]	; 0x1dc
    bd6a:	4619      	mov	r1, r3
    bd6c:	f005 ffd6 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bd70:	9076      	str	r0, [sp, #472]	; 0x1d8
    bd72:	9175      	str	r1, [sp, #468]	; 0x1d4
    bd74:	e7ff      	b.n	bd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x214a>
    bd76:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    bd78:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    bd7c:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    bd7e:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    bd82:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    bd86:	f2c0 0201 	movt	r2, #1
    bd8a:	6812      	ldr	r2, [r2, #0]
    bd8c:	466b      	mov	r3, sp
    bd8e:	f04f 0c01 	mov.w	ip, #1
    bd92:	f8c3 c008 	str.w	ip, [r3, #8]
    bd96:	605a      	str	r2, [r3, #4]
    bd98:	f8c3 c000 	str.w	ip, [r3]
    bd9c:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bda0:	2202      	movs	r2, #2
    bda2:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    bda6:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    bda8:	f002 f863 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bdac:	e7ff      	b.n	bdae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2182>
    bdae:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    bdb2:	f24e 40d0 	movw	r0, #58576	; 0xe4d0
    bdb6:	f2c0 0001 	movt	r0, #1
    bdba:	6802      	ldr	r2, [r0, #0]
    bdbc:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bdc0:	f003 f823 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bdc4:	e7ff      	b.n	bdc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219a>
    bdc6:	e7ff      	b.n	bdc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
                self.v[x] = self.hw.rand() & kk;
    bdc8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdcc:	f7fd fbe3 	bl	9596 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>
    bdd0:	9074      	str	r0, [sp, #464]	; 0x1d0
    bdd2:	e7ff      	b.n	bdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21a8>
    bdd4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bdd8:	280f      	cmp	r0, #15
    bdda:	f201 8366 	bhi.w	d4aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x387e>
    bdde:	e7ff      	b.n	bde0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21b4>
    bde0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bde4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bde8:	1842      	adds	r2, r0, r1
    bdea:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    bdec:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    bdf0:	ea03 0e0c 	and.w	lr, r3, ip
    bdf4:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    bdf8:	f001 b9ce 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bdfc:	2005      	movs	r0, #5
    bdfe:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    be02:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    be06:	f2c0 0001 	movt	r0, #1
    be0a:	6801      	ldr	r1, [r0, #0]
    be0c:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    be10:	f006 fe66 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    be14:	9073      	str	r0, [sp, #460]	; 0x1cc
    be16:	e01f      	b.n	be58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x222c>
    be18:	2001      	movs	r0, #1
    be1a:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    be1e:	e015      	b.n	be4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    be20:	2000      	movs	r0, #0
    be22:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    be26:	e011      	b.n	be4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    be28:	2000      	movs	r0, #0
    be2a:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    be2e:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    be32:	f640 2000 	movw	r0, #2560	; 0xa00
    be36:	f2c2 0000 	movt	r0, #8192	; 0x2000
    be3a:	f006 fe5d 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    be3e:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    be42:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    be46:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    be4a:	e00a      	b.n	be62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2236>
    be4c:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    be50:	07c0      	lsls	r0, r0, #31
    be52:	2800      	cmp	r0, #0
    be54:	d112      	bne.n	be7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2250>
    be56:	e055      	b.n	bf04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
    be58:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    be5a:	07c1      	lsls	r1, r0, #31
    be5c:	2900      	cmp	r1, #0
    be5e:	d1e3      	bne.n	be28 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21fc>
    be60:	e7de      	b.n	be20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
    be62:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    be66:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    be6a:	f006 fe39 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    be6e:	9072      	str	r0, [sp, #456]	; 0x1c8
    be70:	e7ff      	b.n	be72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2246>
    be72:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    be74:	07c1      	lsls	r1, r0, #31
    be76:	2900      	cmp	r1, #0
    be78:	d1ce      	bne.n	be18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21ec>
    be7a:	e7d1      	b.n	be20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    be7c:	f24e 3054 	movw	r0, #58196	; 0xe354
    be80:	f2c0 0001 	movt	r0, #1
    be84:	6801      	ldr	r1, [r0, #0]
    be86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be8a:	f100 0212 	add.w	r2, r0, #18
    be8e:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    be92:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    be96:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    be9a:	f248 2347 	movw	r3, #33351	; 0x8247
    be9e:	f2c0 0301 	movt	r3, #1
    bea2:	4610      	mov	r0, r2
    bea4:	9171      	str	r1, [sp, #452]	; 0x1c4
    bea6:	4619      	mov	r1, r3
    bea8:	f005 ff38 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    beac:	9070      	str	r0, [sp, #448]	; 0x1c0
    beae:	916f      	str	r1, [sp, #444]	; 0x1bc
    beb0:	e7ff      	b.n	beb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2286>
    beb2:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    beb4:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    beb8:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    beba:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    bebe:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    bec2:	f2c0 0201 	movt	r2, #1
    bec6:	6812      	ldr	r2, [r2, #0]
    bec8:	466b      	mov	r3, sp
    beca:	f04f 0c01 	mov.w	ip, #1
    bece:	f8c3 c008 	str.w	ip, [r3, #8]
    bed2:	605a      	str	r2, [r3, #4]
    bed4:	f8c3 c000 	str.w	ip, [r3]
    bed8:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    bedc:	2202      	movs	r2, #2
    bede:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    bee2:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    bee4:	f001 ffc5 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bee8:	e7ff      	b.n	beea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22be>
    beea:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    beee:	f24e 3074 	movw	r0, #58228	; 0xe374
    bef2:	f2c0 0001 	movt	r0, #1
    bef6:	6802      	ldr	r2, [r0, #0]
    bef8:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    befc:	f002 ff85 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bf00:	e7ff      	b.n	bf02 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d6>
    bf02:	e7ff      	b.n	bf04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
                let basex = self.v[x] as usize;
    bf04:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bf08:	280f      	cmp	r0, #15
    bf0a:	f201 825c 	bhi.w	d3c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x379a>
    bf0e:	e7ff      	b.n	bf10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22e4>
    bf10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf14:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bf18:	1842      	adds	r2, r0, r1
    bf1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf1e:	4613      	mov	r3, r2
    bf20:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    bf24:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    bf28:	2a0f      	cmp	r2, #15
    bf2a:	936e      	str	r3, [sp, #440]	; 0x1b8
    bf2c:	f201 8255 	bhi.w	d3da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ae>
    bf30:	e7ff      	b.n	bf32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2306>
    bf32:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf36:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bf3a:	1842      	adds	r2, r0, r1
    bf3c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf40:	4613      	mov	r3, r2
    bf42:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
                let (w, h) = self.hw.vram_size();
    bf46:	936d      	str	r3, [sp, #436]	; 0x1b4
    bf48:	f7fd fceb 	bl	9922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    bf4c:	906c      	str	r0, [sp, #432]	; 0x1b0
    bf4e:	916b      	str	r1, [sp, #428]	; 0x1ac
    bf50:	e7ff      	b.n	bf52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2326>
    bf52:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    bf54:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    bf58:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    bf5a:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    bf5e:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    bf60:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    bf64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    bf68:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    bf6c:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    bf70:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    bf74:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    bf78:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    bf7c:	f002 fcd7 	bl	e92e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    bf80:	906a      	str	r0, [sp, #424]	; 0x1a8
    bf82:	9169      	str	r1, [sp, #420]	; 0x1a4
    bf84:	e7ff      	b.n	bf86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x235a>
    bf86:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    bf88:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    bf8c:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    bf8e:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    bf92:	e7ff      	b.n	bf94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
    bf94:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    bf98:	f002 fc3e 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    bf9c:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    bfa0:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    bfa4:	e7ff      	b.n	bfa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x237a>
    bfa6:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    bfaa:	2800      	cmp	r0, #0
    bfac:	d001      	beq.n	bfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2386>
    bfae:	e7ff      	b.n	bfb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2384>
    bfb0:	e002      	b.n	bfb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x238c>
        match (
    bfb2:	f001 b8f1 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for y in 0..n {
    bfb6:	defe      	udf	#254	; 0xfe
    bfb8:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    bfbc:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    bfc0:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    bfc4:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    bfc8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    bfcc:	8a0a      	ldrh	r2, [r1, #16]
    bfce:	1813      	adds	r3, r2, r0
    bfd0:	469c      	mov	ip, r3
    bfd2:	4293      	cmp	r3, r2
    bfd4:	9068      	str	r0, [sp, #416]	; 0x1a0
    bfd6:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    bfda:	f0c1 8208 	bcc.w	d3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37c2>
    bfde:	e7ff      	b.n	bfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23b4>
    bfe0:	2000      	movs	r0, #0
    bfe2:	9967      	ldr	r1, [sp, #412]	; 0x19c
    bfe4:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    bfe8:	f041 820d 	bne.w	d406 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37da>
    bfec:	e7ff      	b.n	bfee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23c2>
    bfee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bff2:	9967      	ldr	r1, [sp, #412]	; 0x19c
    bff4:	1842      	adds	r2, r0, r1
    bff6:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    bffa:	4613      	mov	r3, r2
    bffc:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    c000:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    c002:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    c006:	eb02 0e0c 	add.w	lr, r2, ip
    c00a:	4674      	mov	r4, lr
    c00c:	4596      	cmp	lr, r2
    c00e:	9366      	str	r3, [sp, #408]	; 0x198
    c010:	9465      	str	r4, [sp, #404]	; 0x194
    c012:	f0c1 8202 	bcc.w	d41a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ee>
    c016:	e7ff      	b.n	c018 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23ec>
    c018:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    c01a:	2800      	cmp	r0, #0
    c01c:	f001 8209 	beq.w	d432 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3806>
    c020:	e7ff      	b.n	c022 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23f6>
    c022:	9865      	ldr	r0, [sp, #404]	; 0x194
    c024:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    c026:	fbb0 f2f1 	udiv	r2, r0, r1
    c02a:	fb02 0211 	mls	r2, r2, r1, r0
    c02e:	4613      	mov	r3, r2
    c030:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    c034:	2200      	movs	r2, #0
                    for x in 0..8 {
    c036:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    c03a:	2208      	movs	r2, #8
    c03c:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    c040:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    c044:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    c048:	9364      	str	r3, [sp, #400]	; 0x190
    c04a:	f002 fc70 	bl	e92e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    c04e:	9063      	str	r0, [sp, #396]	; 0x18c
    c050:	9162      	str	r1, [sp, #392]	; 0x188
    c052:	e7ff      	b.n	c054 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2428>
    c054:	9863      	ldr	r0, [sp, #396]	; 0x18c
    c056:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    c05a:	9962      	ldr	r1, [sp, #392]	; 0x188
    c05c:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    c060:	e7ff      	b.n	c062 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c062:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    c066:	f002 fbd7 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    c06a:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    c06e:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    c072:	e7ff      	b.n	c074 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2448>
    c074:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    c078:	2800      	cmp	r0, #0
    c07a:	d001      	beq.n	c080 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2454>
    c07c:	e7ff      	b.n	c07e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2452>
    c07e:	e001      	b.n	c084 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2458>
                for y in 0..n {
    c080:	e788      	b.n	bf94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
                    for x in 0..8 {
    c082:	defe      	udf	#254	; 0xfe
    c084:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    c088:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    c08c:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    c090:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    c094:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    c096:	1842      	adds	r2, r0, r1
    c098:	4613      	mov	r3, r2
    c09a:	4282      	cmp	r2, r0
    c09c:	9061      	str	r0, [sp, #388]	; 0x184
    c09e:	9360      	str	r3, [sp, #384]	; 0x180
    c0a0:	f0c1 81d3 	bcc.w	d44a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x381e>
    c0a4:	e7ff      	b.n	c0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x247a>
    c0a6:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    c0a8:	2800      	cmp	r0, #0
    c0aa:	f001 81da 	beq.w	d462 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3836>
    c0ae:	e7ff      	b.n	c0b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2484>
    c0b0:	9860      	ldr	r0, [sp, #384]	; 0x180
    c0b2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    c0b4:	fbb0 f2f1 	udiv	r2, r0, r1
    c0b8:	fb02 0211 	mls	r2, r2, r1, r0
    c0bc:	4613      	mov	r3, r2
    c0be:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    c0c2:	9a61      	ldr	r2, [sp, #388]	; 0x184
    c0c4:	f1c2 0c07 	rsb	ip, r2, #7
    c0c8:	f04f 0e07 	mov.w	lr, #7
    c0cc:	4596      	cmp	lr, r2
    c0ce:	935f      	str	r3, [sp, #380]	; 0x17c
    c0d0:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    c0d4:	f0c1 81d1 	bcc.w	d47a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x384e>
    c0d8:	e7ff      	b.n	c0da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24ae>
    c0da:	985e      	ldr	r0, [sp, #376]	; 0x178
    c0dc:	f000 0107 	and.w	r1, r0, #7
    c0e0:	2201      	movs	r2, #1
    c0e2:	fa02 f101 	lsl.w	r1, r2, r1
    c0e6:	08c2      	lsrs	r2, r0, #3
    c0e8:	2a00      	cmp	r2, #0
    c0ea:	915d      	str	r1, [sp, #372]	; 0x174
    c0ec:	f041 81d1 	bne.w	d492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3866>
    c0f0:	e7ff      	b.n	c0f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24c6>
    c0f2:	9866      	ldr	r0, [sp, #408]	; 0x198
    c0f4:	995d      	ldr	r1, [sp, #372]	; 0x174
    c0f6:	ea00 0201 	and.w	r2, r0, r1
    c0fa:	b2d2      	uxtb	r2, r2
    c0fc:	2a00      	cmp	r2, #0
    c0fe:	bf18      	it	ne
    c100:	2201      	movne	r2, #1
    c102:	4613      	mov	r3, r2
    c104:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
                        let dst = self.hw.vram_get(vramx, vramy);
    c108:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c10c:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c10e:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c110:	935c      	str	r3, [sp, #368]	; 0x170
    c112:	f7fd fbb9 	bl	9888 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>
    c116:	4601      	mov	r1, r0
    c118:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    c11c:	915b      	str	r1, [sp, #364]	; 0x16c
    c11e:	e7ff      	b.n	c120 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24f4>
                        self.v[0xf] |= (src && dst) as u8;
    c120:	985c      	ldr	r0, [sp, #368]	; 0x170
    c122:	07c1      	lsls	r1, r0, #31
    c124:	2900      	cmp	r1, #0
    c126:	d108      	bne.n	c13a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x250e>
    c128:	e003      	b.n	c132 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c12a:	2001      	movs	r0, #1
    c12c:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c130:	e008      	b.n	c144 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c132:	2000      	movs	r0, #0
    c134:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c138:	e004      	b.n	c144 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c13a:	985b      	ldr	r0, [sp, #364]	; 0x16c
    c13c:	07c1      	lsls	r1, r0, #31
    c13e:	2900      	cmp	r1, #0
    c140:	d1f3      	bne.n	c12a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24fe>
    c142:	e7f6      	b.n	c132 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c144:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    c148:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c150:	4310      	orrs	r0, r2
    c152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    c156:	985c      	ldr	r0, [sp, #368]	; 0x170
    c158:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    c15a:	ea80 0302 	eor.w	r3, r0, r2
    c15e:	f003 0301 	and.w	r3, r3, #1
    c162:	4608      	mov	r0, r1
    c164:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c166:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c168:	f7fd fa22 	bl	95b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    c16c:	e7ff      	b.n	c16e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2542>
                    for x in 0..8 {
    c16e:	e778      	b.n	c062 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c170:	2005      	movs	r0, #5
    c172:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    c176:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    c17a:	f2c0 0001 	movt	r0, #1
    c17e:	6801      	ldr	r1, [r0, #0]
    c180:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c184:	f006 fcac 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c188:	905a      	str	r0, [sp, #360]	; 0x168
    c18a:	e01f      	b.n	c1cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25a0>
    c18c:	2001      	movs	r0, #1
    c18e:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c192:	e015      	b.n	c1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c194:	2000      	movs	r0, #0
    c196:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c19a:	e011      	b.n	c1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c19c:	2000      	movs	r0, #0
    c19e:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    c1a2:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    c1a6:	f640 2000 	movw	r0, #2560	; 0xa00
    c1aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c1ae:	f006 fca3 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c1b2:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    c1b6:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    c1ba:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    c1be:	e00a      	b.n	c1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25aa>
    c1c0:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    c1c4:	07c0      	lsls	r0, r0, #31
    c1c6:	2800      	cmp	r0, #0
    c1c8:	d112      	bne.n	c1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25c4>
    c1ca:	e055      	b.n	c278 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
    c1cc:	985a      	ldr	r0, [sp, #360]	; 0x168
    c1ce:	07c1      	lsls	r1, r0, #31
    c1d0:	2900      	cmp	r1, #0
    c1d2:	d1e3      	bne.n	c19c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2570>
    c1d4:	e7de      	b.n	c194 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
    c1d6:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c1da:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    c1de:	f006 fc7f 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c1e2:	9059      	str	r0, [sp, #356]	; 0x164
    c1e4:	e7ff      	b.n	c1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25ba>
    c1e6:	9859      	ldr	r0, [sp, #356]	; 0x164
    c1e8:	07c1      	lsls	r1, r0, #31
    c1ea:	2900      	cmp	r1, #0
    c1ec:	d1ce      	bne.n	c18c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2560>
    c1ee:	e7d1      	b.n	c194 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
                trace!("[{:04x}] SKP Vx", self.pc);
    c1f0:	f24e 3000 	movw	r0, #58112	; 0xe300
    c1f4:	f2c0 0001 	movt	r0, #1
    c1f8:	6801      	ldr	r1, [r0, #0]
    c1fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c1fe:	f100 0212 	add.w	r2, r0, #18
    c202:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    c206:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    c20a:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    c20e:	f248 2347 	movw	r3, #33351	; 0x8247
    c212:	f2c0 0301 	movt	r3, #1
    c216:	4610      	mov	r0, r2
    c218:	9158      	str	r1, [sp, #352]	; 0x160
    c21a:	4619      	mov	r1, r3
    c21c:	f005 fd7e 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c220:	9057      	str	r0, [sp, #348]	; 0x15c
    c222:	9156      	str	r1, [sp, #344]	; 0x158
    c224:	e7ff      	b.n	c226 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25fa>
    c226:	9857      	ldr	r0, [sp, #348]	; 0x15c
    c228:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    c22c:	9956      	ldr	r1, [sp, #344]	; 0x158
    c22e:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    c232:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    c236:	f2c0 0201 	movt	r2, #1
    c23a:	6812      	ldr	r2, [r2, #0]
    c23c:	466b      	mov	r3, sp
    c23e:	f04f 0c01 	mov.w	ip, #1
    c242:	f8c3 c008 	str.w	ip, [r3, #8]
    c246:	605a      	str	r2, [r3, #4]
    c248:	f8c3 c000 	str.w	ip, [r3]
    c24c:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c250:	2202      	movs	r2, #2
    c252:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    c256:	9958      	ldr	r1, [sp, #352]	; 0x160
    c258:	f001 fe0b 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c25c:	e7ff      	b.n	c25e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2632>
    c25e:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    c262:	f24e 3020 	movw	r0, #58144	; 0xe320
    c266:	f2c0 0001 	movt	r0, #1
    c26a:	6802      	ldr	r2, [r0, #0]
    c26c:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c270:	f002 fdcb 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c274:	e7ff      	b.n	c276 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264a>
    c276:	e7ff      	b.n	c278 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
                if self.hw.key(self.v[x]) {
    c278:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c27c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c280:	290f      	cmp	r1, #15
    c282:	9055      	str	r0, [sp, #340]	; 0x154
    c284:	f201 8095 	bhi.w	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3786>
    c288:	e7ff      	b.n	c28a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x265e>
    c28a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c28e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c292:	1842      	adds	r2, r0, r1
    c294:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c298:	9855      	ldr	r0, [sp, #340]	; 0x154
    c29a:	f7fd f981 	bl	95a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c29e:	9054      	str	r0, [sp, #336]	; 0x150
    c2a0:	e7ff      	b.n	c2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2676>
    c2a2:	9854      	ldr	r0, [sp, #336]	; 0x150
    c2a4:	07c1      	lsls	r1, r0, #31
    c2a6:	2900      	cmp	r1, #0
    c2a8:	d006      	beq.n	c2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
    c2aa:	e7ff      	b.n	c2ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2680>
                    self.next();
    c2ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2b0:	f001 faa4 	bl	d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c2b4:	e7ff      	b.n	c2b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268a>
                if self.hw.key(self.v[x]) {
    c2b6:	e7ff      	b.n	c2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
        match (
    c2b8:	f000 bf6e 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c2bc:	2005      	movs	r0, #5
    c2be:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    c2c2:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    c2c6:	f2c0 0001 	movt	r0, #1
    c2ca:	6801      	ldr	r1, [r0, #0]
    c2cc:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c2d0:	f006 fc06 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c2d4:	9053      	str	r0, [sp, #332]	; 0x14c
    c2d6:	e01f      	b.n	c318 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ec>
    c2d8:	2001      	movs	r0, #1
    c2da:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c2de:	e015      	b.n	c30c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c2e0:	2000      	movs	r0, #0
    c2e2:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c2e6:	e011      	b.n	c30c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c2e8:	2000      	movs	r0, #0
    c2ea:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    c2ee:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    c2f2:	f640 2000 	movw	r0, #2560	; 0xa00
    c2f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c2fa:	f006 fbfd 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c2fe:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    c302:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    c306:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    c30a:	e00a      	b.n	c322 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26f6>
    c30c:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    c310:	07c0      	lsls	r0, r0, #31
    c312:	2800      	cmp	r0, #0
    c314:	d112      	bne.n	c33c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2710>
    c316:	e055      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
    c318:	9853      	ldr	r0, [sp, #332]	; 0x14c
    c31a:	07c1      	lsls	r1, r0, #31
    c31c:	2900      	cmp	r1, #0
    c31e:	d1e3      	bne.n	c2e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26bc>
    c320:	e7de      	b.n	c2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
    c322:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c326:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    c32a:	f006 fbd9 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c32e:	9052      	str	r0, [sp, #328]	; 0x148
    c330:	e7ff      	b.n	c332 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2706>
    c332:	9852      	ldr	r0, [sp, #328]	; 0x148
    c334:	07c1      	lsls	r1, r0, #31
    c336:	2900      	cmp	r1, #0
    c338:	d1ce      	bne.n	c2d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ac>
    c33a:	e7d1      	b.n	c2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
                trace!("[{:04x}] SKNP Vx", self.pc);
    c33c:	f24e 20bc 	movw	r0, #58044	; 0xe2bc
    c340:	f2c0 0001 	movt	r0, #1
    c344:	6801      	ldr	r1, [r0, #0]
    c346:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c34a:	f100 0212 	add.w	r2, r0, #18
    c34e:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    c352:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    c356:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    c35a:	f248 2347 	movw	r3, #33351	; 0x8247
    c35e:	f2c0 0301 	movt	r3, #1
    c362:	4610      	mov	r0, r2
    c364:	9151      	str	r1, [sp, #324]	; 0x144
    c366:	4619      	mov	r1, r3
    c368:	f005 fcd8 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c36c:	9050      	str	r0, [sp, #320]	; 0x140
    c36e:	914f      	str	r1, [sp, #316]	; 0x13c
    c370:	e7ff      	b.n	c372 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2746>
    c372:	9850      	ldr	r0, [sp, #320]	; 0x140
    c374:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    c378:	994f      	ldr	r1, [sp, #316]	; 0x13c
    c37a:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    c37e:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    c382:	f2c0 0201 	movt	r2, #1
    c386:	6812      	ldr	r2, [r2, #0]
    c388:	466b      	mov	r3, sp
    c38a:	f04f 0c01 	mov.w	ip, #1
    c38e:	f8c3 c008 	str.w	ip, [r3, #8]
    c392:	605a      	str	r2, [r3, #4]
    c394:	f8c3 c000 	str.w	ip, [r3]
    c398:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c39c:	2202      	movs	r2, #2
    c39e:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    c3a2:	9951      	ldr	r1, [sp, #324]	; 0x144
    c3a4:	f001 fd65 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c3a8:	e7ff      	b.n	c3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x277e>
    c3aa:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    c3ae:	f24e 20dc 	movw	r0, #58076	; 0xe2dc
    c3b2:	f2c0 0001 	movt	r0, #1
    c3b6:	6802      	ldr	r2, [r0, #0]
    c3b8:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c3bc:	f002 fd25 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c3c0:	e7ff      	b.n	c3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2796>
    c3c2:	e7ff      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
                if !self.hw.key(self.v[x]) {
    c3c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3c8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c3cc:	290f      	cmp	r1, #15
    c3ce:	904e      	str	r0, [sp, #312]	; 0x138
    c3d0:	f200 87e5 	bhi.w	d39e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3772>
    c3d4:	e7ff      	b.n	c3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27aa>
    c3d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3da:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c3de:	1842      	adds	r2, r0, r1
    c3e0:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c3e4:	984e      	ldr	r0, [sp, #312]	; 0x138
    c3e6:	f7fd f8db 	bl	95a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c3ea:	904d      	str	r0, [sp, #308]	; 0x134
    c3ec:	e7ff      	b.n	c3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27c2>
    c3ee:	984d      	ldr	r0, [sp, #308]	; 0x134
    c3f0:	07c1      	lsls	r1, r0, #31
    c3f2:	2900      	cmp	r1, #0
    c3f4:	d106      	bne.n	c404 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
    c3f6:	e7ff      	b.n	c3f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27cc>
                    self.next();
    c3f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3fc:	f001 f9fe 	bl	d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c400:	e7ff      	b.n	c402 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d6>
                if !self.hw.key(self.v[x]) {
    c402:	e7ff      	b.n	c404 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
        match (
    c404:	f000 bec8 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c408:	2005      	movs	r0, #5
    c40a:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    c40e:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    c412:	f2c0 0001 	movt	r0, #1
    c416:	6801      	ldr	r1, [r0, #0]
    c418:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c41c:	f006 fb60 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c420:	904c      	str	r0, [sp, #304]	; 0x130
    c422:	e01f      	b.n	c464 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2838>
    c424:	2001      	movs	r0, #1
    c426:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c42a:	e015      	b.n	c458 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c42c:	2000      	movs	r0, #0
    c42e:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c432:	e011      	b.n	c458 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c434:	2000      	movs	r0, #0
    c436:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    c43a:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    c43e:	f640 2000 	movw	r0, #2560	; 0xa00
    c442:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c446:	f006 fb57 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c44a:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    c44e:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    c452:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    c456:	e00a      	b.n	c46e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2842>
    c458:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    c45c:	07c0      	lsls	r0, r0, #31
    c45e:	2800      	cmp	r0, #0
    c460:	d112      	bne.n	c488 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x285c>
    c462:	e055      	b.n	c510 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
    c464:	984c      	ldr	r0, [sp, #304]	; 0x130
    c466:	07c1      	lsls	r1, r0, #31
    c468:	2900      	cmp	r1, #0
    c46a:	d1e3      	bne.n	c434 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2808>
    c46c:	e7de      	b.n	c42c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
    c46e:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c472:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    c476:	f006 fb33 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c47a:	904b      	str	r0, [sp, #300]	; 0x12c
    c47c:	e7ff      	b.n	c47e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2852>
    c47e:	984b      	ldr	r0, [sp, #300]	; 0x12c
    c480:	07c1      	lsls	r1, r0, #31
    c482:	2900      	cmp	r1, #0
    c484:	d1ce      	bne.n	c424 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27f8>
    c486:	e7d1      	b.n	c42c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    c488:	f24e 206c 	movw	r0, #57964	; 0xe26c
    c48c:	f2c0 0001 	movt	r0, #1
    c490:	6801      	ldr	r1, [r0, #0]
    c492:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c496:	f100 0212 	add.w	r2, r0, #18
    c49a:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    c49e:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    c4a2:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    c4a6:	f248 2347 	movw	r3, #33351	; 0x8247
    c4aa:	f2c0 0301 	movt	r3, #1
    c4ae:	4610      	mov	r0, r2
    c4b0:	914a      	str	r1, [sp, #296]	; 0x128
    c4b2:	4619      	mov	r1, r3
    c4b4:	f005 fc32 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c4b8:	9049      	str	r0, [sp, #292]	; 0x124
    c4ba:	9148      	str	r1, [sp, #288]	; 0x120
    c4bc:	e7ff      	b.n	c4be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2892>
    c4be:	9849      	ldr	r0, [sp, #292]	; 0x124
    c4c0:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    c4c4:	9948      	ldr	r1, [sp, #288]	; 0x120
    c4c6:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    c4ca:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    c4ce:	f2c0 0201 	movt	r2, #1
    c4d2:	6812      	ldr	r2, [r2, #0]
    c4d4:	466b      	mov	r3, sp
    c4d6:	f04f 0c01 	mov.w	ip, #1
    c4da:	f8c3 c008 	str.w	ip, [r3, #8]
    c4de:	605a      	str	r2, [r3, #4]
    c4e0:	f8c3 c000 	str.w	ip, [r3]
    c4e4:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c4e8:	2202      	movs	r2, #2
    c4ea:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    c4ee:	994a      	ldr	r1, [sp, #296]	; 0x128
    c4f0:	f001 fcbf 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c4f4:	e7ff      	b.n	c4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28ca>
    c4f6:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    c4fa:	f24e 208c 	movw	r0, #57996	; 0xe28c
    c4fe:	f2c0 0001 	movt	r0, #1
    c502:	6802      	ldr	r2, [r0, #0]
    c504:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c508:	f002 fc7f 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c50c:	e7ff      	b.n	c50e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e2>
    c50e:	e7ff      	b.n	c510 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
                self.v[x] = self.dt;
    c510:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c514:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    c518:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c51c:	2a0f      	cmp	r2, #15
    c51e:	9147      	str	r1, [sp, #284]	; 0x11c
    c520:	f200 8733 	bhi.w	d38a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x375e>
    c524:	e7ff      	b.n	c526 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28fa>
    c526:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c52a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c52e:	1842      	adds	r2, r0, r1
    c530:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c532:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c536:	f000 be2f 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c53a:	2005      	movs	r0, #5
    c53c:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    c540:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    c544:	f2c0 0001 	movt	r0, #1
    c548:	6801      	ldr	r1, [r0, #0]
    c54a:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c54e:	f006 fac7 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c552:	9046      	str	r0, [sp, #280]	; 0x118
    c554:	e01f      	b.n	c596 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x296a>
    c556:	2001      	movs	r0, #1
    c558:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c55c:	e015      	b.n	c58a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c55e:	2000      	movs	r0, #0
    c560:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c564:	e011      	b.n	c58a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c566:	2000      	movs	r0, #0
    c568:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    c56c:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    c570:	f640 2000 	movw	r0, #2560	; 0xa00
    c574:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c578:	f006 fabe 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c57c:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    c580:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    c584:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    c588:	e00a      	b.n	c5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2974>
    c58a:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    c58e:	07c0      	lsls	r0, r0, #31
    c590:	2800      	cmp	r0, #0
    c592:	d112      	bne.n	c5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x298e>
    c594:	e055      	b.n	c642 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
    c596:	9846      	ldr	r0, [sp, #280]	; 0x118
    c598:	07c1      	lsls	r1, r0, #31
    c59a:	2900      	cmp	r1, #0
    c59c:	d1e3      	bne.n	c566 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x293a>
    c59e:	e7de      	b.n	c55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
    c5a0:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c5a4:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    c5a8:	f006 fa9a 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c5ac:	9045      	str	r0, [sp, #276]	; 0x114
    c5ae:	e7ff      	b.n	c5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2984>
    c5b0:	9845      	ldr	r0, [sp, #276]	; 0x114
    c5b2:	07c1      	lsls	r1, r0, #31
    c5b4:	2900      	cmp	r1, #0
    c5b6:	d1ce      	bne.n	c556 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x292a>
    c5b8:	e7d1      	b.n	c55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
                trace!("[{:04x}] LD Vx, K", self.pc);
    c5ba:	f24e 201c 	movw	r0, #57884	; 0xe21c
    c5be:	f2c0 0001 	movt	r0, #1
    c5c2:	6801      	ldr	r1, [r0, #0]
    c5c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5c8:	f100 0212 	add.w	r2, r0, #18
    c5cc:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    c5d0:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    c5d4:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    c5d8:	f248 2347 	movw	r3, #33351	; 0x8247
    c5dc:	f2c0 0301 	movt	r3, #1
    c5e0:	4610      	mov	r0, r2
    c5e2:	9144      	str	r1, [sp, #272]	; 0x110
    c5e4:	4619      	mov	r1, r3
    c5e6:	f005 fb99 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c5ea:	9043      	str	r0, [sp, #268]	; 0x10c
    c5ec:	9142      	str	r1, [sp, #264]	; 0x108
    c5ee:	e7ff      	b.n	c5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29c4>
    c5f0:	9843      	ldr	r0, [sp, #268]	; 0x10c
    c5f2:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    c5f6:	9942      	ldr	r1, [sp, #264]	; 0x108
    c5f8:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    c5fc:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    c600:	f2c0 0201 	movt	r2, #1
    c604:	6812      	ldr	r2, [r2, #0]
    c606:	466b      	mov	r3, sp
    c608:	f04f 0c01 	mov.w	ip, #1
    c60c:	f8c3 c008 	str.w	ip, [r3, #8]
    c610:	605a      	str	r2, [r3, #4]
    c612:	f8c3 c000 	str.w	ip, [r3]
    c616:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c61a:	2202      	movs	r2, #2
    c61c:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    c620:	9944      	ldr	r1, [sp, #272]	; 0x110
    c622:	f001 fc26 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c626:	e7ff      	b.n	c628 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29fc>
    c628:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    c62c:	f24e 203c 	movw	r0, #57916	; 0xe23c
    c630:	f2c0 0001 	movt	r0, #1
    c634:	6802      	ldr	r2, [r0, #0]
    c636:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c63a:	f002 fbe6 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c63e:	e7ff      	b.n	c640 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a14>
    c640:	e7ff      	b.n	c642 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
                self.v[x] = self.waitkey();
    c642:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c646:	f001 fa1b 	bl	da80 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>
    c64a:	9041      	str	r0, [sp, #260]	; 0x104
    c64c:	e7ff      	b.n	c64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a22>
    c64e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c652:	280f      	cmp	r0, #15
    c654:	f200 868f 	bhi.w	d376 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x374a>
    c658:	e7ff      	b.n	c65a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a2e>
    c65a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c65e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c662:	1842      	adds	r2, r0, r1
    c664:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c666:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c66a:	f000 bd95 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c66e:	2005      	movs	r0, #5
    c670:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    c674:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    c678:	f2c0 0001 	movt	r0, #1
    c67c:	6801      	ldr	r1, [r0, #0]
    c67e:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c682:	f006 fa2d 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c686:	9040      	str	r0, [sp, #256]	; 0x100
    c688:	e01f      	b.n	c6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a9e>
    c68a:	2001      	movs	r0, #1
    c68c:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c690:	e015      	b.n	c6be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c692:	2000      	movs	r0, #0
    c694:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c698:	e011      	b.n	c6be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c69a:	2000      	movs	r0, #0
    c69c:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    c6a0:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    c6a4:	f640 2000 	movw	r0, #2560	; 0xa00
    c6a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c6ac:	f006 fa24 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c6b0:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    c6b4:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    c6b8:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    c6bc:	e00a      	b.n	c6d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2aa8>
    c6be:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    c6c2:	07c0      	lsls	r0, r0, #31
    c6c4:	2800      	cmp	r0, #0
    c6c6:	d112      	bne.n	c6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ac2>
    c6c8:	e055      	b.n	c776 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
    c6ca:	9840      	ldr	r0, [sp, #256]	; 0x100
    c6cc:	07c1      	lsls	r1, r0, #31
    c6ce:	2900      	cmp	r1, #0
    c6d0:	d1e3      	bne.n	c69a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6e>
    c6d2:	e7de      	b.n	c692 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
    c6d4:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c6d8:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    c6dc:	f006 fa00 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c6e0:	903f      	str	r0, [sp, #252]	; 0xfc
    c6e2:	e7ff      	b.n	c6e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ab8>
    c6e4:	983f      	ldr	r0, [sp, #252]	; 0xfc
    c6e6:	07c1      	lsls	r1, r0, #31
    c6e8:	2900      	cmp	r1, #0
    c6ea:	d1ce      	bne.n	c68a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a5e>
    c6ec:	e7d1      	b.n	c692 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    c6ee:	f24e 10cc 	movw	r0, #57804	; 0xe1cc
    c6f2:	f2c0 0001 	movt	r0, #1
    c6f6:	6801      	ldr	r1, [r0, #0]
    c6f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6fc:	f100 0212 	add.w	r2, r0, #18
    c700:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    c704:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    c708:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    c70c:	f248 2347 	movw	r3, #33351	; 0x8247
    c710:	f2c0 0301 	movt	r3, #1
    c714:	4610      	mov	r0, r2
    c716:	913e      	str	r1, [sp, #248]	; 0xf8
    c718:	4619      	mov	r1, r3
    c71a:	f005 faff 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c71e:	903d      	str	r0, [sp, #244]	; 0xf4
    c720:	913c      	str	r1, [sp, #240]	; 0xf0
    c722:	e7ff      	b.n	c724 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2af8>
    c724:	983d      	ldr	r0, [sp, #244]	; 0xf4
    c726:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    c72a:	993c      	ldr	r1, [sp, #240]	; 0xf0
    c72c:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    c730:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    c734:	f2c0 0201 	movt	r2, #1
    c738:	6812      	ldr	r2, [r2, #0]
    c73a:	466b      	mov	r3, sp
    c73c:	f04f 0c01 	mov.w	ip, #1
    c740:	f8c3 c008 	str.w	ip, [r3, #8]
    c744:	605a      	str	r2, [r3, #4]
    c746:	f8c3 c000 	str.w	ip, [r3]
    c74a:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c74e:	2202      	movs	r2, #2
    c750:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    c754:	993e      	ldr	r1, [sp, #248]	; 0xf8
    c756:	f001 fb8c 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c75a:	e7ff      	b.n	c75c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b30>
    c75c:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    c760:	f24e 10ec 	movw	r0, #57836	; 0xe1ec
    c764:	f2c0 0001 	movt	r0, #1
    c768:	6802      	ldr	r2, [r0, #0]
    c76a:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c76e:	f002 fb4c 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c772:	e7ff      	b.n	c774 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b48>
    c774:	e7ff      	b.n	c776 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
                self.dt = self.v[x];
    c776:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c77a:	280f      	cmp	r0, #15
    c77c:	f200 85f1 	bhi.w	d362 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3736>
    c780:	e7ff      	b.n	c782 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b56>
    c782:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c786:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c78a:	1842      	adds	r2, r0, r1
    c78c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c790:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    c794:	f000 bd00 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c798:	2005      	movs	r0, #5
    c79a:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    c79e:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    c7a2:	f2c0 0001 	movt	r0, #1
    c7a6:	6801      	ldr	r1, [r0, #0]
    c7a8:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c7ac:	f006 f998 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c7b0:	903b      	str	r0, [sp, #236]	; 0xec
    c7b2:	e01f      	b.n	c7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bc8>
    c7b4:	2001      	movs	r0, #1
    c7b6:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c7ba:	e015      	b.n	c7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c7bc:	2000      	movs	r0, #0
    c7be:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c7c2:	e011      	b.n	c7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c7c4:	2000      	movs	r0, #0
    c7c6:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    c7ca:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    c7ce:	f640 2000 	movw	r0, #2560	; 0xa00
    c7d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c7d6:	f006 f98f 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c7da:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    c7de:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    c7e2:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    c7e6:	e00a      	b.n	c7fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bd2>
    c7e8:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    c7ec:	07c0      	lsls	r0, r0, #31
    c7ee:	2800      	cmp	r0, #0
    c7f0:	d112      	bne.n	c818 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bec>
    c7f2:	e055      	b.n	c8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
    c7f4:	983b      	ldr	r0, [sp, #236]	; 0xec
    c7f6:	07c1      	lsls	r1, r0, #31
    c7f8:	2900      	cmp	r1, #0
    c7fa:	d1e3      	bne.n	c7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b98>
    c7fc:	e7de      	b.n	c7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
    c7fe:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c802:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    c806:	f006 f96b 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c80a:	903a      	str	r0, [sp, #232]	; 0xe8
    c80c:	e7ff      	b.n	c80e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2be2>
    c80e:	983a      	ldr	r0, [sp, #232]	; 0xe8
    c810:	07c1      	lsls	r1, r0, #31
    c812:	2900      	cmp	r1, #0
    c814:	d1ce      	bne.n	c7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b88>
    c816:	e7d1      	b.n	c7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    c818:	f24e 107c 	movw	r0, #57724	; 0xe17c
    c81c:	f2c0 0001 	movt	r0, #1
    c820:	6801      	ldr	r1, [r0, #0]
    c822:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c826:	f100 0212 	add.w	r2, r0, #18
    c82a:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    c82e:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    c832:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    c836:	f248 2347 	movw	r3, #33351	; 0x8247
    c83a:	f2c0 0301 	movt	r3, #1
    c83e:	4610      	mov	r0, r2
    c840:	9139      	str	r1, [sp, #228]	; 0xe4
    c842:	4619      	mov	r1, r3
    c844:	f005 fa6a 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c848:	9038      	str	r0, [sp, #224]	; 0xe0
    c84a:	9137      	str	r1, [sp, #220]	; 0xdc
    c84c:	e7ff      	b.n	c84e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c22>
    c84e:	9838      	ldr	r0, [sp, #224]	; 0xe0
    c850:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    c854:	9937      	ldr	r1, [sp, #220]	; 0xdc
    c856:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    c85a:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    c85e:	f2c0 0201 	movt	r2, #1
    c862:	6812      	ldr	r2, [r2, #0]
    c864:	466b      	mov	r3, sp
    c866:	f04f 0c01 	mov.w	ip, #1
    c86a:	f8c3 c008 	str.w	ip, [r3, #8]
    c86e:	605a      	str	r2, [r3, #4]
    c870:	f8c3 c000 	str.w	ip, [r3]
    c874:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c878:	2202      	movs	r2, #2
    c87a:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    c87e:	9939      	ldr	r1, [sp, #228]	; 0xe4
    c880:	f001 faf7 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c884:	e7ff      	b.n	c886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c5a>
    c886:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    c88a:	f24e 109c 	movw	r0, #57756	; 0xe19c
    c88e:	f2c0 0001 	movt	r0, #1
    c892:	6802      	ldr	r2, [r0, #0]
    c894:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c898:	f002 fab7 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c89c:	e7ff      	b.n	c89e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c72>
    c89e:	e7ff      	b.n	c8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
                self.st = self.v[x];
    c8a0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c8a4:	280f      	cmp	r0, #15
    c8a6:	f200 8552 	bhi.w	d34e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3722>
    c8aa:	e7ff      	b.n	c8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c80>
    c8ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c8b4:	1842      	adds	r2, r0, r1
    c8b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c8ba:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    c8be:	f000 bc6b 	b.w	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c8c2:	2005      	movs	r0, #5
    c8c4:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    c8c8:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    c8cc:	f2c0 0001 	movt	r0, #1
    c8d0:	6801      	ldr	r1, [r0, #0]
    c8d2:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c8d6:	f006 f903 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c8da:	9036      	str	r0, [sp, #216]	; 0xd8
    c8dc:	e01f      	b.n	c91e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cf2>
    c8de:	2001      	movs	r0, #1
    c8e0:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c8e4:	e015      	b.n	c912 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c8e6:	2000      	movs	r0, #0
    c8e8:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c8ec:	e011      	b.n	c912 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c8ee:	2000      	movs	r0, #0
    c8f0:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    c8f4:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    c8f8:	f640 2000 	movw	r0, #2560	; 0xa00
    c8fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c900:	f006 f8fa 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c904:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    c908:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    c90c:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    c910:	e00a      	b.n	c928 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cfc>
    c912:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    c916:	07c0      	lsls	r0, r0, #31
    c918:	2800      	cmp	r0, #0
    c91a:	d112      	bne.n	c942 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d16>
    c91c:	e055      	b.n	c9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
    c91e:	9836      	ldr	r0, [sp, #216]	; 0xd8
    c920:	07c1      	lsls	r1, r0, #31
    c922:	2900      	cmp	r1, #0
    c924:	d1e3      	bne.n	c8ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cc2>
    c926:	e7de      	b.n	c8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
    c928:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c92c:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    c930:	f006 f8d6 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c934:	9035      	str	r0, [sp, #212]	; 0xd4
    c936:	e7ff      	b.n	c938 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d0c>
    c938:	9835      	ldr	r0, [sp, #212]	; 0xd4
    c93a:	07c1      	lsls	r1, r0, #31
    c93c:	2900      	cmp	r1, #0
    c93e:	d1ce      	bne.n	c8de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cb2>
    c940:	e7d1      	b.n	c8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    c942:	f24e 102c 	movw	r0, #57644	; 0xe12c
    c946:	f2c0 0001 	movt	r0, #1
    c94a:	6801      	ldr	r1, [r0, #0]
    c94c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c950:	f100 0212 	add.w	r2, r0, #18
    c954:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    c958:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    c95c:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    c960:	f248 2347 	movw	r3, #33351	; 0x8247
    c964:	f2c0 0301 	movt	r3, #1
    c968:	4610      	mov	r0, r2
    c96a:	9134      	str	r1, [sp, #208]	; 0xd0
    c96c:	4619      	mov	r1, r3
    c96e:	f005 f9d5 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c972:	9033      	str	r0, [sp, #204]	; 0xcc
    c974:	9132      	str	r1, [sp, #200]	; 0xc8
    c976:	e7ff      	b.n	c978 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d4c>
    c978:	9833      	ldr	r0, [sp, #204]	; 0xcc
    c97a:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    c97e:	9932      	ldr	r1, [sp, #200]	; 0xc8
    c980:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    c984:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    c988:	f2c0 0201 	movt	r2, #1
    c98c:	6812      	ldr	r2, [r2, #0]
    c98e:	466b      	mov	r3, sp
    c990:	f04f 0c01 	mov.w	ip, #1
    c994:	f8c3 c008 	str.w	ip, [r3, #8]
    c998:	605a      	str	r2, [r3, #4]
    c99a:	f8c3 c000 	str.w	ip, [r3]
    c99e:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    c9a2:	2202      	movs	r2, #2
    c9a4:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    c9a8:	9934      	ldr	r1, [sp, #208]	; 0xd0
    c9aa:	f001 fa62 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c9ae:	e7ff      	b.n	c9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d84>
    c9b0:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    c9b4:	f24e 104c 	movw	r0, #57676	; 0xe14c
    c9b8:	f2c0 0001 	movt	r0, #1
    c9bc:	6802      	ldr	r2, [r0, #0]
    c9be:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    c9c2:	f002 fa22 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c9c6:	e7ff      	b.n	c9c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9c>
    c9c8:	e7ff      	b.n	c9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
                self.i = self.i.wrapping_add(self.v[x].into());
    c9ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9ce:	8a01      	ldrh	r1, [r0, #16]
    c9d0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c9d4:	2a0f      	cmp	r2, #15
    c9d6:	9131      	str	r1, [sp, #196]	; 0xc4
    c9d8:	f200 84af 	bhi.w	d33a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x370e>
    c9dc:	e7ff      	b.n	c9de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2db2>
    c9de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9e2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c9e6:	1842      	adds	r2, r0, r1
    c9e8:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c9ec:	f001 f8ad 	bl	db4a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    c9f0:	9030      	str	r0, [sp, #192]	; 0xc0
    c9f2:	e7ff      	b.n	c9f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dc8>
    c9f4:	9831      	ldr	r0, [sp, #196]	; 0xc4
    c9f6:	9930      	ldr	r1, [sp, #192]	; 0xc0
    c9f8:	f006 f95a 	bl	12cb0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    c9fc:	902f      	str	r0, [sp, #188]	; 0xbc
    c9fe:	e7ff      	b.n	ca00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dd4>
    ca00:	982f      	ldr	r0, [sp, #188]	; 0xbc
    ca02:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ca06:	8208      	strh	r0, [r1, #16]
        match (
    ca08:	e3c6      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ca0a:	2005      	movs	r0, #5
    ca0c:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    ca10:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    ca14:	f2c0 0001 	movt	r0, #1
    ca18:	6801      	ldr	r1, [r0, #0]
    ca1a:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    ca1e:	f006 f85f 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ca22:	902e      	str	r0, [sp, #184]	; 0xb8
    ca24:	e01f      	b.n	ca66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e3a>
    ca26:	2001      	movs	r0, #1
    ca28:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    ca2c:	e015      	b.n	ca5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    ca2e:	2000      	movs	r0, #0
    ca30:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    ca34:	e011      	b.n	ca5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    ca36:	2000      	movs	r0, #0
    ca38:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    ca3c:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    ca40:	f640 2000 	movw	r0, #2560	; 0xa00
    ca44:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca48:	f006 f856 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ca4c:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    ca50:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    ca54:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    ca58:	e00a      	b.n	ca70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e44>
    ca5a:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    ca5e:	07c0      	lsls	r0, r0, #31
    ca60:	2800      	cmp	r0, #0
    ca62:	d112      	bne.n	ca8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e5e>
    ca64:	e055      	b.n	cb12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
    ca66:	982e      	ldr	r0, [sp, #184]	; 0xb8
    ca68:	07c1      	lsls	r1, r0, #31
    ca6a:	2900      	cmp	r1, #0
    ca6c:	d1e3      	bne.n	ca36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e0a>
    ca6e:	e7de      	b.n	ca2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
    ca70:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    ca74:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    ca78:	f006 f832 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ca7c:	902d      	str	r0, [sp, #180]	; 0xb4
    ca7e:	e7ff      	b.n	ca80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e54>
    ca80:	982d      	ldr	r0, [sp, #180]	; 0xb4
    ca82:	07c1      	lsls	r1, r0, #31
    ca84:	2900      	cmp	r1, #0
    ca86:	d1ce      	bne.n	ca26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dfa>
    ca88:	e7d1      	b.n	ca2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
                trace!("[{:04x}] LD F, Vx", self.pc);
    ca8a:	f24e 00a8 	movw	r0, #57512	; 0xe0a8
    ca8e:	f2c0 0001 	movt	r0, #1
    ca92:	6801      	ldr	r1, [r0, #0]
    ca94:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca98:	f100 0212 	add.w	r2, r0, #18
    ca9c:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    caa0:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    caa4:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    caa8:	f248 2347 	movw	r3, #33351	; 0x8247
    caac:	f2c0 0301 	movt	r3, #1
    cab0:	4610      	mov	r0, r2
    cab2:	912c      	str	r1, [sp, #176]	; 0xb0
    cab4:	4619      	mov	r1, r3
    cab6:	f005 f931 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    caba:	902b      	str	r0, [sp, #172]	; 0xac
    cabc:	912a      	str	r1, [sp, #168]	; 0xa8
    cabe:	e7ff      	b.n	cac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e94>
    cac0:	982b      	ldr	r0, [sp, #172]	; 0xac
    cac2:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    cac6:	992a      	ldr	r1, [sp, #168]	; 0xa8
    cac8:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    cacc:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    cad0:	f2c0 0201 	movt	r2, #1
    cad4:	6812      	ldr	r2, [r2, #0]
    cad6:	466b      	mov	r3, sp
    cad8:	f04f 0c01 	mov.w	ip, #1
    cadc:	f8c3 c008 	str.w	ip, [r3, #8]
    cae0:	605a      	str	r2, [r3, #4]
    cae2:	f8c3 c000 	str.w	ip, [r3]
    cae6:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    caea:	2202      	movs	r2, #2
    caec:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    caf0:	992c      	ldr	r1, [sp, #176]	; 0xb0
    caf2:	f001 f9be 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    caf6:	e7ff      	b.n	caf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ecc>
    caf8:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    cafc:	f24e 00c8 	movw	r0, #57544	; 0xe0c8
    cb00:	f2c0 0001 	movt	r0, #1
    cb04:	6802      	ldr	r2, [r0, #0]
    cb06:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    cb0a:	f002 f97e 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cb0e:	e7ff      	b.n	cb10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee4>
    cb10:	e7ff      	b.n	cb12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
                self.i = (self.v[x] * 5).into();
    cb12:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cb16:	280f      	cmp	r0, #15
    cb18:	f200 83f9 	bhi.w	d30e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36e2>
    cb1c:	e7ff      	b.n	cb1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ef2>
    cb1e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb22:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb26:	1842      	adds	r2, r0, r1
    cb28:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cb2c:	2305      	movs	r3, #5
    cb2e:	fba2 2303 	umull	r2, r3, r2, r3
    cb32:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    cb36:	f04f 0e00 	mov.w	lr, #0
    cb3a:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    cb3e:	bf18      	it	ne
    cb40:	f04f 0c01 	movne.w	ip, #1
    cb44:	2b00      	cmp	r3, #0
    cb46:	bf18      	it	ne
    cb48:	2301      	movne	r3, #1
    cb4a:	ea43 030c 	orr.w	r3, r3, ip
    cb4e:	2b00      	cmp	r3, #0
    cb50:	9229      	str	r2, [sp, #164]	; 0xa4
    cb52:	f040 83e6 	bne.w	d322 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36f6>
    cb56:	e7ff      	b.n	cb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f2c>
    cb58:	9829      	ldr	r0, [sp, #164]	; 0xa4
    cb5a:	f000 fff6 	bl	db4a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    cb5e:	9028      	str	r0, [sp, #160]	; 0xa0
    cb60:	e7ff      	b.n	cb62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f36>
    cb62:	9828      	ldr	r0, [sp, #160]	; 0xa0
    cb64:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cb68:	8208      	strh	r0, [r1, #16]
        match (
    cb6a:	e315      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cb6c:	2005      	movs	r0, #5
    cb6e:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    cb72:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    cb76:	f2c0 0001 	movt	r0, #1
    cb7a:	6801      	ldr	r1, [r0, #0]
    cb7c:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cb80:	f005 ffae 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cb84:	9027      	str	r0, [sp, #156]	; 0x9c
    cb86:	e01f      	b.n	cbc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f9c>
    cb88:	2001      	movs	r0, #1
    cb8a:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cb8e:	e015      	b.n	cbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cb90:	2000      	movs	r0, #0
    cb92:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cb96:	e011      	b.n	cbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cb98:	2000      	movs	r0, #0
    cb9a:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    cb9e:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    cba2:	f640 2000 	movw	r0, #2560	; 0xa00
    cba6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cbaa:	f005 ffa5 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cbae:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    cbb2:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    cbb6:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    cbba:	e00a      	b.n	cbd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fa6>
    cbbc:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    cbc0:	07c0      	lsls	r0, r0, #31
    cbc2:	2800      	cmp	r0, #0
    cbc4:	d112      	bne.n	cbec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fc0>
    cbc6:	e055      	b.n	cc74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
    cbc8:	9827      	ldr	r0, [sp, #156]	; 0x9c
    cbca:	07c1      	lsls	r1, r0, #31
    cbcc:	2900      	cmp	r1, #0
    cbce:	d1e3      	bne.n	cb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f6c>
    cbd0:	e7de      	b.n	cb90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
    cbd2:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cbd6:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    cbda:	f005 ff81 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cbde:	9026      	str	r0, [sp, #152]	; 0x98
    cbe0:	e7ff      	b.n	cbe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fb6>
    cbe2:	9826      	ldr	r0, [sp, #152]	; 0x98
    cbe4:	07c1      	lsls	r1, r0, #31
    cbe6:	2900      	cmp	r1, #0
    cbe8:	d1ce      	bne.n	cb88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f5c>
    cbea:	e7d1      	b.n	cb90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
                trace!("[{:04x}] LD B, Vx", self.pc);
    cbec:	f24e 0008 	movw	r0, #57352	; 0xe008
    cbf0:	f2c0 0001 	movt	r0, #1
    cbf4:	6801      	ldr	r1, [r0, #0]
    cbf6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cbfa:	f100 0212 	add.w	r2, r0, #18
    cbfe:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    cc02:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    cc06:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    cc0a:	f248 2347 	movw	r3, #33351	; 0x8247
    cc0e:	f2c0 0301 	movt	r3, #1
    cc12:	4610      	mov	r0, r2
    cc14:	9125      	str	r1, [sp, #148]	; 0x94
    cc16:	4619      	mov	r1, r3
    cc18:	f005 f880 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cc1c:	9024      	str	r0, [sp, #144]	; 0x90
    cc1e:	9123      	str	r1, [sp, #140]	; 0x8c
    cc20:	e7ff      	b.n	cc22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ff6>
    cc22:	9824      	ldr	r0, [sp, #144]	; 0x90
    cc24:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    cc28:	9923      	ldr	r1, [sp, #140]	; 0x8c
    cc2a:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    cc2e:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    cc32:	f2c0 0201 	movt	r2, #1
    cc36:	6812      	ldr	r2, [r2, #0]
    cc38:	466b      	mov	r3, sp
    cc3a:	f04f 0c01 	mov.w	ip, #1
    cc3e:	f8c3 c008 	str.w	ip, [r3, #8]
    cc42:	605a      	str	r2, [r3, #4]
    cc44:	f8c3 c000 	str.w	ip, [r3]
    cc48:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cc4c:	2202      	movs	r2, #2
    cc4e:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    cc52:	9925      	ldr	r1, [sp, #148]	; 0x94
    cc54:	f001 f90d 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cc58:	e7ff      	b.n	cc5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x302e>
    cc5a:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    cc5e:	f24e 0028 	movw	r0, #57384	; 0xe028
    cc62:	f2c0 0001 	movt	r0, #1
    cc66:	6802      	ldr	r2, [r0, #0]
    cc68:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cc6c:	f002 f8cd 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc70:	e7ff      	b.n	cc72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3046>
    cc72:	e7ff      	b.n	cc74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
                let bcd = self.v[x];
    cc74:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cc78:	280f      	cmp	r0, #15
    cc7a:	f200 8308 	bhi.w	d28e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3662>
    cc7e:	e7ff      	b.n	cc80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3054>
    cc80:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc84:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc88:	1842      	adds	r2, r0, r1
    cc8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc8e:	4613      	mov	r3, r2
    cc90:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    cc94:	f248 5c1f 	movw	ip, #34079	; 0x851f
    cc98:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    cc9c:	fba2 2c0c 	umull	r2, ip, r2, ip
    cca0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    cca4:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    cca8:	4674      	mov	r4, lr
    ccaa:	2500      	movs	r5, #0
    ccac:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    ccb0:	9322      	str	r3, [sp, #136]	; 0x88
    ccb2:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    ccb6:	9420      	str	r4, [sp, #128]	; 0x80
    ccb8:	f040 82f3 	bne.w	d2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3676>
    ccbc:	e7ff      	b.n	ccbe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3092>
    ccbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccc2:	9920      	ldr	r1, [sp, #128]	; 0x80
    ccc4:	1842      	adds	r2, r0, r1
    ccc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ccc8:	fa5f fc83 	uxtb.w	ip, r3
    cccc:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    ccd0:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    ccd4:	fbac 450e 	umull	r4, r5, ip, lr
    ccd8:	08ed      	lsrs	r5, r5, #3
    ccda:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ccde:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    cce2:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    cce6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cce8:	fa5f fc82 	uxtb.w	ip, r2
    ccec:	fbac ce0e 	umull	ip, lr, ip, lr
    ccf0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    ccf4:	8a05      	ldrh	r5, [r0, #16]
    ccf6:	3501      	adds	r5, #1
    ccf8:	2600      	movs	r6, #0
    ccfa:	2e00      	cmp	r6, #0
    ccfc:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    cd00:	951e      	str	r5, [sp, #120]	; 0x78
    cd02:	f040 82d8 	bne.w	d2b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x368a>
    cd06:	e7ff      	b.n	cd08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30dc>
    cd08:	2000      	movs	r0, #0
    cd0a:	991e      	ldr	r1, [sp, #120]	; 0x78
    cd0c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cd10:	f040 82dd 	bne.w	d2ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36a2>
    cd14:	e7ff      	b.n	cd16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30ea>
    cd16:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd1a:	991e      	ldr	r1, [sp, #120]	; 0x78
    cd1c:	1842      	adds	r2, r0, r1
    cd1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cd20:	fa5f fc83 	uxtb.w	ip, r3
    cd24:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cd28:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cd2c:	fbac e40e 	umull	lr, r4, ip, lr
    cd30:	08e4      	lsrs	r4, r4, #3
    cd32:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cd36:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    cd3a:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    cd3e:	8a02      	ldrh	r2, [r0, #16]
    cd40:	3202      	adds	r2, #2
    cd42:	f04f 0c00 	mov.w	ip, #0
    cd46:	f1bc 0f00 	cmp.w	ip, #0
    cd4a:	921d      	str	r2, [sp, #116]	; 0x74
    cd4c:	f040 82c9 	bne.w	d2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36b6>
    cd50:	e7ff      	b.n	cd52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3126>
    cd52:	2000      	movs	r0, #0
    cd54:	991d      	ldr	r1, [sp, #116]	; 0x74
    cd56:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cd5a:	f040 82ce 	bne.w	d2fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36ce>
    cd5e:	e7ff      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3134>
    cd60:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd64:	991d      	ldr	r1, [sp, #116]	; 0x74
    cd66:	1842      	adds	r2, r0, r1
    cd68:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cd6a:	fa5f fc83 	uxtb.w	ip, r3
    cd6e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cd72:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cd76:	fbac e40e 	umull	lr, r4, ip, lr
    cd7a:	08e4      	lsrs	r4, r4, #3
    cd7c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cd80:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    cd84:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    cd88:	e206      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cd8a:	2005      	movs	r0, #5
    cd8c:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    cd90:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    cd94:	f2c0 0001 	movt	r0, #1
    cd98:	6801      	ldr	r1, [r0, #0]
    cd9a:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cd9e:	f005 fe9f 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cda2:	901c      	str	r0, [sp, #112]	; 0x70
    cda4:	e01f      	b.n	cde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ba>
    cda6:	2001      	movs	r0, #1
    cda8:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cdac:	e015      	b.n	cdda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cdae:	2000      	movs	r0, #0
    cdb0:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cdb4:	e011      	b.n	cdda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cdb6:	2000      	movs	r0, #0
    cdb8:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    cdbc:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    cdc0:	f640 2000 	movw	r0, #2560	; 0xa00
    cdc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cdc8:	f005 fe96 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cdcc:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    cdd0:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    cdd4:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    cdd8:	e00a      	b.n	cdf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31c4>
    cdda:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    cdde:	07c0      	lsls	r0, r0, #31
    cde0:	2800      	cmp	r0, #0
    cde2:	d112      	bne.n	ce0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31de>
    cde4:	e055      	b.n	ce92 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
    cde6:	981c      	ldr	r0, [sp, #112]	; 0x70
    cde8:	07c1      	lsls	r1, r0, #31
    cdea:	2900      	cmp	r1, #0
    cdec:	d1e3      	bne.n	cdb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x318a>
    cdee:	e7de      	b.n	cdae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
    cdf0:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cdf4:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    cdf8:	f005 fe72 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cdfc:	901b      	str	r0, [sp, #108]	; 0x6c
    cdfe:	e7ff      	b.n	ce00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31d4>
    ce00:	981b      	ldr	r0, [sp, #108]	; 0x6c
    ce02:	07c1      	lsls	r1, r0, #31
    ce04:	2900      	cmp	r1, #0
    ce06:	d1ce      	bne.n	cda6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x317a>
    ce08:	e7d1      	b.n	cdae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    ce0a:	f64d 7088 	movw	r0, #57224	; 0xdf88
    ce0e:	f2c0 0001 	movt	r0, #1
    ce12:	6801      	ldr	r1, [r0, #0]
    ce14:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce18:	f100 0212 	add.w	r2, r0, #18
    ce1c:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    ce20:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    ce24:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    ce28:	f248 2347 	movw	r3, #33351	; 0x8247
    ce2c:	f2c0 0301 	movt	r3, #1
    ce30:	4610      	mov	r0, r2
    ce32:	911a      	str	r1, [sp, #104]	; 0x68
    ce34:	4619      	mov	r1, r3
    ce36:	f004 ff71 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ce3a:	9019      	str	r0, [sp, #100]	; 0x64
    ce3c:	9118      	str	r1, [sp, #96]	; 0x60
    ce3e:	e7ff      	b.n	ce40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3214>
    ce40:	9819      	ldr	r0, [sp, #100]	; 0x64
    ce42:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    ce46:	9918      	ldr	r1, [sp, #96]	; 0x60
    ce48:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    ce4c:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    ce50:	f2c0 0201 	movt	r2, #1
    ce54:	6812      	ldr	r2, [r2, #0]
    ce56:	466b      	mov	r3, sp
    ce58:	f04f 0c01 	mov.w	ip, #1
    ce5c:	f8c3 c008 	str.w	ip, [r3, #8]
    ce60:	605a      	str	r2, [r3, #4]
    ce62:	f8c3 c000 	str.w	ip, [r3]
    ce66:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    ce6a:	2202      	movs	r2, #2
    ce6c:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    ce70:	991a      	ldr	r1, [sp, #104]	; 0x68
    ce72:	f000 fffe 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ce76:	e7ff      	b.n	ce78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x324c>
    ce78:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    ce7c:	f64d 70a8 	movw	r0, #57256	; 0xdfa8
    ce80:	f2c0 0001 	movt	r0, #1
    ce84:	6802      	ldr	r2, [r0, #0]
    ce86:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    ce8a:	f001 ffbe 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ce8e:	e7ff      	b.n	ce90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3264>
    ce90:	e7ff      	b.n	ce92 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
                let x = x as usize;
    ce92:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ce96:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    ce9a:	1c41      	adds	r1, r0, #1
    ce9c:	460a      	mov	r2, r1
    ce9e:	4281      	cmp	r1, r0
    cea0:	9217      	str	r2, [sp, #92]	; 0x5c
    cea2:	f0c0 81c9 	bcc.w	d238 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x360c>
    cea6:	e7ff      	b.n	cea8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x327c>
    cea8:	2000      	movs	r0, #0
    ceaa:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    ceae:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ceb0:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    ceb4:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    ceb8:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    cebc:	f001 fd37 	bl	e92e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    cec0:	9016      	str	r0, [sp, #88]	; 0x58
    cec2:	9115      	str	r1, [sp, #84]	; 0x54
    cec4:	e7ff      	b.n	cec6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x329a>
    cec6:	9816      	ldr	r0, [sp, #88]	; 0x58
    cec8:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    cecc:	9915      	ldr	r1, [sp, #84]	; 0x54
    cece:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    ced2:	e7ff      	b.n	ced4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    ced4:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    ced8:	f001 fc9e 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    cedc:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    cee0:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    cee4:	e7ff      	b.n	cee6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ba>
    cee6:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    ceea:	2800      	cmp	r0, #0
    ceec:	d001      	beq.n	cef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c6>
    ceee:	e7ff      	b.n	cef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c4>
    cef0:	e001      	b.n	cef6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ca>
        match (
    cef2:	e151      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    cef4:	defe      	udf	#254	; 0xfe
    cef6:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    cefa:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    cefe:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    cf02:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    cf06:	280f      	cmp	r0, #15
    cf08:	9014      	str	r0, [sp, #80]	; 0x50
    cf0a:	f200 81a1 	bhi.w	d250 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3624>
    cf0e:	e7ff      	b.n	cf10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32e4>
    cf10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf14:	9914      	ldr	r1, [sp, #80]	; 0x50
    cf16:	1842      	adds	r2, r0, r1
    cf18:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cf1c:	8a03      	ldrh	r3, [r0, #16]
    cf1e:	eb03 0c01 	add.w	ip, r3, r1
    cf22:	46e6      	mov	lr, ip
    cf24:	459c      	cmp	ip, r3
    cf26:	9213      	str	r2, [sp, #76]	; 0x4c
    cf28:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    cf2c:	f0c0 8199 	bcc.w	d262 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3636>
    cf30:	e7ff      	b.n	cf32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3306>
    cf32:	2000      	movs	r0, #0
    cf34:	9912      	ldr	r1, [sp, #72]	; 0x48
    cf36:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cf3a:	f040 819e 	bne.w	d27a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x364e>
    cf3e:	e7ff      	b.n	cf40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3314>
    cf40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf44:	9912      	ldr	r1, [sp, #72]	; 0x48
    cf46:	1842      	adds	r2, r0, r1
    cf48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cf4a:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    cf4e:	e7c1      	b.n	ced4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    cf50:	2005      	movs	r0, #5
    cf52:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    cf56:	f64d 60a0 	movw	r0, #56992	; 0xdea0
    cf5a:	f2c0 0001 	movt	r0, #1
    cf5e:	6801      	ldr	r1, [r0, #0]
    cf60:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    cf64:	f005 fdbc 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cf68:	9011      	str	r0, [sp, #68]	; 0x44
    cf6a:	e01f      	b.n	cfac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3380>
    cf6c:	2001      	movs	r0, #1
    cf6e:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    cf72:	e015      	b.n	cfa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cf74:	2000      	movs	r0, #0
    cf76:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    cf7a:	e011      	b.n	cfa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cf7c:	2000      	movs	r0, #0
    cf7e:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    cf82:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    cf86:	f640 2000 	movw	r0, #2560	; 0xa00
    cf8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf8e:	f005 fdb3 	bl	12af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cf92:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    cf96:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    cf9a:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    cf9e:	e00a      	b.n	cfb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x338a>
    cfa0:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    cfa4:	07c0      	lsls	r0, r0, #31
    cfa6:	2800      	cmp	r0, #0
    cfa8:	d112      	bne.n	cfd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33a4>
    cfaa:	e055      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
    cfac:	9811      	ldr	r0, [sp, #68]	; 0x44
    cfae:	07c1      	lsls	r1, r0, #31
    cfb0:	2900      	cmp	r1, #0
    cfb2:	d1e3      	bne.n	cf7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3350>
    cfb4:	e7de      	b.n	cf74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
    cfb6:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    cfba:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    cfbe:	f005 fd8f 	bl	12ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cfc2:	9010      	str	r0, [sp, #64]	; 0x40
    cfc4:	e7ff      	b.n	cfc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x339a>
    cfc6:	9810      	ldr	r0, [sp, #64]	; 0x40
    cfc8:	07c1      	lsls	r1, r0, #31
    cfca:	2900      	cmp	r1, #0
    cfcc:	d1ce      	bne.n	cf6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3340>
    cfce:	e7d1      	b.n	cf74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    cfd0:	f64d 60c4 	movw	r0, #57028	; 0xdec4
    cfd4:	f2c0 0001 	movt	r0, #1
    cfd8:	6801      	ldr	r1, [r0, #0]
    cfda:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cfde:	f100 0212 	add.w	r2, r0, #18
    cfe2:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    cfe6:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    cfea:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    cfee:	f248 2347 	movw	r3, #33351	; 0x8247
    cff2:	f2c0 0301 	movt	r3, #1
    cff6:	4610      	mov	r0, r2
    cff8:	910f      	str	r1, [sp, #60]	; 0x3c
    cffa:	4619      	mov	r1, r3
    cffc:	f004 fe8e 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d000:	900e      	str	r0, [sp, #56]	; 0x38
    d002:	910d      	str	r1, [sp, #52]	; 0x34
    d004:	e7ff      	b.n	d006 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33da>
    d006:	980e      	ldr	r0, [sp, #56]	; 0x38
    d008:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    d00c:	990d      	ldr	r1, [sp, #52]	; 0x34
    d00e:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    d012:	f64d 62e8 	movw	r2, #57064	; 0xdee8
    d016:	f2c0 0201 	movt	r2, #1
    d01a:	6812      	ldr	r2, [r2, #0]
    d01c:	466b      	mov	r3, sp
    d01e:	f04f 0c01 	mov.w	ip, #1
    d022:	f8c3 c008 	str.w	ip, [r3, #8]
    d026:	605a      	str	r2, [r3, #4]
    d028:	f8c3 c000 	str.w	ip, [r3]
    d02c:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    d030:	2202      	movs	r2, #2
    d032:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    d036:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d038:	f000 ff1b 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d03c:	e7ff      	b.n	d03e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3412>
    d03e:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    d042:	f64d 7028 	movw	r0, #57128	; 0xdf28
    d046:	f2c0 0001 	movt	r0, #1
    d04a:	6802      	ldr	r2, [r0, #0]
    d04c:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    d050:	f001 fedb 	bl	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d054:	e7ff      	b.n	d056 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342a>
    d056:	e7ff      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
                let x = x as usize;
    d058:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d05c:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    d060:	1c41      	adds	r1, r0, #1
    d062:	460a      	mov	r2, r1
    d064:	4281      	cmp	r1, r0
    d066:	920c      	str	r2, [sp, #48]	; 0x30
    d068:	f0c0 80bb 	bcc.w	d1e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35b6>
    d06c:	e7ff      	b.n	d06e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3442>
    d06e:	2000      	movs	r0, #0
    d070:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    d074:	980c      	ldr	r0, [sp, #48]	; 0x30
    d076:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    d07a:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    d07e:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    d082:	f001 fc54 	bl	e92e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d086:	900b      	str	r0, [sp, #44]	; 0x2c
    d088:	910a      	str	r1, [sp, #40]	; 0x28
    d08a:	e7ff      	b.n	d08c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3460>
    d08c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d08e:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    d092:	990a      	ldr	r1, [sp, #40]	; 0x28
    d094:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    d098:	e7ff      	b.n	d09a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d09a:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    d09e:	f001 fbbb 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d0a2:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    d0a6:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    d0aa:	e7ff      	b.n	d0ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3480>
    d0ac:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    d0b0:	2800      	cmp	r0, #0
    d0b2:	d001      	beq.n	d0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348c>
    d0b4:	e7ff      	b.n	d0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348a>
    d0b6:	e001      	b.n	d0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3490>
        match (
    d0b8:	e06e      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    d0ba:	defe      	udf	#254	; 0xfe
    d0bc:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    d0c0:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    d0c4:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    d0c8:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    d0cc:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d0d0:	8a0a      	ldrh	r2, [r1, #16]
    d0d2:	1813      	adds	r3, r2, r0
    d0d4:	469c      	mov	ip, r3
    d0d6:	4293      	cmp	r3, r2
    d0d8:	9009      	str	r0, [sp, #36]	; 0x24
    d0da:	f8cd c020 	str.w	ip, [sp, #32]
    d0de:	f0c0 808c 	bcc.w	d1fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35ce>
    d0e2:	e7ff      	b.n	d0e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34b8>
    d0e4:	2000      	movs	r0, #0
    d0e6:	9908      	ldr	r1, [sp, #32]
    d0e8:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d0ec:	f040 8091 	bne.w	d212 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35e6>
    d0f0:	e7ff      	b.n	d0f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34c6>
    d0f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d0f6:	9908      	ldr	r1, [sp, #32]
    d0f8:	1842      	adds	r2, r0, r1
    d0fa:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d100:	2b0f      	cmp	r3, #15
    d102:	9207      	str	r2, [sp, #28]
    d104:	f200 808f 	bhi.w	d226 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35fa>
    d108:	e7ff      	b.n	d10a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34de>
    d10a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d10e:	9909      	ldr	r1, [sp, #36]	; 0x24
    d110:	1842      	adds	r2, r0, r1
    d112:	9b07      	ldr	r3, [sp, #28]
    d114:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    d118:	e7bf      	b.n	d09a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d11a:	f248 2147 	movw	r1, #33351	; 0x8247
    d11e:	f2c0 0101 	movt	r1, #1
    d122:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    d126:	f004 fdf9 	bl	11d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d12a:	9006      	str	r0, [sp, #24]
    d12c:	9105      	str	r1, [sp, #20]
    d12e:	e7ff      	b.n	d130 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3504>
    d130:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    d134:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    d138:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    d13c:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    d140:	9a06      	ldr	r2, [sp, #24]
    d142:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    d146:	9b05      	ldr	r3, [sp, #20]
    d148:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    d14c:	f64e 2c8c 	movw	ip, #60044	; 0xea8c
    d150:	f2c0 0c01 	movt	ip, #1
    d154:	f8dc c000 	ldr.w	ip, [ip]
    d158:	46ee      	mov	lr, sp
    d15a:	2402      	movs	r4, #2
    d15c:	f8ce 4008 	str.w	r4, [lr, #8]
    d160:	f8ce c004 	str.w	ip, [lr, #4]
    d164:	f8ce 4000 	str.w	r4, [lr]
    d168:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d16c:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    d170:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    d174:	4622      	mov	r2, r4
    d176:	f000 fe7c 	bl	de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d17a:	e7ff      	b.n	d17c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3550>
    d17c:	f64e 20b0 	movw	r0, #60080	; 0xeab0
    d180:	f2c0 0001 	movt	r0, #1
    d184:	f009 fc4b 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d188:	9004      	str	r0, [sp, #16]
    d18a:	e7ff      	b.n	d18c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3560>
    d18c:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d190:	9904      	ldr	r1, [sp, #16]
    d192:	f009 fc81 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d196:	defe      	udf	#254	; 0xfe
        }
    }
    d198:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    d19c:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    d19e:	f64d 6044 	movw	r0, #56900	; 0xde44
    d1a2:	f2c0 0001 	movt	r0, #1
    d1a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d1aa:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d1ae:	f009 fc53 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1b2:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d1b4:	f64d 6070 	movw	r0, #56944	; 0xde70
    d1b8:	f2c0 0001 	movt	r0, #1
    d1bc:	f64d 6254 	movw	r2, #56916	; 0xde54
    d1c0:	f2c0 0201 	movt	r2, #1
    d1c4:	211c      	movs	r1, #28
    d1c6:	f009 fc31 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d1ca:	defe      	udf	#254	; 0xfe
    d1cc:	f64d 608c 	movw	r0, #56972	; 0xde8c
    d1d0:	f2c0 0001 	movt	r0, #1
    d1d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d1d8:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d1dc:	f009 fc3c 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1e0:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d1e2:	f64d 6070 	movw	r0, #56944	; 0xde70
    d1e6:	f2c0 0001 	movt	r0, #1
    d1ea:	f64d 722c 	movw	r2, #57132	; 0xdf2c
    d1ee:	f2c0 0201 	movt	r2, #1
    d1f2:	211c      	movs	r1, #28
    d1f4:	f009 fc1a 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d1f8:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    d1fa:	f64d 6070 	movw	r0, #56944	; 0xde70
    d1fe:	f2c0 0001 	movt	r0, #1
    d202:	f64d 723c 	movw	r2, #57148	; 0xdf3c
    d206:	f2c0 0201 	movt	r2, #1
    d20a:	211c      	movs	r1, #28
    d20c:	f009 fc0e 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d210:	defe      	udf	#254	; 0xfe
    d212:	f64d 704c 	movw	r0, #57164	; 0xdf4c
    d216:	f2c0 0001 	movt	r0, #1
    d21a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d21e:	9908      	ldr	r1, [sp, #32]
    d220:	f009 fc1a 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d224:	defe      	udf	#254	; 0xfe
    d226:	f64d 705c 	movw	r0, #57180	; 0xdf5c
    d22a:	f2c0 0001 	movt	r0, #1
    d22e:	2210      	movs	r2, #16
    d230:	9909      	ldr	r1, [sp, #36]	; 0x24
    d232:	f009 fc11 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d236:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d238:	f64d 6070 	movw	r0, #56944	; 0xde70
    d23c:	f2c0 0001 	movt	r0, #1
    d240:	f64d 72ac 	movw	r2, #57260	; 0xdfac
    d244:	f2c0 0201 	movt	r2, #1
    d248:	211c      	movs	r1, #28
    d24a:	f009 fbef 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d24e:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    d250:	f64d 70bc 	movw	r0, #57276	; 0xdfbc
    d254:	f2c0 0001 	movt	r0, #1
    d258:	2210      	movs	r2, #16
    d25a:	9914      	ldr	r1, [sp, #80]	; 0x50
    d25c:	f009 fbfc 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d260:	defe      	udf	#254	; 0xfe
    d262:	f64d 6070 	movw	r0, #56944	; 0xde70
    d266:	f2c0 0001 	movt	r0, #1
    d26a:	f64d 72cc 	movw	r2, #57292	; 0xdfcc
    d26e:	f2c0 0201 	movt	r2, #1
    d272:	211c      	movs	r1, #28
    d274:	f009 fbda 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d278:	defe      	udf	#254	; 0xfe
    d27a:	f64d 70dc 	movw	r0, #57308	; 0xdfdc
    d27e:	f2c0 0001 	movt	r0, #1
    d282:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d286:	9912      	ldr	r1, [sp, #72]	; 0x48
    d288:	f009 fbe6 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d28c:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    d28e:	f24e 002c 	movw	r0, #57388	; 0xe02c
    d292:	f2c0 0001 	movt	r0, #1
    d296:	2210      	movs	r2, #16
    d298:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d29c:	f009 fbdc 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2a0:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    d2a2:	f24e 003c 	movw	r0, #57404	; 0xe03c
    d2a6:	f2c0 0001 	movt	r0, #1
    d2aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d2ae:	9920      	ldr	r1, [sp, #128]	; 0x80
    d2b0:	f009 fbd2 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2b4:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    d2b6:	f64d 6070 	movw	r0, #56944	; 0xde70
    d2ba:	f2c0 0001 	movt	r0, #1
    d2be:	f24e 024c 	movw	r2, #57420	; 0xe04c
    d2c2:	f2c0 0201 	movt	r2, #1
    d2c6:	211c      	movs	r1, #28
    d2c8:	f009 fbb0 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d2cc:	defe      	udf	#254	; 0xfe
    d2ce:	f24e 005c 	movw	r0, #57436	; 0xe05c
    d2d2:	f2c0 0001 	movt	r0, #1
    d2d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d2da:	991e      	ldr	r1, [sp, #120]	; 0x78
    d2dc:	f009 fbbc 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2e0:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    d2e2:	f64d 6070 	movw	r0, #56944	; 0xde70
    d2e6:	f2c0 0001 	movt	r0, #1
    d2ea:	f24e 026c 	movw	r2, #57452	; 0xe06c
    d2ee:	f2c0 0201 	movt	r2, #1
    d2f2:	211c      	movs	r1, #28
    d2f4:	f009 fb9a 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d2f8:	defe      	udf	#254	; 0xfe
    d2fa:	f24e 007c 	movw	r0, #57468	; 0xe07c
    d2fe:	f2c0 0001 	movt	r0, #1
    d302:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d306:	991d      	ldr	r1, [sp, #116]	; 0x74
    d308:	f009 fba6 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d30c:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    d30e:	f24e 00cc 	movw	r0, #57548	; 0xe0cc
    d312:	f2c0 0001 	movt	r0, #1
    d316:	2210      	movs	r2, #16
    d318:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d31c:	f009 fb9c 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d320:	defe      	udf	#254	; 0xfe
    d322:	f24e 00f0 	movw	r0, #57584	; 0xe0f0
    d326:	f2c0 0001 	movt	r0, #1
    d32a:	f24e 02dc 	movw	r2, #57564	; 0xe0dc
    d32e:	f2c0 0201 	movt	r2, #1
    d332:	2121      	movs	r1, #33	; 0x21
    d334:	f009 fb7a 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d338:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    d33a:	f24e 1050 	movw	r0, #57680	; 0xe150
    d33e:	f2c0 0001 	movt	r0, #1
    d342:	2210      	movs	r2, #16
    d344:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d348:	f009 fb86 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d34c:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    d34e:	f24e 10a0 	movw	r0, #57760	; 0xe1a0
    d352:	f2c0 0001 	movt	r0, #1
    d356:	2210      	movs	r2, #16
    d358:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d35c:	f009 fb7c 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d360:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    d362:	f24e 10f0 	movw	r0, #57840	; 0xe1f0
    d366:	f2c0 0001 	movt	r0, #1
    d36a:	2210      	movs	r2, #16
    d36c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d370:	f009 fb72 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d374:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    d376:	f24e 2040 	movw	r0, #57920	; 0xe240
    d37a:	f2c0 0001 	movt	r0, #1
    d37e:	2210      	movs	r2, #16
    d380:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d384:	f009 fb68 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d388:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    d38a:	f24e 2090 	movw	r0, #58000	; 0xe290
    d38e:	f2c0 0001 	movt	r0, #1
    d392:	2210      	movs	r2, #16
    d394:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d398:	f009 fb5e 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d39c:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    d39e:	f24e 20e0 	movw	r0, #58080	; 0xe2e0
    d3a2:	f2c0 0001 	movt	r0, #1
    d3a6:	2210      	movs	r2, #16
    d3a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3ac:	f009 fb54 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3b0:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    d3b2:	f24e 3024 	movw	r0, #58148	; 0xe324
    d3b6:	f2c0 0001 	movt	r0, #1
    d3ba:	2210      	movs	r2, #16
    d3bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3c0:	f009 fb4a 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3c4:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    d3c6:	f24e 3078 	movw	r0, #58232	; 0xe378
    d3ca:	f2c0 0001 	movt	r0, #1
    d3ce:	2210      	movs	r2, #16
    d3d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3d4:	f009 fb40 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3d8:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    d3da:	f24e 3088 	movw	r0, #58248	; 0xe388
    d3de:	f2c0 0001 	movt	r0, #1
    d3e2:	2210      	movs	r2, #16
    d3e4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d3e8:	f009 fb36 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3ec:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    d3ee:	f64d 6070 	movw	r0, #56944	; 0xde70
    d3f2:	f2c0 0001 	movt	r0, #1
    d3f6:	f24e 3298 	movw	r2, #58264	; 0xe398
    d3fa:	f2c0 0201 	movt	r2, #1
    d3fe:	211c      	movs	r1, #28
    d400:	f009 fb14 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d404:	defe      	udf	#254	; 0xfe
    d406:	f24e 30a8 	movw	r0, #58280	; 0xe3a8
    d40a:	f2c0 0001 	movt	r0, #1
    d40e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d412:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d414:	f009 fb20 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d418:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    d41a:	f64d 6070 	movw	r0, #56944	; 0xde70
    d41e:	f2c0 0001 	movt	r0, #1
    d422:	f24e 32b8 	movw	r2, #58296	; 0xe3b8
    d426:	f2c0 0201 	movt	r2, #1
    d42a:	211c      	movs	r1, #28
    d42c:	f009 fafe 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d430:	defe      	udf	#254	; 0xfe
    d432:	f24e 30d0 	movw	r0, #58320	; 0xe3d0
    d436:	f2c0 0001 	movt	r0, #1
    d43a:	f24e 32b8 	movw	r2, #58296	; 0xe3b8
    d43e:	f2c0 0201 	movt	r2, #1
    d442:	2139      	movs	r1, #57	; 0x39
    d444:	f009 faf2 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d448:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    d44a:	f64d 6070 	movw	r0, #56944	; 0xde70
    d44e:	f2c0 0001 	movt	r0, #1
    d452:	f24e 420c 	movw	r2, #58380	; 0xe40c
    d456:	f2c0 0201 	movt	r2, #1
    d45a:	211c      	movs	r1, #28
    d45c:	f009 fae6 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d460:	defe      	udf	#254	; 0xfe
    d462:	f24e 30d0 	movw	r0, #58320	; 0xe3d0
    d466:	f2c0 0001 	movt	r0, #1
    d46a:	f24e 420c 	movw	r2, #58380	; 0xe40c
    d46e:	f2c0 0201 	movt	r2, #1
    d472:	2139      	movs	r1, #57	; 0x39
    d474:	f009 fada 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d478:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    d47a:	f24e 4030 	movw	r0, #58416	; 0xe430
    d47e:	f2c0 0001 	movt	r0, #1
    d482:	f24e 421c 	movw	r2, #58396	; 0xe41c
    d486:	f2c0 0201 	movt	r2, #1
    d48a:	2121      	movs	r1, #33	; 0x21
    d48c:	f009 face 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d490:	defe      	udf	#254	; 0xfe
    d492:	f24e 4070 	movw	r0, #58480	; 0xe470
    d496:	f2c0 0001 	movt	r0, #1
    d49a:	f24e 4254 	movw	r2, #58452	; 0xe454
    d49e:	f2c0 0201 	movt	r2, #1
    d4a2:	2123      	movs	r1, #35	; 0x23
    d4a4:	f009 fac2 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d4a8:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    d4aa:	f24e 40d4 	movw	r0, #58580	; 0xe4d4
    d4ae:	f2c0 0001 	movt	r0, #1
    d4b2:	2210      	movs	r2, #16
    d4b4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4b8:	f009 face 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4bc:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    d4be:	f24e 50a4 	movw	r0, #58788	; 0xe5a4
    d4c2:	f2c0 0001 	movt	r0, #1
    d4c6:	2210      	movs	r2, #16
    d4c8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4cc:	f009 fac4 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4d0:	defe      	udf	#254	; 0xfe
    d4d2:	f24e 50b4 	movw	r0, #58804	; 0xe5b4
    d4d6:	f2c0 0001 	movt	r0, #1
    d4da:	2210      	movs	r2, #16
    d4dc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d4e0:	f009 faba 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4e4:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    d4e6:	f24e 6004 	movw	r0, #58884	; 0xe604
    d4ea:	f2c0 0001 	movt	r0, #1
    d4ee:	2210      	movs	r2, #16
    d4f0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4f4:	f009 fab0 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4f8:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    d4fa:	f24e 6014 	movw	r0, #58900	; 0xe614
    d4fe:	f2c0 0001 	movt	r0, #1
    d502:	2210      	movs	r2, #16
    d504:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d508:	f009 faa6 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d50c:	defe      	udf	#254	; 0xfe
    d50e:	f24e 6024 	movw	r0, #58916	; 0xe624
    d512:	f2c0 0001 	movt	r0, #1
    d516:	2210      	movs	r2, #16
    d518:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d51c:	f009 fa9c 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d520:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    d522:	f24e 6078 	movw	r0, #59000	; 0xe678
    d526:	f2c0 0001 	movt	r0, #1
    d52a:	2210      	movs	r2, #16
    d52c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d530:	f009 fa92 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d534:	defe      	udf	#254	; 0xfe
    d536:	f24e 6088 	movw	r0, #59016	; 0xe688
    d53a:	f2c0 0001 	movt	r0, #1
    d53e:	2210      	movs	r2, #16
    d540:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d544:	f009 fa88 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d548:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d54a:	f24e 6098 	movw	r0, #59032	; 0xe698
    d54e:	f2c0 0001 	movt	r0, #1
    d552:	2210      	movs	r2, #16
    d554:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d558:	f009 fa7e 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d55c:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    d55e:	f24e 60e8 	movw	r0, #59112	; 0xe6e8
    d562:	f2c0 0001 	movt	r0, #1
    d566:	2210      	movs	r2, #16
    d568:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d56c:	f009 fa74 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d570:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    d572:	f24e 60f8 	movw	r0, #59128	; 0xe6f8
    d576:	f2c0 0001 	movt	r0, #1
    d57a:	2210      	movs	r2, #16
    d57c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d580:	f009 fa6a 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d584:	defe      	udf	#254	; 0xfe
    d586:	f24e 7008 	movw	r0, #59144	; 0xe708
    d58a:	f2c0 0001 	movt	r0, #1
    d58e:	2210      	movs	r2, #16
    d590:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d594:	f009 fa60 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d598:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    d59a:	f24e 7058 	movw	r0, #59224	; 0xe758
    d59e:	f2c0 0001 	movt	r0, #1
    d5a2:	2210      	movs	r2, #16
    d5a4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5a8:	f009 fa56 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5ac:	defe      	udf	#254	; 0xfe
    d5ae:	f24e 7068 	movw	r0, #59240	; 0xe768
    d5b2:	f2c0 0001 	movt	r0, #1
    d5b6:	2210      	movs	r2, #16
    d5b8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d5bc:	f009 fa4c 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5c0:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d5c2:	f24e 7078 	movw	r0, #59256	; 0xe778
    d5c6:	f2c0 0001 	movt	r0, #1
    d5ca:	2210      	movs	r2, #16
    d5cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5d0:	f009 fa42 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5d4:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    d5d6:	f24e 70c8 	movw	r0, #59336	; 0xe7c8
    d5da:	f2c0 0001 	movt	r0, #1
    d5de:	2210      	movs	r2, #16
    d5e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5e4:	f009 fa38 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5e8:	defe      	udf	#254	; 0xfe
    d5ea:	f24e 70d8 	movw	r0, #59352	; 0xe7d8
    d5ee:	f2c0 0001 	movt	r0, #1
    d5f2:	2210      	movs	r2, #16
    d5f4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d5f8:	f009 fa2e 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5fc:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d5fe:	f24e 70e8 	movw	r0, #59368	; 0xe7e8
    d602:	f2c0 0001 	movt	r0, #1
    d606:	2210      	movs	r2, #16
    d608:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d60c:	f009 fa24 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d610:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    d612:	f64e 0038 	movw	r0, #59448	; 0xe838
    d616:	f2c0 0001 	movt	r0, #1
    d61a:	2210      	movs	r2, #16
    d61c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d620:	f009 fa1a 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d624:	defe      	udf	#254	; 0xfe
    d626:	f64e 0048 	movw	r0, #59464	; 0xe848
    d62a:	f2c0 0001 	movt	r0, #1
    d62e:	2210      	movs	r2, #16
    d630:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d634:	f009 fa10 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d638:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    d63a:	f64e 0098 	movw	r0, #59544	; 0xe898
    d63e:	f2c0 0001 	movt	r0, #1
    d642:	2210      	movs	r2, #16
    d644:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d648:	f009 fa06 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d64c:	defe      	udf	#254	; 0xfe
    d64e:	f64e 00a8 	movw	r0, #59560	; 0xe8a8
    d652:	f2c0 0001 	movt	r0, #1
    d656:	2210      	movs	r2, #16
    d658:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d65c:	f009 f9fc 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d660:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    d662:	f64e 00f8 	movw	r0, #59640	; 0xe8f8
    d666:	f2c0 0001 	movt	r0, #1
    d66a:	2210      	movs	r2, #16
    d66c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d670:	f009 f9f2 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d674:	defe      	udf	#254	; 0xfe
    d676:	f64e 1008 	movw	r0, #59656	; 0xe908
    d67a:	f2c0 0001 	movt	r0, #1
    d67e:	2210      	movs	r2, #16
    d680:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d684:	f009 f9e8 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d688:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    d68a:	f64e 1058 	movw	r0, #59736	; 0xe958
    d68e:	f2c0 0001 	movt	r0, #1
    d692:	2210      	movs	r2, #16
    d694:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d698:	f009 f9de 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d69c:	defe      	udf	#254	; 0xfe
    d69e:	f64e 1068 	movw	r0, #59752	; 0xe968
    d6a2:	f2c0 0001 	movt	r0, #1
    d6a6:	2210      	movs	r2, #16
    d6a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6ac:	f009 f9d4 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6b0:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    d6b2:	f64e 10b8 	movw	r0, #59832	; 0xe9b8
    d6b6:	f2c0 0001 	movt	r0, #1
    d6ba:	2210      	movs	r2, #16
    d6bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6c0:	f009 f9ca 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6c4:	defe      	udf	#254	; 0xfe
    d6c6:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
    d6ca:	f2c0 0001 	movt	r0, #1
    d6ce:	2210      	movs	r2, #16
    d6d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6d4:	f009 f9c0 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6d8:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    d6da:	f64e 2018 	movw	r0, #59928	; 0xea18
    d6de:	f2c0 0001 	movt	r0, #1
    d6e2:	2210      	movs	r2, #16
    d6e4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6e8:	f009 f9b6 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6ec:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    d6ee:	f64e 3000 	movw	r0, #60160	; 0xeb00
    d6f2:	f2c0 0001 	movt	r0, #1
    d6f6:	2210      	movs	r2, #16
    d6f8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6fc:	f009 f9ac 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d700:	defe      	udf	#254	; 0xfe
    d702:	f64e 3010 	movw	r0, #60176	; 0xeb10
    d706:	f2c0 0001 	movt	r0, #1
    d70a:	2210      	movs	r2, #16
    d70c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d710:	f009 f9a2 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d714:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    d716:	f64e 3060 	movw	r0, #60256	; 0xeb60
    d71a:	f2c0 0001 	movt	r0, #1
    d71e:	2210      	movs	r2, #16
    d720:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d724:	f009 f998 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d728:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    d72a:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    d72e:	f2c0 0001 	movt	r0, #1
    d732:	2210      	movs	r2, #16
    d734:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d738:	f009 f98e 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d73c:	defe      	udf	#254	; 0xfe

0000d73e <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d73e:	b580      	push	{r7, lr}
    d740:	b086      	sub	sp, #24
    d742:	9104      	str	r1, [sp, #16]
    d744:	9205      	str	r2, [sp, #20]
    d746:	6809      	ldr	r1, [r1, #0]
    d748:	6809      	ldr	r1, [r1, #0]
    d74a:	2300      	movs	r3, #0
    d74c:	9301      	str	r3, [sp, #4]
    d74e:	9102      	str	r1, [sp, #8]
    d750:	9203      	str	r2, [sp, #12]
    d752:	9901      	ldr	r1, [sp, #4]
    d754:	9a02      	ldr	r2, [sp, #8]
    d756:	9b03      	ldr	r3, [sp, #12]
    d758:	f005 fb4b 	bl	12df2 <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>
    d75c:	e7ff      	b.n	d75e <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E+0x20>
    d75e:	b006      	add	sp, #24
    d760:	bd80      	pop	{r7, pc}

0000d762 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>:
    d762:	b084      	sub	sp, #16
    d764:	9002      	str	r0, [sp, #8]
    d766:	9103      	str	r1, [sp, #12]
    d768:	6800      	ldr	r0, [r0, #0]
    d76a:	9000      	str	r0, [sp, #0]
    d76c:	9101      	str	r1, [sp, #4]
    d76e:	9800      	ldr	r0, [sp, #0]
    d770:	9901      	ldr	r1, [sp, #4]
    d772:	b004      	add	sp, #16
    d774:	4770      	bx	lr

0000d776 <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>:
    fn jump(&mut self, pc: u16) {
    d776:	b082      	sub	sp, #8
    d778:	460a      	mov	r2, r1
    d77a:	9000      	str	r0, [sp, #0]
    d77c:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    d780:	8241      	strh	r1, [r0, #18]
    }
    d782:	b002      	add	sp, #8
    d784:	4770      	bx	lr

0000d786 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>:
    fn load(&mut self, rom: &[u8]) {
    d786:	b580      	push	{r7, lr}
    d788:	b08a      	sub	sp, #40	; 0x28
    d78a:	9105      	str	r1, [sp, #20]
    d78c:	9206      	str	r2, [sp, #24]
    d78e:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d790:	3047      	adds	r0, #71	; 0x47
    d792:	9905      	ldr	r1, [sp, #20]
    d794:	9a06      	ldr	r2, [sp, #24]
    d796:	9004      	str	r0, [sp, #16]
    d798:	4608      	mov	r0, r1
    d79a:	4611      	mov	r1, r2
    d79c:	f001 f8a0 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d7a0:	9003      	str	r0, [sp, #12]
    d7a2:	e7ff      	b.n	d7a4 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x1e>
    d7a4:	9803      	ldr	r0, [sp, #12]
    d7a6:	f500 7100 	add.w	r1, r0, #512	; 0x200
    d7aa:	460a      	mov	r2, r1
    d7ac:	4281      	cmp	r1, r0
    d7ae:	9202      	str	r2, [sp, #8]
    d7b0:	d318      	bcc.n	d7e4 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5e>
    d7b2:	e7ff      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x2e>
    d7b4:	f44f 7000 	mov.w	r0, #512	; 0x200
    d7b8:	9007      	str	r0, [sp, #28]
    d7ba:	9802      	ldr	r0, [sp, #8]
    d7bc:	9008      	str	r0, [sp, #32]
    d7be:	9a07      	ldr	r2, [sp, #28]
    d7c0:	9b08      	ldr	r3, [sp, #32]
    d7c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d7c6:	9804      	ldr	r0, [sp, #16]
    d7c8:	f000 fb8c 	bl	dee4 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>
    d7cc:	9001      	str	r0, [sp, #4]
    d7ce:	9100      	str	r1, [sp, #0]
    d7d0:	e7ff      	b.n	d7d2 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x4c>
    d7d2:	9a05      	ldr	r2, [sp, #20]
    d7d4:	9b06      	ldr	r3, [sp, #24]
    d7d6:	9801      	ldr	r0, [sp, #4]
    d7d8:	9900      	ldr	r1, [sp, #0]
    d7da:	f001 fe4b 	bl	f474 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    d7de:	e7ff      	b.n	d7e0 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5a>
    }
    d7e0:	b00a      	add	sp, #40	; 0x28
    d7e2:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d7e4:	f64d 6070 	movw	r0, #56944	; 0xde70
    d7e8:	f2c0 0001 	movt	r0, #1
    d7ec:	f64e 520c 	movw	r2, #60684	; 0xed0c
    d7f0:	f2c0 0201 	movt	r2, #1
    d7f4:	211c      	movs	r1, #28
    d7f6:	f009 f919 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d7fa:	defe      	udf	#254	; 0xfe

0000d7fc <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>:
    fn next(&mut self) {
    d7fc:	b580      	push	{r7, lr}
    d7fe:	b084      	sub	sp, #16
    d800:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    d802:	8a41      	ldrh	r1, [r0, #18]
    d804:	2202      	movs	r2, #2
    d806:	9002      	str	r0, [sp, #8]
    d808:	4608      	mov	r0, r1
    d80a:	4611      	mov	r1, r2
    d80c:	f005 fa50 	bl	12cb0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    d810:	9001      	str	r0, [sp, #4]
    d812:	e7ff      	b.n	d814 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x18>
    d814:	9802      	ldr	r0, [sp, #8]
    d816:	9901      	ldr	r1, [sp, #4]
    d818:	f7ff ffad 	bl	d776 <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    d81c:	e7ff      	b.n	d81e <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x22>
    }
    d81e:	b004      	add	sp, #16
    d820:	bd80      	pop	{r7, pc}

0000d822 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>:
    fn push(&mut self, item: u16) {
    d822:	b580      	push	{r7, lr}
    d824:	b086      	sub	sp, #24
    d826:	460a      	mov	r2, r1
    d828:	9004      	str	r0, [sp, #16]
    d82a:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    d82e:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d832:	460b      	mov	r3, r1
    d834:	290f      	cmp	r1, #15
    d836:	9003      	str	r0, [sp, #12]
    d838:	9202      	str	r2, [sp, #8]
    d83a:	9301      	str	r3, [sp, #4]
    d83c:	d813      	bhi.n	d866 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x44>
    d83e:	e7ff      	b.n	d840 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x1e>
    d840:	9803      	ldr	r0, [sp, #12]
    d842:	9901      	ldr	r1, [sp, #4]
    d844:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d848:	9b02      	ldr	r3, [sp, #8]
    d84a:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    d84c:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d850:	2101      	movs	r1, #1
    d852:	f005 f990 	bl	12b76 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    d856:	9000      	str	r0, [sp, #0]
    d858:	e7ff      	b.n	d85a <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x38>
    d85a:	9800      	ldr	r0, [sp, #0]
    d85c:	9903      	ldr	r1, [sp, #12]
    d85e:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    d862:	b006      	add	sp, #24
    d864:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    d866:	f64e 501c 	movw	r0, #60700	; 0xed1c
    d86a:	f2c0 0001 	movt	r0, #1
    d86e:	2210      	movs	r2, #16
    d870:	9901      	ldr	r1, [sp, #4]
    d872:	f009 f8f1 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d876:	defe      	udf	#254	; 0xfe

0000d878 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>:
    fn tick(&mut self) {
    d878:	b580      	push	{r7, lr}
    d87a:	b084      	sub	sp, #16
    d87c:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    d87e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d882:	2900      	cmp	r1, #0
    d884:	9002      	str	r0, [sp, #8]
    d886:	d00f      	beq.n	d8a8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
    d888:	e7ff      	b.n	d88a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x12>
            self.dt -= 1;
    d88a:	9802      	ldr	r0, [sp, #8]
    d88c:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d890:	3901      	subs	r1, #1
    d892:	b2ca      	uxtb	r2, r1
    d894:	460b      	mov	r3, r1
    d896:	428a      	cmp	r2, r1
    d898:	9301      	str	r3, [sp, #4]
    d89a:	d126      	bne.n	d8ea <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x72>
    d89c:	e7ff      	b.n	d89e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x26>
    d89e:	9801      	ldr	r0, [sp, #4]
    d8a0:	9902      	ldr	r1, [sp, #8]
    d8a2:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    d8a6:	e7ff      	b.n	d8a8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
        if self.st > 0 {
    d8a8:	9802      	ldr	r0, [sp, #8]
    d8aa:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d8ae:	2900      	cmp	r1, #0
    d8b0:	d019      	beq.n	d8e6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    d8b2:	e7ff      	b.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x3c>
            self.st -= 1;
    d8b4:	9802      	ldr	r0, [sp, #8]
    d8b6:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d8ba:	3901      	subs	r1, #1
    d8bc:	b2ca      	uxtb	r2, r1
    d8be:	460b      	mov	r3, r1
    d8c0:	428a      	cmp	r2, r1
    d8c2:	9300      	str	r3, [sp, #0]
    d8c4:	d11d      	bne.n	d902 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x8a>
    d8c6:	e7ff      	b.n	d8c8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x50>
    d8c8:	9800      	ldr	r0, [sp, #0]
    d8ca:	9902      	ldr	r1, [sp, #8]
    d8cc:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    d8d0:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    d8d4:	2a00      	cmp	r2, #0
    d8d6:	d105      	bne.n	d8e4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
    d8d8:	e7ff      	b.n	d8da <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x62>
                self.hw.beep();
    d8da:	9802      	ldr	r0, [sp, #8]
    d8dc:	f7fc f88b 	bl	99f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>
    d8e0:	e7ff      	b.n	d8e2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6a>
            if self.st == 0 {
    d8e2:	e7ff      	b.n	d8e4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
        if self.st > 0 {
    d8e4:	e7ff      	b.n	d8e6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    }
    d8e6:	b004      	add	sp, #16
    d8e8:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    d8ea:	f24e 4030 	movw	r0, #58416	; 0xe430
    d8ee:	f2c0 0001 	movt	r0, #1
    d8f2:	f64e 522c 	movw	r2, #60716	; 0xed2c
    d8f6:	f2c0 0201 	movt	r2, #1
    d8fa:	2121      	movs	r1, #33	; 0x21
    d8fc:	f009 f896 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d900:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    d902:	f24e 4030 	movw	r0, #58416	; 0xe430
    d906:	f2c0 0001 	movt	r0, #1
    d90a:	f64e 523c 	movw	r2, #60732	; 0xed3c
    d90e:	f2c0 0201 	movt	r2, #1
    d912:	2121      	movs	r1, #33	; 0x21
    d914:	f009 f88a 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d918:	defe      	udf	#254	; 0xfe

0000d91a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>:
    fn sched(&mut self) {
    d91a:	b510      	push	{r4, lr}
    d91c:	b098      	sub	sp, #96	; 0x60
    d91e:	9015      	str	r0, [sp, #84]	; 0x54
        if self.hw.sched() {
    d920:	900b      	str	r0, [sp, #44]	; 0x2c
    d922:	f7fc f86c 	bl	99fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>
    d926:	900a      	str	r0, [sp, #40]	; 0x28
    d928:	e7ff      	b.n	d92a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x10>
    d92a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d92c:	07c1      	lsls	r1, r0, #31
    d92e:	2900      	cmp	r1, #0
    d930:	d005      	beq.n	d93e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
    d932:	e7ff      	b.n	d934 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x1a>
            self.shutdown();
    d934:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d936:	f000 f900 	bl	db3a <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>
    d93a:	e7ff      	b.n	d93c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x22>
        if self.hw.sched() {
    d93c:	e7ff      	b.n	d93e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
        if let Some(t) = self.time {
    d93e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d940:	6801      	ldr	r1, [r0, #0]
    d942:	2901      	cmp	r1, #1
    d944:	d006      	beq.n	d954 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x3a>
    d946:	e7ff      	b.n	d948 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x2e>
            self.time = Some(self.hw.clock());
    d948:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d94a:	f7fb fff4 	bl	9936 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d94e:	9109      	str	r1, [sp, #36]	; 0x24
    d950:	9008      	str	r0, [sp, #32]
    d952:	e040      	b.n	d9d6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xbc>
        if let Some(t) = self.time {
    d954:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d956:	6881      	ldr	r1, [r0, #8]
    d958:	68c2      	ldr	r2, [r0, #12]
    d95a:	9217      	str	r2, [sp, #92]	; 0x5c
    d95c:	9116      	str	r1, [sp, #88]	; 0x58
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    d95e:	9107      	str	r1, [sp, #28]
    d960:	9206      	str	r2, [sp, #24]
    d962:	f7fb ffe8 	bl	9936 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d966:	9105      	str	r1, [sp, #20]
    d968:	9004      	str	r0, [sp, #16]
    d96a:	e7ff      	b.n	d96c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x52>
    d96c:	9804      	ldr	r0, [sp, #16]
    d96e:	9905      	ldr	r1, [sp, #20]
    d970:	9a07      	ldr	r2, [sp, #28]
    d972:	9b06      	ldr	r3, [sp, #24]
    d974:	f005 f9be 	bl	12cf4 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>
    d978:	9103      	str	r1, [sp, #12]
    d97a:	9002      	str	r0, [sp, #8]
    d97c:	e7ff      	b.n	d97e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x64>
    d97e:	f245 002b 	movw	r0, #20523	; 0x502b
    d982:	f2c0 00fe 	movt	r0, #254	; 0xfe
    d986:	9902      	ldr	r1, [sp, #8]
    d988:	1a08      	subs	r0, r1, r0
    d98a:	9a03      	ldr	r2, [sp, #12]
    d98c:	f172 0300 	sbcs.w	r3, r2, #0
    d990:	d320      	bcc.n	d9d4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
    d992:	e7ff      	b.n	d994 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x7a>
                self.tick();
    d994:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d996:	f7ff ff6f 	bl	d878 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>
    d99a:	e7ff      	b.n	d99c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x82>
                self.time = Some(self.hw.clock());
    d99c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d99e:	f7fb ffca 	bl	9936 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d9a2:	9101      	str	r1, [sp, #4]
    d9a4:	9000      	str	r0, [sp, #0]
    d9a6:	e7ff      	b.n	d9a8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x8e>
    d9a8:	9800      	ldr	r0, [sp, #0]
    d9aa:	900e      	str	r0, [sp, #56]	; 0x38
    d9ac:	9901      	ldr	r1, [sp, #4]
    d9ae:	910f      	str	r1, [sp, #60]	; 0x3c
    d9b0:	2200      	movs	r2, #0
    d9b2:	920d      	str	r2, [sp, #52]	; 0x34
    d9b4:	2201      	movs	r2, #1
    d9b6:	920c      	str	r2, [sp, #48]	; 0x30
    d9b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d9ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d9bc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    d9c0:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    d9c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d9c6:	6063      	str	r3, [r4, #4]
    d9c8:	6022      	str	r2, [r4, #0]
    d9ca:	f8c4 e00c 	str.w	lr, [r4, #12]
    d9ce:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    d9d2:	e7ff      	b.n	d9d4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
        if let Some(t) = self.time {
    d9d4:	e015      	b.n	da02 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
            self.time = Some(self.hw.clock());
    d9d6:	9808      	ldr	r0, [sp, #32]
    d9d8:	9012      	str	r0, [sp, #72]	; 0x48
    d9da:	9909      	ldr	r1, [sp, #36]	; 0x24
    d9dc:	9113      	str	r1, [sp, #76]	; 0x4c
    d9de:	2200      	movs	r2, #0
    d9e0:	9211      	str	r2, [sp, #68]	; 0x44
    d9e2:	2201      	movs	r2, #1
    d9e4:	9210      	str	r2, [sp, #64]	; 0x40
    d9e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d9ea:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    d9ee:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    d9f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d9f4:	6063      	str	r3, [r4, #4]
    d9f6:	6022      	str	r2, [r4, #0]
    d9f8:	f8c4 e00c 	str.w	lr, [r4, #12]
    d9fc:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    da00:	e7ff      	b.n	da02 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
    }
    da02:	b018      	add	sp, #96	; 0x60
    da04:	bd10      	pop	{r4, pc}

0000da06 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>:
    fn setup(&mut self) {
    da06:	b580      	push	{r7, lr}
    da08:	b088      	sub	sp, #32
    da0a:	9007      	str	r0, [sp, #28]
    da0c:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    da10:	8241      	strh	r1, [r0, #18]
        self.hw.vram_setsize(DISPS);
    da12:	f64d 7104 	movw	r1, #57092	; 0xdf04
    da16:	f2c0 0101 	movt	r1, #1
    da1a:	680a      	ldr	r2, [r1, #0]
    da1c:	6849      	ldr	r1, [r1, #4]
    da1e:	9005      	str	r0, [sp, #20]
    da20:	9104      	str	r1, [sp, #16]
    da22:	4611      	mov	r1, r2
    da24:	9a04      	ldr	r2, [sp, #16]
    da26:	f7fb ff76 	bl	9916 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>
    da2a:	e7ff      	b.n	da2c <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x26>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    da2c:	9805      	ldr	r0, [sp, #20]
    da2e:	f100 0147 	add.w	r1, r0, #71	; 0x47
    da32:	f64e 6008 	movw	r0, #60936	; 0xee08
    da36:	f2c0 0001 	movt	r0, #1
    da3a:	2250      	movs	r2, #80	; 0x50
    da3c:	9103      	str	r1, [sp, #12]
    da3e:	4611      	mov	r1, r2
    da40:	f000 ff4e 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    da44:	9002      	str	r0, [sp, #8]
    da46:	e7ff      	b.n	da48 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x42>
    da48:	9802      	ldr	r0, [sp, #8]
    da4a:	9006      	str	r0, [sp, #24]
    da4c:	9a06      	ldr	r2, [sp, #24]
    da4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    da52:	9803      	ldr	r0, [sp, #12]
    da54:	f001 fe0b 	bl	f66e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    da58:	9001      	str	r0, [sp, #4]
    da5a:	9100      	str	r1, [sp, #0]
    da5c:	e7ff      	b.n	da5e <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x58>
    da5e:	f64e 6208 	movw	r2, #60936	; 0xee08
    da62:	f2c0 0201 	movt	r2, #1
    da66:	2350      	movs	r3, #80	; 0x50
    da68:	9801      	ldr	r0, [sp, #4]
    da6a:	9900      	ldr	r1, [sp, #0]
    da6c:	f001 fd02 	bl	f474 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    da70:	e7ff      	b.n	da72 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x6c>
    da72:	f241 0047 	movw	r0, #4167	; 0x1047
    da76:	2101      	movs	r1, #1
        self.running = true;
    da78:	9a05      	ldr	r2, [sp, #20]
    da7a:	5411      	strb	r1, [r2, r0]
    }
    da7c:	b008      	add	sp, #32
    da7e:	bd80      	pop	{r7, pc}

0000da80 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>:
    fn waitkey(&mut self) -> u8 {
    da80:	b580      	push	{r7, lr}
    da82:	b08c      	sub	sp, #48	; 0x30
    da84:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    da86:	9005      	str	r0, [sp, #20]
    da88:	e7ff      	b.n	da8a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
    da8a:	f241 0047 	movw	r0, #4167	; 0x1047
    da8e:	9905      	ldr	r1, [sp, #20]
    da90:	5c08      	ldrb	r0, [r1, r0]
    da92:	07c0      	lsls	r0, r0, #31
    da94:	2800      	cmp	r0, #0
    da96:	d104      	bne.n	daa2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x22>
    da98:	e7ff      	b.n	da9a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x1a>
    da9a:	2020      	movs	r0, #32
        return b' ';
    da9c:	f88d 001b 	strb.w	r0, [sp, #27]
    daa0:	e047      	b.n	db32 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
            self.sched();
    daa2:	9805      	ldr	r0, [sp, #20]
    daa4:	f7ff ff39 	bl	d91a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    daa8:	e7ff      	b.n	daaa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x2a>
    daaa:	2000      	movs	r0, #0
            for i in 0..0xf {
    daac:	f88d 001c 	strb.w	r0, [sp, #28]
    dab0:	200f      	movs	r0, #15
    dab2:	f88d 001d 	strb.w	r0, [sp, #29]
    dab6:	f89d 001c 	ldrb.w	r0, [sp, #28]
    daba:	f89d 101d 	ldrb.w	r1, [sp, #29]
    dabe:	f005 f9a2 	bl	12e06 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>
    dac2:	9004      	str	r0, [sp, #16]
    dac4:	9103      	str	r1, [sp, #12]
    dac6:	e7ff      	b.n	dac8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x48>
    dac8:	9804      	ldr	r0, [sp, #16]
    daca:	f88d 0020 	strb.w	r0, [sp, #32]
    dace:	9903      	ldr	r1, [sp, #12]
    dad0:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    dad4:	e7ff      	b.n	dad6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
    dad6:	a808      	add	r0, sp, #32
    dad8:	f005 f924 	bl	12d24 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>
    dadc:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    dae0:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    dae4:	e7ff      	b.n	dae6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x66>
    dae6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    daea:	07c1      	lsls	r1, r0, #31
    daec:	2900      	cmp	r1, #0
    daee:	d001      	beq.n	daf4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x74>
    daf0:	e7ff      	b.n	daf2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x72>
    daf2:	e001      	b.n	daf8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x78>
        while self.running {
    daf4:	e7c9      	b.n	da8a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
            for i in 0..0xf {
    daf6:	defe      	udf	#254	; 0xfe
    daf8:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    dafc:	4601      	mov	r1, r0
    dafe:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    db02:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    db06:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if self.hw.key(i) {
    db0a:	9a05      	ldr	r2, [sp, #20]
    db0c:	9002      	str	r0, [sp, #8]
    db0e:	4610      	mov	r0, r2
    db10:	9b02      	ldr	r3, [sp, #8]
    db12:	9101      	str	r1, [sp, #4]
    db14:	4619      	mov	r1, r3
    db16:	f7fb fd43 	bl	95a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    db1a:	9000      	str	r0, [sp, #0]
    db1c:	e7ff      	b.n	db1e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x9e>
    db1e:	9800      	ldr	r0, [sp, #0]
    db20:	07c1      	lsls	r1, r0, #31
    db22:	2900      	cmp	r1, #0
    db24:	d101      	bne.n	db2a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xaa>
    db26:	e7ff      	b.n	db28 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa8>
            for i in 0..0xf {
    db28:	e7d5      	b.n	dad6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
                    return i;
    db2a:	9801      	ldr	r0, [sp, #4]
    db2c:	f88d 001b 	strb.w	r0, [sp, #27]
    db30:	e7ff      	b.n	db32 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
    }
    db32:	f89d 001b 	ldrb.w	r0, [sp, #27]
    db36:	b00c      	add	sp, #48	; 0x30
    db38:	bd80      	pop	{r7, pc}

0000db3a <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>:
    fn shutdown(&mut self) {
    db3a:	b081      	sub	sp, #4
    db3c:	9000      	str	r0, [sp, #0]
    db3e:	f241 0147 	movw	r1, #4167	; 0x1047
    db42:	2200      	movs	r2, #0
        self.running = false;
    db44:	5442      	strb	r2, [r0, r1]
    }
    db46:	b001      	add	sp, #4
    db48:	4770      	bx	lr

0000db4a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>:
    db4a:	b580      	push	{r7, lr}
    db4c:	b084      	sub	sp, #16
    db4e:	4601      	mov	r1, r0
    db50:	f88d 000f 	strb.w	r0, [sp, #15]
    db54:	9102      	str	r1, [sp, #8]
    db56:	f004 ff92 	bl	12a7e <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>
    db5a:	9001      	str	r0, [sp, #4]
    db5c:	e7ff      	b.n	db5e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE+0x14>
    db5e:	9801      	ldr	r0, [sp, #4]
    db60:	b004      	add	sp, #16
    db62:	bd80      	pop	{r7, pc}

0000db64 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>:
    db64:	b580      	push	{r7, lr}
    db66:	b086      	sub	sp, #24
    db68:	9004      	str	r0, [sp, #16]
    db6a:	9105      	str	r1, [sp, #20]
    db6c:	9002      	str	r0, [sp, #8]
    db6e:	f000 f810 	bl	db92 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>
    db72:	9001      	str	r0, [sp, #4]
    db74:	e7ff      	b.n	db76 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x12>
    db76:	9801      	ldr	r0, [sp, #4]
    db78:	07c1      	lsls	r1, r0, #31
    db7a:	2900      	cmp	r1, #0
    db7c:	d103      	bne.n	db86 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x22>
    db7e:	e7ff      	b.n	db80 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x1c>
    db80:	2000      	movs	r0, #0
    db82:	9003      	str	r0, [sp, #12]
    db84:	e002      	b.n	db8c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    db86:	9802      	ldr	r0, [sp, #8]
    db88:	9003      	str	r0, [sp, #12]
    db8a:	e7ff      	b.n	db8c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    db8c:	9803      	ldr	r0, [sp, #12]
    db8e:	b006      	add	sp, #24
    db90:	bd80      	pop	{r7, pc}

0000db92 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>:
    db92:	b580      	push	{r7, lr}
    db94:	b08a      	sub	sp, #40	; 0x28
    db96:	9008      	str	r0, [sp, #32]
    db98:	9109      	str	r1, [sp, #36]	; 0x24
    db9a:	9103      	str	r1, [sp, #12]
    db9c:	9002      	str	r0, [sp, #8]
    db9e:	f000 f815 	bl	dbcc <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>
    dba2:	9105      	str	r1, [sp, #20]
    dba4:	9004      	str	r0, [sp, #16]
    dba6:	e7ff      	b.n	dba8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x16>
    dba8:	9803      	ldr	r0, [sp, #12]
    dbaa:	68c1      	ldr	r1, [r0, #12]
    dbac:	9802      	ldr	r0, [sp, #8]
    dbae:	4788      	blx	r1
    dbb0:	9107      	str	r1, [sp, #28]
    dbb2:	9006      	str	r0, [sp, #24]
    dbb4:	e7ff      	b.n	dbb6 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x24>
    dbb6:	a804      	add	r0, sp, #16
    dbb8:	a906      	add	r1, sp, #24
    dbba:	f005 f92d 	bl	12e18 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>
    dbbe:	9001      	str	r0, [sp, #4]
    dbc0:	e7ff      	b.n	dbc2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x30>
    dbc2:	9801      	ldr	r0, [sp, #4]
    dbc4:	f000 0001 	and.w	r0, r0, #1
    dbc8:	b00a      	add	sp, #40	; 0x28
    dbca:	bd80      	pop	{r7, pc}

0000dbcc <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>:
    dbcc:	b086      	sub	sp, #24
    dbce:	f249 40d9 	movw	r0, #38105	; 0x94d9
    dbd2:	f2c1 1010 	movt	r0, #4368	; 0x1110
    dbd6:	9005      	str	r0, [sp, #20]
    dbd8:	f249 7064 	movw	r0, #38756	; 0x9764
    dbdc:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    dbe0:	9004      	str	r0, [sp, #16]
    dbe2:	9804      	ldr	r0, [sp, #16]
    dbe4:	9905      	ldr	r1, [sp, #20]
    dbe6:	9001      	str	r0, [sp, #4]
    dbe8:	9100      	str	r1, [sp, #0]
    dbea:	e7ff      	b.n	dbec <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E+0x20>
    dbec:	9801      	ldr	r0, [sp, #4]
    dbee:	9002      	str	r0, [sp, #8]
    dbf0:	9900      	ldr	r1, [sp, #0]
    dbf2:	9103      	str	r1, [sp, #12]
    dbf4:	9802      	ldr	r0, [sp, #8]
    dbf6:	9903      	ldr	r1, [sp, #12]
    dbf8:	b006      	add	sp, #24
    dbfa:	4770      	bx	lr

0000dbfc <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>:
    dbfc:	b580      	push	{r7, lr}
    dbfe:	b084      	sub	sp, #16
    dc00:	9002      	str	r0, [sp, #8]
    dc02:	9103      	str	r1, [sp, #12]
    dc04:	f7ff ffae 	bl	db64 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>
    dc08:	9001      	str	r0, [sp, #4]
    dc0a:	e7ff      	b.n	dc0c <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE+0x10>
    dc0c:	9801      	ldr	r0, [sp, #4]
    dc0e:	b004      	add	sp, #16
    dc10:	bd80      	pop	{r7, pc}

0000dc12 <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>:
    dc12:	b580      	push	{r7, lr}
    dc14:	b084      	sub	sp, #16
    dc16:	680a      	ldr	r2, [r1, #0]
    dc18:	684b      	ldr	r3, [r1, #4]
    dc1a:	6889      	ldr	r1, [r1, #8]
    dc1c:	9103      	str	r1, [sp, #12]
    dc1e:	9302      	str	r3, [sp, #8]
    dc20:	9201      	str	r2, [sp, #4]
    dc22:	a901      	add	r1, sp, #4
    dc24:	f000 f8d9 	bl	ddda <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>
    dc28:	e7ff      	b.n	dc2a <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E+0x18>
    dc2a:	b004      	add	sp, #16
    dc2c:	bd80      	pop	{r7, pc}

0000dc2e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>:
    dc2e:	b083      	sub	sp, #12
    dc30:	9100      	str	r1, [sp, #0]
    dc32:	9201      	str	r2, [sp, #4]
    dc34:	9302      	str	r3, [sp, #8]
    dc36:	6001      	str	r1, [r0, #0]
    dc38:	6042      	str	r2, [r0, #4]
    dc3a:	6083      	str	r3, [r0, #8]
    dc3c:	b003      	add	sp, #12
    dc3e:	4770      	bx	lr

0000dc40 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>:
    dc40:	b083      	sub	sp, #12
    dc42:	9100      	str	r1, [sp, #0]
    dc44:	9201      	str	r2, [sp, #4]
    dc46:	9302      	str	r3, [sp, #8]
    dc48:	6001      	str	r1, [r0, #0]
    dc4a:	6042      	str	r2, [r0, #4]
    dc4c:	6083      	str	r3, [r0, #8]
    dc4e:	b003      	add	sp, #12
    dc50:	4770      	bx	lr

0000dc52 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>:
    dc52:	680a      	ldr	r2, [r1, #0]
    dc54:	684b      	ldr	r3, [r1, #4]
    dc56:	6889      	ldr	r1, [r1, #8]
    dc58:	6081      	str	r1, [r0, #8]
    dc5a:	6043      	str	r3, [r0, #4]
    dc5c:	6002      	str	r2, [r0, #0]
    dc5e:	4770      	bx	lr

0000dc60 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>:
    dc60:	b580      	push	{r7, lr}
    dc62:	b086      	sub	sp, #24
    dc64:	9105      	str	r1, [sp, #20]
    dc66:	9004      	str	r0, [sp, #16]
    dc68:	4608      	mov	r0, r1
    dc6a:	9103      	str	r1, [sp, #12]
    dc6c:	f000 fdd4 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dc70:	9002      	str	r0, [sp, #8]
    dc72:	9101      	str	r1, [sp, #4]
    dc74:	e7ff      	b.n	dc76 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x16>
    dc76:	9803      	ldr	r0, [sp, #12]
    dc78:	f100 0308 	add.w	r3, r0, #8
    dc7c:	9804      	ldr	r0, [sp, #16]
    dc7e:	9902      	ldr	r1, [sp, #8]
    dc80:	9a01      	ldr	r2, [sp, #4]
    dc82:	f000 f944 	bl	df0e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>
    dc86:	e7ff      	b.n	dc88 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x28>
    dc88:	b006      	add	sp, #24
    dc8a:	bd80      	pop	{r7, pc}

0000dc8c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>:
    dc8c:	b580      	push	{r7, lr}
    dc8e:	b086      	sub	sp, #24
    dc90:	9105      	str	r1, [sp, #20]
    dc92:	9004      	str	r0, [sp, #16]
    dc94:	4608      	mov	r0, r1
    dc96:	9103      	str	r1, [sp, #12]
    dc98:	f000 fdbe 	bl	e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dc9c:	9002      	str	r0, [sp, #8]
    dc9e:	9101      	str	r1, [sp, #4]
    dca0:	e7ff      	b.n	dca2 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x16>
    dca2:	9803      	ldr	r0, [sp, #12]
    dca4:	f100 0308 	add.w	r3, r0, #8
    dca8:	9804      	ldr	r0, [sp, #16]
    dcaa:	9902      	ldr	r1, [sp, #8]
    dcac:	9a01      	ldr	r2, [sp, #4]
    dcae:	f000 f97b 	bl	dfa8 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>
    dcb2:	e7ff      	b.n	dcb4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x28>
    dcb4:	b006      	add	sp, #24
    dcb6:	bd80      	pop	{r7, pc}

0000dcb8 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>:
    dcb8:	b580      	push	{r7, lr}
    dcba:	b082      	sub	sp, #8
    dcbc:	9101      	str	r1, [sp, #4]
    dcbe:	f000 f803 	bl	dcc8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>
    dcc2:	e7ff      	b.n	dcc4 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE+0xc>
    dcc4:	b002      	add	sp, #8
    dcc6:	bd80      	pop	{r7, pc}

0000dcc8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>:
    dcc8:	b580      	push	{r7, lr}
    dcca:	b0a0      	sub	sp, #128	; 0x80
    dccc:	911c      	str	r1, [sp, #112]	; 0x70
    dcce:	9103      	str	r1, [sp, #12]
    dcd0:	9002      	str	r0, [sp, #8]
    dcd2:	e7ff      	b.n	dcd4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    dcd4:	9803      	ldr	r0, [sp, #12]
    dcd6:	68c1      	ldr	r1, [r0, #12]
    dcd8:	2901      	cmp	r1, #1
    dcda:	d11e      	bne.n	dd1a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dcdc:	e7ff      	b.n	dcde <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x16>
    dcde:	9803      	ldr	r0, [sp, #12]
    dce0:	f100 0110 	add.w	r1, r0, #16
    dce4:	911e      	str	r1, [sp, #120]	; 0x78
    dce6:	a804      	add	r0, sp, #16
    dce8:	f7ff ffba 	bl	dc60 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dcec:	e7ff      	b.n	dcee <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x26>
    dcee:	9804      	ldr	r0, [sp, #16]
    dcf0:	2801      	cmp	r0, #1
    dcf2:	d001      	beq.n	dcf8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x30>
    dcf4:	e7ff      	b.n	dcf6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x2e>
    dcf6:	e00f      	b.n	dd18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x50>
    dcf8:	9804      	ldr	r0, [sp, #16]
    dcfa:	9905      	ldr	r1, [sp, #20]
    dcfc:	9a06      	ldr	r2, [sp, #24]
    dcfe:	9209      	str	r2, [sp, #36]	; 0x24
    dd00:	9108      	str	r1, [sp, #32]
    dd02:	9007      	str	r0, [sp, #28]
    dd04:	9807      	ldr	r0, [sp, #28]
    dd06:	9908      	ldr	r1, [sp, #32]
    dd08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dd0a:	9b02      	ldr	r3, [sp, #8]
    dd0c:	609a      	str	r2, [r3, #8]
    dd0e:	6059      	str	r1, [r3, #4]
    dd10:	6018      	str	r0, [r3, #0]
    dd12:	e7ff      	b.n	dd14 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    dd14:	b020      	add	sp, #128	; 0x80
    dd16:	bd80      	pop	{r7, pc}
    dd18:	e7ff      	b.n	dd1a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dd1a:	a80a      	add	r0, sp, #40	; 0x28
    dd1c:	9903      	ldr	r1, [sp, #12]
    dd1e:	f7ff ffb5 	bl	dc8c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>
    dd22:	e7ff      	b.n	dd24 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x5c>
    dd24:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd26:	2800      	cmp	r0, #0
    dd28:	d012      	beq.n	dd50 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x88>
    dd2a:	e7ff      	b.n	dd2c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x64>
    dd2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dd2e:	990c      	ldr	r1, [sp, #48]	; 0x30
    dd30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dd32:	9211      	str	r2, [sp, #68]	; 0x44
    dd34:	9110      	str	r1, [sp, #64]	; 0x40
    dd36:	900f      	str	r0, [sp, #60]	; 0x3c
    dd38:	980f      	ldr	r0, [sp, #60]	; 0x3c
    dd3a:	9910      	ldr	r1, [sp, #64]	; 0x40
    dd3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    dd3e:	921b      	str	r2, [sp, #108]	; 0x6c
    dd40:	911a      	str	r1, [sp, #104]	; 0x68
    dd42:	9019      	str	r0, [sp, #100]	; 0x64
    dd44:	a816      	add	r0, sp, #88	; 0x58
    dd46:	a919      	add	r1, sp, #100	; 0x64
    dd48:	f7ff ff83 	bl	dc52 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>
    dd4c:	e028      	b.n	dda0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd8>
    dd4e:	defe      	udf	#254	; 0xfe
    dd50:	9803      	ldr	r0, [sp, #12]
    dd52:	301c      	adds	r0, #28
    dd54:	f000 f9b4 	bl	e0c0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>
    dd58:	9001      	str	r0, [sp, #4]
    dd5a:	e7ff      	b.n	dd5c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x94>
    dd5c:	9801      	ldr	r0, [sp, #4]
    dd5e:	f000 f9e9 	bl	e134 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>
    dd62:	900e      	str	r0, [sp, #56]	; 0x38
    dd64:	e7ff      	b.n	dd66 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x9e>
    dd66:	980e      	ldr	r0, [sp, #56]	; 0x38
    dd68:	fab0 f180 	clz	r1, r0
    dd6c:	0949      	lsrs	r1, r1, #5
    dd6e:	2800      	cmp	r0, #0
    dd70:	d101      	bne.n	dd76 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xae>
    dd72:	e7ff      	b.n	dd74 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xac>
    dd74:	e009      	b.n	dd8a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc2>
    dd76:	980e      	ldr	r0, [sp, #56]	; 0x38
    dd78:	901f      	str	r0, [sp, #124]	; 0x7c
    dd7a:	9902      	ldr	r1, [sp, #8]
    dd7c:	9000      	str	r0, [sp, #0]
    dd7e:	4608      	mov	r0, r1
    dd80:	9900      	ldr	r1, [sp, #0]
    dd82:	f7ff ff6d 	bl	dc60 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dd86:	e00a      	b.n	dd9e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd6>
    dd88:	defe      	udf	#254	; 0xfe
    dd8a:	f002 f9af 	bl	100ec <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
    dd8e:	e7ff      	b.n	dd90 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc8>
    dd90:	9802      	ldr	r0, [sp, #8]
    dd92:	f000 f9ca 	bl	e12a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>
    dd96:	e7ff      	b.n	dd98 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd0>
    dd98:	e7ff      	b.n	dd9a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    dd9a:	e7ff      	b.n	dd9c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd4>
    dd9c:	e7ba      	b.n	dd14 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    dd9e:	e7fc      	b.n	dd9a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    dda0:	9816      	ldr	r0, [sp, #88]	; 0x58
    dda2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    dda4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    dda6:	9215      	str	r2, [sp, #84]	; 0x54
    dda8:	9114      	str	r1, [sp, #80]	; 0x50
    ddaa:	9013      	str	r0, [sp, #76]	; 0x4c
    ddac:	2001      	movs	r0, #1
    ddae:	9012      	str	r0, [sp, #72]	; 0x48
    ddb0:	e7ff      	b.n	ddb2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xea>
    ddb2:	9812      	ldr	r0, [sp, #72]	; 0x48
    ddb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ddb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ddb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ddba:	f8dd c00c 	ldr.w	ip, [sp, #12]
    ddbe:	f8cc 3018 	str.w	r3, [ip, #24]
    ddc2:	f8cc 2014 	str.w	r2, [ip, #20]
    ddc6:	f8cc 1010 	str.w	r1, [ip, #16]
    ddca:	f8cc 000c 	str.w	r0, [ip, #12]
    ddce:	980a      	ldr	r0, [sp, #40]	; 0x28
    ddd0:	2801      	cmp	r0, #1
    ddd2:	d101      	bne.n	ddd8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x110>
    ddd4:	e7ff      	b.n	ddd6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>
    ddd6:	e77d      	b.n	dcd4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    ddd8:	e7fd      	b.n	ddd6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>

0000ddda <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>:
    ddda:	b5b0      	push	{r4, r5, r7, lr}
    dddc:	b090      	sub	sp, #64	; 0x40
    ddde:	680a      	ldr	r2, [r1, #0]
    dde0:	684b      	ldr	r3, [r1, #4]
    dde2:	6889      	ldr	r1, [r1, #8]
    dde4:	910f      	str	r1, [sp, #60]	; 0x3c
    dde6:	930e      	str	r3, [sp, #56]	; 0x38
    dde8:	920d      	str	r2, [sp, #52]	; 0x34
    ddea:	a902      	add	r1, sp, #8
    ddec:	aa0d      	add	r2, sp, #52	; 0x34
    ddee:	9001      	str	r0, [sp, #4]
    ddf0:	4608      	mov	r0, r1
    ddf2:	4611      	mov	r1, r2
    ddf4:	f000 f80d 	bl	de12 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>
    ddf8:	e7ff      	b.n	ddfa <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E+0x20>
    ddfa:	a802      	add	r0, sp, #8
    ddfc:	9901      	ldr	r1, [sp, #4]
    ddfe:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    de02:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    de06:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    de0a:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    de0e:	b010      	add	sp, #64	; 0x40
    de10:	bdb0      	pop	{r4, r5, r7, pc}

0000de12 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>:
    de12:	b08b      	sub	sp, #44	; 0x2c
    de14:	680a      	ldr	r2, [r1, #0]
    de16:	684b      	ldr	r3, [r1, #4]
    de18:	6889      	ldr	r1, [r1, #8]
    de1a:	9102      	str	r1, [sp, #8]
    de1c:	9301      	str	r3, [sp, #4]
    de1e:	9200      	str	r2, [sp, #0]
    de20:	2100      	movs	r1, #0
    de22:	9103      	str	r1, [sp, #12]
    de24:	9107      	str	r1, [sp, #28]
    de26:	9900      	ldr	r1, [sp, #0]
    de28:	9a01      	ldr	r2, [sp, #4]
    de2a:	9b02      	ldr	r3, [sp, #8]
    de2c:	6083      	str	r3, [r0, #8]
    de2e:	6042      	str	r2, [r0, #4]
    de30:	6001      	str	r1, [r0, #0]
    de32:	9903      	ldr	r1, [sp, #12]
    de34:	9a04      	ldr	r2, [sp, #16]
    de36:	9b05      	ldr	r3, [sp, #20]
    de38:	f8dd c018 	ldr.w	ip, [sp, #24]
    de3c:	f8c0 c018 	str.w	ip, [r0, #24]
    de40:	6143      	str	r3, [r0, #20]
    de42:	6102      	str	r2, [r0, #16]
    de44:	60c1      	str	r1, [r0, #12]
    de46:	9907      	ldr	r1, [sp, #28]
    de48:	9a08      	ldr	r2, [sp, #32]
    de4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de4c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    de50:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    de54:	6243      	str	r3, [r0, #36]	; 0x24
    de56:	6202      	str	r2, [r0, #32]
    de58:	61c1      	str	r1, [r0, #28]
    de5a:	b00b      	add	sp, #44	; 0x2c
    de5c:	4770      	bx	lr

0000de5e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>:
    de5e:	b5b0      	push	{r4, r5, r7, lr}
    de60:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    de64:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    de68:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    de6c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    de70:	bdb0      	pop	{r4, r5, r7, pc}

0000de72 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>:
    de72:	b510      	push	{r4, lr}
    de74:	b088      	sub	sp, #32
    de76:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    de7a:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    de7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    de80:	9102      	str	r1, [sp, #8]
    de82:	9203      	str	r2, [sp, #12]
    de84:	9304      	str	r3, [sp, #16]
    de86:	9405      	str	r4, [sp, #20]
    de88:	f8cd e018 	str.w	lr, [sp, #24]
    de8c:	f8cd c01c 	str.w	ip, [sp, #28]
    de90:	f8cd e000 	str.w	lr, [sp]
    de94:	f8cd c004 	str.w	ip, [sp, #4]
    de98:	6001      	str	r1, [r0, #0]
    de9a:	6042      	str	r2, [r0, #4]
    de9c:	9900      	ldr	r1, [sp, #0]
    de9e:	9a01      	ldr	r2, [sp, #4]
    dea0:	6081      	str	r1, [r0, #8]
    dea2:	60c2      	str	r2, [r0, #12]
    dea4:	6103      	str	r3, [r0, #16]
    dea6:	6144      	str	r4, [r0, #20]
    dea8:	b008      	add	sp, #32
    deaa:	bd10      	pop	{r4, pc}

0000deac <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>:
    deac:	b580      	push	{r7, lr}
    deae:	b086      	sub	sp, #24
    deb0:	f8dd c020 	ldr.w	ip, [sp, #32]
    deb4:	9102      	str	r1, [sp, #8]
    deb6:	9203      	str	r2, [sp, #12]
    deb8:	9304      	str	r3, [sp, #16]
    deba:	f8cd c014 	str.w	ip, [sp, #20]
    debe:	f04f 0e00 	mov.w	lr, #0
    dec2:	f8cd e004 	str.w	lr, [sp, #4]
    dec6:	f8cd e000 	str.w	lr, [sp]
    deca:	f8cd e000 	str.w	lr, [sp]
    dece:	6001      	str	r1, [r0, #0]
    ded0:	6042      	str	r2, [r0, #4]
    ded2:	9900      	ldr	r1, [sp, #0]
    ded4:	9a01      	ldr	r2, [sp, #4]
    ded6:	6081      	str	r1, [r0, #8]
    ded8:	60c2      	str	r2, [r0, #12]
    deda:	6103      	str	r3, [r0, #16]
    dedc:	f8c0 c014 	str.w	ip, [r0, #20]
    dee0:	b006      	add	sp, #24
    dee2:	bd80      	pop	{r7, pc}

0000dee4 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>:
    dee4:	b580      	push	{r7, lr}
    dee6:	b088      	sub	sp, #32
    dee8:	9004      	str	r0, [sp, #16]
    deea:	9105      	str	r1, [sp, #20]
    deec:	9206      	str	r2, [sp, #24]
    deee:	9307      	str	r3, [sp, #28]
    def0:	9003      	str	r0, [sp, #12]
    def2:	4610      	mov	r0, r2
    def4:	9102      	str	r1, [sp, #8]
    def6:	4619      	mov	r1, r3
    def8:	9a03      	ldr	r2, [sp, #12]
    defa:	9b02      	ldr	r3, [sp, #8]
    defc:	f001 f9f9 	bl	f2f2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    df00:	9001      	str	r0, [sp, #4]
    df02:	9100      	str	r1, [sp, #0]
    df04:	e7ff      	b.n	df06 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE+0x22>
    df06:	9801      	ldr	r0, [sp, #4]
    df08:	9900      	ldr	r1, [sp, #0]
    df0a:	b008      	add	sp, #32
    df0c:	bd80      	pop	{r7, pc}

0000df0e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>:
    df0e:	b580      	push	{r7, lr}
    df10:	b08a      	sub	sp, #40	; 0x28
    df12:	9104      	str	r1, [sp, #16]
    df14:	9205      	str	r2, [sp, #20]
    df16:	9308      	str	r3, [sp, #32]
    df18:	2100      	movs	r1, #0
    df1a:	f88d 101e 	strb.w	r1, [sp, #30]
    df1e:	f88d 101f 	strb.w	r1, [sp, #31]
    df22:	2101      	movs	r1, #1
    df24:	f88d 101f 	strb.w	r1, [sp, #31]
    df28:	f88d 101e 	strb.w	r1, [sp, #30]
    df2c:	9904      	ldr	r1, [sp, #16]
    df2e:	2900      	cmp	r1, #0
    df30:	9303      	str	r3, [sp, #12]
    df32:	9002      	str	r0, [sp, #8]
    df34:	d001      	beq.n	df3a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2c>
    df36:	e7ff      	b.n	df38 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2a>
    df38:	e004      	b.n	df44 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x36>
    df3a:	2000      	movs	r0, #0
    df3c:	9902      	ldr	r1, [sp, #8]
    df3e:	6008      	str	r0, [r1, #0]
    df40:	e01f      	b.n	df82 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    df42:	defe      	udf	#254	; 0xfe
    df44:	2000      	movs	r0, #0
    df46:	f88d 001f 	strb.w	r0, [sp, #31]
    df4a:	9905      	ldr	r1, [sp, #20]
    df4c:	9109      	str	r1, [sp, #36]	; 0x24
    df4e:	f88d 001e 	strb.w	r0, [sp, #30]
    df52:	9106      	str	r1, [sp, #24]
    df54:	9906      	ldr	r1, [sp, #24]
    df56:	9803      	ldr	r0, [sp, #12]
    df58:	f7fb fd9c 	bl	9a94 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>
    df5c:	9001      	str	r0, [sp, #4]
    df5e:	9100      	str	r1, [sp, #0]
    df60:	e7ff      	b.n	df62 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x54>
    df62:	9801      	ldr	r0, [sp, #4]
    df64:	9902      	ldr	r1, [sp, #8]
    df66:	6048      	str	r0, [r1, #4]
    df68:	9a00      	ldr	r2, [sp, #0]
    df6a:	608a      	str	r2, [r1, #8]
    df6c:	2301      	movs	r3, #1
    df6e:	600b      	str	r3, [r1, #0]
    df70:	e007      	b.n	df82 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    df72:	9804      	ldr	r0, [sp, #16]
    df74:	2801      	cmp	r0, #1
    df76:	d00c      	beq.n	df92 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x84>
    df78:	e015      	b.n	dfa6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x98>
    df7a:	2000      	movs	r0, #0
    df7c:	f88d 001e 	strb.w	r0, [sp, #30]
    df80:	e7f7      	b.n	df72 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    df82:	f89d 001e 	ldrb.w	r0, [sp, #30]
    df86:	07c0      	lsls	r0, r0, #31
    df88:	2800      	cmp	r0, #0
    df8a:	d1f6      	bne.n	df7a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x6c>
    df8c:	e7f1      	b.n	df72 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    df8e:	b00a      	add	sp, #40	; 0x28
    df90:	bd80      	pop	{r7, pc}
    df92:	f89d 001f 	ldrb.w	r0, [sp, #31]
    df96:	07c0      	lsls	r0, r0, #31
    df98:	2800      	cmp	r0, #0
    df9a:	d0f8      	beq.n	df8e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    df9c:	e7ff      	b.n	df9e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x90>
    df9e:	2000      	movs	r0, #0
    dfa0:	f88d 001f 	strb.w	r0, [sp, #31]
    dfa4:	e7f3      	b.n	df8e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    dfa6:	e7f2      	b.n	df8e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>

0000dfa8 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>:
    dfa8:	b580      	push	{r7, lr}
    dfaa:	b08c      	sub	sp, #48	; 0x30
    dfac:	9103      	str	r1, [sp, #12]
    dfae:	9204      	str	r2, [sp, #16]
    dfb0:	930a      	str	r3, [sp, #40]	; 0x28
    dfb2:	2100      	movs	r1, #0
    dfb4:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    dfb8:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    dfbc:	2101      	movs	r1, #1
    dfbe:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    dfc2:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    dfc6:	9903      	ldr	r1, [sp, #12]
    dfc8:	2900      	cmp	r1, #0
    dfca:	9302      	str	r3, [sp, #8]
    dfcc:	9001      	str	r0, [sp, #4]
    dfce:	d001      	beq.n	dfd4 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2c>
    dfd0:	e7ff      	b.n	dfd2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2a>
    dfd2:	e004      	b.n	dfde <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x36>
    dfd4:	2000      	movs	r0, #0
    dfd6:	9901      	ldr	r1, [sp, #4]
    dfd8:	6008      	str	r0, [r1, #0]
    dfda:	e020      	b.n	e01e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    dfdc:	defe      	udf	#254	; 0xfe
    dfde:	2000      	movs	r0, #0
    dfe0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    dfe4:	9904      	ldr	r1, [sp, #16]
    dfe6:	910b      	str	r1, [sp, #44]	; 0x2c
    dfe8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    dfec:	9108      	str	r1, [sp, #32]
    dfee:	9a08      	ldr	r2, [sp, #32]
    dff0:	a805      	add	r0, sp, #20
    dff2:	9902      	ldr	r1, [sp, #8]
    dff4:	f7fb fd44 	bl	9a80 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>
    dff8:	e7ff      	b.n	dffa <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x52>
    dffa:	9805      	ldr	r0, [sp, #20]
    dffc:	9906      	ldr	r1, [sp, #24]
    dffe:	9a07      	ldr	r2, [sp, #28]
    e000:	9b01      	ldr	r3, [sp, #4]
    e002:	60da      	str	r2, [r3, #12]
    e004:	6099      	str	r1, [r3, #8]
    e006:	6058      	str	r0, [r3, #4]
    e008:	2001      	movs	r0, #1
    e00a:	6018      	str	r0, [r3, #0]
    e00c:	e007      	b.n	e01e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    e00e:	9803      	ldr	r0, [sp, #12]
    e010:	2801      	cmp	r0, #1
    e012:	d00c      	beq.n	e02e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x86>
    e014:	e015      	b.n	e042 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x9a>
    e016:	2000      	movs	r0, #0
    e018:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    e01c:	e7f7      	b.n	e00e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    e01e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    e022:	07c0      	lsls	r0, r0, #31
    e024:	2800      	cmp	r0, #0
    e026:	d1f6      	bne.n	e016 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x6e>
    e028:	e7f1      	b.n	e00e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    e02a:	b00c      	add	sp, #48	; 0x30
    e02c:	bd80      	pop	{r7, pc}
    e02e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    e032:	07c0      	lsls	r0, r0, #31
    e034:	2800      	cmp	r0, #0
    e036:	d0f8      	beq.n	e02a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e038:	e7ff      	b.n	e03a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x92>
    e03a:	2000      	movs	r0, #0
    e03c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e040:	e7f3      	b.n	e02a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e042:	e7f2      	b.n	e02a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>

0000e044 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>:
    e044:	b085      	sub	sp, #20
    e046:	9000      	str	r0, [sp, #0]
    e048:	2000      	movs	r0, #0
    e04a:	f88d 000b 	strb.w	r0, [sp, #11]
    e04e:	f88d 000a 	strb.w	r0, [sp, #10]
    e052:	2001      	movs	r0, #1
    e054:	f88d 000b 	strb.w	r0, [sp, #11]
    e058:	f88d 000a 	strb.w	r0, [sp, #10]
    e05c:	9800      	ldr	r0, [sp, #0]
    e05e:	2800      	cmp	r0, #0
    e060:	4601      	mov	r1, r0
    e062:	bf18      	it	ne
    e064:	2101      	movne	r1, #1
    e066:	2800      	cmp	r0, #0
    e068:	d001      	beq.n	e06e <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x2a>
    e06a:	e7ff      	b.n	e06c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x28>
    e06c:	e005      	b.n	e07a <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x36>
    e06e:	2000      	movs	r0, #0
    e070:	f88d 000a 	strb.w	r0, [sp, #10]
    e074:	9001      	str	r0, [sp, #4]
    e076:	e007      	b.n	e088 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e078:	defe      	udf	#254	; 0xfe
    e07a:	2000      	movs	r0, #0
    e07c:	f88d 000b 	strb.w	r0, [sp, #11]
    e080:	9800      	ldr	r0, [sp, #0]
    e082:	9004      	str	r0, [sp, #16]
    e084:	9001      	str	r0, [sp, #4]
    e086:	e7ff      	b.n	e088 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e088:	f89d 000a 	ldrb.w	r0, [sp, #10]
    e08c:	07c0      	lsls	r0, r0, #31
    e08e:	2800      	cmp	r0, #0
    e090:	d104      	bne.n	e09c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x58>
    e092:	e7ff      	b.n	e094 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e094:	9800      	ldr	r0, [sp, #0]
    e096:	2800      	cmp	r0, #0
    e098:	d107      	bne.n	e0aa <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x66>
    e09a:	e010      	b.n	e0be <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x7a>
    e09c:	2000      	movs	r0, #0
    e09e:	f88d 000a 	strb.w	r0, [sp, #10]
    e0a2:	e7f7      	b.n	e094 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e0a4:	9801      	ldr	r0, [sp, #4]
    e0a6:	b005      	add	sp, #20
    e0a8:	4770      	bx	lr
    e0aa:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e0ae:	07c0      	lsls	r0, r0, #31
    e0b0:	2800      	cmp	r0, #0
    e0b2:	d0f7      	beq.n	e0a4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e0b4:	e7ff      	b.n	e0b6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x72>
    e0b6:	2000      	movs	r0, #0
    e0b8:	f88d 000b 	strb.w	r0, [sp, #11]
    e0bc:	e7f2      	b.n	e0a4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e0be:	e7f1      	b.n	e0a4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>

0000e0c0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>:
    e0c0:	b084      	sub	sp, #16
    e0c2:	9002      	str	r0, [sp, #8]
    e0c4:	6801      	ldr	r1, [r0, #0]
    e0c6:	2900      	cmp	r1, #0
    e0c8:	9000      	str	r0, [sp, #0]
    e0ca:	d001      	beq.n	e0d0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x10>
    e0cc:	e7ff      	b.n	e0ce <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0xe>
    e0ce:	e003      	b.n	e0d8 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x18>
    e0d0:	2000      	movs	r0, #0
    e0d2:	9001      	str	r0, [sp, #4]
    e0d4:	e005      	b.n	e0e2 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e0d6:	defe      	udf	#254	; 0xfe
    e0d8:	9800      	ldr	r0, [sp, #0]
    e0da:	1d01      	adds	r1, r0, #4
    e0dc:	9103      	str	r1, [sp, #12]
    e0de:	9101      	str	r1, [sp, #4]
    e0e0:	e7ff      	b.n	e0e2 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e0e2:	9801      	ldr	r0, [sp, #4]
    e0e4:	b004      	add	sp, #16
    e0e6:	4770      	bx	lr

0000e0e8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>:
    e0e8:	b084      	sub	sp, #16
    e0ea:	9002      	str	r0, [sp, #8]
    e0ec:	9802      	ldr	r0, [sp, #8]
    e0ee:	2800      	cmp	r0, #0
    e0f0:	4602      	mov	r2, r0
    e0f2:	bf18      	it	ne
    e0f4:	2201      	movne	r2, #1
    e0f6:	2800      	cmp	r0, #0
    e0f8:	9101      	str	r1, [sp, #4]
    e0fa:	d001      	beq.n	e100 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x18>
    e0fc:	e7ff      	b.n	e0fe <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x16>
    e0fe:	e009      	b.n	e114 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x2c>
    e100:	f64e 504c 	movw	r0, #60748	; 0xed4c
    e104:	f2c0 0001 	movt	r0, #1
    e108:	212b      	movs	r1, #43	; 0x2b
    e10a:	9a01      	ldr	r2, [sp, #4]
    e10c:	f008 fc8e 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e110:	defe      	udf	#254	; 0xfe
    e112:	defe      	udf	#254	; 0xfe
    e114:	9802      	ldr	r0, [sp, #8]
    e116:	9003      	str	r0, [sp, #12]
    e118:	9902      	ldr	r1, [sp, #8]
    e11a:	2900      	cmp	r1, #0
    e11c:	9000      	str	r0, [sp, #0]
    e11e:	d003      	beq.n	e128 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x40>
    e120:	e7ff      	b.n	e122 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>
    e122:	9800      	ldr	r0, [sp, #0]
    e124:	b004      	add	sp, #16
    e126:	4770      	bx	lr
    e128:	e7fb      	b.n	e122 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>

0000e12a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>:
    e12a:	b081      	sub	sp, #4
    e12c:	2100      	movs	r1, #0
    e12e:	6001      	str	r1, [r0, #0]
    e130:	b001      	add	sp, #4
    e132:	4770      	bx	lr

0000e134 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>:
    e134:	b580      	push	{r7, lr}
    e136:	b082      	sub	sp, #8
    e138:	9001      	str	r0, [sp, #4]
    e13a:	f7ff ff83 	bl	e044 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>
    e13e:	9000      	str	r0, [sp, #0]
    e140:	e7ff      	b.n	e142 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E+0xe>
    e142:	9800      	ldr	r0, [sp, #0]
    e144:	b002      	add	sp, #8
    e146:	bd80      	pop	{r7, pc}

0000e148 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
    e148:	b580      	push	{r7, lr}
    e14a:	b084      	sub	sp, #16
    e14c:	9002      	str	r0, [sp, #8]
    e14e:	9103      	str	r1, [sp, #12]
    e150:	6800      	ldr	r0, [r0, #0]
    e152:	f000 f88c 	bl	e26e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
    e156:	9001      	str	r0, [sp, #4]
    e158:	e7ff      	b.n	e15a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
    e15a:	9801      	ldr	r0, [sp, #4]
    e15c:	f000 0001 	and.w	r0, r0, #1
    e160:	b004      	add	sp, #16
    e162:	bd80      	pop	{r7, pc}

0000e164 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
    e164:	b580      	push	{r7, lr}
    e166:	b084      	sub	sp, #16
    e168:	9002      	str	r0, [sp, #8]
    e16a:	9103      	str	r1, [sp, #12]
    e16c:	f000 f827 	bl	e1be <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
    e170:	9001      	str	r0, [sp, #4]
    e172:	e7ff      	b.n	e174 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
    e174:	9801      	ldr	r0, [sp, #4]
    e176:	b004      	add	sp, #16
    e178:	bd80      	pop	{r7, pc}

0000e17a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
    e17a:	b085      	sub	sp, #20
    e17c:	9003      	str	r0, [sp, #12]
    e17e:	9104      	str	r1, [sp, #16]
    e180:	6802      	ldr	r2, [r0, #0]
    e182:	680b      	ldr	r3, [r1, #0]
    e184:	429a      	cmp	r2, r3
    e186:	9101      	str	r1, [sp, #4]
    e188:	9000      	str	r0, [sp, #0]
    e18a:	db07      	blt.n	e19c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
    e18c:	e7ff      	b.n	e18e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
    e18e:	9800      	ldr	r0, [sp, #0]
    e190:	6801      	ldr	r1, [r0, #0]
    e192:	9a01      	ldr	r2, [sp, #4]
    e194:	6813      	ldr	r3, [r2, #0]
    e196:	4299      	cmp	r1, r3
    e198:	d008      	beq.n	e1ac <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
    e19a:	e003      	b.n	e1a4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
    e19c:	20ff      	movs	r0, #255	; 0xff
    e19e:	f88d 000b 	strb.w	r0, [sp, #11]
    e1a2:	e008      	b.n	e1b6 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e1a4:	2001      	movs	r0, #1
    e1a6:	f88d 000b 	strb.w	r0, [sp, #11]
    e1aa:	e003      	b.n	e1b4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e1ac:	2000      	movs	r0, #0
    e1ae:	f88d 000b 	strb.w	r0, [sp, #11]
    e1b2:	e7ff      	b.n	e1b4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e1b4:	e7ff      	b.n	e1b6 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e1b6:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e1ba:	b005      	add	sp, #20
    e1bc:	4770      	bx	lr

0000e1be <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
    e1be:	b580      	push	{r7, lr}
    e1c0:	b088      	sub	sp, #32
    e1c2:	9000      	str	r0, [sp, #0]
    e1c4:	9101      	str	r1, [sp, #4]
    e1c6:	2000      	movs	r0, #0
    e1c8:	f88d 001b 	strb.w	r0, [sp, #27]
    e1cc:	f88d 001a 	strb.w	r0, [sp, #26]
    e1d0:	2001      	movs	r0, #1
    e1d2:	f88d 001b 	strb.w	r0, [sp, #27]
    e1d6:	f88d 001a 	strb.w	r0, [sp, #26]
    e1da:	4668      	mov	r0, sp
    e1dc:	9004      	str	r0, [sp, #16]
    e1de:	a801      	add	r0, sp, #4
    e1e0:	9005      	str	r0, [sp, #20]
    e1e2:	9804      	ldr	r0, [sp, #16]
    e1e4:	9905      	ldr	r1, [sp, #20]
    e1e6:	f000 f895 	bl	e314 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
    e1ea:	f88d 000f 	strb.w	r0, [sp, #15]
    e1ee:	e7ff      	b.n	e1f0 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
    e1f0:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    e1f4:	1c41      	adds	r1, r0, #1
    e1f6:	2902      	cmp	r1, #2
    e1f8:	d307      	bcc.n	e20a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
    e1fa:	e7ff      	b.n	e1fc <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
    e1fc:	2000      	movs	r0, #0
    e1fe:	f88d 001b 	strb.w	r0, [sp, #27]
    e202:	9800      	ldr	r0, [sp, #0]
    e204:	9002      	str	r0, [sp, #8]
    e206:	e006      	b.n	e216 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e208:	defe      	udf	#254	; 0xfe
    e20a:	2000      	movs	r0, #0
    e20c:	f88d 001a 	strb.w	r0, [sp, #26]
    e210:	9801      	ldr	r0, [sp, #4]
    e212:	9002      	str	r0, [sp, #8]
    e214:	e7ff      	b.n	e216 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e216:	f89d 001a 	ldrb.w	r0, [sp, #26]
    e21a:	07c0      	lsls	r0, r0, #31
    e21c:	2800      	cmp	r0, #0
    e21e:	d109      	bne.n	e234 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
    e220:	e7ff      	b.n	e222 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e222:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e226:	07c0      	lsls	r0, r0, #31
    e228:	2800      	cmp	r0, #0
    e22a:	d107      	bne.n	e23c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
    e22c:	e7ff      	b.n	e22e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
    e22e:	9802      	ldr	r0, [sp, #8]
    e230:	b008      	add	sp, #32
    e232:	bd80      	pop	{r7, pc}
    e234:	2000      	movs	r0, #0
    e236:	f88d 001a 	strb.w	r0, [sp, #26]
    e23a:	e7f2      	b.n	e222 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e23c:	2000      	movs	r0, #0
    e23e:	f88d 001b 	strb.w	r0, [sp, #27]
    e242:	e7f4      	b.n	e22e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0000e244 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
    e244:	b089      	sub	sp, #36	; 0x24
    e246:	9005      	str	r0, [sp, #20]
    e248:	9106      	str	r1, [sp, #24]
    e24a:	9107      	str	r1, [sp, #28]
    e24c:	9907      	ldr	r1, [sp, #28]
    e24e:	9002      	str	r0, [sp, #8]
    e250:	9101      	str	r1, [sp, #4]
    e252:	e7ff      	b.n	e254 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
    e254:	9802      	ldr	r0, [sp, #8]
    e256:	9008      	str	r0, [sp, #32]
    e258:	9908      	ldr	r1, [sp, #32]
    e25a:	9100      	str	r1, [sp, #0]
    e25c:	e7ff      	b.n	e25e <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
    e25e:	9800      	ldr	r0, [sp, #0]
    e260:	9003      	str	r0, [sp, #12]
    e262:	9901      	ldr	r1, [sp, #4]
    e264:	9104      	str	r1, [sp, #16]
    e266:	9803      	ldr	r0, [sp, #12]
    e268:	9904      	ldr	r1, [sp, #16]
    e26a:	b009      	add	sp, #36	; 0x24
    e26c:	4770      	bx	lr

0000e26e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
    e26e:	b580      	push	{r7, lr}
    e270:	b088      	sub	sp, #32
    e272:	9006      	str	r0, [sp, #24]
    e274:	9107      	str	r1, [sp, #28]
    e276:	9004      	str	r0, [sp, #16]
    e278:	4608      	mov	r0, r1
    e27a:	9103      	str	r1, [sp, #12]
    e27c:	f009 fa77 	bl	1776e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    e280:	9002      	str	r0, [sp, #8]
    e282:	e7ff      	b.n	e284 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
    e284:	9802      	ldr	r0, [sp, #8]
    e286:	07c1      	lsls	r1, r0, #31
    e288:	2900      	cmp	r1, #0
    e28a:	d105      	bne.n	e298 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
    e28c:	e7ff      	b.n	e28e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
    e28e:	9803      	ldr	r0, [sp, #12]
    e290:	f009 fa71 	bl	17776 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    e294:	9001      	str	r0, [sp, #4]
    e296:	e007      	b.n	e2a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
    e298:	9804      	ldr	r0, [sp, #16]
    e29a:	9903      	ldr	r1, [sp, #12]
    e29c:	f00a f891 	bl	183c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    e2a0:	f88d 0017 	strb.w	r0, [sp, #23]
    e2a4:	e7ff      	b.n	e2a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
    e2a6:	e015      	b.n	e2d4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e2a8:	9801      	ldr	r0, [sp, #4]
    e2aa:	07c1      	lsls	r1, r0, #31
    e2ac:	2900      	cmp	r1, #0
    e2ae:	d107      	bne.n	e2c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
    e2b0:	e7ff      	b.n	e2b2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
    e2b2:	9804      	ldr	r0, [sp, #16]
    e2b4:	9903      	ldr	r1, [sp, #12]
    e2b6:	f00a f9ff 	bl	186b8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
    e2ba:	f88d 0017 	strb.w	r0, [sp, #23]
    e2be:	e007      	b.n	e2d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
    e2c0:	9804      	ldr	r0, [sp, #16]
    e2c2:	9903      	ldr	r1, [sp, #12]
    e2c4:	f00a f8e8 	bl	18498 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    e2c8:	f88d 0017 	strb.w	r0, [sp, #23]
    e2cc:	e7ff      	b.n	e2ce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
    e2ce:	e000      	b.n	e2d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e2d0:	e7ff      	b.n	e2d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e2d2:	e7ff      	b.n	e2d4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e2d4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e2d8:	b008      	add	sp, #32
    e2da:	bd80      	pop	{r7, pc}

0000e2dc <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
    e2dc:	b580      	push	{r7, lr}
    e2de:	b086      	sub	sp, #24
    e2e0:	f8dd c020 	ldr.w	ip, [sp, #32]
    e2e4:	9102      	str	r1, [sp, #8]
    e2e6:	9203      	str	r2, [sp, #12]
    e2e8:	9304      	str	r3, [sp, #16]
    e2ea:	f8cd c014 	str.w	ip, [sp, #20]
    e2ee:	f04f 0e00 	mov.w	lr, #0
    e2f2:	f8cd e004 	str.w	lr, [sp, #4]
    e2f6:	f8cd e000 	str.w	lr, [sp]
    e2fa:	f8cd e000 	str.w	lr, [sp]
    e2fe:	6001      	str	r1, [r0, #0]
    e300:	6042      	str	r2, [r0, #4]
    e302:	9900      	ldr	r1, [sp, #0]
    e304:	9a01      	ldr	r2, [sp, #4]
    e306:	6081      	str	r1, [r0, #8]
    e308:	60c2      	str	r2, [r0, #12]
    e30a:	6103      	str	r3, [r0, #16]
    e30c:	f8c0 c014 	str.w	ip, [r0, #20]
    e310:	b006      	add	sp, #24
    e312:	bd80      	pop	{r7, pc}

0000e314 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
    e314:	b580      	push	{r7, lr}
    e316:	b084      	sub	sp, #16
    e318:	9001      	str	r0, [sp, #4]
    e31a:	9102      	str	r1, [sp, #8]
    e31c:	9801      	ldr	r0, [sp, #4]
    e31e:	9902      	ldr	r1, [sp, #8]
    e320:	f7ff ff2b 	bl	e17a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
    e324:	9000      	str	r0, [sp, #0]
    e326:	e7ff      	b.n	e328 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
    e328:	9800      	ldr	r0, [sp, #0]
    e32a:	b004      	add	sp, #16
    e32c:	bd80      	pop	{r7, pc}

0000e32e <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
    e32e:	b084      	sub	sp, #16
    e330:	9002      	str	r0, [sp, #8]
    e332:	9103      	str	r1, [sp, #12]
            Coord(x, y)
    e334:	9000      	str	r0, [sp, #0]
    e336:	9101      	str	r1, [sp, #4]
        }
    e338:	9800      	ldr	r0, [sp, #0]
    e33a:	9901      	ldr	r1, [sp, #4]
    e33c:	b004      	add	sp, #16
    e33e:	4770      	bx	lr

0000e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
    e340:	b580      	push	{r7, lr}
    e342:	b096      	sub	sp, #88	; 0x58
    e344:	9109      	str	r1, [sp, #36]	; 0x24
    e346:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
    e348:	9909      	ldr	r1, [sp, #36]	; 0x24
    e34a:	2900      	cmp	r1, #0
    e34c:	9008      	str	r0, [sp, #32]
    e34e:	9107      	str	r1, [sp, #28]
    e350:	d018      	beq.n	e384 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
    e352:	e7ff      	b.n	e354 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
    e354:	9807      	ldr	r0, [sp, #28]
    e356:	2801      	cmp	r0, #1
    e358:	d017      	beq.n	e38a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
    e35a:	e7ff      	b.n	e35c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
    e35c:	f64e 50f4 	movw	r0, #60916	; 0xedf4
    e360:	f2c0 0001 	movt	r0, #1
    e364:	6801      	ldr	r1, [r0, #0]
    e366:	a809      	add	r0, sp, #36	; 0x24
    e368:	9013      	str	r0, [sp, #76]	; 0x4c
    e36a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e36c:	9015      	str	r0, [sp, #84]	; 0x54
    e36e:	f248 72ad 	movw	r2, #34733	; 0x87ad
    e372:	f2c0 0201 	movt	r2, #1
    e376:	9106      	str	r1, [sp, #24]
    e378:	4611      	mov	r1, r2
    e37a:	f7ff ff63 	bl	e244 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
    e37e:	9005      	str	r0, [sp, #20]
    e380:	9104      	str	r1, [sp, #16]
    e382:	e006      	b.n	e392 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
    e384:	9808      	ldr	r0, [sp, #32]
    e386:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
    e388:	e020      	b.n	e3cc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
    e38a:	9808      	ldr	r0, [sp, #32]
    e38c:	1d01      	adds	r1, r0, #4
    e38e:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
    e390:	e01c      	b.n	e3cc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
    e392:	9805      	ldr	r0, [sp, #20]
    e394:	9011      	str	r0, [sp, #68]	; 0x44
    e396:	9904      	ldr	r1, [sp, #16]
    e398:	9112      	str	r1, [sp, #72]	; 0x48
    e39a:	466a      	mov	r2, sp
    e39c:	2301      	movs	r3, #1
    e39e:	6013      	str	r3, [r2, #0]
    e3a0:	a80b      	add	r0, sp, #44	; 0x2c
    e3a2:	aa11      	add	r2, sp, #68	; 0x44
    e3a4:	9906      	ldr	r1, [sp, #24]
    e3a6:	9203      	str	r2, [sp, #12]
    e3a8:	461a      	mov	r2, r3
    e3aa:	9b03      	ldr	r3, [sp, #12]
    e3ac:	f7ff ff96 	bl	e2dc <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
    e3b0:	e7ff      	b.n	e3b2 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
    e3b2:	f64e 50f8 	movw	r0, #60920	; 0xedf8
    e3b6:	f2c0 0001 	movt	r0, #1
    e3ba:	f008 fb30 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e3be:	9002      	str	r0, [sp, #8]
    e3c0:	e7ff      	b.n	e3c2 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
    e3c2:	a80b      	add	r0, sp, #44	; 0x2c
    e3c4:	9902      	ldr	r1, [sp, #8]
    e3c6:	f008 fb67 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e3ca:	defe      	udf	#254	; 0xfe
            match idx {
    e3cc:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
    e3ce:	b016      	add	sp, #88	; 0x58
    e3d0:	bd80      	pop	{r7, pc}

0000e3d2 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
    e3d2:	b580      	push	{r7, lr}
    e3d4:	b088      	sub	sp, #32
    e3d6:	9006      	str	r0, [sp, #24]
    e3d8:	9107      	str	r1, [sp, #28]
    e3da:	a806      	add	r0, sp, #24
    e3dc:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
    e3de:	f7ff ffaf 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e3e2:	9005      	str	r0, [sp, #20]
    e3e4:	e7ff      	b.n	e3e6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
    e3e6:	9805      	ldr	r0, [sp, #20]
    e3e8:	6800      	ldr	r0, [r0, #0]
    e3ea:	2100      	movs	r1, #0
    e3ec:	f7ff feba 	bl	e164 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e3f0:	9004      	str	r0, [sp, #16]
    e3f2:	e7ff      	b.n	e3f4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
    e3f4:	a806      	add	r0, sp, #24
    e3f6:	2101      	movs	r1, #1
    e3f8:	f7ff ffa2 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e3fc:	9003      	str	r0, [sp, #12]
    e3fe:	e7ff      	b.n	e400 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
    e400:	9803      	ldr	r0, [sp, #12]
    e402:	6800      	ldr	r0, [r0, #0]
    e404:	2100      	movs	r1, #0
    e406:	f7ff fead 	bl	e164 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e40a:	9002      	str	r0, [sp, #8]
    e40c:	e7ff      	b.n	e40e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
    e40e:	9804      	ldr	r0, [sp, #16]
    e410:	9902      	ldr	r1, [sp, #8]
    e412:	f000 f84e 	bl	e4b2 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
    e416:	9001      	str	r0, [sp, #4]
    e418:	9100      	str	r1, [sp, #0]
    e41a:	e7ff      	b.n	e41c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
    e41c:	9801      	ldr	r0, [sp, #4]
    e41e:	9900      	ldr	r1, [sp, #0]
    e420:	b008      	add	sp, #32
    e422:	bd80      	pop	{r7, pc}

0000e424 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
    e424:	b08b      	sub	sp, #44	; 0x2c
    e426:	4601      	mov	r1, r0
    e428:	f8ad 0020 	strh.w	r0, [sp, #32]
    e42c:	0c00      	lsrs	r0, r0, #16
    e42e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    e432:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    e436:	f88d 001e 	strb.w	r0, [sp, #30]
    e43a:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    e43e:	f8ad 001c 	strh.w	r0, [sp, #28]
    e442:	f89d 001c 	ldrb.w	r0, [sp, #28]
    e446:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e44a:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e44e:	4613      	mov	r3, r2
    e450:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    e454:	f89d 201e 	ldrb.w	r2, [sp, #30]
    e458:	4694      	mov	ip, r2
    e45a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
    e45e:	0200      	lsls	r0, r0, #8
    e460:	9306      	str	r3, [sp, #24]
    e462:	f8cd c014 	str.w	ip, [sp, #20]
    e466:	9004      	str	r0, [sp, #16]
    e468:	e7ff      	b.n	e46a <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
    e46a:	9804      	ldr	r0, [sp, #16]
    e46c:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
    e470:	9a06      	ldr	r2, [sp, #24]
    e472:	b2d3      	uxtb	r3, r2
    e474:	00db      	lsls	r3, r3, #3
    e476:	9103      	str	r1, [sp, #12]
    e478:	9302      	str	r3, [sp, #8]
    e47a:	e7ff      	b.n	e47c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
    e47c:	9802      	ldr	r0, [sp, #8]
    e47e:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
    e482:	9a03      	ldr	r2, [sp, #12]
    e484:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
    e486:	9b05      	ldr	r3, [sp, #20]
    e488:	fa5f fc83 	uxtb.w	ip, r3
    e48c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    e490:	9101      	str	r1, [sp, #4]
    e492:	f8cd c000 	str.w	ip, [sp]
    e496:	e7ff      	b.n	e498 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
    e498:	9800      	ldr	r0, [sp, #0]
    e49a:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
    e49e:	9a01      	ldr	r2, [sp, #4]
    e4a0:	4311      	orrs	r1, r2
    e4a2:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
    e4a6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
    e4aa:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    e4ae:	b00b      	add	sp, #44	; 0x2c
    e4b0:	4770      	bx	lr

0000e4b2 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
    e4b2:	b084      	sub	sp, #16
    e4b4:	9002      	str	r0, [sp, #8]
    e4b6:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
    e4b8:	9000      	str	r0, [sp, #0]
    e4ba:	9101      	str	r1, [sp, #4]
        }
    e4bc:	9800      	ldr	r0, [sp, #0]
    e4be:	9901      	ldr	r1, [sp, #4]
    e4c0:	b004      	add	sp, #16
    e4c2:	4770      	bx	lr

0000e4c4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
    e4c4:	b580      	push	{r7, lr}
    e4c6:	b088      	sub	sp, #32
    e4c8:	9005      	str	r0, [sp, #20]
    e4ca:	9106      	str	r1, [sp, #24]
    e4cc:	9003      	str	r0, [sp, #12]
    e4ce:	4608      	mov	r0, r1
    e4d0:	f000 fa21 	bl	e916 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
    e4d4:	9004      	str	r0, [sp, #16]
    e4d6:	e7ff      	b.n	e4d8 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
    e4d8:	9804      	ldr	r0, [sp, #16]
    e4da:	9007      	str	r0, [sp, #28]
    e4dc:	9903      	ldr	r1, [sp, #12]
    e4de:	680a      	ldr	r2, [r1, #0]
    e4e0:	9002      	str	r0, [sp, #8]
    e4e2:	4610      	mov	r0, r2
    e4e4:	9902      	ldr	r1, [sp, #8]
    e4e6:	f000 f837 	bl	e558 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
    e4ea:	9001      	str	r0, [sp, #4]
    e4ec:	9100      	str	r1, [sp, #0]
    e4ee:	e7ff      	b.n	e4f0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
    e4f0:	9801      	ldr	r0, [sp, #4]
    e4f2:	9900      	ldr	r1, [sp, #0]
    e4f4:	b008      	add	sp, #32
    e4f6:	bd80      	pop	{r7, pc}

0000e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
    e4f8:	b580      	push	{r7, lr}
    e4fa:	b084      	sub	sp, #16
    e4fc:	9001      	str	r0, [sp, #4]
    e4fe:	9102      	str	r1, [sp, #8]
    e500:	9203      	str	r2, [sp, #12]
    e502:	9000      	str	r0, [sp, #0]
    e504:	4608      	mov	r0, r1
    e506:	9900      	ldr	r1, [sp, #0]
    e508:	f00e fe64 	bl	1d1d4 <__aeabi_memcpy>
    e50c:	e7ff      	b.n	e50e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
    e50e:	b004      	add	sp, #16
    e510:	bd80      	pop	{r7, pc}

0000e512 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
    e512:	b580      	push	{r7, lr}
    e514:	b084      	sub	sp, #16
    e516:	9001      	str	r0, [sp, #4]
    e518:	9102      	str	r1, [sp, #8]
    e51a:	9203      	str	r2, [sp, #12]
    e51c:	0092      	lsls	r2, r2, #2
    e51e:	9000      	str	r0, [sp, #0]
    e520:	4608      	mov	r0, r1
    e522:	9900      	ldr	r1, [sp, #0]
    e524:	f00e fe56 	bl	1d1d4 <__aeabi_memcpy>
    e528:	e7ff      	b.n	e52a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
    e52a:	b004      	add	sp, #16
    e52c:	bd80      	pop	{r7, pc}

0000e52e <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
    e52e:	b082      	sub	sp, #8
    e530:	9000      	str	r0, [sp, #0]
    e532:	9101      	str	r1, [sp, #4]
    e534:	6800      	ldr	r0, [r0, #0]
    e536:	6809      	ldr	r1, [r1, #0]
    e538:	2200      	movs	r2, #0
    e53a:	4288      	cmp	r0, r1
    e53c:	bf38      	it	cc
    e53e:	2201      	movcc	r2, #1
    e540:	4610      	mov	r0, r2
    e542:	b002      	add	sp, #8
    e544:	4770      	bx	lr

0000e546 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
    e546:	b580      	push	{r7, lr}
    e548:	b082      	sub	sp, #8
    e54a:	9000      	str	r0, [sp, #0]
    e54c:	9101      	str	r1, [sp, #4]
    e54e:	f000 f85f 	bl	e610 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
    e552:	e7ff      	b.n	e554 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
    e554:	b002      	add	sp, #8
    e556:	bd80      	pop	{r7, pc}

0000e558 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
    e558:	b580      	push	{r7, lr}
    e55a:	b088      	sub	sp, #32
    e55c:	9004      	str	r0, [sp, #16]
    e55e:	9105      	str	r1, [sp, #20]
    e560:	f000 f819 	bl	e596 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
    e564:	9001      	str	r0, [sp, #4]
    e566:	9100      	str	r1, [sp, #0]
    e568:	e7ff      	b.n	e56a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
    e56a:	9801      	ldr	r0, [sp, #4]
    e56c:	9006      	str	r0, [sp, #24]
    e56e:	9900      	ldr	r1, [sp, #0]
    e570:	f001 0201 	and.w	r2, r1, #1
    e574:	f88d 201f 	strb.w	r2, [sp, #31]
    e578:	2a00      	cmp	r2, #0
    e57a:	d105      	bne.n	e588 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
    e57c:	e7ff      	b.n	e57e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
    e57e:	9801      	ldr	r0, [sp, #4]
    e580:	9003      	str	r0, [sp, #12]
    e582:	2101      	movs	r1, #1
    e584:	9102      	str	r1, [sp, #8]
    e586:	e002      	b.n	e58e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e588:	2000      	movs	r0, #0
    e58a:	9002      	str	r0, [sp, #8]
    e58c:	e7ff      	b.n	e58e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e58e:	9802      	ldr	r0, [sp, #8]
    e590:	9903      	ldr	r1, [sp, #12]
    e592:	b008      	add	sp, #32
    e594:	bd80      	pop	{r7, pc}

0000e596 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
    e596:	b08a      	sub	sp, #40	; 0x28
    e598:	9004      	str	r0, [sp, #16]
    e59a:	9105      	str	r1, [sp, #20]
    e59c:	1840      	adds	r0, r0, r1
    e59e:	f04f 0100 	mov.w	r1, #0
    e5a2:	f141 0100 	adc.w	r1, r1, #0
    e5a6:	9006      	str	r0, [sp, #24]
    e5a8:	f88d 101c 	strb.w	r1, [sp, #28]
    e5ac:	9806      	ldr	r0, [sp, #24]
    e5ae:	f89d 101c 	ldrb.w	r1, [sp, #28]
    e5b2:	9001      	str	r0, [sp, #4]
    e5b4:	9100      	str	r1, [sp, #0]
    e5b6:	e7ff      	b.n	e5b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
    e5b8:	9801      	ldr	r0, [sp, #4]
    e5ba:	9008      	str	r0, [sp, #32]
    e5bc:	9900      	ldr	r1, [sp, #0]
    e5be:	f001 0201 	and.w	r2, r1, #1
    e5c2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    e5c6:	9002      	str	r0, [sp, #8]
    e5c8:	f88d 200c 	strb.w	r2, [sp, #12]
    e5cc:	9802      	ldr	r0, [sp, #8]
    e5ce:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e5d2:	b00a      	add	sp, #40	; 0x28
    e5d4:	4770      	bx	lr

0000e5d6 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
    e5d6:	b580      	push	{r7, lr}
    e5d8:	b08c      	sub	sp, #48	; 0x30
    e5da:	9005      	str	r0, [sp, #20]
    e5dc:	9106      	str	r1, [sp, #24]
    e5de:	9207      	str	r2, [sp, #28]
    e5e0:	4603      	mov	r3, r0
    e5e2:	9008      	str	r0, [sp, #32]
    e5e4:	4608      	mov	r0, r1
    e5e6:	9109      	str	r1, [sp, #36]	; 0x24
    e5e8:	2104      	movs	r1, #4
    e5ea:	910b      	str	r1, [sp, #44]	; 0x2c
    e5ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e5ee:	9204      	str	r2, [sp, #16]
    e5f0:	9303      	str	r3, [sp, #12]
    e5f2:	9002      	str	r0, [sp, #8]
    e5f4:	9101      	str	r1, [sp, #4]
    e5f6:	e7ff      	b.n	e5f8 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
    e5f8:	9801      	ldr	r0, [sp, #4]
    e5fa:	9904      	ldr	r1, [sp, #16]
    e5fc:	fb00 f201 	mul.w	r2, r0, r1
    e600:	920a      	str	r2, [sp, #40]	; 0x28
    e602:	9803      	ldr	r0, [sp, #12]
    e604:	9902      	ldr	r1, [sp, #8]
    e606:	f000 f82e 	bl	e666 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
    e60a:	e7ff      	b.n	e60c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
    e60c:	b00c      	add	sp, #48	; 0x30
    e60e:	bd80      	pop	{r7, pc}

0000e610 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
    e610:	b580      	push	{r7, lr}
    e612:	b088      	sub	sp, #32
    e614:	9004      	str	r0, [sp, #16]
    e616:	9105      	str	r1, [sp, #20]
    e618:	2204      	movs	r2, #4
    e61a:	9207      	str	r2, [sp, #28]
    e61c:	9a07      	ldr	r2, [sp, #28]
    e61e:	9103      	str	r1, [sp, #12]
    e620:	9002      	str	r0, [sp, #8]
    e622:	9201      	str	r2, [sp, #4]
    e624:	e7ff      	b.n	e626 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
    e626:	9801      	ldr	r0, [sp, #4]
    e628:	2820      	cmp	r0, #32
    e62a:	d306      	bcc.n	e63a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
    e62c:	e7ff      	b.n	e62e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
    e62e:	2201      	movs	r2, #1
    e630:	9802      	ldr	r0, [sp, #8]
    e632:	9903      	ldr	r1, [sp, #12]
    e634:	f7ff ffcf 	bl	e5d6 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
    e638:	e012      	b.n	e660 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
    e63a:	9802      	ldr	r0, [sp, #8]
    e63c:	f000 f8a1 	bl	e782 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
    e640:	4601      	mov	r1, r0
    e642:	9006      	str	r0, [sp, #24]
    e644:	9100      	str	r1, [sp, #0]
    e646:	e7ff      	b.n	e648 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
    e648:	2201      	movs	r2, #1
    e64a:	9803      	ldr	r0, [sp, #12]
    e64c:	9902      	ldr	r1, [sp, #8]
    e64e:	f7ff ff60 	bl	e512 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e652:	e7ff      	b.n	e654 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
    e654:	9803      	ldr	r0, [sp, #12]
    e656:	9900      	ldr	r1, [sp, #0]
    e658:	f000 f8ac 	bl	e7b4 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
    e65c:	e7ff      	b.n	e65e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
    e65e:	e000      	b.n	e662 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e660:	e7ff      	b.n	e662 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e662:	b008      	add	sp, #32
    e664:	bd80      	pop	{r7, pc}

0000e666 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
    e666:	b5d0      	push	{r4, r6, r7, lr}
    e668:	af02      	add	r7, sp, #8
    e66a:	b0b4      	sub	sp, #208	; 0xd0
    e66c:	466c      	mov	r4, sp
    e66e:	f36f 0404 	bfc	r4, #0, #5
    e672:	46a5      	mov	sp, r4
    e674:	9024      	str	r0, [sp, #144]	; 0x90
    e676:	9125      	str	r1, [sp, #148]	; 0x94
    e678:	9226      	str	r2, [sp, #152]	; 0x98
    e67a:	2320      	movs	r3, #32
    e67c:	932f      	str	r3, [sp, #188]	; 0xbc
    e67e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    e680:	9327      	str	r3, [sp, #156]	; 0x9c
    e682:	920e      	str	r2, [sp, #56]	; 0x38
    e684:	910d      	str	r1, [sp, #52]	; 0x34
    e686:	900c      	str	r0, [sp, #48]	; 0x30
    e688:	930b      	str	r3, [sp, #44]	; 0x2c
    e68a:	e7ff      	b.n	e68c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
    e68c:	2000      	movs	r0, #0
    e68e:	900f      	str	r0, [sp, #60]	; 0x3c
    e690:	e7ff      	b.n	e692 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e692:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e694:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e696:	4408      	add	r0, r1
    e698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e69a:	4290      	cmp	r0, r2
    e69c:	d905      	bls.n	e6aa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
    e69e:	e7ff      	b.n	e6a0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
    e6a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e6a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    e6a4:	4288      	cmp	r0, r1
    e6a6:	d334      	bcc.n	e712 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
    e6a8:	e067      	b.n	e77a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e6aa:	e7ff      	b.n	e6ac <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
    e6ac:	a810      	add	r0, sp, #64	; 0x40
    e6ae:	9030      	str	r0, [sp, #192]	; 0xc0
    e6b0:	9031      	str	r0, [sp, #196]	; 0xc4
    e6b2:	e7ff      	b.n	e6b4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
    e6b4:	a810      	add	r0, sp, #64	; 0x40
    e6b6:	4601      	mov	r1, r0
    e6b8:	9028      	str	r0, [sp, #160]	; 0xa0
    e6ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e6bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e6be:	900a      	str	r0, [sp, #40]	; 0x28
    e6c0:	4610      	mov	r0, r2
    e6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e6c4:	9109      	str	r1, [sp, #36]	; 0x24
    e6c6:	4619      	mov	r1, r3
    e6c8:	f000 f87a 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e6cc:	4601      	mov	r1, r0
    e6ce:	9029      	str	r0, [sp, #164]	; 0xa4
    e6d0:	9108      	str	r1, [sp, #32]
    e6d2:	e7ff      	b.n	e6d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
    e6d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e6d6:	980d      	ldr	r0, [sp, #52]	; 0x34
    e6d8:	f000 f872 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e6dc:	4601      	mov	r1, r0
    e6de:	902a      	str	r0, [sp, #168]	; 0xa8
    e6e0:	9107      	str	r1, [sp, #28]
    e6e2:	e7ff      	b.n	e6e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
    e6e4:	9808      	ldr	r0, [sp, #32]
    e6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
    e6e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e6ea:	f7ff ff05 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6ee:	e7ff      	b.n	e6f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
    e6f0:	9807      	ldr	r0, [sp, #28]
    e6f2:	9908      	ldr	r1, [sp, #32]
    e6f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e6f6:	f7ff feff 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6fa:	e7ff      	b.n	e6fc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
    e6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    e6fe:	9907      	ldr	r1, [sp, #28]
    e700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e702:	f7ff fef9 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e706:	e7ff      	b.n	e708 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
    e708:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e70a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e70c:	4408      	add	r0, r1
    e70e:	900f      	str	r0, [sp, #60]	; 0x3c
    e710:	e7bf      	b.n	e692 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e712:	e7ff      	b.n	e714 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
    e714:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e716:	990e      	ldr	r1, [sp, #56]	; 0x38
    e718:	1a08      	subs	r0, r1, r0
    e71a:	4602      	mov	r2, r0
    e71c:	902b      	str	r0, [sp, #172]	; 0xac
    e71e:	a81c      	add	r0, sp, #112	; 0x70
    e720:	9032      	str	r0, [sp, #200]	; 0xc8
    e722:	9033      	str	r0, [sp, #204]	; 0xcc
    e724:	9206      	str	r2, [sp, #24]
    e726:	9005      	str	r0, [sp, #20]
    e728:	e7ff      	b.n	e72a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
    e72a:	9805      	ldr	r0, [sp, #20]
    e72c:	9905      	ldr	r1, [sp, #20]
    e72e:	912c      	str	r1, [sp, #176]	; 0xb0
    e730:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e734:	9004      	str	r0, [sp, #16]
    e736:	4610      	mov	r0, r2
    e738:	f000 f842 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e73c:	4601      	mov	r1, r0
    e73e:	902d      	str	r0, [sp, #180]	; 0xb4
    e740:	9103      	str	r1, [sp, #12]
    e742:	e7ff      	b.n	e744 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
    e744:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e746:	980d      	ldr	r0, [sp, #52]	; 0x34
    e748:	f000 f83a 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e74c:	4601      	mov	r1, r0
    e74e:	902e      	str	r0, [sp, #184]	; 0xb8
    e750:	9102      	str	r1, [sp, #8]
    e752:	e7ff      	b.n	e754 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
    e754:	9803      	ldr	r0, [sp, #12]
    e756:	9904      	ldr	r1, [sp, #16]
    e758:	9a06      	ldr	r2, [sp, #24]
    e75a:	f7ff fecd 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e75e:	e7ff      	b.n	e760 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
    e760:	9802      	ldr	r0, [sp, #8]
    e762:	9903      	ldr	r1, [sp, #12]
    e764:	9a06      	ldr	r2, [sp, #24]
    e766:	f7ff fec7 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e76a:	e7ff      	b.n	e76c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
    e76c:	9804      	ldr	r0, [sp, #16]
    e76e:	9902      	ldr	r1, [sp, #8]
    e770:	9a06      	ldr	r2, [sp, #24]
    e772:	f7ff fec1 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e776:	e7ff      	b.n	e778 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
    e778:	e7ff      	b.n	e77a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e77a:	f1a7 0408 	sub.w	r4, r7, #8
    e77e:	46a5      	mov	sp, r4
    e780:	bdd0      	pop	{r4, r6, r7, pc}

0000e782 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
    e782:	b580      	push	{r7, lr}
    e784:	b08a      	sub	sp, #40	; 0x28
    e786:	9004      	str	r0, [sp, #16]
    e788:	9905      	ldr	r1, [sp, #20]
    e78a:	9103      	str	r1, [sp, #12]
    e78c:	9002      	str	r0, [sp, #8]
    e78e:	e7ff      	b.n	e790 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
    e790:	a803      	add	r0, sp, #12
    e792:	9008      	str	r0, [sp, #32]
    e794:	9009      	str	r0, [sp, #36]	; 0x24
    e796:	e7ff      	b.n	e798 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
    e798:	a903      	add	r1, sp, #12
    e79a:	2201      	movs	r2, #1
    e79c:	9802      	ldr	r0, [sp, #8]
    e79e:	f7ff feb8 	bl	e512 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e7a2:	e7ff      	b.n	e7a4 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
    e7a4:	9803      	ldr	r0, [sp, #12]
    e7a6:	9006      	str	r0, [sp, #24]
    e7a8:	9007      	str	r0, [sp, #28]
    e7aa:	9001      	str	r0, [sp, #4]
    e7ac:	e7ff      	b.n	e7ae <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
    e7ae:	9801      	ldr	r0, [sp, #4]
    e7b0:	b00a      	add	sp, #40	; 0x28
    e7b2:	bd80      	pop	{r7, pc}

0000e7b4 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
    e7b4:	b082      	sub	sp, #8
    e7b6:	9000      	str	r0, [sp, #0]
    e7b8:	9101      	str	r1, [sp, #4]
    e7ba:	6001      	str	r1, [r0, #0]
    e7bc:	b002      	add	sp, #8
    e7be:	4770      	bx	lr

0000e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
    e7c0:	b580      	push	{r7, lr}
    e7c2:	b084      	sub	sp, #16
    e7c4:	9002      	str	r0, [sp, #8]
    e7c6:	9103      	str	r1, [sp, #12]
    e7c8:	f000 f805 	bl	e7d6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
    e7cc:	9001      	str	r0, [sp, #4]
    e7ce:	e7ff      	b.n	e7d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
    e7d0:	9801      	ldr	r0, [sp, #4]
    e7d2:	b004      	add	sp, #16
    e7d4:	bd80      	pop	{r7, pc}

0000e7d6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
    e7d6:	b084      	sub	sp, #16
    e7d8:	9001      	str	r0, [sp, #4]
    e7da:	9102      	str	r1, [sp, #8]
    e7dc:	4408      	add	r0, r1
    e7de:	9003      	str	r0, [sp, #12]
    e7e0:	9803      	ldr	r0, [sp, #12]
    e7e2:	9000      	str	r0, [sp, #0]
    e7e4:	e7ff      	b.n	e7e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
    e7e6:	9800      	ldr	r0, [sp, #0]
    e7e8:	b004      	add	sp, #16
    e7ea:	4770      	bx	lr

0000e7ec <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
    e7ec:	b580      	push	{r7, lr}
    e7ee:	b084      	sub	sp, #16
    e7f0:	9002      	str	r0, [sp, #8]
    e7f2:	9103      	str	r1, [sp, #12]
    e7f4:	f000 f805 	bl	e802 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
    e7f8:	9001      	str	r0, [sp, #4]
    e7fa:	e7ff      	b.n	e7fc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
    e7fc:	9801      	ldr	r0, [sp, #4]
    e7fe:	b004      	add	sp, #16
    e800:	bd80      	pop	{r7, pc}

0000e802 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
    e802:	b084      	sub	sp, #16
    e804:	9001      	str	r0, [sp, #4]
    e806:	9102      	str	r1, [sp, #8]
    e808:	4408      	add	r0, r1
    e80a:	9003      	str	r0, [sp, #12]
    e80c:	9803      	ldr	r0, [sp, #12]
    e80e:	9000      	str	r0, [sp, #0]
    e810:	e7ff      	b.n	e812 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
    e812:	9800      	ldr	r0, [sp, #0]
    e814:	b004      	add	sp, #16
    e816:	4770      	bx	lr

0000e818 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
    e818:	b580      	push	{r7, lr}
    e81a:	b08a      	sub	sp, #40	; 0x28
    e81c:	9009      	str	r0, [sp, #36]	; 0x24
    e81e:	2100      	movs	r1, #0
    e820:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    e824:	1d01      	adds	r1, r0, #4
    e826:	9002      	str	r0, [sp, #8]
    e828:	f7ff fe81 	bl	e52e <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
    e82c:	9001      	str	r0, [sp, #4]
    e82e:	e7ff      	b.n	e830 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
    e830:	9801      	ldr	r0, [sp, #4]
    e832:	07c1      	lsls	r1, r0, #31
    e834:	2900      	cmp	r1, #0
    e836:	d103      	bne.n	e840 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
    e838:	e7ff      	b.n	e83a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
    e83a:	2000      	movs	r0, #0
    e83c:	9003      	str	r0, [sp, #12]
    e83e:	e021      	b.n	e884 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e840:	2001      	movs	r0, #1
    e842:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e846:	9902      	ldr	r1, [sp, #8]
    e848:	9000      	str	r0, [sp, #0]
    e84a:	4608      	mov	r0, r1
    e84c:	9900      	ldr	r1, [sp, #0]
    e84e:	f7ff fe39 	bl	e4c4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
    e852:	9106      	str	r1, [sp, #24]
    e854:	9005      	str	r0, [sp, #20]
    e856:	e7ff      	b.n	e858 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
    e858:	9805      	ldr	r0, [sp, #20]
    e85a:	2801      	cmp	r0, #1
    e85c:	d003      	beq.n	e866 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
    e85e:	e7ff      	b.n	e860 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
    e860:	2000      	movs	r0, #0
    e862:	9003      	str	r0, [sp, #12]
    e864:	e021      	b.n	e8aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e866:	2000      	movs	r0, #0
    e868:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e86c:	9806      	ldr	r0, [sp, #24]
    e86e:	9007      	str	r0, [sp, #28]
    e870:	a807      	add	r0, sp, #28
    e872:	9902      	ldr	r1, [sp, #8]
    e874:	f7ff fe67 	bl	e546 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
    e878:	e7ff      	b.n	e87a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
    e87a:	9807      	ldr	r0, [sp, #28]
    e87c:	9004      	str	r0, [sp, #16]
    e87e:	2001      	movs	r0, #1
    e880:	9003      	str	r0, [sp, #12]
    e882:	e012      	b.n	e8aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e884:	9803      	ldr	r0, [sp, #12]
    e886:	9904      	ldr	r1, [sp, #16]
    e888:	b00a      	add	sp, #40	; 0x28
    e88a:	bd80      	pop	{r7, pc}
    e88c:	2000      	movs	r0, #0
    e88e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e892:	e7f7      	b.n	e884 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e894:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    e898:	07c0      	lsls	r0, r0, #31
    e89a:	2800      	cmp	r0, #0
    e89c:	d0f6      	beq.n	e88c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e89e:	e7ff      	b.n	e8a0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
    e8a0:	2000      	movs	r0, #0
    e8a2:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e8a6:	e7f1      	b.n	e88c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e8a8:	e7f0      	b.n	e88c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e8aa:	9805      	ldr	r0, [sp, #20]
    e8ac:	2801      	cmp	r0, #1
    e8ae:	d0f1      	beq.n	e894 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
    e8b0:	e7fa      	b.n	e8a8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

0000e8b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
    e8b2:	b082      	sub	sp, #8
    e8b4:	9000      	str	r0, [sp, #0]
    e8b6:	9101      	str	r1, [sp, #4]
    e8b8:	b002      	add	sp, #8
    e8ba:	4770      	bx	lr

0000e8bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
    e8bc:	b580      	push	{r7, lr}
    e8be:	b086      	sub	sp, #24
    e8c0:	9003      	str	r0, [sp, #12]
    e8c2:	9104      	str	r1, [sp, #16]
    e8c4:	9205      	str	r2, [sp, #20]
    e8c6:	9002      	str	r0, [sp, #8]
    e8c8:	4610      	mov	r0, r2
    e8ca:	9a02      	ldr	r2, [sp, #8]
    e8cc:	9101      	str	r1, [sp, #4]
    e8ce:	4611      	mov	r1, r2
    e8d0:	9a01      	ldr	r2, [sp, #4]
    e8d2:	f000 f846 	bl	e962 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
    e8d6:	9000      	str	r0, [sp, #0]
    e8d8:	e7ff      	b.n	e8da <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
    e8da:	9800      	ldr	r0, [sp, #0]
    e8dc:	b006      	add	sp, #24
    e8de:	bd80      	pop	{r7, pc}

0000e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
    e8e0:	b084      	sub	sp, #16
    e8e2:	9002      	str	r0, [sp, #8]
    e8e4:	9103      	str	r1, [sp, #12]
    e8e6:	9000      	str	r0, [sp, #0]
    e8e8:	9101      	str	r1, [sp, #4]
    e8ea:	9801      	ldr	r0, [sp, #4]
    e8ec:	b004      	add	sp, #16
    e8ee:	4770      	bx	lr

0000e8f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
    e8f0:	b082      	sub	sp, #8
    e8f2:	9000      	str	r0, [sp, #0]
    e8f4:	9101      	str	r1, [sp, #4]
    e8f6:	b002      	add	sp, #8
    e8f8:	4770      	bx	lr

0000e8fa <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
    e8fa:	b081      	sub	sp, #4
    e8fc:	9000      	str	r0, [sp, #0]
    e8fe:	b001      	add	sp, #4
    e900:	4770      	bx	lr

0000e902 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
    e902:	b580      	push	{r7, lr}
    e904:	b082      	sub	sp, #8
    e906:	9001      	str	r0, [sp, #4]
    e908:	f7ff fff7 	bl	e8fa <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
    e90c:	9000      	str	r0, [sp, #0]
    e90e:	e7ff      	b.n	e910 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
    e910:	9800      	ldr	r0, [sp, #0]
    e912:	b002      	add	sp, #8
    e914:	bd80      	pop	{r7, pc}

0000e916 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
    e916:	b580      	push	{r7, lr}
    e918:	b084      	sub	sp, #16
    e91a:	9003      	str	r0, [sp, #12]
    e91c:	f7ff fff1 	bl	e902 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
    e920:	9001      	str	r0, [sp, #4]
    e922:	e7ff      	b.n	e924 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
    e924:	9801      	ldr	r0, [sp, #4]
    e926:	9002      	str	r0, [sp, #8]
    e928:	9802      	ldr	r0, [sp, #8]
    e92a:	b004      	add	sp, #16
    e92c:	bd80      	pop	{r7, pc}

0000e92e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
    e92e:	b082      	sub	sp, #8
    e930:	9000      	str	r0, [sp, #0]
    e932:	9101      	str	r1, [sp, #4]
    e934:	b002      	add	sp, #8
    e936:	4770      	bx	lr

0000e938 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
    e938:	b580      	push	{r7, lr}
    e93a:	b086      	sub	sp, #24
    e93c:	9003      	str	r0, [sp, #12]
    e93e:	9104      	str	r1, [sp, #16]
    e940:	9205      	str	r2, [sp, #20]
    e942:	9002      	str	r0, [sp, #8]
    e944:	4608      	mov	r0, r1
    e946:	4611      	mov	r1, r2
    e948:	f7ff ffd2 	bl	e8f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    e94c:	9001      	str	r0, [sp, #4]
    e94e:	e7ff      	b.n	e950 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
    e950:	9801      	ldr	r0, [sp, #4]
    e952:	9902      	ldr	r1, [sp, #8]
    e954:	f7ff ff4a 	bl	e7ec <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
    e958:	9000      	str	r0, [sp, #0]
    e95a:	e7ff      	b.n	e95c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
    e95c:	9800      	ldr	r0, [sp, #0]
    e95e:	b006      	add	sp, #24
    e960:	bd80      	pop	{r7, pc}

0000e962 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
    e962:	b580      	push	{r7, lr}
    e964:	b086      	sub	sp, #24
    e966:	9003      	str	r0, [sp, #12]
    e968:	9104      	str	r1, [sp, #16]
    e96a:	9205      	str	r2, [sp, #20]
    e96c:	9002      	str	r0, [sp, #8]
    e96e:	4608      	mov	r0, r1
    e970:	4611      	mov	r1, r2
    e972:	f7ff ff9e 	bl	e8b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    e976:	9001      	str	r0, [sp, #4]
    e978:	e7ff      	b.n	e97a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
    e97a:	9801      	ldr	r0, [sp, #4]
    e97c:	9902      	ldr	r1, [sp, #8]
    e97e:	f7ff ff1f 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e982:	9000      	str	r0, [sp, #0]
    e984:	e7ff      	b.n	e986 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
    e986:	9800      	ldr	r0, [sp, #0]
    e988:	b006      	add	sp, #24
    e98a:	bd80      	pop	{r7, pc}

0000e98c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
    e98c:	b580      	push	{r7, lr}
    e98e:	b086      	sub	sp, #24
    e990:	f8dd c020 	ldr.w	ip, [sp, #32]
    e994:	9102      	str	r1, [sp, #8]
    e996:	9203      	str	r2, [sp, #12]
    e998:	9304      	str	r3, [sp, #16]
    e99a:	f8cd c014 	str.w	ip, [sp, #20]
    e99e:	f04f 0e00 	mov.w	lr, #0
    e9a2:	f8cd e004 	str.w	lr, [sp, #4]
    e9a6:	f8cd e000 	str.w	lr, [sp]
    e9aa:	f8cd e000 	str.w	lr, [sp]
    e9ae:	6001      	str	r1, [r0, #0]
    e9b0:	6042      	str	r2, [r0, #4]
    e9b2:	9900      	ldr	r1, [sp, #0]
    e9b4:	9a01      	ldr	r2, [sp, #4]
    e9b6:	6081      	str	r1, [r0, #8]
    e9b8:	60c2      	str	r2, [r0, #12]
    e9ba:	6103      	str	r3, [r0, #16]
    e9bc:	f8c0 c014 	str.w	ip, [r0, #20]
    e9c0:	b006      	add	sp, #24
    e9c2:	bd80      	pop	{r7, pc}

0000e9c4 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
    e9c4:	b580      	push	{r7, lr}
    e9c6:	b084      	sub	sp, #16
    e9c8:	9101      	str	r1, [sp, #4]
    e9ca:	9202      	str	r2, [sp, #8]
    e9cc:	9901      	ldr	r1, [sp, #4]
    e9ce:	9a02      	ldr	r2, [sp, #8]
    e9d0:	f000 fa92 	bl	eef8 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
    e9d4:	e7ff      	b.n	e9d6 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
    e9d6:	b004      	add	sp, #16
    e9d8:	bd80      	pop	{r7, pc}

0000e9da <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
    e9da:	b081      	sub	sp, #4
    e9dc:	9000      	str	r0, [sp, #0]
    e9de:	b001      	add	sp, #4
    e9e0:	4770      	bx	lr

0000e9e2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
    e9e2:	b081      	sub	sp, #4
    e9e4:	9000      	str	r0, [sp, #0]
    e9e6:	b001      	add	sp, #4
    e9e8:	4770      	bx	lr

0000e9ea <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
    e9ea:	b580      	push	{r7, lr}
    e9ec:	b086      	sub	sp, #24
    e9ee:	460a      	mov	r2, r1
    e9f0:	9004      	str	r0, [sp, #16]
    e9f2:	f88d 1017 	strb.w	r1, [sp, #23]
    e9f6:	9203      	str	r2, [sp, #12]
    e9f8:	f7ff fff3 	bl	e9e2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
    e9fc:	9002      	str	r0, [sp, #8]
    e9fe:	e7ff      	b.n	ea00 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
    ea00:	9802      	ldr	r0, [sp, #8]
    ea02:	9903      	ldr	r1, [sp, #12]
    ea04:	f000 f806 	bl	ea14 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
    ea08:	9001      	str	r0, [sp, #4]
    ea0a:	e7ff      	b.n	ea0c <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
    ea0c:	9801      	ldr	r0, [sp, #4]
    ea0e:	b006      	add	sp, #24
    ea10:	bd80      	pop	{r7, pc}
	...

0000ea14 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
    ea14:	b086      	sub	sp, #24
    ea16:	460a      	mov	r2, r1
    ea18:	f88d 100f 	strb.w	r1, [sp, #15]
    ea1c:	9005      	str	r0, [sp, #20]
    ea1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ea22:	9002      	str	r0, [sp, #8]
    ea24:	9101      	str	r1, [sp, #4]
    ea26:	9901      	ldr	r1, [sp, #4]
    ea28:	e8df f001 	tbb	[pc, r1]
    ea2c:	03102317 	.word	0x03102317
    ea30:	001c      	.short	0x001c
    ea32:	f64e 6058 	movw	r0, #61016	; 0xee58
    ea36:	f2c0 0001 	movt	r0, #1
    ea3a:	f64e 62d4 	movw	r2, #61140	; 0xeed4
    ea3e:	f2c0 0201 	movt	r2, #1
    ea42:	2131      	movs	r1, #49	; 0x31
    ea44:	f007 fff2 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea48:	defe      	udf	#254	; 0xfe
    ea4a:	defe      	udf	#254	; 0xfe
    ea4c:	9802      	ldr	r0, [sp, #8]
    ea4e:	6801      	ldr	r1, [r0, #0]
    ea50:	f3bf 8f5f 	dmb	sy
    ea54:	9104      	str	r1, [sp, #16]
    ea56:	e7ff      	b.n	ea58 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
    ea58:	e017      	b.n	ea8a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ea5a:	9802      	ldr	r0, [sp, #8]
    ea5c:	6801      	ldr	r1, [r0, #0]
    ea5e:	9104      	str	r1, [sp, #16]
    ea60:	e7ff      	b.n	ea62 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
    ea62:	e012      	b.n	ea8a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ea64:	9802      	ldr	r0, [sp, #8]
    ea66:	6801      	ldr	r1, [r0, #0]
    ea68:	f3bf 8f5f 	dmb	sy
    ea6c:	9104      	str	r1, [sp, #16]
    ea6e:	e7ff      	b.n	ea70 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
    ea70:	e00b      	b.n	ea8a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ea72:	f64e 60e4 	movw	r0, #61156	; 0xeee4
    ea76:	f2c0 0001 	movt	r0, #1
    ea7a:	f64e 62d4 	movw	r2, #61140	; 0xeed4
    ea7e:	f2c0 0201 	movt	r2, #1
    ea82:	2128      	movs	r1, #40	; 0x28
    ea84:	f007 ffd2 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea88:	defe      	udf	#254	; 0xfe
    ea8a:	9804      	ldr	r0, [sp, #16]
    ea8c:	b006      	add	sp, #24
    ea8e:	4770      	bx	lr

0000ea90 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
    ea90:	b081      	sub	sp, #4
    ea92:	9000      	str	r0, [sp, #0]
    ea94:	6800      	ldr	r0, [r0, #0]
    ea96:	b001      	add	sp, #4
    ea98:	4770      	bx	lr

0000ea9a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
    ea9a:	b082      	sub	sp, #8
    ea9c:	9001      	str	r0, [sp, #4]
    ea9e:	6801      	ldr	r1, [r0, #0]
    eaa0:	6840      	ldr	r0, [r0, #4]
    eaa2:	9000      	str	r0, [sp, #0]
    eaa4:	4608      	mov	r0, r1
    eaa6:	9900      	ldr	r1, [sp, #0]
    eaa8:	b002      	add	sp, #8
    eaaa:	4770      	bx	lr

0000eaac <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
    eaac:	b580      	push	{r7, lr}
    eaae:	b08c      	sub	sp, #48	; 0x30
    eab0:	9101      	str	r1, [sp, #4]
    eab2:	9202      	str	r2, [sp, #8]
    eab4:	2100      	movs	r1, #0
    eab6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    eaba:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    eabe:	2101      	movs	r1, #1
    eac0:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    eac4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    eac8:	9901      	ldr	r1, [sp, #4]
    eaca:	2900      	cmp	r1, #0
    eacc:	460a      	mov	r2, r1
    eace:	bf18      	it	ne
    ead0:	2201      	movne	r2, #1
    ead2:	2900      	cmp	r1, #0
    ead4:	9000      	str	r0, [sp, #0]
    ead6:	d001      	beq.n	eadc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
    ead8:	e7ff      	b.n	eada <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
    eada:	e008      	b.n	eaee <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
    eadc:	2000      	movs	r0, #0
    eade:	9900      	ldr	r1, [sp, #0]
    eae0:	6088      	str	r0, [r1, #8]
    eae2:	6048      	str	r0, [r1, #4]
    eae4:	6008      	str	r0, [r1, #0]
    eae6:	2002      	movs	r0, #2
    eae8:	6008      	str	r0, [r1, #0]
    eaea:	e021      	b.n	eb30 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    eaec:	defe      	udf	#254	; 0xfe
    eaee:	2000      	movs	r0, #0
    eaf0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    eaf4:	9901      	ldr	r1, [sp, #4]
    eaf6:	9a02      	ldr	r2, [sp, #8]
    eaf8:	910a      	str	r1, [sp, #40]	; 0x28
    eafa:	920b      	str	r2, [sp, #44]	; 0x2c
    eafc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    eb00:	9106      	str	r1, [sp, #24]
    eb02:	9207      	str	r2, [sp, #28]
    eb04:	9906      	ldr	r1, [sp, #24]
    eb06:	9a07      	ldr	r2, [sp, #28]
    eb08:	a803      	add	r0, sp, #12
    eb0a:	f7ff ff5b 	bl	e9c4 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
    eb0e:	e7ff      	b.n	eb10 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
    eb10:	9803      	ldr	r0, [sp, #12]
    eb12:	9904      	ldr	r1, [sp, #16]
    eb14:	9a05      	ldr	r2, [sp, #20]
    eb16:	9b00      	ldr	r3, [sp, #0]
    eb18:	609a      	str	r2, [r3, #8]
    eb1a:	6059      	str	r1, [r3, #4]
    eb1c:	6018      	str	r0, [r3, #0]
    eb1e:	e007      	b.n	eb30 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    eb20:	9801      	ldr	r0, [sp, #4]
    eb22:	2800      	cmp	r0, #0
    eb24:	d10c      	bne.n	eb40 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
    eb26:	e015      	b.n	eb54 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
    eb28:	2000      	movs	r0, #0
    eb2a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    eb2e:	e7f7      	b.n	eb20 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    eb30:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    eb34:	07c0      	lsls	r0, r0, #31
    eb36:	2800      	cmp	r0, #0
    eb38:	d1f6      	bne.n	eb28 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
    eb3a:	e7f1      	b.n	eb20 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    eb3c:	b00c      	add	sp, #48	; 0x30
    eb3e:	bd80      	pop	{r7, pc}
    eb40:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    eb44:	07c0      	lsls	r0, r0, #31
    eb46:	2800      	cmp	r0, #0
    eb48:	d0f8      	beq.n	eb3c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    eb4a:	e7ff      	b.n	eb4c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
    eb4c:	2000      	movs	r0, #0
    eb4e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    eb52:	e7f3      	b.n	eb3c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    eb54:	e7f2      	b.n	eb3c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

0000eb56 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
    eb56:	b5b0      	push	{r4, r5, r7, lr}
    eb58:	b081      	sub	sp, #4
    eb5a:	9100      	str	r1, [sp, #0]
    eb5c:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    eb60:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    eb64:	b001      	add	sp, #4
    eb66:	bdb0      	pop	{r4, r5, r7, pc}

0000eb68 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
    eb68:	b580      	push	{r7, lr}
    eb6a:	b088      	sub	sp, #32
    eb6c:	9106      	str	r1, [sp, #24]
    eb6e:	680a      	ldr	r2, [r1, #0]
    eb70:	1e93      	subs	r3, r2, #2
    eb72:	bf18      	it	ne
    eb74:	2301      	movne	r3, #1
    eb76:	2a02      	cmp	r2, #2
    eb78:	9102      	str	r1, [sp, #8]
    eb7a:	9001      	str	r0, [sp, #4]
    eb7c:	d001      	beq.n	eb82 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
    eb7e:	e7ff      	b.n	eb80 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
    eb80:	e008      	b.n	eb94 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
    eb82:	2000      	movs	r0, #0
    eb84:	9901      	ldr	r1, [sp, #4]
    eb86:	6088      	str	r0, [r1, #8]
    eb88:	6048      	str	r0, [r1, #4]
    eb8a:	6008      	str	r0, [r1, #0]
    eb8c:	2002      	movs	r0, #2
    eb8e:	6008      	str	r0, [r1, #0]
    eb90:	e00f      	b.n	ebb2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    eb92:	defe      	udf	#254	; 0xfe
    eb94:	9802      	ldr	r0, [sp, #8]
    eb96:	9007      	str	r0, [sp, #28]
    eb98:	a803      	add	r0, sp, #12
    eb9a:	9902      	ldr	r1, [sp, #8]
    eb9c:	f000 f9b5 	bl	ef0a <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
    eba0:	e7ff      	b.n	eba2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
    eba2:	9803      	ldr	r0, [sp, #12]
    eba4:	9904      	ldr	r1, [sp, #16]
    eba6:	9a05      	ldr	r2, [sp, #20]
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	609a      	str	r2, [r3, #8]
    ebac:	6059      	str	r1, [r3, #4]
    ebae:	6018      	str	r0, [r3, #0]
    ebb0:	e7ff      	b.n	ebb2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    ebb2:	b008      	add	sp, #32
    ebb4:	bd80      	pop	{r7, pc}

0000ebb6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
    ebb6:	b580      	push	{r7, lr}
    ebb8:	b086      	sub	sp, #24
    ebba:	9004      	str	r0, [sp, #16]
    ebbc:	6801      	ldr	r1, [r0, #0]
    ebbe:	2900      	cmp	r1, #0
    ebc0:	9001      	str	r0, [sp, #4]
    ebc2:	d001      	beq.n	ebc8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
    ebc4:	e7ff      	b.n	ebc6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
    ebc6:	e003      	b.n	ebd0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
    ebc8:	2000      	movs	r0, #0
    ebca:	9002      	str	r0, [sp, #8]
    ebcc:	e00d      	b.n	ebea <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    ebce:	defe      	udf	#254	; 0xfe
    ebd0:	9801      	ldr	r0, [sp, #4]
    ebd2:	1d01      	adds	r1, r0, #4
    ebd4:	9105      	str	r1, [sp, #20]
    ebd6:	4608      	mov	r0, r1
    ebd8:	f7ff ff5a 	bl	ea90 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
    ebdc:	9000      	str	r0, [sp, #0]
    ebde:	e7ff      	b.n	ebe0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
    ebe0:	9800      	ldr	r0, [sp, #0]
    ebe2:	9003      	str	r0, [sp, #12]
    ebe4:	2101      	movs	r1, #1
    ebe6:	9102      	str	r1, [sp, #8]
    ebe8:	e7ff      	b.n	ebea <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    ebea:	9802      	ldr	r0, [sp, #8]
    ebec:	9903      	ldr	r1, [sp, #12]
    ebee:	b006      	add	sp, #24
    ebf0:	bd80      	pop	{r7, pc}

0000ebf2 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
    ebf2:	b081      	sub	sp, #4
    ebf4:	9000      	str	r0, [sp, #0]
        *self
    ebf6:	6800      	ldr	r0, [r0, #0]
    }
    ebf8:	b001      	add	sp, #4
    ebfa:	4770      	bx	lr

0000ebfc <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
    ebfc:	b580      	push	{r7, lr}
        RecordBuilder::new()
    ebfe:	f000 f802 	bl	ec06 <_ZN3log13RecordBuilder3new17haca8312579858419E>
    ec02:	e7ff      	b.n	ec04 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
    ec04:	bd80      	pop	{r7, pc}

0000ec06 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
    ec06:	b570      	push	{r4, r5, r6, lr}
    ec08:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
    ec0a:	f64e 7124 	movw	r1, #61220	; 0xef24
    ec0e:	f2c0 0101 	movt	r1, #1
    ec12:	6809      	ldr	r1, [r1, #0]
    ec14:	466a      	mov	r2, sp
    ec16:	2300      	movs	r3, #0
    ec18:	6013      	str	r3, [r2, #0]
    ec1a:	aa16      	add	r2, sp, #88	; 0x58
    ec1c:	9004      	str	r0, [sp, #16]
    ec1e:	4610      	mov	r0, r2
    ec20:	9103      	str	r1, [sp, #12]
    ec22:	461a      	mov	r2, r3
    ec24:	9b03      	ldr	r3, [sp, #12]
    ec26:	f7ff feb1 	bl	e98c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
    ec2a:	e7ff      	b.n	ec2c <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
    ec2c:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
    ec2e:	f000 f891 	bl	ed54 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
    ec32:	e7ff      	b.n	ec34 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
    ec34:	a81c      	add	r0, sp, #112	; 0x70
    ec36:	a91f      	add	r1, sp, #124	; 0x7c
    ec38:	f000 f8a5 	bl	ed86 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
    ec3c:	e7ff      	b.n	ec3e <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
    ec3e:	2000      	movs	r0, #0
                module_path: None,
    ec40:	9024      	str	r0, [sp, #144]	; 0x90
    ec42:	9023      	str	r0, [sp, #140]	; 0x8c
    ec44:	9022      	str	r0, [sp, #136]	; 0x88
    ec46:	2102      	movs	r1, #2
    ec48:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
    ec4a:	9027      	str	r0, [sp, #156]	; 0x9c
    ec4c:	9026      	str	r0, [sp, #152]	; 0x98
    ec4e:	9025      	str	r0, [sp, #148]	; 0x94
    ec50:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
    ec52:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
    ec54:	981c      	ldr	r0, [sp, #112]	; 0x70
    ec56:	991d      	ldr	r1, [sp, #116]	; 0x74
    ec58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    ec5a:	9207      	str	r2, [sp, #28]
    ec5c:	9106      	str	r1, [sp, #24]
    ec5e:	9005      	str	r0, [sp, #20]
    ec60:	a805      	add	r0, sp, #20
    ec62:	f100 010c 	add.w	r1, r0, #12
    ec66:	aa16      	add	r2, sp, #88	; 0x58
    ec68:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ec6c:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    ec70:	9922      	ldr	r1, [sp, #136]	; 0x88
    ec72:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    ec74:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ec76:	9310      	str	r3, [sp, #64]	; 0x40
    ec78:	920f      	str	r2, [sp, #60]	; 0x3c
    ec7a:	910e      	str	r1, [sp, #56]	; 0x38
    ec7c:	9925      	ldr	r1, [sp, #148]	; 0x94
    ec7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ec80:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ec82:	9313      	str	r3, [sp, #76]	; 0x4c
    ec84:	9212      	str	r2, [sp, #72]	; 0x48
    ec86:	9111      	str	r1, [sp, #68]	; 0x44
    ec88:	9928      	ldr	r1, [sp, #160]	; 0xa0
    ec8a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ec8c:	9114      	str	r1, [sp, #80]	; 0x50
    ec8e:	9215      	str	r2, [sp, #84]	; 0x54
    ec90:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
    ec92:	9904      	ldr	r1, [sp, #16]
    ec94:	9002      	str	r0, [sp, #8]
    ec96:	4608      	mov	r0, r1
    ec98:	9902      	ldr	r1, [sp, #8]
    ec9a:	f00e fa9b 	bl	1d1d4 <__aeabi_memcpy>
    }
    ec9e:	b02a      	add	sp, #168	; 0xa8
    eca0:	bd70      	pop	{r4, r5, r6, pc}

0000eca2 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
    eca2:	b5f0      	push	{r4, r5, r6, r7, lr}
    eca4:	b087      	sub	sp, #28
    eca6:	9006      	str	r0, [sp, #24]
    eca8:	466a      	mov	r2, sp
        self.record.args = args;
    ecaa:	4613      	mov	r3, r2
    ecac:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
    ecb0:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
    ecb4:	f100 010c 	add.w	r1, r0, #12
    ecb8:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ecbc:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
    ecc0:	b007      	add	sp, #28
    ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ecc4 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
    ecc4:	b082      	sub	sp, #8
    ecc6:	9000      	str	r0, [sp, #0]
    ecc8:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
    ecca:	6001      	str	r1, [r0, #0]
    }
    eccc:	b002      	add	sp, #8
    ecce:	4770      	bx	lr

0000ecd0 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
    ecd0:	b083      	sub	sp, #12
    ecd2:	9000      	str	r0, [sp, #0]
    ecd4:	9101      	str	r1, [sp, #4]
    ecd6:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
    ecd8:	6041      	str	r1, [r0, #4]
    ecda:	6082      	str	r2, [r0, #8]
    }
    ecdc:	b003      	add	sp, #12
    ecde:	4770      	bx	lr

0000ece0 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ece0:	b580      	push	{r7, lr}
    ece2:	b088      	sub	sp, #32
    ece4:	9005      	str	r0, [sp, #20]
    ece6:	9106      	str	r1, [sp, #24]
    ece8:	9207      	str	r2, [sp, #28]
    ecea:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
    ecec:	9001      	str	r0, [sp, #4]
    ecee:	4618      	mov	r0, r3
    ecf0:	f7ff fedc 	bl	eaac <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ecf4:	e7ff      	b.n	ecf6 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
    ecf6:	9802      	ldr	r0, [sp, #8]
    ecf8:	9903      	ldr	r1, [sp, #12]
    ecfa:	9a04      	ldr	r2, [sp, #16]
    ecfc:	9b01      	ldr	r3, [sp, #4]
    ecfe:	62da      	str	r2, [r3, #44]	; 0x2c
    ed00:	6299      	str	r1, [r3, #40]	; 0x28
    ed02:	6258      	str	r0, [r3, #36]	; 0x24
    }
    ed04:	4618      	mov	r0, r3
    ed06:	b008      	add	sp, #32
    ed08:	bd80      	pop	{r7, pc}

0000ed0a <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ed0a:	b580      	push	{r7, lr}
    ed0c:	b088      	sub	sp, #32
    ed0e:	9005      	str	r0, [sp, #20]
    ed10:	9106      	str	r1, [sp, #24]
    ed12:	9207      	str	r2, [sp, #28]
    ed14:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
    ed16:	9001      	str	r0, [sp, #4]
    ed18:	4618      	mov	r0, r3
    ed1a:	f7ff fec7 	bl	eaac <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ed1e:	e7ff      	b.n	ed20 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
    ed20:	9802      	ldr	r0, [sp, #8]
    ed22:	9903      	ldr	r1, [sp, #12]
    ed24:	9a04      	ldr	r2, [sp, #16]
    ed26:	9b01      	ldr	r3, [sp, #4]
    ed28:	639a      	str	r2, [r3, #56]	; 0x38
    ed2a:	6359      	str	r1, [r3, #52]	; 0x34
    ed2c:	6318      	str	r0, [r3, #48]	; 0x30
    }
    ed2e:	4618      	mov	r0, r3
    ed30:	b008      	add	sp, #32
    ed32:	bd80      	pop	{r7, pc}

0000ed34 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
    ed34:	b083      	sub	sp, #12
    ed36:	9000      	str	r0, [sp, #0]
    ed38:	9101      	str	r1, [sp, #4]
    ed3a:	9202      	str	r2, [sp, #8]
        self.record.line = line;
    ed3c:	63c1      	str	r1, [r0, #60]	; 0x3c
    ed3e:	6402      	str	r2, [r0, #64]	; 0x40
    }
    ed40:	b003      	add	sp, #12
    ed42:	4770      	bx	lr

0000ed44 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
    ed44:	b580      	push	{r7, lr}
    ed46:	b082      	sub	sp, #8
    ed48:	9101      	str	r1, [sp, #4]
        self.record.clone()
    ed4a:	f000 f8e8 	bl	ef1e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
    ed4e:	e7ff      	b.n	ed50 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
    ed50:	b002      	add	sp, #8
    ed52:	bd80      	pop	{r7, pc}

0000ed54 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
    ed54:	b580      	push	{r7, lr}
        MetadataBuilder::new()
    ed56:	f000 f802 	bl	ed5e <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
    ed5a:	e7ff      	b.n	ed5c <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
    ed5c:	bd80      	pop	{r7, pc}

0000ed5e <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
    ed5e:	b084      	sub	sp, #16
    ed60:	2103      	movs	r1, #3
                level: Level::Info,
    ed62:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
    ed64:	9903      	ldr	r1, [sp, #12]
    ed66:	9100      	str	r1, [sp, #0]
    ed68:	f64e 710c 	movw	r1, #61196	; 0xef0c
    ed6c:	f2c0 0101 	movt	r1, #1
    ed70:	9101      	str	r1, [sp, #4]
    ed72:	2100      	movs	r1, #0
    ed74:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
    ed76:	9900      	ldr	r1, [sp, #0]
    ed78:	9a01      	ldr	r2, [sp, #4]
    ed7a:	9b02      	ldr	r3, [sp, #8]
    ed7c:	6083      	str	r3, [r0, #8]
    ed7e:	6042      	str	r2, [r0, #4]
    ed80:	6001      	str	r1, [r0, #0]
    }
    ed82:	b004      	add	sp, #16
    ed84:	4770      	bx	lr

0000ed86 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
    ed86:	b580      	push	{r7, lr}
    ed88:	b082      	sub	sp, #8
    ed8a:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
    ed8c:	f000 f91c 	bl	efc8 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    ed90:	e7ff      	b.n	ed92 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
    ed92:	b002      	add	sp, #8
    ed94:	bd80      	pop	{r7, pc}

0000ed96 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
    ed96:	b082      	sub	sp, #8
    ed98:	9000      	str	r0, [sp, #0]
    ed9a:	9101      	str	r1, [sp, #4]
    ed9c:	2000      	movs	r0, #0
    }
    ed9e:	b002      	add	sp, #8
    eda0:	4770      	bx	lr

0000eda2 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
    eda2:	b082      	sub	sp, #8
    eda4:	9000      	str	r0, [sp, #0]
    eda6:	9101      	str	r1, [sp, #4]
    eda8:	b002      	add	sp, #8
    edaa:	4770      	bx	lr

0000edac <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
    edac:	b081      	sub	sp, #4
    edae:	9000      	str	r0, [sp, #0]
    edb0:	b001      	add	sp, #4
    edb2:	4770      	bx	lr

0000edb4 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
    edb4:	b580      	push	{r7, lr}
    edb6:	b084      	sub	sp, #16
    edb8:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    edba:	f88d 000f 	strb.w	r0, [sp, #15]
    edbe:	f89d 100f 	ldrb.w	r1, [sp, #15]
    edc2:	f640 10fc 	movw	r0, #2556	; 0x9fc
    edc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    edca:	f7ff fe0e 	bl	e9ea <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
    edce:	9000      	str	r0, [sp, #0]
    edd0:	e7ff      	b.n	edd2 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
    edd2:	9800      	ldr	r0, [sp, #0]
    edd4:	2802      	cmp	r0, #2
    edd6:	d109      	bne.n	edec <_ZN3log6logger17hf609e7cc1c031552E+0x38>
    edd8:	e7ff      	b.n	edda <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
    edda:	f240 00e8 	movw	r0, #232	; 0xe8
    edde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ede2:	6801      	ldr	r1, [r0, #0]
    ede4:	6840      	ldr	r0, [r0, #4]
    ede6:	9101      	str	r1, [sp, #4]
    ede8:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    edea:	e00a      	b.n	ee02 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
    edec:	f64e 7040 	movw	r0, #61248	; 0xef40
    edf0:	f2c0 0001 	movt	r0, #1
    edf4:	9001      	str	r0, [sp, #4]
    edf6:	f64e 7028 	movw	r0, #61224	; 0xef28
    edfa:	f2c0 0001 	movt	r0, #1
    edfe:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ee00:	e7ff      	b.n	ee02 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
    ee02:	9801      	ldr	r0, [sp, #4]
    ee04:	9902      	ldr	r1, [sp, #8]
        }
    }
}
    ee06:	b004      	add	sp, #16
    ee08:	bd80      	pop	{r7, pc}

0000ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
    ee0a:	b570      	push	{r4, r5, r6, lr}
    ee0c:	b0ca      	sub	sp, #296	; 0x128
    ee0e:	9141      	str	r1, [sp, #260]	; 0x104
    ee10:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
    ee12:	6813      	ldr	r3, [r2, #0]
    ee14:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ee18:	9343      	str	r3, [sp, #268]	; 0x10c
    ee1a:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
    ee1e:	f8d2 e008 	ldr.w	lr, [r2, #8]
    ee22:	68d4      	ldr	r4, [r2, #12]
    ee24:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
    ee28:	9446      	str	r4, [sp, #280]	; 0x118
    ee2a:	6915      	ldr	r5, [r2, #16]
    ee2c:	6956      	ldr	r6, [r2, #20]
    ee2e:	9547      	str	r5, [sp, #284]	; 0x11c
    ee30:	9648      	str	r6, [sp, #288]	; 0x120
    ee32:	6992      	ldr	r2, [r2, #24]
    ee34:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
    ee36:	9112      	str	r1, [sp, #72]	; 0x48
    ee38:	9011      	str	r0, [sp, #68]	; 0x44
    ee3a:	9310      	str	r3, [sp, #64]	; 0x40
    ee3c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    ee40:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    ee44:	940d      	str	r4, [sp, #52]	; 0x34
    ee46:	950c      	str	r5, [sp, #48]	; 0x30
    ee48:	960b      	str	r6, [sp, #44]	; 0x2c
    ee4a:	920a      	str	r2, [sp, #40]	; 0x28
    ee4c:	f7ff ffb2 	bl	edb4 <_ZN3log6logger17hf609e7cc1c031552E>
    ee50:	9009      	str	r0, [sp, #36]	; 0x24
    ee52:	9108      	str	r1, [sp, #32]
    ee54:	e7ff      	b.n	ee56 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
    ee56:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
    ee58:	f7ff fed0 	bl	ebfc <_ZN3log6Record7builder17hde62ab0132265febE>
    ee5c:	e7ff      	b.n	ee5e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
    ee5e:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
    ee60:	4601      	mov	r1, r0
    ee62:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ee64:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ee68:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    ee6c:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
    ee6e:	9007      	str	r0, [sp, #28]
    ee70:	4608      	mov	r0, r1
    ee72:	9907      	ldr	r1, [sp, #28]
    ee74:	f7ff ff15 	bl	eca2 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
    ee78:	9006      	str	r0, [sp, #24]
    ee7a:	e7ff      	b.n	ee7c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
    ee7c:	9806      	ldr	r0, [sp, #24]
    ee7e:	9912      	ldr	r1, [sp, #72]	; 0x48
    ee80:	f7ff ff20 	bl	ecc4 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
    ee84:	9005      	str	r0, [sp, #20]
    ee86:	e7ff      	b.n	ee88 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
    ee88:	9805      	ldr	r0, [sp, #20]
    ee8a:	9910      	ldr	r1, [sp, #64]	; 0x40
    ee8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ee8e:	f7ff ff1f 	bl	ecd0 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
    ee92:	9004      	str	r0, [sp, #16]
    ee94:	e7ff      	b.n	ee96 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
    ee96:	980e      	ldr	r0, [sp, #56]	; 0x38
    ee98:	903b      	str	r0, [sp, #236]	; 0xec
    ee9a:	990d      	ldr	r1, [sp, #52]	; 0x34
    ee9c:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
    ee9e:	993b      	ldr	r1, [sp, #236]	; 0xec
    eea0:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    eea2:	9804      	ldr	r0, [sp, #16]
    eea4:	f7ff ff1c 	bl	ece0 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
    eea8:	9003      	str	r0, [sp, #12]
    eeaa:	e7ff      	b.n	eeac <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
    eeac:	980c      	ldr	r0, [sp, #48]	; 0x30
    eeae:	903d      	str	r0, [sp, #244]	; 0xf4
    eeb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eeb2:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
    eeb4:	993d      	ldr	r1, [sp, #244]	; 0xf4
    eeb6:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    eeb8:	9803      	ldr	r0, [sp, #12]
    eeba:	f7ff ff26 	bl	ed0a <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
    eebe:	9002      	str	r0, [sp, #8]
    eec0:	e7ff      	b.n	eec2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
    eec2:	980a      	ldr	r0, [sp, #40]	; 0x28
    eec4:	9040      	str	r0, [sp, #256]	; 0x100
    eec6:	2101      	movs	r1, #1
    eec8:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
    eeca:	993f      	ldr	r1, [sp, #252]	; 0xfc
    eecc:	9a40      	ldr	r2, [sp, #256]	; 0x100
    eece:	9802      	ldr	r0, [sp, #8]
    eed0:	f7ff ff30 	bl	ed34 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
    eed4:	9001      	str	r0, [sp, #4]
    eed6:	e7ff      	b.n	eed8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
    eed8:	a813      	add	r0, sp, #76	; 0x4c
    eeda:	9901      	ldr	r1, [sp, #4]
    eedc:	f7ff ff32 	bl	ed44 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
    eee0:	e7ff      	b.n	eee2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
    eee2:	9808      	ldr	r0, [sp, #32]
    eee4:	6901      	ldr	r1, [r0, #16]
    eee6:	aa13      	add	r2, sp, #76	; 0x4c
    eee8:	9809      	ldr	r0, [sp, #36]	; 0x24
    eeea:	9100      	str	r1, [sp, #0]
    eeec:	4611      	mov	r1, r2
    eeee:	9a00      	ldr	r2, [sp, #0]
    eef0:	4790      	blx	r2
    eef2:	e7ff      	b.n	eef4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
    eef4:	b04a      	add	sp, #296	; 0x128
    eef6:	bd70      	pop	{r4, r5, r6, pc}

0000eef8 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
    eef8:	b082      	sub	sp, #8
    eefa:	9100      	str	r1, [sp, #0]
    eefc:	9201      	str	r2, [sp, #4]
    eefe:	6041      	str	r1, [r0, #4]
    ef00:	6082      	str	r2, [r0, #8]
    ef02:	2100      	movs	r1, #0
    ef04:	6001      	str	r1, [r0, #0]
    ef06:	b002      	add	sp, #8
    ef08:	4770      	bx	lr

0000ef0a <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    ef0a:	b081      	sub	sp, #4
    ef0c:	9100      	str	r1, [sp, #0]
    ef0e:	680a      	ldr	r2, [r1, #0]
    ef10:	684b      	ldr	r3, [r1, #4]
    ef12:	6889      	ldr	r1, [r1, #8]
    ef14:	6081      	str	r1, [r0, #8]
    ef16:	6043      	str	r3, [r0, #4]
    ef18:	6002      	str	r2, [r0, #0]
    ef1a:	b001      	add	sp, #4
    ef1c:	4770      	bx	lr

0000ef1e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
    ef1e:	b570      	push	{r4, r5, r6, lr}
    ef20:	b09c      	sub	sp, #112	; 0x70
    ef22:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
    ef24:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
    ef26:	f101 020c 	add.w	r2, r1, #12
    ef2a:	4613      	mov	r3, r2
    ef2c:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
    ef2e:	f101 0224 	add.w	r2, r1, #36	; 0x24
    ef32:	4694      	mov	ip, r2
    ef34:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
    ef36:	f101 0230 	add.w	r2, r1, #48	; 0x30
    ef3a:	4696      	mov	lr, r2
    ef3c:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
    ef3e:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    ef42:	4614      	mov	r4, r2
    ef44:	921b      	str	r2, [sp, #108]	; 0x6c
    ef46:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
    ef48:	9006      	str	r0, [sp, #24]
    ef4a:	4610      	mov	r0, r2
    ef4c:	9305      	str	r3, [sp, #20]
    ef4e:	f8cd c010 	str.w	ip, [sp, #16]
    ef52:	f8cd e00c 	str.w	lr, [sp, #12]
    ef56:	9402      	str	r4, [sp, #8]
    ef58:	f000 f836 	bl	efc8 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    ef5c:	e7ff      	b.n	ef5e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
    ef5e:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
    ef60:	9905      	ldr	r1, [sp, #20]
    ef62:	f7ff fdf8 	bl	eb56 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
    ef66:	e7ff      	b.n	ef68 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
    ef68:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
    ef6a:	9904      	ldr	r1, [sp, #16]
    ef6c:	f7ff fdfc 	bl	eb68 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    ef70:	e7ff      	b.n	ef72 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
    ef72:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
    ef74:	9903      	ldr	r1, [sp, #12]
    ef76:	f7ff fdf7 	bl	eb68 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    ef7a:	e7ff      	b.n	ef7c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
    ef7c:	9802      	ldr	r0, [sp, #8]
    ef7e:	f7ff fe1a 	bl	ebb6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
    ef82:	9001      	str	r0, [sp, #4]
    ef84:	9100      	str	r1, [sp, #0]
    ef86:	e7ff      	b.n	ef88 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
    ef88:	9807      	ldr	r0, [sp, #28]
    ef8a:	9908      	ldr	r1, [sp, #32]
    ef8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef8e:	9b06      	ldr	r3, [sp, #24]
    ef90:	609a      	str	r2, [r3, #8]
    ef92:	6059      	str	r1, [r3, #4]
    ef94:	6018      	str	r0, [r3, #0]
    ef96:	f103 000c 	add.w	r0, r3, #12
    ef9a:	a90a      	add	r1, sp, #40	; 0x28
    ef9c:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
    efa0:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
    efa4:	9810      	ldr	r0, [sp, #64]	; 0x40
    efa6:	9911      	ldr	r1, [sp, #68]	; 0x44
    efa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    efaa:	62da      	str	r2, [r3, #44]	; 0x2c
    efac:	6299      	str	r1, [r3, #40]	; 0x28
    efae:	6258      	str	r0, [r3, #36]	; 0x24
    efb0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    efb2:	9914      	ldr	r1, [sp, #80]	; 0x50
    efb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    efb6:	639a      	str	r2, [r3, #56]	; 0x38
    efb8:	6359      	str	r1, [r3, #52]	; 0x34
    efba:	6318      	str	r0, [r3, #48]	; 0x30
    efbc:	9801      	ldr	r0, [sp, #4]
    efbe:	63d8      	str	r0, [r3, #60]	; 0x3c
    efc0:	9900      	ldr	r1, [sp, #0]
    efc2:	6419      	str	r1, [r3, #64]	; 0x40
    efc4:	b01c      	add	sp, #112	; 0x70
    efc6:	bd70      	pop	{r4, r5, r6, pc}

0000efc8 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    efc8:	b580      	push	{r7, lr}
    efca:	b088      	sub	sp, #32
    efcc:	9105      	str	r1, [sp, #20]
    level: Level,
    efce:	9106      	str	r1, [sp, #24]
    target: &'a str,
    efd0:	1d0a      	adds	r2, r1, #4
    efd2:	4613      	mov	r3, r2
    efd4:	9207      	str	r2, [sp, #28]
    level: Level,
    efd6:	9004      	str	r0, [sp, #16]
    efd8:	4608      	mov	r0, r1
    efda:	9303      	str	r3, [sp, #12]
    efdc:	f7ff fe09 	bl	ebf2 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
    efe0:	9002      	str	r0, [sp, #8]
    efe2:	e7ff      	b.n	efe4 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
    efe4:	9803      	ldr	r0, [sp, #12]
    efe6:	f7ff fd58 	bl	ea9a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
    efea:	9001      	str	r0, [sp, #4]
    efec:	9100      	str	r1, [sp, #0]
    efee:	e7ff      	b.n	eff0 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    eff0:	9802      	ldr	r0, [sp, #8]
    eff2:	9904      	ldr	r1, [sp, #16]
    eff4:	6008      	str	r0, [r1, #0]
    eff6:	9a01      	ldr	r2, [sp, #4]
    eff8:	604a      	str	r2, [r1, #4]
    effa:	9b00      	ldr	r3, [sp, #0]
    effc:	608b      	str	r3, [r1, #8]
    effe:	b008      	add	sp, #32
    f000:	bd80      	pop	{r7, pc}

0000f002 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    f002:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    f004:	f00c fba2 	bl	1b74c <rust_sysinit>
    f008:	e7ff      	b.n	f00a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    f00a:	f000 fbba 	bl	f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f00e:	e7ff      	b.n	f010 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    f010:	bd80      	pop	{r7, pc}

0000f012 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    f012:	b580      	push	{r7, lr}
    f014:	b086      	sub	sp, #24
    f016:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    f018:	7801      	ldrb	r1, [r0, #0]
    f01a:	07ca      	lsls	r2, r1, #31
    f01c:	2a00      	cmp	r2, #0
    f01e:	9000      	str	r0, [sp, #0]
    f020:	d006      	beq.n	f030 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    f022:	e7ff      	b.n	f024 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    f024:	9800      	ldr	r0, [sp, #0]
    f026:	6841      	ldr	r1, [r0, #4]
    f028:	9103      	str	r1, [sp, #12]
    f02a:	9101      	str	r1, [sp, #4]
        match self.rep {
    f02c:	e00c      	b.n	f048 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    f02e:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    f030:	9800      	ldr	r0, [sp, #0]
    f032:	6841      	ldr	r1, [r0, #4]
    f034:	6882      	ldr	r2, [r0, #8]
    f036:	9104      	str	r1, [sp, #16]
    f038:	9205      	str	r2, [sp, #20]
    f03a:	4608      	mov	r0, r1
    f03c:	4611      	mov	r1, r2
    f03e:	f7ff fc57 	bl	e8f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f042:	9001      	str	r0, [sp, #4]
    f044:	e7ff      	b.n	f046 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    f046:	e7ff      	b.n	f048 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    f048:	9801      	ldr	r0, [sp, #4]
    f04a:	b006      	add	sp, #24
    f04c:	bd80      	pop	{r7, pc}

0000f04e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    f04e:	b5b0      	push	{r4, r5, r7, lr}
    f050:	b0b2      	sub	sp, #200	; 0xc8
    f052:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    f054:	7801      	ldrb	r1, [r0, #0]
    f056:	07ca      	lsls	r2, r1, #31
    f058:	2a00      	cmp	r2, #0
    f05a:	900e      	str	r0, [sp, #56]	; 0x38
    f05c:	d005      	beq.n	f06a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    f05e:	e7ff      	b.n	f060 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    f060:	980e      	ldr	r0, [sp, #56]	; 0x38
    f062:	6841      	ldr	r1, [r0, #4]
    f064:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    f066:	e096      	b.n	f196 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    f068:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    f06a:	980e      	ldr	r0, [sp, #56]	; 0x38
    f06c:	6841      	ldr	r1, [r0, #4]
    f06e:	6882      	ldr	r2, [r0, #8]
    f070:	912b      	str	r1, [sp, #172]	; 0xac
    f072:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f074:	4608      	mov	r0, r1
    f076:	4611      	mov	r1, r2
    f078:	f000 fabe 	bl	f5f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    f07c:	9011      	str	r0, [sp, #68]	; 0x44
    f07e:	e7ff      	b.n	f080 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    f080:	f64e 7048 	movw	r0, #61256	; 0xef48
    f084:	f2c0 0001 	movt	r0, #1
    f088:	6800      	ldr	r0, [r0, #0]
    f08a:	a911      	add	r1, sp, #68	; 0x44
    f08c:	910f      	str	r1, [sp, #60]	; 0x3c
    f08e:	9010      	str	r0, [sp, #64]	; 0x40
    f090:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f092:	902d      	str	r0, [sp, #180]	; 0xb4
    f094:	9910      	ldr	r1, [sp, #64]	; 0x40
    f096:	912e      	str	r1, [sp, #184]	; 0xb8
    f098:	900d      	str	r0, [sp, #52]	; 0x34
    f09a:	910c      	str	r1, [sp, #48]	; 0x30
    f09c:	f000 fee5 	bl	fe6a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    f0a0:	900b      	str	r0, [sp, #44]	; 0x2c
    f0a2:	e7ff      	b.n	f0a4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    f0a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f0a6:	07c1      	lsls	r1, r0, #31
    f0a8:	2900      	cmp	r1, #0
    f0aa:	d001      	beq.n	f0b0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    f0ac:	e7ff      	b.n	f0ae <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    f0ae:	e072      	b.n	f196 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f0b0:	f64e 70a0 	movw	r0, #61344	; 0xefa0
    f0b4:	f2c0 0001 	movt	r0, #1
    f0b8:	6801      	ldr	r1, [r0, #0]
    f0ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    f0bc:	9021      	str	r0, [sp, #132]	; 0x84
    f0be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f0c0:	9222      	str	r2, [sp, #136]	; 0x88
    f0c2:	f64e 73b4 	movw	r3, #61364	; 0xefb4
    f0c6:	f2c0 0301 	movt	r3, #1
    f0ca:	681b      	ldr	r3, [r3, #0]
    f0cc:	f64e 7cb8 	movw	ip, #61368	; 0xefb8
    f0d0:	f2c0 0c01 	movt	ip, #1
    f0d4:	f8dc c000 	ldr.w	ip, [ip]
    f0d8:	46ee      	mov	lr, sp
    f0da:	2400      	movs	r4, #0
    f0dc:	f8ce 4000 	str.w	r4, [lr]
    f0e0:	a823      	add	r0, sp, #140	; 0x8c
    f0e2:	2201      	movs	r2, #1
    f0e4:	910a      	str	r1, [sp, #40]	; 0x28
    f0e6:	4619      	mov	r1, r3
    f0e8:	4663      	mov	r3, ip
    f0ea:	f000 f856 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f0ee:	e7ff      	b.n	f0f0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    f0f0:	a821      	add	r0, sp, #132	; 0x84
    f0f2:	901e      	str	r0, [sp, #120]	; 0x78
    f0f4:	a822      	add	r0, sp, #136	; 0x88
    f0f6:	901f      	str	r0, [sp, #124]	; 0x7c
    f0f8:	a823      	add	r0, sp, #140	; 0x8c
    f0fa:	9020      	str	r0, [sp, #128]	; 0x80
    f0fc:	981e      	ldr	r0, [sp, #120]	; 0x78
    f0fe:	902f      	str	r0, [sp, #188]	; 0xbc
    f100:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f102:	9130      	str	r1, [sp, #192]	; 0xc0
    f104:	9a20      	ldr	r2, [sp, #128]	; 0x80
    f106:	9231      	str	r2, [sp, #196]	; 0xc4
    f108:	f64f 5323 	movw	r3, #64803	; 0xfd23
    f10c:	f2c0 0300 	movt	r3, #0
    f110:	9109      	str	r1, [sp, #36]	; 0x24
    f112:	4619      	mov	r1, r3
    f114:	9208      	str	r2, [sp, #32]
    f116:	f000 ff53 	bl	ffc0 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f11a:	9007      	str	r0, [sp, #28]
    f11c:	9106      	str	r1, [sp, #24]
    f11e:	e7ff      	b.n	f120 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    f120:	f64f 5123 	movw	r1, #64803	; 0xfd23
    f124:	f2c0 0100 	movt	r1, #0
    f128:	9809      	ldr	r0, [sp, #36]	; 0x24
    f12a:	f000 ff49 	bl	ffc0 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f12e:	9005      	str	r0, [sp, #20]
    f130:	9104      	str	r1, [sp, #16]
    f132:	e7ff      	b.n	f134 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    f134:	f646 71fb 	movw	r1, #28667	; 0x6ffb
    f138:	f2c0 0101 	movt	r1, #1
    f13c:	9808      	ldr	r0, [sp, #32]
    f13e:	f000 ff69 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f142:	9003      	str	r0, [sp, #12]
    f144:	9102      	str	r1, [sp, #8]
    f146:	e7ff      	b.n	f148 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    f148:	9807      	ldr	r0, [sp, #28]
    f14a:	9018      	str	r0, [sp, #96]	; 0x60
    f14c:	9906      	ldr	r1, [sp, #24]
    f14e:	9119      	str	r1, [sp, #100]	; 0x64
    f150:	9a05      	ldr	r2, [sp, #20]
    f152:	921a      	str	r2, [sp, #104]	; 0x68
    f154:	9b04      	ldr	r3, [sp, #16]
    f156:	931b      	str	r3, [sp, #108]	; 0x6c
    f158:	f8dd c00c 	ldr.w	ip, [sp, #12]
    f15c:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    f160:	f8dd e008 	ldr.w	lr, [sp, #8]
    f164:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    f168:	466c      	mov	r4, sp
    f16a:	2503      	movs	r5, #3
    f16c:	6025      	str	r5, [r4, #0]
    f16e:	a812      	add	r0, sp, #72	; 0x48
    f170:	ab18      	add	r3, sp, #96	; 0x60
    f172:	990a      	ldr	r1, [sp, #40]	; 0x28
    f174:	462a      	mov	r2, r5
    f176:	f000 f810 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f17a:	e7ff      	b.n	f17c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    f17c:	f64e 70d4 	movw	r0, #61396	; 0xefd4
    f180:	f2c0 0001 	movt	r0, #1
    f184:	f007 fc4b 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f188:	9001      	str	r0, [sp, #4]
    f18a:	e7ff      	b.n	f18c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    f18c:	a812      	add	r0, sp, #72	; 0x48
    f18e:	9901      	ldr	r1, [sp, #4]
    f190:	f007 fc82 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f194:	defe      	udf	#254	; 0xfe
    }
    f196:	b032      	add	sp, #200	; 0xc8
    f198:	bdb0      	pop	{r4, r5, r7, pc}

0000f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    f19a:	b580      	push	{r7, lr}
    f19c:	b086      	sub	sp, #24
    f19e:	f8dd c020 	ldr.w	ip, [sp, #32]
    f1a2:	9102      	str	r1, [sp, #8]
    f1a4:	9203      	str	r2, [sp, #12]
    f1a6:	9304      	str	r3, [sp, #16]
    f1a8:	f8cd c014 	str.w	ip, [sp, #20]
    f1ac:	f04f 0e00 	mov.w	lr, #0
    f1b0:	f8cd e004 	str.w	lr, [sp, #4]
    f1b4:	f8cd e000 	str.w	lr, [sp]
    f1b8:	f8cd e000 	str.w	lr, [sp]
    f1bc:	6001      	str	r1, [r0, #0]
    f1be:	6042      	str	r2, [r0, #4]
    f1c0:	9900      	ldr	r1, [sp, #0]
    f1c2:	9a01      	ldr	r2, [sp, #4]
    f1c4:	6081      	str	r1, [r0, #8]
    f1c6:	60c2      	str	r2, [r0, #12]
    f1c8:	6103      	str	r3, [r0, #16]
    f1ca:	f8c0 c014 	str.w	ip, [r0, #20]
    f1ce:	b006      	add	sp, #24
    f1d0:	bd80      	pop	{r7, pc}

0000f1d2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    f1d2:	b082      	sub	sp, #8
    f1d4:	9001      	str	r0, [sp, #4]
    f1d6:	7800      	ldrb	r0, [r0, #0]
    f1d8:	07c0      	lsls	r0, r0, #31
    f1da:	2800      	cmp	r0, #0
    f1dc:	d004      	beq.n	f1e8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    f1de:	e7ff      	b.n	f1e0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    f1e0:	2000      	movs	r0, #0
    f1e2:	f88d 0003 	strb.w	r0, [sp, #3]
    f1e6:	e003      	b.n	f1f0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f1e8:	2001      	movs	r0, #1
    f1ea:	f88d 0003 	strb.w	r0, [sp, #3]
    f1ee:	e7ff      	b.n	f1f0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f1f0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f1f4:	b002      	add	sp, #8
    f1f6:	4770      	bx	lr

0000f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    f1f8:	b08a      	sub	sp, #40	; 0x28
    f1fa:	9005      	str	r0, [sp, #20]
    f1fc:	9107      	str	r1, [sp, #28]
    f1fe:	9208      	str	r2, [sp, #32]
    f200:	9805      	ldr	r0, [sp, #20]
    f202:	f1b0 0c01 	subs.w	ip, r0, #1
    f206:	bf18      	it	ne
    f208:	f04f 0c01 	movne.w	ip, #1
    f20c:	2801      	cmp	r0, #1
    f20e:	9304      	str	r3, [sp, #16]
    f210:	9203      	str	r2, [sp, #12]
    f212:	9102      	str	r1, [sp, #8]
    f214:	d010      	beq.n	f238 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    f216:	e7ff      	b.n	f218 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    f218:	9805      	ldr	r0, [sp, #20]
    f21a:	9006      	str	r0, [sp, #24]
    f21c:	4668      	mov	r0, sp
    f21e:	9904      	ldr	r1, [sp, #16]
    f220:	6001      	str	r1, [r0, #0]
    f222:	f64e 73e4 	movw	r3, #61412	; 0xefe4
    f226:	f2c0 0301 	movt	r3, #1
    f22a:	aa06      	add	r2, sp, #24
    f22c:	9802      	ldr	r0, [sp, #8]
    f22e:	9903      	ldr	r1, [sp, #12]
    f230:	f007 fbce 	bl	169d0 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    f234:	defe      	udf	#254	; 0xfe
    f236:	defe      	udf	#254	; 0xfe
    f238:	9805      	ldr	r0, [sp, #20]
    f23a:	2801      	cmp	r0, #1
    f23c:	d102      	bne.n	f244 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    f23e:	e7ff      	b.n	f240 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    f240:	b00a      	add	sp, #40	; 0x28
    f242:	4770      	bx	lr
    f244:	e7fc      	b.n	f240 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

0000f246 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    f246:	b580      	push	{r7, lr}
    f248:	b082      	sub	sp, #8
    f24a:	9001      	str	r0, [sp, #4]
    f24c:	f7ff ffc1 	bl	f1d2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    f250:	9000      	str	r0, [sp, #0]
    f252:	e7ff      	b.n	f254 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    f254:	2001      	movs	r0, #1
    f256:	9900      	ldr	r1, [sp, #0]
    f258:	4388      	bics	r0, r1
    f25a:	b002      	add	sp, #8
    f25c:	bd80      	pop	{r7, pc}

0000f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    f25e:	b082      	sub	sp, #8
    f260:	9001      	str	r0, [sp, #4]
    f262:	9000      	str	r0, [sp, #0]
    f264:	9800      	ldr	r0, [sp, #0]
    f266:	b002      	add	sp, #8
    f268:	4770      	bx	lr

0000f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    f26a:	b081      	sub	sp, #4
    f26c:	4601      	mov	r1, r0
    f26e:	f88d 0003 	strb.w	r0, [sp, #3]
    f272:	b001      	add	sp, #4
    f274:	4770      	bx	lr

0000f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    f276:	b081      	sub	sp, #4
    f278:	9000      	str	r0, [sp, #0]
    f27a:	b001      	add	sp, #4
    f27c:	4770      	bx	lr

0000f27e <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    f27e:	b580      	push	{r7, lr}
    f280:	b08a      	sub	sp, #40	; 0x28
    f282:	9007      	str	r0, [sp, #28]
    f284:	9108      	str	r1, [sp, #32]
    f286:	9209      	str	r2, [sp, #36]	; 0x24
    f288:	2300      	movs	r3, #0
    f28a:	9305      	str	r3, [sp, #20]
    f28c:	9006      	str	r0, [sp, #24]
    f28e:	9805      	ldr	r0, [sp, #20]
    f290:	9b06      	ldr	r3, [sp, #24]
    f292:	9104      	str	r1, [sp, #16]
    f294:	4619      	mov	r1, r3
    f296:	9b04      	ldr	r3, [sp, #16]
    f298:	9203      	str	r2, [sp, #12]
    f29a:	461a      	mov	r2, r3
    f29c:	9b03      	ldr	r3, [sp, #12]
    f29e:	f000 f828 	bl	f2f2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f2a2:	9002      	str	r0, [sp, #8]
    f2a4:	9101      	str	r1, [sp, #4]
    f2a6:	e7ff      	b.n	f2a8 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    f2a8:	9802      	ldr	r0, [sp, #8]
    f2aa:	9901      	ldr	r1, [sp, #4]
    f2ac:	b00a      	add	sp, #40	; 0x28
    f2ae:	bd80      	pop	{r7, pc}

0000f2b0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    f2b0:	b580      	push	{r7, lr}
    f2b2:	b08a      	sub	sp, #40	; 0x28
    f2b4:	9006      	str	r0, [sp, #24]
    f2b6:	9107      	str	r1, [sp, #28]
    f2b8:	9208      	str	r2, [sp, #32]
    f2ba:	9309      	str	r3, [sp, #36]	; 0x24
    f2bc:	9005      	str	r0, [sp, #20]
    f2be:	4610      	mov	r0, r2
    f2c0:	9104      	str	r1, [sp, #16]
    f2c2:	4619      	mov	r1, r3
    f2c4:	f7ff faf5 	bl	e8b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f2c8:	9003      	str	r0, [sp, #12]
    f2ca:	e7ff      	b.n	f2cc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    f2cc:	9803      	ldr	r0, [sp, #12]
    f2ce:	9905      	ldr	r1, [sp, #20]
    f2d0:	f7ff fa76 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    f2d4:	9002      	str	r0, [sp, #8]
    f2d6:	e7ff      	b.n	f2d8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    f2d8:	9804      	ldr	r0, [sp, #16]
    f2da:	9905      	ldr	r1, [sp, #20]
    f2dc:	1a41      	subs	r1, r0, r1
    f2de:	9802      	ldr	r0, [sp, #8]
    f2e0:	f000 f8bb 	bl	f45a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    f2e4:	9001      	str	r0, [sp, #4]
    f2e6:	9100      	str	r1, [sp, #0]
    f2e8:	e7ff      	b.n	f2ea <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    f2ea:	9801      	ldr	r0, [sp, #4]
    f2ec:	9900      	ldr	r1, [sp, #0]
    f2ee:	b00a      	add	sp, #40	; 0x28
    f2f0:	bd80      	pop	{r7, pc}

0000f2f2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    f2f2:	b580      	push	{r7, lr}
    f2f4:	b08c      	sub	sp, #48	; 0x30
    f2f6:	9008      	str	r0, [sp, #32]
    f2f8:	9109      	str	r1, [sp, #36]	; 0x24
    f2fa:	920a      	str	r2, [sp, #40]	; 0x28
    f2fc:	930b      	str	r3, [sp, #44]	; 0x2c
    f2fe:	4288      	cmp	r0, r1
    f300:	9307      	str	r3, [sp, #28]
    f302:	9206      	str	r2, [sp, #24]
    f304:	9105      	str	r1, [sp, #20]
    f306:	9004      	str	r0, [sp, #16]
    f308:	d806      	bhi.n	f318 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    f30a:	e7ff      	b.n	f30c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    f30c:	9806      	ldr	r0, [sp, #24]
    f30e:	9907      	ldr	r1, [sp, #28]
    f310:	f7ff fae6 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f314:	9003      	str	r0, [sp, #12]
    f316:	e004      	b.n	f322 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    f318:	9804      	ldr	r0, [sp, #16]
    f31a:	9905      	ldr	r1, [sp, #20]
    f31c:	f008 fafb 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    f320:	defe      	udf	#254	; 0xfe
    f322:	9805      	ldr	r0, [sp, #20]
    f324:	9903      	ldr	r1, [sp, #12]
    f326:	4288      	cmp	r0, r1
    f328:	d809      	bhi.n	f33e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    f32a:	e7ff      	b.n	f32c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    f32c:	9804      	ldr	r0, [sp, #16]
    f32e:	9905      	ldr	r1, [sp, #20]
    f330:	9a06      	ldr	r2, [sp, #24]
    f332:	9b07      	ldr	r3, [sp, #28]
    f334:	f7ff ffbc 	bl	f2b0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    f338:	9002      	str	r0, [sp, #8]
    f33a:	9101      	str	r1, [sp, #4]
    f33c:	e00a      	b.n	f354 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    f33e:	9806      	ldr	r0, [sp, #24]
    f340:	9907      	ldr	r1, [sp, #28]
    f342:	f7ff facd 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f346:	9000      	str	r0, [sp, #0]
    f348:	e7ff      	b.n	f34a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    f34a:	9805      	ldr	r0, [sp, #20]
    f34c:	9900      	ldr	r1, [sp, #0]
    f34e:	f008 fac0 	bl	178d2 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    f352:	defe      	udf	#254	; 0xfe
    f354:	9802      	ldr	r0, [sp, #8]
    f356:	9901      	ldr	r1, [sp, #4]
    f358:	b00c      	add	sp, #48	; 0x30
    f35a:	bd80      	pop	{r7, pc}

0000f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
    f35c:	b081      	sub	sp, #4
    f35e:	9000      	str	r0, [sp, #0]
    f360:	b001      	add	sp, #4
    f362:	4770      	bx	lr

0000f364 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f364:	b580      	push	{r7, lr}
    f366:	b082      	sub	sp, #8
    f368:	9001      	str	r0, [sp, #4]
    f36a:	f00a fe39 	bl	19fe0 <os_eventq_run>
    f36e:	e7ff      	b.n	f370 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    f370:	2001      	movs	r0, #1
    f372:	b002      	add	sp, #8
    f374:	bd80      	pop	{r7, pc}

0000f376 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f376:	b580      	push	{r7, lr}
    f378:	b084      	sub	sp, #16
    f37a:	9002      	str	r0, [sp, #8]
    f37c:	f00a fe5c 	bl	1a038 <os_eventq_dflt_get>
    f380:	4601      	mov	r1, r0
    f382:	9003      	str	r0, [sp, #12]
    f384:	9101      	str	r1, [sp, #4]
    f386:	e7ff      	b.n	f388 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    f388:	9801      	ldr	r0, [sp, #4]
    f38a:	9902      	ldr	r1, [sp, #8]
    f38c:	6048      	str	r0, [r1, #4]
    f38e:	2200      	movs	r2, #0
    f390:	600a      	str	r2, [r1, #0]
    f392:	b004      	add	sp, #16
    f394:	bd80      	pop	{r7, pc}

0000f396 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f396:	b570      	push	{r4, r5, r6, lr}
    f398:	b09c      	sub	sp, #112	; 0x70
    f39a:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    f39e:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    f3a2:	9c22      	ldr	r4, [sp, #136]	; 0x88
    f3a4:	9d21      	ldr	r5, [sp, #132]	; 0x84
    f3a6:	9e20      	ldr	r6, [sp, #128]	; 0x80
    f3a8:	9013      	str	r0, [sp, #76]	; 0x4c
    f3aa:	9114      	str	r1, [sp, #80]	; 0x50
    f3ac:	9215      	str	r2, [sp, #84]	; 0x54
    f3ae:	9316      	str	r3, [sp, #88]	; 0x58
    f3b0:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    f3b4:	9418      	str	r4, [sp, #96]	; 0x60
    f3b6:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    f3ba:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    f3be:	9011      	str	r0, [sp, #68]	; 0x44
    f3c0:	4608      	mov	r0, r1
    f3c2:	9310      	str	r3, [sp, #64]	; 0x40
    f3c4:	920f      	str	r2, [sp, #60]	; 0x3c
    f3c6:	910e      	str	r1, [sp, #56]	; 0x38
    f3c8:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    f3cc:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    f3d0:	940b      	str	r4, [sp, #44]	; 0x2c
    f3d2:	950a      	str	r5, [sp, #40]	; 0x28
    f3d4:	9609      	str	r6, [sp, #36]	; 0x24
    f3d6:	f7ff fe3a 	bl	f04e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    f3da:	e7ff      	b.n	f3dc <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    f3dc:	980e      	ldr	r0, [sp, #56]	; 0x38
    f3de:	f7ff fe18 	bl	f012 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    f3e2:	9008      	str	r0, [sp, #32]
    f3e4:	e7ff      	b.n	f3e6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    f3e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f3e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    f3ea:	f000 f93b 	bl	f664 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    f3ee:	9007      	str	r0, [sp, #28]
    f3f0:	e7ff      	b.n	f3f2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    f3f2:	980d      	ldr	r0, [sp, #52]	; 0x34
    f3f4:	b281      	uxth	r1, r0
    f3f6:	466a      	mov	r2, sp
    f3f8:	60d1      	str	r1, [r2, #12]
    f3fa:	9907      	ldr	r1, [sp, #28]
    f3fc:	6091      	str	r1, [r2, #8]
    f3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f400:	6053      	str	r3, [r2, #4]
    f402:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f406:	fa5f fe8c 	uxtb.w	lr, ip
    f40a:	f8c2 e000 	str.w	lr, [r2]
    f40e:	9811      	ldr	r0, [sp, #68]	; 0x44
    f410:	9908      	ldr	r1, [sp, #32]
    f412:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f414:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f416:	f00b fbaf 	bl	1ab78 <os_task_init>
    f41a:	4601      	mov	r1, r0
    f41c:	901b      	str	r0, [sp, #108]	; 0x6c
    f41e:	9106      	str	r1, [sp, #24]
    f420:	e7ff      	b.n	f422 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    f422:	9806      	ldr	r0, [sp, #24]
    f424:	2800      	cmp	r0, #0
    f426:	d005      	beq.n	f434 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    f428:	e7ff      	b.n	f42a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    f42a:	9806      	ldr	r0, [sp, #24]
    f42c:	f003 fedc 	bl	131e8 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    f430:	9005      	str	r0, [sp, #20]
    f432:	e004      	b.n	f43e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    f434:	2000      	movs	r0, #0
    f436:	9012      	str	r0, [sp, #72]	; 0x48
    f438:	2001      	movs	r0, #1
    f43a:	9012      	str	r0, [sp, #72]	; 0x48
    f43c:	e002      	b.n	f444 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f43e:	9805      	ldr	r0, [sp, #20]
    f440:	9012      	str	r0, [sp, #72]	; 0x48
    f442:	e7ff      	b.n	f444 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f444:	9812      	ldr	r0, [sp, #72]	; 0x48
    f446:	b01c      	add	sp, #112	; 0x70
    f448:	bd70      	pop	{r4, r5, r6, pc}

0000f44a <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    f44a:	b081      	sub	sp, #4
    f44c:	9000      	str	r0, [sp, #0]
    f44e:	b001      	add	sp, #4
    f450:	4770      	bx	lr

0000f452 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    f452:	b081      	sub	sp, #4
    f454:	9000      	str	r0, [sp, #0]
    f456:	b001      	add	sp, #4
    f458:	4770      	bx	lr

0000f45a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    f45a:	b580      	push	{r7, lr}
    f45c:	b084      	sub	sp, #16
    f45e:	9002      	str	r0, [sp, #8]
    f460:	9103      	str	r1, [sp, #12]
    f462:	f000 f993 	bl	f78c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    f466:	9001      	str	r0, [sp, #4]
    f468:	9100      	str	r1, [sp, #0]
    f46a:	e7ff      	b.n	f46c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    f46c:	9801      	ldr	r0, [sp, #4]
    f46e:	9900      	ldr	r1, [sp, #0]
    f470:	b004      	add	sp, #16
    f472:	bd80      	pop	{r7, pc}

0000f474 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    f474:	b5b0      	push	{r4, r5, r7, lr}
    f476:	b0b8      	sub	sp, #224	; 0xe0
    f478:	902f      	str	r0, [sp, #188]	; 0xbc
    f47a:	9130      	str	r1, [sp, #192]	; 0xc0
    f47c:	9231      	str	r2, [sp, #196]	; 0xc4
    f47e:	9332      	str	r3, [sp, #200]	; 0xc8
    f480:	9013      	str	r0, [sp, #76]	; 0x4c
    f482:	9112      	str	r1, [sp, #72]	; 0x48
    f484:	9311      	str	r3, [sp, #68]	; 0x44
    f486:	9210      	str	r2, [sp, #64]	; 0x40
    f488:	f7ff fa2a 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f48c:	9016      	str	r0, [sp, #88]	; 0x58
    f48e:	e7ff      	b.n	f490 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    f490:	9810      	ldr	r0, [sp, #64]	; 0x40
    f492:	9911      	ldr	r1, [sp, #68]	; 0x44
    f494:	f7ff fa24 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f498:	9017      	str	r0, [sp, #92]	; 0x5c
    f49a:	e7ff      	b.n	f49c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    f49c:	a816      	add	r0, sp, #88	; 0x58
    f49e:	9014      	str	r0, [sp, #80]	; 0x50
    f4a0:	a817      	add	r0, sp, #92	; 0x5c
    f4a2:	9015      	str	r0, [sp, #84]	; 0x54
    f4a4:	9814      	ldr	r0, [sp, #80]	; 0x50
    f4a6:	9033      	str	r0, [sp, #204]	; 0xcc
    f4a8:	9915      	ldr	r1, [sp, #84]	; 0x54
    f4aa:	9134      	str	r1, [sp, #208]	; 0xd0
    f4ac:	6802      	ldr	r2, [r0, #0]
    f4ae:	680b      	ldr	r3, [r1, #0]
    f4b0:	429a      	cmp	r2, r3
    f4b2:	900f      	str	r0, [sp, #60]	; 0x3c
    f4b4:	910e      	str	r1, [sp, #56]	; 0x38
    f4b6:	d106      	bne.n	f4c6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    f4b8:	e7ff      	b.n	f4ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    f4ba:	9810      	ldr	r0, [sp, #64]	; 0x40
    f4bc:	9911      	ldr	r1, [sp, #68]	; 0x44
    f4be:	f7ff fa17 	bl	e8f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f4c2:	900d      	str	r0, [sp, #52]	; 0x34
    f4c4:	e072      	b.n	f5ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    f4c6:	f24f 0048 	movw	r0, #61512	; 0xf048
    f4ca:	f2c0 0001 	movt	r0, #1
    f4ce:	6801      	ldr	r1, [r0, #0]
    f4d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f4d2:	9027      	str	r0, [sp, #156]	; 0x9c
    f4d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f4d6:	9228      	str	r2, [sp, #160]	; 0xa0
    f4d8:	f24f 0388 	movw	r3, #61576	; 0xf088
    f4dc:	f2c0 0301 	movt	r3, #1
    f4e0:	681b      	ldr	r3, [r3, #0]
    f4e2:	f24f 0c8c 	movw	ip, #61580	; 0xf08c
    f4e6:	f2c0 0c01 	movt	ip, #1
    f4ea:	f8dc c000 	ldr.w	ip, [ip]
    f4ee:	46ee      	mov	lr, sp
    f4f0:	2400      	movs	r4, #0
    f4f2:	f8ce 4000 	str.w	r4, [lr]
    f4f6:	a829      	add	r0, sp, #164	; 0xa4
    f4f8:	2201      	movs	r2, #1
    f4fa:	910c      	str	r1, [sp, #48]	; 0x30
    f4fc:	4619      	mov	r1, r3
    f4fe:	4663      	mov	r3, ip
    f500:	f7ff fe4b 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f504:	e7ff      	b.n	f506 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    f506:	a827      	add	r0, sp, #156	; 0x9c
    f508:	9024      	str	r0, [sp, #144]	; 0x90
    f50a:	a828      	add	r0, sp, #160	; 0xa0
    f50c:	9025      	str	r0, [sp, #148]	; 0x94
    f50e:	a829      	add	r0, sp, #164	; 0xa4
    f510:	9026      	str	r0, [sp, #152]	; 0x98
    f512:	9824      	ldr	r0, [sp, #144]	; 0x90
    f514:	9035      	str	r0, [sp, #212]	; 0xd4
    f516:	9925      	ldr	r1, [sp, #148]	; 0x94
    f518:	9136      	str	r1, [sp, #216]	; 0xd8
    f51a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f51c:	9237      	str	r2, [sp, #220]	; 0xdc
    f51e:	f243 03bb 	movw	r3, #12475	; 0x30bb
    f522:	f2c0 0301 	movt	r3, #1
    f526:	910b      	str	r1, [sp, #44]	; 0x2c
    f528:	4619      	mov	r1, r3
    f52a:	920a      	str	r2, [sp, #40]	; 0x28
    f52c:	f003 fdd3 	bl	130d6 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f530:	9009      	str	r0, [sp, #36]	; 0x24
    f532:	9108      	str	r1, [sp, #32]
    f534:	e7ff      	b.n	f536 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    f536:	f243 01bb 	movw	r1, #12475	; 0x30bb
    f53a:	f2c0 0101 	movt	r1, #1
    f53e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f540:	f003 fdc9 	bl	130d6 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f544:	9007      	str	r0, [sp, #28]
    f546:	9106      	str	r1, [sp, #24]
    f548:	e7ff      	b.n	f54a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    f54a:	f646 71fb 	movw	r1, #28667	; 0x6ffb
    f54e:	f2c0 0101 	movt	r1, #1
    f552:	980a      	ldr	r0, [sp, #40]	; 0x28
    f554:	f000 fd5e 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f558:	9005      	str	r0, [sp, #20]
    f55a:	9104      	str	r1, [sp, #16]
    f55c:	e7ff      	b.n	f55e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    f55e:	9809      	ldr	r0, [sp, #36]	; 0x24
    f560:	901e      	str	r0, [sp, #120]	; 0x78
    f562:	9908      	ldr	r1, [sp, #32]
    f564:	911f      	str	r1, [sp, #124]	; 0x7c
    f566:	9a07      	ldr	r2, [sp, #28]
    f568:	9220      	str	r2, [sp, #128]	; 0x80
    f56a:	9b06      	ldr	r3, [sp, #24]
    f56c:	9321      	str	r3, [sp, #132]	; 0x84
    f56e:	f8dd c014 	ldr.w	ip, [sp, #20]
    f572:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f576:	f8dd e010 	ldr.w	lr, [sp, #16]
    f57a:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    f57e:	466c      	mov	r4, sp
    f580:	2503      	movs	r5, #3
    f582:	6025      	str	r5, [r4, #0]
    f584:	a818      	add	r0, sp, #96	; 0x60
    f586:	ab1e      	add	r3, sp, #120	; 0x78
    f588:	990c      	ldr	r1, [sp, #48]	; 0x30
    f58a:	462a      	mov	r2, r5
    f58c:	f7ff fe05 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f590:	e7ff      	b.n	f592 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    f592:	f24f 00dc 	movw	r0, #61660	; 0xf0dc
    f596:	f2c0 0001 	movt	r0, #1
    f59a:	f007 fa40 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f59e:	9003      	str	r0, [sp, #12]
    f5a0:	e7ff      	b.n	f5a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    f5a2:	a818      	add	r0, sp, #96	; 0x60
    f5a4:	9903      	ldr	r1, [sp, #12]
    f5a6:	f007 fa77 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f5aa:	defe      	udf	#254	; 0xfe
    f5ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f5ae:	9912      	ldr	r1, [sp, #72]	; 0x48
    f5b0:	f7ff f97f 	bl	e8b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f5b4:	9002      	str	r0, [sp, #8]
    f5b6:	e7ff      	b.n	f5b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    f5b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f5ba:	9912      	ldr	r1, [sp, #72]	; 0x48
    f5bc:	f7ff f990 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f5c0:	9001      	str	r0, [sp, #4]
    f5c2:	e7ff      	b.n	f5c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    f5c4:	980d      	ldr	r0, [sp, #52]	; 0x34
    f5c6:	9902      	ldr	r1, [sp, #8]
    f5c8:	9a01      	ldr	r2, [sp, #4]
    f5ca:	f7fe ff95 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    f5ce:	e7ff      	b.n	f5d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    f5d0:	b038      	add	sp, #224	; 0xe0
    f5d2:	bdb0      	pop	{r4, r5, r7, pc}

0000f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    f5d4:	b580      	push	{r7, lr}
    f5d6:	b086      	sub	sp, #24
    f5d8:	9003      	str	r0, [sp, #12]
    f5da:	9104      	str	r1, [sp, #16]
    f5dc:	9205      	str	r2, [sp, #20]
    f5de:	9002      	str	r0, [sp, #8]
    f5e0:	4610      	mov	r0, r2
    f5e2:	9a02      	ldr	r2, [sp, #8]
    f5e4:	9101      	str	r1, [sp, #4]
    f5e6:	4611      	mov	r1, r2
    f5e8:	9a01      	ldr	r2, [sp, #4]
    f5ea:	f000 f861 	bl	f6b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    f5ee:	9000      	str	r0, [sp, #0]
    f5f0:	e7ff      	b.n	f5f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    f5f2:	9800      	ldr	r0, [sp, #0]
    f5f4:	b006      	add	sp, #24
    f5f6:	bd80      	pop	{r7, pc}

0000f5f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    f5f8:	b580      	push	{r7, lr}
    f5fa:	b08e      	sub	sp, #56	; 0x38
    f5fc:	9009      	str	r0, [sp, #36]	; 0x24
    f5fe:	910a      	str	r1, [sp, #40]	; 0x28
    f600:	9005      	str	r0, [sp, #20]
    f602:	9104      	str	r1, [sp, #16]
    f604:	f7ff f96c 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f608:	9003      	str	r0, [sp, #12]
    f60a:	e7ff      	b.n	f60c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    f60c:	2101      	movs	r1, #1
    f60e:	9803      	ldr	r0, [sp, #12]
    f610:	f000 fd15 	bl	1003e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    f614:	9002      	str	r0, [sp, #8]
    f616:	9101      	str	r1, [sp, #4]
    f618:	e7ff      	b.n	f61a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    f61a:	9802      	ldr	r0, [sp, #8]
    f61c:	9901      	ldr	r1, [sp, #4]
    f61e:	f000 fc17 	bl	fe50 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    f622:	9108      	str	r1, [sp, #32]
    f624:	9007      	str	r0, [sp, #28]
    f626:	e7ff      	b.n	f628 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    f628:	9807      	ldr	r0, [sp, #28]
    f62a:	2800      	cmp	r0, #0
    f62c:	d001      	beq.n	f632 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    f62e:	e7ff      	b.n	f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    f630:	e00c      	b.n	f64c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    f632:	9808      	ldr	r0, [sp, #32]
    f634:	900c      	str	r0, [sp, #48]	; 0x30
    f636:	900d      	str	r0, [sp, #52]	; 0x34
    f638:	9905      	ldr	r1, [sp, #20]
    f63a:	9000      	str	r0, [sp, #0]
    f63c:	4608      	mov	r0, r1
    f63e:	9904      	ldr	r1, [sp, #16]
    f640:	9a00      	ldr	r2, [sp, #0]
    f642:	f7ff ffc7 	bl	f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    f646:	9006      	str	r0, [sp, #24]
    f648:	e00b      	b.n	f662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    f64a:	defe      	udf	#254	; 0xfe
    f64c:	f003 fccd 	bl	12fea <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    f650:	e002      	b.n	f658 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    f652:	9806      	ldr	r0, [sp, #24]
    f654:	b00e      	add	sp, #56	; 0x38
    f656:	bd80      	pop	{r7, pc}
    f658:	f000 fbf4 	bl	fe44 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    f65c:	9006      	str	r0, [sp, #24]
    f65e:	e7ff      	b.n	f660 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    f660:	e7f7      	b.n	f652 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    f662:	e7f6      	b.n	f652 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

0000f664 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    f664:	b082      	sub	sp, #8
    f666:	9000      	str	r0, [sp, #0]
    f668:	9101      	str	r1, [sp, #4]
    f66a:	b002      	add	sp, #8
    f66c:	4770      	bx	lr

0000f66e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    f66e:	b580      	push	{r7, lr}
    f670:	b088      	sub	sp, #32
    f672:	9005      	str	r0, [sp, #20]
    f674:	9106      	str	r1, [sp, #24]
    f676:	9207      	str	r2, [sp, #28]
    f678:	9004      	str	r0, [sp, #16]
    f67a:	4610      	mov	r0, r2
    f67c:	9a04      	ldr	r2, [sp, #16]
    f67e:	9103      	str	r1, [sp, #12]
    f680:	4611      	mov	r1, r2
    f682:	9a03      	ldr	r2, [sp, #12]
    f684:	f7ff fdfb 	bl	f27e <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    f688:	9002      	str	r0, [sp, #8]
    f68a:	9101      	str	r1, [sp, #4]
    f68c:	e7ff      	b.n	f68e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    f68e:	9802      	ldr	r0, [sp, #8]
    f690:	9901      	ldr	r1, [sp, #4]
    f692:	b008      	add	sp, #32
    f694:	bd80      	pop	{r7, pc}

0000f696 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    f696:	b580      	push	{r7, lr}
    f698:	b084      	sub	sp, #16
    f69a:	9002      	str	r0, [sp, #8]
    f69c:	9103      	str	r1, [sp, #12]
    f69e:	f003 fc61 	bl	12f64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    f6a2:	9001      	str	r0, [sp, #4]
    f6a4:	9100      	str	r1, [sp, #0]
    f6a6:	e7ff      	b.n	f6a8 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    f6a8:	9801      	ldr	r0, [sp, #4]
    f6aa:	9900      	ldr	r1, [sp, #0]
    f6ac:	b004      	add	sp, #16
    f6ae:	bd80      	pop	{r7, pc}

0000f6b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    f6b0:	b580      	push	{r7, lr}
    f6b2:	b08a      	sub	sp, #40	; 0x28
    f6b4:	9007      	str	r0, [sp, #28]
    f6b6:	9108      	str	r1, [sp, #32]
    f6b8:	9209      	str	r2, [sp, #36]	; 0x24
    f6ba:	9005      	str	r0, [sp, #20]
    f6bc:	4608      	mov	r0, r1
    f6be:	9104      	str	r1, [sp, #16]
    f6c0:	4611      	mov	r1, r2
    f6c2:	9203      	str	r2, [sp, #12]
    f6c4:	f7ff f90c 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f6c8:	9002      	str	r0, [sp, #8]
    f6ca:	e7ff      	b.n	f6cc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    f6cc:	9805      	ldr	r0, [sp, #20]
    f6ce:	9902      	ldr	r1, [sp, #8]
    f6d0:	4288      	cmp	r0, r1
    f6d2:	d303      	bcc.n	f6dc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    f6d4:	e7ff      	b.n	f6d6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    f6d6:	2000      	movs	r0, #0
    f6d8:	9006      	str	r0, [sp, #24]
    f6da:	e009      	b.n	f6f0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f6dc:	9805      	ldr	r0, [sp, #20]
    f6de:	9904      	ldr	r1, [sp, #16]
    f6e0:	9a03      	ldr	r2, [sp, #12]
    f6e2:	f7ff f929 	bl	e938 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    f6e6:	9001      	str	r0, [sp, #4]
    f6e8:	e7ff      	b.n	f6ea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    f6ea:	9801      	ldr	r0, [sp, #4]
    f6ec:	9006      	str	r0, [sp, #24]
    f6ee:	e7ff      	b.n	f6f0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f6f0:	9806      	ldr	r0, [sp, #24]
    f6f2:	b00a      	add	sp, #40	; 0x28
    f6f4:	bd80      	pop	{r7, pc}

0000f6f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    f6f6:	b580      	push	{r7, lr}
    f6f8:	b08a      	sub	sp, #40	; 0x28
    f6fa:	9004      	str	r0, [sp, #16]
    f6fc:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    f6fe:	9003      	str	r0, [sp, #12]
    f700:	9102      	str	r1, [sp, #8]
    f702:	f000 f86e 	bl	f7e2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f706:	4601      	mov	r1, r0
    f708:	9006      	str	r0, [sp, #24]
    f70a:	9101      	str	r1, [sp, #4]
    f70c:	e7ff      	b.n	f70e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    f70e:	9803      	ldr	r0, [sp, #12]
    f710:	9902      	ldr	r1, [sp, #8]
    f712:	f000 f850 	bl	f7b6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f716:	9000      	str	r0, [sp, #0]
    f718:	e7ff      	b.n	f71a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    f71a:	9800      	ldr	r0, [sp, #0]
    f71c:	9007      	str	r0, [sp, #28]
    f71e:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    f720:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    f722:	4608      	mov	r0, r1
    f724:	f000 f809 	bl	f73a <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    f728:	9009      	str	r0, [sp, #36]	; 0x24
    f72a:	e7ff      	b.n	f72c <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    f72c:	9801      	ldr	r0, [sp, #4]
    f72e:	9900      	ldr	r1, [sp, #0]
    f730:	f009 f914 	bl	1895c <console_buffer>
    f734:	e7ff      	b.n	f736 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    f736:	b00a      	add	sp, #40	; 0x28
    f738:	bd80      	pop	{r7, pc}

0000f73a <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    f73a:	b081      	sub	sp, #4
    f73c:	9000      	str	r0, [sp, #0]
    f73e:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    f740:	b001      	add	sp, #4
    f742:	4770      	bx	lr

0000f744 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    f744:	b580      	push	{r7, lr}
    f746:	b086      	sub	sp, #24
    f748:	9004      	str	r0, [sp, #16]
    f74a:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    f74c:	9003      	str	r0, [sp, #12]
    f74e:	9102      	str	r1, [sp, #8]
    f750:	f000 f847 	bl	f7e2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f754:	9001      	str	r0, [sp, #4]
    f756:	e7ff      	b.n	f758 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    f758:	9803      	ldr	r0, [sp, #12]
    f75a:	9902      	ldr	r1, [sp, #8]
    f75c:	f000 f82b 	bl	f7b6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f760:	9000      	str	r0, [sp, #0]
    f762:	e7ff      	b.n	f764 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    f764:	9801      	ldr	r0, [sp, #4]
    f766:	9900      	ldr	r1, [sp, #0]
    f768:	f009 f8f8 	bl	1895c <console_buffer>
    f76c:	e7ff      	b.n	f76e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    f76e:	b006      	add	sp, #24
    f770:	bd80      	pop	{r7, pc}

0000f772 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    f772:	b580      	push	{r7, lr}
    f774:	b082      	sub	sp, #8
    f776:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    f778:	f009 f960 	bl	18a3c <console_printint>
    f77c:	e7ff      	b.n	f77e <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    f77e:	b002      	add	sp, #8
    f780:	bd80      	pop	{r7, pc}

0000f782 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    f782:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    f784:	f009 f8c2 	bl	1890c <console_flush>
    f788:	e7ff      	b.n	f78a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    f78a:	bd80      	pop	{r7, pc}

0000f78c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    f78c:	b086      	sub	sp, #24
    f78e:	9004      	str	r0, [sp, #16]
    f790:	9105      	str	r1, [sp, #20]
    f792:	9002      	str	r0, [sp, #8]
    f794:	9103      	str	r1, [sp, #12]
    f796:	9802      	ldr	r0, [sp, #8]
    f798:	9903      	ldr	r1, [sp, #12]
    f79a:	9000      	str	r0, [sp, #0]
    f79c:	9101      	str	r1, [sp, #4]
    f79e:	9800      	ldr	r0, [sp, #0]
    f7a0:	9901      	ldr	r1, [sp, #4]
    f7a2:	b006      	add	sp, #24
    f7a4:	4770      	bx	lr

0000f7a6 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    f7a6:	b082      	sub	sp, #8
    f7a8:	460a      	mov	r2, r1
    f7aa:	9000      	str	r0, [sp, #0]
    f7ac:	f88d 1007 	strb.w	r1, [sp, #7]
    f7b0:	7001      	strb	r1, [r0, #0]
    f7b2:	b002      	add	sp, #8
    f7b4:	4770      	bx	lr

0000f7b6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    f7b6:	b580      	push	{r7, lr}
    f7b8:	b08a      	sub	sp, #40	; 0x28
    f7ba:	9004      	str	r0, [sp, #16]
    f7bc:	9105      	str	r1, [sp, #20]
    f7be:	9008      	str	r0, [sp, #32]
    f7c0:	9109      	str	r1, [sp, #36]	; 0x24
    f7c2:	9006      	str	r0, [sp, #24]
    f7c4:	9107      	str	r1, [sp, #28]
    f7c6:	9806      	ldr	r0, [sp, #24]
    f7c8:	9907      	ldr	r1, [sp, #28]
    f7ca:	9003      	str	r0, [sp, #12]
    f7cc:	9102      	str	r1, [sp, #8]
    f7ce:	e7ff      	b.n	f7d0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    f7d0:	9803      	ldr	r0, [sp, #12]
    f7d2:	9902      	ldr	r1, [sp, #8]
    f7d4:	f7ff f884 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f7d8:	9001      	str	r0, [sp, #4]
    f7da:	e7ff      	b.n	f7dc <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    f7dc:	9801      	ldr	r0, [sp, #4]
    f7de:	b00a      	add	sp, #40	; 0x28
    f7e0:	bd80      	pop	{r7, pc}

0000f7e2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    f7e2:	b082      	sub	sp, #8
    f7e4:	9000      	str	r0, [sp, #0]
    f7e6:	9101      	str	r1, [sp, #4]
    f7e8:	b002      	add	sp, #8
    f7ea:	4770      	bx	lr

0000f7ec <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
    f7ec:	b082      	sub	sp, #8
    f7ee:	2000      	movs	r0, #0
        SPI {
    f7f0:	9000      	str	r0, [sp, #0]
    f7f2:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
    f7f4:	9800      	ldr	r0, [sp, #0]
    f7f6:	9901      	ldr	r1, [sp, #4]
    f7f8:	b002      	add	sp, #8
    f7fa:	4770      	bx	lr

0000f7fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
    f7fc:	b5b0      	push	{r4, r5, r7, lr}
    f7fe:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
    f802:	9077      	str	r0, [sp, #476]	; 0x1dc
    f804:	9178      	str	r1, [sp, #480]	; 0x1e0
    f806:	9279      	str	r2, [sp, #484]	; 0x1e4
    f808:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
    f80a:	9028      	str	r0, [sp, #160]	; 0xa0
    f80c:	4608      	mov	r0, r1
    f80e:	9127      	str	r1, [sp, #156]	; 0x9c
    f810:	4619      	mov	r1, r3
    f812:	9226      	str	r2, [sp, #152]	; 0x98
    f814:	f009 fe6a 	bl	194ec <hal_spi_config>
    f818:	9029      	str	r0, [sp, #164]	; 0xa4
    f81a:	e7ff      	b.n	f81c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
    f81c:	f24f 00ec 	movw	r0, #61676	; 0xf0ec
    f820:	f2c0 0001 	movt	r0, #1
    f824:	6800      	ldr	r0, [r0, #0]
    f826:	a929      	add	r1, sp, #164	; 0xa4
    f828:	912a      	str	r1, [sp, #168]	; 0xa8
    f82a:	902b      	str	r0, [sp, #172]	; 0xac
    f82c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    f82e:	907b      	str	r0, [sp, #492]	; 0x1ec
    f830:	992b      	ldr	r1, [sp, #172]	; 0xac
    f832:	917c      	str	r1, [sp, #496]	; 0x1f0
    f834:	6802      	ldr	r2, [r0, #0]
    f836:	680b      	ldr	r3, [r1, #0]
    f838:	429a      	cmp	r2, r3
    f83a:	9025      	str	r0, [sp, #148]	; 0x94
    f83c:	9124      	str	r1, [sp, #144]	; 0x90
    f83e:	d105      	bne.n	f84c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
    f840:	e7ff      	b.n	f842 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
    f842:	9827      	ldr	r0, [sp, #156]	; 0x9c
    f844:	f009 fe6e 	bl	19524 <hal_spi_enable>
    f848:	9043      	str	r0, [sp, #268]	; 0x10c
    f84a:	e072      	b.n	f932 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
    f84c:	f24f 1044 	movw	r0, #61764	; 0xf144
    f850:	f2c0 0001 	movt	r0, #1
    f854:	6801      	ldr	r1, [r0, #0]
    f856:	9825      	ldr	r0, [sp, #148]	; 0x94
    f858:	903b      	str	r0, [sp, #236]	; 0xec
    f85a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f85c:	923c      	str	r2, [sp, #240]	; 0xf0
    f85e:	f24f 1360 	movw	r3, #61792	; 0xf160
    f862:	f2c0 0301 	movt	r3, #1
    f866:	681b      	ldr	r3, [r3, #0]
    f868:	f24f 1c64 	movw	ip, #61796	; 0xf164
    f86c:	f2c0 0c01 	movt	ip, #1
    f870:	f8dc c000 	ldr.w	ip, [ip]
    f874:	46ee      	mov	lr, sp
    f876:	2400      	movs	r4, #0
    f878:	f8ce 4000 	str.w	r4, [lr]
    f87c:	a83d      	add	r0, sp, #244	; 0xf4
    f87e:	2201      	movs	r2, #1
    f880:	9123      	str	r1, [sp, #140]	; 0x8c
    f882:	4619      	mov	r1, r3
    f884:	4663      	mov	r3, ip
    f886:	f7ff fc88 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f88a:	e7ff      	b.n	f88c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
    f88c:	a83b      	add	r0, sp, #236	; 0xec
    f88e:	9038      	str	r0, [sp, #224]	; 0xe0
    f890:	a83c      	add	r0, sp, #240	; 0xf0
    f892:	9039      	str	r0, [sp, #228]	; 0xe4
    f894:	a83d      	add	r0, sp, #244	; 0xf4
    f896:	903a      	str	r0, [sp, #232]	; 0xe8
    f898:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f89a:	907d      	str	r0, [sp, #500]	; 0x1f4
    f89c:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f89e:	917e      	str	r1, [sp, #504]	; 0x1f8
    f8a0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    f8a2:	927f      	str	r2, [sp, #508]	; 0x1fc
    f8a4:	f64f 7327 	movw	r3, #65319	; 0xff27
    f8a8:	f2c0 0300 	movt	r3, #0
    f8ac:	9122      	str	r1, [sp, #136]	; 0x88
    f8ae:	4619      	mov	r1, r3
    f8b0:	9221      	str	r2, [sp, #132]	; 0x84
    f8b2:	f000 fb70 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f8b6:	9020      	str	r0, [sp, #128]	; 0x80
    f8b8:	911f      	str	r1, [sp, #124]	; 0x7c
    f8ba:	e7ff      	b.n	f8bc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
    f8bc:	f64f 7127 	movw	r1, #65319	; 0xff27
    f8c0:	f2c0 0100 	movt	r1, #0
    f8c4:	9822      	ldr	r0, [sp, #136]	; 0x88
    f8c6:	f000 fb66 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f8ca:	901e      	str	r0, [sp, #120]	; 0x78
    f8cc:	911d      	str	r1, [sp, #116]	; 0x74
    f8ce:	e7ff      	b.n	f8d0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
    f8d0:	f646 71fb 	movw	r1, #28667	; 0x6ffb
    f8d4:	f2c0 0101 	movt	r1, #1
    f8d8:	9821      	ldr	r0, [sp, #132]	; 0x84
    f8da:	f000 fb9b 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f8de:	901c      	str	r0, [sp, #112]	; 0x70
    f8e0:	911b      	str	r1, [sp, #108]	; 0x6c
    f8e2:	e7ff      	b.n	f8e4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
    f8e4:	9820      	ldr	r0, [sp, #128]	; 0x80
    f8e6:	9032      	str	r0, [sp, #200]	; 0xc8
    f8e8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f8ea:	9133      	str	r1, [sp, #204]	; 0xcc
    f8ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    f8ee:	9234      	str	r2, [sp, #208]	; 0xd0
    f8f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f8f2:	9335      	str	r3, [sp, #212]	; 0xd4
    f8f4:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    f8f8:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
    f8fc:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    f900:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
    f904:	466c      	mov	r4, sp
    f906:	2503      	movs	r5, #3
    f908:	6025      	str	r5, [r4, #0]
    f90a:	a82c      	add	r0, sp, #176	; 0xb0
    f90c:	ab32      	add	r3, sp, #200	; 0xc8
    f90e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f910:	462a      	mov	r2, r5
    f912:	f7ff fc42 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f916:	e7ff      	b.n	f918 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
    f918:	f24f 1080 	movw	r0, #61824	; 0xf180
    f91c:	f2c0 0001 	movt	r0, #1
    f920:	f007 f87d 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f924:	901a      	str	r0, [sp, #104]	; 0x68
    f926:	e7ff      	b.n	f928 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
    f928:	a82c      	add	r0, sp, #176	; 0xb0
    f92a:	991a      	ldr	r1, [sp, #104]	; 0x68
    f92c:	f007 f8b4 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f930:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
    f932:	f24f 00ec 	movw	r0, #61676	; 0xf0ec
    f936:	f2c0 0001 	movt	r0, #1
    f93a:	6800      	ldr	r0, [r0, #0]
    f93c:	a943      	add	r1, sp, #268	; 0x10c
    f93e:	9144      	str	r1, [sp, #272]	; 0x110
    f940:	9045      	str	r0, [sp, #276]	; 0x114
    f942:	9844      	ldr	r0, [sp, #272]	; 0x110
    f944:	9080      	str	r0, [sp, #512]	; 0x200
    f946:	9945      	ldr	r1, [sp, #276]	; 0x114
    f948:	9181      	str	r1, [sp, #516]	; 0x204
    f94a:	6802      	ldr	r2, [r0, #0]
    f94c:	680b      	ldr	r3, [r1, #0]
    f94e:	429a      	cmp	r2, r3
    f950:	9019      	str	r0, [sp, #100]	; 0x64
    f952:	9118      	str	r1, [sp, #96]	; 0x60
    f954:	d106      	bne.n	f964 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
    f956:	e7ff      	b.n	f958 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
    f958:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
    f95a:	9826      	ldr	r0, [sp, #152]	; 0x98
    f95c:	f009 f9b8 	bl	18cd0 <hal_gpio_init_out>
    f960:	905d      	str	r0, [sp, #372]	; 0x174
    f962:	e072      	b.n	fa4a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
    f964:	f24f 1044 	movw	r0, #61764	; 0xf144
    f968:	f2c0 0001 	movt	r0, #1
    f96c:	6801      	ldr	r1, [r0, #0]
    f96e:	9819      	ldr	r0, [sp, #100]	; 0x64
    f970:	9055      	str	r0, [sp, #340]	; 0x154
    f972:	9a18      	ldr	r2, [sp, #96]	; 0x60
    f974:	9256      	str	r2, [sp, #344]	; 0x158
    f976:	f24f 13a8 	movw	r3, #61864	; 0xf1a8
    f97a:	f2c0 0301 	movt	r3, #1
    f97e:	681b      	ldr	r3, [r3, #0]
    f980:	f24f 1c64 	movw	ip, #61796	; 0xf164
    f984:	f2c0 0c01 	movt	ip, #1
    f988:	f8dc c000 	ldr.w	ip, [ip]
    f98c:	46ee      	mov	lr, sp
    f98e:	2400      	movs	r4, #0
    f990:	f8ce 4000 	str.w	r4, [lr]
    f994:	a857      	add	r0, sp, #348	; 0x15c
    f996:	2201      	movs	r2, #1
    f998:	9117      	str	r1, [sp, #92]	; 0x5c
    f99a:	4619      	mov	r1, r3
    f99c:	4663      	mov	r3, ip
    f99e:	f7ff fbfc 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f9a2:	e7ff      	b.n	f9a4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
    f9a4:	a855      	add	r0, sp, #340	; 0x154
    f9a6:	9052      	str	r0, [sp, #328]	; 0x148
    f9a8:	a856      	add	r0, sp, #344	; 0x158
    f9aa:	9053      	str	r0, [sp, #332]	; 0x14c
    f9ac:	a857      	add	r0, sp, #348	; 0x15c
    f9ae:	9054      	str	r0, [sp, #336]	; 0x150
    f9b0:	9852      	ldr	r0, [sp, #328]	; 0x148
    f9b2:	9082      	str	r0, [sp, #520]	; 0x208
    f9b4:	9953      	ldr	r1, [sp, #332]	; 0x14c
    f9b6:	9183      	str	r1, [sp, #524]	; 0x20c
    f9b8:	9a54      	ldr	r2, [sp, #336]	; 0x150
    f9ba:	9284      	str	r2, [sp, #528]	; 0x210
    f9bc:	f64f 7327 	movw	r3, #65319	; 0xff27
    f9c0:	f2c0 0300 	movt	r3, #0
    f9c4:	9116      	str	r1, [sp, #88]	; 0x58
    f9c6:	4619      	mov	r1, r3
    f9c8:	9215      	str	r2, [sp, #84]	; 0x54
    f9ca:	f000 fae4 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f9ce:	9014      	str	r0, [sp, #80]	; 0x50
    f9d0:	9113      	str	r1, [sp, #76]	; 0x4c
    f9d2:	e7ff      	b.n	f9d4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
    f9d4:	f64f 7127 	movw	r1, #65319	; 0xff27
    f9d8:	f2c0 0100 	movt	r1, #0
    f9dc:	9816      	ldr	r0, [sp, #88]	; 0x58
    f9de:	f000 fada 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f9e2:	9012      	str	r0, [sp, #72]	; 0x48
    f9e4:	9111      	str	r1, [sp, #68]	; 0x44
    f9e6:	e7ff      	b.n	f9e8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
    f9e8:	f646 71fb 	movw	r1, #28667	; 0x6ffb
    f9ec:	f2c0 0101 	movt	r1, #1
    f9f0:	9815      	ldr	r0, [sp, #84]	; 0x54
    f9f2:	f000 fb0f 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f9f6:	9010      	str	r0, [sp, #64]	; 0x40
    f9f8:	910f      	str	r1, [sp, #60]	; 0x3c
    f9fa:	e7ff      	b.n	f9fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
    f9fc:	9814      	ldr	r0, [sp, #80]	; 0x50
    f9fe:	904c      	str	r0, [sp, #304]	; 0x130
    fa00:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fa02:	914d      	str	r1, [sp, #308]	; 0x134
    fa04:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fa06:	924e      	str	r2, [sp, #312]	; 0x138
    fa08:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa0a:	934f      	str	r3, [sp, #316]	; 0x13c
    fa0c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    fa10:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
    fa14:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    fa18:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
    fa1c:	466c      	mov	r4, sp
    fa1e:	2503      	movs	r5, #3
    fa20:	6025      	str	r5, [r4, #0]
    fa22:	a846      	add	r0, sp, #280	; 0x118
    fa24:	ab4c      	add	r3, sp, #304	; 0x130
    fa26:	9917      	ldr	r1, [sp, #92]	; 0x5c
    fa28:	462a      	mov	r2, r5
    fa2a:	f7ff fbb6 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fa2e:	e7ff      	b.n	fa30 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
    fa30:	f24f 10ac 	movw	r0, #61868	; 0xf1ac
    fa34:	f2c0 0001 	movt	r0, #1
    fa38:	f006 fff1 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fa3c:	900e      	str	r0, [sp, #56]	; 0x38
    fa3e:	e7ff      	b.n	fa40 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
    fa40:	a846      	add	r0, sp, #280	; 0x118
    fa42:	990e      	ldr	r1, [sp, #56]	; 0x38
    fa44:	f007 f828 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fa48:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
    fa4a:	f24f 00ec 	movw	r0, #61676	; 0xf0ec
    fa4e:	f2c0 0001 	movt	r0, #1
    fa52:	6800      	ldr	r0, [r0, #0]
    fa54:	a95d      	add	r1, sp, #372	; 0x174
    fa56:	915e      	str	r1, [sp, #376]	; 0x178
    fa58:	905f      	str	r0, [sp, #380]	; 0x17c
    fa5a:	985e      	ldr	r0, [sp, #376]	; 0x178
    fa5c:	9085      	str	r0, [sp, #532]	; 0x214
    fa5e:	995f      	ldr	r1, [sp, #380]	; 0x17c
    fa60:	9186      	str	r1, [sp, #536]	; 0x218
    fa62:	6802      	ldr	r2, [r0, #0]
    fa64:	680b      	ldr	r3, [r1, #0]
    fa66:	429a      	cmp	r2, r3
    fa68:	900d      	str	r0, [sp, #52]	; 0x34
    fa6a:	910c      	str	r1, [sp, #48]	; 0x30
    fa6c:	d109      	bne.n	fa82 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
    fa6e:	e7ff      	b.n	fa70 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
    fa70:	9827      	ldr	r0, [sp, #156]	; 0x9c
    fa72:	9928      	ldr	r1, [sp, #160]	; 0xa0
    fa74:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
    fa76:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fa78:	604a      	str	r2, [r1, #4]
    fa7a:	2001      	movs	r0, #1
        Ok(())
    }
    fa7c:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
    fa80:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
    fa82:	f24f 1044 	movw	r0, #61764	; 0xf144
    fa86:	f2c0 0001 	movt	r0, #1
    fa8a:	6801      	ldr	r1, [r0, #0]
    fa8c:	980d      	ldr	r0, [sp, #52]	; 0x34
    fa8e:	906f      	str	r0, [sp, #444]	; 0x1bc
    fa90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fa92:	9270      	str	r2, [sp, #448]	; 0x1c0
    fa94:	f24f 13d4 	movw	r3, #61908	; 0xf1d4
    fa98:	f2c0 0301 	movt	r3, #1
    fa9c:	681b      	ldr	r3, [r3, #0]
    fa9e:	f24f 1c64 	movw	ip, #61796	; 0xf164
    faa2:	f2c0 0c01 	movt	ip, #1
    faa6:	f8dc c000 	ldr.w	ip, [ip]
    faaa:	46ee      	mov	lr, sp
    faac:	2400      	movs	r4, #0
    faae:	f8ce 4000 	str.w	r4, [lr]
    fab2:	a871      	add	r0, sp, #452	; 0x1c4
    fab4:	2201      	movs	r2, #1
    fab6:	910b      	str	r1, [sp, #44]	; 0x2c
    fab8:	4619      	mov	r1, r3
    faba:	4663      	mov	r3, ip
    fabc:	f7ff fb6d 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fac0:	e7ff      	b.n	fac2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
    fac2:	a86f      	add	r0, sp, #444	; 0x1bc
    fac4:	906c      	str	r0, [sp, #432]	; 0x1b0
    fac6:	a870      	add	r0, sp, #448	; 0x1c0
    fac8:	906d      	str	r0, [sp, #436]	; 0x1b4
    faca:	a871      	add	r0, sp, #452	; 0x1c4
    facc:	906e      	str	r0, [sp, #440]	; 0x1b8
    face:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    fad0:	9087      	str	r0, [sp, #540]	; 0x21c
    fad2:	996d      	ldr	r1, [sp, #436]	; 0x1b4
    fad4:	9188      	str	r1, [sp, #544]	; 0x220
    fad6:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
    fad8:	9289      	str	r2, [sp, #548]	; 0x224
    fada:	f64f 7327 	movw	r3, #65319	; 0xff27
    fade:	f2c0 0300 	movt	r3, #0
    fae2:	910a      	str	r1, [sp, #40]	; 0x28
    fae4:	4619      	mov	r1, r3
    fae6:	9209      	str	r2, [sp, #36]	; 0x24
    fae8:	f000 fa55 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    faec:	9008      	str	r0, [sp, #32]
    faee:	9107      	str	r1, [sp, #28]
    faf0:	e7ff      	b.n	faf2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
    faf2:	f64f 7127 	movw	r1, #65319	; 0xff27
    faf6:	f2c0 0100 	movt	r1, #0
    fafa:	980a      	ldr	r0, [sp, #40]	; 0x28
    fafc:	f000 fa4b 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fb00:	9006      	str	r0, [sp, #24]
    fb02:	9105      	str	r1, [sp, #20]
    fb04:	e7ff      	b.n	fb06 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
    fb06:	f646 71fb 	movw	r1, #28667	; 0x6ffb
    fb0a:	f2c0 0101 	movt	r1, #1
    fb0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    fb10:	f000 fa80 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fb14:	9004      	str	r0, [sp, #16]
    fb16:	9103      	str	r1, [sp, #12]
    fb18:	e7ff      	b.n	fb1a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
    fb1a:	9808      	ldr	r0, [sp, #32]
    fb1c:	9066      	str	r0, [sp, #408]	; 0x198
    fb1e:	9907      	ldr	r1, [sp, #28]
    fb20:	9167      	str	r1, [sp, #412]	; 0x19c
    fb22:	9a06      	ldr	r2, [sp, #24]
    fb24:	9268      	str	r2, [sp, #416]	; 0x1a0
    fb26:	9b05      	ldr	r3, [sp, #20]
    fb28:	9369      	str	r3, [sp, #420]	; 0x1a4
    fb2a:	f8dd c010 	ldr.w	ip, [sp, #16]
    fb2e:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
    fb32:	f8dd e00c 	ldr.w	lr, [sp, #12]
    fb36:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
    fb3a:	466c      	mov	r4, sp
    fb3c:	2503      	movs	r5, #3
    fb3e:	6025      	str	r5, [r4, #0]
    fb40:	a860      	add	r0, sp, #384	; 0x180
    fb42:	ab66      	add	r3, sp, #408	; 0x198
    fb44:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fb46:	462a      	mov	r2, r5
    fb48:	f7ff fb27 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fb4c:	e7ff      	b.n	fb4e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
    fb4e:	f24f 10d8 	movw	r0, #61912	; 0xf1d8
    fb52:	f2c0 0001 	movt	r0, #1
    fb56:	f006 ff62 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fb5a:	9002      	str	r0, [sp, #8]
    fb5c:	e7ff      	b.n	fb5e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
    fb5e:	a860      	add	r0, sp, #384	; 0x180
    fb60:	9902      	ldr	r1, [sp, #8]
    fb62:	f006 ff99 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fb66:	defe      	udf	#254	; 0xfe

0000fb68 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
    fb68:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
    fb6a:	4770      	bx	lr

0000fb6c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
    fb6c:	b5b0      	push	{r4, r5, r7, lr}
    fb6e:	b0b0      	sub	sp, #192	; 0xc0
    fb70:	9029      	str	r0, [sp, #164]	; 0xa4
    fb72:	912a      	str	r1, [sp, #168]	; 0xa8
    fb74:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
    fb76:	900e      	str	r0, [sp, #56]	; 0x38
    fb78:	4608      	mov	r0, r1
    fb7a:	910d      	str	r1, [sp, #52]	; 0x34
    fb7c:	4611      	mov	r1, r2
    fb7e:	f009 f8a7 	bl	18cd0 <hal_gpio_init_out>
    fb82:	900f      	str	r0, [sp, #60]	; 0x3c
    fb84:	e7ff      	b.n	fb86 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
    fb86:	f24f 00ec 	movw	r0, #61676	; 0xf0ec
    fb8a:	f2c0 0001 	movt	r0, #1
    fb8e:	6800      	ldr	r0, [r0, #0]
    fb90:	a90f      	add	r1, sp, #60	; 0x3c
    fb92:	9110      	str	r1, [sp, #64]	; 0x40
    fb94:	9011      	str	r0, [sp, #68]	; 0x44
    fb96:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb98:	902b      	str	r0, [sp, #172]	; 0xac
    fb9a:	9911      	ldr	r1, [sp, #68]	; 0x44
    fb9c:	912c      	str	r1, [sp, #176]	; 0xb0
    fb9e:	6802      	ldr	r2, [r0, #0]
    fba0:	680b      	ldr	r3, [r1, #0]
    fba2:	429a      	cmp	r2, r3
    fba4:	900c      	str	r0, [sp, #48]	; 0x30
    fba6:	910b      	str	r1, [sp, #44]	; 0x2c
    fba8:	d106      	bne.n	fbb8 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
    fbaa:	e7ff      	b.n	fbac <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
    fbac:	980d      	ldr	r0, [sp, #52]	; 0x34
    fbae:	990e      	ldr	r1, [sp, #56]	; 0x38
    fbb0:	6008      	str	r0, [r1, #0]
    fbb2:	2001      	movs	r0, #1
        Ok(())
    }
    fbb4:	b030      	add	sp, #192	; 0xc0
    fbb6:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
    fbb8:	f24f 1044 	movw	r0, #61764	; 0xf144
    fbbc:	f2c0 0001 	movt	r0, #1
    fbc0:	6801      	ldr	r1, [r0, #0]
    fbc2:	980c      	ldr	r0, [sp, #48]	; 0x30
    fbc4:	9021      	str	r0, [sp, #132]	; 0x84
    fbc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fbc8:	9222      	str	r2, [sp, #136]	; 0x88
    fbca:	f24f 13fc 	movw	r3, #61948	; 0xf1fc
    fbce:	f2c0 0301 	movt	r3, #1
    fbd2:	681b      	ldr	r3, [r3, #0]
    fbd4:	f24f 1c64 	movw	ip, #61796	; 0xf164
    fbd8:	f2c0 0c01 	movt	ip, #1
    fbdc:	f8dc c000 	ldr.w	ip, [ip]
    fbe0:	46ee      	mov	lr, sp
    fbe2:	2400      	movs	r4, #0
    fbe4:	f8ce 4000 	str.w	r4, [lr]
    fbe8:	a823      	add	r0, sp, #140	; 0x8c
    fbea:	2201      	movs	r2, #1
    fbec:	910a      	str	r1, [sp, #40]	; 0x28
    fbee:	4619      	mov	r1, r3
    fbf0:	4663      	mov	r3, ip
    fbf2:	f7ff fad2 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fbf6:	e7ff      	b.n	fbf8 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
    fbf8:	a821      	add	r0, sp, #132	; 0x84
    fbfa:	901e      	str	r0, [sp, #120]	; 0x78
    fbfc:	a822      	add	r0, sp, #136	; 0x88
    fbfe:	901f      	str	r0, [sp, #124]	; 0x7c
    fc00:	a823      	add	r0, sp, #140	; 0x8c
    fc02:	9020      	str	r0, [sp, #128]	; 0x80
    fc04:	981e      	ldr	r0, [sp, #120]	; 0x78
    fc06:	902d      	str	r0, [sp, #180]	; 0xb4
    fc08:	991f      	ldr	r1, [sp, #124]	; 0x7c
    fc0a:	912e      	str	r1, [sp, #184]	; 0xb8
    fc0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    fc0e:	922f      	str	r2, [sp, #188]	; 0xbc
    fc10:	f64f 7327 	movw	r3, #65319	; 0xff27
    fc14:	f2c0 0300 	movt	r3, #0
    fc18:	9109      	str	r1, [sp, #36]	; 0x24
    fc1a:	4619      	mov	r1, r3
    fc1c:	9208      	str	r2, [sp, #32]
    fc1e:	f000 f9ba 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fc22:	9007      	str	r0, [sp, #28]
    fc24:	9106      	str	r1, [sp, #24]
    fc26:	e7ff      	b.n	fc28 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
    fc28:	f64f 7127 	movw	r1, #65319	; 0xff27
    fc2c:	f2c0 0100 	movt	r1, #0
    fc30:	9809      	ldr	r0, [sp, #36]	; 0x24
    fc32:	f000 f9b0 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fc36:	9005      	str	r0, [sp, #20]
    fc38:	9104      	str	r1, [sp, #16]
    fc3a:	e7ff      	b.n	fc3c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
    fc3c:	f646 71fb 	movw	r1, #28667	; 0x6ffb
    fc40:	f2c0 0101 	movt	r1, #1
    fc44:	9808      	ldr	r0, [sp, #32]
    fc46:	f000 f9e5 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fc4a:	9003      	str	r0, [sp, #12]
    fc4c:	9102      	str	r1, [sp, #8]
    fc4e:	e7ff      	b.n	fc50 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
    fc50:	9807      	ldr	r0, [sp, #28]
    fc52:	9018      	str	r0, [sp, #96]	; 0x60
    fc54:	9906      	ldr	r1, [sp, #24]
    fc56:	9119      	str	r1, [sp, #100]	; 0x64
    fc58:	9a05      	ldr	r2, [sp, #20]
    fc5a:	921a      	str	r2, [sp, #104]	; 0x68
    fc5c:	9b04      	ldr	r3, [sp, #16]
    fc5e:	931b      	str	r3, [sp, #108]	; 0x6c
    fc60:	f8dd c00c 	ldr.w	ip, [sp, #12]
    fc64:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    fc68:	f8dd e008 	ldr.w	lr, [sp, #8]
    fc6c:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    fc70:	466c      	mov	r4, sp
    fc72:	2503      	movs	r5, #3
    fc74:	6025      	str	r5, [r4, #0]
    fc76:	a812      	add	r0, sp, #72	; 0x48
    fc78:	ab18      	add	r3, sp, #96	; 0x60
    fc7a:	990a      	ldr	r1, [sp, #40]	; 0x28
    fc7c:	462a      	mov	r2, r5
    fc7e:	f7ff fa8c 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fc82:	e7ff      	b.n	fc84 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
    fc84:	f24f 2000 	movw	r0, #61952	; 0xf200
    fc88:	f2c0 0001 	movt	r0, #1
    fc8c:	f006 fec7 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fc90:	9001      	str	r0, [sp, #4]
    fc92:	e7ff      	b.n	fc94 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
    fc94:	a812      	add	r0, sp, #72	; 0x48
    fc96:	9901      	ldr	r1, [sp, #4]
    fc98:	f006 fefe 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fc9c:	defe      	udf	#254	; 0xfe

0000fc9e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
    fc9e:	b580      	push	{r7, lr}
    fca0:	b082      	sub	sp, #8
    fca2:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
    fca4:	6800      	ldr	r0, [r0, #0]
    fca6:	2100      	movs	r1, #0
    fca8:	f009 f82e 	bl	18d08 <hal_gpio_write>
    fcac:	e7ff      	b.n	fcae <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
    fcae:	2001      	movs	r0, #1
        Ok(())
    }
    fcb0:	b002      	add	sp, #8
    fcb2:	bd80      	pop	{r7, pc}

0000fcb4 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
    fcb4:	b580      	push	{r7, lr}
    fcb6:	b082      	sub	sp, #8
    fcb8:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
    fcba:	6800      	ldr	r0, [r0, #0]
    fcbc:	2101      	movs	r1, #1
    fcbe:	f009 f823 	bl	18d08 <hal_gpio_write>
    fcc2:	e7ff      	b.n	fcc4 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
    fcc4:	2001      	movs	r0, #1
        Ok(())
    }
    fcc6:	b002      	add	sp, #8
    fcc8:	bd80      	pop	{r7, pc}

0000fcca <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
    fcca:	4770      	bx	lr

0000fccc <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
    fccc:	b580      	push	{r7, lr}
    fcce:	b086      	sub	sp, #24
    fcd0:	460a      	mov	r2, r1
    fcd2:	9003      	str	r0, [sp, #12]
    fcd4:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fcd8:	b2c8      	uxtb	r0, r1
    fcda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fcde:	fba0 0101 	umull	r0, r1, r0, r1
    fce2:	2900      	cmp	r1, #0
    fce4:	9002      	str	r0, [sp, #8]
    fce6:	d110      	bne.n	fd0a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
    fce8:	e7ff      	b.n	fcea <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
    fcea:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    fcee:	f2c1 0062 	movt	r0, #4194	; 0x1062
    fcf2:	9902      	ldr	r1, [sp, #8]
    fcf4:	fba1 0200 	umull	r0, r2, r1, r0
    fcf8:	0992      	lsrs	r2, r2, #6
    fcfa:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
    fcfc:	9001      	str	r0, [sp, #4]
    fcfe:	4610      	mov	r0, r2
    fd00:	f00b f820 	bl	1ad44 <os_time_delay>
    fd04:	e7ff      	b.n	fd06 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
    fd06:	b006      	add	sp, #24
    fd08:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fd0a:	f24f 2020 	movw	r0, #61984	; 0xf220
    fd0e:	f2c0 0001 	movt	r0, #1
    fd12:	f24f 2210 	movw	r2, #61968	; 0xf210
    fd16:	f2c0 0201 	movt	r2, #1
    fd1a:	2121      	movs	r1, #33	; 0x21
    fd1c:	f006 fe86 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fd20:	defe      	udf	#254	; 0xfe

0000fd22 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    fd22:	b580      	push	{r7, lr}
    fd24:	b084      	sub	sp, #16
    fd26:	9002      	str	r0, [sp, #8]
    fd28:	9103      	str	r1, [sp, #12]
    fd2a:	6800      	ldr	r0, [r0, #0]
    fd2c:	f000 f845 	bl	fdba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    fd30:	9001      	str	r0, [sp, #4]
    fd32:	e7ff      	b.n	fd34 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    fd34:	9801      	ldr	r0, [sp, #4]
    fd36:	f000 0001 	and.w	r0, r0, #1
    fd3a:	b004      	add	sp, #16
    fd3c:	bd80      	pop	{r7, pc}

0000fd3e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    fd3e:	b087      	sub	sp, #28
    fd40:	9000      	str	r0, [sp, #0]
    fd42:	9101      	str	r1, [sp, #4]
    fd44:	2000      	movs	r0, #0
    fd46:	f88d 0013 	strb.w	r0, [sp, #19]
    fd4a:	f88d 0012 	strb.w	r0, [sp, #18]
    fd4e:	2001      	movs	r0, #1
    fd50:	f88d 0013 	strb.w	r0, [sp, #19]
    fd54:	f88d 0012 	strb.w	r0, [sp, #18]
    fd58:	9800      	ldr	r0, [sp, #0]
    fd5a:	2800      	cmp	r0, #0
    fd5c:	d001      	beq.n	fd62 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    fd5e:	e7ff      	b.n	fd60 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    fd60:	e006      	b.n	fd70 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    fd62:	2000      	movs	r0, #0
    fd64:	f88d 0012 	strb.w	r0, [sp, #18]
    fd68:	2001      	movs	r0, #1
    fd6a:	9002      	str	r0, [sp, #8]
    fd6c:	e008      	b.n	fd80 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fd6e:	defe      	udf	#254	; 0xfe
    fd70:	2000      	movs	r0, #0
    fd72:	f88d 0013 	strb.w	r0, [sp, #19]
    fd76:	9901      	ldr	r1, [sp, #4]
    fd78:	9106      	str	r1, [sp, #24]
    fd7a:	9103      	str	r1, [sp, #12]
    fd7c:	9002      	str	r0, [sp, #8]
    fd7e:	e7ff      	b.n	fd80 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fd80:	f89d 0012 	ldrb.w	r0, [sp, #18]
    fd84:	07c0      	lsls	r0, r0, #31
    fd86:	2800      	cmp	r0, #0
    fd88:	d104      	bne.n	fd94 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    fd8a:	e7ff      	b.n	fd8c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fd8c:	9800      	ldr	r0, [sp, #0]
    fd8e:	2801      	cmp	r0, #1
    fd90:	d008      	beq.n	fda4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    fd92:	e011      	b.n	fdb8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    fd94:	2000      	movs	r0, #0
    fd96:	f88d 0012 	strb.w	r0, [sp, #18]
    fd9a:	e7f7      	b.n	fd8c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fd9c:	9802      	ldr	r0, [sp, #8]
    fd9e:	9903      	ldr	r1, [sp, #12]
    fda0:	b007      	add	sp, #28
    fda2:	4770      	bx	lr
    fda4:	f89d 0013 	ldrb.w	r0, [sp, #19]
    fda8:	07c0      	lsls	r0, r0, #31
    fdaa:	2800      	cmp	r0, #0
    fdac:	d0f6      	beq.n	fd9c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fdae:	e7ff      	b.n	fdb0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    fdb0:	2000      	movs	r0, #0
    fdb2:	f88d 0013 	strb.w	r0, [sp, #19]
    fdb6:	e7f1      	b.n	fd9c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fdb8:	e7f0      	b.n	fd9c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000fdba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    fdba:	b580      	push	{r7, lr}
    fdbc:	b08e      	sub	sp, #56	; 0x38
    fdbe:	900b      	str	r0, [sp, #44]	; 0x2c
    fdc0:	910c      	str	r1, [sp, #48]	; 0x30
    fdc2:	9003      	str	r0, [sp, #12]
    fdc4:	9803      	ldr	r0, [sp, #12]
    fdc6:	6800      	ldr	r0, [r0, #0]
    fdc8:	2800      	cmp	r0, #0
    fdca:	4602      	mov	r2, r0
    fdcc:	bf18      	it	ne
    fdce:	2201      	movne	r2, #1
    fdd0:	2800      	cmp	r0, #0
    fdd2:	9101      	str	r1, [sp, #4]
    fdd4:	d00f      	beq.n	fdf6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    fdd6:	e7ff      	b.n	fdd8 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    fdd8:	9803      	ldr	r0, [sp, #12]
    fdda:	900d      	str	r0, [sp, #52]	; 0x34
    fddc:	f24f 2241 	movw	r2, #62017	; 0xf241
    fde0:	f2c0 0201 	movt	r2, #1
    fde4:	a907      	add	r1, sp, #28
    fde6:	2304      	movs	r3, #4
    fde8:	9000      	str	r0, [sp, #0]
    fdea:	4608      	mov	r0, r1
    fdec:	9901      	ldr	r1, [sp, #4]
    fdee:	f007 fcc6 	bl	1777e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fdf2:	e011      	b.n	fe18 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    fdf4:	defe      	udf	#254	; 0xfe
    fdf6:	f24f 2245 	movw	r2, #62021	; 0xf245
    fdfa:	f2c0 0201 	movt	r2, #1
    fdfe:	a804      	add	r0, sp, #16
    fe00:	2304      	movs	r3, #4
    fe02:	9901      	ldr	r1, [sp, #4]
    fe04:	f007 fcbb 	bl	1777e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fe08:	e7ff      	b.n	fe0a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    fe0a:	a804      	add	r0, sp, #16
    fe0c:	f006 ffd4 	bl	16db8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    fe10:	f88d 000b 	strb.w	r0, [sp, #11]
    fe14:	e7ff      	b.n	fe16 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    fe16:	e011      	b.n	fe3c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    fe18:	9800      	ldr	r0, [sp, #0]
    fe1a:	900a      	str	r0, [sp, #40]	; 0x28
    fe1c:	f24f 224c 	movw	r2, #62028	; 0xf24c
    fe20:	f2c0 0201 	movt	r2, #1
    fe24:	a807      	add	r0, sp, #28
    fe26:	a90a      	add	r1, sp, #40	; 0x28
    fe28:	f006 ff5d 	bl	16ce6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    fe2c:	e7ff      	b.n	fe2e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    fe2e:	a807      	add	r0, sp, #28
    fe30:	f006 ffc2 	bl	16db8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    fe34:	f88d 000b 	strb.w	r0, [sp, #11]
    fe38:	e7ff      	b.n	fe3a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    fe3a:	e7ff      	b.n	fe3c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    fe3c:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fe40:	b00e      	add	sp, #56	; 0x38
    fe42:	bd80      	pop	{r7, pc}

0000fe44 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    fe44:	b082      	sub	sp, #8
    fe46:	2000      	movs	r0, #0
    fe48:	9000      	str	r0, [sp, #0]
    fe4a:	9800      	ldr	r0, [sp, #0]
    fe4c:	b002      	add	sp, #8
    fe4e:	4770      	bx	lr

0000fe50 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    fe50:	b580      	push	{r7, lr}
    fe52:	b084      	sub	sp, #16
    fe54:	9002      	str	r0, [sp, #8]
    fe56:	9103      	str	r1, [sp, #12]
    fe58:	f7ff ff71 	bl	fd3e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    fe5c:	9001      	str	r0, [sp, #4]
    fe5e:	9100      	str	r1, [sp, #0]
    fe60:	e7ff      	b.n	fe62 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    fe62:	9801      	ldr	r0, [sp, #4]
    fe64:	9900      	ldr	r1, [sp, #0]
    fe66:	b004      	add	sp, #16
    fe68:	bd80      	pop	{r7, pc}

0000fe6a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    fe6a:	b580      	push	{r7, lr}
    fe6c:	b094      	sub	sp, #80	; 0x50
    fe6e:	9008      	str	r0, [sp, #32]
    fe70:	9109      	str	r1, [sp, #36]	; 0x24
    fe72:	6802      	ldr	r2, [r0, #0]
    fe74:	2a00      	cmp	r2, #0
    fe76:	bf18      	it	ne
    fe78:	2201      	movne	r2, #1
    fe7a:	f04f 0300 	mov.w	r3, #0
    fe7e:	930b      	str	r3, [sp, #44]	; 0x2c
    fe80:	920a      	str	r2, [sp, #40]	; 0x28
    fe82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe86:	9104      	str	r1, [sp, #16]
    fe88:	9003      	str	r0, [sp, #12]
    fe8a:	9202      	str	r2, [sp, #8]
    fe8c:	e7ff      	b.n	fe8e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    fe8e:	9802      	ldr	r0, [sp, #8]
    fe90:	9902      	ldr	r1, [sp, #8]
    fe92:	910d      	str	r1, [sp, #52]	; 0x34
    fe94:	9a04      	ldr	r2, [sp, #16]
    fe96:	6813      	ldr	r3, [r2, #0]
    fe98:	2b00      	cmp	r3, #0
    fe9a:	bf18      	it	ne
    fe9c:	2301      	movne	r3, #1
    fe9e:	f04f 0c00 	mov.w	ip, #0
    fea2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    fea6:	930e      	str	r3, [sp, #56]	; 0x38
    fea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    feaa:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    feae:	9001      	str	r0, [sp, #4]
    feb0:	9300      	str	r3, [sp, #0]
    feb2:	e7ff      	b.n	feb4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    feb4:	9800      	ldr	r0, [sp, #0]
    feb6:	9011      	str	r0, [sp, #68]	; 0x44
    feb8:	9901      	ldr	r1, [sp, #4]
    feba:	4281      	cmp	r1, r0
    febc:	d104      	bne.n	fec8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    febe:	e7ff      	b.n	fec0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    fec0:	2001      	movs	r0, #1
    fec2:	f88d 0017 	strb.w	r0, [sp, #23]
    fec6:	e003      	b.n	fed0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    fec8:	2000      	movs	r0, #0
    feca:	f88d 0017 	strb.w	r0, [sp, #23]
    fece:	e7ff      	b.n	fed0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    fed0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    fed4:	07c0      	lsls	r0, r0, #31
    fed6:	2800      	cmp	r0, #0
    fed8:	d104      	bne.n	fee4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    feda:	e7ff      	b.n	fedc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    fedc:	2000      	movs	r0, #0
    fede:	f88d 0016 	strb.w	r0, [sp, #22]
    fee2:	e01c      	b.n	ff1e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    fee4:	9803      	ldr	r0, [sp, #12]
    fee6:	9006      	str	r0, [sp, #24]
    fee8:	9904      	ldr	r1, [sp, #16]
    feea:	9107      	str	r1, [sp, #28]
    feec:	9a06      	ldr	r2, [sp, #24]
    feee:	6812      	ldr	r2, [r2, #0]
    fef0:	2a00      	cmp	r2, #0
    fef2:	d104      	bne.n	fefe <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    fef4:	e7ff      	b.n	fef6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    fef6:	2001      	movs	r0, #1
    fef8:	f88d 0016 	strb.w	r0, [sp, #22]
    fefc:	e00e      	b.n	ff1c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    fefe:	9807      	ldr	r0, [sp, #28]
    ff00:	6800      	ldr	r0, [r0, #0]
    ff02:	2800      	cmp	r0, #0
    ff04:	d0f7      	beq.n	fef6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    ff06:	e7ff      	b.n	ff08 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    ff08:	9806      	ldr	r0, [sp, #24]
    ff0a:	9012      	str	r0, [sp, #72]	; 0x48
    ff0c:	9907      	ldr	r1, [sp, #28]
    ff0e:	9113      	str	r1, [sp, #76]	; 0x4c
    ff10:	f003 fa76 	bl	13400 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    ff14:	f88d 0016 	strb.w	r0, [sp, #22]
    ff18:	e7ff      	b.n	ff1a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    ff1a:	e7ff      	b.n	ff1c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    ff1c:	e7ff      	b.n	ff1e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    ff1e:	f89d 0016 	ldrb.w	r0, [sp, #22]
    ff22:	b014      	add	sp, #80	; 0x50
    ff24:	bd80      	pop	{r7, pc}

0000ff26 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    ff26:	b580      	push	{r7, lr}
    ff28:	b084      	sub	sp, #16
    ff2a:	9002      	str	r0, [sp, #8]
    ff2c:	9103      	str	r1, [sp, #12]
    ff2e:	6800      	ldr	r0, [r0, #0]
    ff30:	f003 f9f8 	bl	13324 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    ff34:	9001      	str	r0, [sp, #4]
    ff36:	e7ff      	b.n	ff38 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    ff38:	9801      	ldr	r0, [sp, #4]
    ff3a:	f000 0001 	and.w	r0, r0, #1
    ff3e:	b004      	add	sp, #16
    ff40:	bd80      	pop	{r7, pc}

0000ff42 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    ff42:	b580      	push	{r7, lr}
    ff44:	b084      	sub	sp, #16
    ff46:	9002      	str	r0, [sp, #8]
    ff48:	9103      	str	r1, [sp, #12]
    ff4a:	6800      	ldr	r0, [r0, #0]
    ff4c:	f003 f9b3 	bl	132b6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    ff50:	9001      	str	r0, [sp, #4]
    ff52:	e7ff      	b.n	ff54 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    ff54:	9801      	ldr	r0, [sp, #4]
    ff56:	f000 0001 	and.w	r0, r0, #1
    ff5a:	b004      	add	sp, #16
    ff5c:	bd80      	pop	{r7, pc}

0000ff5e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    ff5e:	b580      	push	{r7, lr}
    ff60:	b084      	sub	sp, #16
    ff62:	9002      	str	r0, [sp, #8]
    ff64:	9103      	str	r1, [sp, #12]
    ff66:	6800      	ldr	r0, [r0, #0]
    ff68:	f7ff ffeb 	bl	ff42 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    ff6c:	9001      	str	r0, [sp, #4]
    ff6e:	e7ff      	b.n	ff70 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    ff70:	9801      	ldr	r0, [sp, #4]
    ff72:	f000 0001 	and.w	r0, r0, #1
    ff76:	b004      	add	sp, #16
    ff78:	bd80      	pop	{r7, pc}

0000ff7a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    ff7a:	b580      	push	{r7, lr}
    ff7c:	b084      	sub	sp, #16
    ff7e:	9002      	str	r0, [sp, #8]
    ff80:	9103      	str	r1, [sp, #12]
    ff82:	6800      	ldr	r0, [r0, #0]
    ff84:	f003 fa05 	bl	13392 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    ff88:	9001      	str	r0, [sp, #4]
    ff8a:	e7ff      	b.n	ff8c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    ff8c:	9801      	ldr	r0, [sp, #4]
    ff8e:	f000 0001 	and.w	r0, r0, #1
    ff92:	b004      	add	sp, #16
    ff94:	bd80      	pop	{r7, pc}

0000ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    ff96:	b089      	sub	sp, #36	; 0x24
    ff98:	9005      	str	r0, [sp, #20]
    ff9a:	9106      	str	r1, [sp, #24]
    ff9c:	9107      	str	r1, [sp, #28]
    ff9e:	9907      	ldr	r1, [sp, #28]
    ffa0:	9002      	str	r0, [sp, #8]
    ffa2:	9101      	str	r1, [sp, #4]
    ffa4:	e7ff      	b.n	ffa6 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    ffa6:	9802      	ldr	r0, [sp, #8]
    ffa8:	9008      	str	r0, [sp, #32]
    ffaa:	9908      	ldr	r1, [sp, #32]
    ffac:	9100      	str	r1, [sp, #0]
    ffae:	e7ff      	b.n	ffb0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    ffb0:	9800      	ldr	r0, [sp, #0]
    ffb2:	9003      	str	r0, [sp, #12]
    ffb4:	9901      	ldr	r1, [sp, #4]
    ffb6:	9104      	str	r1, [sp, #16]
    ffb8:	9803      	ldr	r0, [sp, #12]
    ffba:	9904      	ldr	r1, [sp, #16]
    ffbc:	b009      	add	sp, #36	; 0x24
    ffbe:	4770      	bx	lr

0000ffc0 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    ffc0:	b089      	sub	sp, #36	; 0x24
    ffc2:	9005      	str	r0, [sp, #20]
    ffc4:	9106      	str	r1, [sp, #24]
    ffc6:	9107      	str	r1, [sp, #28]
    ffc8:	9907      	ldr	r1, [sp, #28]
    ffca:	9002      	str	r0, [sp, #8]
    ffcc:	9101      	str	r1, [sp, #4]
    ffce:	e7ff      	b.n	ffd0 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    ffd0:	9802      	ldr	r0, [sp, #8]
    ffd2:	9008      	str	r0, [sp, #32]
    ffd4:	9908      	ldr	r1, [sp, #32]
    ffd6:	9100      	str	r1, [sp, #0]
    ffd8:	e7ff      	b.n	ffda <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    ffda:	9800      	ldr	r0, [sp, #0]
    ffdc:	9003      	str	r0, [sp, #12]
    ffde:	9901      	ldr	r1, [sp, #4]
    ffe0:	9104      	str	r1, [sp, #16]
    ffe2:	9803      	ldr	r0, [sp, #12]
    ffe4:	9904      	ldr	r1, [sp, #16]
    ffe6:	b009      	add	sp, #36	; 0x24
    ffe8:	4770      	bx	lr

0000ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    ffea:	b089      	sub	sp, #36	; 0x24
    ffec:	9005      	str	r0, [sp, #20]
    ffee:	9106      	str	r1, [sp, #24]
    fff0:	9107      	str	r1, [sp, #28]
    fff2:	9907      	ldr	r1, [sp, #28]
    fff4:	9002      	str	r0, [sp, #8]
    fff6:	9101      	str	r1, [sp, #4]
    fff8:	e7ff      	b.n	fffa <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    fffa:	9802      	ldr	r0, [sp, #8]
    fffc:	9008      	str	r0, [sp, #32]
    fffe:	9908      	ldr	r1, [sp, #32]
   10000:	9100      	str	r1, [sp, #0]
   10002:	e7ff      	b.n	10004 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
   10004:	9800      	ldr	r0, [sp, #0]
   10006:	9003      	str	r0, [sp, #12]
   10008:	9901      	ldr	r1, [sp, #4]
   1000a:	9104      	str	r1, [sp, #16]
   1000c:	9803      	ldr	r0, [sp, #12]
   1000e:	9904      	ldr	r1, [sp, #16]
   10010:	b009      	add	sp, #36	; 0x24
   10012:	4770      	bx	lr

00010014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
   10014:	b089      	sub	sp, #36	; 0x24
   10016:	9005      	str	r0, [sp, #20]
   10018:	9106      	str	r1, [sp, #24]
   1001a:	9107      	str	r1, [sp, #28]
   1001c:	9907      	ldr	r1, [sp, #28]
   1001e:	9002      	str	r0, [sp, #8]
   10020:	9101      	str	r1, [sp, #4]
   10022:	e7ff      	b.n	10024 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
   10024:	9802      	ldr	r0, [sp, #8]
   10026:	9008      	str	r0, [sp, #32]
   10028:	9908      	ldr	r1, [sp, #32]
   1002a:	9100      	str	r1, [sp, #0]
   1002c:	e7ff      	b.n	1002e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
   1002e:	9800      	ldr	r0, [sp, #0]
   10030:	9003      	str	r0, [sp, #12]
   10032:	9901      	ldr	r1, [sp, #4]
   10034:	9104      	str	r1, [sp, #16]
   10036:	9803      	ldr	r0, [sp, #12]
   10038:	9904      	ldr	r1, [sp, #16]
   1003a:	b009      	add	sp, #36	; 0x24
   1003c:	4770      	bx	lr

0001003e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
   1003e:	b580      	push	{r7, lr}
   10040:	b088      	sub	sp, #32
   10042:	9004      	str	r0, [sp, #16]
   10044:	9105      	str	r1, [sp, #20]
   10046:	f000 f819 	bl	1007c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
   1004a:	9001      	str	r0, [sp, #4]
   1004c:	9100      	str	r1, [sp, #0]
   1004e:	e7ff      	b.n	10050 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
   10050:	9801      	ldr	r0, [sp, #4]
   10052:	9006      	str	r0, [sp, #24]
   10054:	9900      	ldr	r1, [sp, #0]
   10056:	f001 0201 	and.w	r2, r1, #1
   1005a:	f88d 201f 	strb.w	r2, [sp, #31]
   1005e:	2a00      	cmp	r2, #0
   10060:	d105      	bne.n	1006e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
   10062:	e7ff      	b.n	10064 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
   10064:	9801      	ldr	r0, [sp, #4]
   10066:	9003      	str	r0, [sp, #12]
   10068:	2101      	movs	r1, #1
   1006a:	9102      	str	r1, [sp, #8]
   1006c:	e002      	b.n	10074 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   1006e:	2000      	movs	r0, #0
   10070:	9002      	str	r0, [sp, #8]
   10072:	e7ff      	b.n	10074 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   10074:	9802      	ldr	r0, [sp, #8]
   10076:	9903      	ldr	r1, [sp, #12]
   10078:	b008      	add	sp, #32
   1007a:	bd80      	pop	{r7, pc}

0001007c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
   1007c:	b08a      	sub	sp, #40	; 0x28
   1007e:	9004      	str	r0, [sp, #16]
   10080:	9105      	str	r1, [sp, #20]
   10082:	1a40      	subs	r0, r0, r1
   10084:	f04f 0100 	mov.w	r1, #0
   10088:	f141 0100 	adc.w	r1, r1, #0
   1008c:	f1c1 0101 	rsb	r1, r1, #1
   10090:	9006      	str	r0, [sp, #24]
   10092:	f88d 101c 	strb.w	r1, [sp, #28]
   10096:	9806      	ldr	r0, [sp, #24]
   10098:	f89d 101c 	ldrb.w	r1, [sp, #28]
   1009c:	9001      	str	r0, [sp, #4]
   1009e:	9100      	str	r1, [sp, #0]
   100a0:	e7ff      	b.n	100a2 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
   100a2:	9801      	ldr	r0, [sp, #4]
   100a4:	9008      	str	r0, [sp, #32]
   100a6:	9900      	ldr	r1, [sp, #0]
   100a8:	f001 0201 	and.w	r2, r1, #1
   100ac:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   100b0:	9002      	str	r0, [sp, #8]
   100b2:	f88d 200c 	strb.w	r2, [sp, #12]
   100b6:	9802      	ldr	r0, [sp, #8]
   100b8:	f89d 100c 	ldrb.w	r1, [sp, #12]
   100bc:	b00a      	add	sp, #40	; 0x28
   100be:	4770      	bx	lr

000100c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   100c0:	b580      	push	{r7, lr}
   100c2:	b084      	sub	sp, #16
   100c4:	9002      	str	r0, [sp, #8]
   100c6:	9103      	str	r1, [sp, #12]
   100c8:	f000 f805 	bl	100d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   100cc:	9001      	str	r0, [sp, #4]
   100ce:	e7ff      	b.n	100d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   100d0:	9801      	ldr	r0, [sp, #4]
   100d2:	b004      	add	sp, #16
   100d4:	bd80      	pop	{r7, pc}

000100d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   100d6:	b084      	sub	sp, #16
   100d8:	9001      	str	r0, [sp, #4]
   100da:	9102      	str	r1, [sp, #8]
   100dc:	4408      	add	r0, r1
   100de:	9003      	str	r0, [sp, #12]
   100e0:	9803      	ldr	r0, [sp, #12]
   100e2:	9000      	str	r0, [sp, #0]
   100e4:	e7ff      	b.n	100e6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   100e6:	9800      	ldr	r0, [sp, #0]
   100e8:	b004      	add	sp, #16
   100ea:	4770      	bx	lr

000100ec <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   100ec:	b081      	sub	sp, #4
   100ee:	b001      	add	sp, #4
   100f0:	4770      	bx	lr

000100f2 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
    }
    Ok(())
}

/// Draw the item to the display
pub fn draw_to_display<T>(item: T)
   100f2:	b510      	push	{r4, lr}
   100f4:	b088      	sub	sp, #32
   100f6:	a901      	add	r1, sp, #4
    unsafe { DISPLAY.draw(item) };        //  Draw text or graphics the usual slow way

    #[cfg(feature = "noblock_spi")]       //  If batching is enabled...
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
        unsafe { &mut DISPLAY },
        item
   100f8:	460a      	mov	r2, r1
   100fa:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   100fe:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   10102:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   10106:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   1010a:	f640 2004 	movw	r0, #2564	; 0xa04
   1010e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10112:	f000 f94a 	bl	103aa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   10116:	9000      	str	r0, [sp, #0]
   10118:	e7ff      	b.n	1011a <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   1011a:	9800      	ldr	r0, [sp, #0]
   1011c:	f000 0001 	and.w	r0, r0, #1
   10120:	f24f 215c 	movw	r1, #62044	; 0xf25c
   10124:	f2c0 0101 	movt	r1, #1
   10128:	f24f 23a4 	movw	r3, #62116	; 0xf2a4
   1012c:	f2c0 0301 	movt	r3, #1
   10130:	2210      	movs	r2, #16
   10132:	f005 fad5 	bl	156e0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10136:	e7ff      	b.n	10138 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
    ).expect("draw blocks fail");
}
   10138:	b008      	add	sp, #32
   1013a:	bd10      	pop	{r4, pc}

0001013c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
pub fn start_display() -> MynewtResult<()> {
   1013c:	b5b0      	push	{r4, r5, r7, lr}
   1013e:	b0b2      	sub	sp, #200	; 0xc8
    let mut spi_port = mynewt::SPI::new();
   10140:	f7ff fb54 	bl	f7ec <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
   10144:	9115      	str	r1, [sp, #84]	; 0x54
   10146:	9014      	str	r0, [sp, #80]	; 0x50
   10148:	e7ff      	b.n	1014a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
   1014a:	f7ff fd0d 	bl	fb68 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   1014e:	9016      	str	r0, [sp, #88]	; 0x58
   10150:	e7ff      	b.n	10152 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
   10152:	f7ff fd09 	bl	fb68 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   10156:	9017      	str	r0, [sp, #92]	; 0x5c
   10158:	e7ff      	b.n	1015a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>
    spi_port.init(
   1015a:	f240 03f0 	movw	r3, #240	; 0xf0
   1015e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10162:	a814      	add	r0, sp, #80	; 0x50
   10164:	2100      	movs	r1, #0
   10166:	2219      	movs	r2, #25
   10168:	f7ff fb48 	bl	f7fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
   1016c:	9012      	str	r0, [sp, #72]	; 0x48
   1016e:	e7ff      	b.n	10170 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
   10170:	9812      	ldr	r0, [sp, #72]	; 0x48
   10172:	f7ff f880 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10176:	9018      	str	r0, [sp, #96]	; 0x60
   10178:	e7ff      	b.n	1017a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
    ) ? ;
   1017a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1017c:	1e41      	subs	r1, r0, #1
   1017e:	bf18      	it	ne
   10180:	2101      	movne	r1, #1
   10182:	2801      	cmp	r0, #1
   10184:	d001      	beq.n	1018a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
   10186:	e7ff      	b.n	10188 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
   10188:	e006      	b.n	10198 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
   1018a:	a816      	add	r0, sp, #88	; 0x58
   1018c:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   1018e:	f7ff fced 	bl	fb6c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   10192:	9011      	str	r0, [sp, #68]	; 0x44
   10194:	e010      	b.n	101b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
   10196:	defe      	udf	#254	; 0xfe
    ) ? ;
   10198:	9818      	ldr	r0, [sp, #96]	; 0x60
   1019a:	902d      	str	r0, [sp, #180]	; 0xb4
   1019c:	f7ff f8de 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   101a0:	9010      	str	r0, [sp, #64]	; 0x40
   101a2:	e002      	b.n	101aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
}
   101a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   101a6:	b032      	add	sp, #200	; 0xc8
   101a8:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
   101aa:	9810      	ldr	r0, [sp, #64]	; 0x40
   101ac:	f7ff f857 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   101b0:	9013      	str	r0, [sp, #76]	; 0x4c
   101b2:	e7ff      	b.n	101b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
   101b4:	e7ff      	b.n	101b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
   101b6:	e7f5      	b.n	101a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   101b8:	9811      	ldr	r0, [sp, #68]	; 0x44
   101ba:	f7ff f85c 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   101be:	9019      	str	r0, [sp, #100]	; 0x64
   101c0:	e7ff      	b.n	101c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
   101c2:	9819      	ldr	r0, [sp, #100]	; 0x64
   101c4:	1e41      	subs	r1, r0, #1
   101c6:	bf18      	it	ne
   101c8:	2101      	movne	r1, #1
   101ca:	2801      	cmp	r0, #1
   101cc:	d001      	beq.n	101d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
   101ce:	e7ff      	b.n	101d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
   101d0:	e006      	b.n	101e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
   101d2:	a817      	add	r0, sp, #92	; 0x5c
   101d4:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   101d6:	f7ff fcc9 	bl	fb6c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   101da:	900f      	str	r0, [sp, #60]	; 0x3c
   101dc:	e00c      	b.n	101f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   101de:	defe      	udf	#254	; 0xfe
   101e0:	9819      	ldr	r0, [sp, #100]	; 0x64
   101e2:	902e      	str	r0, [sp, #184]	; 0xb8
   101e4:	f7ff f8ba 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   101e8:	900e      	str	r0, [sp, #56]	; 0x38
   101ea:	e7ff      	b.n	101ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
   101ec:	980e      	ldr	r0, [sp, #56]	; 0x38
   101ee:	f7ff f836 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   101f2:	9013      	str	r0, [sp, #76]	; 0x4c
   101f4:	e7ff      	b.n	101f6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
   101f6:	e7de      	b.n	101b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   101f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   101fa:	f7ff f83c 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   101fe:	901a      	str	r0, [sp, #104]	; 0x68
   10200:	e7ff      	b.n	10202 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
   10202:	981a      	ldr	r0, [sp, #104]	; 0x68
   10204:	1e41      	subs	r1, r0, #1
   10206:	bf18      	it	ne
   10208:	2101      	movne	r1, #1
   1020a:	2801      	cmp	r0, #1
   1020c:	d001      	beq.n	10212 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
   1020e:	e7ff      	b.n	10210 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
   10210:	e004      	b.n	1021c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   10212:	f7ff fca9 	bl	fb68 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   10216:	900d      	str	r0, [sp, #52]	; 0x34
   10218:	e00c      	b.n	10234 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   1021a:	defe      	udf	#254	; 0xfe
   1021c:	981a      	ldr	r0, [sp, #104]	; 0x68
   1021e:	902f      	str	r0, [sp, #188]	; 0xbc
   10220:	f7ff f89c 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10224:	900c      	str	r0, [sp, #48]	; 0x30
   10226:	e7ff      	b.n	10228 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
   10228:	980c      	ldr	r0, [sp, #48]	; 0x30
   1022a:	f7ff f818 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1022e:	9013      	str	r0, [sp, #76]	; 0x4c
   10230:	e7ff      	b.n	10232 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
   10232:	e7c0      	b.n	101b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   10234:	f640 201c 	movw	r0, #2588	; 0xa1c
   10238:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1023c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1023e:	6001      	str	r1, [r0, #0]
   10240:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   10242:	f7ff fc93 	bl	fb6c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   10246:	900b      	str	r0, [sp, #44]	; 0x2c
   10248:	e7ff      	b.n	1024a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
   1024a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1024c:	f7ff f813 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10250:	901b      	str	r0, [sp, #108]	; 0x6c
   10252:	e7ff      	b.n	10254 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
   10254:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10256:	1e41      	subs	r1, r0, #1
   10258:	bf18      	it	ne
   1025a:	2101      	movne	r1, #1
   1025c:	2801      	cmp	r0, #1
   1025e:	d001      	beq.n	10264 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
   10260:	e7ff      	b.n	10262 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
   10262:	e008      	b.n	10276 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
   10264:	f640 201c 	movw	r0, #2588	; 0xa1c
   10268:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1026c:	f7ff fd17 	bl	fc9e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10270:	900a      	str	r0, [sp, #40]	; 0x28
   10272:	e00d      	b.n	10290 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   10274:	defe      	udf	#254	; 0xfe
   10276:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10278:	9030      	str	r0, [sp, #192]	; 0xc0
   1027a:	f7ff f86f 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1027e:	9009      	str	r0, [sp, #36]	; 0x24
   10280:	e7ff      	b.n	10282 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
   10282:	9809      	ldr	r0, [sp, #36]	; 0x24
   10284:	f7fe ffeb 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10288:	9013      	str	r0, [sp, #76]	; 0x4c
   1028a:	e7ff      	b.n	1028c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
   1028c:	e7ff      	b.n	1028e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
   1028e:	e792      	b.n	101b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
   10290:	980a      	ldr	r0, [sp, #40]	; 0x28
   10292:	f7fe fff0 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10296:	901c      	str	r0, [sp, #112]	; 0x70
   10298:	e7ff      	b.n	1029a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
   1029a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1029c:	1e41      	subs	r1, r0, #1
   1029e:	bf18      	it	ne
   102a0:	2101      	movne	r1, #1
   102a2:	2801      	cmp	r0, #1
   102a4:	d001      	beq.n	102aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
   102a6:	e7ff      	b.n	102a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
   102a8:	e011      	b.n	102ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
   102aa:	9914      	ldr	r1, [sp, #80]	; 0x50
   102ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
   102ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
   102b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   102b2:	46ec      	mov	ip, sp
   102b4:	f04f 0e01 	mov.w	lr, #1
   102b8:	f8cc e008 	str.w	lr, [ip, #8]
   102bc:	f8cc e004 	str.w	lr, [ip, #4]
   102c0:	f8cc 0000 	str.w	r0, [ip]
   102c4:	a81d      	add	r0, sp, #116	; 0x74
   102c6:	f001 f8d2 	bl	1146e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
   102ca:	e00c      	b.n	102e6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
   102cc:	defe      	udf	#254	; 0xfe
   102ce:	981c      	ldr	r0, [sp, #112]	; 0x70
   102d0:	9031      	str	r0, [sp, #196]	; 0xc4
   102d2:	f7ff f843 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   102d6:	9008      	str	r0, [sp, #32]
   102d8:	e7ff      	b.n	102da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
   102da:	9808      	ldr	r0, [sp, #32]
   102dc:	f7fe ffbf 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   102e0:	9013      	str	r0, [sp, #76]	; 0x4c
   102e2:	e7ff      	b.n	102e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
   102e4:	e7d3      	b.n	1028e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   102e6:	f640 2004 	movw	r0, #2564	; 0xa04
   102ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102ee:	a91d      	add	r1, sp, #116	; 0x74
   102f0:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   102f4:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
   102f8:	f7ff fce7 	bl	fcca <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
   102fc:	e7ff      	b.n	102fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
   102fe:	f640 2004 	movw	r0, #2564	; 0xa04
   10302:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10306:	a923      	add	r1, sp, #140	; 0x8c
   10308:	f001 f8d3 	bl	114b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
   1030c:	9007      	str	r0, [sp, #28]
   1030e:	e7ff      	b.n	10310 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
   10310:	9807      	ldr	r0, [sp, #28]
   10312:	f000 0001 	and.w	r0, r0, #1
   10316:	f7fe ffa8 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1031a:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
   1031e:	e7ff      	b.n	10320 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
   10320:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
   10324:	07c1      	lsls	r1, r0, #31
   10326:	2900      	cmp	r1, #0
   10328:	d001      	beq.n	1032e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
   1032a:	e7ff      	b.n	1032c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
   1032c:	e00d      	b.n	1034a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   1032e:	f24f 20b8 	movw	r0, #62136	; 0xf2b8
   10332:	f2c0 0001 	movt	r0, #1
   10336:	6801      	ldr	r1, [r0, #0]
   10338:	f640 2004 	movw	r0, #2564	; 0xa04
   1033c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10340:	f000 fecc 	bl	110dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
   10344:	9006      	str	r0, [sp, #24]
   10346:	e00b      	b.n	10360 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
   10348:	defe      	udf	#254	; 0xfe
   1034a:	f002 ff56 	bl	131fa <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   1034e:	9005      	str	r0, [sp, #20]
   10350:	e7ff      	b.n	10352 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
   10352:	9805      	ldr	r0, [sp, #20]
   10354:	f7fe ff83 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10358:	9013      	str	r0, [sp, #76]	; 0x4c
   1035a:	e7ff      	b.n	1035c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
   1035c:	e7ff      	b.n	1035e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
   1035e:	e72a      	b.n	101b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   10360:	9806      	ldr	r0, [sp, #24]
   10362:	f000 0001 	and.w	r0, r0, #1
   10366:	f7fe ff80 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1036a:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
   1036e:	e7ff      	b.n	10370 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
   10370:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
   10374:	07c1      	lsls	r1, r0, #31
   10376:	2900      	cmp	r1, #0
   10378:	d001      	beq.n	1037e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
   1037a:	e7ff      	b.n	1037c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
   1037c:	e005      	b.n	1038a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
   1037e:	2000      	movs	r0, #0
    Ok(())
   10380:	9013      	str	r0, [sp, #76]	; 0x4c
   10382:	2001      	movs	r0, #1
   10384:	9013      	str	r0, [sp, #76]	; 0x4c
}
   10386:	e70d      	b.n	101a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   10388:	defe      	udf	#254	; 0xfe
   1038a:	f002 ff36 	bl	131fa <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   1038e:	9004      	str	r0, [sp, #16]
   10390:	e7ff      	b.n	10392 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
   10392:	9804      	ldr	r0, [sp, #16]
   10394:	f7fe ff63 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10398:	9013      	str	r0, [sp, #76]	; 0x4c
   1039a:	e7ff      	b.n	1039c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
   1039c:	e7df      	b.n	1035e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

0001039e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   1039e:	b580      	push	{r7, lr}
   103a0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   103a4:	f00c ff16 	bl	1d1d4 <__aeabi_memcpy>
   103a8:	bd80      	pop	{r7, pc}

000103aa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   103aa:	b5b0      	push	{r4, r5, r7, lr}
   103ac:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   103b0:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   103b4:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   103b6:	4613      	mov	r3, r2
   103b8:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   103bc:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   103c0:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   103c4:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   103c8:	a910      	add	r1, sp, #64	; 0x40
   103ca:	900e      	str	r0, [sp, #56]	; 0x38
   103cc:	4608      	mov	r0, r1
   103ce:	4611      	mov	r1, r2
   103d0:	f001 fcb9 	bl	11d46 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   103d4:	e7ff      	b.n	103d6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   103d6:	a810      	add	r0, sp, #64	; 0x40
   103d8:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   103da:	460a      	mov	r2, r1
   103dc:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   103e0:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   103e4:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   103e8:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   103ec:	a820      	add	r0, sp, #128	; 0x80
   103ee:	f000 f8b7 	bl	10560 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   103f2:	e7ff      	b.n	103f4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   103f4:	a8a9      	add	r0, sp, #676	; 0x2a4
   103f6:	a920      	add	r1, sp, #128	; 0x80
   103f8:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   103fa:	900d      	str	r0, [sp, #52]	; 0x34
   103fc:	f00c feea 	bl	1d1d4 <__aeabi_memcpy>
   10400:	a84e      	add	r0, sp, #312	; 0x138
   10402:	990d      	ldr	r1, [sp, #52]	; 0x34
   10404:	f000 f8db 	bl	105be <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   10408:	e7ff      	b.n	1040a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   1040a:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   1040e:	a94e      	add	r1, sp, #312	; 0x138
   10410:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10414:	900c      	str	r0, [sp, #48]	; 0x30
   10416:	f00c fedd 	bl	1d1d4 <__aeabi_memcpy>
   1041a:	a8ce      	add	r0, sp, #824	; 0x338
   1041c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1041e:	f7ff ffbe 	bl	1039e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   10422:	e7ff      	b.n	10424 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   10424:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   10428:	a9ce      	add	r1, sp, #824	; 0x338
   1042a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   1042e:	f00c fed1 	bl	1d1d4 <__aeabi_memcpy>
   10432:	e7ff      	b.n	10434 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   10434:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   10438:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   1043c:	f000 fa2c 	bl	10898 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   10440:	e7ff      	b.n	10442 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   10442:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   10446:	2800      	cmp	r0, #0
   10448:	d001      	beq.n	1044e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   1044a:	e7ff      	b.n	1044c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   1044c:	e005      	b.n	1045a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   1044e:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   10452:	f001 fc48 	bl	11ce6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   10456:	e01c      	b.n	10492 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   10458:	defe      	udf	#254	; 0xfe
   1045a:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   1045e:	1d01      	adds	r1, r0, #4
   10460:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   10464:	22d4      	movs	r2, #212	; 0xd4
   10466:	900b      	str	r0, [sp, #44]	; 0x2c
   10468:	920a      	str	r2, [sp, #40]	; 0x28
   1046a:	f00c feb3 	bl	1d1d4 <__aeabi_memcpy>
   1046e:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   10472:	9009      	str	r0, [sp, #36]	; 0x24
   10474:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10478:	f00c feac 	bl	1d1d4 <__aeabi_memcpy>
   1047c:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   10480:	9909      	ldr	r1, [sp, #36]	; 0x24
   10482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10484:	f00c fea6 	bl	1d1d4 <__aeabi_memcpy>
   10488:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1048c:	2801      	cmp	r0, #1
   1048e:	d02c      	beq.n	104ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   10490:	e061      	b.n	10556 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   10492:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   10496:	f001 fc03 	bl	11ca0 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   1049a:	e022      	b.n	104e2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   1049c:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   104a0:	f7fe fee3 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   104a4:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   104a8:	e7ff      	b.n	104aa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   104aa:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   104ae:	07c1      	lsls	r1, r0, #31
   104b0:	2900      	cmp	r1, #0
   104b2:	d001      	beq.n	104b8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   104b4:	e7ff      	b.n	104b6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   104b6:	e001      	b.n	104bc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   104b8:	e7bc      	b.n	10434 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   104ba:	defe      	udf	#254	; 0xfe
            colors) ? ;
   104bc:	f002 fdfa 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   104c0:	e004      	b.n	104cc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   104c2:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   104c6:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   104ca:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   104cc:	f005 fa55 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   104d0:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   104d4:	e7ff      	b.n	104d6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   104d6:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   104da:	f001 fbe1 	bl	11ca0 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   104de:	e7ff      	b.n	104e0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   104e0:	e7ef      	b.n	104c2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   104e2:	2000      	movs	r0, #0
    Ok(())
   104e4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   104e8:	e7eb      	b.n	104c2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   104ea:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   104ee:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   104f2:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   104f6:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   104fa:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   104fe:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   10502:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   10506:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   1050a:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   1050e:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   10512:	24cc      	movs	r4, #204	; 0xcc
   10514:	9008      	str	r0, [sp, #32]
   10516:	4660      	mov	r0, ip
   10518:	9107      	str	r1, [sp, #28]
   1051a:	4671      	mov	r1, lr
   1051c:	9206      	str	r2, [sp, #24]
   1051e:	4622      	mov	r2, r4
   10520:	9305      	str	r3, [sp, #20]
   10522:	f8cd c010 	str.w	ip, [sp, #16]
   10526:	9403      	str	r4, [sp, #12]
   10528:	f00c fe54 	bl	1d1d4 <__aeabi_memcpy>
   1052c:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   10530:	9002      	str	r0, [sp, #8]
   10532:	9904      	ldr	r1, [sp, #16]
   10534:	9a03      	ldr	r2, [sp, #12]
   10536:	f00c fe4d 	bl	1d1d4 <__aeabi_memcpy>
        display.set_pixels(
   1053a:	4668      	mov	r0, sp
   1053c:	9902      	ldr	r1, [sp, #8]
   1053e:	6041      	str	r1, [r0, #4]
   10540:	9a05      	ldr	r2, [sp, #20]
   10542:	6002      	str	r2, [r0, #0]
   10544:	980e      	ldr	r0, [sp, #56]	; 0x38
   10546:	9908      	ldr	r1, [sp, #32]
   10548:	9a06      	ldr	r2, [sp, #24]
   1054a:	9b07      	ldr	r3, [sp, #28]
   1054c:	f000 fbf5 	bl	10d3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   10550:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   10554:	e7a2      	b.n	1049c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   10556:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1055a:	f001 fbc4 	bl	11ce6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1055e:	e7c4      	b.n	104ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

00010560 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   10560:	b5b0      	push	{r4, r5, r7, lr}
   10562:	b0a4      	sub	sp, #144	; 0x90
   10564:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   10566:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   1056a:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   1056e:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   10572:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   10576:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   10578:	9000      	str	r0, [sp, #0]
   1057a:	4608      	mov	r0, r1
   1057c:	f004 fcf3 	bl	14f66 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   10580:	e7ff      	b.n	10582 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   10582:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   10584:	9900      	ldr	r1, [sp, #0]
   10586:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   1058a:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   1058e:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   10592:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   10596:	2000      	movs	r0, #0
   10598:	9900      	ldr	r1, [sp, #0]
   1059a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   1059e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   105a2:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   105a6:	f101 0024 	add.w	r0, r1, #36	; 0x24
   105aa:	a90a      	add	r1, sp, #40	; 0x28
   105ac:	2268      	movs	r2, #104	; 0x68
   105ae:	f00c fe11 	bl	1d1d4 <__aeabi_memcpy>
   105b2:	2001      	movs	r0, #1
   105b4:	9900      	ldr	r1, [sp, #0]
   105b6:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   105ba:	b024      	add	sp, #144	; 0x90
   105bc:	bdb0      	pop	{r4, r5, r7, pc}

000105be <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   105be:	b580      	push	{r7, lr}
   105c0:	b0da      	sub	sp, #360	; 0x168
   105c2:	aa02      	add	r2, sp, #8
   105c4:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   105c6:	9001      	str	r0, [sp, #4]
   105c8:	4610      	mov	r0, r2
   105ca:	461a      	mov	r2, r3
   105cc:	f00c fe02 	bl	1d1d4 <__aeabi_memcpy>
   105d0:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   105d2:	f004 fcd7 	bl	14f84 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   105d6:	e7ff      	b.n	105d8 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   105d8:	a902      	add	r1, sp, #8
   105da:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   105dc:	9801      	ldr	r0, [sp, #4]
   105de:	f00c fdf9 	bl	1d1d4 <__aeabi_memcpy>
   105e2:	2000      	movs	r0, #0
   105e4:	9901      	ldr	r1, [sp, #4]
   105e6:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   105ea:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   105ee:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   105f2:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   105f6:	f101 0094 	add.w	r0, r1, #148	; 0x94
   105fa:	a927      	add	r1, sp, #156	; 0x9c
   105fc:	22cc      	movs	r2, #204	; 0xcc
   105fe:	f00c fde9 	bl	1d1d4 <__aeabi_memcpy>
   10602:	2001      	movs	r0, #1
   10604:	9901      	ldr	r1, [sp, #4]
   10606:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   1060a:	b05a      	add	sp, #360	; 0x168
   1060c:	bd80      	pop	{r7, pc}

0001060e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   1060e:	b580      	push	{r7, lr}
   10610:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   10614:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   10616:	9116      	str	r1, [sp, #88]	; 0x58
   10618:	9015      	str	r0, [sp, #84]	; 0x54
   1061a:	e7ff      	b.n	1061c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   1061c:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   1061e:	9916      	ldr	r1, [sp, #88]	; 0x58
   10620:	f001 fbec 	bl	11dfc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   10624:	e7ff      	b.n	10626 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   10626:	9817      	ldr	r0, [sp, #92]	; 0x5c
   10628:	2800      	cmp	r0, #0
   1062a:	d01c      	beq.n	10666 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   1062c:	e7ff      	b.n	1062e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   1062e:	9818      	ldr	r0, [sp, #96]	; 0x60
   10630:	9919      	ldr	r1, [sp, #100]	; 0x64
   10632:	90c2      	str	r0, [sp, #776]	; 0x308
   10634:	91c3      	str	r1, [sp, #780]	; 0x30c
   10636:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1063a:	4613      	mov	r3, r2
   1063c:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   10640:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   10644:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   10648:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   1064c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1064e:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   10652:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   10656:	f1bc 0f00 	cmp.w	ip, #0
   1065a:	9014      	str	r0, [sp, #80]	; 0x50
   1065c:	9113      	str	r1, [sp, #76]	; 0x4c
   1065e:	9312      	str	r3, [sp, #72]	; 0x48
   10660:	d156      	bne.n	10710 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   10662:	e04a      	b.n	106fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   10664:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   10666:	9816      	ldr	r0, [sp, #88]	; 0x58
   10668:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   1066c:	07c9      	lsls	r1, r1, #31
   1066e:	2900      	cmp	r1, #0
   10670:	d111      	bne.n	10696 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   10672:	e7ff      	b.n	10674 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   10674:	9816      	ldr	r0, [sp, #88]	; 0x58
   10676:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   1067a:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   1067e:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   10682:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   10686:	a837      	add	r0, sp, #220	; 0xdc
   10688:	9111      	str	r1, [sp, #68]	; 0x44
   1068a:	4661      	mov	r1, ip
   1068c:	9210      	str	r2, [sp, #64]	; 0x40
   1068e:	930f      	str	r3, [sp, #60]	; 0x3c
   10690:	f004 fbd2 	bl	14e38 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   10694:	e006      	b.n	106a4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   10696:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   10698:	9915      	ldr	r1, [sp, #84]	; 0x54
   1069a:	6008      	str	r0, [r1, #0]
   1069c:	e7ff      	b.n	1069e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   1069e:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   106a2:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   106a4:	9811      	ldr	r0, [sp, #68]	; 0x44
   106a6:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   106aa:	9910      	ldr	r1, [sp, #64]	; 0x40
   106ac:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   106b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   106b2:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   106b6:	a81b      	add	r0, sp, #108	; 0x6c
   106b8:	a937      	add	r1, sp, #220	; 0xdc
   106ba:	2268      	movs	r2, #104	; 0x68
   106bc:	f00c fd8a 	bl	1d1d4 <__aeabi_memcpy>
                    self.colors.clear();
   106c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   106c2:	3024      	adds	r0, #36	; 0x24
   106c4:	f004 fc7d 	bl	14fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   106c8:	e7ff      	b.n	106ca <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   106ca:	2001      	movs	r0, #1
                    self.first_pixel = true;
   106cc:	9916      	ldr	r1, [sp, #88]	; 0x58
   106ce:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   106d2:	aa51      	add	r2, sp, #324	; 0x144
   106d4:	a91b      	add	r1, sp, #108	; 0x6c
   106d6:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   106d8:	900e      	str	r0, [sp, #56]	; 0x38
   106da:	4610      	mov	r0, r2
   106dc:	920d      	str	r2, [sp, #52]	; 0x34
   106de:	461a      	mov	r2, r3
   106e0:	930c      	str	r3, [sp, #48]	; 0x30
   106e2:	f00c fd77 	bl	1d1d4 <__aeabi_memcpy>
   106e6:	9815      	ldr	r0, [sp, #84]	; 0x54
   106e8:	3004      	adds	r0, #4
   106ea:	990d      	ldr	r1, [sp, #52]	; 0x34
   106ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   106ee:	f00c fd71 	bl	1d1d4 <__aeabi_memcpy>
   106f2:	980e      	ldr	r0, [sp, #56]	; 0x38
   106f4:	9915      	ldr	r1, [sp, #84]	; 0x54
   106f6:	6008      	str	r0, [r1, #0]
   106f8:	e7d1      	b.n	1069e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   106fa:	9816      	ldr	r0, [sp, #88]	; 0x58
   106fc:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   10700:	3101      	adds	r1, #1
   10702:	b28a      	uxth	r2, r1
   10704:	460b      	mov	r3, r1
   10706:	428a      	cmp	r2, r1
   10708:	930b      	str	r3, [sp, #44]	; 0x2c
   1070a:	f040 80b9 	bne.w	10880 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   1070e:	e040      	b.n	10792 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   10710:	2000      	movs	r0, #0
                        self.first_pixel = false;
   10712:	9916      	ldr	r1, [sp, #88]	; 0x58
   10714:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   10718:	9814      	ldr	r0, [sp, #80]	; 0x50
   1071a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   1071e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   10722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10724:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   10728:	f101 0024 	add.w	r0, r1, #36	; 0x24
   1072c:	f004 fc49 	bl	14fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   10730:	e7ff      	b.n	10732 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   10732:	9816      	ldr	r0, [sp, #88]	; 0x58
   10734:	3024      	adds	r0, #36	; 0x24
   10736:	9912      	ldr	r1, [sp, #72]	; 0x48
   10738:	f004 fc33 	bl	14fa2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   1073c:	900a      	str	r0, [sp, #40]	; 0x28
   1073e:	9109      	str	r1, [sp, #36]	; 0x24
   10740:	e7ff      	b.n	10742 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   10742:	f24f 20f8 	movw	r0, #62200	; 0xf2f8
   10746:	f2c0 0001 	movt	r0, #1
   1074a:	4669      	mov	r1, sp
   1074c:	6008      	str	r0, [r1, #0]
   1074e:	f24f 22bc 	movw	r2, #62140	; 0xf2bc
   10752:	f2c0 0201 	movt	r2, #1
   10756:	2305      	movs	r3, #5
   10758:	980a      	ldr	r0, [sp, #40]	; 0x28
   1075a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1075c:	f004 ff8f 	bl	1567e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   10760:	e7ff      	b.n	10762 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   10762:	e7ff      	b.n	10764 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   10764:	e75a      	b.n	1061c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   10766:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   10768:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   1076c:	e00b      	b.n	10786 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   1076e:	2000      	movs	r0, #0
   10770:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   10774:	e007      	b.n	10786 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   10776:	9816      	ldr	r0, [sp, #88]	; 0x58
   10778:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   1077c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1077e:	b293      	uxth	r3, r2
   10780:	428b      	cmp	r3, r1
   10782:	d0f0      	beq.n	10766 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   10784:	e7f3      	b.n	1076e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   10786:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   1078a:	07c0      	lsls	r0, r0, #31
   1078c:	2800      	cmp	r0, #0
   1078e:	d107      	bne.n	107a0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   10790:	e020      	b.n	107d4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   10792:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10794:	b281      	uxth	r1, r0
   10796:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10798:	b293      	uxth	r3, r2
   1079a:	428b      	cmp	r3, r1
   1079c:	d0eb      	beq.n	10776 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   1079e:	e7e6      	b.n	1076e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   107a0:	9816      	ldr	r0, [sp, #88]	; 0x58
   107a2:	3024      	adds	r0, #36	; 0x24
   107a4:	9912      	ldr	r1, [sp, #72]	; 0x48
   107a6:	f004 fbfc 	bl	14fa2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   107aa:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   107ae:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   107b2:	e7ff      	b.n	107b4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   107b4:	a86e      	add	r0, sp, #440	; 0x1b8
   107b6:	f004 ff3d 	bl	15634 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   107ba:	9008      	str	r0, [sp, #32]
   107bc:	e7ff      	b.n	107be <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   107be:	9808      	ldr	r0, [sp, #32]
   107c0:	07c1      	lsls	r1, r0, #31
   107c2:	2900      	cmp	r1, #0
   107c4:	d101      	bne.n	107ca <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   107c6:	e7ff      	b.n	107c8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   107c8:	e004      	b.n	107d4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   107ca:	9814      	ldr	r0, [sp, #80]	; 0x50
   107cc:	9916      	ldr	r1, [sp, #88]	; 0x58
   107ce:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   107d2:	e7c7      	b.n	10764 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   107d4:	9816      	ldr	r0, [sp, #88]	; 0x58
   107d6:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   107da:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   107de:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   107e2:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   107e6:	a88b      	add	r0, sp, #556	; 0x22c
   107e8:	9107      	str	r1, [sp, #28]
   107ea:	4661      	mov	r1, ip
   107ec:	9206      	str	r2, [sp, #24]
   107ee:	9305      	str	r3, [sp, #20]
   107f0:	f004 fb22 	bl	14e38 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   107f4:	e7ff      	b.n	107f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   107f6:	9807      	ldr	r0, [sp, #28]
   107f8:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   107fc:	9906      	ldr	r1, [sp, #24]
   107fe:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   10802:	9a05      	ldr	r2, [sp, #20]
   10804:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   10808:	a86f      	add	r0, sp, #444	; 0x1bc
   1080a:	a98b      	add	r1, sp, #556	; 0x22c
   1080c:	2268      	movs	r2, #104	; 0x68
   1080e:	f00c fce1 	bl	1d1d4 <__aeabi_memcpy>
                    self.x_left = x;
   10812:	9814      	ldr	r0, [sp, #80]	; 0x50
   10814:	9916      	ldr	r1, [sp, #88]	; 0x58
   10816:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   1081a:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   1081e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10820:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   10824:	f101 0024 	add.w	r0, r1, #36	; 0x24
   10828:	f004 fbcb 	bl	14fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   1082c:	e7ff      	b.n	1082e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   1082e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10830:	3024      	adds	r0, #36	; 0x24
   10832:	9912      	ldr	r1, [sp, #72]	; 0x48
   10834:	f004 fbb5 	bl	14fa2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10838:	9004      	str	r0, [sp, #16]
   1083a:	9103      	str	r1, [sp, #12]
   1083c:	e7ff      	b.n	1083e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   1083e:	f24f 303c 	movw	r0, #62268	; 0xf33c
   10842:	f2c0 0001 	movt	r0, #1
   10846:	4669      	mov	r1, sp
   10848:	6008      	str	r0, [r1, #0]
   1084a:	f24f 22bc 	movw	r2, #62140	; 0xf2bc
   1084e:	f2c0 0201 	movt	r2, #1
   10852:	2305      	movs	r3, #5
   10854:	9804      	ldr	r0, [sp, #16]
   10856:	9903      	ldr	r1, [sp, #12]
   10858:	f004 ff11 	bl	1567e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   1085c:	e7ff      	b.n	1085e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   1085e:	a8a5      	add	r0, sp, #660	; 0x294
   10860:	a96f      	add	r1, sp, #444	; 0x1bc
   10862:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   10864:	9002      	str	r0, [sp, #8]
   10866:	9201      	str	r2, [sp, #4]
   10868:	f00c fcb4 	bl	1d1d4 <__aeabi_memcpy>
   1086c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1086e:	3004      	adds	r0, #4
   10870:	9902      	ldr	r1, [sp, #8]
   10872:	9a01      	ldr	r2, [sp, #4]
   10874:	f00c fcae 	bl	1d1d4 <__aeabi_memcpy>
   10878:	2001      	movs	r0, #1
   1087a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1087c:	6008      	str	r0, [r1, #0]
   1087e:	e70e      	b.n	1069e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   10880:	f24f 3020 	movw	r0, #62240	; 0xf320
   10884:	f2c0 0001 	movt	r0, #1
   10888:	f24f 3208 	movw	r2, #62216	; 0xf308
   1088c:	f2c0 0201 	movt	r2, #1
   10890:	211c      	movs	r1, #28
   10892:	f006 f8cb 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10896:	defe      	udf	#254	; 0xfe

00010898 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   10898:	b580      	push	{r7, lr}
   1089a:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   1089e:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   108a2:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   108a4:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   108a8:	911f      	str	r1, [sp, #124]	; 0x7c
   108aa:	901e      	str	r0, [sp, #120]	; 0x78
   108ac:	e7ff      	b.n	108ae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   108ae:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   108b0:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   108b4:	a820      	add	r0, sp, #128	; 0x80
   108b6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   108b8:	f7ff fea9 	bl	1060e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   108bc:	e7ff      	b.n	108be <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   108be:	9820      	ldr	r0, [sp, #128]	; 0x80
   108c0:	2800      	cmp	r0, #0
   108c2:	d026      	beq.n	10912 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   108c4:	e7ff      	b.n	108c6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   108c6:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   108c8:	1d01      	adds	r1, r0, #4
   108ca:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   108ce:	4602      	mov	r2, r0
   108d0:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   108d4:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   108d8:	4603      	mov	r3, r0
   108da:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   108de:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   108e2:	4684      	mov	ip, r0
   108e4:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   108e8:	2000      	movs	r0, #0
   108ea:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   108ee:	a8da      	add	r0, sp, #872	; 0x368
   108f0:	f04f 0e68 	mov.w	lr, #104	; 0x68
   108f4:	921d      	str	r2, [sp, #116]	; 0x74
   108f6:	4672      	mov	r2, lr
   108f8:	931c      	str	r3, [sp, #112]	; 0x70
   108fa:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   108fe:	f00c fc69 	bl	1d1d4 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   10902:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10904:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   10908:	07c9      	lsls	r1, r1, #31
   1090a:	2900      	cmp	r1, #0
   1090c:	d15a      	bne.n	109c4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   1090e:	e04e      	b.n	109ae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   10910:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   10912:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10914:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   10918:	07c9      	lsls	r1, r1, #31
   1091a:	2900      	cmp	r1, #0
   1091c:	d115      	bne.n	1094a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   1091e:	e7ff      	b.n	10920 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   10920:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10922:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   10926:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   1092a:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   1092e:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   10932:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   10936:	a872      	add	r0, sp, #456	; 0x1c8
   10938:	911a      	str	r1, [sp, #104]	; 0x68
   1093a:	4671      	mov	r1, lr
   1093c:	9219      	str	r2, [sp, #100]	; 0x64
   1093e:	9318      	str	r3, [sp, #96]	; 0x60
   10940:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   10944:	f004 fa88 	bl	14e58 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10948:	e003      	b.n	10952 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   1094a:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   1094c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1094e:	6008      	str	r0, [r1, #0]
   10950:	e153      	b.n	10bfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   10952:	981a      	ldr	r0, [sp, #104]	; 0x68
   10954:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   10958:	9919      	ldr	r1, [sp, #100]	; 0x64
   1095a:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   1095e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10960:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   10964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10966:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   1096a:	a83d      	add	r0, sp, #244	; 0xf4
   1096c:	a972      	add	r1, sp, #456	; 0x1c8
   1096e:	22cc      	movs	r2, #204	; 0xcc
   10970:	f00c fc30 	bl	1d1d4 <__aeabi_memcpy>
                    self.colors.clear();
   10974:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10976:	3094      	adds	r0, #148	; 0x94
   10978:	f004 fb2b 	bl	14fd2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   1097c:	e7ff      	b.n	1097e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   1097e:	2001      	movs	r0, #1
                    self.first_row = true;
   10980:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10982:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   10986:	aaa5      	add	r2, sp, #660	; 0x294
   10988:	a93d      	add	r1, sp, #244	; 0xf4
   1098a:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   1098c:	9016      	str	r0, [sp, #88]	; 0x58
   1098e:	4610      	mov	r0, r2
   10990:	9215      	str	r2, [sp, #84]	; 0x54
   10992:	461a      	mov	r2, r3
   10994:	9314      	str	r3, [sp, #80]	; 0x50
   10996:	f00c fc1d 	bl	1d1d4 <__aeabi_memcpy>
   1099a:	981e      	ldr	r0, [sp, #120]	; 0x78
   1099c:	3004      	adds	r0, #4
   1099e:	9915      	ldr	r1, [sp, #84]	; 0x54
   109a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   109a2:	f00c fc17 	bl	1d1d4 <__aeabi_memcpy>
   109a6:	9816      	ldr	r0, [sp, #88]	; 0x58
   109a8:	991e      	ldr	r1, [sp, #120]	; 0x78
   109aa:	6008      	str	r0, [r1, #0]
   109ac:	e125      	b.n	10bfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   109ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
   109b0:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   109b4:	3101      	adds	r1, #1
   109b6:	b28a      	uxth	r2, r1
   109b8:	460b      	mov	r3, r1
   109ba:	428a      	cmp	r2, r1
   109bc:	9313      	str	r3, [sp, #76]	; 0x4c
   109be:	f040 8128 	bne.w	10c12 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   109c2:	e069      	b.n	10a98 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   109c4:	2000      	movs	r0, #0
                        self.first_row = false;
   109c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   109c8:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   109cc:	981d      	ldr	r0, [sp, #116]	; 0x74
   109ce:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   109d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   109d4:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   109d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   109da:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   109de:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   109e2:	f101 0094 	add.w	r0, r1, #148	; 0x94
   109e6:	f004 faf4 	bl	14fd2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   109ea:	e7ff      	b.n	109ec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   109ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   109ee:	f100 0194 	add.w	r1, r0, #148	; 0x94
   109f2:	a8da      	add	r0, sp, #872	; 0x368
   109f4:	9112      	str	r1, [sp, #72]	; 0x48
   109f6:	f004 fa5f 	bl	14eb8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   109fa:	9011      	str	r0, [sp, #68]	; 0x44
   109fc:	9110      	str	r1, [sp, #64]	; 0x40
   109fe:	e7ff      	b.n	10a00 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   10a00:	9812      	ldr	r0, [sp, #72]	; 0x48
   10a02:	9911      	ldr	r1, [sp, #68]	; 0x44
   10a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10a06:	f004 faa0 	bl	14f4a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10a0a:	900f      	str	r0, [sp, #60]	; 0x3c
   10a0c:	e7ff      	b.n	10a0e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   10a0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10a10:	f000 0001 	and.w	r0, r0, #1
   10a14:	f24f 21bc 	movw	r1, #62140	; 0xf2bc
   10a18:	f2c0 0101 	movt	r1, #1
   10a1c:	f24f 334c 	movw	r3, #62284	; 0xf34c
   10a20:	f2c0 0301 	movt	r3, #1
   10a24:	2205      	movs	r2, #5
   10a26:	f004 fe5b 	bl	156e0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10a2a:	e7ff      	b.n	10a2c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   10a2c:	e7ff      	b.n	10a2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   10a2e:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   10a30:	f001 f951 	bl	11cd6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10a34:	e7ff      	b.n	10a36 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   10a36:	9820      	ldr	r0, [sp, #128]	; 0x80
   10a38:	2801      	cmp	r0, #1
   10a3a:	f000 80e2 	beq.w	10c02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   10a3e:	e0e4      	b.n	10c0a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   10a40:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10a42:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10a46:	e00b      	b.n	10a60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10a48:	2000      	movs	r0, #0
   10a4a:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10a4e:	e007      	b.n	10a60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10a50:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a52:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   10a56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10a58:	b293      	uxth	r3, r2
   10a5a:	428b      	cmp	r3, r1
   10a5c:	d0f0      	beq.n	10a40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   10a5e:	e7f3      	b.n	10a48 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10a60:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   10a64:	07c0      	lsls	r0, r0, #31
   10a66:	2800      	cmp	r0, #0
   10a68:	d11d      	bne.n	10aa6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   10a6a:	e03f      	b.n	10aec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   10a6c:	2001      	movs	r0, #1
   10a6e:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10a72:	e00b      	b.n	10a8c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10a74:	2000      	movs	r0, #0
   10a76:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10a7a:	e007      	b.n	10a8c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10a7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a7e:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   10a82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10a84:	b293      	uxth	r3, r2
   10a86:	428b      	cmp	r3, r1
   10a88:	d0f0      	beq.n	10a6c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   10a8a:	e7f3      	b.n	10a74 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   10a8c:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   10a90:	07c0      	lsls	r0, r0, #31
   10a92:	2800      	cmp	r0, #0
   10a94:	d1dc      	bne.n	10a50 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   10a96:	e7d7      	b.n	10a48 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10a98:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10a9a:	b281      	uxth	r1, r0
   10a9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10a9e:	b293      	uxth	r3, r2
   10aa0:	428b      	cmp	r3, r1
   10aa2:	d0eb      	beq.n	10a7c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   10aa4:	e7e6      	b.n	10a74 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   10aa6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10aa8:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10aac:	a8da      	add	r0, sp, #872	; 0x368
   10aae:	910e      	str	r1, [sp, #56]	; 0x38
   10ab0:	f004 fa02 	bl	14eb8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10ab4:	900d      	str	r0, [sp, #52]	; 0x34
   10ab6:	910c      	str	r1, [sp, #48]	; 0x30
   10ab8:	e7ff      	b.n	10aba <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   10aba:	980e      	ldr	r0, [sp, #56]	; 0x38
   10abc:	990d      	ldr	r1, [sp, #52]	; 0x34
   10abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10ac0:	f004 fa43 	bl	14f4a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10ac4:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   10ac8:	e7ff      	b.n	10aca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   10aca:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   10ace:	f004 fdc3 	bl	15658 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   10ad2:	900b      	str	r0, [sp, #44]	; 0x2c
   10ad4:	e7ff      	b.n	10ad6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   10ad6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10ad8:	07c1      	lsls	r1, r0, #31
   10ada:	2900      	cmp	r1, #0
   10adc:	d101      	bne.n	10ae2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   10ade:	e7ff      	b.n	10ae0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10ae0:	e004      	b.n	10aec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   10ae2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10ae4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10ae6:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   10aea:	e7a0      	b.n	10a2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   10aec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10aee:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   10af2:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   10af6:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   10afa:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   10afe:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   10b02:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   10b06:	910a      	str	r1, [sp, #40]	; 0x28
   10b08:	4671      	mov	r1, lr
   10b0a:	9209      	str	r2, [sp, #36]	; 0x24
   10b0c:	9308      	str	r3, [sp, #32]
   10b0e:	f8cd c01c 	str.w	ip, [sp, #28]
   10b12:	f004 f9a1 	bl	14e58 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10b16:	e7ff      	b.n	10b18 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   10b18:	980a      	ldr	r0, [sp, #40]	; 0x28
   10b1a:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   10b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
   10b20:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   10b24:	9a08      	ldr	r2, [sp, #32]
   10b26:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   10b2a:	9b07      	ldr	r3, [sp, #28]
   10b2c:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   10b30:	a8f5      	add	r0, sp, #980	; 0x3d4
   10b32:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   10b36:	22cc      	movs	r2, #204	; 0xcc
   10b38:	f00c fb4c 	bl	1d1d4 <__aeabi_memcpy>
                    self.x_left = x_left;
   10b3c:	981d      	ldr	r0, [sp, #116]	; 0x74
   10b3e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b40:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   10b44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10b46:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   10b4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10b4c:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   10b50:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   10b54:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10b58:	f004 fa3b 	bl	14fd2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10b5c:	e7ff      	b.n	10b5e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   10b5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b60:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10b64:	a8da      	add	r0, sp, #872	; 0x368
   10b66:	9106      	str	r1, [sp, #24]
   10b68:	f004 f9a6 	bl	14eb8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10b6c:	9005      	str	r0, [sp, #20]
   10b6e:	9104      	str	r1, [sp, #16]
   10b70:	e7ff      	b.n	10b72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   10b72:	9806      	ldr	r0, [sp, #24]
   10b74:	9905      	ldr	r1, [sp, #20]
   10b76:	9a04      	ldr	r2, [sp, #16]
   10b78:	f004 f9e7 	bl	14f4a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10b7c:	9003      	str	r0, [sp, #12]
   10b7e:	e7ff      	b.n	10b80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   10b80:	9803      	ldr	r0, [sp, #12]
   10b82:	f000 0001 	and.w	r0, r0, #1
   10b86:	f24f 21bc 	movw	r1, #62140	; 0xf2bc
   10b8a:	f2c0 0101 	movt	r1, #1
   10b8e:	f24f 336c 	movw	r3, #62316	; 0xf36c
   10b92:	f2c0 0301 	movt	r3, #1
   10b96:	2205      	movs	r2, #5
   10b98:	f004 fda2 	bl	156e0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10b9c:	e7ff      	b.n	10b9e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   10b9e:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   10ba2:	a9f5      	add	r1, sp, #980	; 0x3d4
   10ba4:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   10ba6:	9002      	str	r0, [sp, #8]
   10ba8:	9201      	str	r2, [sp, #4]
   10baa:	f00c fb13 	bl	1d1d4 <__aeabi_memcpy>
   10bae:	981e      	ldr	r0, [sp, #120]	; 0x78
   10bb0:	3004      	adds	r0, #4
   10bb2:	9902      	ldr	r1, [sp, #8]
   10bb4:	9a01      	ldr	r2, [sp, #4]
   10bb6:	f00c fb0d 	bl	1d1d4 <__aeabi_memcpy>
   10bba:	2001      	movs	r0, #1
   10bbc:	991e      	ldr	r1, [sp, #120]	; 0x78
   10bbe:	6008      	str	r0, [r1, #0]
   10bc0:	a8da      	add	r0, sp, #872	; 0x368
            }
   10bc2:	f001 f888 	bl	11cd6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10bc6:	e7ff      	b.n	10bc8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   10bc8:	e017      	b.n	10bfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   10bca:	2000      	movs	r0, #0
        }
   10bcc:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   10bd0:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   10bd4:	bd80      	pop	{r7, pc}
        }
   10bd6:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   10bda:	07c0      	lsls	r0, r0, #31
   10bdc:	2800      	cmp	r0, #0
   10bde:	d0f4      	beq.n	10bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10be0:	e7ff      	b.n	10be2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   10be2:	2000      	movs	r0, #0
   10be4:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10be8:	a820      	add	r0, sp, #128	; 0x80
   10bea:	3004      	adds	r0, #4
   10bec:	f001 f873 	bl	11cd6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10bf0:	e7eb      	b.n	10bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10bf2:	a820      	add	r0, sp, #128	; 0x80
   10bf4:	f001 f834 	bl	11c60 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10bf8:	e7e7      	b.n	10bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10bfa:	9820      	ldr	r0, [sp, #128]	; 0x80
   10bfc:	2801      	cmp	r0, #1
   10bfe:	d0ea      	beq.n	10bd6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   10c00:	e7f7      	b.n	10bf2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   10c02:	2000      	movs	r0, #0
   10c04:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   10c08:	e651      	b.n	108ae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10c0a:	a820      	add	r0, sp, #128	; 0x80
        }
   10c0c:	f001 f828 	bl	11c60 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10c10:	e7f7      	b.n	10c02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10c12:	f24f 3020 	movw	r0, #62240	; 0xf320
   10c16:	f2c0 0001 	movt	r0, #1
   10c1a:	f24f 325c 	movw	r2, #62300	; 0xf35c
   10c1e:	f2c0 0201 	movt	r2, #1
   10c22:	211c      	movs	r1, #28
   10c24:	f005 ff02 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10c28:	defe      	udf	#254	; 0xfe

00010c2a <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
   10c2a:	b580      	push	{r7, lr}
   10c2c:	b08a      	sub	sp, #40	; 0x28
   10c2e:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   10c30:	f001 fe53 	bl	128da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
   10c34:	9307      	str	r3, [sp, #28]
   10c36:	9206      	str	r2, [sp, #24]
   10c38:	9105      	str	r1, [sp, #20]
   10c3a:	9004      	str	r0, [sp, #16]
   10c3c:	e7ff      	b.n	10c3e <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
   10c3e:	a804      	add	r0, sp, #16
   10c40:	f003 ffdc 	bl	14bfc <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   10c44:	9003      	str	r0, [sp, #12]
   10c46:	e7ff      	b.n	10c48 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
   10c48:	9803      	ldr	r0, [sp, #12]
   10c4a:	f004 f8aa 	bl	14da2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   10c4e:	9002      	str	r0, [sp, #8]
   10c50:	9101      	str	r1, [sp, #4]
   10c52:	e7ff      	b.n	10c54 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
   10c54:	9802      	ldr	r0, [sp, #8]
   10c56:	f000 0001 	and.w	r0, r0, #1
   10c5a:	9901      	ldr	r1, [sp, #4]
   10c5c:	b00a      	add	sp, #40	; 0x28
   10c5e:	bd80      	pop	{r7, pc}

00010c60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
   10c60:	b580      	push	{r7, lr}
   10c62:	b090      	sub	sp, #64	; 0x40
   10c64:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
   10c66:	f100 010c 	add.w	r1, r0, #12
   10c6a:	9006      	str	r0, [sp, #24]
   10c6c:	4608      	mov	r0, r1
   10c6e:	f7ff f821 	bl	fcb4 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10c72:	9005      	str	r0, [sp, #20]
   10c74:	e7ff      	b.n	10c76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
   10c76:	9805      	ldr	r0, [sp, #20]
   10c78:	f004 fe2a 	bl	158d0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
   10c7c:	9004      	str	r0, [sp, #16]
   10c7e:	e7ff      	b.n	10c80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
   10c80:	9804      	ldr	r0, [sp, #16]
   10c82:	f000 0001 	and.w	r0, r0, #1
   10c86:	f7fe faf0 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10c8a:	f88d 001f 	strb.w	r0, [sp, #31]
   10c8e:	e7ff      	b.n	10c90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
   10c90:	f89d 001f 	ldrb.w	r0, [sp, #31]
   10c94:	07c1      	lsls	r1, r0, #31
   10c96:	2900      	cmp	r1, #0
   10c98:	d001      	beq.n	10c9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
   10c9a:	e7ff      	b.n	10c9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
   10c9c:	e006      	b.n	10cac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
   10c9e:	9806      	ldr	r0, [sp, #24]
   10ca0:	300c      	adds	r0, #12
   10ca2:	f7fe fffc 	bl	fc9e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10ca6:	9003      	str	r0, [sp, #12]
   10ca8:	e00d      	b.n	10cc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
   10caa:	defe      	udf	#254	; 0xfe
   10cac:	f002 fa02 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10cb0:	e003      	b.n	10cba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
   10cb2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   10cb6:	b010      	add	sp, #64	; 0x40
   10cb8:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
   10cba:	f004 fe5e 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10cbe:	f88d 001e 	strb.w	r0, [sp, #30]
   10cc2:	e7ff      	b.n	10cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
   10cc4:	e7f5      	b.n	10cb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
   10cc6:	9803      	ldr	r0, [sp, #12]
   10cc8:	f004 fdad 	bl	15826 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
   10ccc:	9002      	str	r0, [sp, #8]
   10cce:	e7ff      	b.n	10cd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
   10cd0:	9802      	ldr	r0, [sp, #8]
   10cd2:	f000 0001 	and.w	r0, r0, #1
   10cd6:	f7fe fac8 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10cda:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   10cde:	e7ff      	b.n	10ce0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
   10ce0:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10ce4:	07c1      	lsls	r1, r0, #31
   10ce6:	2900      	cmp	r1, #0
   10ce8:	d001      	beq.n	10cee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
   10cea:	e7ff      	b.n	10cec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
   10cec:	e006      	b.n	10cfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
   10cee:	9806      	ldr	r0, [sp, #24]
   10cf0:	300c      	adds	r0, #12
   10cf2:	f7fe ffdf 	bl	fcb4 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10cf6:	9001      	str	r0, [sp, #4]
   10cf8:	e009      	b.n	10d0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
   10cfa:	defe      	udf	#254	; 0xfe
   10cfc:	f002 f9da 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10d00:	e7ff      	b.n	10d02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
   10d02:	f004 fe3a 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10d06:	f88d 001e 	strb.w	r0, [sp, #30]
   10d0a:	e7ff      	b.n	10d0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
   10d0c:	e7d1      	b.n	10cb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
   10d0e:	9801      	ldr	r0, [sp, #4]
   10d10:	f004 fd34 	bl	1577c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
   10d14:	f88d 001e 	strb.w	r0, [sp, #30]
   10d18:	e7ff      	b.n	10d1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
   10d1a:	e7ca      	b.n	10cb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

00010d1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
   10d1c:	b082      	sub	sp, #8
   10d1e:	9001      	str	r0, [sp, #4]
   10d20:	e7ff      	b.n	10d22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
   10d22:	b002      	add	sp, #8
   10d24:	4770      	bx	lr

00010d26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
   10d26:	b082      	sub	sp, #8
   10d28:	9001      	str	r0, [sp, #4]
   10d2a:	e7ff      	b.n	10d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
   10d2c:	b002      	add	sp, #8
   10d2e:	4770      	bx	lr

00010d30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
   10d30:	b082      	sub	sp, #8
   10d32:	9001      	str	r0, [sp, #4]
   10d34:	e7ff      	b.n	10d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
   10d36:	b002      	add	sp, #8
   10d38:	4770      	bx	lr

00010d3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   10d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d3c:	b0c7      	sub	sp, #284	; 0x11c
   10d3e:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
   10d42:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
   10d46:	461c      	mov	r4, r3
   10d48:	4615      	mov	r5, r2
   10d4a:	460e      	mov	r6, r1
   10d4c:	9040      	str	r0, [sp, #256]	; 0x100
   10d4e:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
   10d52:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
   10d56:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
   10d5a:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
   10d5e:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   10d60:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10d64:	2701      	movs	r7, #1
   10d66:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10d6a:	466f      	mov	r7, sp
   10d6c:	f8c7 e000 	str.w	lr, [r7]
   10d70:	900a      	str	r0, [sp, #40]	; 0x28
   10d72:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10d76:	9408      	str	r4, [sp, #32]
   10d78:	9507      	str	r5, [sp, #28]
   10d7a:	9606      	str	r6, [sp, #24]
   10d7c:	f000 fa44 	bl	11208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   10d80:	9005      	str	r0, [sp, #20]
   10d82:	e7ff      	b.n	10d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
   10d84:	9805      	ldr	r0, [sp, #20]
   10d86:	f000 0001 	and.w	r0, r0, #1
   10d8a:	f7fe fa6e 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10d8e:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10d92:	e7ff      	b.n	10d94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
   10d94:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   10d98:	07c1      	lsls	r1, r0, #31
   10d9a:	2900      	cmp	r1, #0
   10d9c:	d001      	beq.n	10da2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
   10d9e:	e7ff      	b.n	10da0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
   10da0:	e00f      	b.n	10dc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
   10da2:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   10da4:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10da8:	a80c      	add	r0, sp, #48	; 0x30
   10daa:	22cc      	movs	r2, #204	; 0xcc
   10dac:	9004      	str	r0, [sp, #16]
   10dae:	9909      	ldr	r1, [sp, #36]	; 0x24
   10db0:	f00c fa10 	bl	1d1d4 <__aeabi_memcpy>
   10db4:	980a      	ldr	r0, [sp, #40]	; 0x28
   10db6:	9904      	ldr	r1, [sp, #16]
   10db8:	f000 f884 	bl	10ec4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
   10dbc:	9003      	str	r0, [sp, #12]
   10dbe:	e00d      	b.n	10ddc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
   10dc0:	defe      	udf	#254	; 0xfe
   10dc2:	f002 f977 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10dc6:	e003      	b.n	10dd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   10dc8:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   10dcc:	b047      	add	sp, #284	; 0x11c
   10dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   10dd0:	f004 fdd3 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10dd4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10dd8:	e7ff      	b.n	10dda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
   10dda:	e034      	b.n	10e46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
   10ddc:	9803      	ldr	r0, [sp, #12]
   10dde:	f000 0001 	and.w	r0, r0, #1
   10de2:	f7fe fa42 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10de6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   10dea:	e7ff      	b.n	10dec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
   10dec:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   10df0:	07c1      	lsls	r1, r0, #31
   10df2:	2900      	cmp	r1, #0
   10df4:	d001      	beq.n	10dfa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
   10df6:	e7ff      	b.n	10df8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
   10df8:	e004      	b.n	10e04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10dfa:	f003 f904 	bl	14006 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10dfe:	9002      	str	r0, [sp, #8]
   10e00:	e009      	b.n	10e16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
   10e02:	defe      	udf	#254	; 0xfe
   10e04:	f002 f956 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10e08:	e7ff      	b.n	10e0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
   10e0a:	f004 fdb6 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10e0e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10e12:	e7ff      	b.n	10e14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
   10e14:	e017      	b.n	10e46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10e16:	f24f 317c 	movw	r1, #62332	; 0xf37c
   10e1a:	f2c0 0101 	movt	r1, #1
   10e1e:	f24f 33d8 	movw	r3, #62424	; 0xf3d8
   10e22:	f2c0 0301 	movt	r3, #1
   10e26:	220e      	movs	r2, #14
   10e28:	9802      	ldr	r0, [sp, #8]
   10e2a:	f7fe f9e5 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10e2e:	e7ff      	b.n	10e30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
   10e30:	2000      	movs	r0, #0
        Ok(())
   10e32:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   10e36:	e7c7      	b.n	10dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10e38:	2000      	movs	r0, #0
   10e3a:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e40:	f000 ff1d 	bl	11c7e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   10e44:	e7c0      	b.n	10dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10e46:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
   10e4a:	07c0      	lsls	r0, r0, #31
   10e4c:	2800      	cmp	r0, #0
   10e4e:	d1f3      	bne.n	10e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
   10e50:	e7ba      	b.n	10dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00010e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
   10e52:	b580      	push	{r7, lr}
   10e54:	b084      	sub	sp, #16
   10e56:	9001      	str	r0, [sp, #4]
   10e58:	9102      	str	r1, [sp, #8]
   10e5a:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
   10e5c:	4608      	mov	r0, r1
   10e5e:	4611      	mov	r1, r2
   10e60:	f003 f87f 	bl	13f62 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   10e64:	9000      	str	r0, [sp, #0]
   10e66:	e7ff      	b.n	10e68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
   10e68:	f24f 31e8 	movw	r1, #62440	; 0xf3e8
   10e6c:	f2c0 0101 	movt	r1, #1
   10e70:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
   10e74:	f2c0 0301 	movt	r3, #1
   10e78:	220d      	movs	r2, #13
   10e7a:	9800      	ldr	r0, [sp, #0]
   10e7c:	f7fe f9bc 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10e80:	e7ff      	b.n	10e82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
   10e82:	2000      	movs	r0, #0
    }
   10e84:	b004      	add	sp, #16
   10e86:	bd80      	pop	{r7, pc}

00010e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
   10e88:	b580      	push	{r7, lr}
   10e8a:	b088      	sub	sp, #32
   10e8c:	460a      	mov	r2, r1
   10e8e:	9006      	str	r0, [sp, #24]
   10e90:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
   10e94:	9004      	str	r0, [sp, #16]
   10e96:	4608      	mov	r0, r1
   10e98:	9203      	str	r2, [sp, #12]
   10e9a:	f000 feb9 	bl	11c10 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
   10e9e:	9002      	str	r0, [sp, #8]
   10ea0:	e7ff      	b.n	10ea2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
   10ea2:	9802      	ldr	r0, [sp, #8]
   10ea4:	f8ad 0016 	strh.w	r0, [sp, #22]
   10ea8:	e7ff      	b.n	10eaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
   10eaa:	f10d 0116 	add.w	r1, sp, #22
   10eae:	2202      	movs	r2, #2
        self.write_data(&bytes)
   10eb0:	9804      	ldr	r0, [sp, #16]
   10eb2:	f7ff ffce 	bl	10e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
   10eb6:	9001      	str	r0, [sp, #4]
   10eb8:	e7ff      	b.n	10eba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
   10eba:	9801      	ldr	r0, [sp, #4]
   10ebc:	f000 0001 	and.w	r0, r0, #1
   10ec0:	b008      	add	sp, #32
   10ec2:	bd80      	pop	{r7, pc}

00010ec4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   10ec4:	b580      	push	{r7, lr}
   10ec6:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
   10eca:	90a8      	str	r0, [sp, #672]	; 0x2a0
   10ecc:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   10ece:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
   10ed2:	2301      	movs	r3, #1
   10ed4:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
   10ed8:	232c      	movs	r3, #44	; 0x2c
   10eda:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   10ede:	920a      	str	r2, [sp, #40]	; 0x28
   10ee0:	9209      	str	r2, [sp, #36]	; 0x24
   10ee2:	9209      	str	r2, [sp, #36]	; 0x24
   10ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ee8:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
   10eec:	9007      	str	r0, [sp, #28]
   10eee:	9106      	str	r1, [sp, #24]
   10ef0:	4661      	mov	r1, ip
   10ef2:	f000 f898 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   10ef6:	9005      	str	r0, [sp, #20]
   10ef8:	e7ff      	b.n	10efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
   10efa:	9805      	ldr	r0, [sp, #20]
   10efc:	f000 0001 	and.w	r0, r0, #1
   10f00:	f7fe f9b3 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10f04:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   10f08:	e7ff      	b.n	10f0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
   10f0a:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   10f0e:	07c1      	lsls	r1, r0, #31
   10f10:	2900      	cmp	r1, #0
   10f12:	d001      	beq.n	10f18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
   10f14:	e7ff      	b.n	10f16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
   10f16:	e00e      	b.n	10f36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
   10f18:	2000      	movs	r0, #0
        for color in colors {
   10f1a:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   10f1e:	a83f      	add	r0, sp, #252	; 0xfc
   10f20:	22cc      	movs	r2, #204	; 0xcc
   10f22:	9004      	str	r0, [sp, #16]
   10f24:	9906      	ldr	r1, [sp, #24]
   10f26:	f00c f955 	bl	1d1d4 <__aeabi_memcpy>
   10f2a:	a80b      	add	r0, sp, #44	; 0x2c
   10f2c:	9904      	ldr	r1, [sp, #16]
   10f2e:	f004 f858 	bl	14fe2 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
   10f32:	e00e      	b.n	10f52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
   10f34:	defe      	udf	#254	; 0xfe
   10f36:	f002 f8bd 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10f3a:	e004      	b.n	10f46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
   10f3c:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   10f40:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
   10f44:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   10f46:	f004 fd18 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10f4a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   10f4e:	e7ff      	b.n	10f50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
   10f50:	e063      	b.n	1101a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
   10f52:	a872      	add	r0, sp, #456	; 0x1c8
   10f54:	a90b      	add	r1, sp, #44	; 0x2c
   10f56:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
   10f58:	f00c f93c 	bl	1d1d4 <__aeabi_memcpy>
   10f5c:	e7ff      	b.n	10f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
   10f5e:	a872      	add	r0, sp, #456	; 0x1c8
   10f60:	f004 f855 	bl	1500e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
   10f64:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
   10f68:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
   10f6c:	e7ff      	b.n	10f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
   10f6e:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
   10f72:	4601      	mov	r1, r0
   10f74:	2800      	cmp	r0, #0
   10f76:	d001      	beq.n	10f7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
   10f78:	e7ff      	b.n	10f7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
   10f7a:	e004      	b.n	10f86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
   10f7c:	a872      	add	r0, sp, #456	; 0x1c8
        }
   10f7e:	f000 fe9d 	bl	11cbc <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   10f82:	e02e      	b.n	10fe2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
   10f84:	defe      	udf	#254	; 0xfe
   10f86:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
   10f8a:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
   10f8e:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
   10f92:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
   10f96:	9907      	ldr	r1, [sp, #28]
   10f98:	9003      	str	r0, [sp, #12]
   10f9a:	4608      	mov	r0, r1
   10f9c:	9903      	ldr	r1, [sp, #12]
   10f9e:	f7ff ff73 	bl	10e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   10fa2:	9002      	str	r0, [sp, #8]
   10fa4:	e7ff      	b.n	10fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
   10fa6:	9802      	ldr	r0, [sp, #8]
   10fa8:	f000 0001 	and.w	r0, r0, #1
   10fac:	f7fe f95d 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10fb0:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
   10fb4:	e7ff      	b.n	10fb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
   10fb6:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
   10fba:	07c1      	lsls	r1, r0, #31
   10fbc:	2900      	cmp	r1, #0
   10fbe:	d001      	beq.n	10fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
   10fc0:	e7ff      	b.n	10fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
   10fc2:	e001      	b.n	10fc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
   10fc4:	e7cb      	b.n	10f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
   10fc6:	defe      	udf	#254	; 0xfe
   10fc8:	f002 f874 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10fcc:	e7ff      	b.n	10fce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
   10fce:	f004 fcd4 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10fd2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   10fd6:	e7ff      	b.n	10fd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
   10fd8:	a872      	add	r0, sp, #456	; 0x1c8
        }
   10fda:	f000 fe6f 	bl	11cbc <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   10fde:	e7ff      	b.n	10fe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
   10fe0:	e01b      	b.n	1101a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10fe2:	f003 f810 	bl	14006 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10fe6:	9001      	str	r0, [sp, #4]
   10fe8:	e7ff      	b.n	10fea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
   10fea:	f24f 317c 	movw	r1, #62332	; 0xf37c
   10fee:	f2c0 0101 	movt	r1, #1
   10ff2:	f24f 4308 	movw	r3, #62472	; 0xf408
   10ff6:	f2c0 0301 	movt	r3, #1
   10ffa:	220e      	movs	r2, #14
   10ffc:	9801      	ldr	r0, [sp, #4]
   10ffe:	f7fe f8fb 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11002:	e7ff      	b.n	11004 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
   11004:	2000      	movs	r0, #0
        Ok(())
   11006:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
   1100a:	e797      	b.n	10f3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   1100c:	2000      	movs	r0, #0
   1100e:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   11012:	9806      	ldr	r0, [sp, #24]
   11014:	f000 fe33 	bl	11c7e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11018:	e790      	b.n	10f3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   1101a:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
   1101e:	07c0      	lsls	r0, r0, #31
   11020:	2800      	cmp	r0, #0
   11022:	d1f3      	bne.n	1100c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
   11024:	e78a      	b.n	10f3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00011026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
   11026:	b580      	push	{r7, lr}
   11028:	b08e      	sub	sp, #56	; 0x38
   1102a:	468c      	mov	ip, r1
   1102c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
   11030:	920b      	str	r2, [sp, #44]	; 0x2c
   11032:	930c      	str	r3, [sp, #48]	; 0x30
   11034:	900d      	str	r0, [sp, #52]	; 0x34
   11036:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
   1103a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   1103e:	f000 fdbd 	bl	11bbc <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
   11042:	9008      	str	r0, [sp, #32]
   11044:	9107      	str	r1, [sp, #28]
   11046:	e7ff      	b.n	11048 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
   11048:	9808      	ldr	r0, [sp, #32]
   1104a:	f000 0001 	and.w	r0, r0, #1
   1104e:	f24f 4218 	movw	r2, #62488	; 0xf418
   11052:	f2c0 0201 	movt	r2, #1
   11056:	9907      	ldr	r1, [sp, #28]
   11058:	f003 fe12 	bl	14c80 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   1105c:	9006      	str	r0, [sp, #24]
   1105e:	e7ff      	b.n	11060 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
   11060:	9806      	ldr	r0, [sp, #24]
   11062:	f002 ff36 	bl	13ed2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
   11066:	9005      	str	r0, [sp, #20]
   11068:	e7ff      	b.n	1106a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
   1106a:	f24f 4128 	movw	r1, #62504	; 0xf428
   1106e:	f2c0 0101 	movt	r1, #1
   11072:	f24f 4334 	movw	r3, #62516	; 0xf434
   11076:	f2c0 0301 	movt	r3, #1
   1107a:	220c      	movs	r2, #12
   1107c:	9805      	ldr	r0, [sp, #20]
   1107e:	f7fe f8bb 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11082:	e7ff      	b.n	11084 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
   11084:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
   11086:	f003 fe56 	bl	14d36 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
   1108a:	9004      	str	r0, [sp, #16]
   1108c:	e7ff      	b.n	1108e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
   1108e:	9804      	ldr	r0, [sp, #16]
   11090:	07c1      	lsls	r1, r0, #31
   11092:	2900      	cmp	r1, #0
   11094:	d01f      	beq.n	110d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   11096:	e7ff      	b.n	11098 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
   11098:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1109a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1109c:	f24f 4244 	movw	r2, #62532	; 0xf444
   110a0:	f2c0 0201 	movt	r2, #1
   110a4:	f003 fe15 	bl	14cd2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
   110a8:	9003      	str	r0, [sp, #12]
   110aa:	9102      	str	r1, [sp, #8]
   110ac:	e7ff      	b.n	110ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
   110ae:	9803      	ldr	r0, [sp, #12]
   110b0:	9902      	ldr	r1, [sp, #8]
   110b2:	f002 ff56 	bl	13f62 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   110b6:	9001      	str	r0, [sp, #4]
   110b8:	e7ff      	b.n	110ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
   110ba:	f24f 31e8 	movw	r1, #62440	; 0xf3e8
   110be:	f2c0 0101 	movt	r1, #1
   110c2:	f24f 4354 	movw	r3, #62548	; 0xf454
   110c6:	f2c0 0301 	movt	r3, #1
   110ca:	220d      	movs	r2, #13
   110cc:	9801      	ldr	r0, [sp, #4]
   110ce:	f7fe f893 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   110d2:	e7ff      	b.n	110d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
   110d4:	e7ff      	b.n	110d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   110d6:	2000      	movs	r0, #0
    }
   110d8:	b00e      	add	sp, #56	; 0x38
   110da:	bd80      	pop	{r7, pc}

000110dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
   110dc:	b580      	push	{r7, lr}
   110de:	b098      	sub	sp, #96	; 0x60
   110e0:	9012      	str	r0, [sp, #72]	; 0x48
   110e2:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
   110e4:	7d02      	ldrb	r2, [r0, #20]
   110e6:	07d2      	lsls	r2, r2, #31
   110e8:	2a00      	cmp	r2, #0
   110ea:	910a      	str	r1, [sp, #40]	; 0x28
   110ec:	9009      	str	r0, [sp, #36]	; 0x24
   110ee:	d109      	bne.n	11104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
   110f0:	e7ff      	b.n	110f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
   110f2:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   110f4:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   110f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   110fa:	f7ff fd96 	bl	10c2a <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   110fe:	9008      	str	r0, [sp, #32]
   11100:	9107      	str	r1, [sp, #28]
   11102:	e044      	b.n	1118e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
   11104:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
   11106:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   1110a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1110c:	f7ff fd8d 	bl	10c2a <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   11110:	9006      	str	r0, [sp, #24]
   11112:	9105      	str	r1, [sp, #20]
   11114:	e7ff      	b.n	11116 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
   11116:	9806      	ldr	r0, [sp, #24]
   11118:	f000 0001 	and.w	r0, r0, #1
   1111c:	f24f 4264 	movw	r2, #62564	; 0xf464
   11120:	f2c0 0201 	movt	r2, #1
   11124:	9905      	ldr	r1, [sp, #20]
   11126:	f003 fdab 	bl	14c80 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   1112a:	9004      	str	r0, [sp, #16]
   1112c:	e7ff      	b.n	1112e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
   1112e:	9804      	ldr	r0, [sp, #16]
   11130:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11134:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   11138:	910c      	str	r1, [sp, #48]	; 0x30
   1113a:	2101      	movs	r1, #1
   1113c:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
   1113e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11142:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   11146:	9809      	ldr	r0, [sp, #36]	; 0x24
   11148:	f7ff ff6d 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1114c:	9003      	str	r0, [sp, #12]
   1114e:	e7ff      	b.n	11150 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
   11150:	9803      	ldr	r0, [sp, #12]
   11152:	f000 0001 	and.w	r0, r0, #1
   11156:	f7fe f888 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1115a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   1115e:	e7ff      	b.n	11160 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
   11160:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   11164:	07c1      	lsls	r1, r0, #31
   11166:	2900      	cmp	r1, #0
   11168:	d001      	beq.n	1116e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
   1116a:	e7ff      	b.n	1116c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
   1116c:	e001      	b.n	11172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
   1116e:	e047      	b.n	11200 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   11170:	defe      	udf	#254	; 0xfe
            ))?;
   11172:	f001 ff9f 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11176:	e003      	b.n	11180 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
   11178:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   1117c:	b018      	add	sp, #96	; 0x60
   1117e:	bd80      	pop	{r7, pc}
            ))?;
   11180:	f004 fbfb 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11184:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11188:	e7ff      	b.n	1118a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
   1118a:	e7ff      	b.n	1118c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   1118c:	e7f4      	b.n	11178 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   1118e:	9808      	ldr	r0, [sp, #32]
   11190:	f000 0001 	and.w	r0, r0, #1
   11194:	f24f 4274 	movw	r2, #62580	; 0xf474
   11198:	f2c0 0201 	movt	r2, #1
   1119c:	9907      	ldr	r1, [sp, #28]
   1119e:	f003 fd6f 	bl	14c80 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   111a2:	9002      	str	r0, [sp, #8]
   111a4:	e7ff      	b.n	111a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
   111a6:	9802      	ldr	r0, [sp, #8]
   111a8:	f040 0108 	orr.w	r1, r0, #8
   111ac:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   111b0:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   111b4:	910f      	str	r1, [sp, #60]	; 0x3c
   111b6:	2101      	movs	r1, #1
   111b8:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
   111ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   111bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   111be:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   111c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   111c4:	f7ff ff2f 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   111c8:	9001      	str	r0, [sp, #4]
   111ca:	e7ff      	b.n	111cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
   111cc:	9801      	ldr	r0, [sp, #4]
   111ce:	f000 0001 	and.w	r0, r0, #1
   111d2:	f7fe f84a 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   111d6:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   111da:	e7ff      	b.n	111dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
   111dc:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   111e0:	07c1      	lsls	r1, r0, #31
   111e2:	2900      	cmp	r1, #0
   111e4:	d001      	beq.n	111ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
   111e6:	e7ff      	b.n	111e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
   111e8:	e001      	b.n	111ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
   111ea:	e009      	b.n	11200 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   111ec:	defe      	udf	#254	; 0xfe
            ))?;
   111ee:	f001 ff61 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   111f2:	e7ff      	b.n	111f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
   111f4:	f004 fbc1 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   111f8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   111fc:	e7ff      	b.n	111fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
   111fe:	e7c5      	b.n	1118c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   11200:	2000      	movs	r0, #0
        Ok(())
   11202:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   11206:	e7b7      	b.n	11178 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00011208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
   11208:	b5b0      	push	{r4, r5, r7, lr}
   1120a:	b0a2      	sub	sp, #136	; 0x88
   1120c:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
   11210:	469e      	mov	lr, r3
   11212:	4614      	mov	r4, r2
   11214:	460d      	mov	r5, r1
   11216:	9015      	str	r0, [sp, #84]	; 0x54
   11218:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
   1121c:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
   11220:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   11224:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
   11228:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
   1122a:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   1122e:	2100      	movs	r1, #0
   11230:	9110      	str	r1, [sp, #64]	; 0x40
   11232:	910f      	str	r1, [sp, #60]	; 0x3c
   11234:	910f      	str	r1, [sp, #60]	; 0x3c
   11236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11238:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1123a:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   1123e:	900d      	str	r0, [sp, #52]	; 0x34
   11240:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   11244:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11248:	940a      	str	r4, [sp, #40]	; 0x28
   1124a:	9509      	str	r5, [sp, #36]	; 0x24
   1124c:	f7ff feeb 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11250:	9008      	str	r0, [sp, #32]
   11252:	e7ff      	b.n	11254 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
   11254:	9808      	ldr	r0, [sp, #32]
   11256:	f000 0001 	and.w	r0, r0, #1
   1125a:	f7fe f806 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1125e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   11262:	e7ff      	b.n	11264 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
   11264:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   11268:	07c1      	lsls	r1, r0, #31
   1126a:	2900      	cmp	r1, #0
   1126c:	d001      	beq.n	11272 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
   1126e:	e7ff      	b.n	11270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
   11270:	e00d      	b.n	1128e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
   11272:	980d      	ldr	r0, [sp, #52]	; 0x34
   11274:	8a01      	ldrh	r1, [r0, #16]
   11276:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11278:	fa11 f182 	uxtah	r1, r1, r2
   1127c:	b28b      	uxth	r3, r1
   1127e:	468c      	mov	ip, r1
   11280:	428b      	cmp	r3, r1
   11282:	f8cd c01c 	str.w	ip, [sp, #28]
   11286:	f040 80c2 	bne.w	1140e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
   1128a:	e00d      	b.n	112a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
   1128c:	defe      	udf	#254	; 0xfe
   1128e:	f001 ff11 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11292:	e003      	b.n	1129c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
   11294:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
   11298:	b022      	add	sp, #136	; 0x88
   1129a:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
   1129c:	f004 fb6d 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   112a0:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   112a4:	e7ff      	b.n	112a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
   112a6:	e7f5      	b.n	11294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   112a8:	980d      	ldr	r0, [sp, #52]	; 0x34
   112aa:	9907      	ldr	r1, [sp, #28]
   112ac:	f7ff fdec 	bl	10e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   112b0:	9006      	str	r0, [sp, #24]
   112b2:	e7ff      	b.n	112b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
   112b4:	9806      	ldr	r0, [sp, #24]
   112b6:	f000 0001 	and.w	r0, r0, #1
   112ba:	f7fd ffd6 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   112be:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   112c2:	e7ff      	b.n	112c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
   112c4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   112c8:	07c1      	lsls	r1, r0, #31
   112ca:	2900      	cmp	r1, #0
   112cc:	d001      	beq.n	112d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
   112ce:	e7ff      	b.n	112d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
   112d0:	e00d      	b.n	112ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
   112d2:	980d      	ldr	r0, [sp, #52]	; 0x34
   112d4:	8a01      	ldrh	r1, [r0, #16]
   112d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   112d8:	fa11 f182 	uxtah	r1, r1, r2
   112dc:	b28b      	uxth	r3, r1
   112de:	468c      	mov	ip, r1
   112e0:	428b      	cmp	r3, r1
   112e2:	f8cd c014 	str.w	ip, [sp, #20]
   112e6:	f040 809e 	bne.w	11426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
   112ea:	e009      	b.n	11300 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
   112ec:	defe      	udf	#254	; 0xfe
   112ee:	f001 fee1 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   112f2:	e7ff      	b.n	112f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
   112f4:	f004 fb41 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   112f8:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   112fc:	e7ff      	b.n	112fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
   112fe:	e7c9      	b.n	11294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
   11300:	980d      	ldr	r0, [sp, #52]	; 0x34
   11302:	9905      	ldr	r1, [sp, #20]
   11304:	f7ff fdc0 	bl	10e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11308:	9004      	str	r0, [sp, #16]
   1130a:	e7ff      	b.n	1130c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
   1130c:	9804      	ldr	r0, [sp, #16]
   1130e:	f000 0001 	and.w	r0, r0, #1
   11312:	f7fd ffaa 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11316:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
   1131a:	e7ff      	b.n	1131c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
   1131c:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   11320:	07c1      	lsls	r1, r0, #31
   11322:	2900      	cmp	r1, #0
   11324:	d001      	beq.n	1132a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
   11326:	e7ff      	b.n	11328 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
   11328:	e010      	b.n	1134c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
   1132a:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
   1132c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   11330:	2000      	movs	r0, #0
   11332:	9013      	str	r0, [sp, #76]	; 0x4c
   11334:	9012      	str	r0, [sp, #72]	; 0x48
   11336:	9012      	str	r0, [sp, #72]	; 0x48
   11338:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1133a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1133c:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
   11340:	980d      	ldr	r0, [sp, #52]	; 0x34
   11342:	f7ff fe70 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11346:	9003      	str	r0, [sp, #12]
   11348:	e009      	b.n	1135e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
   1134a:	defe      	udf	#254	; 0xfe
   1134c:	f001 feb2 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11350:	e7ff      	b.n	11352 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
   11352:	f004 fb12 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11356:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1135a:	e7ff      	b.n	1135c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
   1135c:	e79a      	b.n	11294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
   1135e:	9803      	ldr	r0, [sp, #12]
   11360:	f000 0001 	and.w	r0, r0, #1
   11364:	f7fd ff81 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11368:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
   1136c:	e7ff      	b.n	1136e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
   1136e:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
   11372:	07c1      	lsls	r1, r0, #31
   11374:	2900      	cmp	r1, #0
   11376:	d001      	beq.n	1137c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
   11378:	e7ff      	b.n	1137a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
   1137a:	e00c      	b.n	11396 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
   1137c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1137e:	8a41      	ldrh	r1, [r0, #18]
   11380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11382:	fa11 f182 	uxtah	r1, r1, r2
   11386:	b28b      	uxth	r3, r1
   11388:	468c      	mov	ip, r1
   1138a:	428b      	cmp	r3, r1
   1138c:	f8cd c008 	str.w	ip, [sp, #8]
   11390:	d155      	bne.n	1143e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
   11392:	e009      	b.n	113a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
   11394:	defe      	udf	#254	; 0xfe
   11396:	f001 fe8d 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1139a:	e7ff      	b.n	1139c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
   1139c:	f004 faed 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   113a0:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   113a4:	e7ff      	b.n	113a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
   113a6:	e775      	b.n	11294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
   113a8:	980d      	ldr	r0, [sp, #52]	; 0x34
   113aa:	9902      	ldr	r1, [sp, #8]
   113ac:	f7ff fd6c 	bl	10e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   113b0:	9001      	str	r0, [sp, #4]
   113b2:	e7ff      	b.n	113b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
   113b4:	9801      	ldr	r0, [sp, #4]
   113b6:	f000 0001 	and.w	r0, r0, #1
   113ba:	f7fd ff56 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   113be:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
   113c2:	e7ff      	b.n	113c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
   113c4:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
   113c8:	07c1      	lsls	r1, r0, #31
   113ca:	2900      	cmp	r1, #0
   113cc:	d001      	beq.n	113d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
   113ce:	e7ff      	b.n	113d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
   113d0:	e00c      	b.n	113ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
   113d2:	980d      	ldr	r0, [sp, #52]	; 0x34
   113d4:	8a41      	ldrh	r1, [r0, #18]
   113d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   113d8:	fa11 f182 	uxtah	r1, r1, r2
   113dc:	b28b      	uxth	r3, r1
   113de:	468c      	mov	ip, r1
   113e0:	428b      	cmp	r3, r1
   113e2:	f8cd c000 	str.w	ip, [sp]
   113e6:	d136      	bne.n	11456 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
   113e8:	e009      	b.n	113fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
   113ea:	defe      	udf	#254	; 0xfe
   113ec:	f001 fe62 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   113f0:	e7ff      	b.n	113f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
   113f2:	f004 fac2 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   113f6:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   113fa:	e7ff      	b.n	113fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
   113fc:	e74a      	b.n	11294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
   113fe:	980d      	ldr	r0, [sp, #52]	; 0x34
   11400:	9900      	ldr	r1, [sp, #0]
   11402:	f7ff fd41 	bl	10e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11406:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1140a:	e7ff      	b.n	1140c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
   1140c:	e742      	b.n	11294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   1140e:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
   11412:	f2c0 0001 	movt	r0, #1
   11416:	f24f 4284 	movw	r2, #62596	; 0xf484
   1141a:	f2c0 0201 	movt	r2, #1
   1141e:	211c      	movs	r1, #28
   11420:	f005 fb04 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11424:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
   11426:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
   1142a:	f2c0 0001 	movt	r0, #1
   1142e:	f24f 42bc 	movw	r2, #62652	; 0xf4bc
   11432:	f2c0 0201 	movt	r2, #1
   11436:	211c      	movs	r1, #28
   11438:	f005 faf8 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1143c:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
   1143e:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
   11442:	f2c0 0001 	movt	r0, #1
   11446:	f24f 42cc 	movw	r2, #62668	; 0xf4cc
   1144a:	f2c0 0201 	movt	r2, #1
   1144e:	211c      	movs	r1, #28
   11450:	f005 faec 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11454:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
   11456:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
   1145a:	f2c0 0001 	movt	r0, #1
   1145e:	f24f 42dc 	movw	r2, #62684	; 0xf4dc
   11462:	f2c0 0201 	movt	r2, #1
   11466:	211c      	movs	r1, #28
   11468:	f005 fae0 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1146c:	defe      	udf	#254	; 0xfe

0001146e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
   1146e:	b5b0      	push	{r4, r5, r7, lr}
   11470:	b08a      	sub	sp, #40	; 0x28
   11472:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   11476:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   1147a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1147c:	9106      	str	r1, [sp, #24]
   1147e:	9207      	str	r2, [sp, #28]
   11480:	9308      	str	r3, [sp, #32]
   11482:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
   11486:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
   1148a:	9100      	str	r1, [sp, #0]
   1148c:	9201      	str	r2, [sp, #4]
   1148e:	9302      	str	r3, [sp, #8]
   11490:	9403      	str	r4, [sp, #12]
   11492:	f88d e014 	strb.w	lr, [sp, #20]
   11496:	f88d c015 	strb.w	ip, [sp, #21]
   1149a:	2100      	movs	r1, #0
   1149c:	f8ad 1010 	strh.w	r1, [sp, #16]
   114a0:	f8ad 1012 	strh.w	r1, [sp, #18]
   114a4:	4669      	mov	r1, sp
        display
   114a6:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   114aa:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
   114ae:	b00a      	add	sp, #40	; 0x28
   114b0:	bdb0      	pop	{r4, r5, r7, pc}

000114b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
   114b2:	b580      	push	{r7, lr}
   114b4:	b0f6      	sub	sp, #472	; 0x1d8
   114b6:	904e      	str	r0, [sp, #312]	; 0x138
   114b8:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
   114ba:	9117      	str	r1, [sp, #92]	; 0x5c
   114bc:	9016      	str	r0, [sp, #88]	; 0x58
   114be:	f001 ffae 	bl	1341e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
   114c2:	9015      	str	r0, [sp, #84]	; 0x54
   114c4:	e7ff      	b.n	114c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
   114c6:	f24f 41ec 	movw	r1, #62700	; 0xf4ec
   114ca:	f2c0 0101 	movt	r1, #1
   114ce:	f24f 43fc 	movw	r3, #62716	; 0xf4fc
   114d2:	f2c0 0301 	movt	r3, #1
   114d6:	220d      	movs	r2, #13
   114d8:	9815      	ldr	r0, [sp, #84]	; 0x54
   114da:	f7fd fe8d 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   114de:	e7ff      	b.n	114e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
   114e0:	9816      	ldr	r0, [sp, #88]	; 0x58
   114e2:	f7ff fbbd 	bl	10c60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
   114e6:	9014      	str	r0, [sp, #80]	; 0x50
   114e8:	e7ff      	b.n	114ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
   114ea:	9814      	ldr	r0, [sp, #80]	; 0x50
   114ec:	f000 0001 	and.w	r0, r0, #1
   114f0:	f7fd febb 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   114f4:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   114f8:	e7ff      	b.n	114fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
   114fa:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
   114fe:	07c1      	lsls	r1, r0, #31
   11500:	2900      	cmp	r1, #0
   11502:	d001      	beq.n	11508 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
   11504:	e7ff      	b.n	11506 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
   11506:	e010      	b.n	1152a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
   11508:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
   1150a:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
   1150e:	2000      	movs	r0, #0
   11510:	901a      	str	r0, [sp, #104]	; 0x68
   11512:	9019      	str	r0, [sp, #100]	; 0x64
   11514:	9019      	str	r0, [sp, #100]	; 0x64
   11516:	9a19      	ldr	r2, [sp, #100]	; 0x64
   11518:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1151a:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
   1151e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11520:	f7ff fd81 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11524:	9013      	str	r0, [sp, #76]	; 0x4c
   11526:	e00d      	b.n	11544 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
   11528:	defe      	udf	#254	; 0xfe
   1152a:	f001 fdc3 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1152e:	e003      	b.n	11538 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
   11530:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   11534:	b076      	add	sp, #472	; 0x1d8
   11536:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
   11538:	f004 fa1f 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1153c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11540:	e7ff      	b.n	11542 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
   11542:	e7f5      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
   11544:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11546:	f000 0001 	and.w	r0, r0, #1
   1154a:	f7fd fe8e 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1154e:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
   11552:	e7ff      	b.n	11554 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
   11554:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   11558:	07c1      	lsls	r1, r0, #31
   1155a:	2900      	cmp	r1, #0
   1155c:	d001      	beq.n	11562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
   1155e:	e7ff      	b.n	11560 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
   11560:	e005      	b.n	1156e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
   11562:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11564:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11566:	f7fe fbb1 	bl	fccc <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1156a:	e009      	b.n	11580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
   1156c:	defe      	udf	#254	; 0xfe
   1156e:	f001 fda1 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11572:	e7ff      	b.n	11574 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
   11574:	f004 fa01 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11578:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1157c:	e7ff      	b.n	1157e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
   1157e:	e7d7      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   11580:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
   11582:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
   11586:	2000      	movs	r0, #0
   11588:	901d      	str	r0, [sp, #116]	; 0x74
   1158a:	901c      	str	r0, [sp, #112]	; 0x70
   1158c:	901c      	str	r0, [sp, #112]	; 0x70
   1158e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   11590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11592:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
   11596:	9816      	ldr	r0, [sp, #88]	; 0x58
   11598:	f7ff fd45 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1159c:	9012      	str	r0, [sp, #72]	; 0x48
   1159e:	e7ff      	b.n	115a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
   115a0:	9812      	ldr	r0, [sp, #72]	; 0x48
   115a2:	f000 0001 	and.w	r0, r0, #1
   115a6:	f7fd fe60 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   115aa:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
   115ae:	e7ff      	b.n	115b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
   115b0:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
   115b4:	07c1      	lsls	r1, r0, #31
   115b6:	2900      	cmp	r1, #0
   115b8:	d001      	beq.n	115be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
   115ba:	e7ff      	b.n	115bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
   115bc:	e005      	b.n	115ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
   115be:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   115c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
   115c2:	f7fe fb83 	bl	fccc <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   115c6:	e009      	b.n	115dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
   115c8:	defe      	udf	#254	; 0xfe
   115ca:	f001 fd73 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   115ce:	e7ff      	b.n	115d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
   115d0:	f004 f9d3 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   115d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   115d8:	e7ff      	b.n	115da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
   115da:	e7a9      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   115dc:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   115de:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
   115e2:	f24f 5010 	movw	r0, #62736	; 0xf510
   115e6:	f2c0 0001 	movt	r0, #1
   115ea:	6800      	ldr	r0, [r0, #0]
   115ec:	901f      	str	r0, [sp, #124]	; 0x7c
   115ee:	2003      	movs	r0, #3
   115f0:	9020      	str	r0, [sp, #128]	; 0x80
   115f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   115f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   115f6:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
   115fa:	9816      	ldr	r0, [sp, #88]	; 0x58
   115fc:	f7ff fd13 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11600:	9011      	str	r0, [sp, #68]	; 0x44
   11602:	e7ff      	b.n	11604 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
   11604:	9811      	ldr	r0, [sp, #68]	; 0x44
   11606:	f000 0001 	and.w	r0, r0, #1
   1160a:	f7fd fe2e 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1160e:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
   11612:	e7ff      	b.n	11614 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
   11614:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
   11618:	07c1      	lsls	r1, r0, #31
   1161a:	2900      	cmp	r1, #0
   1161c:	d001      	beq.n	11622 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
   1161e:	e7ff      	b.n	11620 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
   11620:	e014      	b.n	1164c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
   11622:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   11624:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   11628:	f24f 5010 	movw	r0, #62736	; 0xf510
   1162c:	f2c0 0001 	movt	r0, #1
   11630:	6800      	ldr	r0, [r0, #0]
   11632:	9022      	str	r0, [sp, #136]	; 0x88
   11634:	2003      	movs	r0, #3
   11636:	9023      	str	r0, [sp, #140]	; 0x8c
   11638:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1163a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1163c:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
   11640:	9816      	ldr	r0, [sp, #88]	; 0x58
   11642:	f7ff fcf0 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11646:	9010      	str	r0, [sp, #64]	; 0x40
   11648:	e009      	b.n	1165e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   1164a:	defe      	udf	#254	; 0xfe
   1164c:	f001 fd32 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11650:	e7ff      	b.n	11652 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
   11652:	f004 f992 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11656:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1165a:	e7ff      	b.n	1165c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
   1165c:	e768      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   1165e:	9810      	ldr	r0, [sp, #64]	; 0x40
   11660:	f000 0001 	and.w	r0, r0, #1
   11664:	f7fd fe01 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11668:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
   1166c:	e7ff      	b.n	1166e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
   1166e:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
   11672:	07c1      	lsls	r1, r0, #31
   11674:	2900      	cmp	r1, #0
   11676:	d001      	beq.n	1167c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
   11678:	e7ff      	b.n	1167a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
   1167a:	e014      	b.n	116a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
   1167c:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
   1167e:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11682:	f24f 501c 	movw	r0, #62748	; 0xf51c
   11686:	f2c0 0001 	movt	r0, #1
   1168a:	6800      	ldr	r0, [r0, #0]
   1168c:	9025      	str	r0, [sp, #148]	; 0x94
   1168e:	2006      	movs	r0, #6
   11690:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
   11692:	9a25      	ldr	r2, [sp, #148]	; 0x94
   11694:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11696:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   1169a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1169c:	f7ff fcc3 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   116a0:	900f      	str	r0, [sp, #60]	; 0x3c
   116a2:	e009      	b.n	116b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   116a4:	defe      	udf	#254	; 0xfe
   116a6:	f001 fd05 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   116aa:	e7ff      	b.n	116ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
   116ac:	f004 f965 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   116b0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   116b4:	e7ff      	b.n	116b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
   116b6:	e73b      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
   116b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   116ba:	f000 0001 	and.w	r0, r0, #1
   116be:	f7fd fdd4 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   116c2:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
   116c6:	e7ff      	b.n	116c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   116c8:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
   116cc:	07c1      	lsls	r1, r0, #31
   116ce:	2900      	cmp	r1, #0
   116d0:	d001      	beq.n	116d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
   116d2:	e7ff      	b.n	116d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
   116d4:	e014      	b.n	11700 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
   116d6:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   116d8:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
   116dc:	f24f 5024 	movw	r0, #62756	; 0xf524
   116e0:	f2c0 0001 	movt	r0, #1
   116e4:	6800      	ldr	r0, [r0, #0]
   116e6:	9028      	str	r0, [sp, #160]	; 0xa0
   116e8:	2001      	movs	r0, #1
   116ea:	9029      	str	r0, [sp, #164]	; 0xa4
   116ec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   116ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   116f0:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
   116f4:	9816      	ldr	r0, [sp, #88]	; 0x58
   116f6:	f7ff fc96 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   116fa:	900e      	str	r0, [sp, #56]	; 0x38
   116fc:	e009      	b.n	11712 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
   116fe:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11700:	f001 fcd8 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11704:	e7ff      	b.n	11706 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
   11706:	f004 f938 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1170a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1170e:	e7ff      	b.n	11710 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
   11710:	e70e      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   11712:	980e      	ldr	r0, [sp, #56]	; 0x38
   11714:	f000 0001 	and.w	r0, r0, #1
   11718:	f7fd fda7 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1171c:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
   11720:	e7ff      	b.n	11722 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
   11722:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
   11726:	07c1      	lsls	r1, r0, #31
   11728:	2900      	cmp	r1, #0
   1172a:	d001      	beq.n	11730 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
   1172c:	e7ff      	b.n	1172e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
   1172e:	e014      	b.n	1175a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
   11730:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   11732:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
   11736:	f24f 502c 	movw	r0, #62764	; 0xf52c
   1173a:	f2c0 0001 	movt	r0, #1
   1173e:	6800      	ldr	r0, [r0, #0]
   11740:	902b      	str	r0, [sp, #172]	; 0xac
   11742:	2003      	movs	r0, #3
   11744:	902c      	str	r0, [sp, #176]	; 0xb0
   11746:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   11748:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1174a:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
   1174e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11750:	f7ff fc69 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11754:	900d      	str	r0, [sp, #52]	; 0x34
   11756:	e009      	b.n	1176c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   11758:	defe      	udf	#254	; 0xfe
   1175a:	f001 fcab 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1175e:	e7ff      	b.n	11760 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
   11760:	f004 f90b 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11764:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11768:	e7ff      	b.n	1176a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
   1176a:	e6e1      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   1176c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1176e:	f000 0001 	and.w	r0, r0, #1
   11772:	f7fd fd7a 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11776:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
   1177a:	e7ff      	b.n	1177c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
   1177c:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
   11780:	07c1      	lsls	r1, r0, #31
   11782:	2900      	cmp	r1, #0
   11784:	d001      	beq.n	1178a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
   11786:	e7ff      	b.n	11788 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
   11788:	e014      	b.n	117b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
   1178a:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   1178c:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
   11790:	f24f 5034 	movw	r0, #62772	; 0xf534
   11794:	f2c0 0001 	movt	r0, #1
   11798:	6800      	ldr	r0, [r0, #0]
   1179a:	902e      	str	r0, [sp, #184]	; 0xb8
   1179c:	2001      	movs	r0, #1
   1179e:	902f      	str	r0, [sp, #188]	; 0xbc
   117a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   117a2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   117a4:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
   117a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   117aa:	f7ff fc3c 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   117ae:	900c      	str	r0, [sp, #48]	; 0x30
   117b0:	e009      	b.n	117c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   117b2:	defe      	udf	#254	; 0xfe
   117b4:	f001 fc7e 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   117b8:	e7ff      	b.n	117ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
   117ba:	f004 f8de 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   117be:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   117c2:	e7ff      	b.n	117c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
   117c4:	e6b4      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   117c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   117c8:	f000 0001 	and.w	r0, r0, #1
   117cc:	f7fd fd4d 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   117d0:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
   117d4:	e7ff      	b.n	117d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
   117d6:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
   117da:	07c1      	lsls	r1, r0, #31
   117dc:	2900      	cmp	r1, #0
   117de:	d001      	beq.n	117e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
   117e0:	e7ff      	b.n	117e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
   117e2:	e014      	b.n	1180e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
   117e4:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   117e6:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
   117ea:	f24f 503c 	movw	r0, #62780	; 0xf53c
   117ee:	f2c0 0001 	movt	r0, #1
   117f2:	6800      	ldr	r0, [r0, #0]
   117f4:	9031      	str	r0, [sp, #196]	; 0xc4
   117f6:	2002      	movs	r0, #2
   117f8:	9032      	str	r0, [sp, #200]	; 0xc8
   117fa:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   117fc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   117fe:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
   11802:	9816      	ldr	r0, [sp, #88]	; 0x58
   11804:	f7ff fc0f 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11808:	900b      	str	r0, [sp, #44]	; 0x2c
   1180a:	e009      	b.n	11820 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   1180c:	defe      	udf	#254	; 0xfe
   1180e:	f001 fc51 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11812:	e7ff      	b.n	11814 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
   11814:	f004 f8b1 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11818:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1181c:	e7ff      	b.n	1181e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
   1181e:	e687      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   11820:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11822:	f000 0001 	and.w	r0, r0, #1
   11826:	f7fd fd20 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1182a:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
   1182e:	e7ff      	b.n	11830 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
   11830:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
   11834:	07c1      	lsls	r1, r0, #31
   11836:	2900      	cmp	r1, #0
   11838:	d001      	beq.n	1183e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
   1183a:	e7ff      	b.n	1183c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
   1183c:	e014      	b.n	11868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
   1183e:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11840:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
   11844:	f24f 5044 	movw	r0, #62788	; 0xf544
   11848:	f2c0 0001 	movt	r0, #1
   1184c:	6800      	ldr	r0, [r0, #0]
   1184e:	9034      	str	r0, [sp, #208]	; 0xd0
   11850:	2002      	movs	r0, #2
   11852:	9035      	str	r0, [sp, #212]	; 0xd4
   11854:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   11856:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   11858:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
   1185c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1185e:	f7ff fbe2 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11862:	900a      	str	r0, [sp, #40]	; 0x28
   11864:	e009      	b.n	1187a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   11866:	defe      	udf	#254	; 0xfe
   11868:	f001 fc24 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1186c:	e7ff      	b.n	1186e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
   1186e:	f004 f884 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11872:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11876:	e7ff      	b.n	11878 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
   11878:	e65a      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   1187a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1187c:	f000 0001 	and.w	r0, r0, #1
   11880:	f7fd fcf3 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11884:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
   11888:	e7ff      	b.n	1188a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
   1188a:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
   1188e:	07c1      	lsls	r1, r0, #31
   11890:	2900      	cmp	r1, #0
   11892:	d001      	beq.n	11898 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
   11894:	e7ff      	b.n	11896 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
   11896:	e014      	b.n	118c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
   11898:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   1189a:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
   1189e:	f24f 504c 	movw	r0, #62796	; 0xf54c
   118a2:	f2c0 0001 	movt	r0, #1
   118a6:	6800      	ldr	r0, [r0, #0]
   118a8:	9037      	str	r0, [sp, #220]	; 0xdc
   118aa:	2002      	movs	r0, #2
   118ac:	9038      	str	r0, [sp, #224]	; 0xe0
   118ae:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   118b0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   118b2:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
   118b6:	9816      	ldr	r0, [sp, #88]	; 0x58
   118b8:	f7ff fbb5 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   118bc:	9009      	str	r0, [sp, #36]	; 0x24
   118be:	e009      	b.n	118d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   118c0:	defe      	udf	#254	; 0xfe
   118c2:	f001 fbf7 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   118c6:	e7ff      	b.n	118c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
   118c8:	f004 f857 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   118cc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   118d0:	e7ff      	b.n	118d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
   118d2:	e62d      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   118d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   118d6:	f000 0001 	and.w	r0, r0, #1
   118da:	f7fd fcc6 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   118de:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
   118e2:	e7ff      	b.n	118e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
   118e4:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
   118e8:	07c1      	lsls	r1, r0, #31
   118ea:	2900      	cmp	r1, #0
   118ec:	d001      	beq.n	118f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
   118ee:	e7ff      	b.n	118f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
   118f0:	e014      	b.n	1191c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
   118f2:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   118f4:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   118f8:	f24f 5054 	movw	r0, #62804	; 0xf554
   118fc:	f2c0 0001 	movt	r0, #1
   11900:	6800      	ldr	r0, [r0, #0]
   11902:	903a      	str	r0, [sp, #232]	; 0xe8
   11904:	2001      	movs	r0, #1
   11906:	903b      	str	r0, [sp, #236]	; 0xec
   11908:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   1190a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   1190c:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
   11910:	9816      	ldr	r0, [sp, #88]	; 0x58
   11912:	f7ff fb88 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11916:	9008      	str	r0, [sp, #32]
   11918:	e009      	b.n	1192e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   1191a:	defe      	udf	#254	; 0xfe
   1191c:	f001 fbca 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11920:	e7ff      	b.n	11922 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
   11922:	f004 f82a 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11926:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1192a:	e7ff      	b.n	1192c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
   1192c:	e600      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   1192e:	9808      	ldr	r0, [sp, #32]
   11930:	f000 0001 	and.w	r0, r0, #1
   11934:	f7fd fc99 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11938:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
   1193c:	e7ff      	b.n	1193e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
   1193e:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
   11942:	07c1      	lsls	r1, r0, #31
   11944:	2900      	cmp	r1, #0
   11946:	d001      	beq.n	1194c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
   11948:	e7ff      	b.n	1194a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
   1194a:	e006      	b.n	1195a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
   1194c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1194e:	7d41      	ldrb	r1, [r0, #21]
   11950:	07c9      	lsls	r1, r1, #31
   11952:	2900      	cmp	r1, #0
   11954:	d11a      	bne.n	1198c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
   11956:	e009      	b.n	1196c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   11958:	defe      	udf	#254	; 0xfe
   1195a:	f001 fbab 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1195e:	e7ff      	b.n	11960 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
   11960:	f004 f80b 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11964:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11968:	e7ff      	b.n	1196a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
   1196a:	e5e1      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   1196c:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
   1196e:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   11972:	2000      	movs	r0, #0
   11974:	9041      	str	r0, [sp, #260]	; 0x104
   11976:	9040      	str	r0, [sp, #256]	; 0x100
   11978:	9040      	str	r0, [sp, #256]	; 0x100
   1197a:	9a40      	ldr	r2, [sp, #256]	; 0x100
   1197c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1197e:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
   11982:	9816      	ldr	r0, [sp, #88]	; 0x58
   11984:	f7ff fb4f 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11988:	9007      	str	r0, [sp, #28]
   1198a:	e02a      	b.n	119e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
   1198c:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
   1198e:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
   11992:	2000      	movs	r0, #0
   11994:	903e      	str	r0, [sp, #248]	; 0xf8
   11996:	903d      	str	r0, [sp, #244]	; 0xf4
   11998:	903d      	str	r0, [sp, #244]	; 0xf4
   1199a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
   1199c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   1199e:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
   119a2:	9816      	ldr	r0, [sp, #88]	; 0x58
   119a4:	f7ff fb3f 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   119a8:	9006      	str	r0, [sp, #24]
   119aa:	e7ff      	b.n	119ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
   119ac:	9806      	ldr	r0, [sp, #24]
   119ae:	f000 0001 	and.w	r0, r0, #1
   119b2:	f7fd fc5a 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   119b6:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
   119ba:	e7ff      	b.n	119bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
   119bc:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
   119c0:	07c1      	lsls	r1, r0, #31
   119c2:	2900      	cmp	r1, #0
   119c4:	d001      	beq.n	119ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
   119c6:	e7ff      	b.n	119c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
   119c8:	e001      	b.n	119ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
   119ca:	e024      	b.n	11a16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
   119cc:	defe      	udf	#254	; 0xfe
   119ce:	f001 fb71 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   119d2:	e7ff      	b.n	119d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
   119d4:	f003 ffd1 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   119d8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   119dc:	e7ff      	b.n	119de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
   119de:	e7ff      	b.n	119e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
   119e0:	e5a6      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
   119e2:	9807      	ldr	r0, [sp, #28]
   119e4:	f000 0001 	and.w	r0, r0, #1
   119e8:	f7fd fc3f 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   119ec:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
   119f0:	e7ff      	b.n	119f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
   119f2:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
   119f6:	07c1      	lsls	r1, r0, #31
   119f8:	2900      	cmp	r1, #0
   119fa:	d001      	beq.n	11a00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
   119fc:	e7ff      	b.n	119fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
   119fe:	e001      	b.n	11a04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
   11a00:	e009      	b.n	11a16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
   11a02:	defe      	udf	#254	; 0xfe
   11a04:	f001 fb56 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a08:	e7ff      	b.n	11a0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
   11a0a:	f003 ffb6 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a0e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a12:	e7ff      	b.n	11a14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
   11a14:	e7e4      	b.n	119e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
   11a16:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a18:	7d01      	ldrb	r1, [r0, #20]
   11a1a:	07c9      	lsls	r1, r1, #31
   11a1c:	2900      	cmp	r1, #0
   11a1e:	d114      	bne.n	11a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
   11a20:	e7ff      	b.n	11a22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
   11a22:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11a24:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
   11a28:	f24f 5064 	movw	r0, #62820	; 0xf564
   11a2c:	f2c0 0001 	movt	r0, #1
   11a30:	6800      	ldr	r0, [r0, #0]
   11a32:	9046      	str	r0, [sp, #280]	; 0x118
   11a34:	2001      	movs	r0, #1
   11a36:	9047      	str	r0, [sp, #284]	; 0x11c
   11a38:	9a46      	ldr	r2, [sp, #280]	; 0x118
   11a3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   11a3c:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
   11a40:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a42:	f7ff faf0 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a46:	9005      	str	r0, [sp, #20]
   11a48:	e02e      	b.n	11aa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
   11a4a:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11a4c:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
   11a50:	f24f 505c 	movw	r0, #62812	; 0xf55c
   11a54:	f2c0 0001 	movt	r0, #1
   11a58:	6800      	ldr	r0, [r0, #0]
   11a5a:	9043      	str	r0, [sp, #268]	; 0x10c
   11a5c:	2001      	movs	r0, #1
   11a5e:	9044      	str	r0, [sp, #272]	; 0x110
   11a60:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   11a62:	9b44      	ldr	r3, [sp, #272]	; 0x110
   11a64:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
   11a68:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a6a:	f7ff fadc 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a6e:	9004      	str	r0, [sp, #16]
   11a70:	e7ff      	b.n	11a72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
   11a72:	9804      	ldr	r0, [sp, #16]
   11a74:	f000 0001 	and.w	r0, r0, #1
   11a78:	f7fd fbf7 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a7c:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
   11a80:	e7ff      	b.n	11a82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
   11a82:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
   11a86:	07c1      	lsls	r1, r0, #31
   11a88:	2900      	cmp	r1, #0
   11a8a:	d001      	beq.n	11a90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
   11a8c:	e7ff      	b.n	11a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
   11a8e:	e001      	b.n	11a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
   11a90:	e024      	b.n	11adc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11a92:	defe      	udf	#254	; 0xfe
   11a94:	f001 fb0e 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a98:	e7ff      	b.n	11a9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
   11a9a:	f003 ff6e 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a9e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11aa2:	e7ff      	b.n	11aa4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
   11aa4:	e7ff      	b.n	11aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11aa6:	e543      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11aa8:	9805      	ldr	r0, [sp, #20]
   11aaa:	f000 0001 	and.w	r0, r0, #1
   11aae:	f7fd fbdc 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11ab2:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
   11ab6:	e7ff      	b.n	11ab8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
   11ab8:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
   11abc:	07c1      	lsls	r1, r0, #31
   11abe:	2900      	cmp	r1, #0
   11ac0:	d001      	beq.n	11ac6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
   11ac2:	e7ff      	b.n	11ac4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
   11ac4:	e001      	b.n	11aca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
   11ac6:	e009      	b.n	11adc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11ac8:	defe      	udf	#254	; 0xfe
   11aca:	f001 faf3 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11ace:	e7ff      	b.n	11ad0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
   11ad0:	f003 ff53 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11ad4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11ad8:	e7ff      	b.n	11ada <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
   11ada:	e7e4      	b.n	11aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11adc:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11ade:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
   11ae2:	f24f 506c 	movw	r0, #62828	; 0xf56c
   11ae6:	f2c0 0001 	movt	r0, #1
   11aea:	6800      	ldr	r0, [r0, #0]
   11aec:	9049      	str	r0, [sp, #292]	; 0x124
   11aee:	2001      	movs	r0, #1
   11af0:	904a      	str	r0, [sp, #296]	; 0x128
   11af2:	9a49      	ldr	r2, [sp, #292]	; 0x124
   11af4:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   11af6:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
   11afa:	9816      	ldr	r0, [sp, #88]	; 0x58
   11afc:	f7ff fa93 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11b00:	9003      	str	r0, [sp, #12]
   11b02:	e7ff      	b.n	11b04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
   11b04:	9803      	ldr	r0, [sp, #12]
   11b06:	f000 0001 	and.w	r0, r0, #1
   11b0a:	f7fd fbae 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11b0e:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
   11b12:	e7ff      	b.n	11b14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
   11b14:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
   11b18:	07c1      	lsls	r1, r0, #31
   11b1a:	2900      	cmp	r1, #0
   11b1c:	d001      	beq.n	11b22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
   11b1e:	e7ff      	b.n	11b20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
   11b20:	e010      	b.n	11b44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
   11b22:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
   11b24:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
   11b28:	2000      	movs	r0, #0
   11b2a:	904d      	str	r0, [sp, #308]	; 0x134
   11b2c:	904c      	str	r0, [sp, #304]	; 0x130
   11b2e:	904c      	str	r0, [sp, #304]	; 0x130
   11b30:	9a4c      	ldr	r2, [sp, #304]	; 0x130
   11b32:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   11b34:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
   11b38:	9816      	ldr	r0, [sp, #88]	; 0x58
   11b3a:	f7ff fa74 	bl	11026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11b3e:	9002      	str	r0, [sp, #8]
   11b40:	e009      	b.n	11b56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11b42:	defe      	udf	#254	; 0xfe
   11b44:	f001 fab6 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b48:	e7ff      	b.n	11b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
   11b4a:	f003 ff16 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b4e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b52:	e7ff      	b.n	11b54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
   11b54:	e4ec      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
   11b56:	9802      	ldr	r0, [sp, #8]
   11b58:	f000 0001 	and.w	r0, r0, #1
   11b5c:	f7fd fb85 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11b60:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
   11b64:	e7ff      	b.n	11b66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
   11b66:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
   11b6a:	07c1      	lsls	r1, r0, #31
   11b6c:	2900      	cmp	r1, #0
   11b6e:	d001      	beq.n	11b74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
   11b70:	e7ff      	b.n	11b72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
   11b72:	e005      	b.n	11b80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
   11b74:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11b76:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11b78:	f7fe f8a8 	bl	fccc <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   11b7c:	e009      	b.n	11b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
   11b7e:	defe      	udf	#254	; 0xfe
   11b80:	f001 fa98 	bl	130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b84:	e7ff      	b.n	11b86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
   11b86:	f003 fef8 	bl	1597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b8a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b8e:	e7ff      	b.n	11b90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
   11b90:	e4ce      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   11b92:	f002 fa38 	bl	14006 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   11b96:	9001      	str	r0, [sp, #4]
   11b98:	e7ff      	b.n	11b9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
   11b9a:	f24f 317c 	movw	r1, #62332	; 0xf37c
   11b9e:	f2c0 0101 	movt	r1, #1
   11ba2:	f24f 5370 	movw	r3, #62832	; 0xf570
   11ba6:	f2c0 0301 	movt	r3, #1
   11baa:	220e      	movs	r2, #14
   11bac:	9801      	ldr	r0, [sp, #4]
   11bae:	f7fd fb23 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11bb2:	e7ff      	b.n	11bb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
   11bb4:	2000      	movs	r0, #0
        Ok(())
   11bb6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
   11bba:	e4b9      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

00011bbc <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
   11bbc:	b580      	push	{r7, lr}
   11bbe:	b08a      	sub	sp, #40	; 0x28
   11bc0:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   11bc2:	f000 fe3c 	bl	1283e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
   11bc6:	9307      	str	r3, [sp, #28]
   11bc8:	9206      	str	r2, [sp, #24]
   11bca:	9105      	str	r1, [sp, #20]
   11bcc:	9004      	str	r0, [sp, #16]
   11bce:	e7ff      	b.n	11bd0 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
   11bd0:	a804      	add	r0, sp, #16
   11bd2:	f003 f813 	bl	14bfc <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   11bd6:	9003      	str	r0, [sp, #12]
   11bd8:	e7ff      	b.n	11bda <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
   11bda:	9803      	ldr	r0, [sp, #12]
   11bdc:	f003 f8e1 	bl	14da2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   11be0:	9002      	str	r0, [sp, #8]
   11be2:	9101      	str	r1, [sp, #4]
   11be4:	e7ff      	b.n	11be6 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
   11be6:	9802      	ldr	r0, [sp, #8]
   11be8:	f000 0001 	and.w	r0, r0, #1
   11bec:	9901      	ldr	r1, [sp, #4]
   11bee:	b00a      	add	sp, #40	; 0x28
   11bf0:	bd80      	pop	{r7, pc}

00011bf2 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
   11bf2:	b082      	sub	sp, #8
   11bf4:	4601      	mov	r1, r0
   11bf6:	f8ad 0004 	strh.w	r0, [sp, #4]
   11bfa:	ba00      	rev	r0, r0
   11bfc:	0c00      	lsrs	r0, r0, #16
   11bfe:	f8ad 0006 	strh.w	r0, [sp, #6]
   11c02:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   11c06:	9000      	str	r0, [sp, #0]
   11c08:	e7ff      	b.n	11c0a <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
   11c0a:	9800      	ldr	r0, [sp, #0]
   11c0c:	b002      	add	sp, #8
   11c0e:	4770      	bx	lr

00011c10 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
   11c10:	b580      	push	{r7, lr}
   11c12:	b084      	sub	sp, #16
   11c14:	4601      	mov	r1, r0
   11c16:	f8ad 000e 	strh.w	r0, [sp, #14]
   11c1a:	9102      	str	r1, [sp, #8]
   11c1c:	f7ff ffe9 	bl	11bf2 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
   11c20:	9001      	str	r0, [sp, #4]
   11c22:	e7ff      	b.n	11c24 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
   11c24:	9801      	ldr	r0, [sp, #4]
   11c26:	b004      	add	sp, #16
   11c28:	bd80      	pop	{r7, pc}

00011c2a <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
   11c2a:	b580      	push	{r7, lr}
   11c2c:	b084      	sub	sp, #16
   11c2e:	9002      	str	r0, [sp, #8]
   11c30:	9802      	ldr	r0, [sp, #8]
   11c32:	f002 ff47 	bl	14ac4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
   11c36:	9001      	str	r0, [sp, #4]
   11c38:	9100      	str	r1, [sp, #0]
   11c3a:	e7ff      	b.n	11c3c <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
   11c3c:	9801      	ldr	r0, [sp, #4]
   11c3e:	f000 0001 	and.w	r0, r0, #1
   11c42:	9900      	ldr	r1, [sp, #0]
   11c44:	b004      	add	sp, #16
   11c46:	bd80      	pop	{r7, pc}

00011c48 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
   11c48:	b081      	sub	sp, #4
   11c4a:	9000      	str	r0, [sp, #0]
   11c4c:	b001      	add	sp, #4
   11c4e:	4770      	bx	lr

00011c50 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
   11c50:	b580      	push	{r7, lr}
   11c52:	b082      	sub	sp, #8
   11c54:	9001      	str	r0, [sp, #4]
   11c56:	f000 f83e 	bl	11cd6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11c5a:	e7ff      	b.n	11c5c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
   11c5c:	b002      	add	sp, #8
   11c5e:	bd80      	pop	{r7, pc}

00011c60 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
   11c60:	b580      	push	{r7, lr}
   11c62:	b082      	sub	sp, #8
   11c64:	9001      	str	r0, [sp, #4]
   11c66:	6801      	ldr	r1, [r0, #0]
   11c68:	2900      	cmp	r1, #0
   11c6a:	9000      	str	r0, [sp, #0]
   11c6c:	d102      	bne.n	11c74 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
   11c6e:	e7ff      	b.n	11c70 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
   11c70:	b002      	add	sp, #8
   11c72:	bd80      	pop	{r7, pc}
   11c74:	9800      	ldr	r0, [sp, #0]
   11c76:	3004      	adds	r0, #4
   11c78:	f7ff ffea 	bl	11c50 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
   11c7c:	e7f8      	b.n	11c70 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

00011c7e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
   11c7e:	b580      	push	{r7, lr}
   11c80:	b082      	sub	sp, #8
   11c82:	9001      	str	r0, [sp, #4]
   11c84:	f003 f908 	bl	14e98 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
   11c88:	e7ff      	b.n	11c8a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
   11c8a:	b002      	add	sp, #8
   11c8c:	bd80      	pop	{r7, pc}

00011c8e <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
   11c8e:	b580      	push	{r7, lr}
   11c90:	b082      	sub	sp, #8
   11c92:	9001      	str	r0, [sp, #4]
   11c94:	3024      	adds	r0, #36	; 0x24
   11c96:	f000 f81e 	bl	11cd6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11c9a:	e7ff      	b.n	11c9c <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
   11c9c:	b002      	add	sp, #8
   11c9e:	bd80      	pop	{r7, pc}

00011ca0 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
   11ca0:	b580      	push	{r7, lr}
   11ca2:	b082      	sub	sp, #8
   11ca4:	9001      	str	r0, [sp, #4]
   11ca6:	9000      	str	r0, [sp, #0]
   11ca8:	f7ff fff1 	bl	11c8e <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
   11cac:	e001      	b.n	11cb2 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
   11cae:	b002      	add	sp, #8
   11cb0:	bd80      	pop	{r7, pc}
   11cb2:	9800      	ldr	r0, [sp, #0]
   11cb4:	3094      	adds	r0, #148	; 0x94
   11cb6:	f7ff ffe2 	bl	11c7e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11cba:	e7f8      	b.n	11cae <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

00011cbc <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
   11cbc:	b580      	push	{r7, lr}
   11cbe:	b082      	sub	sp, #8
   11cc0:	9001      	str	r0, [sp, #4]
   11cc2:	9000      	str	r0, [sp, #0]
   11cc4:	f003 f910 	bl	14ee8 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
   11cc8:	e001      	b.n	11cce <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
   11cca:	b002      	add	sp, #8
   11ccc:	bd80      	pop	{r7, pc}
   11cce:	9800      	ldr	r0, [sp, #0]
   11cd0:	f7ff ffd5 	bl	11c7e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11cd4:	e7f9      	b.n	11cca <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

00011cd6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
   11cd6:	b580      	push	{r7, lr}
   11cd8:	b082      	sub	sp, #8
   11cda:	9001      	str	r0, [sp, #4]
   11cdc:	f003 f8cc 	bl	14e78 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
   11ce0:	e7ff      	b.n	11ce2 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
   11ce2:	b002      	add	sp, #8
   11ce4:	bd80      	pop	{r7, pc}

00011ce6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
   11ce6:	b580      	push	{r7, lr}
   11ce8:	b082      	sub	sp, #8
   11cea:	9001      	str	r0, [sp, #4]
   11cec:	6801      	ldr	r1, [r0, #0]
   11cee:	2900      	cmp	r1, #0
   11cf0:	9000      	str	r0, [sp, #0]
   11cf2:	d102      	bne.n	11cfa <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
   11cf4:	e7ff      	b.n	11cf6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
   11cf6:	b002      	add	sp, #8
   11cf8:	bd80      	pop	{r7, pc}
   11cfa:	9800      	ldr	r0, [sp, #0]
   11cfc:	3004      	adds	r0, #4
   11cfe:	f000 f805 	bl	11d0c <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
   11d02:	e7f8      	b.n	11cf6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

00011d04 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
   11d04:	b081      	sub	sp, #4
   11d06:	9000      	str	r0, [sp, #0]
   11d08:	b001      	add	sp, #4
   11d0a:	4770      	bx	lr

00011d0c <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
   11d0c:	b580      	push	{r7, lr}
   11d0e:	b082      	sub	sp, #8
   11d10:	9001      	str	r0, [sp, #4]
   11d12:	f7ff ffb4 	bl	11c7e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11d16:	e7ff      	b.n	11d18 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
   11d18:	b002      	add	sp, #8
   11d1a:	bd80      	pop	{r7, pc}

00011d1c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
   11d1c:	b089      	sub	sp, #36	; 0x24
   11d1e:	9005      	str	r0, [sp, #20]
   11d20:	9106      	str	r1, [sp, #24]
   11d22:	9107      	str	r1, [sp, #28]
   11d24:	9907      	ldr	r1, [sp, #28]
   11d26:	9002      	str	r0, [sp, #8]
   11d28:	9101      	str	r1, [sp, #4]
   11d2a:	e7ff      	b.n	11d2c <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
   11d2c:	9802      	ldr	r0, [sp, #8]
   11d2e:	9008      	str	r0, [sp, #32]
   11d30:	9908      	ldr	r1, [sp, #32]
   11d32:	9100      	str	r1, [sp, #0]
   11d34:	e7ff      	b.n	11d36 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
   11d36:	9800      	ldr	r0, [sp, #0]
   11d38:	9003      	str	r0, [sp, #12]
   11d3a:	9901      	ldr	r1, [sp, #4]
   11d3c:	9104      	str	r1, [sp, #16]
   11d3e:	9803      	ldr	r0, [sp, #12]
   11d40:	9904      	ldr	r1, [sp, #16]
   11d42:	b009      	add	sp, #36	; 0x24
   11d44:	4770      	bx	lr

00011d46 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11d46:	b580      	push	{r7, lr}
        (&self).into_iter()
   11d48:	f000 f814 	bl	11d74 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   11d4c:	e7ff      	b.n	11d4e <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   11d4e:	bd80      	pop	{r7, pc}

00011d50 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   11d50:	b5b0      	push	{r4, r5, r7, lr}
   11d52:	b081      	sub	sp, #4
   11d54:	469c      	mov	ip, r3
   11d56:	4696      	mov	lr, r2
   11d58:	f8ad 2000 	strh.w	r2, [sp]
   11d5c:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   11d60:	820a      	strh	r2, [r1, #16]
   11d62:	824b      	strh	r3, [r1, #18]
        self
   11d64:	c91c      	ldmia	r1!, {r2, r3, r4}
   11d66:	c01c      	stmia	r0!, {r2, r3, r4}
   11d68:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   11d6c:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   11d70:	b001      	add	sp, #4
   11d72:	bdb0      	pop	{r4, r5, r7, pc}

00011d74 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11d74:	b570      	push	{r4, r5, r6, lr}
   11d76:	b08e      	sub	sp, #56	; 0x38
   11d78:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   11d7a:	680a      	ldr	r2, [r1, #0]
   11d7c:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   11d7e:	f8d1 c008 	ldr.w	ip, [r1, #8]
   11d82:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   11d86:	8b0c      	ldrh	r4, [r1, #24]
   11d88:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   11d8c:	690c      	ldr	r4, [r1, #16]
   11d8e:	694d      	ldr	r5, [r1, #20]
   11d90:	950b      	str	r5, [sp, #44]	; 0x2c
   11d92:	940a      	str	r4, [sp, #40]	; 0x28
   11d94:	2400      	movs	r4, #0
            x: self.top_left[0],
   11d96:	9009      	str	r0, [sp, #36]	; 0x24
   11d98:	4608      	mov	r0, r1
   11d9a:	9108      	str	r1, [sp, #32]
   11d9c:	4621      	mov	r1, r4
   11d9e:	9207      	str	r2, [sp, #28]
   11da0:	9306      	str	r3, [sp, #24]
   11da2:	f8cd c014 	str.w	ip, [sp, #20]
   11da6:	f8cd e010 	str.w	lr, [sp, #16]
   11daa:	f7fc fac9 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11dae:	9003      	str	r0, [sp, #12]
   11db0:	e7ff      	b.n	11db2 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   11db2:	9803      	ldr	r0, [sp, #12]
   11db4:	6801      	ldr	r1, [r0, #0]
   11db6:	2201      	movs	r2, #1
            y: self.top_left[1],
   11db8:	9808      	ldr	r0, [sp, #32]
   11dba:	9102      	str	r1, [sp, #8]
   11dbc:	4611      	mov	r1, r2
   11dbe:	f7fc fabf 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11dc2:	9001      	str	r0, [sp, #4]
   11dc4:	e7ff      	b.n	11dc6 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   11dc6:	9801      	ldr	r0, [sp, #4]
   11dc8:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   11dca:	9a07      	ldr	r2, [sp, #28]
   11dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11dce:	601a      	str	r2, [r3, #0]
   11dd0:	f8dd c018 	ldr.w	ip, [sp, #24]
   11dd4:	f8c3 c004 	str.w	ip, [r3, #4]
   11dd8:	f8dd e014 	ldr.w	lr, [sp, #20]
   11ddc:	f8c3 e008 	str.w	lr, [r3, #8]
   11de0:	9c04      	ldr	r4, [sp, #16]
   11de2:	60dc      	str	r4, [r3, #12]
   11de4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11de8:	841d      	strh	r5, [r3, #32]
   11dea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11dec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11dee:	61de      	str	r6, [r3, #28]
   11df0:	619d      	str	r5, [r3, #24]
   11df2:	9d02      	ldr	r5, [sp, #8]
   11df4:	611d      	str	r5, [r3, #16]
   11df6:	6159      	str	r1, [r3, #20]
        }
    }
   11df8:	b00e      	add	sp, #56	; 0x38
   11dfa:	bd70      	pop	{r4, r5, r6, pc}

00011dfc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   11dfc:	b510      	push	{r4, lr}
   11dfe:	b0d2      	sub	sp, #328	; 0x148
   11e00:	914f      	str	r1, [sp, #316]	; 0x13c
   11e02:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e04:	902a      	str	r0, [sp, #168]	; 0xa8
   11e06:	4608      	mov	r0, r1
   11e08:	9129      	str	r1, [sp, #164]	; 0xa4
   11e0a:	4611      	mov	r1, r2
   11e0c:	f7fc fa98 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e10:	9028      	str	r0, [sp, #160]	; 0xa0
   11e12:	e03c      	b.n	11e8e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   11e14:	2001      	movs	r0, #1
   11e16:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11e1a:	e009      	b.n	11e30 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   11e1c:	2000      	movs	r0, #0
   11e1e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11e22:	e005      	b.n	11e30 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11e24:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e26:	301c      	adds	r0, #28
   11e28:	f002 ff79 	bl	14d1e <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11e2c:	9027      	str	r0, [sp, #156]	; 0x9c
   11e2e:	e06c      	b.n	11f0a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e30:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   11e34:	07c0      	lsls	r0, r0, #31
   11e36:	2800      	cmp	r0, #0
   11e38:	d172      	bne.n	11f20 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   11e3a:	e070      	b.n	11f1e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   11e3c:	2001      	movs	r0, #1
   11e3e:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11e42:	e00a      	b.n	11e5a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   11e44:	2000      	movs	r0, #0
   11e46:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11e4a:	e006      	b.n	11e5a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11e4c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e4e:	3008      	adds	r0, #8
   11e50:	2100      	movs	r1, #0
   11e52:	f7fc fa75 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e56:	9026      	str	r0, [sp, #152]	; 0x98
   11e58:	e038      	b.n	11ecc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e5a:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   11e5e:	07c0      	lsls	r0, r0, #31
   11e60:	2800      	cmp	r0, #0
   11e62:	d1d7      	bne.n	11e14 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11e64:	e7de      	b.n	11e24 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   11e66:	2001      	movs	r0, #1
   11e68:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11e6c:	e009      	b.n	11e82 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11e6e:	2000      	movs	r0, #0
   11e70:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11e74:	e005      	b.n	11e82 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11e76:	2101      	movs	r1, #1
   11e78:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e7a:	f7fc fa61 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e7e:	9025      	str	r0, [sp, #148]	; 0x94
   11e80:	e00a      	b.n	11e98 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   11e82:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   11e86:	07c0      	lsls	r0, r0, #31
   11e88:	2800      	cmp	r0, #0
   11e8a:	d1df      	bne.n	11e4c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   11e8c:	e7da      	b.n	11e44 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   11e8e:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11e90:	6801      	ldr	r1, [r0, #0]
   11e92:	2900      	cmp	r1, #0
   11e94:	d4e7      	bmi.n	11e66 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11e96:	e7ee      	b.n	11e76 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   11e98:	9825      	ldr	r0, [sp, #148]	; 0x94
   11e9a:	6801      	ldr	r1, [r0, #0]
   11e9c:	2900      	cmp	r1, #0
   11e9e:	d4e2      	bmi.n	11e66 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11ea0:	e7e5      	b.n	11e6e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   11ea2:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11ea4:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11ea8:	e00a      	b.n	11ec0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11eaa:	2000      	movs	r0, #0
   11eac:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11eb0:	e006      	b.n	11ec0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11eb2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11eb4:	3008      	adds	r0, #8
   11eb6:	2101      	movs	r1, #1
   11eb8:	f7fc fa42 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11ebc:	9024      	str	r0, [sp, #144]	; 0x90
   11ebe:	e00a      	b.n	11ed6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11ec0:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   11ec4:	07c0      	lsls	r0, r0, #31
   11ec6:	2800      	cmp	r0, #0
   11ec8:	d1b8      	bne.n	11e3c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   11eca:	e7bb      	b.n	11e44 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11ecc:	9826      	ldr	r0, [sp, #152]	; 0x98
   11ece:	6801      	ldr	r1, [r0, #0]
   11ed0:	2900      	cmp	r1, #0
   11ed2:	d4e6      	bmi.n	11ea2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11ed4:	e7ed      	b.n	11eb2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   11ed6:	9824      	ldr	r0, [sp, #144]	; 0x90
   11ed8:	6801      	ldr	r1, [r0, #0]
   11eda:	2900      	cmp	r1, #0
   11edc:	d4e1      	bmi.n	11ea2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11ede:	e7e4      	b.n	11eaa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   11ee0:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11ee2:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11ee6:	e009      	b.n	11efc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11ee8:	2000      	movs	r0, #0
   11eea:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11eee:	e005      	b.n	11efc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11ef0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11ef2:	3018      	adds	r0, #24
   11ef4:	f002 ff13 	bl	14d1e <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11ef8:	9023      	str	r0, [sp, #140]	; 0x8c
   11efa:	e00b      	b.n	11f14 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11efc:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   11f00:	07c0      	lsls	r0, r0, #31
   11f02:	2800      	cmp	r0, #0
   11f04:	f47f af86 	bne.w	11e14 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11f08:	e788      	b.n	11e1c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11f0a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   11f0c:	07c1      	lsls	r1, r0, #31
   11f0e:	2900      	cmp	r1, #0
   11f10:	d1ee      	bne.n	11ef0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   11f12:	e7e9      	b.n	11ee8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   11f14:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11f16:	07c1      	lsls	r1, r0, #31
   11f18:	2900      	cmp	r1, #0
   11f1a:	d1e1      	bne.n	11ee0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   11f1c:	e7e4      	b.n	11ee8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   11f1e:	e012      	b.n	11f46 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   11f20:	2000      	movs	r0, #0
            return None;
   11f22:	992a      	ldr	r1, [sp, #168]	; 0xa8
   11f24:	6008      	str	r0, [r1, #0]
   11f26:	e7ff      	b.n	11f28 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   11f28:	b052      	add	sp, #328	; 0x148
   11f2a:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   11f2c:	982d      	ldr	r0, [sp, #180]	; 0xb4
   11f2e:	992e      	ldr	r1, [sp, #184]	; 0xb8
   11f30:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   11f32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   11f34:	934d      	str	r3, [sp, #308]	; 0x134
   11f36:	924c      	str	r2, [sp, #304]	; 0x130
   11f38:	914b      	str	r1, [sp, #300]	; 0x12c
   11f3a:	904a      	str	r0, [sp, #296]	; 0x128
   11f3c:	a94a      	add	r1, sp, #296	; 0x128
   11f3e:	982a      	ldr	r0, [sp, #168]	; 0xa8
   11f40:	f002 fdff 	bl	14b42 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   11f44:	e201      	b.n	1234a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   11f46:	2000      	movs	r0, #0
            let mut out = None;
   11f48:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   11f4a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f4c:	6941      	ldr	r1, [r0, #20]
   11f4e:	3008      	adds	r0, #8
   11f50:	2201      	movs	r2, #1
   11f52:	9122      	str	r1, [sp, #136]	; 0x88
   11f54:	4611      	mov	r1, r2
   11f56:	f7fc f9f3 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f5a:	9021      	str	r0, [sp, #132]	; 0x84
   11f5c:	e7ff      	b.n	11f5e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   11f5e:	9821      	ldr	r0, [sp, #132]	; 0x84
   11f60:	6801      	ldr	r1, [r0, #0]
   11f62:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11f64:	428a      	cmp	r2, r1
   11f66:	dc13      	bgt.n	11f90 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   11f68:	e7ff      	b.n	11f6a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   11f6a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f6c:	f890 1020 	ldrb.w	r1, [r0, #32]
   11f70:	460a      	mov	r2, r1
   11f72:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   11f74:	6801      	ldr	r1, [r0, #0]
   11f76:	6843      	ldr	r3, [r0, #4]
   11f78:	9135      	str	r1, [sp, #212]	; 0xd4
   11f7a:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   11f7c:	6881      	ldr	r1, [r0, #8]
   11f7e:	68c3      	ldr	r3, [r0, #12]
   11f80:	9137      	str	r1, [sp, #220]	; 0xdc
   11f82:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   11f84:	6901      	ldr	r1, [r0, #16]
   11f86:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11f8a:	9220      	str	r2, [sp, #128]	; 0x80
   11f8c:	dc0b      	bgt.n	11fa6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   11f8e:	e006      	b.n	11f9e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   11f90:	2000      	movs	r0, #0
                break None;
   11f92:	902d      	str	r0, [sp, #180]	; 0xb4
   11f94:	e7ca      	b.n	11f2c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   11f96:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   11f98:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11f9c:	e009      	b.n	11fb2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   11f9e:	2000      	movs	r0, #0
   11fa0:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11fa4:	e005      	b.n	11fb2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   11fa6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fa8:	6941      	ldr	r1, [r0, #20]
   11faa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11fae:	dcf2      	bgt.n	11f96 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   11fb0:	e7f5      	b.n	11f9e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   11fb2:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   11fb6:	07c0      	lsls	r0, r0, #31
   11fb8:	2800      	cmp	r0, #0
   11fba:	f000 8182 	beq.w	122c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   11fbe:	e7ff      	b.n	11fc0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11fc0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fc2:	6941      	ldr	r1, [r0, #20]
   11fc4:	a835      	add	r0, sp, #212	; 0xd4
   11fc6:	2201      	movs	r2, #1
   11fc8:	911f      	str	r1, [sp, #124]	; 0x7c
   11fca:	4611      	mov	r1, r2
   11fcc:	f7fc f9b8 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11fd0:	901e      	str	r0, [sp, #120]	; 0x78
   11fd2:	e074      	b.n	120be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   11fd4:	2001      	movs	r0, #1
                if (
   11fd6:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   11fda:	e009      	b.n	11ff0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   11fdc:	2000      	movs	r0, #0
   11fde:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   11fe2:	e005      	b.n	11ff0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   11fe4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fe6:	301c      	adds	r0, #28
   11fe8:	f002 fec9 	bl	14d7e <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   11fec:	901d      	str	r0, [sp, #116]	; 0x74
   11fee:	e104      	b.n	121fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   11ff0:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   11ff4:	07c0      	lsls	r0, r0, #31
   11ff6:	2800      	cmp	r0, #0
   11ff8:	f040 810a 	bne.w	12210 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   11ffc:	e103      	b.n	12206 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   11ffe:	2001      	movs	r0, #1
   12000:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   12004:	e00d      	b.n	12022 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   12006:	2000      	movs	r0, #0
   12008:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   1200c:	e009      	b.n	12022 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1200e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12010:	6901      	ldr	r1, [r0, #16]
   12012:	a837      	add	r0, sp, #220	; 0xdc
   12014:	2200      	movs	r2, #0
   12016:	911c      	str	r1, [sp, #112]	; 0x70
   12018:	4611      	mov	r1, r2
   1201a:	f7fc f991 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1201e:	901b      	str	r0, [sp, #108]	; 0x6c
   12020:	e0d7      	b.n	121d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   12022:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   12026:	07c0      	lsls	r0, r0, #31
   12028:	2800      	cmp	r0, #0
   1202a:	d1db      	bne.n	11fe4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   1202c:	e7d6      	b.n	11fdc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   1202e:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12030:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   12034:	e00d      	b.n	12052 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   12036:	2000      	movs	r0, #0
   12038:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   1203c:	e009      	b.n	12052 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1203e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12040:	6901      	ldr	r1, [r0, #16]
   12042:	a835      	add	r0, sp, #212	; 0xd4
   12044:	2200      	movs	r2, #0
   12046:	911a      	str	r1, [sp, #104]	; 0x68
   12048:	4611      	mov	r1, r2
   1204a:	f7fc f979 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1204e:	9019      	str	r0, [sp, #100]	; 0x64
   12050:	e090      	b.n	12174 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   12052:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   12056:	07c0      	lsls	r0, r0, #31
   12058:	2800      	cmp	r0, #0
   1205a:	d1d0      	bne.n	11ffe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   1205c:	e7d7      	b.n	1200e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   1205e:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12060:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   12064:	e00d      	b.n	12082 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   12066:	2000      	movs	r0, #0
   12068:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   1206c:	e009      	b.n	12082 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1206e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12070:	6941      	ldr	r1, [r0, #20]
   12072:	a837      	add	r0, sp, #220	; 0xdc
   12074:	2201      	movs	r2, #1
   12076:	9118      	str	r1, [sp, #96]	; 0x60
   12078:	4611      	mov	r1, r2
   1207a:	f7fc f961 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1207e:	9017      	str	r0, [sp, #92]	; 0x5c
   12080:	e04b      	b.n	1211a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12082:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   12086:	07c0      	lsls	r0, r0, #31
   12088:	2800      	cmp	r0, #0
   1208a:	d1d0      	bne.n	1202e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   1208c:	e7d7      	b.n	1203e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   1208e:	2001      	movs	r0, #1
   12090:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   12094:	e00d      	b.n	120b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   12096:	2000      	movs	r0, #0
   12098:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   1209c:	e009      	b.n	120b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1209e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120a0:	6941      	ldr	r1, [r0, #20]
   120a2:	a835      	add	r0, sp, #212	; 0xd4
   120a4:	2201      	movs	r2, #1
   120a6:	9116      	str	r1, [sp, #88]	; 0x58
   120a8:	4611      	mov	r1, r2
   120aa:	f7fc f949 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   120ae:	9015      	str	r0, [sp, #84]	; 0x54
   120b0:	e00b      	b.n	120ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   120b2:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   120b6:	07c0      	lsls	r0, r0, #31
   120b8:	2800      	cmp	r0, #0
   120ba:	d1d0      	bne.n	1205e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   120bc:	e7d7      	b.n	1206e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   120be:	981e      	ldr	r0, [sp, #120]	; 0x78
   120c0:	6801      	ldr	r1, [r0, #0]
   120c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   120c4:	428a      	cmp	r2, r1
   120c6:	daea      	bge.n	1209e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   120c8:	e7e5      	b.n	12096 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   120ca:	9815      	ldr	r0, [sp, #84]	; 0x54
   120cc:	6801      	ldr	r1, [r0, #0]
   120ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
   120d0:	188b      	adds	r3, r1, r2
   120d2:	469c      	mov	ip, r3
   120d4:	428b      	cmp	r3, r1
   120d6:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   120da:	f180 8137 	bvs.w	1234c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   120de:	e7ff      	b.n	120e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   120e0:	9816      	ldr	r0, [sp, #88]	; 0x58
   120e2:	9914      	ldr	r1, [sp, #80]	; 0x50
   120e4:	4288      	cmp	r0, r1
   120e6:	dbd2      	blt.n	1208e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   120e8:	e7d5      	b.n	12096 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   120ea:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   120ec:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   120f0:	e00d      	b.n	1210e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   120f2:	2000      	movs	r0, #0
   120f4:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   120f8:	e009      	b.n	1210e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   120fa:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120fc:	6941      	ldr	r1, [r0, #20]
   120fe:	a837      	add	r0, sp, #220	; 0xdc
   12100:	2201      	movs	r2, #1
   12102:	9113      	str	r1, [sp, #76]	; 0x4c
   12104:	4611      	mov	r1, r2
   12106:	f7fc f91b 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1210a:	9012      	str	r0, [sp, #72]	; 0x48
   1210c:	e00b      	b.n	12126 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1210e:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   12112:	07c0      	lsls	r0, r0, #31
   12114:	2800      	cmp	r0, #0
   12116:	d1a2      	bne.n	1205e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   12118:	e7a5      	b.n	12066 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1211a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1211c:	6801      	ldr	r1, [r0, #0]
   1211e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12120:	428a      	cmp	r2, r1
   12122:	ddea      	ble.n	120fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   12124:	e7e5      	b.n	120f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   12126:	9812      	ldr	r0, [sp, #72]	; 0x48
   12128:	6801      	ldr	r1, [r0, #0]
   1212a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1212c:	1a8b      	subs	r3, r1, r2
   1212e:	4291      	cmp	r1, r2
   12130:	9311      	str	r3, [sp, #68]	; 0x44
   12132:	f180 8117 	bvs.w	12364 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   12136:	e7ff      	b.n	12138 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   12138:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1213a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1213c:	4288      	cmp	r0, r1
   1213e:	dcd4      	bgt.n	120ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   12140:	e7d7      	b.n	120f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   12142:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   12144:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   12148:	e00d      	b.n	12166 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   1214a:	2000      	movs	r0, #0
   1214c:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   12150:	e009      	b.n	12166 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   12152:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12154:	6901      	ldr	r1, [r0, #16]
   12156:	a835      	add	r0, sp, #212	; 0xd4
   12158:	2200      	movs	r2, #0
   1215a:	9110      	str	r1, [sp, #64]	; 0x40
   1215c:	4611      	mov	r1, r2
   1215e:	f7fc f8ef 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12162:	900f      	str	r0, [sp, #60]	; 0x3c
   12164:	e00c      	b.n	12180 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12166:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   1216a:	07c0      	lsls	r0, r0, #31
   1216c:	2800      	cmp	r0, #0
   1216e:	f47f af5e 	bne.w	1202e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   12172:	e760      	b.n	12036 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   12174:	9819      	ldr	r0, [sp, #100]	; 0x64
   12176:	6801      	ldr	r1, [r0, #0]
   12178:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1217a:	428a      	cmp	r2, r1
   1217c:	dae9      	bge.n	12152 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   1217e:	e7e4      	b.n	1214a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   12180:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12182:	6801      	ldr	r1, [r0, #0]
   12184:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12186:	188b      	adds	r3, r1, r2
   12188:	469c      	mov	ip, r3
   1218a:	428b      	cmp	r3, r1
   1218c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   12190:	f180 80f4 	bvs.w	1237c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   12194:	e7ff      	b.n	12196 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   12196:	9810      	ldr	r0, [sp, #64]	; 0x40
   12198:	990e      	ldr	r1, [sp, #56]	; 0x38
   1219a:	4288      	cmp	r0, r1
   1219c:	dbd1      	blt.n	12142 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   1219e:	e7d4      	b.n	1214a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   121a0:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   121a2:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   121a6:	e00d      	b.n	121c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   121a8:	2000      	movs	r0, #0
   121aa:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   121ae:	e009      	b.n	121c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   121b0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121b2:	6901      	ldr	r1, [r0, #16]
   121b4:	a837      	add	r0, sp, #220	; 0xdc
   121b6:	2200      	movs	r2, #0
   121b8:	910d      	str	r1, [sp, #52]	; 0x34
   121ba:	4611      	mov	r1, r2
   121bc:	f7fc f8c0 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   121c0:	900c      	str	r0, [sp, #48]	; 0x30
   121c2:	e00c      	b.n	121de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   121c4:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   121c8:	07c0      	lsls	r0, r0, #31
   121ca:	2800      	cmp	r0, #0
   121cc:	f47f af17 	bne.w	11ffe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   121d0:	e719      	b.n	12006 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   121d2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   121d4:	6801      	ldr	r1, [r0, #0]
   121d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   121d8:	428a      	cmp	r2, r1
   121da:	dde9      	ble.n	121b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   121dc:	e7e4      	b.n	121a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   121de:	980c      	ldr	r0, [sp, #48]	; 0x30
   121e0:	6801      	ldr	r1, [r0, #0]
   121e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   121e4:	1a8b      	subs	r3, r1, r2
   121e6:	4291      	cmp	r1, r2
   121e8:	930b      	str	r3, [sp, #44]	; 0x2c
   121ea:	f180 80d3 	bvs.w	12394 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   121ee:	e7ff      	b.n	121f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   121f0:	980d      	ldr	r0, [sp, #52]	; 0x34
   121f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   121f4:	4288      	cmp	r0, r1
   121f6:	dcd3      	bgt.n	121a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   121f8:	e7d6      	b.n	121a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   121fa:	981d      	ldr	r0, [sp, #116]	; 0x74
   121fc:	07c1      	lsls	r1, r0, #31
   121fe:	2900      	cmp	r1, #0
   12200:	f47f aee8 	bne.w	11fd4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   12204:	e6ea      	b.n	11fdc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   12206:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12208:	8b01      	ldrh	r1, [r0, #24]
   1220a:	2901      	cmp	r1, #1
   1220c:	d03b      	beq.n	12286 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   1220e:	e057      	b.n	122c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   12210:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12212:	6901      	ldr	r1, [r0, #16]
                        self.y,
   12214:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   12216:	8bc3      	ldrh	r3, [r0, #30]
   12218:	8b80      	ldrh	r0, [r0, #28]
   1221a:	f24f 6c84 	movw	ip, #63108	; 0xf684
   1221e:	f2c0 0c01 	movt	ip, #1
   12222:	46ee      	mov	lr, sp
   12224:	f8ce c000 	str.w	ip, [lr]
   12228:	f24f 6c74 	movw	ip, #63092	; 0xf674
   1222c:	f2c0 0c01 	movt	ip, #1
   12230:	f04f 0e0f 	mov.w	lr, #15
   12234:	910a      	str	r1, [sp, #40]	; 0x28
   12236:	4619      	mov	r1, r3
   12238:	9209      	str	r2, [sp, #36]	; 0x24
   1223a:	4662      	mov	r2, ip
   1223c:	4673      	mov	r3, lr
   1223e:	f002 fcf2 	bl	14c26 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   12242:	9008      	str	r0, [sp, #32]
   12244:	e7ff      	b.n	12246 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   12246:	980a      	ldr	r0, [sp, #40]	; 0x28
   12248:	9040      	str	r0, [sp, #256]	; 0x100
   1224a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1224c:	9141      	str	r1, [sp, #260]	; 0x104
   1224e:	9a08      	ldr	r2, [sp, #32]
   12250:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   12254:	9b40      	ldr	r3, [sp, #256]	; 0x100
   12256:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   1225a:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   1225e:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   12262:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   12266:	933d      	str	r3, [sp, #244]	; 0xf4
   12268:	2301      	movs	r3, #1
   1226a:	933c      	str	r3, [sp, #240]	; 0xf0
   1226c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   1226e:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   12272:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   12276:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   12278:	9434      	str	r4, [sp, #208]	; 0xd0
   1227a:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   1227e:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   12282:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   12284:	e01c      	b.n	122c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   12286:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12288:	8b41      	ldrh	r1, [r0, #26]
   1228a:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   1228e:	6902      	ldr	r2, [r0, #16]
   12290:	6943      	ldr	r3, [r0, #20]
   12292:	9247      	str	r2, [sp, #284]	; 0x11c
   12294:	9348      	str	r3, [sp, #288]	; 0x120
   12296:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   1229a:	9947      	ldr	r1, [sp, #284]	; 0x11c
   1229c:	9a48      	ldr	r2, [sp, #288]	; 0x120
   1229e:	9b49      	ldr	r3, [sp, #292]	; 0x124
   122a0:	9346      	str	r3, [sp, #280]	; 0x118
   122a2:	9245      	str	r2, [sp, #276]	; 0x114
   122a4:	9144      	str	r1, [sp, #272]	; 0x110
   122a6:	2101      	movs	r1, #1
   122a8:	9143      	str	r1, [sp, #268]	; 0x10c
   122aa:	9943      	ldr	r1, [sp, #268]	; 0x10c
   122ac:	9a44      	ldr	r2, [sp, #272]	; 0x110
   122ae:	9b45      	ldr	r3, [sp, #276]	; 0x114
   122b0:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   122b4:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   122b8:	9333      	str	r3, [sp, #204]	; 0xcc
   122ba:	9232      	str	r2, [sp, #200]	; 0xc8
   122bc:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   122be:	e7ff      	b.n	122c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   122c0:	e7ff      	b.n	122c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   122c2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   122c4:	6901      	ldr	r1, [r0, #16]
   122c6:	1c4a      	adds	r2, r1, #1
   122c8:	4613      	mov	r3, r2
   122ca:	428a      	cmp	r2, r1
   122cc:	9307      	str	r3, [sp, #28]
   122ce:	d66d      	bvs.n	123ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   122d0:	e7ff      	b.n	122d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   122d2:	9807      	ldr	r0, [sp, #28]
   122d4:	9929      	ldr	r1, [sp, #164]	; 0xa4
   122d6:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   122d8:	690a      	ldr	r2, [r1, #16]
   122da:	f101 0008 	add.w	r0, r1, #8
   122de:	2100      	movs	r1, #0
   122e0:	9206      	str	r2, [sp, #24]
   122e2:	f7fc f82d 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   122e6:	9005      	str	r0, [sp, #20]
   122e8:	e7ff      	b.n	122ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   122ea:	9805      	ldr	r0, [sp, #20]
   122ec:	6801      	ldr	r1, [r0, #0]
   122ee:	9a06      	ldr	r2, [sp, #24]
   122f0:	428a      	cmp	r2, r1
   122f2:	dd16      	ble.n	12322 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   122f4:	e7ff      	b.n	122f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   122f6:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   122f8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   122fa:	f7fc f821 	bl	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   122fe:	9004      	str	r0, [sp, #16]
   12300:	e7ff      	b.n	12302 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   12302:	9804      	ldr	r0, [sp, #16]
   12304:	6801      	ldr	r1, [r0, #0]
   12306:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12308:	6111      	str	r1, [r2, #16]
                self.y += 1;
   1230a:	6951      	ldr	r1, [r2, #20]
   1230c:	1c4b      	adds	r3, r1, #1
   1230e:	469c      	mov	ip, r3
   12310:	428b      	cmp	r3, r1
   12312:	f8cd c00c 	str.w	ip, [sp, #12]
   12316:	d655      	bvs.n	123c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   12318:	e7ff      	b.n	1231a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   1231a:	9803      	ldr	r0, [sp, #12]
   1231c:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1231e:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   12320:	e7ff      	b.n	12322 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   12322:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   12324:	f002 fd19 	bl	14d5a <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   12328:	9002      	str	r0, [sp, #8]
   1232a:	e7ff      	b.n	1232c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   1232c:	9802      	ldr	r0, [sp, #8]
   1232e:	07c1      	lsls	r1, r0, #31
   12330:	2900      	cmp	r1, #0
   12332:	d101      	bne.n	12338 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   12334:	e7ff      	b.n	12336 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   12336:	e606      	b.n	11f46 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   12338:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1233a:	9932      	ldr	r1, [sp, #200]	; 0xc8
   1233c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   1233e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   12340:	9330      	str	r3, [sp, #192]	; 0xc0
   12342:	922f      	str	r2, [sp, #188]	; 0xbc
   12344:	912e      	str	r1, [sp, #184]	; 0xb8
   12346:	902d      	str	r0, [sp, #180]	; 0xb4
   12348:	e5f0      	b.n	11f2c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   1234a:	e5ed      	b.n	11f28 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1234c:	f24f 6000 	movw	r0, #62976	; 0xf600
   12350:	f2c0 0001 	movt	r0, #1
   12354:	f24f 52f0 	movw	r2, #62960	; 0xf5f0
   12358:	f2c0 0201 	movt	r2, #1
   1235c:	211c      	movs	r1, #28
   1235e:	f004 fb65 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12362:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   12364:	f24f 6030 	movw	r0, #63024	; 0xf630
   12368:	f2c0 0001 	movt	r0, #1
   1236c:	f24f 621c 	movw	r2, #63004	; 0xf61c
   12370:	f2c0 0201 	movt	r2, #1
   12374:	2121      	movs	r1, #33	; 0x21
   12376:	f004 fb59 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1237a:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1237c:	f24f 6000 	movw	r0, #62976	; 0xf600
   12380:	f2c0 0001 	movt	r0, #1
   12384:	f24f 6254 	movw	r2, #63060	; 0xf654
   12388:	f2c0 0201 	movt	r2, #1
   1238c:	211c      	movs	r1, #28
   1238e:	f004 fb4d 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12392:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   12394:	f24f 6030 	movw	r0, #63024	; 0xf630
   12398:	f2c0 0001 	movt	r0, #1
   1239c:	f24f 6264 	movw	r2, #63076	; 0xf664
   123a0:	f2c0 0201 	movt	r2, #1
   123a4:	2121      	movs	r1, #33	; 0x21
   123a6:	f004 fb41 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   123aa:	defe      	udf	#254	; 0xfe
            self.x += 1;
   123ac:	f24f 6000 	movw	r0, #62976	; 0xf600
   123b0:	f2c0 0001 	movt	r0, #1
   123b4:	f24f 6294 	movw	r2, #63124	; 0xf694
   123b8:	f2c0 0201 	movt	r2, #1
   123bc:	211c      	movs	r1, #28
   123be:	f004 fb35 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   123c2:	defe      	udf	#254	; 0xfe
                self.y += 1;
   123c4:	f24f 6000 	movw	r0, #62976	; 0xf600
   123c8:	f2c0 0001 	movt	r0, #1
   123cc:	f24f 62a4 	movw	r2, #63140	; 0xf6a4
   123d0:	f2c0 0201 	movt	r2, #1
   123d4:	211c      	movs	r1, #28
   123d6:	f004 fb29 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   123da:	defe      	udf	#254	; 0xfe

000123dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   123dc:	b580      	push	{r7, lr}
   123de:	b08a      	sub	sp, #40	; 0x28
   123e0:	680a      	ldr	r2, [r1, #0]
   123e2:	9207      	str	r2, [sp, #28]
   123e4:	684b      	ldr	r3, [r1, #4]
   123e6:	9308      	str	r3, [sp, #32]
   123e8:	8909      	ldrh	r1, [r1, #8]
   123ea:	468c      	mov	ip, r1
   123ec:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   123f0:	9005      	str	r0, [sp, #20]
   123f2:	4610      	mov	r0, r2
   123f4:	4619      	mov	r1, r3
   123f6:	f8cd c010 	str.w	ip, [sp, #16]
   123fa:	f7fb ff98 	bl	e32e <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   123fe:	9003      	str	r0, [sp, #12]
   12400:	9102      	str	r1, [sp, #8]
   12402:	e7ff      	b.n	12404 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   12404:	9803      	ldr	r0, [sp, #12]
   12406:	9902      	ldr	r1, [sp, #8]
   12408:	f7fb ffe3 	bl	e3d2 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   1240c:	9001      	str	r0, [sp, #4]
   1240e:	9100      	str	r1, [sp, #0]
   12410:	e7ff      	b.n	12412 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   12412:	9801      	ldr	r0, [sp, #4]
   12414:	9905      	ldr	r1, [sp, #20]
   12416:	6008      	str	r0, [r1, #0]
   12418:	9a00      	ldr	r2, [sp, #0]
   1241a:	604a      	str	r2, [r1, #4]
   1241c:	9b04      	ldr	r3, [sp, #16]
   1241e:	810b      	strh	r3, [r1, #8]
   12420:	b00a      	add	sp, #40	; 0x28
   12422:	bd80      	pop	{r7, pc}

00012424 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   12424:	b510      	push	{r4, lr}
   12426:	b08c      	sub	sp, #48	; 0x30
   12428:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1242c:	9108      	str	r1, [sp, #32]
   1242e:	9209      	str	r2, [sp, #36]	; 0x24
   12430:	930a      	str	r3, [sp, #40]	; 0x28
   12432:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   12436:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   1243a:	9004      	str	r0, [sp, #16]
   1243c:	4670      	mov	r0, lr
   1243e:	9303      	str	r3, [sp, #12]
   12440:	9202      	str	r2, [sp, #8]
   12442:	9101      	str	r1, [sp, #4]
   12444:	f8cd c000 	str.w	ip, [sp]
   12448:	f000 f818 	bl	1247c <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   1244c:	e7ff      	b.n	1244e <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   1244e:	9801      	ldr	r0, [sp, #4]
   12450:	9904      	ldr	r1, [sp, #16]
   12452:	6008      	str	r0, [r1, #0]
   12454:	9a02      	ldr	r2, [sp, #8]
   12456:	604a      	str	r2, [r1, #4]
   12458:	9b03      	ldr	r3, [sp, #12]
   1245a:	608b      	str	r3, [r1, #8]
   1245c:	f8dd c000 	ldr.w	ip, [sp]
   12460:	f8c1 c00c 	str.w	ip, [r1, #12]
   12464:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   12468:	f8a1 e018 	strh.w	lr, [r1, #24]
   1246c:	f8dd e014 	ldr.w	lr, [sp, #20]
   12470:	9c06      	ldr	r4, [sp, #24]
   12472:	614c      	str	r4, [r1, #20]
   12474:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   12478:	b00c      	add	sp, #48	; 0x30
   1247a:	bd10      	pop	{r4, pc}

0001247c <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   1247c:	b082      	sub	sp, #8
   1247e:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   12480:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   12484:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   12488:	f8bd 1000 	ldrh.w	r1, [sp]
   1248c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12490:	8001      	strh	r1, [r0, #0]
   12492:	8042      	strh	r2, [r0, #2]
   12494:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   12498:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1249c:	8081      	strh	r1, [r0, #4]
   1249e:	80c2      	strh	r2, [r0, #6]
   124a0:	2101      	movs	r1, #1
   124a2:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   124a4:	b002      	add	sp, #8
   124a6:	4770      	bx	lr

000124a8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
   124a8:	b08a      	sub	sp, #40	; 0x28
   124aa:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
   124ac:	7800      	ldrb	r0, [r0, #0]
   124ae:	9001      	str	r0, [sp, #4]
   124b0:	9901      	ldr	r1, [sp, #4]
   124b2:	e8df f011 	tbh	[pc, r1, lsl #1]
   124b6:	0103      	.short	0x0103
   124b8:	01020107 	.word	0x01020107
   124bc:	010c0102 	.word	0x010c0102
   124c0:	01020102 	.word	0x01020102
   124c4:	01020102 	.word	0x01020102
   124c8:	01020111 	.word	0x01020111
   124cc:	01020102 	.word	0x01020102
   124d0:	01020102 	.word	0x01020102
   124d4:	01160102 	.word	0x01160102
   124d8:	0120011b 	.word	0x0120011b
   124dc:	01020125 	.word	0x01020125
   124e0:	01020102 	.word	0x01020102
   124e4:	01020102 	.word	0x01020102
   124e8:	01020102 	.word	0x01020102
   124ec:	01020102 	.word	0x01020102
   124f0:	01020102 	.word	0x01020102
   124f4:	012a0102 	.word	0x012a0102
   124f8:	0102012f 	.word	0x0102012f
   124fc:	01020102 	.word	0x01020102
   12500:	01020102 	.word	0x01020102
   12504:	01340102 	.word	0x01340102
   12508:	013e0139 	.word	0x013e0139
   1250c:	01480143 	.word	0x01480143
   12510:	014d0102 	.word	0x014d0102
   12514:	01520102 	.word	0x01520102
   12518:	01020102 	.word	0x01020102
   1251c:	01020102 	.word	0x01020102
   12520:	015c0102 	.word	0x015c0102
   12524:	01020102 	.word	0x01020102
   12528:	01570102 	.word	0x01570102
   1252c:	01020102 	.word	0x01020102
   12530:	01020102 	.word	0x01020102
   12534:	01020102 	.word	0x01020102
   12538:	01020102 	.word	0x01020102
   1253c:	01020102 	.word	0x01020102
   12540:	01020102 	.word	0x01020102
   12544:	01020102 	.word	0x01020102
   12548:	01020102 	.word	0x01020102
   1254c:	01020102 	.word	0x01020102
   12550:	01020102 	.word	0x01020102
   12554:	01020102 	.word	0x01020102
   12558:	01020102 	.word	0x01020102
   1255c:	01020102 	.word	0x01020102
   12560:	01020102 	.word	0x01020102
   12564:	01020102 	.word	0x01020102
   12568:	01020102 	.word	0x01020102
   1256c:	01020102 	.word	0x01020102
   12570:	01020102 	.word	0x01020102
   12574:	01020102 	.word	0x01020102
   12578:	01020102 	.word	0x01020102
   1257c:	01020102 	.word	0x01020102
   12580:	01020102 	.word	0x01020102
   12584:	01020102 	.word	0x01020102
   12588:	01020102 	.word	0x01020102
   1258c:	01020102 	.word	0x01020102
   12590:	01020102 	.word	0x01020102
   12594:	01020102 	.word	0x01020102
   12598:	01020102 	.word	0x01020102
   1259c:	01020102 	.word	0x01020102
   125a0:	01020102 	.word	0x01020102
   125a4:	01020102 	.word	0x01020102
   125a8:	01020102 	.word	0x01020102
   125ac:	01020102 	.word	0x01020102
   125b0:	01020102 	.word	0x01020102
   125b4:	01020102 	.word	0x01020102
   125b8:	01020102 	.word	0x01020102
   125bc:	01020102 	.word	0x01020102
   125c0:	01020102 	.word	0x01020102
   125c4:	01020102 	.word	0x01020102
   125c8:	01020102 	.word	0x01020102
   125cc:	01020102 	.word	0x01020102
   125d0:	01020102 	.word	0x01020102
   125d4:	01020102 	.word	0x01020102
   125d8:	01020102 	.word	0x01020102
   125dc:	01020102 	.word	0x01020102
   125e0:	01020102 	.word	0x01020102
   125e4:	01020102 	.word	0x01020102
   125e8:	01020102 	.word	0x01020102
   125ec:	01020102 	.word	0x01020102
   125f0:	01020102 	.word	0x01020102
   125f4:	01020102 	.word	0x01020102
   125f8:	01020102 	.word	0x01020102
   125fc:	01020102 	.word	0x01020102
   12600:	01020102 	.word	0x01020102
   12604:	01020102 	.word	0x01020102
   12608:	01020102 	.word	0x01020102
   1260c:	01020102 	.word	0x01020102
   12610:	01020102 	.word	0x01020102
   12614:	01020102 	.word	0x01020102
   12618:	01660161 	.word	0x01660161
   1261c:	0170016b 	.word	0x0170016b
   12620:	01750102 	.word	0x01750102
   12624:	01020102 	.word	0x01020102
   12628:	01020102 	.word	0x01020102
   1262c:	01020102 	.word	0x01020102
   12630:	01020102 	.word	0x01020102
   12634:	017a0102 	.word	0x017a0102
   12638:	0184017f 	.word	0x0184017f
   1263c:	018e0189 	.word	0x018e0189
   12640:	01020193 	.word	0x01020193
   12644:	01020102 	.word	0x01020102
   12648:	01020102 	.word	0x01020102
   1264c:	01020102 	.word	0x01020102
   12650:	01020102 	.word	0x01020102
   12654:	01020102 	.word	0x01020102
   12658:	01020102 	.word	0x01020102
   1265c:	01020102 	.word	0x01020102
   12660:	01020102 	.word	0x01020102
   12664:	01020102 	.word	0x01020102
   12668:	01980102 	.word	0x01980102
   1266c:	01a2019d 	.word	0x01a2019d
   12670:	010201a7 	.word	0x010201a7
   12674:	01b10102 	.word	0x01b10102
   12678:	010200fd 	.word	0x010200fd
   1267c:	01020102 	.word	0x01020102
   12680:	01020102 	.word	0x01020102
   12684:	01020102 	.word	0x01020102
   12688:	01020102 	.word	0x01020102
   1268c:	01020102 	.word	0x01020102
   12690:	01020102 	.word	0x01020102
   12694:	01020102 	.word	0x01020102
   12698:	01020102 	.word	0x01020102
   1269c:	01020102 	.word	0x01020102
   126a0:	01020102 	.word	0x01020102
   126a4:	01020102 	.word	0x01020102
   126a8:	01020102 	.word	0x01020102
   126ac:	01ac0102 	.word	0x01ac0102
   126b0:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   126b2:	9007      	str	r0, [sp, #28]
   126b4:	20e1      	movs	r0, #225	; 0xe1
   126b6:	9006      	str	r0, [sp, #24]
   126b8:	e0b3      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126ba:	defe      	udf	#254	; 0xfe
   126bc:	2000      	movs	r0, #0
   126be:	9007      	str	r0, [sp, #28]
   126c0:	9006      	str	r0, [sp, #24]
   126c2:	e0ae      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126c4:	2000      	movs	r0, #0
   126c6:	9007      	str	r0, [sp, #28]
   126c8:	2001      	movs	r0, #1
   126ca:	9006      	str	r0, [sp, #24]
   126cc:	e0a9      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126ce:	2000      	movs	r0, #0
   126d0:	9007      	str	r0, [sp, #28]
   126d2:	2004      	movs	r0, #4
   126d4:	9006      	str	r0, [sp, #24]
   126d6:	e0a4      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126d8:	2000      	movs	r0, #0
   126da:	9007      	str	r0, [sp, #28]
   126dc:	2009      	movs	r0, #9
   126de:	9006      	str	r0, [sp, #24]
   126e0:	e09f      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126e2:	2000      	movs	r0, #0
   126e4:	9007      	str	r0, [sp, #28]
   126e6:	2010      	movs	r0, #16
   126e8:	9006      	str	r0, [sp, #24]
   126ea:	e09a      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126ec:	2000      	movs	r0, #0
   126ee:	9007      	str	r0, [sp, #28]
   126f0:	2011      	movs	r0, #17
   126f2:	9006      	str	r0, [sp, #24]
   126f4:	e095      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126f6:	2000      	movs	r0, #0
   126f8:	9007      	str	r0, [sp, #28]
   126fa:	2012      	movs	r0, #18
   126fc:	9006      	str	r0, [sp, #24]
   126fe:	e090      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12700:	2000      	movs	r0, #0
   12702:	9007      	str	r0, [sp, #28]
   12704:	2013      	movs	r0, #19
   12706:	9006      	str	r0, [sp, #24]
   12708:	e08b      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1270a:	2000      	movs	r0, #0
   1270c:	9007      	str	r0, [sp, #28]
   1270e:	2020      	movs	r0, #32
   12710:	9006      	str	r0, [sp, #24]
   12712:	e086      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12714:	2000      	movs	r0, #0
   12716:	9007      	str	r0, [sp, #28]
   12718:	2021      	movs	r0, #33	; 0x21
   1271a:	9006      	str	r0, [sp, #24]
   1271c:	e081      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1271e:	2000      	movs	r0, #0
   12720:	9007      	str	r0, [sp, #28]
   12722:	2028      	movs	r0, #40	; 0x28
   12724:	9006      	str	r0, [sp, #24]
   12726:	e07c      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12728:	2000      	movs	r0, #0
   1272a:	9007      	str	r0, [sp, #28]
   1272c:	2029      	movs	r0, #41	; 0x29
   1272e:	9006      	str	r0, [sp, #24]
   12730:	e077      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12732:	2000      	movs	r0, #0
   12734:	9007      	str	r0, [sp, #28]
   12736:	202a      	movs	r0, #42	; 0x2a
   12738:	9006      	str	r0, [sp, #24]
   1273a:	e072      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1273c:	2000      	movs	r0, #0
   1273e:	9007      	str	r0, [sp, #28]
   12740:	202b      	movs	r0, #43	; 0x2b
   12742:	9006      	str	r0, [sp, #24]
   12744:	e06d      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12746:	2000      	movs	r0, #0
   12748:	9007      	str	r0, [sp, #28]
   1274a:	202c      	movs	r0, #44	; 0x2c
   1274c:	9006      	str	r0, [sp, #24]
   1274e:	e068      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12750:	2000      	movs	r0, #0
   12752:	9007      	str	r0, [sp, #28]
   12754:	202e      	movs	r0, #46	; 0x2e
   12756:	9006      	str	r0, [sp, #24]
   12758:	e063      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1275a:	2000      	movs	r0, #0
   1275c:	9007      	str	r0, [sp, #28]
   1275e:	2030      	movs	r0, #48	; 0x30
   12760:	9006      	str	r0, [sp, #24]
   12762:	e05e      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12764:	2000      	movs	r0, #0
   12766:	9007      	str	r0, [sp, #28]
   12768:	203a      	movs	r0, #58	; 0x3a
   1276a:	9006      	str	r0, [sp, #24]
   1276c:	e059      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1276e:	2000      	movs	r0, #0
   12770:	9007      	str	r0, [sp, #28]
   12772:	2036      	movs	r0, #54	; 0x36
   12774:	9006      	str	r0, [sp, #24]
   12776:	e054      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12778:	2000      	movs	r0, #0
   1277a:	9007      	str	r0, [sp, #28]
   1277c:	20b1      	movs	r0, #177	; 0xb1
   1277e:	9006      	str	r0, [sp, #24]
   12780:	e04f      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12782:	2000      	movs	r0, #0
   12784:	9007      	str	r0, [sp, #28]
   12786:	20b2      	movs	r0, #178	; 0xb2
   12788:	9006      	str	r0, [sp, #24]
   1278a:	e04a      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1278c:	2000      	movs	r0, #0
   1278e:	9007      	str	r0, [sp, #28]
   12790:	20b3      	movs	r0, #179	; 0xb3
   12792:	9006      	str	r0, [sp, #24]
   12794:	e045      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12796:	2000      	movs	r0, #0
   12798:	9007      	str	r0, [sp, #28]
   1279a:	20b4      	movs	r0, #180	; 0xb4
   1279c:	9006      	str	r0, [sp, #24]
   1279e:	e040      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127a0:	2000      	movs	r0, #0
   127a2:	9007      	str	r0, [sp, #28]
   127a4:	20b6      	movs	r0, #182	; 0xb6
   127a6:	9006      	str	r0, [sp, #24]
   127a8:	e03b      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127aa:	2000      	movs	r0, #0
   127ac:	9007      	str	r0, [sp, #28]
   127ae:	20c0      	movs	r0, #192	; 0xc0
   127b0:	9006      	str	r0, [sp, #24]
   127b2:	e036      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127b4:	2000      	movs	r0, #0
   127b6:	9007      	str	r0, [sp, #28]
   127b8:	20c1      	movs	r0, #193	; 0xc1
   127ba:	9006      	str	r0, [sp, #24]
   127bc:	e031      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127be:	2000      	movs	r0, #0
   127c0:	9007      	str	r0, [sp, #28]
   127c2:	20c2      	movs	r0, #194	; 0xc2
   127c4:	9006      	str	r0, [sp, #24]
   127c6:	e02c      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127c8:	2000      	movs	r0, #0
   127ca:	9007      	str	r0, [sp, #28]
   127cc:	20c3      	movs	r0, #195	; 0xc3
   127ce:	9006      	str	r0, [sp, #24]
   127d0:	e027      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127d2:	2000      	movs	r0, #0
   127d4:	9007      	str	r0, [sp, #28]
   127d6:	20c4      	movs	r0, #196	; 0xc4
   127d8:	9006      	str	r0, [sp, #24]
   127da:	e022      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127dc:	2000      	movs	r0, #0
   127de:	9007      	str	r0, [sp, #28]
   127e0:	20c5      	movs	r0, #197	; 0xc5
   127e2:	9006      	str	r0, [sp, #24]
   127e4:	e01d      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127e6:	2000      	movs	r0, #0
   127e8:	9007      	str	r0, [sp, #28]
   127ea:	20da      	movs	r0, #218	; 0xda
   127ec:	9006      	str	r0, [sp, #24]
   127ee:	e018      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127f0:	2000      	movs	r0, #0
   127f2:	9007      	str	r0, [sp, #28]
   127f4:	20db      	movs	r0, #219	; 0xdb
   127f6:	9006      	str	r0, [sp, #24]
   127f8:	e013      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127fa:	2000      	movs	r0, #0
   127fc:	9007      	str	r0, [sp, #28]
   127fe:	20dc      	movs	r0, #220	; 0xdc
   12800:	9006      	str	r0, [sp, #24]
   12802:	e00e      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12804:	2000      	movs	r0, #0
   12806:	9007      	str	r0, [sp, #28]
   12808:	20dd      	movs	r0, #221	; 0xdd
   1280a:	9006      	str	r0, [sp, #24]
   1280c:	e009      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1280e:	2000      	movs	r0, #0
   12810:	9007      	str	r0, [sp, #28]
   12812:	20fc      	movs	r0, #252	; 0xfc
   12814:	9006      	str	r0, [sp, #24]
   12816:	e004      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12818:	2000      	movs	r0, #0
   1281a:	9007      	str	r0, [sp, #28]
   1281c:	20e0      	movs	r0, #224	; 0xe0
   1281e:	9006      	str	r0, [sp, #24]
   12820:	e7ff      	b.n	12822 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12822:	9806      	ldr	r0, [sp, #24]
   12824:	9907      	ldr	r1, [sp, #28]
   12826:	9105      	str	r1, [sp, #20]
   12828:	9004      	str	r0, [sp, #16]
   1282a:	2000      	movs	r0, #0
   1282c:	9003      	str	r0, [sp, #12]
   1282e:	2001      	movs	r0, #1
   12830:	9002      	str	r0, [sp, #8]
   12832:	9802      	ldr	r0, [sp, #8]
   12834:	9903      	ldr	r1, [sp, #12]
   12836:	9a04      	ldr	r2, [sp, #16]
   12838:	9b05      	ldr	r3, [sp, #20]
   1283a:	b00a      	add	sp, #40	; 0x28
   1283c:	4770      	bx	lr

0001283e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
   1283e:	b580      	push	{r7, lr}
   12840:	b08a      	sub	sp, #40	; 0x28
   12842:	9009      	str	r0, [sp, #36]	; 0x24
   12844:	f7ff fe30 	bl	124a8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
   12848:	9108      	str	r1, [sp, #32]
   1284a:	9007      	str	r0, [sp, #28]
   1284c:	9306      	str	r3, [sp, #24]
   1284e:	9205      	str	r2, [sp, #20]
   12850:	e7ff      	b.n	12852 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
   12852:	9807      	ldr	r0, [sp, #28]
   12854:	9908      	ldr	r1, [sp, #32]
   12856:	9a05      	ldr	r2, [sp, #20]
   12858:	9b06      	ldr	r3, [sp, #24]
   1285a:	f000 f859 	bl	12910 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
   1285e:	9104      	str	r1, [sp, #16]
   12860:	9003      	str	r0, [sp, #12]
   12862:	9302      	str	r3, [sp, #8]
   12864:	9201      	str	r2, [sp, #4]
   12866:	e7ff      	b.n	12868 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
   12868:	9803      	ldr	r0, [sp, #12]
   1286a:	9904      	ldr	r1, [sp, #16]
   1286c:	9a01      	ldr	r2, [sp, #4]
   1286e:	9b02      	ldr	r3, [sp, #8]
   12870:	b00a      	add	sp, #40	; 0x28
   12872:	bd80      	pop	{r7, pc}

00012874 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
   12874:	b08a      	sub	sp, #40	; 0x28
   12876:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
   12878:	7800      	ldrb	r0, [r0, #0]
   1287a:	4601      	mov	r1, r0
   1287c:	2800      	cmp	r0, #0
   1287e:	9101      	str	r1, [sp, #4]
   12880:	d00f      	beq.n	128a2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
   12882:	e7ff      	b.n	12884 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
   12884:	9801      	ldr	r0, [sp, #4]
   12886:	2860      	cmp	r0, #96	; 0x60
   12888:	d00f      	beq.n	128aa <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
   1288a:	e7ff      	b.n	1288c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
   1288c:	9801      	ldr	r0, [sp, #4]
   1288e:	28a0      	cmp	r0, #160	; 0xa0
   12890:	d001      	beq.n	12896 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
   12892:	e7ff      	b.n	12894 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
   12894:	e00e      	b.n	128b4 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
   12896:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   12898:	9007      	str	r0, [sp, #28]
   1289a:	20a0      	movs	r0, #160	; 0xa0
   1289c:	9006      	str	r0, [sp, #24]
   1289e:	e00e      	b.n	128be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   128a0:	defe      	udf	#254	; 0xfe
   128a2:	2000      	movs	r0, #0
   128a4:	9007      	str	r0, [sp, #28]
   128a6:	9006      	str	r0, [sp, #24]
   128a8:	e009      	b.n	128be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   128aa:	2000      	movs	r0, #0
   128ac:	9007      	str	r0, [sp, #28]
   128ae:	2060      	movs	r0, #96	; 0x60
   128b0:	9006      	str	r0, [sp, #24]
   128b2:	e004      	b.n	128be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   128b4:	2000      	movs	r0, #0
   128b6:	9007      	str	r0, [sp, #28]
   128b8:	20c0      	movs	r0, #192	; 0xc0
   128ba:	9006      	str	r0, [sp, #24]
   128bc:	e7ff      	b.n	128be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   128be:	9806      	ldr	r0, [sp, #24]
   128c0:	9907      	ldr	r1, [sp, #28]
   128c2:	9105      	str	r1, [sp, #20]
   128c4:	9004      	str	r0, [sp, #16]
   128c6:	2000      	movs	r0, #0
   128c8:	9003      	str	r0, [sp, #12]
   128ca:	2001      	movs	r0, #1
   128cc:	9002      	str	r0, [sp, #8]
   128ce:	9802      	ldr	r0, [sp, #8]
   128d0:	9903      	ldr	r1, [sp, #12]
   128d2:	9a04      	ldr	r2, [sp, #16]
   128d4:	9b05      	ldr	r3, [sp, #20]
   128d6:	b00a      	add	sp, #40	; 0x28
   128d8:	4770      	bx	lr

000128da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
   128da:	b580      	push	{r7, lr}
   128dc:	b08a      	sub	sp, #40	; 0x28
   128de:	9009      	str	r0, [sp, #36]	; 0x24
   128e0:	f7ff ffc8 	bl	12874 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
   128e4:	9108      	str	r1, [sp, #32]
   128e6:	9007      	str	r0, [sp, #28]
   128e8:	9306      	str	r3, [sp, #24]
   128ea:	9205      	str	r2, [sp, #20]
   128ec:	e7ff      	b.n	128ee <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
   128ee:	9807      	ldr	r0, [sp, #28]
   128f0:	9908      	ldr	r1, [sp, #32]
   128f2:	9a05      	ldr	r2, [sp, #20]
   128f4:	9b06      	ldr	r3, [sp, #24]
   128f6:	f000 f863 	bl	129c0 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
   128fa:	9104      	str	r1, [sp, #16]
   128fc:	9003      	str	r0, [sp, #12]
   128fe:	9302      	str	r3, [sp, #8]
   12900:	9201      	str	r2, [sp, #4]
   12902:	e7ff      	b.n	12904 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
   12904:	9803      	ldr	r0, [sp, #12]
   12906:	9904      	ldr	r1, [sp, #16]
   12908:	9a01      	ldr	r2, [sp, #4]
   1290a:	9b02      	ldr	r3, [sp, #8]
   1290c:	b00a      	add	sp, #40	; 0x28
   1290e:	bd80      	pop	{r7, pc}

00012910 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
   12910:	b5b0      	push	{r4, r5, r7, lr}
   12912:	b090      	sub	sp, #64	; 0x40
   12914:	469c      	mov	ip, r3
   12916:	4696      	mov	lr, r2
   12918:	460c      	mov	r4, r1
   1291a:	4605      	mov	r5, r0
   1291c:	9103      	str	r1, [sp, #12]
   1291e:	9002      	str	r0, [sp, #8]
   12920:	9305      	str	r3, [sp, #20]
   12922:	9204      	str	r2, [sp, #16]
   12924:	2000      	movs	r0, #0
   12926:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   1292a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   1292e:	2001      	movs	r0, #1
   12930:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12934:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12938:	9802      	ldr	r0, [sp, #8]
   1293a:	2800      	cmp	r0, #0
   1293c:	d001      	beq.n	12942 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
   1293e:	e7ff      	b.n	12940 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
   12940:	e004      	b.n	1294c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
   12942:	2000      	movs	r0, #0
   12944:	9007      	str	r0, [sp, #28]
   12946:	9006      	str	r0, [sp, #24]
   12948:	e023      	b.n	12992 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   1294a:	defe      	udf	#254	; 0xfe
   1294c:	2000      	movs	r0, #0
   1294e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12952:	9904      	ldr	r1, [sp, #16]
   12954:	9a05      	ldr	r2, [sp, #20]
   12956:	920f      	str	r2, [sp, #60]	; 0x3c
   12958:	910e      	str	r1, [sp, #56]	; 0x38
   1295a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   1295e:	920b      	str	r2, [sp, #44]	; 0x2c
   12960:	910a      	str	r1, [sp, #40]	; 0x28
   12962:	980a      	ldr	r0, [sp, #40]	; 0x28
   12964:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12966:	f000 f883 	bl	12a70 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
   1296a:	9101      	str	r1, [sp, #4]
   1296c:	9000      	str	r0, [sp, #0]
   1296e:	e7ff      	b.n	12970 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
   12970:	9800      	ldr	r0, [sp, #0]
   12972:	9008      	str	r0, [sp, #32]
   12974:	9901      	ldr	r1, [sp, #4]
   12976:	9109      	str	r1, [sp, #36]	; 0x24
   12978:	2200      	movs	r2, #0
   1297a:	9207      	str	r2, [sp, #28]
   1297c:	2201      	movs	r2, #1
   1297e:	9206      	str	r2, [sp, #24]
   12980:	e007      	b.n	12992 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   12982:	9802      	ldr	r0, [sp, #8]
   12984:	2801      	cmp	r0, #1
   12986:	d010      	beq.n	129aa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
   12988:	e019      	b.n	129be <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
   1298a:	2000      	movs	r0, #0
   1298c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12990:	e7f7      	b.n	12982 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12992:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   12996:	07c0      	lsls	r0, r0, #31
   12998:	2800      	cmp	r0, #0
   1299a:	d1f6      	bne.n	1298a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
   1299c:	e7f1      	b.n	12982 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   1299e:	9806      	ldr	r0, [sp, #24]
   129a0:	9907      	ldr	r1, [sp, #28]
   129a2:	9a08      	ldr	r2, [sp, #32]
   129a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   129a6:	b010      	add	sp, #64	; 0x40
   129a8:	bdb0      	pop	{r4, r5, r7, pc}
   129aa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   129ae:	07c0      	lsls	r0, r0, #31
   129b0:	2800      	cmp	r0, #0
   129b2:	d0f4      	beq.n	1299e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   129b4:	e7ff      	b.n	129b6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
   129b6:	2000      	movs	r0, #0
   129b8:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129bc:	e7ef      	b.n	1299e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   129be:	e7ee      	b.n	1299e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

000129c0 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
   129c0:	b5b0      	push	{r4, r5, r7, lr}
   129c2:	b090      	sub	sp, #64	; 0x40
   129c4:	469c      	mov	ip, r3
   129c6:	4696      	mov	lr, r2
   129c8:	460c      	mov	r4, r1
   129ca:	4605      	mov	r5, r0
   129cc:	9103      	str	r1, [sp, #12]
   129ce:	9002      	str	r0, [sp, #8]
   129d0:	9305      	str	r3, [sp, #20]
   129d2:	9204      	str	r2, [sp, #16]
   129d4:	2000      	movs	r0, #0
   129d6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129da:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129de:	2001      	movs	r0, #1
   129e0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129e4:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129e8:	9802      	ldr	r0, [sp, #8]
   129ea:	2800      	cmp	r0, #0
   129ec:	d001      	beq.n	129f2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
   129ee:	e7ff      	b.n	129f0 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
   129f0:	e004      	b.n	129fc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
   129f2:	2000      	movs	r0, #0
   129f4:	9007      	str	r0, [sp, #28]
   129f6:	9006      	str	r0, [sp, #24]
   129f8:	e023      	b.n	12a42 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   129fa:	defe      	udf	#254	; 0xfe
   129fc:	2000      	movs	r0, #0
   129fe:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a02:	9904      	ldr	r1, [sp, #16]
   12a04:	9a05      	ldr	r2, [sp, #20]
   12a06:	920f      	str	r2, [sp, #60]	; 0x3c
   12a08:	910e      	str	r1, [sp, #56]	; 0x38
   12a0a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a0e:	920b      	str	r2, [sp, #44]	; 0x2c
   12a10:	910a      	str	r1, [sp, #40]	; 0x28
   12a12:	980a      	ldr	r0, [sp, #40]	; 0x28
   12a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12a16:	f003 fa28 	bl	15e6a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
   12a1a:	9101      	str	r1, [sp, #4]
   12a1c:	9000      	str	r0, [sp, #0]
   12a1e:	e7ff      	b.n	12a20 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
   12a20:	9800      	ldr	r0, [sp, #0]
   12a22:	9008      	str	r0, [sp, #32]
   12a24:	9901      	ldr	r1, [sp, #4]
   12a26:	9109      	str	r1, [sp, #36]	; 0x24
   12a28:	2200      	movs	r2, #0
   12a2a:	9207      	str	r2, [sp, #28]
   12a2c:	2201      	movs	r2, #1
   12a2e:	9206      	str	r2, [sp, #24]
   12a30:	e007      	b.n	12a42 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   12a32:	9802      	ldr	r0, [sp, #8]
   12a34:	2801      	cmp	r0, #1
   12a36:	d010      	beq.n	12a5a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
   12a38:	e019      	b.n	12a6e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
   12a3a:	2000      	movs	r0, #0
   12a3c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a40:	e7f7      	b.n	12a32 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12a42:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   12a46:	07c0      	lsls	r0, r0, #31
   12a48:	2800      	cmp	r0, #0
   12a4a:	d1f6      	bne.n	12a3a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
   12a4c:	e7f1      	b.n	12a32 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12a4e:	9806      	ldr	r0, [sp, #24]
   12a50:	9907      	ldr	r1, [sp, #28]
   12a52:	9a08      	ldr	r2, [sp, #32]
   12a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a56:	b010      	add	sp, #64	; 0x40
   12a58:	bdb0      	pop	{r4, r5, r7, pc}
   12a5a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12a5e:	07c0      	lsls	r0, r0, #31
   12a60:	2800      	cmp	r0, #0
   12a62:	d0f4      	beq.n	12a4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12a64:	e7ff      	b.n	12a66 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
   12a66:	2000      	movs	r0, #0
   12a68:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a6c:	e7ef      	b.n	12a4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12a6e:	e7ee      	b.n	12a4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

00012a70 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
   12a70:	b084      	sub	sp, #16
   12a72:	460a      	mov	r2, r1
   12a74:	4603      	mov	r3, r0
   12a76:	9103      	str	r1, [sp, #12]
   12a78:	9002      	str	r0, [sp, #8]
   12a7a:	b004      	add	sp, #16
   12a7c:	4770      	bx	lr

00012a7e <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>:
   12a7e:	b081      	sub	sp, #4
   12a80:	4601      	mov	r1, r0
   12a82:	f88d 0003 	strb.w	r0, [sp, #3]
   12a86:	b2c0      	uxtb	r0, r0
   12a88:	b001      	add	sp, #4
   12a8a:	4770      	bx	lr

00012a8c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>:
   12a8c:	b08a      	sub	sp, #40	; 0x28
   12a8e:	9107      	str	r1, [sp, #28]
   12a90:	9208      	str	r2, [sp, #32]
   12a92:	f8d0 c000 	ldr.w	ip, [r0]
   12a96:	f1bc 0f00 	cmp.w	ip, #0
   12a9a:	9305      	str	r3, [sp, #20]
   12a9c:	9204      	str	r2, [sp, #16]
   12a9e:	9103      	str	r1, [sp, #12]
   12aa0:	9002      	str	r0, [sp, #8]
   12aa2:	d011      	beq.n	12ac8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x3c>
   12aa4:	e7ff      	b.n	12aa6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x1a>
   12aa6:	9802      	ldr	r0, [sp, #8]
   12aa8:	6841      	ldr	r1, [r0, #4]
   12aaa:	9106      	str	r1, [sp, #24]
   12aac:	4669      	mov	r1, sp
   12aae:	9a05      	ldr	r2, [sp, #20]
   12ab0:	600a      	str	r2, [r1, #0]
   12ab2:	f24f 63b4 	movw	r3, #63156	; 0xf6b4
   12ab6:	f2c0 0301 	movt	r3, #1
   12aba:	aa06      	add	r2, sp, #24
   12abc:	9803      	ldr	r0, [sp, #12]
   12abe:	9904      	ldr	r1, [sp, #16]
   12ac0:	f003 ff86 	bl	169d0 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   12ac4:	defe      	udf	#254	; 0xfe
   12ac6:	defe      	udf	#254	; 0xfe
   12ac8:	9802      	ldr	r0, [sp, #8]
   12aca:	6841      	ldr	r1, [r0, #4]
   12acc:	9109      	str	r1, [sp, #36]	; 0x24
   12ace:	6802      	ldr	r2, [r0, #0]
   12ad0:	2a00      	cmp	r2, #0
   12ad2:	9101      	str	r1, [sp, #4]
   12ad4:	d103      	bne.n	12ade <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x52>
   12ad6:	e7ff      	b.n	12ad8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>
   12ad8:	9801      	ldr	r0, [sp, #4]
   12ada:	b00a      	add	sp, #40	; 0x28
   12adc:	4770      	bx	lr
   12ade:	e7fb      	b.n	12ad8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>

00012ae0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>:
    fn le(&self, other: &LevelFilter) -> bool {
   12ae0:	b082      	sub	sp, #8
   12ae2:	9000      	str	r0, [sp, #0]
   12ae4:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   12ae6:	6800      	ldr	r0, [r0, #0]
   12ae8:	6809      	ldr	r1, [r1, #0]
   12aea:	2200      	movs	r2, #0
   12aec:	4288      	cmp	r0, r1
   12aee:	bf98      	it	ls
   12af0:	2201      	movls	r2, #1
    }
   12af2:	4610      	mov	r0, r2
   12af4:	b002      	add	sp, #8
   12af6:	4770      	bx	lr

00012af8 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>:
   12af8:	b580      	push	{r7, lr}
   12afa:	b086      	sub	sp, #24
   12afc:	460a      	mov	r2, r1
   12afe:	9004      	str	r0, [sp, #16]
   12b00:	f88d 1017 	strb.w	r1, [sp, #23]
   12b04:	9203      	str	r2, [sp, #12]
   12b06:	f7fb ff6c 	bl	e9e2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12b0a:	9002      	str	r0, [sp, #8]
   12b0c:	e7ff      	b.n	12b0e <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x16>
   12b0e:	9802      	ldr	r0, [sp, #8]
   12b10:	9903      	ldr	r1, [sp, #12]
   12b12:	f7fb ff7f 	bl	ea14 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12b16:	9001      	str	r0, [sp, #4]
   12b18:	e7ff      	b.n	12b1a <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x22>
   12b1a:	9801      	ldr	r0, [sp, #4]
   12b1c:	b006      	add	sp, #24
   12b1e:	bd80      	pop	{r7, pc}

00012b20 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>:
   12b20:	b580      	push	{r7, lr}
   12b22:	b086      	sub	sp, #24
   12b24:	460a      	mov	r2, r1
   12b26:	4603      	mov	r3, r0
   12b28:	f88d 0014 	strb.w	r0, [sp, #20]
   12b2c:	f88d 1015 	strb.w	r1, [sp, #21]
   12b30:	9203      	str	r2, [sp, #12]
   12b32:	9302      	str	r3, [sp, #8]
   12b34:	f000 f865 	bl	12c02 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
   12b38:	9001      	str	r0, [sp, #4]
   12b3a:	9100      	str	r1, [sp, #0]
   12b3c:	e7ff      	b.n	12b3e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x1e>
   12b3e:	9801      	ldr	r0, [sp, #4]
   12b40:	f88d 0016 	strb.w	r0, [sp, #22]
   12b44:	9900      	ldr	r1, [sp, #0]
   12b46:	f001 0201 	and.w	r2, r1, #1
   12b4a:	f88d 2017 	strb.w	r2, [sp, #23]
   12b4e:	2a00      	cmp	r2, #0
   12b50:	d107      	bne.n	12b62 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x42>
   12b52:	e7ff      	b.n	12b54 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x34>
   12b54:	9801      	ldr	r0, [sp, #4]
   12b56:	f88d 0011 	strb.w	r0, [sp, #17]
   12b5a:	2101      	movs	r1, #1
   12b5c:	f88d 1010 	strb.w	r1, [sp, #16]
   12b60:	e003      	b.n	12b6a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12b62:	2000      	movs	r0, #0
   12b64:	f88d 0010 	strb.w	r0, [sp, #16]
   12b68:	e7ff      	b.n	12b6a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12b6a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12b6e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   12b72:	b006      	add	sp, #24
   12b74:	bd80      	pop	{r7, pc}

00012b76 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>:
   12b76:	b082      	sub	sp, #8
   12b78:	460a      	mov	r2, r1
   12b7a:	4603      	mov	r3, r0
   12b7c:	f88d 0005 	strb.w	r0, [sp, #5]
   12b80:	f88d 1006 	strb.w	r1, [sp, #6]
   12b84:	4408      	add	r0, r1
   12b86:	f88d 0007 	strb.w	r0, [sp, #7]
   12b8a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12b8e:	9000      	str	r0, [sp, #0]
   12b90:	e7ff      	b.n	12b92 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE+0x1c>
   12b92:	9800      	ldr	r0, [sp, #0]
   12b94:	b002      	add	sp, #8
   12b96:	4770      	bx	lr

00012b98 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>:
   12b98:	b084      	sub	sp, #16
   12b9a:	4602      	mov	r2, r0
   12b9c:	f88d 0007 	strb.w	r0, [sp, #7]
   12ba0:	9102      	str	r1, [sp, #8]
   12ba2:	f001 0107 	and.w	r1, r1, #7
   12ba6:	4088      	lsls	r0, r1
   12ba8:	f88d 000f 	strb.w	r0, [sp, #15]
   12bac:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12bb0:	9000      	str	r0, [sp, #0]
   12bb2:	e7ff      	b.n	12bb4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E+0x1c>
   12bb4:	9800      	ldr	r0, [sp, #0]
   12bb6:	b004      	add	sp, #16
   12bb8:	4770      	bx	lr

00012bba <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>:
   12bba:	b084      	sub	sp, #16
   12bbc:	b2c2      	uxtb	r2, r0
   12bbe:	4603      	mov	r3, r0
   12bc0:	f88d 0007 	strb.w	r0, [sp, #7]
   12bc4:	9102      	str	r1, [sp, #8]
   12bc6:	f001 0007 	and.w	r0, r1, #7
   12bca:	fa22 f000 	lsr.w	r0, r2, r0
   12bce:	f88d 000f 	strb.w	r0, [sp, #15]
   12bd2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12bd6:	9000      	str	r0, [sp, #0]
   12bd8:	e7ff      	b.n	12bda <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E+0x20>
   12bda:	9800      	ldr	r0, [sp, #0]
   12bdc:	b004      	add	sp, #16
   12bde:	4770      	bx	lr

00012be0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>:
   12be0:	b082      	sub	sp, #8
   12be2:	460a      	mov	r2, r1
   12be4:	4603      	mov	r3, r0
   12be6:	f88d 0005 	strb.w	r0, [sp, #5]
   12bea:	f88d 1006 	strb.w	r1, [sp, #6]
   12bee:	1a40      	subs	r0, r0, r1
   12bf0:	f88d 0007 	strb.w	r0, [sp, #7]
   12bf4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12bf8:	9000      	str	r0, [sp, #0]
   12bfa:	e7ff      	b.n	12bfc <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE+0x1c>
   12bfc:	9800      	ldr	r0, [sp, #0]
   12bfe:	b002      	add	sp, #8
   12c00:	4770      	bx	lr

00012c02 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>:
   12c02:	b084      	sub	sp, #16
   12c04:	b2c2      	uxtb	r2, r0
   12c06:	460b      	mov	r3, r1
   12c08:	4684      	mov	ip, r0
   12c0a:	f88d 000a 	strb.w	r0, [sp, #10]
   12c0e:	f88d 100b 	strb.w	r1, [sp, #11]
   12c12:	fa52 f081 	uxtab	r0, r2, r1
   12c16:	b2c1      	uxtb	r1, r0
   12c18:	1a09      	subs	r1, r1, r0
   12c1a:	bf18      	it	ne
   12c1c:	2101      	movne	r1, #1
   12c1e:	f88d 000c 	strb.w	r0, [sp, #12]
   12c22:	f88d 100d 	strb.w	r1, [sp, #13]
   12c26:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12c2a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12c2e:	9001      	str	r0, [sp, #4]
   12c30:	9100      	str	r1, [sp, #0]
   12c32:	e7ff      	b.n	12c34 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE+0x32>
   12c34:	9801      	ldr	r0, [sp, #4]
   12c36:	f88d 000e 	strb.w	r0, [sp, #14]
   12c3a:	9900      	ldr	r1, [sp, #0]
   12c3c:	f001 0201 	and.w	r2, r1, #1
   12c40:	f88d 200f 	strb.w	r2, [sp, #15]
   12c44:	f88d 0008 	strb.w	r0, [sp, #8]
   12c48:	f88d 2009 	strb.w	r2, [sp, #9]
   12c4c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12c50:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12c54:	b004      	add	sp, #16
   12c56:	4770      	bx	lr

00012c58 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>:
   12c58:	b580      	push	{r7, lr}
   12c5a:	b084      	sub	sp, #16
   12c5c:	b2ca      	uxtb	r2, r1
   12c5e:	b2c3      	uxtb	r3, r0
   12c60:	468c      	mov	ip, r1
   12c62:	4686      	mov	lr, r0
   12c64:	f88d 000a 	strb.w	r0, [sp, #10]
   12c68:	f88d 100b 	strb.w	r1, [sp, #11]
   12c6c:	1a98      	subs	r0, r3, r2
   12c6e:	b2c1      	uxtb	r1, r0
   12c70:	1a09      	subs	r1, r1, r0
   12c72:	bf18      	it	ne
   12c74:	2101      	movne	r1, #1
   12c76:	f88d 000c 	strb.w	r0, [sp, #12]
   12c7a:	f88d 100d 	strb.w	r1, [sp, #13]
   12c7e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12c82:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12c86:	9001      	str	r0, [sp, #4]
   12c88:	9100      	str	r1, [sp, #0]
   12c8a:	e7ff      	b.n	12c8c <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E+0x34>
   12c8c:	9801      	ldr	r0, [sp, #4]
   12c8e:	f88d 000e 	strb.w	r0, [sp, #14]
   12c92:	9900      	ldr	r1, [sp, #0]
   12c94:	f001 0201 	and.w	r2, r1, #1
   12c98:	f88d 200f 	strb.w	r2, [sp, #15]
   12c9c:	f88d 0008 	strb.w	r0, [sp, #8]
   12ca0:	f88d 2009 	strb.w	r2, [sp, #9]
   12ca4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12ca8:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12cac:	b004      	add	sp, #16
   12cae:	bd80      	pop	{r7, pc}

00012cb0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>:
   12cb0:	b083      	sub	sp, #12
   12cb2:	460a      	mov	r2, r1
   12cb4:	4603      	mov	r3, r0
   12cb6:	f8ad 0006 	strh.w	r0, [sp, #6]
   12cba:	f8ad 1008 	strh.w	r1, [sp, #8]
   12cbe:	4408      	add	r0, r1
   12cc0:	f8ad 000a 	strh.w	r0, [sp, #10]
   12cc4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12cc8:	9000      	str	r0, [sp, #0]
   12cca:	e7ff      	b.n	12ccc <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E+0x1c>
   12ccc:	9800      	ldr	r0, [sp, #0]
   12cce:	b003      	add	sp, #12
   12cd0:	4770      	bx	lr

00012cd2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>:
   12cd2:	b083      	sub	sp, #12
   12cd4:	460a      	mov	r2, r1
   12cd6:	4603      	mov	r3, r0
   12cd8:	f8ad 0006 	strh.w	r0, [sp, #6]
   12cdc:	f8ad 1008 	strh.w	r1, [sp, #8]
   12ce0:	1a40      	subs	r0, r0, r1
   12ce2:	f8ad 000a 	strh.w	r0, [sp, #10]
   12ce6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12cea:	9000      	str	r0, [sp, #0]
   12cec:	e7ff      	b.n	12cee <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E+0x1c>
   12cee:	9800      	ldr	r0, [sp, #0]
   12cf0:	b003      	add	sp, #12
   12cf2:	4770      	bx	lr

00012cf4 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>:
   12cf4:	b5b0      	push	{r4, r5, r7, lr}
   12cf6:	b088      	sub	sp, #32
   12cf8:	469c      	mov	ip, r3
   12cfa:	4696      	mov	lr, r2
   12cfc:	460c      	mov	r4, r1
   12cfe:	4605      	mov	r5, r0
   12d00:	9103      	str	r1, [sp, #12]
   12d02:	9002      	str	r0, [sp, #8]
   12d04:	9305      	str	r3, [sp, #20]
   12d06:	9204      	str	r2, [sp, #16]
   12d08:	1a80      	subs	r0, r0, r2
   12d0a:	eb61 0103 	sbc.w	r1, r1, r3
   12d0e:	9107      	str	r1, [sp, #28]
   12d10:	9006      	str	r0, [sp, #24]
   12d12:	9806      	ldr	r0, [sp, #24]
   12d14:	9907      	ldr	r1, [sp, #28]
   12d16:	9001      	str	r0, [sp, #4]
   12d18:	9100      	str	r1, [sp, #0]
   12d1a:	e7ff      	b.n	12d1c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E+0x28>
   12d1c:	9801      	ldr	r0, [sp, #4]
   12d1e:	9900      	ldr	r1, [sp, #0]
   12d20:	b008      	add	sp, #32
   12d22:	bdb0      	pop	{r4, r5, r7, pc}

00012d24 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>:
   12d24:	b580      	push	{r7, lr}
   12d26:	b086      	sub	sp, #24
   12d28:	9005      	str	r0, [sp, #20]
   12d2a:	2100      	movs	r1, #0
   12d2c:	f88d 1013 	strb.w	r1, [sp, #19]
   12d30:	1c41      	adds	r1, r0, #1
   12d32:	9002      	str	r0, [sp, #8]
   12d34:	f003 f8a0 	bl	15e78 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>
   12d38:	9001      	str	r0, [sp, #4]
   12d3a:	e7ff      	b.n	12d3c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x18>
   12d3c:	9801      	ldr	r0, [sp, #4]
   12d3e:	07c1      	lsls	r1, r0, #31
   12d40:	2900      	cmp	r1, #0
   12d42:	d104      	bne.n	12d4e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x2a>
   12d44:	e7ff      	b.n	12d46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x22>
   12d46:	2000      	movs	r0, #0
   12d48:	f88d 000c 	strb.w	r0, [sp, #12]
   12d4c:	e02c      	b.n	12da8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12d4e:	2001      	movs	r0, #1
   12d50:	f88d 0013 	strb.w	r0, [sp, #19]
   12d54:	9902      	ldr	r1, [sp, #8]
   12d56:	9000      	str	r0, [sp, #0]
   12d58:	4608      	mov	r0, r1
   12d5a:	9900      	ldr	r1, [sp, #0]
   12d5c:	f000 f86e 	bl	12e3c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>
   12d60:	f88d 1011 	strb.w	r1, [sp, #17]
   12d64:	f88d 0010 	strb.w	r0, [sp, #16]
   12d68:	e7ff      	b.n	12d6a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x46>
   12d6a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12d6e:	07c0      	lsls	r0, r0, #31
   12d70:	2800      	cmp	r0, #0
   12d72:	d104      	bne.n	12d7e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x5a>
   12d74:	e7ff      	b.n	12d76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x52>
   12d76:	2000      	movs	r0, #0
   12d78:	f88d 000c 	strb.w	r0, [sp, #12]
   12d7c:	e029      	b.n	12dd2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12d7e:	2000      	movs	r0, #0
   12d80:	f88d 0013 	strb.w	r0, [sp, #19]
   12d84:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12d88:	f88d 0012 	strb.w	r0, [sp, #18]
   12d8c:	f10d 0012 	add.w	r0, sp, #18
   12d90:	9902      	ldr	r1, [sp, #8]
   12d92:	f000 f886 	bl	12ea2 <_ZN4core3mem4swap17h9f9b2c00c891c39bE>
   12d96:	e7ff      	b.n	12d98 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x74>
   12d98:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12d9c:	f88d 000d 	strb.w	r0, [sp, #13]
   12da0:	2001      	movs	r0, #1
   12da2:	f88d 000c 	strb.w	r0, [sp, #12]
   12da6:	e014      	b.n	12dd2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12da8:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12dac:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12db0:	b006      	add	sp, #24
   12db2:	bd80      	pop	{r7, pc}
   12db4:	2000      	movs	r0, #0
   12db6:	f88d 0013 	strb.w	r0, [sp, #19]
   12dba:	e7f5      	b.n	12da8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12dbc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12dc0:	07c0      	lsls	r0, r0, #31
   12dc2:	2800      	cmp	r0, #0
   12dc4:	d0f6      	beq.n	12db4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12dc6:	e7ff      	b.n	12dc8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xa4>
   12dc8:	2000      	movs	r0, #0
   12dca:	f88d 0013 	strb.w	r0, [sp, #19]
   12dce:	e7f1      	b.n	12db4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12dd0:	e7f0      	b.n	12db4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12dd2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12dd6:	07c0      	lsls	r0, r0, #31
   12dd8:	2800      	cmp	r0, #0
   12dda:	d1ef      	bne.n	12dbc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x98>
   12ddc:	e7f8      	b.n	12dd0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xac>

00012dde <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>:
   12dde:	b580      	push	{r7, lr}
   12de0:	b084      	sub	sp, #16
   12de2:	9101      	str	r1, [sp, #4]
   12de4:	9202      	str	r2, [sp, #8]
   12de6:	9303      	str	r3, [sp, #12]
   12de8:	f7fa ff2a 	bl	dc40 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>
   12dec:	e7ff      	b.n	12dee <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E+0x10>
   12dee:	b004      	add	sp, #16
   12df0:	bd80      	pop	{r7, pc}

00012df2 <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>:
   12df2:	b580      	push	{r7, lr}
   12df4:	b084      	sub	sp, #16
   12df6:	9101      	str	r1, [sp, #4]
   12df8:	9202      	str	r2, [sp, #8]
   12dfa:	9303      	str	r3, [sp, #12]
   12dfc:	f7fa ff17 	bl	dc2e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>
   12e00:	e7ff      	b.n	12e02 <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE+0x10>
   12e02:	b004      	add	sp, #16
   12e04:	bd80      	pop	{r7, pc}

00012e06 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>:
   12e06:	b081      	sub	sp, #4
   12e08:	460a      	mov	r2, r1
   12e0a:	4603      	mov	r3, r0
   12e0c:	f88d 0000 	strb.w	r0, [sp]
   12e10:	f88d 1001 	strb.w	r1, [sp, #1]
   12e14:	b001      	add	sp, #4
   12e16:	4770      	bx	lr

00012e18 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>:
   12e18:	b084      	sub	sp, #16
   12e1a:	9000      	str	r0, [sp, #0]
   12e1c:	9101      	str	r1, [sp, #4]
   12e1e:	9102      	str	r1, [sp, #8]
   12e20:	9003      	str	r0, [sp, #12]
   12e22:	6802      	ldr	r2, [r0, #0]
   12e24:	6840      	ldr	r0, [r0, #4]
   12e26:	680b      	ldr	r3, [r1, #0]
   12e28:	6849      	ldr	r1, [r1, #4]
   12e2a:	4048      	eors	r0, r1
   12e2c:	ea82 0103 	eor.w	r1, r2, r3
   12e30:	4308      	orrs	r0, r1
   12e32:	fab0 f080 	clz	r0, r0
   12e36:	0940      	lsrs	r0, r0, #5
   12e38:	b004      	add	sp, #16
   12e3a:	4770      	bx	lr

00012e3c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>:
   12e3c:	b580      	push	{r7, lr}
   12e3e:	b088      	sub	sp, #32
   12e40:	9005      	str	r0, [sp, #20]
   12e42:	9106      	str	r1, [sp, #24]
   12e44:	9002      	str	r0, [sp, #8]
   12e46:	4608      	mov	r0, r1
   12e48:	f000 f834 	bl	12eb4 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>
   12e4c:	f88d 1011 	strb.w	r1, [sp, #17]
   12e50:	f88d 0010 	strb.w	r0, [sp, #16]
   12e54:	e7ff      	b.n	12e56 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x1a>
   12e56:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12e5a:	07c1      	lsls	r1, r0, #31
   12e5c:	2900      	cmp	r1, #0
   12e5e:	d005      	beq.n	12e6c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x30>
   12e60:	e7ff      	b.n	12e62 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x26>
   12e62:	2000      	movs	r0, #0
   12e64:	f88d 000c 	strb.w	r0, [sp, #12]
   12e68:	e011      	b.n	12e8e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12e6a:	defe      	udf	#254	; 0xfe
   12e6c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12e70:	f88d 001f 	strb.w	r0, [sp, #31]
   12e74:	9902      	ldr	r1, [sp, #8]
   12e76:	780a      	ldrb	r2, [r1, #0]
   12e78:	9001      	str	r0, [sp, #4]
   12e7a:	4610      	mov	r0, r2
   12e7c:	9901      	ldr	r1, [sp, #4]
   12e7e:	f7ff fe4f 	bl	12b20 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>
   12e82:	f88d 100d 	strb.w	r1, [sp, #13]
   12e86:	f88d 000c 	strb.w	r0, [sp, #12]
   12e8a:	e7ff      	b.n	12e8c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x50>
   12e8c:	e7ff      	b.n	12e8e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12e8e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12e92:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12e96:	b008      	add	sp, #32
   12e98:	bd80      	pop	{r7, pc}

00012e9a <_ZN4core3ptr13drop_in_place17h8a25dee97102e103E>:
   12e9a:	b081      	sub	sp, #4
   12e9c:	9000      	str	r0, [sp, #0]
   12e9e:	b001      	add	sp, #4
   12ea0:	4770      	bx	lr

00012ea2 <_ZN4core3mem4swap17h9f9b2c00c891c39bE>:
   12ea2:	b580      	push	{r7, lr}
   12ea4:	b082      	sub	sp, #8
   12ea6:	9000      	str	r0, [sp, #0]
   12ea8:	9101      	str	r1, [sp, #4]
   12eaa:	f003 f80c 	bl	15ec6 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>
   12eae:	e7ff      	b.n	12eb0 <_ZN4core3mem4swap17h9f9b2c00c891c39bE+0xe>
   12eb0:	b002      	add	sp, #8
   12eb2:	bd80      	pop	{r7, pc}

00012eb4 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>:
   12eb4:	b083      	sub	sp, #12
   12eb6:	9002      	str	r0, [sp, #8]
   12eb8:	9000      	str	r0, [sp, #0]
   12eba:	e7ff      	b.n	12ebc <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x8>
   12ebc:	9800      	ldr	r0, [sp, #0]
   12ebe:	28ff      	cmp	r0, #255	; 0xff
   12ec0:	d807      	bhi.n	12ed2 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x1e>
   12ec2:	e7ff      	b.n	12ec4 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x10>
   12ec4:	9800      	ldr	r0, [sp, #0]
   12ec6:	f88d 0005 	strb.w	r0, [sp, #5]
   12eca:	2100      	movs	r1, #0
   12ecc:	f88d 1004 	strb.w	r1, [sp, #4]
   12ed0:	e003      	b.n	12eda <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12ed2:	2001      	movs	r0, #1
   12ed4:	f88d 0004 	strb.w	r0, [sp, #4]
   12ed8:	e7ff      	b.n	12eda <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12eda:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12ede:	f89d 1005 	ldrb.w	r1, [sp, #5]
   12ee2:	b003      	add	sp, #12
   12ee4:	4770      	bx	lr

00012ee6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   12ee6:	b084      	sub	sp, #16
   12ee8:	9001      	str	r0, [sp, #4]
   12eea:	9102      	str	r1, [sp, #8]
   12eec:	4408      	add	r0, r1
   12eee:	9003      	str	r0, [sp, #12]
   12ef0:	9803      	ldr	r0, [sp, #12]
   12ef2:	9000      	str	r0, [sp, #0]
   12ef4:	e7ff      	b.n	12ef6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   12ef6:	9800      	ldr	r0, [sp, #0]
   12ef8:	b004      	add	sp, #16
   12efa:	4770      	bx	lr

00012efc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   12efc:	b082      	sub	sp, #8
   12efe:	9001      	str	r0, [sp, #4]
   12f00:	9000      	str	r0, [sp, #0]
   12f02:	e7ff      	b.n	12f04 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   12f04:	9800      	ldr	r0, [sp, #0]
   12f06:	fab0 f180 	clz	r1, r0
   12f0a:	0948      	lsrs	r0, r1, #5
   12f0c:	b002      	add	sp, #8
   12f0e:	4770      	bx	lr

00012f10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   12f10:	b082      	sub	sp, #8
   12f12:	9001      	str	r0, [sp, #4]
   12f14:	9000      	str	r0, [sp, #0]
   12f16:	9800      	ldr	r0, [sp, #0]
   12f18:	b002      	add	sp, #8
   12f1a:	4770      	bx	lr

00012f1c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   12f1c:	b081      	sub	sp, #4
   12f1e:	9000      	str	r0, [sp, #0]
   12f20:	b001      	add	sp, #4
   12f22:	4770      	bx	lr

00012f24 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   12f24:	b580      	push	{r7, lr}
   12f26:	b084      	sub	sp, #16
   12f28:	9002      	str	r0, [sp, #8]
   12f2a:	9103      	str	r1, [sp, #12]
   12f2c:	f000 f805 	bl	12f3a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   12f30:	9001      	str	r0, [sp, #4]
   12f32:	e7ff      	b.n	12f34 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   12f34:	9801      	ldr	r0, [sp, #4]
   12f36:	b004      	add	sp, #16
   12f38:	bd80      	pop	{r7, pc}

00012f3a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   12f3a:	b084      	sub	sp, #16
   12f3c:	9001      	str	r0, [sp, #4]
   12f3e:	9102      	str	r1, [sp, #8]
   12f40:	4408      	add	r0, r1
   12f42:	9003      	str	r0, [sp, #12]
   12f44:	9803      	ldr	r0, [sp, #12]
   12f46:	9000      	str	r0, [sp, #0]
   12f48:	e7ff      	b.n	12f4a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   12f4a:	9800      	ldr	r0, [sp, #0]
   12f4c:	b004      	add	sp, #16
   12f4e:	4770      	bx	lr

00012f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   12f50:	b082      	sub	sp, #8
   12f52:	9001      	str	r0, [sp, #4]
   12f54:	9000      	str	r0, [sp, #0]
   12f56:	e7ff      	b.n	12f58 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   12f58:	9800      	ldr	r0, [sp, #0]
   12f5a:	fab0 f180 	clz	r1, r0
   12f5e:	0948      	lsrs	r0, r1, #5
   12f60:	b002      	add	sp, #8
   12f62:	4770      	bx	lr

00012f64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   12f64:	b580      	push	{r7, lr}
   12f66:	b090      	sub	sp, #64	; 0x40
   12f68:	900c      	str	r0, [sp, #48]	; 0x30
   12f6a:	910d      	str	r1, [sp, #52]	; 0x34
   12f6c:	9007      	str	r0, [sp, #28]
   12f6e:	9106      	str	r1, [sp, #24]
   12f70:	f000 f935 	bl	131de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   12f74:	4601      	mov	r1, r0
   12f76:	900e      	str	r0, [sp, #56]	; 0x38
   12f78:	9105      	str	r1, [sp, #20]
   12f7a:	e7ff      	b.n	12f7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   12f7c:	9805      	ldr	r0, [sp, #20]
   12f7e:	f7ff ffe7 	bl	12f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12f82:	e7ff      	b.n	12f84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   12f84:	e7ff      	b.n	12f86 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   12f86:	2001      	movs	r0, #1
   12f88:	900f      	str	r0, [sp, #60]	; 0x3c
   12f8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12f8c:	9004      	str	r0, [sp, #16]
   12f8e:	e7ff      	b.n	12f90 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   12f90:	9804      	ldr	r0, [sp, #16]
   12f92:	2800      	cmp	r0, #0
   12f94:	d006      	beq.n	12fa4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   12f96:	e7ff      	b.n	12f98 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   12f98:	9807      	ldr	r0, [sp, #28]
   12f9a:	9906      	ldr	r1, [sp, #24]
   12f9c:	f000 f917 	bl	131ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   12fa0:	9003      	str	r0, [sp, #12]
   12fa2:	e00e      	b.n	12fc2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   12fa4:	9807      	ldr	r0, [sp, #28]
   12fa6:	9906      	ldr	r1, [sp, #24]
   12fa8:	f000 f911 	bl	131ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   12fac:	9002      	str	r0, [sp, #8]
   12fae:	e7ff      	b.n	12fb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   12fb0:	9805      	ldr	r0, [sp, #20]
   12fb2:	9902      	ldr	r1, [sp, #8]
   12fb4:	f7ff ffb6 	bl	12f24 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   12fb8:	9001      	str	r0, [sp, #4]
   12fba:	e7ff      	b.n	12fbc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   12fbc:	9801      	ldr	r0, [sp, #4]
   12fbe:	900a      	str	r0, [sp, #40]	; 0x28
   12fc0:	e006      	b.n	12fd0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   12fc2:	9805      	ldr	r0, [sp, #20]
   12fc4:	9903      	ldr	r1, [sp, #12]
   12fc6:	f000 f8df 	bl	13188 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   12fca:	900a      	str	r0, [sp, #40]	; 0x28
   12fcc:	e7ff      	b.n	12fce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   12fce:	e7ff      	b.n	12fd0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   12fd0:	9805      	ldr	r0, [sp, #20]
   12fd2:	f7ff ff9d 	bl	12f10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   12fd6:	9000      	str	r0, [sp, #0]
   12fd8:	e7ff      	b.n	12fda <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   12fda:	980a      	ldr	r0, [sp, #40]	; 0x28
   12fdc:	9900      	ldr	r1, [sp, #0]
   12fde:	9108      	str	r1, [sp, #32]
   12fe0:	9009      	str	r0, [sp, #36]	; 0x24
   12fe2:	9808      	ldr	r0, [sp, #32]
   12fe4:	9909      	ldr	r1, [sp, #36]	; 0x24
   12fe6:	b010      	add	sp, #64	; 0x40
   12fe8:	bd80      	pop	{r7, pc}

00012fea <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   12fea:	b081      	sub	sp, #4
   12fec:	b001      	add	sp, #4
   12fee:	4770      	bx	lr

00012ff0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   12ff0:	b580      	push	{r7, lr}
   12ff2:	b08e      	sub	sp, #56	; 0x38
   12ff4:	9007      	str	r0, [sp, #28]
   12ff6:	6801      	ldr	r1, [r0, #0]
   12ff8:	9005      	str	r0, [sp, #20]
   12ffa:	4608      	mov	r0, r1
   12ffc:	f7ff ff8e 	bl	12f1c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13000:	9004      	str	r0, [sp, #16]
   13002:	e7ff      	b.n	13004 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   13004:	9804      	ldr	r0, [sp, #16]
   13006:	f7ff ff79 	bl	12efc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   1300a:	e7ff      	b.n	1300c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   1300c:	e7ff      	b.n	1300e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   1300e:	2001      	movs	r0, #1
   13010:	9008      	str	r0, [sp, #32]
   13012:	9808      	ldr	r0, [sp, #32]
   13014:	9003      	str	r0, [sp, #12]
   13016:	e7ff      	b.n	13018 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   13018:	9803      	ldr	r0, [sp, #12]
   1301a:	2800      	cmp	r0, #0
   1301c:	d007      	beq.n	1302e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   1301e:	e7ff      	b.n	13020 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   13020:	9805      	ldr	r0, [sp, #20]
   13022:	6840      	ldr	r0, [r0, #4]
   13024:	f7ff ff94 	bl	12f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   13028:	e7ff      	b.n	1302a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   1302a:	e7ff      	b.n	1302c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   1302c:	e7ff      	b.n	1302e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   1302e:	9805      	ldr	r0, [sp, #20]
   13030:	6800      	ldr	r0, [r0, #0]
   13032:	f7ff ff73 	bl	12f1c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13036:	9002      	str	r0, [sp, #8]
   13038:	e7ff      	b.n	1303a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   1303a:	9805      	ldr	r0, [sp, #20]
   1303c:	6841      	ldr	r1, [r0, #4]
   1303e:	9a02      	ldr	r2, [sp, #8]
   13040:	428a      	cmp	r2, r1
   13042:	d02e      	beq.n	130a2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   13044:	e7ff      	b.n	13046 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   13046:	9805      	ldr	r0, [sp, #20]
   13048:	900a      	str	r0, [sp, #40]	; 0x28
   1304a:	2101      	movs	r1, #1
   1304c:	910b      	str	r1, [sp, #44]	; 0x2c
   1304e:	910d      	str	r1, [sp, #52]	; 0x34
   13050:	990d      	ldr	r1, [sp, #52]	; 0x34
   13052:	2900      	cmp	r1, #0
   13054:	d015      	beq.n	13082 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   13056:	e7ff      	b.n	13058 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   13058:	9805      	ldr	r0, [sp, #20]
   1305a:	6800      	ldr	r0, [r0, #0]
   1305c:	f7ff ff5e 	bl	12f1c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13060:	900c      	str	r0, [sp, #48]	; 0x30
   13062:	9905      	ldr	r1, [sp, #20]
   13064:	680a      	ldr	r2, [r1, #0]
   13066:	9001      	str	r0, [sp, #4]
   13068:	4610      	mov	r0, r2
   1306a:	f7ff ff57 	bl	12f1c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1306e:	2101      	movs	r1, #1
   13070:	f7ff ff39 	bl	12ee6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   13074:	f7ff ff4c 	bl	12f10 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   13078:	9905      	ldr	r1, [sp, #20]
   1307a:	6008      	str	r0, [r1, #0]
   1307c:	9801      	ldr	r0, [sp, #4]
   1307e:	9009      	str	r0, [sp, #36]	; 0x24
   13080:	e00c      	b.n	1309c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   13082:	9805      	ldr	r0, [sp, #20]
   13084:	6840      	ldr	r0, [r0, #4]
   13086:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1308a:	f7ff ff56 	bl	12f3a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1308e:	9905      	ldr	r1, [sp, #20]
   13090:	6048      	str	r0, [r1, #4]
   13092:	6808      	ldr	r0, [r1, #0]
   13094:	f7ff ff42 	bl	12f1c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13098:	9009      	str	r0, [sp, #36]	; 0x24
   1309a:	e7ff      	b.n	1309c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1309c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1309e:	9000      	str	r0, [sp, #0]
   130a0:	e002      	b.n	130a8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   130a2:	2000      	movs	r0, #0
   130a4:	9006      	str	r0, [sp, #24]
   130a6:	e002      	b.n	130ae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   130a8:	9800      	ldr	r0, [sp, #0]
   130aa:	9006      	str	r0, [sp, #24]
   130ac:	e7ff      	b.n	130ae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   130ae:	9806      	ldr	r0, [sp, #24]
   130b0:	b00e      	add	sp, #56	; 0x38
   130b2:	bd80      	pop	{r7, pc}

000130b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   130b4:	b081      	sub	sp, #4
   130b6:	b001      	add	sp, #4
   130b8:	4770      	bx	lr

000130ba <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   130ba:	b580      	push	{r7, lr}
   130bc:	b084      	sub	sp, #16
   130be:	9002      	str	r0, [sp, #8]
   130c0:	9103      	str	r1, [sp, #12]
   130c2:	6800      	ldr	r0, [r0, #0]
   130c4:	f000 f81c 	bl	13100 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   130c8:	9001      	str	r0, [sp, #4]
   130ca:	e7ff      	b.n	130cc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   130cc:	9801      	ldr	r0, [sp, #4]
   130ce:	f000 0001 	and.w	r0, r0, #1
   130d2:	b004      	add	sp, #16
   130d4:	bd80      	pop	{r7, pc}

000130d6 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   130d6:	b089      	sub	sp, #36	; 0x24
   130d8:	9005      	str	r0, [sp, #20]
   130da:	9106      	str	r1, [sp, #24]
   130dc:	9107      	str	r1, [sp, #28]
   130de:	9907      	ldr	r1, [sp, #28]
   130e0:	9002      	str	r0, [sp, #8]
   130e2:	9101      	str	r1, [sp, #4]
   130e4:	e7ff      	b.n	130e6 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   130e6:	9802      	ldr	r0, [sp, #8]
   130e8:	9008      	str	r0, [sp, #32]
   130ea:	9908      	ldr	r1, [sp, #32]
   130ec:	9100      	str	r1, [sp, #0]
   130ee:	e7ff      	b.n	130f0 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   130f0:	9800      	ldr	r0, [sp, #0]
   130f2:	9003      	str	r0, [sp, #12]
   130f4:	9901      	ldr	r1, [sp, #4]
   130f6:	9104      	str	r1, [sp, #16]
   130f8:	9803      	ldr	r0, [sp, #12]
   130fa:	9904      	ldr	r1, [sp, #16]
   130fc:	b009      	add	sp, #36	; 0x24
   130fe:	4770      	bx	lr

00013100 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   13100:	b580      	push	{r7, lr}
   13102:	b088      	sub	sp, #32
   13104:	9006      	str	r0, [sp, #24]
   13106:	9107      	str	r1, [sp, #28]
   13108:	9004      	str	r0, [sp, #16]
   1310a:	4608      	mov	r0, r1
   1310c:	9103      	str	r1, [sp, #12]
   1310e:	f004 fb2e 	bl	1776e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13112:	9002      	str	r0, [sp, #8]
   13114:	e7ff      	b.n	13116 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   13116:	9802      	ldr	r0, [sp, #8]
   13118:	07c1      	lsls	r1, r0, #31
   1311a:	2900      	cmp	r1, #0
   1311c:	d105      	bne.n	1312a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   1311e:	e7ff      	b.n	13120 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   13120:	9803      	ldr	r0, [sp, #12]
   13122:	f004 fb28 	bl	17776 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13126:	9001      	str	r0, [sp, #4]
   13128:	e007      	b.n	1313a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   1312a:	9804      	ldr	r0, [sp, #16]
   1312c:	9903      	ldr	r1, [sp, #12]
   1312e:	f005 f948 	bl	183c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   13132:	f88d 0017 	strb.w	r0, [sp, #23]
   13136:	e7ff      	b.n	13138 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   13138:	e015      	b.n	13166 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   1313a:	9801      	ldr	r0, [sp, #4]
   1313c:	07c1      	lsls	r1, r0, #31
   1313e:	2900      	cmp	r1, #0
   13140:	d107      	bne.n	13152 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   13142:	e7ff      	b.n	13144 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   13144:	9804      	ldr	r0, [sp, #16]
   13146:	9903      	ldr	r1, [sp, #12]
   13148:	f005 fb30 	bl	187ac <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   1314c:	f88d 0017 	strb.w	r0, [sp, #23]
   13150:	e007      	b.n	13162 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   13152:	9804      	ldr	r0, [sp, #16]
   13154:	9903      	ldr	r1, [sp, #12]
   13156:	f005 f99f 	bl	18498 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1315a:	f88d 0017 	strb.w	r0, [sp, #23]
   1315e:	e7ff      	b.n	13160 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   13160:	e000      	b.n	13164 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   13162:	e7ff      	b.n	13164 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   13164:	e7ff      	b.n	13166 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   13166:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1316a:	b008      	add	sp, #32
   1316c:	bd80      	pop	{r7, pc}

0001316e <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   1316e:	b086      	sub	sp, #24
   13170:	9004      	str	r0, [sp, #16]
   13172:	9105      	str	r1, [sp, #20]
   13174:	9002      	str	r0, [sp, #8]
   13176:	9103      	str	r1, [sp, #12]
   13178:	9802      	ldr	r0, [sp, #8]
   1317a:	9903      	ldr	r1, [sp, #12]
   1317c:	9000      	str	r0, [sp, #0]
   1317e:	9101      	str	r1, [sp, #4]
   13180:	9800      	ldr	r0, [sp, #0]
   13182:	9901      	ldr	r1, [sp, #4]
   13184:	b006      	add	sp, #24
   13186:	4770      	bx	lr

00013188 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   13188:	b580      	push	{r7, lr}
   1318a:	b084      	sub	sp, #16
   1318c:	9002      	str	r0, [sp, #8]
   1318e:	9103      	str	r1, [sp, #12]
   13190:	f000 f805 	bl	1319e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   13194:	9001      	str	r0, [sp, #4]
   13196:	e7ff      	b.n	13198 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   13198:	9801      	ldr	r0, [sp, #4]
   1319a:	b004      	add	sp, #16
   1319c:	bd80      	pop	{r7, pc}

0001319e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   1319e:	b084      	sub	sp, #16
   131a0:	9001      	str	r0, [sp, #4]
   131a2:	9102      	str	r1, [sp, #8]
   131a4:	4408      	add	r0, r1
   131a6:	9003      	str	r0, [sp, #12]
   131a8:	9803      	ldr	r0, [sp, #12]
   131aa:	9000      	str	r0, [sp, #0]
   131ac:	e7ff      	b.n	131ae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   131ae:	9800      	ldr	r0, [sp, #0]
   131b0:	b004      	add	sp, #16
   131b2:	4770      	bx	lr

000131b4 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   131b4:	b580      	push	{r7, lr}
   131b6:	b084      	sub	sp, #16
   131b8:	9002      	str	r0, [sp, #8]
   131ba:	9103      	str	r1, [sp, #12]
   131bc:	f7ff ffd7 	bl	1316e <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   131c0:	9001      	str	r0, [sp, #4]
   131c2:	9100      	str	r1, [sp, #0]
   131c4:	e7ff      	b.n	131c6 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   131c6:	9801      	ldr	r0, [sp, #4]
   131c8:	9900      	ldr	r1, [sp, #0]
   131ca:	b004      	add	sp, #16
   131cc:	bd80      	pop	{r7, pc}

000131ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   131ce:	b084      	sub	sp, #16
   131d0:	9002      	str	r0, [sp, #8]
   131d2:	9103      	str	r1, [sp, #12]
   131d4:	9000      	str	r0, [sp, #0]
   131d6:	9101      	str	r1, [sp, #4]
   131d8:	9801      	ldr	r0, [sp, #4]
   131da:	b004      	add	sp, #16
   131dc:	4770      	bx	lr

000131de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   131de:	b082      	sub	sp, #8
   131e0:	9000      	str	r0, [sp, #0]
   131e2:	9101      	str	r1, [sp, #4]
   131e4:	b002      	add	sp, #8
   131e6:	4770      	bx	lr

000131e8 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   131e8:	b083      	sub	sp, #12
   131ea:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   131ec:	9002      	str	r0, [sp, #8]
   131ee:	9802      	ldr	r0, [sp, #8]
   131f0:	9000      	str	r0, [sp, #0]
   131f2:	e7ff      	b.n	131f4 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   131f4:	9800      	ldr	r0, [sp, #0]
   131f6:	b003      	add	sp, #12
   131f8:	4770      	bx	lr

000131fa <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   131fa:	b081      	sub	sp, #4
   131fc:	f06f 000c 	mvn.w	r0, #12
        }
   13200:	b001      	add	sp, #4
   13202:	4770      	bx	lr

00013204 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   13204:	b082      	sub	sp, #8
   13206:	9000      	str	r0, [sp, #0]
   13208:	9101      	str	r1, [sp, #4]
   1320a:	2000      	movs	r0, #0
        }
   1320c:	b002      	add	sp, #8
   1320e:	4770      	bx	lr

00013210 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   13210:	b082      	sub	sp, #8
   13212:	9000      	str	r0, [sp, #0]
   13214:	9101      	str	r1, [sp, #4]
   13216:	7800      	ldrb	r0, [r0, #0]
   13218:	7809      	ldrb	r1, [r1, #0]
   1321a:	1a40      	subs	r0, r0, r1
   1321c:	fab0 f080 	clz	r0, r0
   13220:	0940      	lsrs	r0, r0, #5
   13222:	b002      	add	sp, #8
   13224:	4770      	bx	lr

00013226 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   13226:	b580      	push	{r7, lr}
   13228:	b084      	sub	sp, #16
   1322a:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1322c:	f002 ffc4 	bl	161b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>
   13230:	9002      	str	r0, [sp, #8]
   13232:	9101      	str	r1, [sp, #4]
   13234:	e7ff      	b.n	13236 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE+0x10>
    }
   13236:	9802      	ldr	r0, [sp, #8]
   13238:	9901      	ldr	r1, [sp, #4]
   1323a:	b004      	add	sp, #16
   1323c:	bd80      	pop	{r7, pc}

0001323e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   1323e:	b580      	push	{r7, lr}
   13240:	b084      	sub	sp, #16
   13242:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   13244:	f002 ffcd 	bl	161e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   13248:	9002      	str	r0, [sp, #8]
   1324a:	9101      	str	r1, [sp, #4]
   1324c:	e7ff      	b.n	1324e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   1324e:	9802      	ldr	r0, [sp, #8]
   13250:	9901      	ldr	r1, [sp, #4]
   13252:	b004      	add	sp, #16
   13254:	bd80      	pop	{r7, pc}

00013256 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   13256:	b580      	push	{r7, lr}
   13258:	b084      	sub	sp, #16
   1325a:	9001      	str	r0, [sp, #4]
   1325c:	9102      	str	r1, [sp, #8]
   1325e:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   13260:	f002 ff0c 	bl	1607c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>
   13264:	9000      	str	r0, [sp, #0]
   13266:	e7ff      	b.n	13268 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E+0x12>
    }
   13268:	9800      	ldr	r0, [sp, #0]
   1326a:	f000 0001 	and.w	r0, r0, #1
   1326e:	b004      	add	sp, #16
   13270:	bd80      	pop	{r7, pc}

00013272 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   13272:	b580      	push	{r7, lr}
   13274:	b086      	sub	sp, #24
   13276:	460a      	mov	r2, r1
   13278:	9004      	str	r0, [sp, #16]
   1327a:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   1327e:	9203      	str	r2, [sp, #12]
   13280:	f002 ff5f 	bl	16142 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   13284:	9002      	str	r0, [sp, #8]
   13286:	9101      	str	r1, [sp, #4]
   13288:	e7ff      	b.n	1328a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   1328a:	9802      	ldr	r0, [sp, #8]
   1328c:	f000 0001 	and.w	r0, r0, #1
   13290:	9901      	ldr	r1, [sp, #4]
   13292:	b006      	add	sp, #24
   13294:	bd80      	pop	{r7, pc}

00013296 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>:
    pub fn clear(&mut self) {
   13296:	b580      	push	{r7, lr}
   13298:	b082      	sub	sp, #8
   1329a:	9001      	str	r0, [sp, #4]
        self.0.clear()
   1329c:	f002 ff83 	bl	161a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>
   132a0:	e7ff      	b.n	132a2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E+0xc>
    }
   132a2:	b002      	add	sp, #8
   132a4:	bd80      	pop	{r7, pc}

000132a6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   132a6:	b580      	push	{r7, lr}
   132a8:	b082      	sub	sp, #8
   132aa:	9001      	str	r0, [sp, #4]
        self.0.clear()
   132ac:	f002 ff72 	bl	16194 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   132b0:	e7ff      	b.n	132b2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   132b2:	b002      	add	sp, #8
   132b4:	bd80      	pop	{r7, pc}

000132b6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   132b6:	b580      	push	{r7, lr}
   132b8:	b088      	sub	sp, #32
   132ba:	9006      	str	r0, [sp, #24]
   132bc:	9107      	str	r1, [sp, #28]
   132be:	9004      	str	r0, [sp, #16]
   132c0:	4608      	mov	r0, r1
   132c2:	9103      	str	r1, [sp, #12]
   132c4:	f004 fa53 	bl	1776e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   132c8:	9002      	str	r0, [sp, #8]
   132ca:	e7ff      	b.n	132cc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   132cc:	9802      	ldr	r0, [sp, #8]
   132ce:	07c1      	lsls	r1, r0, #31
   132d0:	2900      	cmp	r1, #0
   132d2:	d105      	bne.n	132e0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   132d4:	e7ff      	b.n	132d6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   132d6:	9803      	ldr	r0, [sp, #12]
   132d8:	f004 fa4d 	bl	17776 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   132dc:	9001      	str	r0, [sp, #4]
   132de:	e007      	b.n	132f0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   132e0:	9804      	ldr	r0, [sp, #16]
   132e2:	9903      	ldr	r1, [sp, #12]
   132e4:	f004 ff51 	bl	1818a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   132e8:	f88d 0017 	strb.w	r0, [sp, #23]
   132ec:	e7ff      	b.n	132ee <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   132ee:	e015      	b.n	1331c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   132f0:	9801      	ldr	r0, [sp, #4]
   132f2:	07c1      	lsls	r1, r0, #31
   132f4:	2900      	cmp	r1, #0
   132f6:	d107      	bne.n	13308 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   132f8:	e7ff      	b.n	132fa <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   132fa:	9804      	ldr	r0, [sp, #16]
   132fc:	9903      	ldr	r1, [sp, #12]
   132fe:	f005 f936 	bl	1856e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   13302:	f88d 0017 	strb.w	r0, [sp, #23]
   13306:	e007      	b.n	13318 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   13308:	9804      	ldr	r0, [sp, #16]
   1330a:	9903      	ldr	r1, [sp, #12]
   1330c:	f004 ff6c 	bl	181e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   13310:	f88d 0017 	strb.w	r0, [sp, #23]
   13314:	e7ff      	b.n	13316 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   13316:	e000      	b.n	1331a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   13318:	e7ff      	b.n	1331a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1331a:	e7ff      	b.n	1331c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   1331c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13320:	b008      	add	sp, #32
   13322:	bd80      	pop	{r7, pc}

00013324 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   13324:	b580      	push	{r7, lr}
   13326:	b088      	sub	sp, #32
   13328:	9006      	str	r0, [sp, #24]
   1332a:	9107      	str	r1, [sp, #28]
   1332c:	9004      	str	r0, [sp, #16]
   1332e:	4608      	mov	r0, r1
   13330:	9103      	str	r1, [sp, #12]
   13332:	f004 fa1c 	bl	1776e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13336:	9002      	str	r0, [sp, #8]
   13338:	e7ff      	b.n	1333a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   1333a:	9802      	ldr	r0, [sp, #8]
   1333c:	07c1      	lsls	r1, r0, #31
   1333e:	2900      	cmp	r1, #0
   13340:	d105      	bne.n	1334e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   13342:	e7ff      	b.n	13344 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   13344:	9803      	ldr	r0, [sp, #12]
   13346:	f004 fa16 	bl	17776 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1334a:	9001      	str	r0, [sp, #4]
   1334c:	e007      	b.n	1335e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   1334e:	9804      	ldr	r0, [sp, #16]
   13350:	9903      	ldr	r1, [sp, #12]
   13352:	f005 f836 	bl	183c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   13356:	f88d 0017 	strb.w	r0, [sp, #23]
   1335a:	e7ff      	b.n	1335c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   1335c:	e015      	b.n	1338a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   1335e:	9801      	ldr	r0, [sp, #4]
   13360:	07c1      	lsls	r1, r0, #31
   13362:	2900      	cmp	r1, #0
   13364:	d107      	bne.n	13376 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   13366:	e7ff      	b.n	13368 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   13368:	9804      	ldr	r0, [sp, #16]
   1336a:	9903      	ldr	r1, [sp, #12]
   1336c:	f005 f9a4 	bl	186b8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   13370:	f88d 0017 	strb.w	r0, [sp, #23]
   13374:	e007      	b.n	13386 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   13376:	9804      	ldr	r0, [sp, #16]
   13378:	9903      	ldr	r1, [sp, #12]
   1337a:	f005 f88d 	bl	18498 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1337e:	f88d 0017 	strb.w	r0, [sp, #23]
   13382:	e7ff      	b.n	13384 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   13384:	e000      	b.n	13388 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   13386:	e7ff      	b.n	13388 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   13388:	e7ff      	b.n	1338a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   1338a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1338e:	b008      	add	sp, #32
   13390:	bd80      	pop	{r7, pc}

00013392 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   13392:	b580      	push	{r7, lr}
   13394:	b088      	sub	sp, #32
   13396:	9006      	str	r0, [sp, #24]
   13398:	9107      	str	r1, [sp, #28]
   1339a:	9004      	str	r0, [sp, #16]
   1339c:	4608      	mov	r0, r1
   1339e:	9103      	str	r1, [sp, #12]
   133a0:	f004 f9e5 	bl	1776e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   133a4:	9002      	str	r0, [sp, #8]
   133a6:	e7ff      	b.n	133a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   133a8:	9802      	ldr	r0, [sp, #8]
   133aa:	07c1      	lsls	r1, r0, #31
   133ac:	2900      	cmp	r1, #0
   133ae:	d105      	bne.n	133bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   133b0:	e7ff      	b.n	133b2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   133b2:	9803      	ldr	r0, [sp, #12]
   133b4:	f004 f9df 	bl	17776 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   133b8:	9001      	str	r0, [sp, #4]
   133ba:	e007      	b.n	133cc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   133bc:	9804      	ldr	r0, [sp, #16]
   133be:	9903      	ldr	r1, [sp, #12]
   133c0:	f004 ffff 	bl	183c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   133c4:	f88d 0017 	strb.w	r0, [sp, #23]
   133c8:	e7ff      	b.n	133ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   133ca:	e015      	b.n	133f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   133cc:	9801      	ldr	r0, [sp, #4]
   133ce:	07c1      	lsls	r1, r0, #31
   133d0:	2900      	cmp	r1, #0
   133d2:	d107      	bne.n	133e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   133d4:	e7ff      	b.n	133d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   133d6:	9804      	ldr	r0, [sp, #16]
   133d8:	9903      	ldr	r1, [sp, #12]
   133da:	f005 f9e7 	bl	187ac <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   133de:	f88d 0017 	strb.w	r0, [sp, #23]
   133e2:	e007      	b.n	133f4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   133e4:	9804      	ldr	r0, [sp, #16]
   133e6:	9903      	ldr	r1, [sp, #12]
   133e8:	f005 f856 	bl	18498 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   133ec:	f88d 0017 	strb.w	r0, [sp, #23]
   133f0:	e7ff      	b.n	133f2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   133f2:	e000      	b.n	133f6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   133f4:	e7ff      	b.n	133f6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   133f6:	e7ff      	b.n	133f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   133f8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   133fc:	b008      	add	sp, #32
   133fe:	bd80      	pop	{r7, pc}

00013400 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   13400:	b580      	push	{r7, lr}
   13402:	b084      	sub	sp, #16
   13404:	9002      	str	r0, [sp, #8]
   13406:	9103      	str	r1, [sp, #12]
   13408:	6800      	ldr	r0, [r0, #0]
   1340a:	6809      	ldr	r1, [r1, #0]
   1340c:	f7ff ff00 	bl	13210 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   13410:	9001      	str	r0, [sp, #4]
   13412:	e7ff      	b.n	13414 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   13414:	9801      	ldr	r0, [sp, #4]
   13416:	f000 0001 	and.w	r0, r0, #1
   1341a:	b004      	add	sp, #16
   1341c:	bd80      	pop	{r7, pc}

0001341e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   1341e:	b5b0      	push	{r4, r5, r7, lr}
   13420:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   13424:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   13426:	f006 f8a3 	bl	19570 <hal_spi_disable>
   1342a:	e7ff      	b.n	1342c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   1342c:	f240 01f8 	movw	r1, #248	; 0xf8
   13430:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13434:	2000      	movs	r0, #0
   13436:	f006 f859 	bl	194ec <hal_spi_config>
   1343a:	906a      	str	r0, [sp, #424]	; 0x1a8
   1343c:	e7ff      	b.n	1343e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   1343e:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   13442:	f2c0 0001 	movt	r0, #1
   13446:	6800      	ldr	r0, [r0, #0]
   13448:	a96a      	add	r1, sp, #424	; 0x1a8
   1344a:	916b      	str	r1, [sp, #428]	; 0x1ac
   1344c:	906c      	str	r0, [sp, #432]	; 0x1b0
   1344e:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   13450:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   13454:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   13456:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   1345a:	6802      	ldr	r2, [r0, #0]
   1345c:	680b      	ldr	r3, [r1, #0]
   1345e:	429a      	cmp	r2, r3
   13460:	9068      	str	r0, [sp, #416]	; 0x1a0
   13462:	9167      	str	r1, [sp, #412]	; 0x19c
   13464:	d10c      	bne.n	13480 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   13466:	e7ff      	b.n	13468 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   13468:	f241 60b4 	movw	r0, #5812	; 0x16b4
   1346c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13470:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   13474:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   13478:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   1347c:	9066      	str	r0, [sp, #408]	; 0x198
   1347e:	e075      	b.n	1356c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   13480:	f24f 7020 	movw	r0, #63264	; 0xf720
   13484:	f2c0 0001 	movt	r0, #1
   13488:	6801      	ldr	r1, [r0, #0]
   1348a:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   1348c:	907c      	str	r0, [sp, #496]	; 0x1f0
   1348e:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   13490:	927d      	str	r2, [sp, #500]	; 0x1f4
   13492:	f24f 733c 	movw	r3, #63292	; 0xf73c
   13496:	f2c0 0301 	movt	r3, #1
   1349a:	681b      	ldr	r3, [r3, #0]
   1349c:	f24f 7c40 	movw	ip, #63296	; 0xf740
   134a0:	f2c0 0c01 	movt	ip, #1
   134a4:	f8dc c000 	ldr.w	ip, [ip]
   134a8:	46ee      	mov	lr, sp
   134aa:	2400      	movs	r4, #0
   134ac:	f8ce 4000 	str.w	r4, [lr]
   134b0:	a87e      	add	r0, sp, #504	; 0x1f8
   134b2:	2201      	movs	r2, #1
   134b4:	9165      	str	r1, [sp, #404]	; 0x194
   134b6:	4619      	mov	r1, r3
   134b8:	4663      	mov	r3, ip
   134ba:	f7fb fe6e 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   134be:	e7ff      	b.n	134c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   134c0:	a87c      	add	r0, sp, #496	; 0x1f0
   134c2:	9079      	str	r0, [sp, #484]	; 0x1e4
   134c4:	a87d      	add	r0, sp, #500	; 0x1f4
   134c6:	907a      	str	r0, [sp, #488]	; 0x1e8
   134c8:	a87e      	add	r0, sp, #504	; 0x1f8
   134ca:	907b      	str	r0, [sp, #492]	; 0x1ec
   134cc:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   134ce:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   134d2:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   134d4:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   134d8:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   134da:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   134de:	f64f 7327 	movw	r3, #65319	; 0xff27
   134e2:	f2c0 0300 	movt	r3, #0
   134e6:	9164      	str	r1, [sp, #400]	; 0x190
   134e8:	4619      	mov	r1, r3
   134ea:	9263      	str	r2, [sp, #396]	; 0x18c
   134ec:	f7fc fd53 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   134f0:	9062      	str	r0, [sp, #392]	; 0x188
   134f2:	9161      	str	r1, [sp, #388]	; 0x184
   134f4:	e7ff      	b.n	134f6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   134f6:	f64f 7127 	movw	r1, #65319	; 0xff27
   134fa:	f2c0 0100 	movt	r1, #0
   134fe:	9864      	ldr	r0, [sp, #400]	; 0x190
   13500:	f7fc fd49 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13504:	9060      	str	r0, [sp, #384]	; 0x180
   13506:	915f      	str	r1, [sp, #380]	; 0x17c
   13508:	e7ff      	b.n	1350a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   1350a:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   1350e:	f2c0 0101 	movt	r1, #1
   13512:	9863      	ldr	r0, [sp, #396]	; 0x18c
   13514:	f7fc fd7e 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13518:	905e      	str	r0, [sp, #376]	; 0x178
   1351a:	915d      	str	r1, [sp, #372]	; 0x174
   1351c:	e7ff      	b.n	1351e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   1351e:	9862      	ldr	r0, [sp, #392]	; 0x188
   13520:	9073      	str	r0, [sp, #460]	; 0x1cc
   13522:	9961      	ldr	r1, [sp, #388]	; 0x184
   13524:	9174      	str	r1, [sp, #464]	; 0x1d0
   13526:	9a60      	ldr	r2, [sp, #384]	; 0x180
   13528:	9275      	str	r2, [sp, #468]	; 0x1d4
   1352a:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   1352c:	9376      	str	r3, [sp, #472]	; 0x1d8
   1352e:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   13532:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   13536:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   1353a:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   1353e:	466c      	mov	r4, sp
   13540:	2503      	movs	r5, #3
   13542:	6025      	str	r5, [r4, #0]
   13544:	a86d      	add	r0, sp, #436	; 0x1b4
   13546:	ab73      	add	r3, sp, #460	; 0x1cc
   13548:	9965      	ldr	r1, [sp, #404]	; 0x194
   1354a:	462a      	mov	r2, r5
   1354c:	f7fb fe25 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13550:	e7ff      	b.n	13552 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   13552:	f24f 705c 	movw	r0, #63324	; 0xf75c
   13556:	f2c0 0001 	movt	r0, #1
   1355a:	f003 fa60 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1355e:	905c      	str	r0, [sp, #368]	; 0x170
   13560:	e7ff      	b.n	13562 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   13562:	a86d      	add	r0, sp, #436	; 0x1b4
   13564:	995c      	ldr	r1, [sp, #368]	; 0x170
   13566:	f003 fa97 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1356a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   1356c:	f644 1035 	movw	r0, #18741	; 0x4935
   13570:	f2c0 0001 	movt	r0, #1
   13574:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   13576:	9985      	ldr	r1, [sp, #532]	; 0x214
   13578:	2000      	movs	r0, #0
   1357a:	9a66      	ldr	r2, [sp, #408]	; 0x198
   1357c:	f006 f85c 	bl	19638 <hal_spi_set_txrx_cb>
   13580:	9084      	str	r0, [sp, #528]	; 0x210
   13582:	e7ff      	b.n	13584 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   13584:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   13588:	f2c0 0001 	movt	r0, #1
   1358c:	6800      	ldr	r0, [r0, #0]
   1358e:	a984      	add	r1, sp, #528	; 0x210
   13590:	9186      	str	r1, [sp, #536]	; 0x218
   13592:	9087      	str	r0, [sp, #540]	; 0x21c
   13594:	9886      	ldr	r0, [sp, #536]	; 0x218
   13596:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   1359a:	9987      	ldr	r1, [sp, #540]	; 0x21c
   1359c:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   135a0:	6802      	ldr	r2, [r0, #0]
   135a2:	680b      	ldr	r3, [r1, #0]
   135a4:	429a      	cmp	r2, r3
   135a6:	905b      	str	r0, [sp, #364]	; 0x16c
   135a8:	915a      	str	r1, [sp, #360]	; 0x168
   135aa:	d105      	bne.n	135b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   135ac:	e7ff      	b.n	135ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   135ae:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   135b0:	f005 ffb8 	bl	19524 <hal_spi_enable>
   135b4:	909f      	str	r0, [sp, #636]	; 0x27c
   135b6:	e075      	b.n	136a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   135b8:	f24f 7020 	movw	r0, #63264	; 0xf720
   135bc:	f2c0 0001 	movt	r0, #1
   135c0:	6801      	ldr	r1, [r0, #0]
   135c2:	985b      	ldr	r0, [sp, #364]	; 0x16c
   135c4:	9097      	str	r0, [sp, #604]	; 0x25c
   135c6:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   135c8:	9298      	str	r2, [sp, #608]	; 0x260
   135ca:	f24f 7380 	movw	r3, #63360	; 0xf780
   135ce:	f2c0 0301 	movt	r3, #1
   135d2:	681b      	ldr	r3, [r3, #0]
   135d4:	f24f 7c40 	movw	ip, #63296	; 0xf740
   135d8:	f2c0 0c01 	movt	ip, #1
   135dc:	f8dc c000 	ldr.w	ip, [ip]
   135e0:	46ee      	mov	lr, sp
   135e2:	2400      	movs	r4, #0
   135e4:	f8ce 4000 	str.w	r4, [lr]
   135e8:	a899      	add	r0, sp, #612	; 0x264
   135ea:	2201      	movs	r2, #1
   135ec:	9159      	str	r1, [sp, #356]	; 0x164
   135ee:	4619      	mov	r1, r3
   135f0:	4663      	mov	r3, ip
   135f2:	f7fb fdd2 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   135f6:	e7ff      	b.n	135f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   135f8:	a897      	add	r0, sp, #604	; 0x25c
   135fa:	9094      	str	r0, [sp, #592]	; 0x250
   135fc:	a898      	add	r0, sp, #608	; 0x260
   135fe:	9095      	str	r0, [sp, #596]	; 0x254
   13600:	a899      	add	r0, sp, #612	; 0x264
   13602:	9096      	str	r0, [sp, #600]	; 0x258
   13604:	9894      	ldr	r0, [sp, #592]	; 0x250
   13606:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   1360a:	9995      	ldr	r1, [sp, #596]	; 0x254
   1360c:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   13610:	9a96      	ldr	r2, [sp, #600]	; 0x258
   13612:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   13616:	f64f 7327 	movw	r3, #65319	; 0xff27
   1361a:	f2c0 0300 	movt	r3, #0
   1361e:	9158      	str	r1, [sp, #352]	; 0x160
   13620:	4619      	mov	r1, r3
   13622:	9257      	str	r2, [sp, #348]	; 0x15c
   13624:	f7fc fcb7 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13628:	9056      	str	r0, [sp, #344]	; 0x158
   1362a:	9155      	str	r1, [sp, #340]	; 0x154
   1362c:	e7ff      	b.n	1362e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   1362e:	f64f 7127 	movw	r1, #65319	; 0xff27
   13632:	f2c0 0100 	movt	r1, #0
   13636:	9858      	ldr	r0, [sp, #352]	; 0x160
   13638:	f7fc fcad 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1363c:	9054      	str	r0, [sp, #336]	; 0x150
   1363e:	9153      	str	r1, [sp, #332]	; 0x14c
   13640:	e7ff      	b.n	13642 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   13642:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   13646:	f2c0 0101 	movt	r1, #1
   1364a:	9857      	ldr	r0, [sp, #348]	; 0x15c
   1364c:	f7fc fce2 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13650:	9052      	str	r0, [sp, #328]	; 0x148
   13652:	9151      	str	r1, [sp, #324]	; 0x144
   13654:	e7ff      	b.n	13656 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   13656:	9856      	ldr	r0, [sp, #344]	; 0x158
   13658:	908e      	str	r0, [sp, #568]	; 0x238
   1365a:	9955      	ldr	r1, [sp, #340]	; 0x154
   1365c:	918f      	str	r1, [sp, #572]	; 0x23c
   1365e:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13660:	9290      	str	r2, [sp, #576]	; 0x240
   13662:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   13664:	9391      	str	r3, [sp, #580]	; 0x244
   13666:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   1366a:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   1366e:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   13672:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   13676:	466c      	mov	r4, sp
   13678:	2503      	movs	r5, #3
   1367a:	6025      	str	r5, [r4, #0]
   1367c:	a888      	add	r0, sp, #544	; 0x220
   1367e:	ab8e      	add	r3, sp, #568	; 0x238
   13680:	9959      	ldr	r1, [sp, #356]	; 0x164
   13682:	462a      	mov	r2, r5
   13684:	f7fb fd89 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13688:	e7ff      	b.n	1368a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   1368a:	f24f 7084 	movw	r0, #63364	; 0xf784
   1368e:	f2c0 0001 	movt	r0, #1
   13692:	f003 f9c4 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13696:	9050      	str	r0, [sp, #320]	; 0x140
   13698:	e7ff      	b.n	1369a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   1369a:	a888      	add	r0, sp, #544	; 0x220
   1369c:	9950      	ldr	r1, [sp, #320]	; 0x140
   1369e:	f003 f9fb 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   136a2:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   136a4:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   136a8:	f2c0 0001 	movt	r0, #1
   136ac:	6800      	ldr	r0, [r0, #0]
   136ae:	a99f      	add	r1, sp, #636	; 0x27c
   136b0:	91a0      	str	r1, [sp, #640]	; 0x280
   136b2:	90a1      	str	r0, [sp, #644]	; 0x284
   136b4:	98a0      	ldr	r0, [sp, #640]	; 0x280
   136b6:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   136ba:	99a1      	ldr	r1, [sp, #644]	; 0x284
   136bc:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   136c0:	6802      	ldr	r2, [r0, #0]
   136c2:	680b      	ldr	r3, [r1, #0]
   136c4:	429a      	cmp	r2, r3
   136c6:	904f      	str	r0, [sp, #316]	; 0x13c
   136c8:	914e      	str	r1, [sp, #312]	; 0x138
   136ca:	d106      	bne.n	136da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   136cc:	e7ff      	b.n	136ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   136ce:	2019      	movs	r0, #25
   136d0:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   136d2:	f005 fafd 	bl	18cd0 <hal_gpio_init_out>
   136d6:	90b9      	str	r0, [sp, #740]	; 0x2e4
   136d8:	e075      	b.n	137c6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   136da:	f24f 7020 	movw	r0, #63264	; 0xf720
   136de:	f2c0 0001 	movt	r0, #1
   136e2:	6801      	ldr	r1, [r0, #0]
   136e4:	984f      	ldr	r0, [sp, #316]	; 0x13c
   136e6:	90b1      	str	r0, [sp, #708]	; 0x2c4
   136e8:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   136ea:	92b2      	str	r2, [sp, #712]	; 0x2c8
   136ec:	f24f 73ac 	movw	r3, #63404	; 0xf7ac
   136f0:	f2c0 0301 	movt	r3, #1
   136f4:	681b      	ldr	r3, [r3, #0]
   136f6:	f24f 7c40 	movw	ip, #63296	; 0xf740
   136fa:	f2c0 0c01 	movt	ip, #1
   136fe:	f8dc c000 	ldr.w	ip, [ip]
   13702:	46ee      	mov	lr, sp
   13704:	2400      	movs	r4, #0
   13706:	f8ce 4000 	str.w	r4, [lr]
   1370a:	a8b3      	add	r0, sp, #716	; 0x2cc
   1370c:	2201      	movs	r2, #1
   1370e:	914d      	str	r1, [sp, #308]	; 0x134
   13710:	4619      	mov	r1, r3
   13712:	4663      	mov	r3, ip
   13714:	f7fb fd41 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13718:	e7ff      	b.n	1371a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   1371a:	a8b1      	add	r0, sp, #708	; 0x2c4
   1371c:	90ae      	str	r0, [sp, #696]	; 0x2b8
   1371e:	a8b2      	add	r0, sp, #712	; 0x2c8
   13720:	90af      	str	r0, [sp, #700]	; 0x2bc
   13722:	a8b3      	add	r0, sp, #716	; 0x2cc
   13724:	90b0      	str	r0, [sp, #704]	; 0x2c0
   13726:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   13728:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   1372c:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   1372e:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   13732:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   13734:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   13738:	f64f 7327 	movw	r3, #65319	; 0xff27
   1373c:	f2c0 0300 	movt	r3, #0
   13740:	914c      	str	r1, [sp, #304]	; 0x130
   13742:	4619      	mov	r1, r3
   13744:	924b      	str	r2, [sp, #300]	; 0x12c
   13746:	f7fc fc26 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1374a:	904a      	str	r0, [sp, #296]	; 0x128
   1374c:	9149      	str	r1, [sp, #292]	; 0x124
   1374e:	e7ff      	b.n	13750 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   13750:	f64f 7127 	movw	r1, #65319	; 0xff27
   13754:	f2c0 0100 	movt	r1, #0
   13758:	984c      	ldr	r0, [sp, #304]	; 0x130
   1375a:	f7fc fc1c 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1375e:	9048      	str	r0, [sp, #288]	; 0x120
   13760:	9147      	str	r1, [sp, #284]	; 0x11c
   13762:	e7ff      	b.n	13764 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   13764:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   13768:	f2c0 0101 	movt	r1, #1
   1376c:	984b      	ldr	r0, [sp, #300]	; 0x12c
   1376e:	f7fc fc51 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13772:	9046      	str	r0, [sp, #280]	; 0x118
   13774:	9145      	str	r1, [sp, #276]	; 0x114
   13776:	e7ff      	b.n	13778 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   13778:	984a      	ldr	r0, [sp, #296]	; 0x128
   1377a:	90a8      	str	r0, [sp, #672]	; 0x2a0
   1377c:	9949      	ldr	r1, [sp, #292]	; 0x124
   1377e:	91a9      	str	r1, [sp, #676]	; 0x2a4
   13780:	9a48      	ldr	r2, [sp, #288]	; 0x120
   13782:	92aa      	str	r2, [sp, #680]	; 0x2a8
   13784:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   13786:	93ab      	str	r3, [sp, #684]	; 0x2ac
   13788:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   1378c:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   13790:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   13794:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   13798:	466c      	mov	r4, sp
   1379a:	2503      	movs	r5, #3
   1379c:	6025      	str	r5, [r4, #0]
   1379e:	a8a2      	add	r0, sp, #648	; 0x288
   137a0:	aba8      	add	r3, sp, #672	; 0x2a0
   137a2:	994d      	ldr	r1, [sp, #308]	; 0x134
   137a4:	462a      	mov	r2, r5
   137a6:	f7fb fcf8 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   137aa:	e7ff      	b.n	137ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   137ac:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   137b0:	f2c0 0001 	movt	r0, #1
   137b4:	f003 f933 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   137b8:	9044      	str	r0, [sp, #272]	; 0x110
   137ba:	e7ff      	b.n	137bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   137bc:	a8a2      	add	r0, sp, #648	; 0x288
   137be:	9944      	ldr	r1, [sp, #272]	; 0x110
   137c0:	f003 f96a 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   137c4:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   137c6:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   137ca:	f2c0 0001 	movt	r0, #1
   137ce:	6800      	ldr	r0, [r0, #0]
   137d0:	a9b9      	add	r1, sp, #740	; 0x2e4
   137d2:	91ba      	str	r1, [sp, #744]	; 0x2e8
   137d4:	90bb      	str	r0, [sp, #748]	; 0x2ec
   137d6:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   137d8:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   137dc:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   137de:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   137e2:	6802      	ldr	r2, [r0, #0]
   137e4:	680b      	ldr	r3, [r1, #0]
   137e6:	429a      	cmp	r2, r3
   137e8:	9043      	str	r0, [sp, #268]	; 0x10c
   137ea:	9142      	str	r1, [sp, #264]	; 0x108
   137ec:	d106      	bne.n	137fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   137ee:	e7ff      	b.n	137f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   137f0:	2012      	movs	r0, #18
   137f2:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   137f4:	f005 fa6c 	bl	18cd0 <hal_gpio_init_out>
   137f8:	90d3      	str	r0, [sp, #844]	; 0x34c
   137fa:	e075      	b.n	138e8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   137fc:	f24f 7020 	movw	r0, #63264	; 0xf720
   13800:	f2c0 0001 	movt	r0, #1
   13804:	6801      	ldr	r1, [r0, #0]
   13806:	9843      	ldr	r0, [sp, #268]	; 0x10c
   13808:	90cb      	str	r0, [sp, #812]	; 0x32c
   1380a:	9a42      	ldr	r2, [sp, #264]	; 0x108
   1380c:	92cc      	str	r2, [sp, #816]	; 0x330
   1380e:	f24f 73d4 	movw	r3, #63444	; 0xf7d4
   13812:	f2c0 0301 	movt	r3, #1
   13816:	681b      	ldr	r3, [r3, #0]
   13818:	f24f 7c40 	movw	ip, #63296	; 0xf740
   1381c:	f2c0 0c01 	movt	ip, #1
   13820:	f8dc c000 	ldr.w	ip, [ip]
   13824:	46ee      	mov	lr, sp
   13826:	2400      	movs	r4, #0
   13828:	f8ce 4000 	str.w	r4, [lr]
   1382c:	a8cd      	add	r0, sp, #820	; 0x334
   1382e:	2201      	movs	r2, #1
   13830:	9141      	str	r1, [sp, #260]	; 0x104
   13832:	4619      	mov	r1, r3
   13834:	4663      	mov	r3, ip
   13836:	f7fb fcb0 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1383a:	e7ff      	b.n	1383c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   1383c:	a8cb      	add	r0, sp, #812	; 0x32c
   1383e:	90c8      	str	r0, [sp, #800]	; 0x320
   13840:	a8cc      	add	r0, sp, #816	; 0x330
   13842:	90c9      	str	r0, [sp, #804]	; 0x324
   13844:	a8cd      	add	r0, sp, #820	; 0x334
   13846:	90ca      	str	r0, [sp, #808]	; 0x328
   13848:	98c8      	ldr	r0, [sp, #800]	; 0x320
   1384a:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   1384e:	99c9      	ldr	r1, [sp, #804]	; 0x324
   13850:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   13854:	9aca      	ldr	r2, [sp, #808]	; 0x328
   13856:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   1385a:	f64f 7327 	movw	r3, #65319	; 0xff27
   1385e:	f2c0 0300 	movt	r3, #0
   13862:	9140      	str	r1, [sp, #256]	; 0x100
   13864:	4619      	mov	r1, r3
   13866:	923f      	str	r2, [sp, #252]	; 0xfc
   13868:	f7fc fb95 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1386c:	903e      	str	r0, [sp, #248]	; 0xf8
   1386e:	913d      	str	r1, [sp, #244]	; 0xf4
   13870:	e7ff      	b.n	13872 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   13872:	f64f 7127 	movw	r1, #65319	; 0xff27
   13876:	f2c0 0100 	movt	r1, #0
   1387a:	9840      	ldr	r0, [sp, #256]	; 0x100
   1387c:	f7fc fb8b 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13880:	903c      	str	r0, [sp, #240]	; 0xf0
   13882:	913b      	str	r1, [sp, #236]	; 0xec
   13884:	e7ff      	b.n	13886 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   13886:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   1388a:	f2c0 0101 	movt	r1, #1
   1388e:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13890:	f7fc fbc0 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13894:	903a      	str	r0, [sp, #232]	; 0xe8
   13896:	9139      	str	r1, [sp, #228]	; 0xe4
   13898:	e7ff      	b.n	1389a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   1389a:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1389c:	90c2      	str	r0, [sp, #776]	; 0x308
   1389e:	993d      	ldr	r1, [sp, #244]	; 0xf4
   138a0:	91c3      	str	r1, [sp, #780]	; 0x30c
   138a2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   138a4:	92c4      	str	r2, [sp, #784]	; 0x310
   138a6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   138a8:	93c5      	str	r3, [sp, #788]	; 0x314
   138aa:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   138ae:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   138b2:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   138b6:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   138ba:	466c      	mov	r4, sp
   138bc:	2503      	movs	r5, #3
   138be:	6025      	str	r5, [r4, #0]
   138c0:	a8bc      	add	r0, sp, #752	; 0x2f0
   138c2:	abc2      	add	r3, sp, #776	; 0x308
   138c4:	9941      	ldr	r1, [sp, #260]	; 0x104
   138c6:	462a      	mov	r2, r5
   138c8:	f7fb fc67 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138cc:	e7ff      	b.n	138ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   138ce:	f24f 70d8 	movw	r0, #63448	; 0xf7d8
   138d2:	f2c0 0001 	movt	r0, #1
   138d6:	f003 f8a2 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   138da:	9038      	str	r0, [sp, #224]	; 0xe0
   138dc:	e7ff      	b.n	138de <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   138de:	a8bc      	add	r0, sp, #752	; 0x2f0
   138e0:	9938      	ldr	r1, [sp, #224]	; 0xe0
   138e2:	f003 f8d9 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   138e6:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   138e8:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   138ec:	f2c0 0001 	movt	r0, #1
   138f0:	6800      	ldr	r0, [r0, #0]
   138f2:	a9d3      	add	r1, sp, #844	; 0x34c
   138f4:	91d4      	str	r1, [sp, #848]	; 0x350
   138f6:	90d5      	str	r0, [sp, #852]	; 0x354
   138f8:	98d4      	ldr	r0, [sp, #848]	; 0x350
   138fa:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   138fe:	99d5      	ldr	r1, [sp, #852]	; 0x354
   13900:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   13904:	6802      	ldr	r2, [r0, #0]
   13906:	680b      	ldr	r3, [r1, #0]
   13908:	429a      	cmp	r2, r3
   1390a:	9037      	str	r0, [sp, #220]	; 0xdc
   1390c:	9136      	str	r1, [sp, #216]	; 0xd8
   1390e:	d107      	bne.n	13920 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   13910:	e7ff      	b.n	13912 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   13912:	f241 2054 	movw	r0, #4692	; 0x1254
   13916:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1391a:	f006 fae3 	bl	19ee4 <os_eventq_init>
   1391e:	e075      	b.n	13a0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13920:	f24f 7020 	movw	r0, #63264	; 0xf720
   13924:	f2c0 0001 	movt	r0, #1
   13928:	6801      	ldr	r1, [r0, #0]
   1392a:	9837      	ldr	r0, [sp, #220]	; 0xdc
   1392c:	90e5      	str	r0, [sp, #916]	; 0x394
   1392e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   13930:	92e6      	str	r2, [sp, #920]	; 0x398
   13932:	f24f 73d4 	movw	r3, #63444	; 0xf7d4
   13936:	f2c0 0301 	movt	r3, #1
   1393a:	681b      	ldr	r3, [r3, #0]
   1393c:	f24f 7c40 	movw	ip, #63296	; 0xf740
   13940:	f2c0 0c01 	movt	ip, #1
   13944:	f8dc c000 	ldr.w	ip, [ip]
   13948:	46ee      	mov	lr, sp
   1394a:	2400      	movs	r4, #0
   1394c:	f8ce 4000 	str.w	r4, [lr]
   13950:	a8e7      	add	r0, sp, #924	; 0x39c
   13952:	2201      	movs	r2, #1
   13954:	9135      	str	r1, [sp, #212]	; 0xd4
   13956:	4619      	mov	r1, r3
   13958:	4663      	mov	r3, ip
   1395a:	f7fb fc1e 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1395e:	e7ff      	b.n	13960 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   13960:	a8e5      	add	r0, sp, #916	; 0x394
   13962:	90e2      	str	r0, [sp, #904]	; 0x388
   13964:	a8e6      	add	r0, sp, #920	; 0x398
   13966:	90e3      	str	r0, [sp, #908]	; 0x38c
   13968:	a8e7      	add	r0, sp, #924	; 0x39c
   1396a:	90e4      	str	r0, [sp, #912]	; 0x390
   1396c:	98e2      	ldr	r0, [sp, #904]	; 0x388
   1396e:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   13972:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   13974:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   13978:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   1397a:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   1397e:	f64f 7327 	movw	r3, #65319	; 0xff27
   13982:	f2c0 0300 	movt	r3, #0
   13986:	9134      	str	r1, [sp, #208]	; 0xd0
   13988:	4619      	mov	r1, r3
   1398a:	9233      	str	r2, [sp, #204]	; 0xcc
   1398c:	f7fc fb03 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13990:	9032      	str	r0, [sp, #200]	; 0xc8
   13992:	9131      	str	r1, [sp, #196]	; 0xc4
   13994:	e7ff      	b.n	13996 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   13996:	f64f 7127 	movw	r1, #65319	; 0xff27
   1399a:	f2c0 0100 	movt	r1, #0
   1399e:	9834      	ldr	r0, [sp, #208]	; 0xd0
   139a0:	f7fc faf9 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139a4:	9030      	str	r0, [sp, #192]	; 0xc0
   139a6:	912f      	str	r1, [sp, #188]	; 0xbc
   139a8:	e7ff      	b.n	139aa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   139aa:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   139ae:	f2c0 0101 	movt	r1, #1
   139b2:	9833      	ldr	r0, [sp, #204]	; 0xcc
   139b4:	f7fc fb2e 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   139b8:	902e      	str	r0, [sp, #184]	; 0xb8
   139ba:	912d      	str	r1, [sp, #180]	; 0xb4
   139bc:	e7ff      	b.n	139be <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   139be:	9832      	ldr	r0, [sp, #200]	; 0xc8
   139c0:	90dc      	str	r0, [sp, #880]	; 0x370
   139c2:	9931      	ldr	r1, [sp, #196]	; 0xc4
   139c4:	91dd      	str	r1, [sp, #884]	; 0x374
   139c6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   139c8:	92de      	str	r2, [sp, #888]	; 0x378
   139ca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   139cc:	93df      	str	r3, [sp, #892]	; 0x37c
   139ce:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   139d2:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   139d6:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   139da:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   139de:	466c      	mov	r4, sp
   139e0:	2503      	movs	r5, #3
   139e2:	6025      	str	r5, [r4, #0]
   139e4:	a8d6      	add	r0, sp, #856	; 0x358
   139e6:	abdc      	add	r3, sp, #880	; 0x370
   139e8:	9935      	ldr	r1, [sp, #212]	; 0xd4
   139ea:	462a      	mov	r2, r5
   139ec:	f7fb fbd5 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139f0:	e7ff      	b.n	139f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   139f2:	f24f 70e8 	movw	r0, #63464	; 0xf7e8
   139f6:	f2c0 0001 	movt	r0, #1
   139fa:	f003 f810 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   139fe:	902c      	str	r0, [sp, #176]	; 0xb0
   13a00:	e7ff      	b.n	13a02 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   13a02:	a8d6      	add	r0, sp, #856	; 0x358
   13a04:	992c      	ldr	r1, [sp, #176]	; 0xb0
   13a06:	f003 f847 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13a0a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   13a0c:	f244 3017 	movw	r0, #17175	; 0x4317
   13a10:	f2c0 0001 	movt	r0, #1
   13a14:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   13a16:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   13a18:	f241 203c 	movw	r0, #4668	; 0x123c
   13a1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a20:	2200      	movs	r2, #0
   13a22:	f006 fb0d 	bl	1a040 <os_mqueue_init>
   13a26:	90ed      	str	r0, [sp, #948]	; 0x3b4
   13a28:	e7ff      	b.n	13a2a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13a2a:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   13a2e:	f2c0 0001 	movt	r0, #1
   13a32:	6800      	ldr	r0, [r0, #0]
   13a34:	a9ed      	add	r1, sp, #948	; 0x3b4
   13a36:	91ef      	str	r1, [sp, #956]	; 0x3bc
   13a38:	90f0      	str	r0, [sp, #960]	; 0x3c0
   13a3a:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   13a3c:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13a40:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13a42:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13a46:	6802      	ldr	r2, [r0, #0]
   13a48:	680b      	ldr	r3, [r1, #0]
   13a4a:	429a      	cmp	r2, r3
   13a4c:	902b      	str	r0, [sp, #172]	; 0xac
   13a4e:	912a      	str	r1, [sp, #168]	; 0xa8
   13a50:	d10a      	bne.n	13a68 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13a52:	e7ff      	b.n	13a54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13a54:	f241 202c 	movw	r0, #4652	; 0x122c
   13a58:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a5c:	2100      	movs	r1, #0
   13a5e:	f006 ffe9 	bl	1aa34 <os_sem_init>
   13a62:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13a66:	e07b      	b.n	13b60 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13a68:	f24f 7020 	movw	r0, #63264	; 0xf720
   13a6c:	f2c0 0001 	movt	r0, #1
   13a70:	6801      	ldr	r1, [r0, #0]
   13a72:	982b      	ldr	r0, [sp, #172]	; 0xac
   13a74:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   13a78:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   13a7a:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13a7e:	f64f 030c 	movw	r3, #63500	; 0xf80c
   13a82:	f2c0 0301 	movt	r3, #1
   13a86:	681b      	ldr	r3, [r3, #0]
   13a88:	f24f 7c40 	movw	ip, #63296	; 0xf740
   13a8c:	f2c0 0c01 	movt	ip, #1
   13a90:	f8dc c000 	ldr.w	ip, [ip]
   13a94:	46ee      	mov	lr, sp
   13a96:	2400      	movs	r4, #0
   13a98:	f8ce 4000 	str.w	r4, [lr]
   13a9c:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13aa0:	2201      	movs	r2, #1
   13aa2:	9129      	str	r1, [sp, #164]	; 0xa4
   13aa4:	4619      	mov	r1, r3
   13aa6:	4663      	mov	r3, ip
   13aa8:	f7fb fb77 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13aac:	e7ff      	b.n	13aae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13aae:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13ab2:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13ab4:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13ab8:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13aba:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13abe:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13ac0:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13ac2:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13ac6:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13ac8:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   13acc:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13ace:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13ad2:	f64f 7327 	movw	r3, #65319	; 0xff27
   13ad6:	f2c0 0300 	movt	r3, #0
   13ada:	9128      	str	r1, [sp, #160]	; 0xa0
   13adc:	4619      	mov	r1, r3
   13ade:	9227      	str	r2, [sp, #156]	; 0x9c
   13ae0:	f7fc fa59 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ae4:	9026      	str	r0, [sp, #152]	; 0x98
   13ae6:	9125      	str	r1, [sp, #148]	; 0x94
   13ae8:	e7ff      	b.n	13aea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13aea:	f64f 7127 	movw	r1, #65319	; 0xff27
   13aee:	f2c0 0100 	movt	r1, #0
   13af2:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13af4:	f7fc fa4f 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13af8:	9024      	str	r0, [sp, #144]	; 0x90
   13afa:	9123      	str	r1, [sp, #140]	; 0x8c
   13afc:	e7ff      	b.n	13afe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13afe:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   13b02:	f2c0 0101 	movt	r1, #1
   13b06:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13b08:	f7fc fa84 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b0c:	9022      	str	r0, [sp, #136]	; 0x88
   13b0e:	9121      	str	r1, [sp, #132]	; 0x84
   13b10:	e7ff      	b.n	13b12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13b12:	9826      	ldr	r0, [sp, #152]	; 0x98
   13b14:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13b16:	9925      	ldr	r1, [sp, #148]	; 0x94
   13b18:	91f8      	str	r1, [sp, #992]	; 0x3e0
   13b1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13b1c:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13b1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13b20:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13b22:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13b26:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   13b2a:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13b2e:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13b32:	466c      	mov	r4, sp
   13b34:	2503      	movs	r5, #3
   13b36:	6025      	str	r5, [r4, #0]
   13b38:	a8f1      	add	r0, sp, #964	; 0x3c4
   13b3a:	abf7      	add	r3, sp, #988	; 0x3dc
   13b3c:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13b3e:	462a      	mov	r2, r5
   13b40:	f7fb fb2b 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b44:	e7ff      	b.n	13b46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13b46:	f64f 0010 	movw	r0, #63504	; 0xf810
   13b4a:	f2c0 0001 	movt	r0, #1
   13b4e:	f002 ff66 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b52:	9020      	str	r0, [sp, #128]	; 0x80
   13b54:	e7ff      	b.n	13b56 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13b56:	a8f1      	add	r0, sp, #964	; 0x3c4
   13b58:	9920      	ldr	r1, [sp, #128]	; 0x80
   13b5a:	f002 ff9d 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b5e:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13b60:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   13b64:	f2c0 0001 	movt	r0, #1
   13b68:	6800      	ldr	r0, [r0, #0]
   13b6a:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13b6e:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13b72:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13b76:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13b7a:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13b7e:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13b82:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13b86:	6802      	ldr	r2, [r0, #0]
   13b88:	680b      	ldr	r3, [r1, #0]
   13b8a:	429a      	cmp	r2, r3
   13b8c:	901f      	str	r0, [sp, #124]	; 0x7c
   13b8e:	911e      	str	r1, [sp, #120]	; 0x78
   13b90:	d10a      	bne.n	13ba8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13b92:	e7ff      	b.n	13b94 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13b94:	f241 2034 	movw	r0, #4660	; 0x1234
   13b98:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b9c:	2102      	movs	r1, #2
   13b9e:	f006 ff49 	bl	1aa34 <os_sem_init>
   13ba2:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13ba6:	e088      	b.n	13cba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13ba8:	f24f 7020 	movw	r0, #63264	; 0xf720
   13bac:	f2c0 0001 	movt	r0, #1
   13bb0:	6801      	ldr	r1, [r0, #0]
   13bb2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13bb4:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13bb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13bba:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13bbe:	f64f 0338 	movw	r3, #63544	; 0xf838
   13bc2:	f2c0 0301 	movt	r3, #1
   13bc6:	681b      	ldr	r3, [r3, #0]
   13bc8:	f24f 7c40 	movw	ip, #63296	; 0xf740
   13bcc:	f2c0 0c01 	movt	ip, #1
   13bd0:	f8dc c000 	ldr.w	ip, [ip]
   13bd4:	46ee      	mov	lr, sp
   13bd6:	2400      	movs	r4, #0
   13bd8:	f8ce 4000 	str.w	r4, [lr]
   13bdc:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13be0:	2201      	movs	r2, #1
   13be2:	911d      	str	r1, [sp, #116]	; 0x74
   13be4:	4619      	mov	r1, r3
   13be6:	4663      	mov	r3, ip
   13be8:	f7fb fad7 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bec:	e7ff      	b.n	13bee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13bee:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13bf2:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13bf6:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13bfa:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13bfe:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13c02:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13c06:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   13c0a:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13c0e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13c12:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13c16:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   13c1a:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13c1e:	f64f 737b 	movw	r3, #65403	; 0xff7b
   13c22:	f2c0 0300 	movt	r3, #0
   13c26:	911c      	str	r1, [sp, #112]	; 0x70
   13c28:	4619      	mov	r1, r3
   13c2a:	921b      	str	r2, [sp, #108]	; 0x6c
   13c2c:	f7fc f9dd 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13c30:	901a      	str	r0, [sp, #104]	; 0x68
   13c32:	9119      	str	r1, [sp, #100]	; 0x64
   13c34:	e7ff      	b.n	13c36 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13c36:	f64f 717b 	movw	r1, #65403	; 0xff7b
   13c3a:	f2c0 0100 	movt	r1, #0
   13c3e:	981c      	ldr	r0, [sp, #112]	; 0x70
   13c40:	f7fc f9d3 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13c44:	9018      	str	r0, [sp, #96]	; 0x60
   13c46:	9117      	str	r1, [sp, #92]	; 0x5c
   13c48:	e7ff      	b.n	13c4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   13c4a:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   13c4e:	f2c0 0101 	movt	r1, #1
   13c52:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13c54:	f7fc f9de 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13c58:	9016      	str	r0, [sp, #88]	; 0x58
   13c5a:	9115      	str	r1, [sp, #84]	; 0x54
   13c5c:	e7ff      	b.n	13c5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13c5e:	981a      	ldr	r0, [sp, #104]	; 0x68
   13c60:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13c64:	9919      	ldr	r1, [sp, #100]	; 0x64
   13c66:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13c6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13c6c:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13c70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13c72:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13c76:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13c7a:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13c7e:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13c82:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13c86:	466c      	mov	r4, sp
   13c88:	2503      	movs	r5, #3
   13c8a:	6025      	str	r5, [r4, #0]
   13c8c:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13c90:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13c94:	991d      	ldr	r1, [sp, #116]	; 0x74
   13c96:	462a      	mov	r2, r5
   13c98:	f7fb fa7f 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c9c:	e7ff      	b.n	13c9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13c9e:	f64f 003c 	movw	r0, #63548	; 0xf83c
   13ca2:	f2c0 0001 	movt	r0, #1
   13ca6:	f002 feba 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13caa:	9014      	str	r0, [sp, #80]	; 0x50
   13cac:	e7ff      	b.n	13cae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13cae:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13cb2:	9914      	ldr	r1, [sp, #80]	; 0x50
   13cb4:	f002 fef0 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13cb8:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13cba:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   13cbe:	f2c0 0001 	movt	r0, #1
   13cc2:	6800      	ldr	r0, [r0, #0]
   13cc4:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13cc8:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13ccc:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13cd0:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13cd4:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13cd8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13cdc:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13ce0:	6802      	ldr	r2, [r0, #0]
   13ce2:	680b      	ldr	r3, [r1, #0]
   13ce4:	429a      	cmp	r2, r3
   13ce6:	9013      	str	r0, [sp, #76]	; 0x4c
   13ce8:	9112      	str	r1, [sp, #72]	; 0x48
   13cea:	d125      	bne.n	13d38 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13cec:	e7ff      	b.n	13cee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13cee:	f64f 0068 	movw	r0, #63592	; 0xf868
   13cf2:	f2c0 0001 	movt	r0, #1
   13cf6:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13cf8:	f643 6099 	movw	r0, #16025	; 0x3e99
   13cfc:	f2c0 0001 	movt	r0, #1
   13d00:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13d04:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   13d08:	4668      	mov	r0, sp
   13d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
   13d0e:	6103      	str	r3, [r0, #16]
   13d10:	60c3      	str	r3, [r0, #12]
   13d12:	f241 23b4 	movw	r3, #4788	; 0x12b4
   13d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d1a:	6083      	str	r3, [r0, #8]
   13d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d20:	6043      	str	r3, [r0, #4]
   13d22:	230a      	movs	r3, #10
   13d24:	6003      	str	r3, [r0, #0]
   13d26:	f241 2064 	movw	r0, #4708	; 0x1264
   13d2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13d2e:	2300      	movs	r3, #0
   13d30:	f7fb fb31 	bl	f396 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13d34:	9011      	str	r0, [sp, #68]	; 0x44
   13d36:	e088      	b.n	13e4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13d38:	f24f 7020 	movw	r0, #63264	; 0xf720
   13d3c:	f2c0 0001 	movt	r0, #1
   13d40:	6801      	ldr	r1, [r0, #0]
   13d42:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13d44:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   13d48:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13d4a:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13d4e:	f64f 0338 	movw	r3, #63544	; 0xf838
   13d52:	f2c0 0301 	movt	r3, #1
   13d56:	681b      	ldr	r3, [r3, #0]
   13d58:	f24f 7c40 	movw	ip, #63296	; 0xf740
   13d5c:	f2c0 0c01 	movt	ip, #1
   13d60:	f8dc c000 	ldr.w	ip, [ip]
   13d64:	46ee      	mov	lr, sp
   13d66:	2400      	movs	r4, #0
   13d68:	f8ce 4000 	str.w	r4, [lr]
   13d6c:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13d70:	2201      	movs	r2, #1
   13d72:	9110      	str	r1, [sp, #64]	; 0x40
   13d74:	4619      	mov	r1, r3
   13d76:	4663      	mov	r3, ip
   13d78:	f7fb fa0f 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d7c:	e7ff      	b.n	13d7e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13d7e:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13d82:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13d86:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13d8a:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13d8e:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13d92:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13d96:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13d9a:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13d9e:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13da2:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13da6:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13daa:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13dae:	f64f 737b 	movw	r3, #65403	; 0xff7b
   13db2:	f2c0 0300 	movt	r3, #0
   13db6:	910f      	str	r1, [sp, #60]	; 0x3c
   13db8:	4619      	mov	r1, r3
   13dba:	920e      	str	r2, [sp, #56]	; 0x38
   13dbc:	f7fc f915 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13dc0:	900d      	str	r0, [sp, #52]	; 0x34
   13dc2:	910c      	str	r1, [sp, #48]	; 0x30
   13dc4:	e7ff      	b.n	13dc6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13dc6:	f64f 717b 	movw	r1, #65403	; 0xff7b
   13dca:	f2c0 0100 	movt	r1, #0
   13dce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13dd0:	f7fc f90b 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13dd4:	900b      	str	r0, [sp, #44]	; 0x2c
   13dd6:	910a      	str	r1, [sp, #40]	; 0x28
   13dd8:	e7ff      	b.n	13dda <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13dda:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   13dde:	f2c0 0101 	movt	r1, #1
   13de2:	980e      	ldr	r0, [sp, #56]	; 0x38
   13de4:	f7fc f916 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13de8:	9009      	str	r0, [sp, #36]	; 0x24
   13dea:	9108      	str	r1, [sp, #32]
   13dec:	e7ff      	b.n	13dee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13dee:	980d      	ldr	r0, [sp, #52]	; 0x34
   13df0:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13df4:	990c      	ldr	r1, [sp, #48]	; 0x30
   13df6:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13dfc:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e02:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13e06:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13e0a:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13e0e:	f8dd e020 	ldr.w	lr, [sp, #32]
   13e12:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13e16:	466c      	mov	r4, sp
   13e18:	2503      	movs	r5, #3
   13e1a:	6025      	str	r5, [r4, #0]
   13e1c:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13e20:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13e24:	9910      	ldr	r1, [sp, #64]	; 0x40
   13e26:	462a      	mov	r2, r5
   13e28:	f7fb f9b7 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e2c:	e7ff      	b.n	13e2e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13e2e:	f64f 004c 	movw	r0, #63564	; 0xf84c
   13e32:	f2c0 0001 	movt	r0, #1
   13e36:	f002 fdf2 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13e3a:	9007      	str	r0, [sp, #28]
   13e3c:	e7ff      	b.n	13e3e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13e3e:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13e42:	9907      	ldr	r1, [sp, #28]
   13e44:	f002 fe28 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13e48:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13e4a:	9811      	ldr	r0, [sp, #68]	; 0x44
   13e4c:	f7fb fa13 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13e50:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13e54:	e7ff      	b.n	13e56 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13e56:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13e5a:	1e41      	subs	r1, r0, #1
   13e5c:	bf18      	it	ne
   13e5e:	2101      	movne	r1, #1
   13e60:	2801      	cmp	r0, #1
   13e62:	d001      	beq.n	13e68 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13e64:	e7ff      	b.n	13e66 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13e66:	e005      	b.n	13e74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13e68:	2000      	movs	r0, #0
    Ok(())
   13e6a:	9069      	str	r0, [sp, #420]	; 0x1a4
   13e6c:	2001      	movs	r0, #1
   13e6e:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13e70:	e008      	b.n	13e84 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13e72:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13e74:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13e78:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   13e7c:	f7fb fa6e 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13e80:	9006      	str	r0, [sp, #24]
   13e82:	e003      	b.n	13e8c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13e84:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13e86:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   13e8a:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   13e8c:	9806      	ldr	r0, [sp, #24]
   13e8e:	f7fb f9e6 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13e92:	9069      	str	r0, [sp, #420]	; 0x1a4
   13e94:	e7ff      	b.n	13e96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13e96:	e7f5      	b.n	13e84 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00013e98 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   13e98:	b580      	push	{r7, lr}
   13e9a:	b082      	sub	sp, #8
   13e9c:	9001      	str	r0, [sp, #4]
    loop {
   13e9e:	e7ff      	b.n	13ea0 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13ea0:	f241 2054 	movw	r0, #4692	; 0x1254
   13ea4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13ea8:	f7fb fa5c 	bl	f364 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   13eac:	9000      	str	r0, [sp, #0]
   13eae:	e7ff      	b.n	13eb0 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13eb0:	f64f 016c 	movw	r1, #63596	; 0xf86c
   13eb4:	f2c0 0101 	movt	r1, #1
   13eb8:	f64f 0378 	movw	r3, #63608	; 0xf878
   13ebc:	f2c0 0301 	movt	r3, #1
   13ec0:	220b      	movs	r2, #11
   13ec2:	9800      	ldr	r0, [sp, #0]
   13ec4:	f7fb f998 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13ec8:	e7ff      	b.n	13eca <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   13eca:	f005 fced 	bl	198a8 <hal_watchdog_tickle>
   13ece:	e7ff      	b.n	13ed0 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13ed0:	e7e6      	b.n	13ea0 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013ed2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13ed2:	b580      	push	{r7, lr}
   13ed4:	b08c      	sub	sp, #48	; 0x30
   13ed6:	4601      	mov	r1, r0
   13ed8:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   13edc:	9104      	str	r1, [sp, #16]
   13ede:	f000 f892 	bl	14006 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13ee2:	9003      	str	r0, [sp, #12]
   13ee4:	e7ff      	b.n	13ee6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13ee6:	9803      	ldr	r0, [sp, #12]
   13ee8:	f7fb f9c5 	bl	f276 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13eec:	9006      	str	r0, [sp, #24]
   13eee:	e7ff      	b.n	13ef0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13ef0:	9806      	ldr	r0, [sp, #24]
   13ef2:	1e41      	subs	r1, r0, #1
   13ef4:	bf18      	it	ne
   13ef6:	2101      	movne	r1, #1
   13ef8:	2801      	cmp	r0, #1
   13efa:	d001      	beq.n	13f00 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   13efc:	e7ff      	b.n	13efe <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13efe:	e00c      	b.n	13f1a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13f00:	f640 2020 	movw	r0, #2592	; 0xa20
   13f04:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f08:	9904      	ldr	r1, [sp, #16]
   13f0a:	f7ff f9b2 	bl	13272 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13f0e:	f88d 101d 	strb.w	r1, [sp, #29]
   13f12:	f88d 001c 	strb.w	r0, [sp, #28]
   13f16:	e00f      	b.n	13f38 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   13f18:	defe      	udf	#254	; 0xfe
   13f1a:	9806      	ldr	r0, [sp, #24]
   13f1c:	900b      	str	r0, [sp, #44]	; 0x2c
   13f1e:	f7fb fa1d 	bl	f35c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13f22:	9002      	str	r0, [sp, #8]
   13f24:	e002      	b.n	13f2c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13f26:	9805      	ldr	r0, [sp, #20]
   13f28:	b00c      	add	sp, #48	; 0x30
   13f2a:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   13f2c:	9802      	ldr	r0, [sp, #8]
   13f2e:	f7fb f996 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13f32:	9005      	str	r0, [sp, #20]
   13f34:	e7ff      	b.n	13f36 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13f36:	e7f6      	b.n	13f26 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13f38:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13f3a:	f7fb f984 	bl	f246 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13f3e:	9001      	str	r0, [sp, #4]
   13f40:	e7ff      	b.n	13f42 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13f42:	9801      	ldr	r0, [sp, #4]
   13f44:	07c1      	lsls	r1, r0, #31
   13f46:	2900      	cmp	r1, #0
   13f48:	d105      	bne.n	13f56 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   13f4a:	e7ff      	b.n	13f4c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   13f4c:	2000      	movs	r0, #0
    Ok(())
   13f4e:	9005      	str	r0, [sp, #20]
   13f50:	2001      	movs	r0, #1
   13f52:	9005      	str	r0, [sp, #20]
}
   13f54:	e7e7      	b.n	13f26 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13f56:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   13f5a:	9008      	str	r0, [sp, #32]
   13f5c:	9808      	ldr	r0, [sp, #32]
   13f5e:	9005      	str	r0, [sp, #20]
   13f60:	e7e1      	b.n	13f26 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013f62 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13f62:	b580      	push	{r7, lr}
   13f64:	b08e      	sub	sp, #56	; 0x38
   13f66:	900a      	str	r0, [sp, #40]	; 0x28
   13f68:	910b      	str	r1, [sp, #44]	; 0x2c
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13f6a:	f640 2220 	movw	r2, #2592	; 0xa20
   13f6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f72:	9007      	str	r0, [sp, #28]
   13f74:	4610      	mov	r0, r2
   13f76:	9106      	str	r1, [sp, #24]
   13f78:	f7ff f961 	bl	1323e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13f7c:	9005      	str	r0, [sp, #20]
   13f7e:	9104      	str	r1, [sp, #16]
   13f80:	e7ff      	b.n	13f82 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13f82:	9805      	ldr	r0, [sp, #20]
   13f84:	9904      	ldr	r1, [sp, #16]
   13f86:	f7fa fcab 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13f8a:	9003      	str	r0, [sp, #12]
   13f8c:	e7ff      	b.n	13f8e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   13f8e:	9803      	ldr	r0, [sp, #12]
   13f90:	2800      	cmp	r0, #0
   13f92:	d00a      	beq.n	13faa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x48>
   13f94:	e7ff      	b.n	13f96 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13f96:	f640 2028 	movw	r0, #2600	; 0xa28
   13f9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f9e:	9907      	ldr	r1, [sp, #28]
   13fa0:	9a06      	ldr	r2, [sp, #24]
   13fa2:	f7ff f958 	bl	13256 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>
   13fa6:	9002      	str	r0, [sp, #8]
   13fa8:	e00b      	b.n	13fc2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x60>
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13faa:	f64f 0088 	movw	r0, #63624	; 0xf888
   13fae:	f2c0 0001 	movt	r0, #1
   13fb2:	f64f 02bc 	movw	r2, #63676	; 0xf8bc
   13fb6:	f2c0 0201 	movt	r2, #1
   13fba:	2132      	movs	r1, #50	; 0x32
   13fbc:	f002 fd36 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13fc0:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13fc2:	9802      	ldr	r0, [sp, #8]
   13fc4:	f000 0001 	and.w	r0, r0, #1
   13fc8:	f7fb f94f 	bl	f26a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   13fcc:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   13fd0:	e7ff      	b.n	13fd2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x70>
   13fd2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   13fd6:	07c1      	lsls	r1, r0, #31
   13fd8:	2900      	cmp	r1, #0
   13fda:	d001      	beq.n	13fe0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7e>
   13fdc:	e7ff      	b.n	13fde <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7c>
   13fde:	e005      	b.n	13fec <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x8a>
   13fe0:	2000      	movs	r0, #0
    Ok(())
   13fe2:	9008      	str	r0, [sp, #32]
   13fe4:	2001      	movs	r0, #1
   13fe6:	9008      	str	r0, [sp, #32]
}
   13fe8:	e004      	b.n	13ff4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13fea:	defe      	udf	#254	; 0xfe
   13fec:	f7ff f905 	bl	131fa <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   13ff0:	9001      	str	r0, [sp, #4]
   13ff2:	e002      	b.n	13ffa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x98>
}
   13ff4:	9808      	ldr	r0, [sp, #32]
   13ff6:	b00e      	add	sp, #56	; 0x38
   13ff8:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13ffa:	9801      	ldr	r0, [sp, #4]
   13ffc:	f7fb f92f 	bl	f25e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   14000:	9008      	str	r0, [sp, #32]
   14002:	e7ff      	b.n	14004 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa2>
   14004:	e7f6      	b.n	13ff4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>

00014006 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   14006:	b580      	push	{r7, lr}
   14008:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   1400a:	f640 2020 	movw	r0, #2592	; 0xa20
   1400e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14012:	f7ff f914 	bl	1323e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   14016:	900b      	str	r0, [sp, #44]	; 0x2c
   14018:	910a      	str	r1, [sp, #40]	; 0x28
   1401a:	e016      	b.n	1404a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   1401c:	2001      	movs	r0, #1
   1401e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   14022:	e00c      	b.n	1403e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   14024:	2000      	movs	r0, #0
   14026:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1402a:	e008      	b.n	1403e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   1402c:	f640 2028 	movw	r0, #2600	; 0xa28
   14030:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14034:	f7ff f8f7 	bl	13226 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   14038:	9009      	str	r0, [sp, #36]	; 0x24
   1403a:	9108      	str	r1, [sp, #32]
   1403c:	e00f      	b.n	1405e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   1403e:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   14042:	07c0      	lsls	r0, r0, #31
   14044:	2800      	cmp	r0, #0
   14046:	d11d      	bne.n	14084 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   14048:	e013      	b.n	14072 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   1404a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1404c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1404e:	f7fa fc47 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14052:	9007      	str	r0, [sp, #28]
   14054:	e7ff      	b.n	14056 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   14056:	9807      	ldr	r0, [sp, #28]
   14058:	2800      	cmp	r0, #0
   1405a:	d0e7      	beq.n	1402c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   1405c:	e7e2      	b.n	14024 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   1405e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14060:	9908      	ldr	r1, [sp, #32]
   14062:	f7fa fc3d 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14066:	9006      	str	r0, [sp, #24]
   14068:	e7ff      	b.n	1406a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   1406a:	9806      	ldr	r0, [sp, #24]
   1406c:	2800      	cmp	r0, #0
   1406e:	d0d5      	beq.n	1401c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   14070:	e7d8      	b.n	14024 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   14072:	f640 2020 	movw	r0, #2592	; 0xa20
   14076:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1407a:	f7ff f8e0 	bl	1323e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1407e:	9005      	str	r0, [sp, #20]
   14080:	9104      	str	r1, [sp, #16]
   14082:	e007      	b.n	14094 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   14084:	2000      	movs	r0, #0
        return Ok(());
   14086:	900c      	str	r0, [sp, #48]	; 0x30
   14088:	2001      	movs	r0, #1
   1408a:	900c      	str	r0, [sp, #48]	; 0x30
   1408c:	e7ff      	b.n	1408e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   1408e:	980c      	ldr	r0, [sp, #48]	; 0x30
   14090:	b010      	add	sp, #64	; 0x40
   14092:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   14094:	9804      	ldr	r0, [sp, #16]
   14096:	2800      	cmp	r0, #0
   14098:	d03f      	beq.n	1411a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   1409a:	e7ff      	b.n	1409c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   1409c:	9805      	ldr	r0, [sp, #20]
   1409e:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   140a0:	f640 2028 	movw	r0, #2600	; 0xa28
   140a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140a8:	9103      	str	r1, [sp, #12]
   140aa:	f7ff f8bc 	bl	13226 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   140ae:	9002      	str	r0, [sp, #8]
   140b0:	9101      	str	r1, [sp, #4]
   140b2:	e7ff      	b.n	140b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   140b4:	9803      	ldr	r0, [sp, #12]
   140b6:	9902      	ldr	r1, [sp, #8]
   140b8:	9a01      	ldr	r2, [sp, #4]
   140ba:	f000 f837 	bl	1412c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   140be:	900e      	str	r0, [sp, #56]	; 0x38
   140c0:	e7ff      	b.n	140c2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   140c2:	980e      	ldr	r0, [sp, #56]	; 0x38
   140c4:	2801      	cmp	r0, #1
   140c6:	d107      	bne.n	140d8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   140c8:	e7ff      	b.n	140ca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   140ca:	f640 2020 	movw	r0, #2592	; 0xa20
   140ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140d2:	f7ff f8e8 	bl	132a6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   140d6:	e014      	b.n	14102 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   140d8:	980e      	ldr	r0, [sp, #56]	; 0x38
   140da:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   140dc:	f640 2120 	movw	r1, #2592	; 0xa20
   140e0:	f2c2 0100 	movt	r1, #8192	; 0x2000
   140e4:	9000      	str	r0, [sp, #0]
   140e6:	4608      	mov	r0, r1
   140e8:	f7ff f8dd 	bl	132a6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   140ec:	e7ff      	b.n	140ee <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   140ee:	f640 2028 	movw	r0, #2600	; 0xa28
   140f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140f6:	f7ff f8ce 	bl	13296 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   140fa:	e7ff      	b.n	140fc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   140fc:	9800      	ldr	r0, [sp, #0]
   140fe:	900c      	str	r0, [sp, #48]	; 0x30
   14100:	e7c5      	b.n	1408e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   14102:	f640 2028 	movw	r0, #2600	; 0xa28
   14106:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1410a:	f7ff f8c4 	bl	13296 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   1410e:	e7ff      	b.n	14110 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   14110:	2000      	movs	r0, #0
    Ok(())
   14112:	900c      	str	r0, [sp, #48]	; 0x30
   14114:	2001      	movs	r0, #1
   14116:	900c      	str	r0, [sp, #48]	; 0x30
}
   14118:	e7b9      	b.n	1408e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1411a:	f64f 00cc 	movw	r0, #63692	; 0xf8cc
   1411e:	f2c0 0001 	movt	r0, #1
   14122:	2100      	movs	r1, #0
   14124:	9a04      	ldr	r2, [sp, #16]
   14126:	f002 fc97 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1412a:	defe      	udf	#254	; 0xfe

0001412c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   1412c:	b580      	push	{r7, lr}
   1412e:	b0a0      	sub	sp, #128	; 0x80
   14130:	4603      	mov	r3, r0
   14132:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   14136:	9116      	str	r1, [sp, #88]	; 0x58
   14138:	9217      	str	r2, [sp, #92]	; 0x5c
   1413a:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   1413e:	9018      	str	r0, [sp, #96]	; 0x60
   14140:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14144:	fba0 0c0c 	umull	r0, ip, r0, ip
   14148:	f1bc 0f00 	cmp.w	ip, #0
   1414c:	920f      	str	r2, [sp, #60]	; 0x3c
   1414e:	910e      	str	r1, [sp, #56]	; 0x38
   14150:	900d      	str	r0, [sp, #52]	; 0x34
   14152:	f040 80c8 	bne.w	142e6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   14156:	e7ff      	b.n	14158 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   14158:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1415c:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14160:	990d      	ldr	r1, [sp, #52]	; 0x34
   14162:	fba1 0200 	umull	r0, r2, r1, r0
   14166:	0991      	lsrs	r1, r2, #6
   14168:	f241 2234 	movw	r2, #4660	; 0x1234
   1416c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14170:	900c      	str	r0, [sp, #48]	; 0x30
   14172:	4610      	mov	r0, r2
   14174:	f006 fc98 	bl	1aaa8 <os_sem_pend>
   14178:	e7ff      	b.n	1417a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   1417a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1417c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1417e:	f7fa fbaf 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14182:	900b      	str	r0, [sp, #44]	; 0x2c
   14184:	e7ff      	b.n	14186 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   14186:	2001      	movs	r0, #1
   14188:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1418a:	fa10 f081 	uxtah	r0, r0, r1
   1418e:	b282      	uxth	r2, r0
   14190:	4603      	mov	r3, r0
   14192:	4282      	cmp	r2, r0
   14194:	930a      	str	r3, [sp, #40]	; 0x28
   14196:	f040 80b2 	bne.w	142fe <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   1419a:	e7ff      	b.n	1419c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   1419c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1419e:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   141a2:	b280      	uxth	r0, r0
   141a4:	2100      	movs	r1, #0
   141a6:	f006 f98d 	bl	1a4c4 <os_msys_get_pkthdr>
   141aa:	4601      	mov	r1, r0
   141ac:	901a      	str	r0, [sp, #104]	; 0x68
   141ae:	9109      	str	r1, [sp, #36]	; 0x24
   141b0:	e7ff      	b.n	141b2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   141b2:	9809      	ldr	r0, [sp, #36]	; 0x24
   141b4:	f000 fc7c 	bl	14ab0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   141b8:	9008      	str	r0, [sp, #32]
   141ba:	e7ff      	b.n	141bc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   141bc:	9808      	ldr	r0, [sp, #32]
   141be:	07c1      	lsls	r1, r0, #31
   141c0:	2900      	cmp	r1, #0
   141c2:	d106      	bne.n	141d2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   141c4:	e7ff      	b.n	141c6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   141c6:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   141ca:	901b      	str	r0, [sp, #108]	; 0x6c
   141cc:	991b      	ldr	r1, [sp, #108]	; 0x6c
   141ce:	9107      	str	r1, [sp, #28]
   141d0:	e010      	b.n	141f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   141d2:	f241 2034 	movw	r0, #4660	; 0x1234
   141d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141da:	f006 fc33 	bl	1aa44 <os_sem_release>
   141de:	e7ff      	b.n	141e0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   141e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   141e4:	9012      	str	r0, [sp, #72]	; 0x48
   141e6:	9812      	ldr	r0, [sp, #72]	; 0x48
   141e8:	9011      	str	r0, [sp, #68]	; 0x44
   141ea:	e002      	b.n	141f2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   141ec:	9811      	ldr	r0, [sp, #68]	; 0x44
   141ee:	b020      	add	sp, #128	; 0x80
   141f0:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   141f2:	e7fb      	b.n	141ec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   141f4:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   141f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   141f8:	9907      	ldr	r1, [sp, #28]
   141fa:	f005 ffbb 	bl	1a174 <os_mbuf_append>
   141fe:	4601      	mov	r1, r0
   14200:	901c      	str	r0, [sp, #112]	; 0x70
   14202:	9106      	str	r1, [sp, #24]
   14204:	e7ff      	b.n	14206 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   14206:	9806      	ldr	r0, [sp, #24]
   14208:	2800      	cmp	r0, #0
   1420a:	d106      	bne.n	1421a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   1420c:	e7ff      	b.n	1420e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   1420e:	980e      	ldr	r0, [sp, #56]	; 0x38
   14210:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14212:	f7fa fb6d 	bl	e8f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   14216:	9005      	str	r0, [sp, #20]
   14218:	e011      	b.n	1423e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1421a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1421c:	f005 ff8e 	bl	1a13c <os_mbuf_free_chain>
   14220:	e7ff      	b.n	14222 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14222:	f241 2034 	movw	r0, #4660	; 0x1234
   14226:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1422a:	f006 fc0b 	bl	1aa44 <os_sem_release>
   1422e:	e7ff      	b.n	14230 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   14230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   14234:	9013      	str	r0, [sp, #76]	; 0x4c
   14236:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14238:	9011      	str	r0, [sp, #68]	; 0x44
   1423a:	e7ff      	b.n	1423c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   1423c:	e7d9      	b.n	141f2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   1423e:	9805      	ldr	r0, [sp, #20]
   14240:	901d      	str	r0, [sp, #116]	; 0x74
   14242:	991d      	ldr	r1, [sp, #116]	; 0x74
   14244:	9104      	str	r1, [sp, #16]
   14246:	e7ff      	b.n	14248 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   14248:	980e      	ldr	r0, [sp, #56]	; 0x38
   1424a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1424c:	f7fa fb48 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14250:	9003      	str	r0, [sp, #12]
   14252:	e7ff      	b.n	14254 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   14254:	9803      	ldr	r0, [sp, #12]
   14256:	b282      	uxth	r2, r0
   14258:	9809      	ldr	r0, [sp, #36]	; 0x24
   1425a:	9904      	ldr	r1, [sp, #16]
   1425c:	f005 ff8a 	bl	1a174 <os_mbuf_append>
   14260:	4601      	mov	r1, r0
   14262:	901e      	str	r0, [sp, #120]	; 0x78
   14264:	9102      	str	r1, [sp, #8]
   14266:	e7ff      	b.n	14268 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   14268:	9802      	ldr	r0, [sp, #8]
   1426a:	2800      	cmp	r0, #0
   1426c:	d10f      	bne.n	1428e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   1426e:	e7ff      	b.n	14270 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   14270:	f241 203c 	movw	r0, #4668	; 0x123c
   14274:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14278:	f241 2154 	movw	r1, #4692	; 0x1254
   1427c:	f2c2 0100 	movt	r1, #8192	; 0x2000
   14280:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14282:	f005 fef9 	bl	1a078 <os_mqueue_put>
   14286:	4601      	mov	r1, r0
   14288:	901f      	str	r0, [sp, #124]	; 0x7c
   1428a:	9101      	str	r1, [sp, #4]
   1428c:	e011      	b.n	142b2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1428e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14290:	f005 ff54 	bl	1a13c <os_mbuf_free_chain>
   14294:	e7ff      	b.n	14296 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14296:	f241 2034 	movw	r0, #4660	; 0x1234
   1429a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1429e:	f006 fbd1 	bl	1aa44 <os_sem_release>
   142a2:	e7ff      	b.n	142a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   142a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   142a8:	9014      	str	r0, [sp, #80]	; 0x50
   142aa:	9814      	ldr	r0, [sp, #80]	; 0x50
   142ac:	9011      	str	r0, [sp, #68]	; 0x44
   142ae:	e7ff      	b.n	142b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   142b0:	e7c4      	b.n	1423c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   142b2:	9801      	ldr	r0, [sp, #4]
   142b4:	2800      	cmp	r0, #0
   142b6:	d105      	bne.n	142c4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   142b8:	e7ff      	b.n	142ba <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   142ba:	2000      	movs	r0, #0
    Ok(())
   142bc:	9011      	str	r0, [sp, #68]	; 0x44
   142be:	2001      	movs	r0, #1
   142c0:	9011      	str	r0, [sp, #68]	; 0x44
}
   142c2:	e793      	b.n	141ec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   142c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   142c6:	f005 ff39 	bl	1a13c <os_mbuf_free_chain>
   142ca:	e7ff      	b.n	142cc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   142cc:	f241 2034 	movw	r0, #4660	; 0x1234
   142d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   142d4:	f006 fbb6 	bl	1aa44 <os_sem_release>
   142d8:	e7ff      	b.n	142da <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   142da:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   142de:	9015      	str	r0, [sp, #84]	; 0x54
   142e0:	9815      	ldr	r0, [sp, #84]	; 0x54
   142e2:	9011      	str	r0, [sp, #68]	; 0x44
   142e4:	e7e4      	b.n	142b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   142e6:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
   142ea:	f2c0 0001 	movt	r0, #1
   142ee:	f64f 02dc 	movw	r2, #63708	; 0xf8dc
   142f2:	f2c0 0201 	movt	r2, #1
   142f6:	2121      	movs	r1, #33	; 0x21
   142f8:	f002 fb98 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   142fc:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   142fe:	f64f 1030 	movw	r0, #63792	; 0xf930
   14302:	f2c0 0001 	movt	r0, #1
   14306:	f64f 1214 	movw	r2, #63764	; 0xf914
   1430a:	f2c0 0201 	movt	r2, #1
   1430e:	211c      	movs	r1, #28
   14310:	f002 fb8c 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14314:	defe      	udf	#254	; 0xfe

00014316 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   14316:	b5b0      	push	{r4, r5, r7, lr}
   14318:	b0c4      	sub	sp, #272	; 0x110
   1431a:	9038      	str	r0, [sp, #224]	; 0xe0
   1431c:	e7ff      	b.n	1431e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   1431e:	f241 203c 	movw	r0, #4668	; 0x123c
   14322:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14326:	f005 fe94 	bl	1a052 <os_mqueue_get>
   1432a:	4601      	mov	r1, r0
   1432c:	9039      	str	r0, [sp, #228]	; 0xe4
   1432e:	911b      	str	r1, [sp, #108]	; 0x6c
   14330:	e7ff      	b.n	14332 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   14332:	981b      	ldr	r0, [sp, #108]	; 0x6c
   14334:	f000 fbbc 	bl	14ab0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14338:	901a      	str	r0, [sp, #104]	; 0x68
   1433a:	e7ff      	b.n	1433c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   1433c:	981a      	ldr	r0, [sp, #104]	; 0x68
   1433e:	07c1      	lsls	r1, r0, #31
   14340:	2900      	cmp	r1, #0
   14342:	d106      	bne.n	14352 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   14344:	e7ff      	b.n	14346 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   14346:	981b      	ldr	r0, [sp, #108]	; 0x6c
   14348:	901c      	str	r0, [sp, #112]	; 0x70
   1434a:	2101      	movs	r1, #1
        let mut first_byte = true;
   1434c:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   14350:	e001      	b.n	14356 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   14352:	b044      	add	sp, #272	; 0x110
   14354:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   14356:	981c      	ldr	r0, [sp, #112]	; 0x70
   14358:	f000 fbaa 	bl	14ab0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1435c:	9019      	str	r0, [sp, #100]	; 0x64
   1435e:	e7ff      	b.n	14360 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   14360:	9819      	ldr	r0, [sp, #100]	; 0x64
   14362:	07c1      	lsls	r1, r0, #31
   14364:	2900      	cmp	r1, #0
   14366:	d004      	beq.n	14372 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   14368:	e7ff      	b.n	1436a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   1436a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1436c:	f005 fee6 	bl	1a13c <os_mbuf_free_chain>
   14370:	e0aa      	b.n	144c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   14372:	981c      	ldr	r0, [sp, #112]	; 0x70
   14374:	6800      	ldr	r0, [r0, #0]
   14376:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   14378:	991c      	ldr	r1, [sp, #112]	; 0x70
   1437a:	88c9      	ldrh	r1, [r1, #6]
   1437c:	460a      	mov	r2, r1
   1437e:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14382:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   14386:	07c9      	lsls	r1, r1, #31
   14388:	2900      	cmp	r1, #0
   1438a:	9018      	str	r0, [sp, #96]	; 0x60
   1438c:	9217      	str	r2, [sp, #92]	; 0x5c
   1438e:	d105      	bne.n	1439c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   14390:	e7ff      	b.n	14392 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   14392:	9818      	ldr	r0, [sp, #96]	; 0x60
   14394:	903e      	str	r0, [sp, #248]	; 0xf8
   14396:	983e      	ldr	r0, [sp, #248]	; 0xf8
   14398:	9016      	str	r0, [sp, #88]	; 0x58
   1439a:	e07b      	b.n	14494 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   1439c:	2000      	movs	r0, #0
                first_byte = false;
   1439e:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   143a2:	9818      	ldr	r0, [sp, #96]	; 0x60
   143a4:	903c      	str	r0, [sp, #240]	; 0xf0
   143a6:	983c      	ldr	r0, [sp, #240]	; 0xf0
   143a8:	9015      	str	r0, [sp, #84]	; 0x54
   143aa:	e7ff      	b.n	143ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   143ac:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   143ae:	9915      	ldr	r1, [sp, #84]	; 0x54
   143b0:	9014      	str	r0, [sp, #80]	; 0x50
   143b2:	4608      	mov	r0, r1
   143b4:	9914      	ldr	r1, [sp, #80]	; 0x50
   143b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   143b8:	f000 f921 	bl	145fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   143bc:	9013      	str	r0, [sp, #76]	; 0x4c
   143be:	e7ff      	b.n	143c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   143c0:	f64f 114c 	movw	r1, #63820	; 0xf94c
   143c4:	f2c0 0101 	movt	r1, #1
   143c8:	f64f 1358 	movw	r3, #63832	; 0xf958
   143cc:	f2c0 0301 	movt	r3, #1
   143d0:	220c      	movs	r2, #12
   143d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   143d4:	f7fa ff10 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   143d8:	e7ff      	b.n	143da <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   143da:	9818      	ldr	r0, [sp, #96]	; 0x60
   143dc:	7801      	ldrb	r1, [r0, #0]
   143de:	2901      	cmp	r1, #1
   143e0:	d013      	beq.n	1440a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   143e2:	e01a      	b.n	1441a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   143e4:	2001      	movs	r0, #1
   143e6:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   143ea:	e008      	b.n	143fe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   143ec:	2000      	movs	r0, #0
   143ee:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   143f2:	e004      	b.n	143fe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   143f4:	9818      	ldr	r0, [sp, #96]	; 0x60
   143f6:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   143f8:	2929      	cmp	r1, #41	; 0x29
   143fa:	d0f3      	beq.n	143e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   143fc:	e7f6      	b.n	143ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   143fe:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   14402:	07c0      	lsls	r0, r0, #31
   14404:	2800      	cmp	r0, #0
   14406:	d113      	bne.n	14430 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   14408:	e017      	b.n	1443a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   1440a:	2001      	movs	r0, #1
   1440c:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14410:	e008      	b.n	14424 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   14412:	2000      	movs	r0, #0
   14414:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14418:	e004      	b.n	14424 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   1441a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1441c:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   1441e:	2911      	cmp	r1, #17
   14420:	d0f3      	beq.n	1440a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   14422:	e7f6      	b.n	14412 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   14424:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   14428:	07c0      	lsls	r0, r0, #31
   1442a:	2800      	cmp	r0, #0
   1442c:	d1da      	bne.n	143e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   1442e:	e7e1      	b.n	143f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   14430:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   14432:	f000 fb13 	bl	14a5c <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   14436:	e7ff      	b.n	14438 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   14438:	e7ff      	b.n	1443a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   1443a:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   1443c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1443e:	f7fa f9bf 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14442:	9012      	str	r0, [sp, #72]	; 0x48
   14444:	e7ff      	b.n	14446 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   14446:	9812      	ldr	r0, [sp, #72]	; 0x48
   14448:	903d      	str	r0, [sp, #244]	; 0xf4
   1444a:	983d      	ldr	r0, [sp, #244]	; 0xf4
   1444c:	9011      	str	r0, [sp, #68]	; 0x44
   1444e:	e7ff      	b.n	14450 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   14450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   14454:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14456:	fa10 f081 	uxtah	r0, r0, r1
   1445a:	b282      	uxth	r2, r0
   1445c:	4603      	mov	r3, r0
   1445e:	4282      	cmp	r2, r0
   14460:	9310      	str	r3, [sp, #64]	; 0x40
   14462:	f040 80c0 	bne.w	145e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   14466:	e7ff      	b.n	14468 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   14468:	9810      	ldr	r0, [sp, #64]	; 0x40
   1446a:	b281      	uxth	r1, r0
   1446c:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   1446e:	9811      	ldr	r0, [sp, #68]	; 0x44
   14470:	f000 f8c5 	bl	145fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14474:	900f      	str	r0, [sp, #60]	; 0x3c
   14476:	e7ff      	b.n	14478 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   14478:	f64f 114c 	movw	r1, #63820	; 0xf94c
   1447c:	f2c0 0101 	movt	r1, #1
   14480:	f64f 13a4 	movw	r3, #63908	; 0xf9a4
   14484:	f2c0 0301 	movt	r3, #1
   14488:	220c      	movs	r2, #12
   1448a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1448c:	f7fa feb4 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14490:	e7ff      	b.n	14492 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14492:	e015      	b.n	144c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   14494:	9817      	ldr	r0, [sp, #92]	; 0x5c
   14496:	b281      	uxth	r1, r0
   14498:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   1449a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1449c:	f000 f8af 	bl	145fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   144a0:	900e      	str	r0, [sp, #56]	; 0x38
   144a2:	e7ff      	b.n	144a4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   144a4:	f64f 114c 	movw	r1, #63820	; 0xf94c
   144a8:	f2c0 0101 	movt	r1, #1
   144ac:	f64f 13b4 	movw	r3, #63924	; 0xf9b4
   144b0:	f2c0 0301 	movt	r3, #1
   144b4:	220c      	movs	r2, #12
   144b6:	980e      	ldr	r0, [sp, #56]	; 0x38
   144b8:	f7fa fe9e 	bl	f1f8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   144bc:	e7ff      	b.n	144be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   144be:	e7ff      	b.n	144c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   144c0:	981c      	ldr	r0, [sp, #112]	; 0x70
   144c2:	68c0      	ldr	r0, [r0, #12]
   144c4:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   144c6:	e746      	b.n	14356 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   144c8:	f241 2034 	movw	r0, #4660	; 0x1234
   144cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   144d0:	f006 fab8 	bl	1aa44 <os_sem_release>
   144d4:	901e      	str	r0, [sp, #120]	; 0x78
   144d6:	e7ff      	b.n	144d8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   144d8:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   144dc:	f2c0 0001 	movt	r0, #1
   144e0:	6800      	ldr	r0, [r0, #0]
   144e2:	a91e      	add	r1, sp, #120	; 0x78
   144e4:	911f      	str	r1, [sp, #124]	; 0x7c
   144e6:	9020      	str	r0, [sp, #128]	; 0x80
   144e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   144ea:	903f      	str	r0, [sp, #252]	; 0xfc
   144ec:	9920      	ldr	r1, [sp, #128]	; 0x80
   144ee:	9140      	str	r1, [sp, #256]	; 0x100
   144f0:	6802      	ldr	r2, [r0, #0]
   144f2:	680b      	ldr	r3, [r1, #0]
   144f4:	429a      	cmp	r2, r3
   144f6:	900d      	str	r0, [sp, #52]	; 0x34
   144f8:	910c      	str	r1, [sp, #48]	; 0x30
   144fa:	d101      	bne.n	14500 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   144fc:	e7ff      	b.n	144fe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   144fe:	e70e      	b.n	1431e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   14500:	f24f 7020 	movw	r0, #63264	; 0xf720
   14504:	f2c0 0001 	movt	r0, #1
   14508:	6801      	ldr	r1, [r0, #0]
   1450a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1450c:	9030      	str	r0, [sp, #192]	; 0xc0
   1450e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14510:	9231      	str	r2, [sp, #196]	; 0xc4
   14512:	f64f 0338 	movw	r3, #63544	; 0xf838
   14516:	f2c0 0301 	movt	r3, #1
   1451a:	681b      	ldr	r3, [r3, #0]
   1451c:	f24f 7c40 	movw	ip, #63296	; 0xf740
   14520:	f2c0 0c01 	movt	ip, #1
   14524:	f8dc c000 	ldr.w	ip, [ip]
   14528:	46ee      	mov	lr, sp
   1452a:	2400      	movs	r4, #0
   1452c:	f8ce 4000 	str.w	r4, [lr]
   14530:	a832      	add	r0, sp, #200	; 0xc8
   14532:	2201      	movs	r2, #1
   14534:	910b      	str	r1, [sp, #44]	; 0x2c
   14536:	4619      	mov	r1, r3
   14538:	4663      	mov	r3, ip
   1453a:	f7fa fe2e 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1453e:	e7ff      	b.n	14540 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   14540:	a830      	add	r0, sp, #192	; 0xc0
   14542:	902d      	str	r0, [sp, #180]	; 0xb4
   14544:	a831      	add	r0, sp, #196	; 0xc4
   14546:	902e      	str	r0, [sp, #184]	; 0xb8
   14548:	a832      	add	r0, sp, #200	; 0xc8
   1454a:	902f      	str	r0, [sp, #188]	; 0xbc
   1454c:	982d      	ldr	r0, [sp, #180]	; 0xb4
   1454e:	9041      	str	r0, [sp, #260]	; 0x104
   14550:	992e      	ldr	r1, [sp, #184]	; 0xb8
   14552:	9142      	str	r1, [sp, #264]	; 0x108
   14554:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   14556:	9243      	str	r2, [sp, #268]	; 0x10c
   14558:	f64f 737b 	movw	r3, #65403	; 0xff7b
   1455c:	f2c0 0300 	movt	r3, #0
   14560:	910a      	str	r1, [sp, #40]	; 0x28
   14562:	4619      	mov	r1, r3
   14564:	9209      	str	r2, [sp, #36]	; 0x24
   14566:	f7fb fd40 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1456a:	9008      	str	r0, [sp, #32]
   1456c:	9107      	str	r1, [sp, #28]
   1456e:	e7ff      	b.n	14570 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   14570:	f64f 717b 	movw	r1, #65403	; 0xff7b
   14574:	f2c0 0100 	movt	r1, #0
   14578:	980a      	ldr	r0, [sp, #40]	; 0x28
   1457a:	f7fb fd36 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1457e:	9006      	str	r0, [sp, #24]
   14580:	9105      	str	r1, [sp, #20]
   14582:	e7ff      	b.n	14584 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   14584:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   14588:	f2c0 0101 	movt	r1, #1
   1458c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1458e:	f7fb fd41 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14592:	9004      	str	r0, [sp, #16]
   14594:	9103      	str	r1, [sp, #12]
   14596:	e7ff      	b.n	14598 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   14598:	9808      	ldr	r0, [sp, #32]
   1459a:	9027      	str	r0, [sp, #156]	; 0x9c
   1459c:	9907      	ldr	r1, [sp, #28]
   1459e:	9128      	str	r1, [sp, #160]	; 0xa0
   145a0:	9a06      	ldr	r2, [sp, #24]
   145a2:	9229      	str	r2, [sp, #164]	; 0xa4
   145a4:	9b05      	ldr	r3, [sp, #20]
   145a6:	932a      	str	r3, [sp, #168]	; 0xa8
   145a8:	f8dd c010 	ldr.w	ip, [sp, #16]
   145ac:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   145b0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   145b4:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   145b8:	466c      	mov	r4, sp
   145ba:	2503      	movs	r5, #3
   145bc:	6025      	str	r5, [r4, #0]
   145be:	a821      	add	r0, sp, #132	; 0x84
   145c0:	ab27      	add	r3, sp, #156	; 0x9c
   145c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   145c4:	462a      	mov	r2, r5
   145c6:	f7fa fde8 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   145ca:	e7ff      	b.n	145cc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   145cc:	f64f 10c4 	movw	r0, #63940	; 0xf9c4
   145d0:	f2c0 0001 	movt	r0, #1
   145d4:	f002 fa23 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   145d8:	9002      	str	r0, [sp, #8]
   145da:	e7ff      	b.n	145dc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   145dc:	a821      	add	r0, sp, #132	; 0x84
   145de:	9902      	ldr	r1, [sp, #8]
   145e0:	f002 fa5a 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   145e4:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   145e6:	f64f 1080 	movw	r0, #63872	; 0xf980
   145ea:	f2c0 0001 	movt	r0, #1
   145ee:	f64f 1268 	movw	r2, #63848	; 0xf968
   145f2:	f2c0 0201 	movt	r2, #1
   145f6:	2121      	movs	r1, #33	; 0x21
   145f8:	f002 fa18 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   145fc:	defe      	udf	#254	; 0xfe

000145fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   145fe:	b5b0      	push	{r4, r5, r7, lr}
   14600:	b0e8      	sub	sp, #416	; 0x1a0
   14602:	4613      	mov	r3, r2
   14604:	9058      	str	r0, [sp, #352]	; 0x160
   14606:	9159      	str	r1, [sp, #356]	; 0x164
   14608:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   1460c:	2900      	cmp	r1, #0
   1460e:	9121      	str	r1, [sp, #132]	; 0x84
   14610:	9020      	str	r0, [sp, #128]	; 0x80
   14612:	931f      	str	r3, [sp, #124]	; 0x7c
   14614:	d004      	beq.n	14620 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   14616:	e7ff      	b.n	14618 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   14618:	9821      	ldr	r0, [sp, #132]	; 0x84
   1461a:	2801      	cmp	r0, #1
   1461c:	db0d      	blt.n	1463a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   1461e:	e007      	b.n	14630 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   14620:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   14622:	9022      	str	r0, [sp, #136]	; 0x88
   14624:	2001      	movs	r0, #1
   14626:	9022      	str	r0, [sp, #136]	; 0x88
   14628:	e7ff      	b.n	1462a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   1462a:	9822      	ldr	r0, [sp, #136]	; 0x88
   1462c:	b068      	add	sp, #416	; 0x1a0
   1462e:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   14630:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14632:	07c1      	lsls	r1, r0, #31
   14634:	2900      	cmp	r1, #0
   14636:	d10f      	bne.n	14658 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   14638:	e00b      	b.n	14652 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   1463a:	f64f 10d4 	movw	r0, #63956	; 0xf9d4
   1463e:	f2c0 0001 	movt	r0, #1
   14642:	f64f 12e0 	movw	r2, #63968	; 0xf9e0
   14646:	f2c0 0201 	movt	r2, #1
   1464a:	210b      	movs	r1, #11
   1464c:	f002 f9ee 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14650:	defe      	udf	#254	; 0xfe
   14652:	2001      	movs	r0, #1
        else { 1 }
   14654:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   14656:	e002      	b.n	1465e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   14658:	2000      	movs	r0, #0
   1465a:	9023      	str	r0, [sp, #140]	; 0x8c
   1465c:	e7ff      	b.n	1465e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   1465e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   14660:	2012      	movs	r0, #18
   14662:	f004 fb51 	bl	18d08 <hal_gpio_write>
   14666:	e7ff      	b.n	14668 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   14668:	2019      	movs	r0, #25
   1466a:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   1466c:	f004 fb4c 	bl	18d08 <hal_gpio_write>
   14670:	e7ff      	b.n	14672 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   14672:	9821      	ldr	r0, [sp, #132]	; 0x84
   14674:	2801      	cmp	r0, #1
   14676:	d005      	beq.n	14684 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   14678:	e7ff      	b.n	1467a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   1467a:	9820      	ldr	r0, [sp, #128]	; 0x80
   1467c:	9061      	str	r0, [sp, #388]	; 0x184
   1467e:	9961      	ldr	r1, [sp, #388]	; 0x184
   14680:	911e      	str	r1, [sp, #120]	; 0x78
   14682:	e094      	b.n	147ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   14684:	9820      	ldr	r0, [sp, #128]	; 0x80
   14686:	905b      	str	r0, [sp, #364]	; 0x16c
   14688:	995b      	ldr	r1, [sp, #364]	; 0x16c
   1468a:	911d      	str	r1, [sp, #116]	; 0x74
   1468c:	e7ff      	b.n	1468e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   1468e:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   14690:	901c      	str	r0, [sp, #112]	; 0x70
   14692:	991d      	ldr	r1, [sp, #116]	; 0x74
   14694:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   14696:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14698:	f004 ffe4 	bl	19664 <hal_spi_txrx>
   1469c:	9024      	str	r0, [sp, #144]	; 0x90
   1469e:	e7ff      	b.n	146a0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   146a0:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   146a4:	f2c0 0001 	movt	r0, #1
   146a8:	6800      	ldr	r0, [r0, #0]
   146aa:	a924      	add	r1, sp, #144	; 0x90
   146ac:	9125      	str	r1, [sp, #148]	; 0x94
   146ae:	9026      	str	r0, [sp, #152]	; 0x98
   146b0:	9825      	ldr	r0, [sp, #148]	; 0x94
   146b2:	905c      	str	r0, [sp, #368]	; 0x170
   146b4:	9926      	ldr	r1, [sp, #152]	; 0x98
   146b6:	915d      	str	r1, [sp, #372]	; 0x174
   146b8:	6802      	ldr	r2, [r0, #0]
   146ba:	680b      	ldr	r3, [r1, #0]
   146bc:	429a      	cmp	r2, r3
   146be:	901b      	str	r0, [sp, #108]	; 0x6c
   146c0:	911a      	str	r1, [sp, #104]	; 0x68
   146c2:	d101      	bne.n	146c8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   146c4:	e7ff      	b.n	146c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   146c6:	e11f      	b.n	14908 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   146c8:	f24f 7020 	movw	r0, #63264	; 0xf720
   146cc:	f2c0 0001 	movt	r0, #1
   146d0:	6801      	ldr	r1, [r0, #0]
   146d2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   146d4:	9036      	str	r0, [sp, #216]	; 0xd8
   146d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   146d8:	9237      	str	r2, [sp, #220]	; 0xdc
   146da:	f64f 13f8 	movw	r3, #63992	; 0xf9f8
   146de:	f2c0 0301 	movt	r3, #1
   146e2:	681b      	ldr	r3, [r3, #0]
   146e4:	f24f 7c40 	movw	ip, #63296	; 0xf740
   146e8:	f2c0 0c01 	movt	ip, #1
   146ec:	f8dc c000 	ldr.w	ip, [ip]
   146f0:	46ee      	mov	lr, sp
   146f2:	2400      	movs	r4, #0
   146f4:	f8ce 4000 	str.w	r4, [lr]
   146f8:	a838      	add	r0, sp, #224	; 0xe0
   146fa:	2201      	movs	r2, #1
   146fc:	9119      	str	r1, [sp, #100]	; 0x64
   146fe:	4619      	mov	r1, r3
   14700:	4663      	mov	r3, ip
   14702:	f7fa fd4a 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14706:	e7ff      	b.n	14708 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   14708:	a836      	add	r0, sp, #216	; 0xd8
   1470a:	9033      	str	r0, [sp, #204]	; 0xcc
   1470c:	a837      	add	r0, sp, #220	; 0xdc
   1470e:	9034      	str	r0, [sp, #208]	; 0xd0
   14710:	a838      	add	r0, sp, #224	; 0xe0
   14712:	9035      	str	r0, [sp, #212]	; 0xd4
   14714:	9833      	ldr	r0, [sp, #204]	; 0xcc
   14716:	905e      	str	r0, [sp, #376]	; 0x178
   14718:	9934      	ldr	r1, [sp, #208]	; 0xd0
   1471a:	915f      	str	r1, [sp, #380]	; 0x17c
   1471c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   1471e:	9260      	str	r2, [sp, #384]	; 0x180
   14720:	f64f 7327 	movw	r3, #65319	; 0xff27
   14724:	f2c0 0300 	movt	r3, #0
   14728:	9118      	str	r1, [sp, #96]	; 0x60
   1472a:	4619      	mov	r1, r3
   1472c:	9217      	str	r2, [sp, #92]	; 0x5c
   1472e:	f7fb fc32 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14732:	9016      	str	r0, [sp, #88]	; 0x58
   14734:	9115      	str	r1, [sp, #84]	; 0x54
   14736:	e7ff      	b.n	14738 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   14738:	f64f 7127 	movw	r1, #65319	; 0xff27
   1473c:	f2c0 0100 	movt	r1, #0
   14740:	9818      	ldr	r0, [sp, #96]	; 0x60
   14742:	f7fb fc28 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14746:	9014      	str	r0, [sp, #80]	; 0x50
   14748:	9113      	str	r1, [sp, #76]	; 0x4c
   1474a:	e7ff      	b.n	1474c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   1474c:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   14750:	f2c0 0101 	movt	r1, #1
   14754:	9817      	ldr	r0, [sp, #92]	; 0x5c
   14756:	f7fb fc5d 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1475a:	9012      	str	r0, [sp, #72]	; 0x48
   1475c:	9111      	str	r1, [sp, #68]	; 0x44
   1475e:	e7ff      	b.n	14760 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   14760:	9816      	ldr	r0, [sp, #88]	; 0x58
   14762:	902d      	str	r0, [sp, #180]	; 0xb4
   14764:	9915      	ldr	r1, [sp, #84]	; 0x54
   14766:	912e      	str	r1, [sp, #184]	; 0xb8
   14768:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1476a:	922f      	str	r2, [sp, #188]	; 0xbc
   1476c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1476e:	9330      	str	r3, [sp, #192]	; 0xc0
   14770:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   14774:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   14778:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   1477c:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   14780:	466c      	mov	r4, sp
   14782:	2503      	movs	r5, #3
   14784:	6025      	str	r5, [r4, #0]
   14786:	a827      	add	r0, sp, #156	; 0x9c
   14788:	ab2d      	add	r3, sp, #180	; 0xb4
   1478a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1478c:	462a      	mov	r2, r5
   1478e:	f7fa fd04 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14792:	e7ff      	b.n	14794 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   14794:	f64f 10fc 	movw	r0, #63996	; 0xf9fc
   14798:	f2c0 0001 	movt	r0, #1
   1479c:	f002 f93f 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   147a0:	9010      	str	r0, [sp, #64]	; 0x40
   147a2:	e7ff      	b.n	147a4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   147a4:	a827      	add	r0, sp, #156	; 0x9c
   147a6:	9910      	ldr	r1, [sp, #64]	; 0x40
   147a8:	f002 f976 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   147ac:	defe      	udf	#254	; 0xfe
   147ae:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   147b0:	900f      	str	r0, [sp, #60]	; 0x3c
   147b2:	991e      	ldr	r1, [sp, #120]	; 0x78
   147b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   147b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   147b8:	f004 ffaa 	bl	19710 <hal_spi_txrx_noblock>
   147bc:	903e      	str	r0, [sp, #248]	; 0xf8
   147be:	e7ff      	b.n	147c0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   147c0:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   147c4:	f2c0 0001 	movt	r0, #1
   147c8:	6800      	ldr	r0, [r0, #0]
   147ca:	a93e      	add	r1, sp, #248	; 0xf8
   147cc:	913f      	str	r1, [sp, #252]	; 0xfc
   147ce:	9040      	str	r0, [sp, #256]	; 0x100
   147d0:	983f      	ldr	r0, [sp, #252]	; 0xfc
   147d2:	9062      	str	r0, [sp, #392]	; 0x188
   147d4:	9940      	ldr	r1, [sp, #256]	; 0x100
   147d6:	9163      	str	r1, [sp, #396]	; 0x18c
   147d8:	6802      	ldr	r2, [r0, #0]
   147da:	680b      	ldr	r3, [r1, #0]
   147dc:	429a      	cmp	r2, r3
   147de:	900e      	str	r0, [sp, #56]	; 0x38
   147e0:	910d      	str	r1, [sp, #52]	; 0x34
   147e2:	d10c      	bne.n	147fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   147e4:	e7ff      	b.n	147e6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   147e6:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   147ea:	9067      	str	r0, [sp, #412]	; 0x19c
   147ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   147f0:	fba0 0101 	umull	r0, r1, r0, r1
   147f4:	2900      	cmp	r1, #0
   147f6:	900c      	str	r0, [sp, #48]	; 0x30
   147f8:	f040 8090 	bne.w	1491c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   147fc:	e072      	b.n	148e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   147fe:	f24f 7020 	movw	r0, #63264	; 0xf720
   14802:	f2c0 0001 	movt	r0, #1
   14806:	6801      	ldr	r1, [r0, #0]
   14808:	980e      	ldr	r0, [sp, #56]	; 0x38
   1480a:	9050      	str	r0, [sp, #320]	; 0x140
   1480c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1480e:	9251      	str	r2, [sp, #324]	; 0x144
   14810:	f64f 13f8 	movw	r3, #63992	; 0xf9f8
   14814:	f2c0 0301 	movt	r3, #1
   14818:	681b      	ldr	r3, [r3, #0]
   1481a:	f24f 7c40 	movw	ip, #63296	; 0xf740
   1481e:	f2c0 0c01 	movt	ip, #1
   14822:	f8dc c000 	ldr.w	ip, [ip]
   14826:	46ee      	mov	lr, sp
   14828:	2400      	movs	r4, #0
   1482a:	f8ce 4000 	str.w	r4, [lr]
   1482e:	a852      	add	r0, sp, #328	; 0x148
   14830:	2201      	movs	r2, #1
   14832:	910b      	str	r1, [sp, #44]	; 0x2c
   14834:	4619      	mov	r1, r3
   14836:	4663      	mov	r3, ip
   14838:	f7fa fcaf 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1483c:	e7ff      	b.n	1483e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   1483e:	a850      	add	r0, sp, #320	; 0x140
   14840:	904d      	str	r0, [sp, #308]	; 0x134
   14842:	a851      	add	r0, sp, #324	; 0x144
   14844:	904e      	str	r0, [sp, #312]	; 0x138
   14846:	a852      	add	r0, sp, #328	; 0x148
   14848:	904f      	str	r0, [sp, #316]	; 0x13c
   1484a:	984d      	ldr	r0, [sp, #308]	; 0x134
   1484c:	9064      	str	r0, [sp, #400]	; 0x190
   1484e:	994e      	ldr	r1, [sp, #312]	; 0x138
   14850:	9165      	str	r1, [sp, #404]	; 0x194
   14852:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   14854:	9266      	str	r2, [sp, #408]	; 0x198
   14856:	f64f 7327 	movw	r3, #65319	; 0xff27
   1485a:	f2c0 0300 	movt	r3, #0
   1485e:	910a      	str	r1, [sp, #40]	; 0x28
   14860:	4619      	mov	r1, r3
   14862:	9209      	str	r2, [sp, #36]	; 0x24
   14864:	f7fb fb97 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14868:	9008      	str	r0, [sp, #32]
   1486a:	9107      	str	r1, [sp, #28]
   1486c:	e7ff      	b.n	1486e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   1486e:	f64f 7127 	movw	r1, #65319	; 0xff27
   14872:	f2c0 0100 	movt	r1, #0
   14876:	980a      	ldr	r0, [sp, #40]	; 0x28
   14878:	f7fb fb8d 	bl	ff96 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1487c:	9006      	str	r0, [sp, #24]
   1487e:	9105      	str	r1, [sp, #20]
   14880:	e7ff      	b.n	14882 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   14882:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   14886:	f2c0 0101 	movt	r1, #1
   1488a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1488c:	f7fb fbc2 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14890:	9004      	str	r0, [sp, #16]
   14892:	9103      	str	r1, [sp, #12]
   14894:	e7ff      	b.n	14896 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   14896:	9808      	ldr	r0, [sp, #32]
   14898:	9047      	str	r0, [sp, #284]	; 0x11c
   1489a:	9907      	ldr	r1, [sp, #28]
   1489c:	9148      	str	r1, [sp, #288]	; 0x120
   1489e:	9a06      	ldr	r2, [sp, #24]
   148a0:	9249      	str	r2, [sp, #292]	; 0x124
   148a2:	9b05      	ldr	r3, [sp, #20]
   148a4:	934a      	str	r3, [sp, #296]	; 0x128
   148a6:	f8dd c010 	ldr.w	ip, [sp, #16]
   148aa:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   148ae:	f8dd e00c 	ldr.w	lr, [sp, #12]
   148b2:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   148b6:	466c      	mov	r4, sp
   148b8:	2503      	movs	r5, #3
   148ba:	6025      	str	r5, [r4, #0]
   148bc:	a841      	add	r0, sp, #260	; 0x104
   148be:	ab47      	add	r3, sp, #284	; 0x11c
   148c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   148c2:	462a      	mov	r2, r5
   148c4:	f7fa fc69 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   148c8:	e7ff      	b.n	148ca <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   148ca:	f64f 200c 	movw	r0, #64012	; 0xfa0c
   148ce:	f2c0 0001 	movt	r0, #1
   148d2:	f002 f8a4 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   148d6:	9002      	str	r0, [sp, #8]
   148d8:	e7ff      	b.n	148da <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   148da:	a841      	add	r0, sp, #260	; 0x104
   148dc:	9902      	ldr	r1, [sp, #8]
   148de:	f002 f8db 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   148e2:	defe      	udf	#254	; 0xfe
   148e4:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   148e8:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   148ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   148ee:	fba1 0200 	umull	r0, r2, r1, r0
   148f2:	0991      	lsrs	r1, r2, #6
   148f4:	f241 222c 	movw	r2, #4652	; 0x122c
   148f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148fc:	9001      	str	r0, [sp, #4]
   148fe:	4610      	mov	r0, r2
   14900:	f006 f8d2 	bl	1aaa8 <os_sem_pend>
   14904:	e7ff      	b.n	14906 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   14906:	e7ff      	b.n	14908 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   14908:	2019      	movs	r0, #25
   1490a:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   1490c:	f004 f9fc 	bl	18d08 <hal_gpio_write>
   14910:	e7ff      	b.n	14912 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   14912:	2000      	movs	r0, #0
    Ok(())
   14914:	9022      	str	r0, [sp, #136]	; 0x88
   14916:	2001      	movs	r0, #1
   14918:	9022      	str	r0, [sp, #136]	; 0x88
}
   1491a:	e686      	b.n	1462a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1491c:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
   14920:	f2c0 0001 	movt	r0, #1
   14924:	f64f 221c 	movw	r2, #64028	; 0xfa1c
   14928:	f2c0 0201 	movt	r2, #1
   1492c:	2121      	movs	r1, #33	; 0x21
   1492e:	f002 f87d 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14932:	defe      	udf	#254	; 0xfe

00014934 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   14934:	b5b0      	push	{r4, r5, r7, lr}
   14936:	b0ae      	sub	sp, #184	; 0xb8
   14938:	9027      	str	r0, [sp, #156]	; 0x9c
   1493a:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   1493c:	f241 202c 	movw	r0, #4652	; 0x122c
   14940:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14944:	f006 f87e 	bl	1aa44 <os_sem_release>
   14948:	900d      	str	r0, [sp, #52]	; 0x34
   1494a:	e7ff      	b.n	1494c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   1494c:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   14950:	f2c0 0001 	movt	r0, #1
   14954:	6800      	ldr	r0, [r0, #0]
   14956:	a90d      	add	r1, sp, #52	; 0x34
   14958:	910e      	str	r1, [sp, #56]	; 0x38
   1495a:	900f      	str	r0, [sp, #60]	; 0x3c
   1495c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1495e:	9029      	str	r0, [sp, #164]	; 0xa4
   14960:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14962:	912a      	str	r1, [sp, #168]	; 0xa8
   14964:	6802      	ldr	r2, [r0, #0]
   14966:	680b      	ldr	r3, [r1, #0]
   14968:	429a      	cmp	r2, r3
   1496a:	900c      	str	r0, [sp, #48]	; 0x30
   1496c:	910b      	str	r1, [sp, #44]	; 0x2c
   1496e:	d102      	bne.n	14976 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   14970:	e7ff      	b.n	14972 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   14972:	b02e      	add	sp, #184	; 0xb8
   14974:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   14976:	f24f 7020 	movw	r0, #63264	; 0xf720
   1497a:	f2c0 0001 	movt	r0, #1
   1497e:	6801      	ldr	r1, [r0, #0]
   14980:	980c      	ldr	r0, [sp, #48]	; 0x30
   14982:	901f      	str	r0, [sp, #124]	; 0x7c
   14984:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14986:	9220      	str	r2, [sp, #128]	; 0x80
   14988:	f64f 0338 	movw	r3, #63544	; 0xf838
   1498c:	f2c0 0301 	movt	r3, #1
   14990:	681b      	ldr	r3, [r3, #0]
   14992:	f24f 7c40 	movw	ip, #63296	; 0xf740
   14996:	f2c0 0c01 	movt	ip, #1
   1499a:	f8dc c000 	ldr.w	ip, [ip]
   1499e:	46ee      	mov	lr, sp
   149a0:	2400      	movs	r4, #0
   149a2:	f8ce 4000 	str.w	r4, [lr]
   149a6:	a821      	add	r0, sp, #132	; 0x84
   149a8:	2201      	movs	r2, #1
   149aa:	910a      	str	r1, [sp, #40]	; 0x28
   149ac:	4619      	mov	r1, r3
   149ae:	4663      	mov	r3, ip
   149b0:	f7fa fbf3 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   149b4:	e7ff      	b.n	149b6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   149b6:	a81f      	add	r0, sp, #124	; 0x7c
   149b8:	901c      	str	r0, [sp, #112]	; 0x70
   149ba:	a820      	add	r0, sp, #128	; 0x80
   149bc:	901d      	str	r0, [sp, #116]	; 0x74
   149be:	a821      	add	r0, sp, #132	; 0x84
   149c0:	901e      	str	r0, [sp, #120]	; 0x78
   149c2:	981c      	ldr	r0, [sp, #112]	; 0x70
   149c4:	902b      	str	r0, [sp, #172]	; 0xac
   149c6:	991d      	ldr	r1, [sp, #116]	; 0x74
   149c8:	912c      	str	r1, [sp, #176]	; 0xb0
   149ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   149cc:	922d      	str	r2, [sp, #180]	; 0xb4
   149ce:	f64f 737b 	movw	r3, #65403	; 0xff7b
   149d2:	f2c0 0300 	movt	r3, #0
   149d6:	9109      	str	r1, [sp, #36]	; 0x24
   149d8:	4619      	mov	r1, r3
   149da:	9208      	str	r2, [sp, #32]
   149dc:	f7fb fb05 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   149e0:	9007      	str	r0, [sp, #28]
   149e2:	9106      	str	r1, [sp, #24]
   149e4:	e7ff      	b.n	149e6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   149e6:	f64f 717b 	movw	r1, #65403	; 0xff7b
   149ea:	f2c0 0100 	movt	r1, #0
   149ee:	9809      	ldr	r0, [sp, #36]	; 0x24
   149f0:	f7fb fafb 	bl	ffea <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   149f4:	9005      	str	r0, [sp, #20]
   149f6:	9104      	str	r1, [sp, #16]
   149f8:	e7ff      	b.n	149fa <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   149fa:	f646 71fb 	movw	r1, #28667	; 0x6ffb
   149fe:	f2c0 0101 	movt	r1, #1
   14a02:	9808      	ldr	r0, [sp, #32]
   14a04:	f7fb fb06 	bl	10014 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14a08:	9003      	str	r0, [sp, #12]
   14a0a:	9102      	str	r1, [sp, #8]
   14a0c:	e7ff      	b.n	14a0e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14a0e:	9807      	ldr	r0, [sp, #28]
   14a10:	9016      	str	r0, [sp, #88]	; 0x58
   14a12:	9906      	ldr	r1, [sp, #24]
   14a14:	9117      	str	r1, [sp, #92]	; 0x5c
   14a16:	9a05      	ldr	r2, [sp, #20]
   14a18:	9218      	str	r2, [sp, #96]	; 0x60
   14a1a:	9b04      	ldr	r3, [sp, #16]
   14a1c:	9319      	str	r3, [sp, #100]	; 0x64
   14a1e:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14a22:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   14a26:	f8dd e008 	ldr.w	lr, [sp, #8]
   14a2a:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14a2e:	466c      	mov	r4, sp
   14a30:	2503      	movs	r5, #3
   14a32:	6025      	str	r5, [r4, #0]
   14a34:	a810      	add	r0, sp, #64	; 0x40
   14a36:	ab16      	add	r3, sp, #88	; 0x58
   14a38:	990a      	ldr	r1, [sp, #40]	; 0x28
   14a3a:	462a      	mov	r2, r5
   14a3c:	f7fa fbad 	bl	f19a <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14a40:	e7ff      	b.n	14a42 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14a42:	f64f 202c 	movw	r0, #64044	; 0xfa2c
   14a46:	f2c0 0001 	movt	r0, #1
   14a4a:	f001 ffe8 	bl	16a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14a4e:	9001      	str	r0, [sp, #4]
   14a50:	e7ff      	b.n	14a52 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14a52:	a810      	add	r0, sp, #64	; 0x40
   14a54:	9901      	ldr	r1, [sp, #4]
   14a56:	f002 f81f 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14a5a:	defe      	udf	#254	; 0xfe

00014a5c <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   14a5c:	b580      	push	{r7, lr}
   14a5e:	b084      	sub	sp, #16
   14a60:	4601      	mov	r1, r0
   14a62:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14a66:	b2c0      	uxtb	r0, r0
   14a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14a6c:	fba0 0202 	umull	r0, r2, r0, r2
   14a70:	2a00      	cmp	r2, #0
   14a72:	9001      	str	r0, [sp, #4]
   14a74:	d110      	bne.n	14a98 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   14a76:	e7ff      	b.n	14a78 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   14a78:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14a7c:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14a80:	9901      	ldr	r1, [sp, #4]
   14a82:	fba1 0200 	umull	r0, r2, r1, r0
   14a86:	0992      	lsrs	r2, r2, #6
   14a88:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14a8a:	9000      	str	r0, [sp, #0]
   14a8c:	4610      	mov	r0, r2
   14a8e:	f006 f959 	bl	1ad44 <os_time_delay>
   14a92:	e7ff      	b.n	14a94 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   14a94:	b004      	add	sp, #16
   14a96:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14a98:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
   14a9c:	f2c0 0001 	movt	r0, #1
   14aa0:	f64f 223c 	movw	r2, #64060	; 0xfa3c
   14aa4:	f2c0 0201 	movt	r2, #1
   14aa8:	2121      	movs	r1, #33	; 0x21
   14aaa:	f001 ffbf 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14aae:	defe      	udf	#254	; 0xfe

00014ab0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14ab0:	b082      	sub	sp, #8
   14ab2:	9001      	str	r0, [sp, #4]
   14ab4:	9000      	str	r0, [sp, #0]
   14ab6:	e7ff      	b.n	14ab8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14ab8:	9800      	ldr	r0, [sp, #0]
   14aba:	fab0 f180 	clz	r1, r0
   14abe:	0948      	lsrs	r0, r1, #5
   14ac0:	b002      	add	sp, #8
   14ac2:	4770      	bx	lr

00014ac4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14ac4:	b08a      	sub	sp, #40	; 0x28
   14ac6:	9005      	str	r0, [sp, #20]
   14ac8:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14aca:	9107      	str	r1, [sp, #28]
   14acc:	21ff      	movs	r1, #255	; 0xff
   14ace:	9106      	str	r1, [sp, #24]
   14ad0:	2108      	movs	r1, #8
   14ad2:	9108      	str	r1, [sp, #32]
   14ad4:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14ad6:	9003      	str	r0, [sp, #12]
   14ad8:	9102      	str	r1, [sp, #8]
   14ada:	e016      	b.n	14b0a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14adc:	2001      	movs	r0, #1
   14ade:	f88d 0013 	strb.w	r0, [sp, #19]
   14ae2:	e00c      	b.n	14afe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14ae4:	2000      	movs	r0, #0
   14ae6:	f88d 0013 	strb.w	r0, [sp, #19]
   14aea:	e008      	b.n	14afe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14aec:	9803      	ldr	r0, [sp, #12]
   14aee:	6801      	ldr	r1, [r0, #0]
   14af0:	6842      	ldr	r2, [r0, #4]
   14af2:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14af6:	f172 0200 	sbcs.w	r2, r2, #0
   14afa:	d3ef      	bcc.n	14adc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14afc:	e7f2      	b.n	14ae4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14afe:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14b02:	07c0      	lsls	r0, r0, #31
   14b04:	2800      	cmp	r0, #0
   14b06:	d10e      	bne.n	14b26 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14b08:	e009      	b.n	14b1e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14b0a:	2001      	movs	r0, #1
   14b0c:	9009      	str	r0, [sp, #36]	; 0x24
   14b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14b10:	9001      	str	r0, [sp, #4]
   14b12:	e7ff      	b.n	14b14 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14b14:	9802      	ldr	r0, [sp, #8]
   14b16:	9901      	ldr	r1, [sp, #4]
   14b18:	4288      	cmp	r0, r1
   14b1a:	d9df      	bls.n	14adc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14b1c:	e7e6      	b.n	14aec <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14b1e:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14b20:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14b24:	e007      	b.n	14b36 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14b26:	9803      	ldr	r0, [sp, #12]
   14b28:	7801      	ldrb	r1, [r0, #0]
   14b2a:	f88d 1011 	strb.w	r1, [sp, #17]
   14b2e:	2101      	movs	r1, #1
   14b30:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14b34:	e7ff      	b.n	14b36 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14b36:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14b3a:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14b3e:	b00a      	add	sp, #40	; 0x28
   14b40:	4770      	bx	lr

00014b42 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   14b42:	b580      	push	{r7, lr}
   14b44:	b090      	sub	sp, #64	; 0x40
   14b46:	2200      	movs	r2, #0
   14b48:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14b4c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14b50:	2201      	movs	r2, #1
   14b52:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14b56:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14b5a:	680a      	ldr	r2, [r1, #0]
   14b5c:	2a00      	cmp	r2, #0
   14b5e:	9101      	str	r1, [sp, #4]
   14b60:	9000      	str	r0, [sp, #0]
   14b62:	d001      	beq.n	14b68 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   14b64:	e7ff      	b.n	14b66 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   14b66:	e004      	b.n	14b72 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   14b68:	2000      	movs	r0, #0
   14b6a:	9900      	ldr	r1, [sp, #0]
   14b6c:	6008      	str	r0, [r1, #0]
   14b6e:	e032      	b.n	14bd6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14b70:	defe      	udf	#254	; 0xfe
   14b72:	2000      	movs	r0, #0
   14b74:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14b78:	9901      	ldr	r1, [sp, #4]
   14b7a:	684a      	ldr	r2, [r1, #4]
   14b7c:	688b      	ldr	r3, [r1, #8]
   14b7e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14b82:	f8cd c010 	str.w	ip, [sp, #16]
   14b86:	9303      	str	r3, [sp, #12]
   14b88:	9202      	str	r2, [sp, #8]
   14b8a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14b8e:	9802      	ldr	r0, [sp, #8]
   14b90:	9a03      	ldr	r2, [sp, #12]
   14b92:	9b04      	ldr	r3, [sp, #16]
   14b94:	930d      	str	r3, [sp, #52]	; 0x34
   14b96:	920c      	str	r2, [sp, #48]	; 0x30
   14b98:	900b      	str	r0, [sp, #44]	; 0x2c
   14b9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14b9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14ba0:	930a      	str	r3, [sp, #40]	; 0x28
   14ba2:	9209      	str	r2, [sp, #36]	; 0x24
   14ba4:	9008      	str	r0, [sp, #32]
   14ba6:	a805      	add	r0, sp, #20
   14ba8:	a908      	add	r1, sp, #32
   14baa:	f7fd fc17 	bl	123dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   14bae:	e7ff      	b.n	14bb0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   14bb0:	9805      	ldr	r0, [sp, #20]
   14bb2:	9906      	ldr	r1, [sp, #24]
   14bb4:	9a07      	ldr	r2, [sp, #28]
   14bb6:	9b00      	ldr	r3, [sp, #0]
   14bb8:	60da      	str	r2, [r3, #12]
   14bba:	6099      	str	r1, [r3, #8]
   14bbc:	6058      	str	r0, [r3, #4]
   14bbe:	2001      	movs	r0, #1
   14bc0:	6018      	str	r0, [r3, #0]
   14bc2:	e008      	b.n	14bd6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14bc4:	9801      	ldr	r0, [sp, #4]
   14bc6:	6801      	ldr	r1, [r0, #0]
   14bc8:	2901      	cmp	r1, #1
   14bca:	d00c      	beq.n	14be6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   14bcc:	e015      	b.n	14bfa <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   14bce:	2000      	movs	r0, #0
   14bd0:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14bd4:	e7f6      	b.n	14bc4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14bd6:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14bda:	07c0      	lsls	r0, r0, #31
   14bdc:	2800      	cmp	r0, #0
   14bde:	d1f6      	bne.n	14bce <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   14be0:	e7f0      	b.n	14bc4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14be2:	b010      	add	sp, #64	; 0x40
   14be4:	bd80      	pop	{r7, pc}
   14be6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14bea:	07c0      	lsls	r0, r0, #31
   14bec:	2800      	cmp	r0, #0
   14bee:	d0f8      	beq.n	14be2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14bf0:	e7ff      	b.n	14bf2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   14bf2:	2000      	movs	r0, #0
   14bf4:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14bf8:	e7f3      	b.n	14be2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14bfa:	e7f2      	b.n	14be2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

00014bfc <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14bfc:	b084      	sub	sp, #16
   14bfe:	9002      	str	r0, [sp, #8]
   14c00:	6801      	ldr	r1, [r0, #0]
   14c02:	2900      	cmp	r1, #0
   14c04:	9000      	str	r0, [sp, #0]
   14c06:	d001      	beq.n	14c0c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14c08:	e7ff      	b.n	14c0a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14c0a:	e003      	b.n	14c14 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14c0c:	2000      	movs	r0, #0
   14c0e:	9001      	str	r0, [sp, #4]
   14c10:	e006      	b.n	14c20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14c12:	defe      	udf	#254	; 0xfe
   14c14:	9800      	ldr	r0, [sp, #0]
   14c16:	f100 0108 	add.w	r1, r0, #8
   14c1a:	9103      	str	r1, [sp, #12]
   14c1c:	9101      	str	r1, [sp, #4]
   14c1e:	e7ff      	b.n	14c20 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14c20:	9801      	ldr	r0, [sp, #4]
   14c22:	b004      	add	sp, #16
   14c24:	4770      	bx	lr

00014c26 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   14c26:	b510      	push	{r4, lr}
   14c28:	b088      	sub	sp, #32
   14c2a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   14c2e:	468e      	mov	lr, r1
   14c30:	4604      	mov	r4, r0
   14c32:	f8ad 0010 	strh.w	r0, [sp, #16]
   14c36:	f8ad 1012 	strh.w	r1, [sp, #18]
   14c3a:	9205      	str	r2, [sp, #20]
   14c3c:	9306      	str	r3, [sp, #24]
   14c3e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14c42:	4601      	mov	r1, r0
   14c44:	2800      	cmp	r0, #0
   14c46:	9303      	str	r3, [sp, #12]
   14c48:	9202      	str	r2, [sp, #8]
   14c4a:	f8cd c004 	str.w	ip, [sp, #4]
   14c4e:	d001      	beq.n	14c54 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   14c50:	e7ff      	b.n	14c52 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14c52:	e006      	b.n	14c62 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14c54:	9802      	ldr	r0, [sp, #8]
   14c56:	9903      	ldr	r1, [sp, #12]
   14c58:	9a01      	ldr	r2, [sp, #4]
   14c5a:	f001 fe9d 	bl	16998 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   14c5e:	defe      	udf	#254	; 0xfe
   14c60:	defe      	udf	#254	; 0xfe
   14c62:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14c66:	4601      	mov	r1, r0
   14c68:	f8ad 001e 	strh.w	r0, [sp, #30]
   14c6c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14c70:	2801      	cmp	r0, #1
   14c72:	9100      	str	r1, [sp, #0]
   14c74:	d103      	bne.n	14c7e <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14c76:	e7ff      	b.n	14c78 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14c78:	9800      	ldr	r0, [sp, #0]
   14c7a:	b008      	add	sp, #32
   14c7c:	bd10      	pop	{r4, pc}
   14c7e:	e7fb      	b.n	14c78 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

00014c80 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14c80:	b084      	sub	sp, #16
   14c82:	460b      	mov	r3, r1
   14c84:	4684      	mov	ip, r0
   14c86:	f88d 000c 	strb.w	r0, [sp, #12]
   14c8a:	f88d 100d 	strb.w	r1, [sp, #13]
   14c8e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14c92:	07c1      	lsls	r1, r0, #31
   14c94:	2900      	cmp	r1, #0
   14c96:	9202      	str	r2, [sp, #8]
   14c98:	d001      	beq.n	14c9e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14c9a:	e7ff      	b.n	14c9c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14c9c:	e009      	b.n	14cb2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14c9e:	f64f 204c 	movw	r0, #64076	; 0xfa4c
   14ca2:	f2c0 0001 	movt	r0, #1
   14ca6:	212b      	movs	r1, #43	; 0x2b
   14ca8:	9a02      	ldr	r2, [sp, #8]
   14caa:	f001 febf 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14cae:	defe      	udf	#254	; 0xfe
   14cb0:	defe      	udf	#254	; 0xfe
   14cb2:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14cb6:	4601      	mov	r1, r0
   14cb8:	f88d 000f 	strb.w	r0, [sp, #15]
   14cbc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14cc0:	07c0      	lsls	r0, r0, #31
   14cc2:	2800      	cmp	r0, #0
   14cc4:	9101      	str	r1, [sp, #4]
   14cc6:	d003      	beq.n	14cd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14cc8:	e7ff      	b.n	14cca <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14cca:	9801      	ldr	r0, [sp, #4]
   14ccc:	b004      	add	sp, #16
   14cce:	4770      	bx	lr
   14cd0:	e7fb      	b.n	14cca <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014cd2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14cd2:	b088      	sub	sp, #32
   14cd4:	9004      	str	r0, [sp, #16]
   14cd6:	9105      	str	r1, [sp, #20]
   14cd8:	9804      	ldr	r0, [sp, #16]
   14cda:	2800      	cmp	r0, #0
   14cdc:	4601      	mov	r1, r0
   14cde:	bf18      	it	ne
   14ce0:	2101      	movne	r1, #1
   14ce2:	2800      	cmp	r0, #0
   14ce4:	9203      	str	r2, [sp, #12]
   14ce6:	d001      	beq.n	14cec <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14ce8:	e7ff      	b.n	14cea <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14cea:	e009      	b.n	14d00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   14cec:	f64f 204c 	movw	r0, #64076	; 0xfa4c
   14cf0:	f2c0 0001 	movt	r0, #1
   14cf4:	212b      	movs	r1, #43	; 0x2b
   14cf6:	9a03      	ldr	r2, [sp, #12]
   14cf8:	f001 fe98 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14cfc:	defe      	udf	#254	; 0xfe
   14cfe:	defe      	udf	#254	; 0xfe
   14d00:	9804      	ldr	r0, [sp, #16]
   14d02:	9905      	ldr	r1, [sp, #20]
   14d04:	9006      	str	r0, [sp, #24]
   14d06:	9107      	str	r1, [sp, #28]
   14d08:	9a04      	ldr	r2, [sp, #16]
   14d0a:	2a00      	cmp	r2, #0
   14d0c:	9002      	str	r0, [sp, #8]
   14d0e:	9101      	str	r1, [sp, #4]
   14d10:	d004      	beq.n	14d1c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14d12:	e7ff      	b.n	14d14 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14d14:	9802      	ldr	r0, [sp, #8]
   14d16:	9901      	ldr	r1, [sp, #4]
   14d18:	b008      	add	sp, #32
   14d1a:	4770      	bx	lr
   14d1c:	e7fa      	b.n	14d14 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00014d1e <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   14d1e:	b580      	push	{r7, lr}
   14d20:	b082      	sub	sp, #8
   14d22:	9001      	str	r0, [sp, #4]
   14d24:	f000 f82b 	bl	14d7e <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   14d28:	9000      	str	r0, [sp, #0]
   14d2a:	e7ff      	b.n	14d2c <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   14d2c:	2001      	movs	r0, #1
   14d2e:	9900      	ldr	r1, [sp, #0]
   14d30:	4388      	bics	r0, r1
   14d32:	b002      	add	sp, #8
   14d34:	bd80      	pop	{r7, pc}

00014d36 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14d36:	b082      	sub	sp, #8
   14d38:	9001      	str	r0, [sp, #4]
   14d3a:	6800      	ldr	r0, [r0, #0]
   14d3c:	2800      	cmp	r0, #0
   14d3e:	d104      	bne.n	14d4a <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   14d40:	e7ff      	b.n	14d42 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14d42:	2000      	movs	r0, #0
   14d44:	f88d 0003 	strb.w	r0, [sp, #3]
   14d48:	e003      	b.n	14d52 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14d4a:	2001      	movs	r0, #1
   14d4c:	f88d 0003 	strb.w	r0, [sp, #3]
   14d50:	e7ff      	b.n	14d52 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14d52:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14d56:	b002      	add	sp, #8
   14d58:	4770      	bx	lr

00014d5a <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14d5a:	b082      	sub	sp, #8
   14d5c:	9001      	str	r0, [sp, #4]
   14d5e:	6800      	ldr	r0, [r0, #0]
   14d60:	2801      	cmp	r0, #1
   14d62:	d004      	beq.n	14d6e <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   14d64:	e7ff      	b.n	14d66 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   14d66:	2000      	movs	r0, #0
   14d68:	f88d 0003 	strb.w	r0, [sp, #3]
   14d6c:	e003      	b.n	14d76 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14d6e:	2001      	movs	r0, #1
   14d70:	f88d 0003 	strb.w	r0, [sp, #3]
   14d74:	e7ff      	b.n	14d76 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14d76:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14d7a:	b002      	add	sp, #8
   14d7c:	4770      	bx	lr

00014d7e <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   14d7e:	b082      	sub	sp, #8
   14d80:	9001      	str	r0, [sp, #4]
   14d82:	8800      	ldrh	r0, [r0, #0]
   14d84:	2801      	cmp	r0, #1
   14d86:	d004      	beq.n	14d92 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14d88:	e7ff      	b.n	14d8a <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14d8a:	2000      	movs	r0, #0
   14d8c:	f88d 0003 	strb.w	r0, [sp, #3]
   14d90:	e003      	b.n	14d9a <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14d92:	2001      	movs	r0, #1
   14d94:	f88d 0003 	strb.w	r0, [sp, #3]
   14d98:	e7ff      	b.n	14d9a <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14d9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14d9e:	b002      	add	sp, #8
   14da0:	4770      	bx	lr

00014da2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14da2:	b580      	push	{r7, lr}
   14da4:	b086      	sub	sp, #24
   14da6:	9000      	str	r0, [sp, #0]
   14da8:	2000      	movs	r0, #0
   14daa:	f88d 000f 	strb.w	r0, [sp, #15]
   14dae:	f88d 000e 	strb.w	r0, [sp, #14]
   14db2:	2001      	movs	r0, #1
   14db4:	f88d 000f 	strb.w	r0, [sp, #15]
   14db8:	f88d 000e 	strb.w	r0, [sp, #14]
   14dbc:	9800      	ldr	r0, [sp, #0]
   14dbe:	2800      	cmp	r0, #0
   14dc0:	4601      	mov	r1, r0
   14dc2:	bf18      	it	ne
   14dc4:	2101      	movne	r1, #1
   14dc6:	2800      	cmp	r0, #0
   14dc8:	d001      	beq.n	14dce <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14dca:	e7ff      	b.n	14dcc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14dcc:	e004      	b.n	14dd8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14dce:	2000      	movs	r0, #0
   14dd0:	f88d 0004 	strb.w	r0, [sp, #4]
   14dd4:	e019      	b.n	14e0a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14dd6:	defe      	udf	#254	; 0xfe
   14dd8:	2000      	movs	r0, #0
   14dda:	f88d 000f 	strb.w	r0, [sp, #15]
   14dde:	9900      	ldr	r1, [sp, #0]
   14de0:	9105      	str	r1, [sp, #20]
   14de2:	f88d 000e 	strb.w	r0, [sp, #14]
   14de6:	9102      	str	r1, [sp, #8]
   14de8:	9802      	ldr	r0, [sp, #8]
   14dea:	f7fc ff1e 	bl	11c2a <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14dee:	f88d 1005 	strb.w	r1, [sp, #5]
   14df2:	f88d 0004 	strb.w	r0, [sp, #4]
   14df6:	e7ff      	b.n	14df8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14df8:	e007      	b.n	14e0a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14dfa:	9800      	ldr	r0, [sp, #0]
   14dfc:	2800      	cmp	r0, #0
   14dfe:	d110      	bne.n	14e22 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   14e00:	e019      	b.n	14e36 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14e02:	2000      	movs	r0, #0
   14e04:	f88d 000e 	strb.w	r0, [sp, #14]
   14e08:	e7f7      	b.n	14dfa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14e0a:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14e0e:	07c0      	lsls	r0, r0, #31
   14e10:	2800      	cmp	r0, #0
   14e12:	d1f6      	bne.n	14e02 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14e14:	e7f1      	b.n	14dfa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14e16:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14e1a:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14e1e:	b006      	add	sp, #24
   14e20:	bd80      	pop	{r7, pc}
   14e22:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14e26:	07c0      	lsls	r0, r0, #31
   14e28:	2800      	cmp	r0, #0
   14e2a:	d0f4      	beq.n	14e16 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14e2c:	e7ff      	b.n	14e2e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   14e2e:	2000      	movs	r0, #0
   14e30:	f88d 000f 	strb.w	r0, [sp, #15]
   14e34:	e7ef      	b.n	14e16 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14e36:	e7ee      	b.n	14e16 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014e38 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   14e38:	b580      	push	{r7, lr}
   14e3a:	b09c      	sub	sp, #112	; 0x70
   14e3c:	911b      	str	r1, [sp, #108]	; 0x6c
   14e3e:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   14e40:	9000      	str	r0, [sp, #0]
   14e42:	4610      	mov	r0, r2
   14e44:	f000 fafc 	bl	15440 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   14e48:	e7ff      	b.n	14e4a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   14e4a:	a901      	add	r1, sp, #4
   14e4c:	2268      	movs	r2, #104	; 0x68
   14e4e:	9800      	ldr	r0, [sp, #0]
   14e50:	f008 f9c0 	bl	1d1d4 <__aeabi_memcpy>
    }
   14e54:	b01c      	add	sp, #112	; 0x70
   14e56:	bd80      	pop	{r7, pc}

00014e58 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14e58:	b580      	push	{r7, lr}
   14e5a:	b0b6      	sub	sp, #216	; 0xd8
   14e5c:	9135      	str	r1, [sp, #212]	; 0xd4
   14e5e:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   14e60:	9001      	str	r0, [sp, #4]
   14e62:	4610      	mov	r0, r2
   14e64:	f000 fb14 	bl	15490 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   14e68:	e7ff      	b.n	14e6a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   14e6a:	a902      	add	r1, sp, #8
   14e6c:	22cc      	movs	r2, #204	; 0xcc
   14e6e:	9801      	ldr	r0, [sp, #4]
   14e70:	f008 f9b0 	bl	1d1d4 <__aeabi_memcpy>
    }
   14e74:	b036      	add	sp, #216	; 0xd8
   14e76:	bd80      	pop	{r7, pc}

00014e78 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14e78:	b580      	push	{r7, lr}
   14e7a:	b084      	sub	sp, #16
   14e7c:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14e7e:	f000 f84c 	bl	14f1a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14e82:	9002      	str	r0, [sp, #8]
   14e84:	9101      	str	r1, [sp, #4]
   14e86:	e7ff      	b.n	14e88 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14e88:	9802      	ldr	r0, [sp, #8]
   14e8a:	9901      	ldr	r1, [sp, #4]
   14e8c:	f000 ff10 	bl	15cb0 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14e90:	e7ff      	b.n	14e92 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14e92:	e7ff      	b.n	14e94 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14e94:	b004      	add	sp, #16
   14e96:	bd80      	pop	{r7, pc}

00014e98 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14e98:	b580      	push	{r7, lr}
   14e9a:	b084      	sub	sp, #16
   14e9c:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14e9e:	f000 f848 	bl	14f32 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14ea2:	9002      	str	r0, [sp, #8]
   14ea4:	9101      	str	r1, [sp, #4]
   14ea6:	e7ff      	b.n	14ea8 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14ea8:	9802      	ldr	r0, [sp, #8]
   14eaa:	9901      	ldr	r1, [sp, #4]
   14eac:	f000 ff00 	bl	15cb0 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14eb0:	e7ff      	b.n	14eb2 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14eb2:	e7ff      	b.n	14eb4 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14eb4:	b004      	add	sp, #16
   14eb6:	bd80      	pop	{r7, pc}

00014eb8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14eb8:	b580      	push	{r7, lr}
   14eba:	b084      	sub	sp, #16
   14ebc:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14ebe:	f000 fb0f 	bl	154e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14ec2:	9002      	str	r0, [sp, #8]
   14ec4:	9101      	str	r1, [sp, #4]
   14ec6:	e7ff      	b.n	14ec8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14ec8:	9802      	ldr	r0, [sp, #8]
   14eca:	9901      	ldr	r1, [sp, #4]
   14ecc:	b004      	add	sp, #16
   14ece:	bd80      	pop	{r7, pc}

00014ed0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   14ed0:	b580      	push	{r7, lr}
   14ed2:	b084      	sub	sp, #16
   14ed4:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14ed6:	f000 fb18 	bl	1550a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14eda:	9002      	str	r0, [sp, #8]
   14edc:	9101      	str	r1, [sp, #4]
   14ede:	e7ff      	b.n	14ee0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   14ee0:	9802      	ldr	r0, [sp, #8]
   14ee2:	9901      	ldr	r1, [sp, #4]
   14ee4:	b004      	add	sp, #16
   14ee6:	bd80      	pop	{r7, pc}

00014ee8 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14ee8:	b580      	push	{r7, lr}
   14eea:	b086      	sub	sp, #24
   14eec:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   14eee:	9003      	str	r0, [sp, #12]
   14ef0:	f000 f81f 	bl	14f32 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14ef4:	9002      	str	r0, [sp, #8]
   14ef6:	9101      	str	r1, [sp, #4]
   14ef8:	e7ff      	b.n	14efa <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14efa:	9803      	ldr	r0, [sp, #12]
   14efc:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14f00:	9104      	str	r1, [sp, #16]
   14f02:	9a04      	ldr	r2, [sp, #16]
   14f04:	9802      	ldr	r0, [sp, #8]
   14f06:	9901      	ldr	r1, [sp, #4]
   14f08:	f000 fedf 	bl	15cca <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   14f0c:	e7ff      	b.n	14f0e <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   14f0e:	e7ff      	b.n	14f10 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   14f10:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   14f12:	9903      	ldr	r1, [sp, #12]
   14f14:	6008      	str	r0, [r1, #0]
    }
   14f16:	b006      	add	sp, #24
   14f18:	bd80      	pop	{r7, pc}

00014f1a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   14f1a:	b580      	push	{r7, lr}
   14f1c:	b084      	sub	sp, #16
   14f1e:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14f20:	f000 f8ff 	bl	15122 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14f24:	9002      	str	r0, [sp, #8]
   14f26:	9101      	str	r1, [sp, #4]
   14f28:	e7ff      	b.n	14f2a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14f2a:	9802      	ldr	r0, [sp, #8]
   14f2c:	9901      	ldr	r1, [sp, #4]
   14f2e:	b004      	add	sp, #16
   14f30:	bd80      	pop	{r7, pc}

00014f32 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14f32:	b580      	push	{r7, lr}
   14f34:	b084      	sub	sp, #16
   14f36:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14f38:	f000 f908 	bl	1514c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14f3c:	9002      	str	r0, [sp, #8]
   14f3e:	9101      	str	r1, [sp, #4]
   14f40:	e7ff      	b.n	14f42 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14f42:	9802      	ldr	r0, [sp, #8]
   14f44:	9901      	ldr	r1, [sp, #4]
   14f46:	b004      	add	sp, #16
   14f48:	bd80      	pop	{r7, pc}

00014f4a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14f4a:	b580      	push	{r7, lr}
   14f4c:	b084      	sub	sp, #16
   14f4e:	9001      	str	r0, [sp, #4]
   14f50:	9102      	str	r1, [sp, #8]
   14f52:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14f54:	f000 f973 	bl	1523e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14f58:	9000      	str	r0, [sp, #0]
   14f5a:	e7ff      	b.n	14f5c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14f5c:	9800      	ldr	r0, [sp, #0]
   14f5e:	f000 0001 	and.w	r0, r0, #1
   14f62:	b004      	add	sp, #16
   14f64:	bd80      	pop	{r7, pc}

00014f66 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14f66:	b580      	push	{r7, lr}
   14f68:	b09c      	sub	sp, #112	; 0x70
   14f6a:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14f6c:	9001      	str	r0, [sp, #4]
   14f6e:	4608      	mov	r0, r1
   14f70:	f000 f8c8 	bl	15104 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14f74:	e7ff      	b.n	14f76 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14f76:	a902      	add	r1, sp, #8
   14f78:	2268      	movs	r2, #104	; 0x68
   14f7a:	9801      	ldr	r0, [sp, #4]
   14f7c:	f008 f92a 	bl	1d1d4 <__aeabi_memcpy>
    }
   14f80:	b01c      	add	sp, #112	; 0x70
   14f82:	bd80      	pop	{r7, pc}

00014f84 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14f84:	b580      	push	{r7, lr}
   14f86:	b0b4      	sub	sp, #208	; 0xd0
   14f88:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14f8a:	9000      	str	r0, [sp, #0]
   14f8c:	4608      	mov	r0, r1
   14f8e:	f000 f8aa 	bl	150e6 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14f92:	e7ff      	b.n	14f94 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14f94:	a901      	add	r1, sp, #4
   14f96:	22cc      	movs	r2, #204	; 0xcc
   14f98:	9800      	ldr	r0, [sp, #0]
   14f9a:	f008 f91b 	bl	1d1d4 <__aeabi_memcpy>
    }
   14f9e:	b034      	add	sp, #208	; 0xd0
   14fa0:	bd80      	pop	{r7, pc}

00014fa2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14fa2:	b580      	push	{r7, lr}
   14fa4:	b086      	sub	sp, #24
   14fa6:	460a      	mov	r2, r1
   14fa8:	9004      	str	r0, [sp, #16]
   14faa:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   14fae:	9203      	str	r2, [sp, #12]
   14fb0:	f000 fa0b 	bl	153ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14fb4:	9002      	str	r0, [sp, #8]
   14fb6:	9101      	str	r1, [sp, #4]
   14fb8:	e7ff      	b.n	14fba <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14fba:	9802      	ldr	r0, [sp, #8]
   14fbc:	9901      	ldr	r1, [sp, #4]
   14fbe:	b006      	add	sp, #24
   14fc0:	bd80      	pop	{r7, pc}

00014fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14fc2:	b580      	push	{r7, lr}
   14fc4:	b082      	sub	sp, #8
   14fc6:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14fc8:	f000 fa28 	bl	1541c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   14fcc:	e7ff      	b.n	14fce <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   14fce:	b002      	add	sp, #8
   14fd0:	bd80      	pop	{r7, pc}

00014fd2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14fd2:	b580      	push	{r7, lr}
   14fd4:	b082      	sub	sp, #8
   14fd6:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14fd8:	f000 fa29 	bl	1542e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   14fdc:	e7ff      	b.n	14fde <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   14fde:	b002      	add	sp, #8
   14fe0:	bd80      	pop	{r7, pc}

00014fe2 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14fe2:	b580      	push	{r7, lr}
   14fe4:	b0b6      	sub	sp, #216	; 0xd8
   14fe6:	aa03      	add	r2, sp, #12
   14fe8:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14fea:	9002      	str	r0, [sp, #8]
   14fec:	4610      	mov	r0, r2
   14fee:	9201      	str	r2, [sp, #4]
   14ff0:	461a      	mov	r2, r3
   14ff2:	9300      	str	r3, [sp, #0]
   14ff4:	f008 f8ee 	bl	1d1d4 <__aeabi_memcpy>
   14ff8:	9802      	ldr	r0, [sp, #8]
   14ffa:	9901      	ldr	r1, [sp, #4]
   14ffc:	9a00      	ldr	r2, [sp, #0]
   14ffe:	f008 f8e9 	bl	1d1d4 <__aeabi_memcpy>
   15002:	2000      	movs	r0, #0
   15004:	9902      	ldr	r1, [sp, #8]
   15006:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   1500a:	b036      	add	sp, #216	; 0xd8
   1500c:	bd80      	pop	{r7, pc}

0001500e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   1500e:	b580      	push	{r7, lr}
   15010:	b08e      	sub	sp, #56	; 0x38
   15012:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   15014:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15018:	9008      	str	r0, [sp, #32]
   1501a:	9107      	str	r1, [sp, #28]
   1501c:	f7ff ff58 	bl	14ed0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   15020:	9006      	str	r0, [sp, #24]
   15022:	9105      	str	r1, [sp, #20]
   15024:	e7ff      	b.n	15026 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   15026:	9806      	ldr	r0, [sp, #24]
   15028:	9905      	ldr	r1, [sp, #20]
   1502a:	f000 fdee 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   1502e:	9004      	str	r0, [sp, #16]
   15030:	e7ff      	b.n	15032 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   15032:	9807      	ldr	r0, [sp, #28]
   15034:	9904      	ldr	r1, [sp, #16]
   15036:	4288      	cmp	r0, r1
   15038:	d304      	bcc.n	15044 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   1503a:	e7ff      	b.n	1503c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   1503c:	2000      	movs	r0, #0
            None
   1503e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   15042:	e029      	b.n	15098 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   15044:	9808      	ldr	r0, [sp, #32]
   15046:	1d01      	adds	r1, r0, #4
   15048:	910c      	str	r1, [sp, #48]	; 0x30
   1504a:	910d      	str	r1, [sp, #52]	; 0x34
   1504c:	9103      	str	r1, [sp, #12]
   1504e:	e7ff      	b.n	15050 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   15050:	9808      	ldr	r0, [sp, #32]
   15052:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   15056:	9803      	ldr	r0, [sp, #12]
   15058:	f001 fa8d 	bl	16576 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   1505c:	9002      	str	r0, [sp, #8]
   1505e:	e7ff      	b.n	15060 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   15060:	9802      	ldr	r0, [sp, #8]
   15062:	f001 fa93 	bl	1658c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   15066:	4601      	mov	r1, r0
   15068:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   1506c:	9101      	str	r1, [sp, #4]
   1506e:	e7ff      	b.n	15070 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   15070:	9808      	ldr	r0, [sp, #32]
   15072:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15076:	1c4a      	adds	r2, r1, #1
   15078:	4613      	mov	r3, r2
   1507a:	428a      	cmp	r2, r1
   1507c:	9300      	str	r3, [sp, #0]
   1507e:	d311      	bcc.n	150a4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   15080:	e7ff      	b.n	15082 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   15082:	9800      	ldr	r0, [sp, #0]
   15084:	9908      	ldr	r1, [sp, #32]
   15086:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   1508a:	9a01      	ldr	r2, [sp, #4]
   1508c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   15090:	2301      	movs	r3, #1
   15092:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   15096:	e7ff      	b.n	15098 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   15098:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   1509c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   150a0:	b00e      	add	sp, #56	; 0x38
   150a2:	bd80      	pop	{r7, pc}
            self.next += 1;
   150a4:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   150a8:	f2c0 0001 	movt	r0, #1
   150ac:	f64f 22d0 	movw	r2, #64208	; 0xfad0
   150b0:	f2c0 0201 	movt	r2, #1
   150b4:	211c      	movs	r1, #28
   150b6:	f001 fcb9 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   150ba:	defe      	udf	#254	; 0xfe

000150bc <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   150bc:	b580      	push	{r7, lr}
   150be:	b084      	sub	sp, #16
   150c0:	9002      	str	r0, [sp, #8]
   150c2:	9103      	str	r1, [sp, #12]
   150c4:	f64f 20fc 	movw	r0, #64252	; 0xfafc
   150c8:	f2c0 0001 	movt	r0, #1
   150cc:	2202      	movs	r2, #2
   150ce:	9001      	str	r0, [sp, #4]
   150d0:	4608      	mov	r0, r1
   150d2:	9901      	ldr	r1, [sp, #4]
   150d4:	f002 f9ca 	bl	1746c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   150d8:	9000      	str	r0, [sp, #0]
   150da:	e7ff      	b.n	150dc <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   150dc:	9800      	ldr	r0, [sp, #0]
   150de:	f000 0001 	and.w	r0, r0, #1
   150e2:	b004      	add	sp, #16
   150e4:	bd80      	pop	{r7, pc}

000150e6 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   150e6:	b580      	push	{r7, lr}
   150e8:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   150ea:	9001      	str	r0, [sp, #4]
   150ec:	e7ff      	b.n	150ee <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   150ee:	9801      	ldr	r0, [sp, #4]
   150f0:	3004      	adds	r0, #4
   150f2:	a902      	add	r1, sp, #8
   150f4:	22c8      	movs	r2, #200	; 0xc8
   150f6:	f008 f86d 	bl	1d1d4 <__aeabi_memcpy>
   150fa:	2100      	movs	r1, #0
   150fc:	9a01      	ldr	r2, [sp, #4]
   150fe:	6011      	str	r1, [r2, #0]
    }
   15100:	b034      	add	sp, #208	; 0xd0
   15102:	bd80      	pop	{r7, pc}

00015104 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   15104:	b580      	push	{r7, lr}
   15106:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   15108:	9000      	str	r0, [sp, #0]
   1510a:	e7ff      	b.n	1510c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   1510c:	9800      	ldr	r0, [sp, #0]
   1510e:	3004      	adds	r0, #4
   15110:	a901      	add	r1, sp, #4
   15112:	2264      	movs	r2, #100	; 0x64
   15114:	f008 f85e 	bl	1d1d4 <__aeabi_memcpy>
   15118:	2100      	movs	r1, #0
   1511a:	9a00      	ldr	r2, [sp, #0]
   1511c:	6011      	str	r1, [r2, #0]
    }
   1511e:	b01a      	add	sp, #104	; 0x68
   15120:	bd80      	pop	{r7, pc}

00015122 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15122:	b580      	push	{r7, lr}
   15124:	b088      	sub	sp, #32
   15126:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15128:	1d01      	adds	r1, r0, #4
   1512a:	9106      	str	r1, [sp, #24]
   1512c:	9107      	str	r1, [sp, #28]
   1512e:	9004      	str	r0, [sp, #16]
   15130:	9103      	str	r1, [sp, #12]
   15132:	e7ff      	b.n	15134 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   15134:	9804      	ldr	r0, [sp, #16]
   15136:	6801      	ldr	r1, [r0, #0]
   15138:	9803      	ldr	r0, [sp, #12]
   1513a:	f000 fd42 	bl	15bc2 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   1513e:	9002      	str	r0, [sp, #8]
   15140:	9101      	str	r1, [sp, #4]
   15142:	e7ff      	b.n	15144 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   15144:	9802      	ldr	r0, [sp, #8]
   15146:	9901      	ldr	r1, [sp, #4]
   15148:	b008      	add	sp, #32
   1514a:	bd80      	pop	{r7, pc}

0001514c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1514c:	b580      	push	{r7, lr}
   1514e:	b088      	sub	sp, #32
   15150:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15152:	1d01      	adds	r1, r0, #4
   15154:	9106      	str	r1, [sp, #24]
   15156:	9107      	str	r1, [sp, #28]
   15158:	9004      	str	r0, [sp, #16]
   1515a:	9103      	str	r1, [sp, #12]
   1515c:	e7ff      	b.n	1515e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   1515e:	9804      	ldr	r0, [sp, #16]
   15160:	6801      	ldr	r1, [r0, #0]
   15162:	9803      	ldr	r0, [sp, #12]
   15164:	f000 fd2d 	bl	15bc2 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15168:	9002      	str	r0, [sp, #8]
   1516a:	9101      	str	r1, [sp, #4]
   1516c:	e7ff      	b.n	1516e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   1516e:	9802      	ldr	r0, [sp, #8]
   15170:	9901      	ldr	r1, [sp, #4]
   15172:	b008      	add	sp, #32
   15174:	bd80      	pop	{r7, pc}

00015176 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15176:	b580      	push	{r7, lr}
   15178:	b08a      	sub	sp, #40	; 0x28
   1517a:	460a      	mov	r2, r1
   1517c:	9006      	str	r0, [sp, #24]
   1517e:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   15182:	1d01      	adds	r1, r0, #4
   15184:	9108      	str	r1, [sp, #32]
   15186:	9109      	str	r1, [sp, #36]	; 0x24
   15188:	9005      	str	r0, [sp, #20]
   1518a:	9204      	str	r2, [sp, #16]
   1518c:	9103      	str	r1, [sp, #12]
   1518e:	e7ff      	b.n	15190 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   15190:	9805      	ldr	r0, [sp, #20]
   15192:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15194:	9803      	ldr	r0, [sp, #12]
   15196:	f000 fe31 	bl	15dfc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   1519a:	9002      	str	r0, [sp, #8]
   1519c:	e7ff      	b.n	1519e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   1519e:	9802      	ldr	r0, [sp, #8]
   151a0:	9904      	ldr	r1, [sp, #16]
   151a2:	f000 fe36 	bl	15e12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   151a6:	e7ff      	b.n	151a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   151a8:	9805      	ldr	r0, [sp, #20]
   151aa:	6801      	ldr	r1, [r0, #0]
   151ac:	1c4a      	adds	r2, r1, #1
   151ae:	4613      	mov	r3, r2
   151b0:	428a      	cmp	r2, r1
   151b2:	9301      	str	r3, [sp, #4]
   151b4:	d305      	bcc.n	151c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   151b6:	e7ff      	b.n	151b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   151b8:	9801      	ldr	r0, [sp, #4]
   151ba:	9905      	ldr	r1, [sp, #20]
   151bc:	6008      	str	r0, [r1, #0]
    }
   151be:	b00a      	add	sp, #40	; 0x28
   151c0:	bd80      	pop	{r7, pc}
        self.len += 1;
   151c2:	f64f 30a0 	movw	r0, #64416	; 0xfba0
   151c6:	f2c0 0001 	movt	r0, #1
   151ca:	f64f 3284 	movw	r2, #64388	; 0xfb84
   151ce:	f2c0 0201 	movt	r2, #1
   151d2:	211c      	movs	r1, #28
   151d4:	f001 fc2a 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   151d8:	defe      	udf	#254	; 0xfe

000151da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   151da:	b580      	push	{r7, lr}
   151dc:	b08a      	sub	sp, #40	; 0x28
   151de:	460a      	mov	r2, r1
   151e0:	9006      	str	r0, [sp, #24]
   151e2:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   151e6:	1d01      	adds	r1, r0, #4
   151e8:	9108      	str	r1, [sp, #32]
   151ea:	9109      	str	r1, [sp, #36]	; 0x24
   151ec:	9005      	str	r0, [sp, #20]
   151ee:	9204      	str	r2, [sp, #16]
   151f0:	9103      	str	r1, [sp, #12]
   151f2:	e7ff      	b.n	151f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   151f4:	9805      	ldr	r0, [sp, #20]
   151f6:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   151f8:	9803      	ldr	r0, [sp, #12]
   151fa:	f000 fdff 	bl	15dfc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   151fe:	9002      	str	r0, [sp, #8]
   15200:	e7ff      	b.n	15202 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   15202:	9802      	ldr	r0, [sp, #8]
   15204:	9904      	ldr	r1, [sp, #16]
   15206:	f000 fe04 	bl	15e12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   1520a:	e7ff      	b.n	1520c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   1520c:	9805      	ldr	r0, [sp, #20]
   1520e:	6801      	ldr	r1, [r0, #0]
   15210:	1c4a      	adds	r2, r1, #1
   15212:	4613      	mov	r3, r2
   15214:	428a      	cmp	r2, r1
   15216:	9301      	str	r3, [sp, #4]
   15218:	d305      	bcc.n	15226 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   1521a:	e7ff      	b.n	1521c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   1521c:	9801      	ldr	r0, [sp, #4]
   1521e:	9905      	ldr	r1, [sp, #20]
   15220:	6008      	str	r0, [r1, #0]
    }
   15222:	b00a      	add	sp, #40	; 0x28
   15224:	bd80      	pop	{r7, pc}
        self.len += 1;
   15226:	f64f 30a0 	movw	r0, #64416	; 0xfba0
   1522a:	f2c0 0001 	movt	r0, #1
   1522e:	f64f 3284 	movw	r2, #64388	; 0xfb84
   15232:	f2c0 0201 	movt	r2, #1
   15236:	211c      	movs	r1, #28
   15238:	f001 fbf8 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1523c:	defe      	udf	#254	; 0xfe

0001523e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1523e:	b580      	push	{r7, lr}
   15240:	b094      	sub	sp, #80	; 0x50
   15242:	900e      	str	r0, [sp, #56]	; 0x38
   15244:	910f      	str	r1, [sp, #60]	; 0x3c
   15246:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15248:	6803      	ldr	r3, [r0, #0]
   1524a:	9009      	str	r0, [sp, #36]	; 0x24
   1524c:	4608      	mov	r0, r1
   1524e:	9108      	str	r1, [sp, #32]
   15250:	4611      	mov	r1, r2
   15252:	9207      	str	r2, [sp, #28]
   15254:	9306      	str	r3, [sp, #24]
   15256:	f000 fcd8 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   1525a:	9005      	str	r0, [sp, #20]
   1525c:	e7ff      	b.n	1525e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   1525e:	9806      	ldr	r0, [sp, #24]
   15260:	9905      	ldr	r1, [sp, #20]
   15262:	1842      	adds	r2, r0, r1
   15264:	4613      	mov	r3, r2
   15266:	4282      	cmp	r2, r0
   15268:	9304      	str	r3, [sp, #16]
   1526a:	d33f      	bcc.n	152ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   1526c:	e7ff      	b.n	1526e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   1526e:	9809      	ldr	r0, [sp, #36]	; 0x24
   15270:	f000 f96a 	bl	15548 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   15274:	9003      	str	r0, [sp, #12]
   15276:	e7ff      	b.n	15278 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   15278:	9804      	ldr	r0, [sp, #16]
   1527a:	9903      	ldr	r1, [sp, #12]
   1527c:	4288      	cmp	r0, r1
   1527e:	d807      	bhi.n	15290 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   15280:	e7ff      	b.n	15282 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   15282:	9808      	ldr	r0, [sp, #32]
   15284:	9907      	ldr	r1, [sp, #28]
   15286:	f000 fd34 	bl	15cf2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   1528a:	9002      	str	r0, [sp, #8]
   1528c:	9101      	str	r1, [sp, #4]
   1528e:	e003      	b.n	15298 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   15290:	2001      	movs	r0, #1
            Err(())
   15292:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15296:	e025      	b.n	152e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   15298:	9802      	ldr	r0, [sp, #8]
   1529a:	900b      	str	r0, [sp, #44]	; 0x2c
   1529c:	9901      	ldr	r1, [sp, #4]
   1529e:	910c      	str	r1, [sp, #48]	; 0x30
   152a0:	e7ff      	b.n	152a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   152a2:	a80b      	add	r0, sp, #44	; 0x2c
   152a4:	f000 fd47 	bl	15d36 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   152a8:	900d      	str	r0, [sp, #52]	; 0x34
   152aa:	e7ff      	b.n	152ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   152ac:	980d      	ldr	r0, [sp, #52]	; 0x34
   152ae:	2800      	cmp	r0, #0
   152b0:	4601      	mov	r1, r0
   152b2:	bf18      	it	ne
   152b4:	2101      	movne	r1, #1
   152b6:	2800      	cmp	r0, #0
   152b8:	d001      	beq.n	152be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   152ba:	e7ff      	b.n	152bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   152bc:	e004      	b.n	152c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   152be:	2000      	movs	r0, #0
            Ok(())
   152c0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   152c4:	e00e      	b.n	152e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   152c6:	defe      	udf	#254	; 0xfe
   152c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   152ca:	9011      	str	r0, [sp, #68]	; 0x44
   152cc:	9012      	str	r0, [sp, #72]	; 0x48
   152ce:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   152d0:	f000 fbeb 	bl	15aaa <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   152d4:	9000      	str	r0, [sp, #0]
   152d6:	e7ff      	b.n	152d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   152d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   152da:	9900      	ldr	r1, [sp, #0]
   152dc:	f7ff ff4b 	bl	15176 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   152e0:	e7ff      	b.n	152e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   152e2:	e7de      	b.n	152a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   152e4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   152e8:	b014      	add	sp, #80	; 0x50
   152ea:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   152ec:	f64f 30a0 	movw	r0, #64416	; 0xfba0
   152f0:	f2c0 0001 	movt	r0, #1
   152f4:	f64f 32bc 	movw	r2, #64444	; 0xfbbc
   152f8:	f2c0 0201 	movt	r2, #1
   152fc:	211c      	movs	r1, #28
   152fe:	f001 fb95 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15302:	defe      	udf	#254	; 0xfe

00015304 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15304:	b580      	push	{r7, lr}
   15306:	b094      	sub	sp, #80	; 0x50
   15308:	900e      	str	r0, [sp, #56]	; 0x38
   1530a:	910f      	str	r1, [sp, #60]	; 0x3c
   1530c:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   1530e:	6803      	ldr	r3, [r0, #0]
   15310:	9009      	str	r0, [sp, #36]	; 0x24
   15312:	4608      	mov	r0, r1
   15314:	9108      	str	r1, [sp, #32]
   15316:	4611      	mov	r1, r2
   15318:	9207      	str	r2, [sp, #28]
   1531a:	9306      	str	r3, [sp, #24]
   1531c:	f000 fc75 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15320:	9005      	str	r0, [sp, #20]
   15322:	e7ff      	b.n	15324 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   15324:	9806      	ldr	r0, [sp, #24]
   15326:	9905      	ldr	r1, [sp, #20]
   15328:	1842      	adds	r2, r0, r1
   1532a:	4613      	mov	r3, r2
   1532c:	4282      	cmp	r2, r0
   1532e:	9304      	str	r3, [sp, #16]
   15330:	d33f      	bcc.n	153b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   15332:	e7ff      	b.n	15334 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   15334:	9809      	ldr	r0, [sp, #36]	; 0x24
   15336:	f000 f8fd 	bl	15534 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   1533a:	9003      	str	r0, [sp, #12]
   1533c:	e7ff      	b.n	1533e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   1533e:	9804      	ldr	r0, [sp, #16]
   15340:	9903      	ldr	r1, [sp, #12]
   15342:	4288      	cmp	r0, r1
   15344:	d807      	bhi.n	15356 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   15346:	e7ff      	b.n	15348 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   15348:	9808      	ldr	r0, [sp, #32]
   1534a:	9907      	ldr	r1, [sp, #28]
   1534c:	f000 fcd1 	bl	15cf2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   15350:	9002      	str	r0, [sp, #8]
   15352:	9101      	str	r1, [sp, #4]
   15354:	e003      	b.n	1535e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   15356:	2001      	movs	r0, #1
            Err(())
   15358:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1535c:	e025      	b.n	153aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   1535e:	9802      	ldr	r0, [sp, #8]
   15360:	900b      	str	r0, [sp, #44]	; 0x2c
   15362:	9901      	ldr	r1, [sp, #4]
   15364:	910c      	str	r1, [sp, #48]	; 0x30
   15366:	e7ff      	b.n	15368 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   15368:	a80b      	add	r0, sp, #44	; 0x2c
   1536a:	f000 fce4 	bl	15d36 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   1536e:	900d      	str	r0, [sp, #52]	; 0x34
   15370:	e7ff      	b.n	15372 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   15372:	980d      	ldr	r0, [sp, #52]	; 0x34
   15374:	2800      	cmp	r0, #0
   15376:	4601      	mov	r1, r0
   15378:	bf18      	it	ne
   1537a:	2101      	movne	r1, #1
   1537c:	2800      	cmp	r0, #0
   1537e:	d001      	beq.n	15384 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   15380:	e7ff      	b.n	15382 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   15382:	e004      	b.n	1538e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   15384:	2000      	movs	r0, #0
            Ok(())
   15386:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1538a:	e00e      	b.n	153aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   1538c:	defe      	udf	#254	; 0xfe
   1538e:	980d      	ldr	r0, [sp, #52]	; 0x34
   15390:	9011      	str	r0, [sp, #68]	; 0x44
   15392:	9012      	str	r0, [sp, #72]	; 0x48
   15394:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15396:	f000 fb88 	bl	15aaa <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   1539a:	9000      	str	r0, [sp, #0]
   1539c:	e7ff      	b.n	1539e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   1539e:	9809      	ldr	r0, [sp, #36]	; 0x24
   153a0:	9900      	ldr	r1, [sp, #0]
   153a2:	f7ff ff1a 	bl	151da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   153a6:	e7ff      	b.n	153a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   153a8:	e7de      	b.n	15368 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   153aa:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   153ae:	b014      	add	sp, #80	; 0x50
   153b0:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   153b2:	f64f 30a0 	movw	r0, #64416	; 0xfba0
   153b6:	f2c0 0001 	movt	r0, #1
   153ba:	f64f 32bc 	movw	r2, #64444	; 0xfbbc
   153be:	f2c0 0201 	movt	r2, #1
   153c2:	211c      	movs	r1, #28
   153c4:	f001 fb32 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   153c8:	defe      	udf	#254	; 0xfe

000153ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   153ca:	b580      	push	{r7, lr}
   153cc:	b088      	sub	sp, #32
   153ce:	460a      	mov	r2, r1
   153d0:	9006      	str	r0, [sp, #24]
   153d2:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   153d6:	6801      	ldr	r1, [r0, #0]
   153d8:	9004      	str	r0, [sp, #16]
   153da:	9203      	str	r2, [sp, #12]
   153dc:	9102      	str	r1, [sp, #8]
   153de:	f000 f8a9 	bl	15534 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   153e2:	9001      	str	r0, [sp, #4]
   153e4:	e7ff      	b.n	153e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   153e6:	9802      	ldr	r0, [sp, #8]
   153e8:	9901      	ldr	r1, [sp, #4]
   153ea:	4288      	cmp	r0, r1
   153ec:	d307      	bcc.n	153fe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   153ee:	e7ff      	b.n	153f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   153f0:	9803      	ldr	r0, [sp, #12]
   153f2:	f8ad 0016 	strh.w	r0, [sp, #22]
   153f6:	2101      	movs	r1, #1
   153f8:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   153fc:	e008      	b.n	15410 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   153fe:	9804      	ldr	r0, [sp, #16]
   15400:	9903      	ldr	r1, [sp, #12]
   15402:	f7ff feea 	bl	151da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   15406:	e7ff      	b.n	15408 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   15408:	2000      	movs	r0, #0
            Ok(())
   1540a:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   1540e:	e7ff      	b.n	15410 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   15410:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15414:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   15418:	b008      	add	sp, #32
   1541a:	bd80      	pop	{r7, pc}

0001541c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   1541c:	b580      	push	{r7, lr}
   1541e:	b082      	sub	sp, #8
   15420:	9001      	str	r0, [sp, #4]
   15422:	2100      	movs	r1, #0
        self.truncate(0);
   15424:	f000 f8d0 	bl	155c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   15428:	e7ff      	b.n	1542a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   1542a:	b002      	add	sp, #8
   1542c:	bd80      	pop	{r7, pc}

0001542e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   1542e:	b580      	push	{r7, lr}
   15430:	b082      	sub	sp, #8
   15432:	9001      	str	r0, [sp, #4]
   15434:	2100      	movs	r1, #0
        self.truncate(0);
   15436:	f000 f891 	bl	1555c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   1543a:	e7ff      	b.n	1543c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   1543c:	b002      	add	sp, #8
   1543e:	bd80      	pop	{r7, pc}

00015440 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   15440:	b580      	push	{r7, lr}
   15442:	b0a0      	sub	sp, #128	; 0x80
   15444:	911f      	str	r1, [sp, #124]	; 0x7c
   15446:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   15448:	9004      	str	r0, [sp, #16]
   1544a:	4610      	mov	r0, r2
   1544c:	9103      	str	r1, [sp, #12]
   1544e:	f7ff fe59 	bl	15104 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   15452:	e7ff      	b.n	15454 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15454:	9803      	ldr	r0, [sp, #12]
   15456:	f000 f843 	bl	154e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   1545a:	9002      	str	r0, [sp, #8]
   1545c:	9101      	str	r1, [sp, #4]
   1545e:	e7ff      	b.n	15460 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   15460:	a805      	add	r0, sp, #20
   15462:	9902      	ldr	r1, [sp, #8]
   15464:	9a01      	ldr	r2, [sp, #4]
   15466:	f7ff ff4d 	bl	15304 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   1546a:	9000      	str	r0, [sp, #0]
   1546c:	e7ff      	b.n	1546e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   1546e:	9800      	ldr	r0, [sp, #0]
   15470:	f000 0001 	and.w	r0, r0, #1
   15474:	f64f 31cc 	movw	r1, #64460	; 0xfbcc
   15478:	f2c0 0101 	movt	r1, #1
   1547c:	f000 f959 	bl	15732 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15480:	e7ff      	b.n	15482 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   15482:	a905      	add	r1, sp, #20
   15484:	2268      	movs	r2, #104	; 0x68
        new
   15486:	9804      	ldr	r0, [sp, #16]
   15488:	f007 fea4 	bl	1d1d4 <__aeabi_memcpy>
    }
   1548c:	b020      	add	sp, #128	; 0x80
   1548e:	bd80      	pop	{r7, pc}

00015490 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   15490:	b580      	push	{r7, lr}
   15492:	b0ba      	sub	sp, #232	; 0xe8
   15494:	9139      	str	r1, [sp, #228]	; 0xe4
   15496:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   15498:	9005      	str	r0, [sp, #20]
   1549a:	4610      	mov	r0, r2
   1549c:	9104      	str	r1, [sp, #16]
   1549e:	f7ff fe22 	bl	150e6 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   154a2:	e7ff      	b.n	154a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   154a4:	9804      	ldr	r0, [sp, #16]
   154a6:	f000 f830 	bl	1550a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   154aa:	9003      	str	r0, [sp, #12]
   154ac:	9102      	str	r1, [sp, #8]
   154ae:	e7ff      	b.n	154b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   154b0:	a806      	add	r0, sp, #24
   154b2:	9903      	ldr	r1, [sp, #12]
   154b4:	9a02      	ldr	r2, [sp, #8]
   154b6:	f7ff fec2 	bl	1523e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   154ba:	9001      	str	r0, [sp, #4]
   154bc:	e7ff      	b.n	154be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   154be:	9801      	ldr	r0, [sp, #4]
   154c0:	f000 0001 	and.w	r0, r0, #1
   154c4:	f64f 31cc 	movw	r1, #64460	; 0xfbcc
   154c8:	f2c0 0101 	movt	r1, #1
   154cc:	f000 f931 	bl	15732 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   154d0:	e7ff      	b.n	154d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   154d2:	a906      	add	r1, sp, #24
   154d4:	22cc      	movs	r2, #204	; 0xcc
        new
   154d6:	9805      	ldr	r0, [sp, #20]
   154d8:	f007 fe7c 	bl	1d1d4 <__aeabi_memcpy>
    }
   154dc:	b03a      	add	sp, #232	; 0xe8
   154de:	bd80      	pop	{r7, pc}

000154e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   154e0:	b580      	push	{r7, lr}
   154e2:	b088      	sub	sp, #32
   154e4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   154e6:	1d01      	adds	r1, r0, #4
   154e8:	9106      	str	r1, [sp, #24]
   154ea:	9107      	str	r1, [sp, #28]
   154ec:	9004      	str	r0, [sp, #16]
   154ee:	9103      	str	r1, [sp, #12]
   154f0:	e7ff      	b.n	154f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   154f2:	9804      	ldr	r0, [sp, #16]
   154f4:	6801      	ldr	r1, [r0, #0]
   154f6:	9803      	ldr	r0, [sp, #12]
   154f8:	f000 fb56 	bl	15ba8 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   154fc:	9002      	str	r0, [sp, #8]
   154fe:	9101      	str	r1, [sp, #4]
   15500:	e7ff      	b.n	15502 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   15502:	9802      	ldr	r0, [sp, #8]
   15504:	9901      	ldr	r1, [sp, #4]
   15506:	b008      	add	sp, #32
   15508:	bd80      	pop	{r7, pc}

0001550a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1550a:	b580      	push	{r7, lr}
   1550c:	b088      	sub	sp, #32
   1550e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15510:	1d01      	adds	r1, r0, #4
   15512:	9106      	str	r1, [sp, #24]
   15514:	9107      	str	r1, [sp, #28]
   15516:	9004      	str	r0, [sp, #16]
   15518:	9103      	str	r1, [sp, #12]
   1551a:	e7ff      	b.n	1551c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   1551c:	9804      	ldr	r0, [sp, #16]
   1551e:	6801      	ldr	r1, [r0, #0]
   15520:	9803      	ldr	r0, [sp, #12]
   15522:	f000 fb41 	bl	15ba8 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15526:	9002      	str	r0, [sp, #8]
   15528:	9101      	str	r1, [sp, #4]
   1552a:	e7ff      	b.n	1552c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   1552c:	9802      	ldr	r0, [sp, #8]
   1552e:	9901      	ldr	r1, [sp, #4]
   15530:	b008      	add	sp, #32
   15532:	bd80      	pop	{r7, pc}

00015534 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   15534:	b580      	push	{r7, lr}
   15536:	b082      	sub	sp, #8
   15538:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1553a:	f000 fa26 	bl	1598a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   1553e:	9000      	str	r0, [sp, #0]
   15540:	e7ff      	b.n	15542 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   15542:	9800      	ldr	r0, [sp, #0]
   15544:	b002      	add	sp, #8
   15546:	bd80      	pop	{r7, pc}

00015548 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   15548:	b580      	push	{r7, lr}
   1554a:	b082      	sub	sp, #8
   1554c:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1554e:	f000 fa34 	bl	159ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   15552:	9000      	str	r0, [sp, #0]
   15554:	e7ff      	b.n	15556 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   15556:	9800      	ldr	r0, [sp, #0]
   15558:	b002      	add	sp, #8
   1555a:	bd80      	pop	{r7, pc}

0001555c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1555c:	b580      	push	{r7, lr}
   1555e:	b08a      	sub	sp, #40	; 0x28
   15560:	9007      	str	r0, [sp, #28]
   15562:	9108      	str	r1, [sp, #32]
   15564:	9106      	str	r1, [sp, #24]
   15566:	9005      	str	r0, [sp, #20]
   15568:	e7ff      	b.n	1556a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   1556a:	9805      	ldr	r0, [sp, #20]
   1556c:	6801      	ldr	r1, [r0, #0]
   1556e:	9a06      	ldr	r2, [sp, #24]
   15570:	428a      	cmp	r2, r1
   15572:	d302      	bcc.n	1557a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   15574:	e7ff      	b.n	15576 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   15576:	b00a      	add	sp, #40	; 0x28
   15578:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1557a:	9805      	ldr	r0, [sp, #20]
   1557c:	6801      	ldr	r1, [r0, #0]
   1557e:	1e4a      	subs	r2, r1, #1
   15580:	2901      	cmp	r1, #1
   15582:	9204      	str	r2, [sp, #16]
   15584:	d314      	bcc.n	155b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   15586:	e7ff      	b.n	15588 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15588:	9804      	ldr	r0, [sp, #16]
   1558a:	9905      	ldr	r1, [sp, #20]
   1558c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1558e:	680a      	ldr	r2, [r1, #0]
   15590:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15592:	4608      	mov	r0, r1
   15594:	9203      	str	r2, [sp, #12]
   15596:	f7ff fdd9 	bl	1514c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   1559a:	9002      	str	r0, [sp, #8]
   1559c:	9101      	str	r1, [sp, #4]
   1559e:	e7ff      	b.n	155a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   155a0:	9802      	ldr	r0, [sp, #8]
   155a2:	9901      	ldr	r1, [sp, #4]
   155a4:	9a03      	ldr	r2, [sp, #12]
   155a6:	f000 fb1e 	bl	15be6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   155aa:	e7ff      	b.n	155ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   155ac:	e7ff      	b.n	155ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   155ae:	e7dc      	b.n	1556a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   155b0:	f64f 3060 	movw	r0, #64352	; 0xfb60
   155b4:	f2c0 0001 	movt	r0, #1
   155b8:	f64f 32dc 	movw	r2, #64476	; 0xfbdc
   155bc:	f2c0 0201 	movt	r2, #1
   155c0:	2121      	movs	r1, #33	; 0x21
   155c2:	f001 fa33 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   155c6:	defe      	udf	#254	; 0xfe

000155c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   155c8:	b580      	push	{r7, lr}
   155ca:	b08a      	sub	sp, #40	; 0x28
   155cc:	9007      	str	r0, [sp, #28]
   155ce:	9108      	str	r1, [sp, #32]
   155d0:	9106      	str	r1, [sp, #24]
   155d2:	9005      	str	r0, [sp, #20]
   155d4:	e7ff      	b.n	155d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   155d6:	9805      	ldr	r0, [sp, #20]
   155d8:	6801      	ldr	r1, [r0, #0]
   155da:	9a06      	ldr	r2, [sp, #24]
   155dc:	428a      	cmp	r2, r1
   155de:	d302      	bcc.n	155e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   155e0:	e7ff      	b.n	155e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   155e2:	b00a      	add	sp, #40	; 0x28
   155e4:	bd80      	pop	{r7, pc}
                self.len -= 1;
   155e6:	9805      	ldr	r0, [sp, #20]
   155e8:	6801      	ldr	r1, [r0, #0]
   155ea:	1e4a      	subs	r2, r1, #1
   155ec:	2901      	cmp	r1, #1
   155ee:	9204      	str	r2, [sp, #16]
   155f0:	d314      	bcc.n	1561c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   155f2:	e7ff      	b.n	155f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   155f4:	9804      	ldr	r0, [sp, #16]
   155f6:	9905      	ldr	r1, [sp, #20]
   155f8:	6008      	str	r0, [r1, #0]
                let len = self.len;
   155fa:	680a      	ldr	r2, [r1, #0]
   155fc:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   155fe:	4608      	mov	r0, r1
   15600:	9203      	str	r2, [sp, #12]
   15602:	f7ff fd8e 	bl	15122 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   15606:	9002      	str	r0, [sp, #8]
   15608:	9101      	str	r1, [sp, #4]
   1560a:	e7ff      	b.n	1560c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   1560c:	9802      	ldr	r0, [sp, #8]
   1560e:	9901      	ldr	r1, [sp, #4]
   15610:	9a03      	ldr	r2, [sp, #12]
   15612:	f000 fae8 	bl	15be6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15616:	e7ff      	b.n	15618 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   15618:	e7ff      	b.n	1561a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   1561a:	e7dc      	b.n	155d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   1561c:	f64f 3060 	movw	r0, #64352	; 0xfb60
   15620:	f2c0 0001 	movt	r0, #1
   15624:	f64f 32dc 	movw	r2, #64476	; 0xfbdc
   15628:	f2c0 0201 	movt	r2, #1
   1562c:	2121      	movs	r1, #33	; 0x21
   1562e:	f001 f9fd 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15632:	defe      	udf	#254	; 0xfe

00015634 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   15634:	b082      	sub	sp, #8
   15636:	9001      	str	r0, [sp, #4]
   15638:	8800      	ldrh	r0, [r0, #0]
   1563a:	2800      	cmp	r0, #0
   1563c:	d004      	beq.n	15648 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   1563e:	e7ff      	b.n	15640 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   15640:	2000      	movs	r0, #0
   15642:	f88d 0003 	strb.w	r0, [sp, #3]
   15646:	e003      	b.n	15650 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15648:	2001      	movs	r0, #1
   1564a:	f88d 0003 	strb.w	r0, [sp, #3]
   1564e:	e7ff      	b.n	15650 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15650:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15654:	b002      	add	sp, #8
   15656:	4770      	bx	lr

00015658 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   15658:	b082      	sub	sp, #8
   1565a:	9001      	str	r0, [sp, #4]
   1565c:	7800      	ldrb	r0, [r0, #0]
   1565e:	07c0      	lsls	r0, r0, #31
   15660:	2800      	cmp	r0, #0
   15662:	d004      	beq.n	1566e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   15664:	e7ff      	b.n	15666 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   15666:	2000      	movs	r0, #0
   15668:	f88d 0003 	strb.w	r0, [sp, #3]
   1566c:	e003      	b.n	15676 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   1566e:	2001      	movs	r0, #1
   15670:	f88d 0003 	strb.w	r0, [sp, #3]
   15674:	e7ff      	b.n	15676 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15676:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1567a:	b002      	add	sp, #8
   1567c:	4770      	bx	lr

0001567e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   1567e:	b510      	push	{r4, lr}
   15680:	b08a      	sub	sp, #40	; 0x28
   15682:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   15686:	468e      	mov	lr, r1
   15688:	4604      	mov	r4, r0
   1568a:	f8ad 0014 	strh.w	r0, [sp, #20]
   1568e:	f8ad 1016 	strh.w	r1, [sp, #22]
   15692:	9207      	str	r2, [sp, #28]
   15694:	9308      	str	r3, [sp, #32]
   15696:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1569a:	4601      	mov	r1, r0
   1569c:	2800      	cmp	r0, #0
   1569e:	9304      	str	r3, [sp, #16]
   156a0:	9203      	str	r2, [sp, #12]
   156a2:	f8cd c008 	str.w	ip, [sp, #8]
   156a6:	d013      	beq.n	156d0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   156a8:	e7ff      	b.n	156aa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   156aa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   156ae:	f8ad 001a 	strh.w	r0, [sp, #26]
   156b2:	4668      	mov	r0, sp
   156b4:	9902      	ldr	r1, [sp, #8]
   156b6:	6001      	str	r1, [r0, #0]
   156b8:	f64f 33fc 	movw	r3, #64508	; 0xfbfc
   156bc:	f2c0 0301 	movt	r3, #1
   156c0:	f10d 021a 	add.w	r2, sp, #26
   156c4:	9803      	ldr	r0, [sp, #12]
   156c6:	9904      	ldr	r1, [sp, #16]
   156c8:	f001 f982 	bl	169d0 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   156cc:	defe      	udf	#254	; 0xfe
   156ce:	defe      	udf	#254	; 0xfe
   156d0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   156d4:	2800      	cmp	r0, #0
   156d6:	d102      	bne.n	156de <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   156d8:	e7ff      	b.n	156da <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   156da:	b00a      	add	sp, #40	; 0x28
   156dc:	bd10      	pop	{r4, pc}
   156de:	e7fc      	b.n	156da <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

000156e0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   156e0:	b580      	push	{r7, lr}
   156e2:	b08a      	sub	sp, #40	; 0x28
   156e4:	4684      	mov	ip, r0
   156e6:	f88d 0017 	strb.w	r0, [sp, #23]
   156ea:	9107      	str	r1, [sp, #28]
   156ec:	9208      	str	r2, [sp, #32]
   156ee:	f89d 0017 	ldrb.w	r0, [sp, #23]
   156f2:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   156f6:	f1be 0f00 	cmp.w	lr, #0
   156fa:	9304      	str	r3, [sp, #16]
   156fc:	9203      	str	r2, [sp, #12]
   156fe:	9102      	str	r1, [sp, #8]
   15700:	d00e      	beq.n	15720 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   15702:	e7ff      	b.n	15704 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   15704:	4668      	mov	r0, sp
   15706:	9904      	ldr	r1, [sp, #16]
   15708:	6001      	str	r1, [r0, #0]
   1570a:	f64f 33ec 	movw	r3, #64492	; 0xfbec
   1570e:	f2c0 0301 	movt	r3, #1
   15712:	aa06      	add	r2, sp, #24
   15714:	9802      	ldr	r0, [sp, #8]
   15716:	9903      	ldr	r1, [sp, #12]
   15718:	f001 f95a 	bl	169d0 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   1571c:	defe      	udf	#254	; 0xfe
   1571e:	defe      	udf	#254	; 0xfe
   15720:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15724:	07c0      	lsls	r0, r0, #31
   15726:	2800      	cmp	r0, #0
   15728:	d102      	bne.n	15730 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   1572a:	e7ff      	b.n	1572c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   1572c:	b00a      	add	sp, #40	; 0x28
   1572e:	bd80      	pop	{r7, pc}
   15730:	e7fc      	b.n	1572c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00015732 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   15732:	b086      	sub	sp, #24
   15734:	4602      	mov	r2, r0
   15736:	f88d 000f 	strb.w	r0, [sp, #15]
   1573a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1573e:	07c3      	lsls	r3, r0, #31
   15740:	2b00      	cmp	r3, #0
   15742:	9102      	str	r1, [sp, #8]
   15744:	d011      	beq.n	1576a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   15746:	e7ff      	b.n	15748 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   15748:	4668      	mov	r0, sp
   1574a:	9902      	ldr	r1, [sp, #8]
   1574c:	6001      	str	r1, [r0, #0]
   1574e:	f64f 400c 	movw	r0, #64524	; 0xfc0c
   15752:	f2c0 0001 	movt	r0, #1
   15756:	f64f 33ec 	movw	r3, #64492	; 0xfbec
   1575a:	f2c0 0301 	movt	r3, #1
   1575e:	212b      	movs	r1, #43	; 0x2b
   15760:	aa04      	add	r2, sp, #16
   15762:	f001 f935 	bl	169d0 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15766:	defe      	udf	#254	; 0xfe
   15768:	defe      	udf	#254	; 0xfe
   1576a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1576e:	07c0      	lsls	r0, r0, #31
   15770:	2800      	cmp	r0, #0
   15772:	d102      	bne.n	1577a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   15774:	e7ff      	b.n	15776 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   15776:	b006      	add	sp, #24
   15778:	4770      	bx	lr
   1577a:	e7fc      	b.n	15776 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

0001577c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   1577c:	b580      	push	{r7, lr}
   1577e:	b088      	sub	sp, #32
   15780:	9001      	str	r0, [sp, #4]
   15782:	2000      	movs	r0, #0
   15784:	f88d 0013 	strb.w	r0, [sp, #19]
   15788:	f88d 0011 	strb.w	r0, [sp, #17]
   1578c:	f88d 0012 	strb.w	r0, [sp, #18]
   15790:	2001      	movs	r0, #1
   15792:	f88d 0012 	strb.w	r0, [sp, #18]
   15796:	f88d 0013 	strb.w	r0, [sp, #19]
   1579a:	f88d 0011 	strb.w	r0, [sp, #17]
   1579e:	9801      	ldr	r0, [sp, #4]
   157a0:	1e41      	subs	r1, r0, #1
   157a2:	bf18      	it	ne
   157a4:	2101      	movne	r1, #1
   157a6:	2801      	cmp	r0, #1
   157a8:	d00d      	beq.n	157c6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   157aa:	e7ff      	b.n	157ac <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   157ac:	2000      	movs	r0, #0
   157ae:	f88d 0013 	strb.w	r0, [sp, #19]
   157b2:	9901      	ldr	r1, [sp, #4]
   157b4:	9107      	str	r1, [sp, #28]
   157b6:	f88d 0011 	strb.w	r0, [sp, #17]
   157ba:	9103      	str	r1, [sp, #12]
   157bc:	9803      	ldr	r0, [sp, #12]
   157be:	f7fb fab7 	bl	10d30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   157c2:	e006      	b.n	157d2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   157c4:	defe      	udf	#254	; 0xfe
   157c6:	2000      	movs	r0, #0
   157c8:	f88d 0012 	strb.w	r0, [sp, #18]
   157cc:	f88d 000b 	strb.w	r0, [sp, #11]
   157d0:	e003      	b.n	157da <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   157d2:	2001      	movs	r0, #1
   157d4:	f88d 000b 	strb.w	r0, [sp, #11]
   157d8:	e7ff      	b.n	157da <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   157da:	f89d 0011 	ldrb.w	r0, [sp, #17]
   157de:	07c0      	lsls	r0, r0, #31
   157e0:	2800      	cmp	r0, #0
   157e2:	d104      	bne.n	157ee <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   157e4:	e7ff      	b.n	157e6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   157e6:	9801      	ldr	r0, [sp, #4]
   157e8:	2801      	cmp	r0, #1
   157ea:	d008      	beq.n	157fe <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   157ec:	e011      	b.n	15812 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   157ee:	2000      	movs	r0, #0
   157f0:	f88d 0011 	strb.w	r0, [sp, #17]
   157f4:	e7f7      	b.n	157e6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   157f6:	f89d 000b 	ldrb.w	r0, [sp, #11]
   157fa:	b008      	add	sp, #32
   157fc:	bd80      	pop	{r7, pc}
   157fe:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15802:	07c0      	lsls	r0, r0, #31
   15804:	2800      	cmp	r0, #0
   15806:	d0f6      	beq.n	157f6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15808:	e7ff      	b.n	1580a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   1580a:	2000      	movs	r0, #0
   1580c:	f88d 0012 	strb.w	r0, [sp, #18]
   15810:	e7f1      	b.n	157f6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15812:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15816:	07c0      	lsls	r0, r0, #31
   15818:	2800      	cmp	r0, #0
   1581a:	d0ec      	beq.n	157f6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1581c:	e7ff      	b.n	1581e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   1581e:	2000      	movs	r0, #0
   15820:	f88d 0013 	strb.w	r0, [sp, #19]
   15824:	e7e7      	b.n	157f6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00015826 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   15826:	b580      	push	{r7, lr}
   15828:	b088      	sub	sp, #32
   1582a:	9001      	str	r0, [sp, #4]
   1582c:	2000      	movs	r0, #0
   1582e:	f88d 0013 	strb.w	r0, [sp, #19]
   15832:	f88d 0011 	strb.w	r0, [sp, #17]
   15836:	f88d 0012 	strb.w	r0, [sp, #18]
   1583a:	2001      	movs	r0, #1
   1583c:	f88d 0012 	strb.w	r0, [sp, #18]
   15840:	f88d 0013 	strb.w	r0, [sp, #19]
   15844:	f88d 0011 	strb.w	r0, [sp, #17]
   15848:	9801      	ldr	r0, [sp, #4]
   1584a:	1e41      	subs	r1, r0, #1
   1584c:	bf18      	it	ne
   1584e:	2101      	movne	r1, #1
   15850:	2801      	cmp	r0, #1
   15852:	d00d      	beq.n	15870 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   15854:	e7ff      	b.n	15856 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   15856:	2000      	movs	r0, #0
   15858:	f88d 0013 	strb.w	r0, [sp, #19]
   1585c:	9901      	ldr	r1, [sp, #4]
   1585e:	9107      	str	r1, [sp, #28]
   15860:	f88d 0011 	strb.w	r0, [sp, #17]
   15864:	9103      	str	r1, [sp, #12]
   15866:	9803      	ldr	r0, [sp, #12]
   15868:	f7fb fa58 	bl	10d1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   1586c:	e006      	b.n	1587c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   1586e:	defe      	udf	#254	; 0xfe
   15870:	2000      	movs	r0, #0
   15872:	f88d 0012 	strb.w	r0, [sp, #18]
   15876:	f88d 000b 	strb.w	r0, [sp, #11]
   1587a:	e003      	b.n	15884 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1587c:	2001      	movs	r0, #1
   1587e:	f88d 000b 	strb.w	r0, [sp, #11]
   15882:	e7ff      	b.n	15884 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15884:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15888:	07c0      	lsls	r0, r0, #31
   1588a:	2800      	cmp	r0, #0
   1588c:	d104      	bne.n	15898 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   1588e:	e7ff      	b.n	15890 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15890:	9801      	ldr	r0, [sp, #4]
   15892:	2801      	cmp	r0, #1
   15894:	d008      	beq.n	158a8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   15896:	e011      	b.n	158bc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15898:	2000      	movs	r0, #0
   1589a:	f88d 0011 	strb.w	r0, [sp, #17]
   1589e:	e7f7      	b.n	15890 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   158a0:	f89d 000b 	ldrb.w	r0, [sp, #11]
   158a4:	b008      	add	sp, #32
   158a6:	bd80      	pop	{r7, pc}
   158a8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   158ac:	07c0      	lsls	r0, r0, #31
   158ae:	2800      	cmp	r0, #0
   158b0:	d0f6      	beq.n	158a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   158b2:	e7ff      	b.n	158b4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   158b4:	2000      	movs	r0, #0
   158b6:	f88d 0012 	strb.w	r0, [sp, #18]
   158ba:	e7f1      	b.n	158a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   158bc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   158c0:	07c0      	lsls	r0, r0, #31
   158c2:	2800      	cmp	r0, #0
   158c4:	d0ec      	beq.n	158a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   158c6:	e7ff      	b.n	158c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   158c8:	2000      	movs	r0, #0
   158ca:	f88d 0013 	strb.w	r0, [sp, #19]
   158ce:	e7e7      	b.n	158a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

000158d0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   158d0:	b580      	push	{r7, lr}
   158d2:	b088      	sub	sp, #32
   158d4:	9001      	str	r0, [sp, #4]
   158d6:	2000      	movs	r0, #0
   158d8:	f88d 0013 	strb.w	r0, [sp, #19]
   158dc:	f88d 0011 	strb.w	r0, [sp, #17]
   158e0:	f88d 0012 	strb.w	r0, [sp, #18]
   158e4:	2001      	movs	r0, #1
   158e6:	f88d 0012 	strb.w	r0, [sp, #18]
   158ea:	f88d 0013 	strb.w	r0, [sp, #19]
   158ee:	f88d 0011 	strb.w	r0, [sp, #17]
   158f2:	9801      	ldr	r0, [sp, #4]
   158f4:	1e41      	subs	r1, r0, #1
   158f6:	bf18      	it	ne
   158f8:	2101      	movne	r1, #1
   158fa:	2801      	cmp	r0, #1
   158fc:	d00d      	beq.n	1591a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   158fe:	e7ff      	b.n	15900 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   15900:	2000      	movs	r0, #0
   15902:	f88d 0013 	strb.w	r0, [sp, #19]
   15906:	9901      	ldr	r1, [sp, #4]
   15908:	9107      	str	r1, [sp, #28]
   1590a:	f88d 0011 	strb.w	r0, [sp, #17]
   1590e:	9103      	str	r1, [sp, #12]
   15910:	9803      	ldr	r0, [sp, #12]
   15912:	f7fb fa08 	bl	10d26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   15916:	e006      	b.n	15926 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   15918:	defe      	udf	#254	; 0xfe
   1591a:	2000      	movs	r0, #0
   1591c:	f88d 0012 	strb.w	r0, [sp, #18]
   15920:	f88d 000b 	strb.w	r0, [sp, #11]
   15924:	e003      	b.n	1592e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   15926:	2001      	movs	r0, #1
   15928:	f88d 000b 	strb.w	r0, [sp, #11]
   1592c:	e7ff      	b.n	1592e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1592e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15932:	07c0      	lsls	r0, r0, #31
   15934:	2800      	cmp	r0, #0
   15936:	d104      	bne.n	15942 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   15938:	e7ff      	b.n	1593a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   1593a:	9801      	ldr	r0, [sp, #4]
   1593c:	2801      	cmp	r0, #1
   1593e:	d008      	beq.n	15952 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   15940:	e011      	b.n	15966 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   15942:	2000      	movs	r0, #0
   15944:	f88d 0011 	strb.w	r0, [sp, #17]
   15948:	e7f7      	b.n	1593a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   1594a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1594e:	b008      	add	sp, #32
   15950:	bd80      	pop	{r7, pc}
   15952:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15956:	07c0      	lsls	r0, r0, #31
   15958:	2800      	cmp	r0, #0
   1595a:	d0f6      	beq.n	1594a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1595c:	e7ff      	b.n	1595e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   1595e:	2000      	movs	r0, #0
   15960:	f88d 0012 	strb.w	r0, [sp, #18]
   15964:	e7f1      	b.n	1594a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15966:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1596a:	07c0      	lsls	r0, r0, #31
   1596c:	2800      	cmp	r0, #0
   1596e:	d0ec      	beq.n	1594a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15970:	e7ff      	b.n	15972 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   15972:	2000      	movs	r0, #0
   15974:	f88d 0013 	strb.w	r0, [sp, #19]
   15978:	e7e7      	b.n	1594a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

0001597a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   1597a:	b082      	sub	sp, #8
   1597c:	2001      	movs	r0, #1
   1597e:	f88d 0003 	strb.w	r0, [sp, #3]
   15982:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15986:	b002      	add	sp, #8
   15988:	4770      	bx	lr

0001598a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   1598a:	b580      	push	{r7, lr}
   1598c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1598e:	f000 fdee 	bl	1656e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15992:	9003      	str	r0, [sp, #12]
   15994:	e7ff      	b.n	15996 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   15996:	9803      	ldr	r0, [sp, #12]
   15998:	f000 fe4f 	bl	1663a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1599c:	9002      	str	r0, [sp, #8]
   1599e:	e7ff      	b.n	159a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   159a0:	f000 f823 	bl	159ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   159a4:	9001      	str	r0, [sp, #4]
   159a6:	e7ff      	b.n	159a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   159a8:	9801      	ldr	r0, [sp, #4]
   159aa:	0041      	lsls	r1, r0, #1
   159ac:	9100      	str	r1, [sp, #0]
   159ae:	e7ff      	b.n	159b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   159b0:	9802      	ldr	r0, [sp, #8]
   159b2:	9900      	ldr	r1, [sp, #0]
   159b4:	4308      	orrs	r0, r1
    }
   159b6:	b004      	add	sp, #16
   159b8:	bd80      	pop	{r7, pc}

000159ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   159ba:	b580      	push	{r7, lr}
   159bc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159be:	f000 fdd6 	bl	1656e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   159c2:	9003      	str	r0, [sp, #12]
   159c4:	e7ff      	b.n	159c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   159c6:	9803      	ldr	r0, [sp, #12]
   159c8:	f000 fe37 	bl	1663a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   159cc:	9002      	str	r0, [sp, #8]
   159ce:	e7ff      	b.n	159d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   159d0:	f7ff ffdb 	bl	1598a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   159d4:	9001      	str	r0, [sp, #4]
   159d6:	e7ff      	b.n	159d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   159d8:	9801      	ldr	r0, [sp, #4]
   159da:	0041      	lsls	r1, r0, #1
   159dc:	9100      	str	r1, [sp, #0]
   159de:	e7ff      	b.n	159e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   159e0:	9802      	ldr	r0, [sp, #8]
   159e2:	9900      	ldr	r1, [sp, #0]
   159e4:	4308      	orrs	r0, r1
    }
   159e6:	b004      	add	sp, #16
   159e8:	bd80      	pop	{r7, pc}

000159ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   159ea:	b580      	push	{r7, lr}
   159ec:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159ee:	f000 fdc0 	bl	16572 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   159f2:	9003      	str	r0, [sp, #12]
   159f4:	e7ff      	b.n	159f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   159f6:	9803      	ldr	r0, [sp, #12]
   159f8:	f000 fe1f 	bl	1663a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   159fc:	9002      	str	r0, [sp, #8]
   159fe:	e7ff      	b.n	15a00 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   15a00:	f000 f83b 	bl	15a7a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   15a04:	9001      	str	r0, [sp, #4]
   15a06:	e7ff      	b.n	15a08 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   15a08:	9801      	ldr	r0, [sp, #4]
   15a0a:	0041      	lsls	r1, r0, #1
   15a0c:	9100      	str	r1, [sp, #0]
   15a0e:	e7ff      	b.n	15a10 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   15a10:	9802      	ldr	r0, [sp, #8]
   15a12:	9900      	ldr	r1, [sp, #0]
   15a14:	4308      	orrs	r0, r1
    }
   15a16:	b004      	add	sp, #16
   15a18:	bd80      	pop	{r7, pc}

00015a1a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   15a1a:	b580      	push	{r7, lr}
   15a1c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a1e:	f000 fda6 	bl	1656e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15a22:	9003      	str	r0, [sp, #12]
   15a24:	e7ff      	b.n	15a26 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   15a26:	9803      	ldr	r0, [sp, #12]
   15a28:	f000 fe07 	bl	1663a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a2c:	9002      	str	r0, [sp, #8]
   15a2e:	e7ff      	b.n	15a30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   15a30:	f000 f80b 	bl	15a4a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   15a34:	9001      	str	r0, [sp, #4]
   15a36:	e7ff      	b.n	15a38 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   15a38:	9801      	ldr	r0, [sp, #4]
   15a3a:	0041      	lsls	r1, r0, #1
   15a3c:	9100      	str	r1, [sp, #0]
   15a3e:	e7ff      	b.n	15a40 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   15a40:	9802      	ldr	r0, [sp, #8]
   15a42:	9900      	ldr	r1, [sp, #0]
   15a44:	4308      	orrs	r0, r1
    }
   15a46:	b004      	add	sp, #16
   15a48:	bd80      	pop	{r7, pc}

00015a4a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   15a4a:	b580      	push	{r7, lr}
   15a4c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a4e:	f000 fd90 	bl	16572 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15a52:	9003      	str	r0, [sp, #12]
   15a54:	e7ff      	b.n	15a56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15a56:	9803      	ldr	r0, [sp, #12]
   15a58:	f000 fdef 	bl	1663a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a5c:	9002      	str	r0, [sp, #8]
   15a5e:	e7ff      	b.n	15a60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   15a60:	f000 fd25 	bl	164ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15a64:	9001      	str	r0, [sp, #4]
   15a66:	e7ff      	b.n	15a68 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   15a68:	9801      	ldr	r0, [sp, #4]
   15a6a:	0041      	lsls	r1, r0, #1
   15a6c:	9100      	str	r1, [sp, #0]
   15a6e:	e7ff      	b.n	15a70 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   15a70:	9802      	ldr	r0, [sp, #8]
   15a72:	9900      	ldr	r1, [sp, #0]
   15a74:	4308      	orrs	r0, r1
    }
   15a76:	b004      	add	sp, #16
   15a78:	bd80      	pop	{r7, pc}

00015a7a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15a7a:	b580      	push	{r7, lr}
   15a7c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a7e:	f000 fd76 	bl	1656e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15a82:	9003      	str	r0, [sp, #12]
   15a84:	e7ff      	b.n	15a86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15a86:	9803      	ldr	r0, [sp, #12]
   15a88:	f000 fdd7 	bl	1663a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a8c:	9002      	str	r0, [sp, #8]
   15a8e:	e7ff      	b.n	15a90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   15a90:	f7ff ffc3 	bl	15a1a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   15a94:	9001      	str	r0, [sp, #4]
   15a96:	e7ff      	b.n	15a98 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15a98:	9801      	ldr	r0, [sp, #4]
   15a9a:	0041      	lsls	r1, r0, #1
   15a9c:	9100      	str	r1, [sp, #0]
   15a9e:	e7ff      	b.n	15aa0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   15aa0:	9802      	ldr	r0, [sp, #8]
   15aa2:	9900      	ldr	r1, [sp, #0]
   15aa4:	4308      	orrs	r0, r1
    }
   15aa6:	b004      	add	sp, #16
   15aa8:	bd80      	pop	{r7, pc}

00015aaa <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15aaa:	b081      	sub	sp, #4
   15aac:	9000      	str	r0, [sp, #0]
   15aae:	8800      	ldrh	r0, [r0, #0]
   15ab0:	b001      	add	sp, #4
   15ab2:	4770      	bx	lr

00015ab4 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15ab4:	b580      	push	{r7, lr}
   15ab6:	b08c      	sub	sp, #48	; 0x30
   15ab8:	9009      	str	r0, [sp, #36]	; 0x24
   15aba:	910a      	str	r1, [sp, #40]	; 0x28
   15abc:	920b      	str	r2, [sp, #44]	; 0x2c
   15abe:	9006      	str	r0, [sp, #24]
   15ac0:	4608      	mov	r0, r1
   15ac2:	9105      	str	r1, [sp, #20]
   15ac4:	4611      	mov	r1, r2
   15ac6:	9204      	str	r2, [sp, #16]
   15ac8:	f000 f89f 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15acc:	9003      	str	r0, [sp, #12]
   15ace:	e7ff      	b.n	15ad0 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15ad0:	9806      	ldr	r0, [sp, #24]
   15ad2:	9007      	str	r0, [sp, #28]
   15ad4:	9903      	ldr	r1, [sp, #12]
   15ad6:	9108      	str	r1, [sp, #32]
   15ad8:	9807      	ldr	r0, [sp, #28]
   15ada:	9908      	ldr	r1, [sp, #32]
   15adc:	9a05      	ldr	r2, [sp, #20]
   15ade:	9b04      	ldr	r3, [sp, #16]
   15ae0:	f000 f82d 	bl	15b3e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15ae4:	9002      	str	r0, [sp, #8]
   15ae6:	9101      	str	r1, [sp, #4]
   15ae8:	e7ff      	b.n	15aea <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15aea:	9802      	ldr	r0, [sp, #8]
   15aec:	9901      	ldr	r1, [sp, #4]
   15aee:	b00c      	add	sp, #48	; 0x30
   15af0:	bd80      	pop	{r7, pc}

00015af2 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15af2:	b083      	sub	sp, #12
   15af4:	9001      	str	r0, [sp, #4]
   15af6:	9102      	str	r1, [sp, #8]
   15af8:	b003      	add	sp, #12
   15afa:	4770      	bx	lr

00015afc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15afc:	b580      	push	{r7, lr}
   15afe:	b08a      	sub	sp, #40	; 0x28
   15b00:	9006      	str	r0, [sp, #24]
   15b02:	9107      	str	r1, [sp, #28]
   15b04:	9208      	str	r2, [sp, #32]
   15b06:	9309      	str	r3, [sp, #36]	; 0x24
   15b08:	9005      	str	r0, [sp, #20]
   15b0a:	4610      	mov	r0, r2
   15b0c:	9104      	str	r1, [sp, #16]
   15b0e:	4619      	mov	r1, r3
   15b10:	f000 f864 	bl	15bdc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15b14:	9003      	str	r0, [sp, #12]
   15b16:	e7ff      	b.n	15b18 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15b18:	9803      	ldr	r0, [sp, #12]
   15b1a:	9905      	ldr	r1, [sp, #20]
   15b1c:	f000 f96e 	bl	15dfc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15b20:	9002      	str	r0, [sp, #8]
   15b22:	e7ff      	b.n	15b24 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15b24:	9804      	ldr	r0, [sp, #16]
   15b26:	9905      	ldr	r1, [sp, #20]
   15b28:	1a41      	subs	r1, r0, r1
   15b2a:	9802      	ldr	r0, [sp, #8]
   15b2c:	f000 f849 	bl	15bc2 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15b30:	9001      	str	r0, [sp, #4]
   15b32:	9100      	str	r1, [sp, #0]
   15b34:	e7ff      	b.n	15b36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15b36:	9801      	ldr	r0, [sp, #4]
   15b38:	9900      	ldr	r1, [sp, #0]
   15b3a:	b00a      	add	sp, #40	; 0x28
   15b3c:	bd80      	pop	{r7, pc}

00015b3e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15b3e:	b580      	push	{r7, lr}
   15b40:	b08c      	sub	sp, #48	; 0x30
   15b42:	9008      	str	r0, [sp, #32]
   15b44:	9109      	str	r1, [sp, #36]	; 0x24
   15b46:	920a      	str	r2, [sp, #40]	; 0x28
   15b48:	930b      	str	r3, [sp, #44]	; 0x2c
   15b4a:	4288      	cmp	r0, r1
   15b4c:	9307      	str	r3, [sp, #28]
   15b4e:	9206      	str	r2, [sp, #24]
   15b50:	9105      	str	r1, [sp, #20]
   15b52:	9004      	str	r0, [sp, #16]
   15b54:	d806      	bhi.n	15b64 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15b56:	e7ff      	b.n	15b58 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15b58:	9806      	ldr	r0, [sp, #24]
   15b5a:	9907      	ldr	r1, [sp, #28]
   15b5c:	f000 f855 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15b60:	9003      	str	r0, [sp, #12]
   15b62:	e004      	b.n	15b6e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15b64:	9804      	ldr	r0, [sp, #16]
   15b66:	9905      	ldr	r1, [sp, #20]
   15b68:	f001 fed5 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15b6c:	defe      	udf	#254	; 0xfe
   15b6e:	9805      	ldr	r0, [sp, #20]
   15b70:	9903      	ldr	r1, [sp, #12]
   15b72:	4288      	cmp	r0, r1
   15b74:	d809      	bhi.n	15b8a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15b76:	e7ff      	b.n	15b78 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15b78:	9804      	ldr	r0, [sp, #16]
   15b7a:	9905      	ldr	r1, [sp, #20]
   15b7c:	9a06      	ldr	r2, [sp, #24]
   15b7e:	9b07      	ldr	r3, [sp, #28]
   15b80:	f7ff ffbc 	bl	15afc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15b84:	9002      	str	r0, [sp, #8]
   15b86:	9101      	str	r1, [sp, #4]
   15b88:	e00a      	b.n	15ba0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15b8a:	9806      	ldr	r0, [sp, #24]
   15b8c:	9907      	ldr	r1, [sp, #28]
   15b8e:	f000 f83c 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15b92:	9000      	str	r0, [sp, #0]
   15b94:	e7ff      	b.n	15b96 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15b96:	9805      	ldr	r0, [sp, #20]
   15b98:	9900      	ldr	r1, [sp, #0]
   15b9a:	f001 fe9a 	bl	178d2 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15b9e:	defe      	udf	#254	; 0xfe
   15ba0:	9802      	ldr	r0, [sp, #8]
   15ba2:	9901      	ldr	r1, [sp, #4]
   15ba4:	b00c      	add	sp, #48	; 0x30
   15ba6:	bd80      	pop	{r7, pc}

00015ba8 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   15ba8:	b580      	push	{r7, lr}
   15baa:	b084      	sub	sp, #16
   15bac:	9002      	str	r0, [sp, #8]
   15bae:	9103      	str	r1, [sp, #12]
   15bb0:	f000 fd4a 	bl	16648 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   15bb4:	9001      	str	r0, [sp, #4]
   15bb6:	9100      	str	r1, [sp, #0]
   15bb8:	e7ff      	b.n	15bba <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   15bba:	9801      	ldr	r0, [sp, #4]
   15bbc:	9900      	ldr	r1, [sp, #0]
   15bbe:	b004      	add	sp, #16
   15bc0:	bd80      	pop	{r7, pc}

00015bc2 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   15bc2:	b580      	push	{r7, lr}
   15bc4:	b084      	sub	sp, #16
   15bc6:	9002      	str	r0, [sp, #8]
   15bc8:	9103      	str	r1, [sp, #12]
   15bca:	f000 fd4a 	bl	16662 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   15bce:	9001      	str	r0, [sp, #4]
   15bd0:	9100      	str	r1, [sp, #0]
   15bd2:	e7ff      	b.n	15bd4 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   15bd4:	9801      	ldr	r0, [sp, #4]
   15bd6:	9900      	ldr	r1, [sp, #0]
   15bd8:	b004      	add	sp, #16
   15bda:	bd80      	pop	{r7, pc}

00015bdc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   15bdc:	b082      	sub	sp, #8
   15bde:	9000      	str	r0, [sp, #0]
   15be0:	9101      	str	r1, [sp, #4]
   15be2:	b002      	add	sp, #8
   15be4:	4770      	bx	lr

00015be6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   15be6:	b580      	push	{r7, lr}
   15be8:	b086      	sub	sp, #24
   15bea:	9003      	str	r0, [sp, #12]
   15bec:	9104      	str	r1, [sp, #16]
   15bee:	9205      	str	r2, [sp, #20]
   15bf0:	9002      	str	r0, [sp, #8]
   15bf2:	4610      	mov	r0, r2
   15bf4:	9a02      	ldr	r2, [sp, #8]
   15bf6:	9101      	str	r1, [sp, #4]
   15bf8:	4611      	mov	r1, r2
   15bfa:	9a01      	ldr	r2, [sp, #4]
   15bfc:	f000 f886 	bl	15d0c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   15c00:	9000      	str	r0, [sp, #0]
   15c02:	e7ff      	b.n	15c04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   15c04:	9800      	ldr	r0, [sp, #0]
   15c06:	b006      	add	sp, #24
   15c08:	bd80      	pop	{r7, pc}

00015c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   15c0a:	b084      	sub	sp, #16
   15c0c:	9002      	str	r0, [sp, #8]
   15c0e:	9103      	str	r1, [sp, #12]
   15c10:	9000      	str	r0, [sp, #0]
   15c12:	9101      	str	r1, [sp, #4]
   15c14:	9801      	ldr	r0, [sp, #4]
   15c16:	b004      	add	sp, #16
   15c18:	4770      	bx	lr

00015c1a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   15c1a:	b580      	push	{r7, lr}
   15c1c:	b092      	sub	sp, #72	; 0x48
   15c1e:	900e      	str	r0, [sp, #56]	; 0x38
   15c20:	910f      	str	r1, [sp, #60]	; 0x3c
   15c22:	9009      	str	r0, [sp, #36]	; 0x24
   15c24:	9108      	str	r1, [sp, #32]
   15c26:	f000 f83e 	bl	15ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   15c2a:	4601      	mov	r1, r0
   15c2c:	9010      	str	r0, [sp, #64]	; 0x40
   15c2e:	9107      	str	r1, [sp, #28]
   15c30:	e7ff      	b.n	15c32 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   15c32:	9807      	ldr	r0, [sp, #28]
   15c34:	f000 fcc0 	bl	165b8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15c38:	e7ff      	b.n	15c3a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   15c3a:	e7ff      	b.n	15c3c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   15c3c:	2002      	movs	r0, #2
   15c3e:	9011      	str	r0, [sp, #68]	; 0x44
   15c40:	9811      	ldr	r0, [sp, #68]	; 0x44
   15c42:	9006      	str	r0, [sp, #24]
   15c44:	e7ff      	b.n	15c46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   15c46:	9806      	ldr	r0, [sp, #24]
   15c48:	2800      	cmp	r0, #0
   15c4a:	d006      	beq.n	15c5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   15c4c:	e7ff      	b.n	15c4e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   15c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
   15c50:	9908      	ldr	r1, [sp, #32]
   15c52:	f7ff ffda 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15c56:	9005      	str	r0, [sp, #20]
   15c58:	e011      	b.n	15c7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   15c5a:	9807      	ldr	r0, [sp, #28]
   15c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   15c5e:	9004      	str	r0, [sp, #16]
   15c60:	4608      	mov	r0, r1
   15c62:	9908      	ldr	r1, [sp, #32]
   15c64:	f7ff ffd1 	bl	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15c68:	9003      	str	r0, [sp, #12]
   15c6a:	e7ff      	b.n	15c6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   15c6c:	9804      	ldr	r0, [sp, #16]
   15c6e:	9903      	ldr	r1, [sp, #12]
   15c70:	f7fa fa26 	bl	100c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   15c74:	9002      	str	r0, [sp, #8]
   15c76:	e7ff      	b.n	15c78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   15c78:	9802      	ldr	r0, [sp, #8]
   15c7a:	900c      	str	r0, [sp, #48]	; 0x30
   15c7c:	e006      	b.n	15c8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15c7e:	9807      	ldr	r0, [sp, #28]
   15c80:	9905      	ldr	r1, [sp, #20]
   15c82:	f000 fc78 	bl	16576 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   15c86:	900c      	str	r0, [sp, #48]	; 0x30
   15c88:	e7ff      	b.n	15c8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   15c8a:	e7ff      	b.n	15c8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15c8c:	9807      	ldr	r0, [sp, #28]
   15c8e:	f000 f8e2 	bl	15e56 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15c92:	9001      	str	r0, [sp, #4]
   15c94:	e7ff      	b.n	15c96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   15c96:	980c      	ldr	r0, [sp, #48]	; 0x30
   15c98:	9901      	ldr	r1, [sp, #4]
   15c9a:	910a      	str	r1, [sp, #40]	; 0x28
   15c9c:	900b      	str	r0, [sp, #44]	; 0x2c
   15c9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   15ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15ca2:	b012      	add	sp, #72	; 0x48
   15ca4:	bd80      	pop	{r7, pc}

00015ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   15ca6:	b082      	sub	sp, #8
   15ca8:	9000      	str	r0, [sp, #0]
   15caa:	9101      	str	r1, [sp, #4]
   15cac:	b002      	add	sp, #8
   15cae:	4770      	bx	lr

00015cb0 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   15cb0:	b580      	push	{r7, lr}
   15cb2:	b086      	sub	sp, #24
   15cb4:	9003      	str	r0, [sp, #12]
   15cb6:	9104      	str	r1, [sp, #16]
   15cb8:	f7ff ff1b 	bl	15af2 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   15cbc:	9002      	str	r0, [sp, #8]
   15cbe:	9101      	str	r1, [sp, #4]
   15cc0:	e7ff      	b.n	15cc2 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   15cc2:	9802      	ldr	r0, [sp, #8]
   15cc4:	9901      	ldr	r1, [sp, #4]
   15cc6:	b006      	add	sp, #24
   15cc8:	bd80      	pop	{r7, pc}

00015cca <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   15cca:	b580      	push	{r7, lr}
   15ccc:	b088      	sub	sp, #32
   15cce:	9005      	str	r0, [sp, #20]
   15cd0:	9106      	str	r1, [sp, #24]
   15cd2:	9207      	str	r2, [sp, #28]
   15cd4:	9004      	str	r0, [sp, #16]
   15cd6:	4610      	mov	r0, r2
   15cd8:	9a04      	ldr	r2, [sp, #16]
   15cda:	9103      	str	r1, [sp, #12]
   15cdc:	4611      	mov	r1, r2
   15cde:	9a03      	ldr	r2, [sp, #12]
   15ce0:	f7ff fee8 	bl	15ab4 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   15ce4:	9002      	str	r0, [sp, #8]
   15ce6:	9101      	str	r1, [sp, #4]
   15ce8:	e7ff      	b.n	15cea <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   15cea:	9802      	ldr	r0, [sp, #8]
   15cec:	9901      	ldr	r1, [sp, #4]
   15cee:	b008      	add	sp, #32
   15cf0:	bd80      	pop	{r7, pc}

00015cf2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   15cf2:	b580      	push	{r7, lr}
   15cf4:	b084      	sub	sp, #16
   15cf6:	9002      	str	r0, [sp, #8]
   15cf8:	9103      	str	r1, [sp, #12]
   15cfa:	f7ff ff8e 	bl	15c1a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   15cfe:	9001      	str	r0, [sp, #4]
   15d00:	9100      	str	r1, [sp, #0]
   15d02:	e7ff      	b.n	15d04 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   15d04:	9801      	ldr	r0, [sp, #4]
   15d06:	9900      	ldr	r1, [sp, #0]
   15d08:	b004      	add	sp, #16
   15d0a:	bd80      	pop	{r7, pc}

00015d0c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   15d0c:	b580      	push	{r7, lr}
   15d0e:	b086      	sub	sp, #24
   15d10:	9003      	str	r0, [sp, #12]
   15d12:	9104      	str	r1, [sp, #16]
   15d14:	9205      	str	r2, [sp, #20]
   15d16:	9002      	str	r0, [sp, #8]
   15d18:	4608      	mov	r0, r1
   15d1a:	4611      	mov	r1, r2
   15d1c:	f7ff ff5e 	bl	15bdc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15d20:	9001      	str	r0, [sp, #4]
   15d22:	e7ff      	b.n	15d24 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   15d24:	9801      	ldr	r0, [sp, #4]
   15d26:	9902      	ldr	r1, [sp, #8]
   15d28:	f000 f868 	bl	15dfc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15d2c:	9000      	str	r0, [sp, #0]
   15d2e:	e7ff      	b.n	15d30 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   15d30:	9800      	ldr	r0, [sp, #0]
   15d32:	b006      	add	sp, #24
   15d34:	bd80      	pop	{r7, pc}

00015d36 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   15d36:	b580      	push	{r7, lr}
   15d38:	b08e      	sub	sp, #56	; 0x38
   15d3a:	9007      	str	r0, [sp, #28]
   15d3c:	6801      	ldr	r1, [r0, #0]
   15d3e:	9005      	str	r0, [sp, #20]
   15d40:	4608      	mov	r0, r1
   15d42:	f000 f88e 	bl	15e62 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d46:	9004      	str	r0, [sp, #16]
   15d48:	e7ff      	b.n	15d4a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   15d4a:	9804      	ldr	r0, [sp, #16]
   15d4c:	f000 f879 	bl	15e42 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   15d50:	e7ff      	b.n	15d52 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   15d52:	e7ff      	b.n	15d54 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   15d54:	2002      	movs	r0, #2
   15d56:	9008      	str	r0, [sp, #32]
   15d58:	9808      	ldr	r0, [sp, #32]
   15d5a:	9003      	str	r0, [sp, #12]
   15d5c:	e7ff      	b.n	15d5e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   15d5e:	9803      	ldr	r0, [sp, #12]
   15d60:	2800      	cmp	r0, #0
   15d62:	d007      	beq.n	15d74 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15d64:	e7ff      	b.n	15d66 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   15d66:	9805      	ldr	r0, [sp, #20]
   15d68:	6840      	ldr	r0, [r0, #4]
   15d6a:	f000 fc25 	bl	165b8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15d6e:	e7ff      	b.n	15d70 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   15d70:	e7ff      	b.n	15d72 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   15d72:	e7ff      	b.n	15d74 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15d74:	9805      	ldr	r0, [sp, #20]
   15d76:	6800      	ldr	r0, [r0, #0]
   15d78:	f000 f873 	bl	15e62 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d7c:	9002      	str	r0, [sp, #8]
   15d7e:	e7ff      	b.n	15d80 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   15d80:	9805      	ldr	r0, [sp, #20]
   15d82:	6841      	ldr	r1, [r0, #4]
   15d84:	9a02      	ldr	r2, [sp, #8]
   15d86:	428a      	cmp	r2, r1
   15d88:	d02f      	beq.n	15dea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   15d8a:	e7ff      	b.n	15d8c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   15d8c:	9805      	ldr	r0, [sp, #20]
   15d8e:	900a      	str	r0, [sp, #40]	; 0x28
   15d90:	2101      	movs	r1, #1
   15d92:	910b      	str	r1, [sp, #44]	; 0x2c
   15d94:	2102      	movs	r1, #2
   15d96:	910d      	str	r1, [sp, #52]	; 0x34
   15d98:	990d      	ldr	r1, [sp, #52]	; 0x34
   15d9a:	2900      	cmp	r1, #0
   15d9c:	d015      	beq.n	15dca <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   15d9e:	e7ff      	b.n	15da0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   15da0:	9805      	ldr	r0, [sp, #20]
   15da2:	6800      	ldr	r0, [r0, #0]
   15da4:	f000 f85d 	bl	15e62 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15da8:	900c      	str	r0, [sp, #48]	; 0x30
   15daa:	9905      	ldr	r1, [sp, #20]
   15dac:	680a      	ldr	r2, [r1, #0]
   15dae:	9001      	str	r0, [sp, #4]
   15db0:	4610      	mov	r0, r2
   15db2:	f000 f856 	bl	15e62 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15db6:	2101      	movs	r1, #1
   15db8:	f000 f837 	bl	15e2a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15dbc:	f000 f84b 	bl	15e56 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15dc0:	9905      	ldr	r1, [sp, #20]
   15dc2:	6008      	str	r0, [r1, #0]
   15dc4:	9801      	ldr	r0, [sp, #4]
   15dc6:	9009      	str	r0, [sp, #36]	; 0x24
   15dc8:	e00c      	b.n	15de4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15dca:	9805      	ldr	r0, [sp, #20]
   15dcc:	6840      	ldr	r0, [r0, #4]
   15dce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15dd2:	f7fa f980 	bl	100d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   15dd6:	9905      	ldr	r1, [sp, #20]
   15dd8:	6048      	str	r0, [r1, #4]
   15dda:	6808      	ldr	r0, [r1, #0]
   15ddc:	f000 f841 	bl	15e62 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15de0:	9009      	str	r0, [sp, #36]	; 0x24
   15de2:	e7ff      	b.n	15de4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15de4:	9809      	ldr	r0, [sp, #36]	; 0x24
   15de6:	9000      	str	r0, [sp, #0]
   15de8:	e002      	b.n	15df0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   15dea:	2000      	movs	r0, #0
   15dec:	9006      	str	r0, [sp, #24]
   15dee:	e002      	b.n	15df6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15df0:	9800      	ldr	r0, [sp, #0]
   15df2:	9006      	str	r0, [sp, #24]
   15df4:	e7ff      	b.n	15df6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15df6:	9806      	ldr	r0, [sp, #24]
   15df8:	b00e      	add	sp, #56	; 0x38
   15dfa:	bd80      	pop	{r7, pc}

00015dfc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   15dfc:	b580      	push	{r7, lr}
   15dfe:	b084      	sub	sp, #16
   15e00:	9002      	str	r0, [sp, #8]
   15e02:	9103      	str	r1, [sp, #12]
   15e04:	f000 f811 	bl	15e2a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15e08:	9001      	str	r0, [sp, #4]
   15e0a:	e7ff      	b.n	15e0c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   15e0c:	9801      	ldr	r0, [sp, #4]
   15e0e:	b004      	add	sp, #16
   15e10:	bd80      	pop	{r7, pc}

00015e12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   15e12:	b580      	push	{r7, lr}
   15e14:	b084      	sub	sp, #16
   15e16:	460a      	mov	r2, r1
   15e18:	9002      	str	r0, [sp, #8]
   15e1a:	f8ad 100e 	strh.w	r1, [sp, #14]
   15e1e:	9201      	str	r2, [sp, #4]
   15e20:	f000 fc4d 	bl	166be <_ZN4core3ptr5write17h147d4643d861e927E>
   15e24:	e7ff      	b.n	15e26 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   15e26:	b004      	add	sp, #16
   15e28:	bd80      	pop	{r7, pc}

00015e2a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   15e2a:	b084      	sub	sp, #16
   15e2c:	9001      	str	r0, [sp, #4]
   15e2e:	9102      	str	r1, [sp, #8]
   15e30:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   15e34:	9003      	str	r0, [sp, #12]
   15e36:	9803      	ldr	r0, [sp, #12]
   15e38:	9000      	str	r0, [sp, #0]
   15e3a:	e7ff      	b.n	15e3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   15e3c:	9800      	ldr	r0, [sp, #0]
   15e3e:	b004      	add	sp, #16
   15e40:	4770      	bx	lr

00015e42 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   15e42:	b082      	sub	sp, #8
   15e44:	9001      	str	r0, [sp, #4]
   15e46:	9000      	str	r0, [sp, #0]
   15e48:	e7ff      	b.n	15e4a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   15e4a:	9800      	ldr	r0, [sp, #0]
   15e4c:	fab0 f180 	clz	r1, r0
   15e50:	0948      	lsrs	r0, r1, #5
   15e52:	b002      	add	sp, #8
   15e54:	4770      	bx	lr

00015e56 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   15e56:	b082      	sub	sp, #8
   15e58:	9001      	str	r0, [sp, #4]
   15e5a:	9000      	str	r0, [sp, #0]
   15e5c:	9800      	ldr	r0, [sp, #0]
   15e5e:	b002      	add	sp, #8
   15e60:	4770      	bx	lr

00015e62 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   15e62:	b081      	sub	sp, #4
   15e64:	9000      	str	r0, [sp, #0]
   15e66:	b001      	add	sp, #4
   15e68:	4770      	bx	lr

00015e6a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   15e6a:	b084      	sub	sp, #16
   15e6c:	460a      	mov	r2, r1
   15e6e:	4603      	mov	r3, r0
   15e70:	9103      	str	r1, [sp, #12]
   15e72:	9002      	str	r0, [sp, #8]
   15e74:	b004      	add	sp, #16
   15e76:	4770      	bx	lr

00015e78 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>:
   15e78:	b082      	sub	sp, #8
   15e7a:	9000      	str	r0, [sp, #0]
   15e7c:	9101      	str	r1, [sp, #4]
   15e7e:	7800      	ldrb	r0, [r0, #0]
   15e80:	7809      	ldrb	r1, [r1, #0]
   15e82:	2200      	movs	r2, #0
   15e84:	4288      	cmp	r0, r1
   15e86:	bf38      	it	cc
   15e88:	2201      	movcc	r2, #1
   15e8a:	4610      	mov	r0, r2
   15e8c:	b002      	add	sp, #8
   15e8e:	4770      	bx	lr

00015e90 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>:
   15e90:	b580      	push	{r7, lr}
   15e92:	b08c      	sub	sp, #48	; 0x30
   15e94:	9005      	str	r0, [sp, #20]
   15e96:	9106      	str	r1, [sp, #24]
   15e98:	9207      	str	r2, [sp, #28]
   15e9a:	9008      	str	r0, [sp, #32]
   15e9c:	9109      	str	r1, [sp, #36]	; 0x24
   15e9e:	2301      	movs	r3, #1
   15ea0:	930b      	str	r3, [sp, #44]	; 0x2c
   15ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ea4:	9204      	str	r2, [sp, #16]
   15ea6:	9103      	str	r1, [sp, #12]
   15ea8:	9002      	str	r0, [sp, #8]
   15eaa:	9301      	str	r3, [sp, #4]
   15eac:	e7ff      	b.n	15eae <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x1e>
   15eae:	9801      	ldr	r0, [sp, #4]
   15eb0:	9904      	ldr	r1, [sp, #16]
   15eb2:	fb00 f201 	mul.w	r2, r0, r1
   15eb6:	920a      	str	r2, [sp, #40]	; 0x28
   15eb8:	9802      	ldr	r0, [sp, #8]
   15eba:	9903      	ldr	r1, [sp, #12]
   15ebc:	f000 fc07 	bl	166ce <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>
   15ec0:	e7ff      	b.n	15ec2 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x32>
   15ec2:	b00c      	add	sp, #48	; 0x30
   15ec4:	bd80      	pop	{r7, pc}

00015ec6 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>:
   15ec6:	b580      	push	{r7, lr}
   15ec8:	b088      	sub	sp, #32
   15eca:	9004      	str	r0, [sp, #16]
   15ecc:	9105      	str	r1, [sp, #20]
   15ece:	2201      	movs	r2, #1
   15ed0:	9207      	str	r2, [sp, #28]
   15ed2:	9a07      	ldr	r2, [sp, #28]
   15ed4:	9103      	str	r1, [sp, #12]
   15ed6:	9002      	str	r0, [sp, #8]
   15ed8:	9201      	str	r2, [sp, #4]
   15eda:	e7ff      	b.n	15edc <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x16>
   15edc:	9801      	ldr	r0, [sp, #4]
   15ede:	2820      	cmp	r0, #32
   15ee0:	d306      	bcc.n	15ef0 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x2a>
   15ee2:	e7ff      	b.n	15ee4 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x1e>
   15ee4:	2201      	movs	r2, #1
   15ee6:	9802      	ldr	r0, [sp, #8]
   15ee8:	9903      	ldr	r1, [sp, #12]
   15eea:	f7ff ffd1 	bl	15e90 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>
   15eee:	e013      	b.n	15f18 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x52>
   15ef0:	9802      	ldr	r0, [sp, #8]
   15ef2:	f000 f814 	bl	15f1e <_ZN4core3ptr4read17h10ae8fa070723038E>
   15ef6:	4601      	mov	r1, r0
   15ef8:	f88d 001b 	strb.w	r0, [sp, #27]
   15efc:	9100      	str	r1, [sp, #0]
   15efe:	e7ff      	b.n	15f00 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x3a>
   15f00:	2201      	movs	r2, #1
   15f02:	9803      	ldr	r0, [sp, #12]
   15f04:	9902      	ldr	r1, [sp, #8]
   15f06:	f7f8 faf7 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15f0a:	e7ff      	b.n	15f0c <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x46>
   15f0c:	9803      	ldr	r0, [sp, #12]
   15f0e:	9900      	ldr	r1, [sp, #0]
   15f10:	f7f9 fc49 	bl	f7a6 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   15f14:	e7ff      	b.n	15f16 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x50>
   15f16:	e000      	b.n	15f1a <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15f18:	e7ff      	b.n	15f1a <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15f1a:	b008      	add	sp, #32
   15f1c:	bd80      	pop	{r7, pc}

00015f1e <_ZN4core3ptr4read17h10ae8fa070723038E>:
   15f1e:	b580      	push	{r7, lr}
   15f20:	b088      	sub	sp, #32
   15f22:	9004      	str	r0, [sp, #16]
   15f24:	f89d 1015 	ldrb.w	r1, [sp, #21]
   15f28:	f88d 100f 	strb.w	r1, [sp, #15]
   15f2c:	9002      	str	r0, [sp, #8]
   15f2e:	e7ff      	b.n	15f30 <_ZN4core3ptr4read17h10ae8fa070723038E+0x12>
   15f30:	f10d 000f 	add.w	r0, sp, #15
   15f34:	9006      	str	r0, [sp, #24]
   15f36:	9007      	str	r0, [sp, #28]
   15f38:	e7ff      	b.n	15f3a <_ZN4core3ptr4read17h10ae8fa070723038E+0x1c>
   15f3a:	f10d 010f 	add.w	r1, sp, #15
   15f3e:	2201      	movs	r2, #1
   15f40:	9802      	ldr	r0, [sp, #8]
   15f42:	f7f8 fad9 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15f46:	e7ff      	b.n	15f48 <_ZN4core3ptr4read17h10ae8fa070723038E+0x2a>
   15f48:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15f4c:	4601      	mov	r1, r0
   15f4e:	f88d 0016 	strb.w	r0, [sp, #22]
   15f52:	f88d 0017 	strb.w	r0, [sp, #23]
   15f56:	9101      	str	r1, [sp, #4]
   15f58:	e7ff      	b.n	15f5a <_ZN4core3ptr4read17h10ae8fa070723038E+0x3c>
   15f5a:	9801      	ldr	r0, [sp, #4]
   15f5c:	b008      	add	sp, #32
   15f5e:	bd80      	pop	{r7, pc}

00015f60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15f60:	b580      	push	{r7, lr}
   15f62:	b088      	sub	sp, #32
   15f64:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15f66:	1d01      	adds	r1, r0, #4
   15f68:	9106      	str	r1, [sp, #24]
   15f6a:	9107      	str	r1, [sp, #28]
   15f6c:	9004      	str	r0, [sp, #16]
   15f6e:	9103      	str	r1, [sp, #12]
   15f70:	e7ff      	b.n	15f72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   15f72:	9804      	ldr	r0, [sp, #16]
   15f74:	6801      	ldr	r1, [r0, #0]
   15f76:	9803      	ldr	r0, [sp, #12]
   15f78:	f7f9 fa6f 	bl	f45a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15f7c:	9002      	str	r0, [sp, #8]
   15f7e:	9101      	str	r1, [sp, #4]
   15f80:	e7ff      	b.n	15f82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   15f82:	9802      	ldr	r0, [sp, #8]
   15f84:	9901      	ldr	r1, [sp, #4]
   15f86:	b008      	add	sp, #32
   15f88:	bd80      	pop	{r7, pc}

00015f8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15f8a:	b580      	push	{r7, lr}
   15f8c:	b088      	sub	sp, #32
   15f8e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15f90:	1d01      	adds	r1, r0, #4
   15f92:	9106      	str	r1, [sp, #24]
   15f94:	9107      	str	r1, [sp, #28]
   15f96:	9004      	str	r0, [sp, #16]
   15f98:	9103      	str	r1, [sp, #12]
   15f9a:	e7ff      	b.n	15f9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x12>
   15f9c:	9804      	ldr	r0, [sp, #16]
   15f9e:	6801      	ldr	r1, [r0, #0]
   15fa0:	9803      	ldr	r0, [sp, #12]
   15fa2:	f7f9 fa5a 	bl	f45a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15fa6:	9002      	str	r0, [sp, #8]
   15fa8:	9101      	str	r1, [sp, #4]
   15faa:	e7ff      	b.n	15fac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x22>
    }
   15fac:	9802      	ldr	r0, [sp, #8]
   15fae:	9901      	ldr	r1, [sp, #4]
   15fb0:	b008      	add	sp, #32
   15fb2:	bd80      	pop	{r7, pc}

00015fb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15fb4:	b580      	push	{r7, lr}
   15fb6:	b08a      	sub	sp, #40	; 0x28
   15fb8:	460a      	mov	r2, r1
   15fba:	9006      	str	r0, [sp, #24]
   15fbc:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   15fc0:	1d01      	adds	r1, r0, #4
   15fc2:	9108      	str	r1, [sp, #32]
   15fc4:	9109      	str	r1, [sp, #36]	; 0x24
   15fc6:	9005      	str	r0, [sp, #20]
   15fc8:	9204      	str	r2, [sp, #16]
   15fca:	9103      	str	r1, [sp, #12]
   15fcc:	e7ff      	b.n	15fce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x1a>
            .add(self.len)
   15fce:	9805      	ldr	r0, [sp, #20]
   15fd0:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15fd2:	9803      	ldr	r0, [sp, #12]
   15fd4:	f7f8 fbf4 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15fd8:	9002      	str	r0, [sp, #8]
   15fda:	e7ff      	b.n	15fdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x28>
   15fdc:	9802      	ldr	r0, [sp, #8]
   15fde:	9904      	ldr	r1, [sp, #16]
   15fe0:	f000 f994 	bl	1630c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   15fe4:	e7ff      	b.n	15fe6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x32>
        self.len += 1;
   15fe6:	9805      	ldr	r0, [sp, #20]
   15fe8:	6801      	ldr	r1, [r0, #0]
   15fea:	1c4a      	adds	r2, r1, #1
   15fec:	4613      	mov	r3, r2
   15fee:	428a      	cmp	r2, r1
   15ff0:	9301      	str	r3, [sp, #4]
   15ff2:	d305      	bcc.n	16000 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x4c>
   15ff4:	e7ff      	b.n	15ff6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x42>
   15ff6:	9801      	ldr	r0, [sp, #4]
   15ff8:	9905      	ldr	r1, [sp, #20]
   15ffa:	6008      	str	r0, [r1, #0]
    }
   15ffc:	b00a      	add	sp, #40	; 0x28
   15ffe:	bd80      	pop	{r7, pc}
        self.len += 1;
   16000:	f64f 40a0 	movw	r0, #64672	; 0xfca0
   16004:	f2c0 0001 	movt	r0, #1
   16008:	f64f 4290 	movw	r2, #64656	; 0xfc90
   1600c:	f2c0 0201 	movt	r2, #1
   16010:	211c      	movs	r1, #28
   16012:	f000 fd0b 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16016:	defe      	udf	#254	; 0xfe

00016018 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16018:	b580      	push	{r7, lr}
   1601a:	b08a      	sub	sp, #40	; 0x28
   1601c:	460a      	mov	r2, r1
   1601e:	9006      	str	r0, [sp, #24]
   16020:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16024:	1d01      	adds	r1, r0, #4
   16026:	9108      	str	r1, [sp, #32]
   16028:	9109      	str	r1, [sp, #36]	; 0x24
   1602a:	9005      	str	r0, [sp, #20]
   1602c:	9204      	str	r2, [sp, #16]
   1602e:	9103      	str	r1, [sp, #12]
   16030:	e7ff      	b.n	16032 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   16032:	9805      	ldr	r0, [sp, #20]
   16034:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16036:	9803      	ldr	r0, [sp, #12]
   16038:	f7f8 fbc2 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1603c:	9002      	str	r0, [sp, #8]
   1603e:	e7ff      	b.n	16040 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   16040:	9802      	ldr	r0, [sp, #8]
   16042:	9904      	ldr	r1, [sp, #16]
   16044:	f000 f962 	bl	1630c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16048:	e7ff      	b.n	1604a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   1604a:	9805      	ldr	r0, [sp, #20]
   1604c:	6801      	ldr	r1, [r0, #0]
   1604e:	1c4a      	adds	r2, r1, #1
   16050:	4613      	mov	r3, r2
   16052:	428a      	cmp	r2, r1
   16054:	9301      	str	r3, [sp, #4]
   16056:	d305      	bcc.n	16064 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   16058:	e7ff      	b.n	1605a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   1605a:	9801      	ldr	r0, [sp, #4]
   1605c:	9905      	ldr	r1, [sp, #20]
   1605e:	6008      	str	r0, [r1, #0]
    }
   16060:	b00a      	add	sp, #40	; 0x28
   16062:	bd80      	pop	{r7, pc}
        self.len += 1;
   16064:	f64f 40a0 	movw	r0, #64672	; 0xfca0
   16068:	f2c0 0001 	movt	r0, #1
   1606c:	f64f 4290 	movw	r2, #64656	; 0xfc90
   16070:	f2c0 0201 	movt	r2, #1
   16074:	211c      	movs	r1, #28
   16076:	f000 fcd9 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1607a:	defe      	udf	#254	; 0xfe

0001607c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1607c:	b580      	push	{r7, lr}
   1607e:	b094      	sub	sp, #80	; 0x50
   16080:	900e      	str	r0, [sp, #56]	; 0x38
   16082:	910f      	str	r1, [sp, #60]	; 0x3c
   16084:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   16086:	6803      	ldr	r3, [r0, #0]
   16088:	9009      	str	r0, [sp, #36]	; 0x24
   1608a:	4608      	mov	r0, r1
   1608c:	9108      	str	r1, [sp, #32]
   1608e:	4611      	mov	r1, r2
   16090:	9207      	str	r2, [sp, #28]
   16092:	9306      	str	r3, [sp, #24]
   16094:	f7f8 fc24 	bl	e8e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16098:	9005      	str	r0, [sp, #20]
   1609a:	e7ff      	b.n	1609c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x20>
   1609c:	9806      	ldr	r0, [sp, #24]
   1609e:	9905      	ldr	r1, [sp, #20]
   160a0:	1842      	adds	r2, r0, r1
   160a2:	4613      	mov	r3, r2
   160a4:	4282      	cmp	r2, r0
   160a6:	9304      	str	r3, [sp, #16]
   160a8:	d33f      	bcc.n	1612a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xae>
   160aa:	e7ff      	b.n	160ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x30>
   160ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   160ae:	f000 f8ad 	bl	1620c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>
   160b2:	9003      	str	r0, [sp, #12]
   160b4:	e7ff      	b.n	160b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x3a>
   160b6:	9804      	ldr	r0, [sp, #16]
   160b8:	9903      	ldr	r1, [sp, #12]
   160ba:	4288      	cmp	r0, r1
   160bc:	d807      	bhi.n	160ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x52>
   160be:	e7ff      	b.n	160c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x44>
            for elem in other {
   160c0:	9808      	ldr	r0, [sp, #32]
   160c2:	9907      	ldr	r1, [sp, #28]
   160c4:	f7f9 fae7 	bl	f696 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   160c8:	9002      	str	r0, [sp, #8]
   160ca:	9101      	str	r1, [sp, #4]
   160cc:	e003      	b.n	160d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x5a>
   160ce:	2001      	movs	r0, #1
            Err(())
   160d0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   160d4:	e025      	b.n	16122 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   160d6:	9802      	ldr	r0, [sp, #8]
   160d8:	900b      	str	r0, [sp, #44]	; 0x2c
   160da:	9901      	ldr	r1, [sp, #4]
   160dc:	910c      	str	r1, [sp, #48]	; 0x30
   160de:	e7ff      	b.n	160e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
   160e0:	a80b      	add	r0, sp, #44	; 0x2c
   160e2:	f7fc ff85 	bl	12ff0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   160e6:	900d      	str	r0, [sp, #52]	; 0x34
   160e8:	e7ff      	b.n	160ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x6e>
   160ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   160ec:	2800      	cmp	r0, #0
   160ee:	4601      	mov	r1, r0
   160f0:	bf18      	it	ne
   160f2:	2101      	movne	r1, #1
   160f4:	2800      	cmp	r0, #0
   160f6:	d001      	beq.n	160fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x80>
   160f8:	e7ff      	b.n	160fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x7e>
   160fa:	e004      	b.n	16106 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x8a>
   160fc:	2000      	movs	r0, #0
            Ok(())
   160fe:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16102:	e00e      	b.n	16122 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   16104:	defe      	udf	#254	; 0xfe
   16106:	980d      	ldr	r0, [sp, #52]	; 0x34
   16108:	9011      	str	r0, [sp, #68]	; 0x44
   1610a:	9012      	str	r0, [sp, #72]	; 0x48
   1610c:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   1610e:	f000 f909 	bl	16324 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   16112:	9000      	str	r0, [sp, #0]
   16114:	e7ff      	b.n	16116 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x9a>
   16116:	9809      	ldr	r0, [sp, #36]	; 0x24
   16118:	9900      	ldr	r1, [sp, #0]
   1611a:	f7ff ff4b 	bl	15fb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>
   1611e:	e7ff      	b.n	16120 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa4>
            for elem in other {
   16120:	e7de      	b.n	160e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
    }
   16122:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   16126:	b014      	add	sp, #80	; 0x50
   16128:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   1612a:	f64f 40a0 	movw	r0, #64672	; 0xfca0
   1612e:	f2c0 0001 	movt	r0, #1
   16132:	f64f 42bc 	movw	r2, #64700	; 0xfcbc
   16136:	f2c0 0201 	movt	r2, #1
   1613a:	211c      	movs	r1, #28
   1613c:	f000 fc76 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16140:	defe      	udf	#254	; 0xfe

00016142 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   16142:	b580      	push	{r7, lr}
   16144:	b088      	sub	sp, #32
   16146:	460a      	mov	r2, r1
   16148:	9006      	str	r0, [sp, #24]
   1614a:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   1614e:	6801      	ldr	r1, [r0, #0]
   16150:	9004      	str	r0, [sp, #16]
   16152:	9203      	str	r2, [sp, #12]
   16154:	9102      	str	r1, [sp, #8]
   16156:	f000 f863 	bl	16220 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   1615a:	9001      	str	r0, [sp, #4]
   1615c:	e7ff      	b.n	1615e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   1615e:	9802      	ldr	r0, [sp, #8]
   16160:	9901      	ldr	r1, [sp, #4]
   16162:	4288      	cmp	r0, r1
   16164:	d307      	bcc.n	16176 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   16166:	e7ff      	b.n	16168 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   16168:	9803      	ldr	r0, [sp, #12]
   1616a:	f88d 0015 	strb.w	r0, [sp, #21]
   1616e:	2101      	movs	r1, #1
   16170:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   16174:	e008      	b.n	16188 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   16176:	9804      	ldr	r0, [sp, #16]
   16178:	9903      	ldr	r1, [sp, #12]
   1617a:	f7ff ff4d 	bl	16018 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   1617e:	e7ff      	b.n	16180 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   16180:	2000      	movs	r0, #0
            Ok(())
   16182:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   16186:	e7ff      	b.n	16188 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16188:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1618c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16190:	b008      	add	sp, #32
   16192:	bd80      	pop	{r7, pc}

00016194 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   16194:	b580      	push	{r7, lr}
   16196:	b082      	sub	sp, #8
   16198:	9001      	str	r0, [sp, #4]
   1619a:	2100      	movs	r1, #0
        self.truncate(0);
   1619c:	f000 f880 	bl	162a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   161a0:	e7ff      	b.n	161a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   161a2:	b002      	add	sp, #8
   161a4:	bd80      	pop	{r7, pc}

000161a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>:
    pub(crate) fn clear(&mut self) {
   161a6:	b580      	push	{r7, lr}
   161a8:	b082      	sub	sp, #8
   161aa:	9001      	str	r0, [sp, #4]
   161ac:	2100      	movs	r1, #0
        self.truncate(0);
   161ae:	f000 f841 	bl	16234 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>
   161b2:	e7ff      	b.n	161b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E+0xe>
    }
   161b4:	b002      	add	sp, #8
   161b6:	bd80      	pop	{r7, pc}

000161b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   161b8:	b580      	push	{r7, lr}
   161ba:	b088      	sub	sp, #32
   161bc:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   161be:	1d01      	adds	r1, r0, #4
   161c0:	9106      	str	r1, [sp, #24]
   161c2:	9107      	str	r1, [sp, #28]
   161c4:	9004      	str	r0, [sp, #16]
   161c6:	9103      	str	r1, [sp, #12]
   161c8:	e7ff      	b.n	161ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x12>
   161ca:	9804      	ldr	r0, [sp, #16]
   161cc:	6801      	ldr	r1, [r0, #0]
   161ce:	9803      	ldr	r0, [sp, #12]
   161d0:	f7fc fff0 	bl	131b4 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   161d4:	9002      	str	r0, [sp, #8]
   161d6:	9101      	str	r1, [sp, #4]
   161d8:	e7ff      	b.n	161da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x22>
    }
   161da:	9802      	ldr	r0, [sp, #8]
   161dc:	9901      	ldr	r1, [sp, #4]
   161de:	b008      	add	sp, #32
   161e0:	bd80      	pop	{r7, pc}

000161e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   161e2:	b580      	push	{r7, lr}
   161e4:	b088      	sub	sp, #32
   161e6:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   161e8:	1d01      	adds	r1, r0, #4
   161ea:	9106      	str	r1, [sp, #24]
   161ec:	9107      	str	r1, [sp, #28]
   161ee:	9004      	str	r0, [sp, #16]
   161f0:	9103      	str	r1, [sp, #12]
   161f2:	e7ff      	b.n	161f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   161f4:	9804      	ldr	r0, [sp, #16]
   161f6:	6801      	ldr	r1, [r0, #0]
   161f8:	9803      	ldr	r0, [sp, #12]
   161fa:	f7fc ffdb 	bl	131b4 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   161fe:	9002      	str	r0, [sp, #8]
   16200:	9101      	str	r1, [sp, #4]
   16202:	e7ff      	b.n	16204 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   16204:	9802      	ldr	r0, [sp, #8]
   16206:	9901      	ldr	r1, [sp, #4]
   16208:	b008      	add	sp, #32
   1620a:	bd80      	pop	{r7, pc}

0001620c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>:
    pub(crate) fn capacity(&self) -> usize {
   1620c:	b580      	push	{r7, lr}
   1620e:	b082      	sub	sp, #8
   16210:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16212:	f000 f91c 	bl	1644e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   16216:	9000      	str	r0, [sp, #0]
   16218:	e7ff      	b.n	1621a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE+0xe>
    }
   1621a:	9800      	ldr	r0, [sp, #0]
   1621c:	b002      	add	sp, #8
   1621e:	bd80      	pop	{r7, pc}

00016220 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   16220:	b580      	push	{r7, lr}
   16222:	b082      	sub	sp, #8
   16224:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16226:	f000 f942 	bl	164ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   1622a:	9000      	str	r0, [sp, #0]
   1622c:	e7ff      	b.n	1622e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   1622e:	9800      	ldr	r0, [sp, #0]
   16230:	b002      	add	sp, #8
   16232:	bd80      	pop	{r7, pc}

00016234 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   16234:	b580      	push	{r7, lr}
   16236:	b08a      	sub	sp, #40	; 0x28
   16238:	9007      	str	r0, [sp, #28]
   1623a:	9108      	str	r1, [sp, #32]
   1623c:	9106      	str	r1, [sp, #24]
   1623e:	9005      	str	r0, [sp, #20]
   16240:	e7ff      	b.n	16242 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
            while len < self.len {
   16242:	9805      	ldr	r0, [sp, #20]
   16244:	6801      	ldr	r1, [r0, #0]
   16246:	9a06      	ldr	r2, [sp, #24]
   16248:	428a      	cmp	r2, r1
   1624a:	d302      	bcc.n	16252 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1e>
   1624c:	e7ff      	b.n	1624e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1a>
    }
   1624e:	b00a      	add	sp, #40	; 0x28
   16250:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16252:	9805      	ldr	r0, [sp, #20]
   16254:	6801      	ldr	r1, [r0, #0]
   16256:	1e4a      	subs	r2, r1, #1
   16258:	2901      	cmp	r1, #1
   1625a:	9204      	str	r2, [sp, #16]
   1625c:	d314      	bcc.n	16288 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x54>
   1625e:	e7ff      	b.n	16260 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x2c>
   16260:	9804      	ldr	r0, [sp, #16]
   16262:	9905      	ldr	r1, [sp, #20]
   16264:	6008      	str	r0, [r1, #0]
                let len = self.len;
   16266:	680a      	ldr	r2, [r1, #0]
   16268:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1626a:	4608      	mov	r0, r1
   1626c:	9203      	str	r2, [sp, #12]
   1626e:	f7ff fe8c 	bl	15f8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>
   16272:	9002      	str	r0, [sp, #8]
   16274:	9101      	str	r1, [sp, #4]
   16276:	e7ff      	b.n	16278 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x44>
   16278:	9802      	ldr	r0, [sp, #8]
   1627a:	9901      	ldr	r1, [sp, #4]
   1627c:	9a03      	ldr	r2, [sp, #12]
   1627e:	f7f8 fb1d 	bl	e8bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   16282:	e7ff      	b.n	16284 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x50>
   16284:	e7ff      	b.n	16286 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x52>
            while len < self.len {
   16286:	e7dc      	b.n	16242 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
                self.len -= 1;
   16288:	f64f 40e0 	movw	r0, #64736	; 0xfce0
   1628c:	f2c0 0001 	movt	r0, #1
   16290:	f64f 42cc 	movw	r2, #64716	; 0xfccc
   16294:	f2c0 0201 	movt	r2, #1
   16298:	2121      	movs	r1, #33	; 0x21
   1629a:	f000 fbc7 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1629e:	defe      	udf	#254	; 0xfe

000162a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   162a0:	b580      	push	{r7, lr}
   162a2:	b08a      	sub	sp, #40	; 0x28
   162a4:	9007      	str	r0, [sp, #28]
   162a6:	9108      	str	r1, [sp, #32]
   162a8:	9106      	str	r1, [sp, #24]
   162aa:	9005      	str	r0, [sp, #20]
   162ac:	e7ff      	b.n	162ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   162ae:	9805      	ldr	r0, [sp, #20]
   162b0:	6801      	ldr	r1, [r0, #0]
   162b2:	9a06      	ldr	r2, [sp, #24]
   162b4:	428a      	cmp	r2, r1
   162b6:	d302      	bcc.n	162be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   162b8:	e7ff      	b.n	162ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   162ba:	b00a      	add	sp, #40	; 0x28
   162bc:	bd80      	pop	{r7, pc}
                self.len -= 1;
   162be:	9805      	ldr	r0, [sp, #20]
   162c0:	6801      	ldr	r1, [r0, #0]
   162c2:	1e4a      	subs	r2, r1, #1
   162c4:	2901      	cmp	r1, #1
   162c6:	9204      	str	r2, [sp, #16]
   162c8:	d314      	bcc.n	162f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   162ca:	e7ff      	b.n	162cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   162cc:	9804      	ldr	r0, [sp, #16]
   162ce:	9905      	ldr	r1, [sp, #20]
   162d0:	6008      	str	r0, [r1, #0]
                let len = self.len;
   162d2:	680a      	ldr	r2, [r1, #0]
   162d4:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   162d6:	4608      	mov	r0, r1
   162d8:	9203      	str	r2, [sp, #12]
   162da:	f7ff fe41 	bl	15f60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   162de:	9002      	str	r0, [sp, #8]
   162e0:	9101      	str	r1, [sp, #4]
   162e2:	e7ff      	b.n	162e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   162e4:	9802      	ldr	r0, [sp, #8]
   162e6:	9901      	ldr	r1, [sp, #4]
   162e8:	9a03      	ldr	r2, [sp, #12]
   162ea:	f7f8 fae7 	bl	e8bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   162ee:	e7ff      	b.n	162f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   162f0:	e7ff      	b.n	162f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   162f2:	e7dc      	b.n	162ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   162f4:	f64f 40e0 	movw	r0, #64736	; 0xfce0
   162f8:	f2c0 0001 	movt	r0, #1
   162fc:	f64f 42cc 	movw	r2, #64716	; 0xfccc
   16300:	f2c0 0201 	movt	r2, #1
   16304:	2121      	movs	r1, #33	; 0x21
   16306:	f000 fb91 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1630a:	defe      	udf	#254	; 0xfe

0001630c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   1630c:	b580      	push	{r7, lr}
   1630e:	b084      	sub	sp, #16
   16310:	460a      	mov	r2, r1
   16312:	9002      	str	r0, [sp, #8]
   16314:	f88d 100f 	strb.w	r1, [sp, #15]
   16318:	9201      	str	r2, [sp, #4]
   1631a:	f7f9 fa44 	bl	f7a6 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   1631e:	e7ff      	b.n	16320 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   16320:	b004      	add	sp, #16
   16322:	bd80      	pop	{r7, pc}

00016324 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   16324:	b081      	sub	sp, #4
   16326:	9000      	str	r0, [sp, #0]
   16328:	7800      	ldrb	r0, [r0, #0]
   1632a:	b001      	add	sp, #4
   1632c:	4770      	bx	lr

0001632e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   1632e:	b580      	push	{r7, lr}
   16330:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16332:	f000 fa5a 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16336:	9003      	str	r0, [sp, #12]
   16338:	e7ff      	b.n	1633a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   1633a:	9803      	ldr	r0, [sp, #12]
   1633c:	f000 fa5b 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16340:	9002      	str	r0, [sp, #8]
   16342:	e7ff      	b.n	16344 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   16344:	f000 f8b3 	bl	164ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16348:	9001      	str	r0, [sp, #4]
   1634a:	e7ff      	b.n	1634c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   1634c:	9801      	ldr	r0, [sp, #4]
   1634e:	0041      	lsls	r1, r0, #1
   16350:	9100      	str	r1, [sp, #0]
   16352:	e7ff      	b.n	16354 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   16354:	9802      	ldr	r0, [sp, #8]
   16356:	9900      	ldr	r1, [sp, #0]
   16358:	4308      	orrs	r0, r1
    }
   1635a:	b004      	add	sp, #16
   1635c:	bd80      	pop	{r7, pc}

0001635e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   1635e:	b580      	push	{r7, lr}
   16360:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16362:	f000 fa42 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16366:	9003      	str	r0, [sp, #12]
   16368:	e7ff      	b.n	1636a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   1636a:	9803      	ldr	r0, [sp, #12]
   1636c:	f000 fa43 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16370:	9002      	str	r0, [sp, #8]
   16372:	e7ff      	b.n	16374 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   16374:	f000 f853 	bl	1641e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   16378:	9001      	str	r0, [sp, #4]
   1637a:	e7ff      	b.n	1637c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   1637c:	9801      	ldr	r0, [sp, #4]
   1637e:	0041      	lsls	r1, r0, #1
   16380:	9100      	str	r1, [sp, #0]
   16382:	e7ff      	b.n	16384 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   16384:	9802      	ldr	r0, [sp, #8]
   16386:	9900      	ldr	r1, [sp, #0]
   16388:	4308      	orrs	r0, r1
    }
   1638a:	b004      	add	sp, #16
   1638c:	bd80      	pop	{r7, pc}

0001638e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   1638e:	b580      	push	{r7, lr}
   16390:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16392:	f000 fa2a 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16396:	9003      	str	r0, [sp, #12]
   16398:	e7ff      	b.n	1639a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   1639a:	9803      	ldr	r0, [sp, #12]
   1639c:	f000 fa2b 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163a0:	9002      	str	r0, [sp, #8]
   163a2:	e7ff      	b.n	163a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   163a4:	f000 f80b 	bl	163be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   163a8:	9001      	str	r0, [sp, #4]
   163aa:	e7ff      	b.n	163ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   163ac:	9801      	ldr	r0, [sp, #4]
   163ae:	0041      	lsls	r1, r0, #1
   163b0:	9100      	str	r1, [sp, #0]
   163b2:	e7ff      	b.n	163b4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   163b4:	9802      	ldr	r0, [sp, #8]
   163b6:	9900      	ldr	r1, [sp, #0]
   163b8:	4308      	orrs	r0, r1
    }
   163ba:	b004      	add	sp, #16
   163bc:	bd80      	pop	{r7, pc}

000163be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   163be:	b580      	push	{r7, lr}
   163c0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163c2:	f000 fa12 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163c6:	9003      	str	r0, [sp, #12]
   163c8:	e7ff      	b.n	163ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   163ca:	9803      	ldr	r0, [sp, #12]
   163cc:	f000 fa13 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163d0:	9002      	str	r0, [sp, #8]
   163d2:	e7ff      	b.n	163d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   163d4:	f000 f89b 	bl	1650e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   163d8:	9001      	str	r0, [sp, #4]
   163da:	e7ff      	b.n	163dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   163dc:	9801      	ldr	r0, [sp, #4]
   163de:	0041      	lsls	r1, r0, #1
   163e0:	9100      	str	r1, [sp, #0]
   163e2:	e7ff      	b.n	163e4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   163e4:	9802      	ldr	r0, [sp, #8]
   163e6:	9900      	ldr	r1, [sp, #0]
   163e8:	4308      	orrs	r0, r1
    }
   163ea:	b004      	add	sp, #16
   163ec:	bd80      	pop	{r7, pc}

000163ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   163ee:	b580      	push	{r7, lr}
   163f0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163f2:	f000 f9fa 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163f6:	9003      	str	r0, [sp, #12]
   163f8:	e7ff      	b.n	163fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   163fa:	9803      	ldr	r0, [sp, #12]
   163fc:	f000 f9fb 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16400:	9002      	str	r0, [sp, #8]
   16402:	e7ff      	b.n	16404 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   16404:	f7ff ff93 	bl	1632e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   16408:	9001      	str	r0, [sp, #4]
   1640a:	e7ff      	b.n	1640c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   1640c:	9801      	ldr	r0, [sp, #4]
   1640e:	0041      	lsls	r1, r0, #1
   16410:	9100      	str	r1, [sp, #0]
   16412:	e7ff      	b.n	16414 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   16414:	9802      	ldr	r0, [sp, #8]
   16416:	9900      	ldr	r1, [sp, #0]
   16418:	4308      	orrs	r0, r1
    }
   1641a:	b004      	add	sp, #16
   1641c:	bd80      	pop	{r7, pc}

0001641e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   1641e:	b580      	push	{r7, lr}
   16420:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16422:	f000 f9e2 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16426:	9003      	str	r0, [sp, #12]
   16428:	e7ff      	b.n	1642a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   1642a:	9803      	ldr	r0, [sp, #12]
   1642c:	f000 f9e3 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16430:	9002      	str	r0, [sp, #8]
   16432:	e7ff      	b.n	16434 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   16434:	f000 f823 	bl	1647e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   16438:	9001      	str	r0, [sp, #4]
   1643a:	e7ff      	b.n	1643c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   1643c:	9801      	ldr	r0, [sp, #4]
   1643e:	0041      	lsls	r1, r0, #1
   16440:	9100      	str	r1, [sp, #0]
   16442:	e7ff      	b.n	16444 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   16444:	9802      	ldr	r0, [sp, #8]
   16446:	9900      	ldr	r1, [sp, #0]
   16448:	4308      	orrs	r0, r1
    }
   1644a:	b004      	add	sp, #16
   1644c:	bd80      	pop	{r7, pc}

0001644e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   1644e:	b580      	push	{r7, lr}
   16450:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16452:	f000 f9ca 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16456:	9003      	str	r0, [sp, #12]
   16458:	e7ff      	b.n	1645a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   1645a:	9803      	ldr	r0, [sp, #12]
   1645c:	f000 f9cb 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16460:	9002      	str	r0, [sp, #8]
   16462:	e7ff      	b.n	16464 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   16464:	f000 f86b 	bl	1653e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   16468:	9001      	str	r0, [sp, #4]
   1646a:	e7ff      	b.n	1646c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   1646c:	9801      	ldr	r0, [sp, #4]
   1646e:	0041      	lsls	r1, r0, #1
   16470:	9100      	str	r1, [sp, #0]
   16472:	e7ff      	b.n	16474 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   16474:	9802      	ldr	r0, [sp, #8]
   16476:	9900      	ldr	r1, [sp, #0]
   16478:	4308      	orrs	r0, r1
    }
   1647a:	b004      	add	sp, #16
   1647c:	bd80      	pop	{r7, pc}

0001647e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   1647e:	b580      	push	{r7, lr}
   16480:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16482:	f000 f9b2 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16486:	9003      	str	r0, [sp, #12]
   16488:	e7ff      	b.n	1648a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   1648a:	9803      	ldr	r0, [sp, #12]
   1648c:	f000 f9b3 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16490:	9002      	str	r0, [sp, #8]
   16492:	e7ff      	b.n	16494 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   16494:	f000 f823 	bl	164de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   16498:	9001      	str	r0, [sp, #4]
   1649a:	e7ff      	b.n	1649c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   1649c:	9801      	ldr	r0, [sp, #4]
   1649e:	0041      	lsls	r1, r0, #1
   164a0:	9100      	str	r1, [sp, #0]
   164a2:	e7ff      	b.n	164a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   164a4:	9802      	ldr	r0, [sp, #8]
   164a6:	9900      	ldr	r1, [sp, #0]
   164a8:	4308      	orrs	r0, r1
    }
   164aa:	b004      	add	sp, #16
   164ac:	bd80      	pop	{r7, pc}

000164ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   164ae:	b580      	push	{r7, lr}
   164b0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164b2:	f000 f99c 	bl	167ee <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   164b6:	9003      	str	r0, [sp, #12]
   164b8:	e7ff      	b.n	164ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   164ba:	9803      	ldr	r0, [sp, #12]
   164bc:	f000 f99b 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164c0:	9002      	str	r0, [sp, #8]
   164c2:	e7ff      	b.n	164c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   164c4:	f000 f995 	bl	167f2 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   164c8:	9001      	str	r0, [sp, #4]
   164ca:	e7ff      	b.n	164cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   164cc:	9801      	ldr	r0, [sp, #4]
   164ce:	0041      	lsls	r1, r0, #1
   164d0:	9100      	str	r1, [sp, #0]
   164d2:	e7ff      	b.n	164d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   164d4:	9802      	ldr	r0, [sp, #8]
   164d6:	9900      	ldr	r1, [sp, #0]
   164d8:	4308      	orrs	r0, r1
    }
   164da:	b004      	add	sp, #16
   164dc:	bd80      	pop	{r7, pc}

000164de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   164de:	b580      	push	{r7, lr}
   164e0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164e2:	f000 f982 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164e6:	9003      	str	r0, [sp, #12]
   164e8:	e7ff      	b.n	164ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   164ea:	9803      	ldr	r0, [sp, #12]
   164ec:	f000 f983 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164f0:	9002      	str	r0, [sp, #8]
   164f2:	e7ff      	b.n	164f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   164f4:	f7ff ff7b 	bl	163ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   164f8:	9001      	str	r0, [sp, #4]
   164fa:	e7ff      	b.n	164fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   164fc:	9801      	ldr	r0, [sp, #4]
   164fe:	0041      	lsls	r1, r0, #1
   16500:	9100      	str	r1, [sp, #0]
   16502:	e7ff      	b.n	16504 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   16504:	9802      	ldr	r0, [sp, #8]
   16506:	9900      	ldr	r1, [sp, #0]
   16508:	4308      	orrs	r0, r1
    }
   1650a:	b004      	add	sp, #16
   1650c:	bd80      	pop	{r7, pc}

0001650e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   1650e:	b580      	push	{r7, lr}
   16510:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16512:	f000 f96a 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16516:	9003      	str	r0, [sp, #12]
   16518:	e7ff      	b.n	1651a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   1651a:	9803      	ldr	r0, [sp, #12]
   1651c:	f000 f96b 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16520:	9002      	str	r0, [sp, #8]
   16522:	e7ff      	b.n	16524 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   16524:	f7ff ff1b 	bl	1635e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   16528:	9001      	str	r0, [sp, #4]
   1652a:	e7ff      	b.n	1652c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   1652c:	9801      	ldr	r0, [sp, #4]
   1652e:	0041      	lsls	r1, r0, #1
   16530:	9100      	str	r1, [sp, #0]
   16532:	e7ff      	b.n	16534 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   16534:	9802      	ldr	r0, [sp, #8]
   16536:	9900      	ldr	r1, [sp, #0]
   16538:	4308      	orrs	r0, r1
    }
   1653a:	b004      	add	sp, #16
   1653c:	bd80      	pop	{r7, pc}

0001653e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   1653e:	b580      	push	{r7, lr}
   16540:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16542:	f000 f952 	bl	167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16546:	9003      	str	r0, [sp, #12]
   16548:	e7ff      	b.n	1654a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   1654a:	9803      	ldr	r0, [sp, #12]
   1654c:	f000 f953 	bl	167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16550:	9002      	str	r0, [sp, #8]
   16552:	e7ff      	b.n	16554 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   16554:	f7ff ff1b 	bl	1638e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   16558:	9001      	str	r0, [sp, #4]
   1655a:	e7ff      	b.n	1655c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   1655c:	9801      	ldr	r0, [sp, #4]
   1655e:	0041      	lsls	r1, r0, #1
   16560:	9100      	str	r1, [sp, #0]
   16562:	e7ff      	b.n	16564 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   16564:	9802      	ldr	r0, [sp, #8]
   16566:	9900      	ldr	r1, [sp, #0]
   16568:	4308      	orrs	r0, r1
    }
   1656a:	b004      	add	sp, #16
   1656c:	bd80      	pop	{r7, pc}

0001656e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   1656e:	2000      	movs	r0, #0
        0
    }
   16570:	4770      	bx	lr

00016572 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   16572:	2001      	movs	r0, #1
        1
    }
   16574:	4770      	bx	lr

00016576 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   16576:	b580      	push	{r7, lr}
   16578:	b084      	sub	sp, #16
   1657a:	9002      	str	r0, [sp, #8]
   1657c:	9103      	str	r1, [sp, #12]
   1657e:	f000 f80f 	bl	165a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   16582:	9001      	str	r0, [sp, #4]
   16584:	e7ff      	b.n	16586 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   16586:	9801      	ldr	r0, [sp, #4]
   16588:	b004      	add	sp, #16
   1658a:	bd80      	pop	{r7, pc}

0001658c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   1658c:	b580      	push	{r7, lr}
   1658e:	b082      	sub	sp, #8
   16590:	9001      	str	r0, [sp, #4]
   16592:	f000 f873 	bl	1667c <_ZN4core3ptr4read17h27a035d1812d8297E>
   16596:	9000      	str	r0, [sp, #0]
   16598:	e7ff      	b.n	1659a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   1659a:	9800      	ldr	r0, [sp, #0]
   1659c:	b002      	add	sp, #8
   1659e:	bd80      	pop	{r7, pc}

000165a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   165a0:	b084      	sub	sp, #16
   165a2:	9001      	str	r0, [sp, #4]
   165a4:	9102      	str	r1, [sp, #8]
   165a6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   165aa:	9003      	str	r0, [sp, #12]
   165ac:	9803      	ldr	r0, [sp, #12]
   165ae:	9000      	str	r0, [sp, #0]
   165b0:	e7ff      	b.n	165b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   165b2:	9800      	ldr	r0, [sp, #0]
   165b4:	b004      	add	sp, #16
   165b6:	4770      	bx	lr

000165b8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   165b8:	b082      	sub	sp, #8
   165ba:	9001      	str	r0, [sp, #4]
   165bc:	9000      	str	r0, [sp, #0]
   165be:	e7ff      	b.n	165c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   165c0:	9800      	ldr	r0, [sp, #0]
   165c2:	fab0 f180 	clz	r1, r0
   165c6:	0948      	lsrs	r0, r1, #5
   165c8:	b002      	add	sp, #8
   165ca:	4770      	bx	lr

000165cc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   165cc:	b580      	push	{r7, lr}
   165ce:	b088      	sub	sp, #32
   165d0:	9006      	str	r0, [sp, #24]
   165d2:	9107      	str	r1, [sp, #28]
   165d4:	9004      	str	r0, [sp, #16]
   165d6:	4608      	mov	r0, r1
   165d8:	9103      	str	r1, [sp, #12]
   165da:	f001 f8c8 	bl	1776e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   165de:	9002      	str	r0, [sp, #8]
   165e0:	e7ff      	b.n	165e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   165e2:	9802      	ldr	r0, [sp, #8]
   165e4:	07c1      	lsls	r1, r0, #31
   165e6:	2900      	cmp	r1, #0
   165e8:	d105      	bne.n	165f6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   165ea:	e7ff      	b.n	165ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   165ec:	9803      	ldr	r0, [sp, #12]
   165ee:	f001 f8c2 	bl	17776 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   165f2:	9001      	str	r0, [sp, #4]
   165f4:	e007      	b.n	16606 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   165f6:	9804      	ldr	r0, [sp, #16]
   165f8:	9903      	ldr	r1, [sp, #12]
   165fa:	f001 fe24 	bl	18246 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   165fe:	f88d 0017 	strb.w	r0, [sp, #23]
   16602:	e7ff      	b.n	16604 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   16604:	e015      	b.n	16632 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   16606:	9801      	ldr	r0, [sp, #4]
   16608:	07c1      	lsls	r1, r0, #31
   1660a:	2900      	cmp	r1, #0
   1660c:	d107      	bne.n	1661e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   1660e:	e7ff      	b.n	16610 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   16610:	9804      	ldr	r0, [sp, #16]
   16612:	9903      	ldr	r1, [sp, #12]
   16614:	f001 ffe8 	bl	185e8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   16618:	f88d 0017 	strb.w	r0, [sp, #23]
   1661c:	e007      	b.n	1662e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   1661e:	9804      	ldr	r0, [sp, #16]
   16620:	9903      	ldr	r1, [sp, #12]
   16622:	f001 fe6f 	bl	18304 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   16626:	f88d 0017 	strb.w	r0, [sp, #23]
   1662a:	e7ff      	b.n	1662c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   1662c:	e000      	b.n	16630 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   1662e:	e7ff      	b.n	16630 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   16630:	e7ff      	b.n	16632 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   16632:	f89d 0017 	ldrb.w	r0, [sp, #23]
   16636:	b008      	add	sp, #32
   16638:	bd80      	pop	{r7, pc}

0001663a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   1663a:	b081      	sub	sp, #4
   1663c:	4601      	mov	r1, r0
   1663e:	f88d 0003 	strb.w	r0, [sp, #3]
   16642:	b2c0      	uxtb	r0, r0
   16644:	b001      	add	sp, #4
   16646:	4770      	bx	lr

00016648 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   16648:	b086      	sub	sp, #24
   1664a:	9004      	str	r0, [sp, #16]
   1664c:	9105      	str	r1, [sp, #20]
   1664e:	9002      	str	r0, [sp, #8]
   16650:	9103      	str	r1, [sp, #12]
   16652:	9802      	ldr	r0, [sp, #8]
   16654:	9903      	ldr	r1, [sp, #12]
   16656:	9000      	str	r0, [sp, #0]
   16658:	9101      	str	r1, [sp, #4]
   1665a:	9800      	ldr	r0, [sp, #0]
   1665c:	9901      	ldr	r1, [sp, #4]
   1665e:	b006      	add	sp, #24
   16660:	4770      	bx	lr

00016662 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   16662:	b086      	sub	sp, #24
   16664:	9004      	str	r0, [sp, #16]
   16666:	9105      	str	r1, [sp, #20]
   16668:	9002      	str	r0, [sp, #8]
   1666a:	9103      	str	r1, [sp, #12]
   1666c:	9802      	ldr	r0, [sp, #8]
   1666e:	9903      	ldr	r1, [sp, #12]
   16670:	9000      	str	r0, [sp, #0]
   16672:	9101      	str	r1, [sp, #4]
   16674:	9800      	ldr	r0, [sp, #0]
   16676:	9901      	ldr	r1, [sp, #4]
   16678:	b006      	add	sp, #24
   1667a:	4770      	bx	lr

0001667c <_ZN4core3ptr4read17h27a035d1812d8297E>:
   1667c:	b580      	push	{r7, lr}
   1667e:	b088      	sub	sp, #32
   16680:	9003      	str	r0, [sp, #12]
   16682:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   16686:	f8ad 100a 	strh.w	r1, [sp, #10]
   1668a:	9001      	str	r0, [sp, #4]
   1668c:	e7ff      	b.n	1668e <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   1668e:	f10d 000a 	add.w	r0, sp, #10
   16692:	9006      	str	r0, [sp, #24]
   16694:	9007      	str	r0, [sp, #28]
   16696:	e7ff      	b.n	16698 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   16698:	f10d 010a 	add.w	r1, sp, #10
   1669c:	2201      	movs	r2, #1
   1669e:	9801      	ldr	r0, [sp, #4]
   166a0:	f000 f8b0 	bl	16804 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   166a4:	e7ff      	b.n	166a6 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   166a6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   166aa:	4601      	mov	r1, r0
   166ac:	f8ad 0014 	strh.w	r0, [sp, #20]
   166b0:	f8ad 0016 	strh.w	r0, [sp, #22]
   166b4:	9100      	str	r1, [sp, #0]
   166b6:	e7ff      	b.n	166b8 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   166b8:	9800      	ldr	r0, [sp, #0]
   166ba:	b008      	add	sp, #32
   166bc:	bd80      	pop	{r7, pc}

000166be <_ZN4core3ptr5write17h147d4643d861e927E>:
   166be:	b082      	sub	sp, #8
   166c0:	460a      	mov	r2, r1
   166c2:	9000      	str	r0, [sp, #0]
   166c4:	f8ad 1006 	strh.w	r1, [sp, #6]
   166c8:	8001      	strh	r1, [r0, #0]
   166ca:	b002      	add	sp, #8
   166cc:	4770      	bx	lr

000166ce <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>:
   166ce:	b5d0      	push	{r4, r6, r7, lr}
   166d0:	af02      	add	r7, sp, #8
   166d2:	b0b4      	sub	sp, #208	; 0xd0
   166d4:	466c      	mov	r4, sp
   166d6:	f36f 0404 	bfc	r4, #0, #5
   166da:	46a5      	mov	sp, r4
   166dc:	9024      	str	r0, [sp, #144]	; 0x90
   166de:	9125      	str	r1, [sp, #148]	; 0x94
   166e0:	9226      	str	r2, [sp, #152]	; 0x98
   166e2:	2320      	movs	r3, #32
   166e4:	932f      	str	r3, [sp, #188]	; 0xbc
   166e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   166e8:	9327      	str	r3, [sp, #156]	; 0x9c
   166ea:	920e      	str	r2, [sp, #56]	; 0x38
   166ec:	910d      	str	r1, [sp, #52]	; 0x34
   166ee:	900c      	str	r0, [sp, #48]	; 0x30
   166f0:	930b      	str	r3, [sp, #44]	; 0x2c
   166f2:	e7ff      	b.n	166f4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x26>
   166f4:	2000      	movs	r0, #0
   166f6:	900f      	str	r0, [sp, #60]	; 0x3c
   166f8:	e7ff      	b.n	166fa <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   166fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   166fe:	4408      	add	r0, r1
   16700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16702:	4290      	cmp	r0, r2
   16704:	d905      	bls.n	16712 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x44>
   16706:	e7ff      	b.n	16708 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x3a>
   16708:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1670a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1670c:	4288      	cmp	r0, r1
   1670e:	d334      	bcc.n	1677a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xac>
   16710:	e067      	b.n	167e2 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   16712:	e7ff      	b.n	16714 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x46>
   16714:	a810      	add	r0, sp, #64	; 0x40
   16716:	9032      	str	r0, [sp, #200]	; 0xc8
   16718:	9033      	str	r0, [sp, #204]	; 0xcc
   1671a:	e7ff      	b.n	1671c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x4e>
   1671c:	a810      	add	r0, sp, #64	; 0x40
   1671e:	4601      	mov	r1, r0
   16720:	9028      	str	r0, [sp, #160]	; 0xa0
   16722:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16726:	900a      	str	r0, [sp, #40]	; 0x28
   16728:	4610      	mov	r0, r2
   1672a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1672c:	9109      	str	r1, [sp, #36]	; 0x24
   1672e:	4619      	mov	r1, r3
   16730:	f7f8 f846 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16734:	4601      	mov	r1, r0
   16736:	9029      	str	r0, [sp, #164]	; 0xa4
   16738:	9108      	str	r1, [sp, #32]
   1673a:	e7ff      	b.n	1673c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x6e>
   1673c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1673e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16740:	f7f8 f83e 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16744:	4601      	mov	r1, r0
   16746:	902a      	str	r0, [sp, #168]	; 0xa8
   16748:	9107      	str	r1, [sp, #28]
   1674a:	e7ff      	b.n	1674c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x7e>
   1674c:	9808      	ldr	r0, [sp, #32]
   1674e:	9909      	ldr	r1, [sp, #36]	; 0x24
   16750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16752:	f7f7 fed1 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16756:	e7ff      	b.n	16758 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x8a>
   16758:	9807      	ldr	r0, [sp, #28]
   1675a:	9908      	ldr	r1, [sp, #32]
   1675c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1675e:	f7f7 fecb 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16762:	e7ff      	b.n	16764 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x96>
   16764:	9809      	ldr	r0, [sp, #36]	; 0x24
   16766:	9907      	ldr	r1, [sp, #28]
   16768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1676a:	f7f7 fec5 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1676e:	e7ff      	b.n	16770 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xa2>
   16770:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16772:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16774:	4408      	add	r0, r1
   16776:	900f      	str	r0, [sp, #60]	; 0x3c
   16778:	e7bf      	b.n	166fa <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   1677a:	e7ff      	b.n	1677c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xae>
   1677c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1677e:	990e      	ldr	r1, [sp, #56]	; 0x38
   16780:	1a08      	subs	r0, r1, r0
   16782:	4602      	mov	r2, r0
   16784:	902b      	str	r0, [sp, #172]	; 0xac
   16786:	a81c      	add	r0, sp, #112	; 0x70
   16788:	9030      	str	r0, [sp, #192]	; 0xc0
   1678a:	9031      	str	r0, [sp, #196]	; 0xc4
   1678c:	9206      	str	r2, [sp, #24]
   1678e:	9005      	str	r0, [sp, #20]
   16790:	e7ff      	b.n	16792 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xc4>
   16792:	9805      	ldr	r0, [sp, #20]
   16794:	9905      	ldr	r1, [sp, #20]
   16796:	912c      	str	r1, [sp, #176]	; 0xb0
   16798:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1679a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1679c:	9004      	str	r0, [sp, #16]
   1679e:	4610      	mov	r0, r2
   167a0:	f7f8 f80e 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   167a4:	4601      	mov	r1, r0
   167a6:	902d      	str	r0, [sp, #180]	; 0xb4
   167a8:	9103      	str	r1, [sp, #12]
   167aa:	e7ff      	b.n	167ac <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xde>
   167ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   167ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   167b0:	f7f8 f806 	bl	e7c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   167b4:	4601      	mov	r1, r0
   167b6:	902e      	str	r0, [sp, #184]	; 0xb8
   167b8:	9102      	str	r1, [sp, #8]
   167ba:	e7ff      	b.n	167bc <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xee>
   167bc:	9803      	ldr	r0, [sp, #12]
   167be:	9904      	ldr	r1, [sp, #16]
   167c0:	9a06      	ldr	r2, [sp, #24]
   167c2:	f7f7 fe99 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   167c6:	e7ff      	b.n	167c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xfa>
   167c8:	9802      	ldr	r0, [sp, #8]
   167ca:	9903      	ldr	r1, [sp, #12]
   167cc:	9a06      	ldr	r2, [sp, #24]
   167ce:	f7f7 fe93 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   167d2:	e7ff      	b.n	167d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x106>
   167d4:	9804      	ldr	r0, [sp, #16]
   167d6:	9902      	ldr	r1, [sp, #8]
   167d8:	9a06      	ldr	r2, [sp, #24]
   167da:	f7f7 fe8d 	bl	e4f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   167de:	e7ff      	b.n	167e0 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x112>
   167e0:	e7ff      	b.n	167e2 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   167e2:	f1a7 0408 	sub.w	r4, r7, #8
   167e6:	46a5      	mov	sp, r4
   167e8:	bdd0      	pop	{r4, r6, r7, pc}

000167ea <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   167ea:	2000      	movs	r0, #0
    }
   167ec:	4770      	bx	lr

000167ee <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   167ee:	2001      	movs	r0, #1
    }
   167f0:	4770      	bx	lr

000167f2 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   167f2:	2000      	movs	r0, #0
    }
   167f4:	4770      	bx	lr

000167f6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   167f6:	b081      	sub	sp, #4
   167f8:	4601      	mov	r1, r0
   167fa:	f88d 0003 	strb.w	r0, [sp, #3]
   167fe:	b2c0      	uxtb	r0, r0
   16800:	b001      	add	sp, #4
   16802:	4770      	bx	lr

00016804 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   16804:	b580      	push	{r7, lr}
   16806:	b084      	sub	sp, #16
   16808:	9001      	str	r0, [sp, #4]
   1680a:	9102      	str	r1, [sp, #8]
   1680c:	9203      	str	r2, [sp, #12]
   1680e:	0052      	lsls	r2, r2, #1
   16810:	9000      	str	r0, [sp, #0]
   16812:	4608      	mov	r0, r1
   16814:	9900      	ldr	r1, [sp, #0]
   16816:	f006 fcdd 	bl	1d1d4 <__aeabi_memcpy>
   1681a:	e7ff      	b.n	1681c <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   1681c:	b004      	add	sp, #16
   1681e:	bd80      	pop	{r7, pc}

00016820 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   16820:	4770      	bx	lr

00016822 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   16822:	b5b0      	push	{r4, r5, r7, lr}
   16824:	b086      	sub	sp, #24
   16826:	460c      	mov	r4, r1
   16828:	4605      	mov	r5, r0
   1682a:	f001 fb88 	bl	17f3e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   1682e:	b9a8      	cbnz	r0, 1685c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   16830:	f64f 5304 	movw	r3, #64772	; 0xfd04
   16834:	2200      	movs	r2, #0
   16836:	f2c0 0301 	movt	r3, #1
   1683a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1683e:	9205      	str	r2, [sp, #20]
   16840:	9304      	str	r3, [sp, #16]
   16842:	e9cd 2202 	strd	r2, r2, [sp, #8]
   16846:	2201      	movs	r2, #1
   16848:	9201      	str	r2, [sp, #4]
   1684a:	f64f 52c8 	movw	r2, #64968	; 0xfdc8
   1684e:	f2c0 0201 	movt	r2, #1
   16852:	9200      	str	r2, [sp, #0]
   16854:	466a      	mov	r2, sp
   16856:	f000 fbe1 	bl	1701c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1685a:	b110      	cbz	r0, 16862 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   1685c:	2001      	movs	r0, #1
   1685e:	b006      	add	sp, #24
   16860:	bdb0      	pop	{r4, r5, r7, pc}
   16862:	1d28      	adds	r0, r5, #4
   16864:	4621      	mov	r1, r4
   16866:	b006      	add	sp, #24
   16868:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   1686c:	f001 bb67 	b.w	17f3e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00016870 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   16870:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   16874:	f243 6134 	movw	r1, #13876	; 0x3634
   16878:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   1687c:	f6cd 0131 	movt	r1, #55345	; 0xd831
   16880:	4770      	bx	lr
	...

00016884 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   16884:	b570      	push	{r4, r5, r6, lr}
   16886:	460e      	mov	r6, r1
   16888:	3909      	subs	r1, #9
   1688a:	4604      	mov	r4, r0
   1688c:	291e      	cmp	r1, #30
   1688e:	d818      	bhi.n	168c2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   16890:	2002      	movs	r0, #2
   16892:	2574      	movs	r5, #116	; 0x74
   16894:	e8df f001 	tbb	[pc, r1]
   16898:	1c1c1019 	.word	0x1c1c1019
   1689c:	1c1c1c29 	.word	0x1c1c1c29
   168a0:	1c1c1c1c 	.word	0x1c1c1c1c
   168a4:	1c1c1c1c 	.word	0x1c1c1c1c
   168a8:	1c1c1c1c 	.word	0x1c1c1c1c
   168ac:	1c1c1c1c 	.word	0x1c1c1c1c
   168b0:	1c1c171c 	.word	0x1c1c171c
   168b4:	00171c1c 	.word	0x00171c1c
   168b8:	2002      	movs	r0, #2
   168ba:	256e      	movs	r5, #110	; 0x6e
   168bc:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   168c0:	bd70      	pop	{r4, r5, r6, pc}
   168c2:	2e5c      	cmp	r6, #92	; 0x5c
   168c4:	d104      	bne.n	168d0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   168c6:	2002      	movs	r0, #2
   168c8:	4635      	mov	r5, r6
   168ca:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   168ce:	bd70      	pop	{r4, r5, r6, pc}
   168d0:	2a00      	cmp	r2, #0
   168d2:	d040      	beq.n	16956 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   168d4:	f3c6 1083 	ubfx	r0, r6, #6, #4
   168d8:	0ab1      	lsrs	r1, r6, #10
   168da:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   168de:	d309      	bcc.n	168f4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   168e0:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   168e4:	d137      	bne.n	16956 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   168e6:	211e      	movs	r1, #30
   168e8:	e00b      	b.n	16902 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   168ea:	2002      	movs	r0, #2
   168ec:	2572      	movs	r5, #114	; 0x72
   168ee:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   168f2:	bd70      	pop	{r4, r5, r6, pc}
   168f4:	f640 023c 	movw	r2, #2108	; 0x83c
   168f8:	f2c0 0202 	movt	r2, #2
   168fc:	5c51      	ldrb	r1, [r2, r1]
   168fe:	291e      	cmp	r1, #30
   16900:	d842      	bhi.n	16988 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   16902:	f640 02b7 	movw	r2, #2231	; 0x8b7
   16906:	f2c0 0202 	movt	r2, #2
   1690a:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   1690e:	5c09      	ldrb	r1, [r1, r0]
   16910:	298b      	cmp	r1, #139	; 0x8b
   16912:	d231      	bcs.n	16978 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   16914:	f640 20a8 	movw	r0, #2728	; 0xaa8
   16918:	2301      	movs	r3, #1
   1691a:	f2c0 0002 	movt	r0, #2
   1691e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   16922:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   16926:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   1692a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1692e:	fa03 f501 	lsl.w	r5, r3, r1
   16932:	f1b1 0220 	subs.w	r2, r1, #32
   16936:	f1c1 0120 	rsb	r1, r1, #32
   1693a:	bf58      	it	pl
   1693c:	2500      	movpl	r5, #0
   1693e:	2a00      	cmp	r2, #0
   16940:	ea00 0005 	and.w	r0, r0, r5
   16944:	fa23 f101 	lsr.w	r1, r3, r1
   16948:	bf58      	it	pl
   1694a:	fa03 f102 	lslpl.w	r1, r3, r2
   1694e:	ea01 010c 	and.w	r1, r1, ip
   16952:	4308      	orrs	r0, r1
   16954:	d105      	bne.n	16962 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   16956:	4630      	mov	r0, r6
   16958:	f001 f9a5 	bl	17ca6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   1695c:	b108      	cbz	r0, 16962 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1695e:	2001      	movs	r0, #1
   16960:	e7b2      	b.n	168c8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   16962:	f046 0001 	orr.w	r0, r6, #1
   16966:	2107      	movs	r1, #7
   16968:	fab0 f080 	clz	r0, r0
   1696c:	f04f 0e05 	mov.w	lr, #5
   16970:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   16974:	2003      	movs	r0, #3
   16976:	e7a7      	b.n	168c8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   16978:	f640 002c 	movw	r0, #2092	; 0x82c
   1697c:	228b      	movs	r2, #139	; 0x8b
   1697e:	f2c0 0002 	movt	r0, #2
   16982:	f000 f869 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   16986:	defe      	udf	#254	; 0xfe
   16988:	f640 001c 	movw	r0, #2076	; 0x81c
   1698c:	221f      	movs	r2, #31
   1698e:	f2c0 0002 	movt	r0, #2
   16992:	f000 f861 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   16996:	defe      	udf	#254	; 0xfe

00016998 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   16998:	b08a      	sub	sp, #40	; 0x28
   1699a:	e9cd 0100 	strd	r0, r1, [sp]
   1699e:	2001      	movs	r0, #1
   169a0:	a908      	add	r1, sp, #32
   169a2:	9007      	str	r0, [sp, #28]
   169a4:	9106      	str	r1, [sp, #24]
   169a6:	2100      	movs	r1, #0
   169a8:	9105      	str	r1, [sp, #20]
   169aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
   169ae:	f64f 60cc 	movw	r0, #65228	; 0xfecc
   169b2:	f2c0 0001 	movt	r0, #1
   169b6:	4611      	mov	r1, r2
   169b8:	9002      	str	r0, [sp, #8]
   169ba:	f648 009b 	movw	r0, #34971	; 0x889b
   169be:	f2c0 0001 	movt	r0, #1
   169c2:	9009      	str	r0, [sp, #36]	; 0x24
   169c4:	4668      	mov	r0, sp
   169c6:	9008      	str	r0, [sp, #32]
   169c8:	a802      	add	r0, sp, #8
   169ca:	f000 f865 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   169ce:	defe      	udf	#254	; 0xfe

000169d0 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   169d0:	b08e      	sub	sp, #56	; 0x38
   169d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   169d6:	2002      	movs	r0, #2
   169d8:	a90a      	add	r1, sp, #40	; 0x28
   169da:	9009      	str	r0, [sp, #36]	; 0x24
   169dc:	9108      	str	r1, [sp, #32]
   169de:	2100      	movs	r1, #0
   169e0:	9107      	str	r1, [sp, #28]
   169e2:	e9cd 0105 	strd	r0, r1, [sp, #20]
   169e6:	f64f 60d8 	movw	r0, #65240	; 0xfed8
   169ea:	f2c0 0001 	movt	r0, #1
   169ee:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   169f2:	9004      	str	r0, [sp, #16]
   169f4:	f648 0091 	movw	r0, #34961	; 0x8891
   169f8:	f2c0 0001 	movt	r0, #1
   169fc:	900d      	str	r0, [sp, #52]	; 0x34
   169fe:	a802      	add	r0, sp, #8
   16a00:	900c      	str	r0, [sp, #48]	; 0x30
   16a02:	f648 009b 	movw	r0, #34971	; 0x889b
   16a06:	f2c0 0001 	movt	r0, #1
   16a0a:	4661      	mov	r1, ip
   16a0c:	900b      	str	r0, [sp, #44]	; 0x2c
   16a0e:	4668      	mov	r0, sp
   16a10:	900a      	str	r0, [sp, #40]	; 0x28
   16a12:	a804      	add	r0, sp, #16
   16a14:	f000 f840 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a18:	defe      	udf	#254	; 0xfe

00016a1a <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   16a1a:	68c0      	ldr	r0, [r0, #12]
   16a1c:	4770      	bx	lr

00016a1e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   16a1e:	4770      	bx	lr

00016a20 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   16a20:	e9d0 2100 	ldrd	r2, r1, [r0]
   16a24:	4610      	mov	r0, r2
   16a26:	4770      	bx	lr

00016a28 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   16a28:	6880      	ldr	r0, [r0, #8]
   16a2a:	4770      	bx	lr

00016a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   16a2c:	b088      	sub	sp, #32
   16a2e:	4694      	mov	ip, r2
   16a30:	f64f 5204 	movw	r2, #64772	; 0xfd04
   16a34:	2300      	movs	r3, #0
   16a36:	f2c0 0201 	movt	r2, #1
   16a3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   16a3e:	4668      	mov	r0, sp
   16a40:	9305      	str	r3, [sp, #20]
   16a42:	4661      	mov	r1, ip
   16a44:	9204      	str	r2, [sp, #16]
   16a46:	2201      	movs	r2, #1
   16a48:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16a4c:	9201      	str	r2, [sp, #4]
   16a4e:	aa06      	add	r2, sp, #24
   16a50:	9200      	str	r2, [sp, #0]
   16a52:	f000 f821 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a56:	defe      	udf	#254	; 0xfe

00016a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   16a58:	b08c      	sub	sp, #48	; 0x30
   16a5a:	4603      	mov	r3, r0
   16a5c:	e9cd 1200 	strd	r1, r2, [sp]
   16a60:	2002      	movs	r0, #2
   16a62:	a908      	add	r1, sp, #32
   16a64:	9007      	str	r0, [sp, #28]
   16a66:	9106      	str	r1, [sp, #24]
   16a68:	2100      	movs	r1, #0
   16a6a:	9105      	str	r1, [sp, #20]
   16a6c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16a70:	f64f 700c 	movw	r0, #65292	; 0xff0c
   16a74:	f2c0 0001 	movt	r0, #1
   16a78:	4669      	mov	r1, sp
   16a7a:	9002      	str	r0, [sp, #8]
   16a7c:	f248 70ad 	movw	r0, #34733	; 0x87ad
   16a80:	f2c0 0001 	movt	r0, #1
   16a84:	900b      	str	r0, [sp, #44]	; 0x2c
   16a86:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16a8a:	a801      	add	r0, sp, #4
   16a8c:	9008      	str	r0, [sp, #32]
   16a8e:	a802      	add	r0, sp, #8
   16a90:	4619      	mov	r1, r3
   16a92:	f000 f801 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a96:	defe      	udf	#254	; 0xfe

00016a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   16a98:	b084      	sub	sp, #16
   16a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16a9e:	f64f 60e8 	movw	r0, #65256	; 0xfee8
   16aa2:	f2c0 0001 	movt	r0, #1
   16aa6:	9001      	str	r0, [sp, #4]
   16aa8:	f64f 5004 	movw	r0, #64772	; 0xfd04
   16aac:	f2c0 0001 	movt	r0, #1
   16ab0:	9000      	str	r0, [sp, #0]
   16ab2:	4668      	mov	r0, sp
   16ab4:	f7f1 fe0c 	bl	86d0 <rust_begin_unwind>
   16ab8:	defe      	udf	#254	; 0xfe

00016aba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   16aba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16abe:	b081      	sub	sp, #4
   16ac0:	2a00      	cmp	r2, #0
   16ac2:	f000 80fe 	beq.w	16cc2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16ac6:	4690      	mov	r8, r2
   16ac8:	468a      	mov	sl, r1
   16aca:	4681      	mov	r9, r0
   16acc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16ad0:	7800      	ldrb	r0, [r0, #0]
   16ad2:	b948      	cbnz	r0, 16ae8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   16ad4:	e014      	b.n	16b00 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16ad6:	44da      	add	sl, fp
   16ad8:	2c00      	cmp	r4, #0
   16ada:	46a0      	mov	r8, r4
   16adc:	f000 80f1 	beq.w	16cc2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16ae0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16ae4:	7800      	ldrb	r0, [r0, #0]
   16ae6:	b158      	cbz	r0, 16b00 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16ae8:	e9d9 0100 	ldrd	r0, r1, [r9]
   16aec:	2204      	movs	r2, #4
   16aee:	68cb      	ldr	r3, [r1, #12]
   16af0:	f64f 6124 	movw	r1, #65060	; 0xfe24
   16af4:	f2c0 0101 	movt	r1, #1
   16af8:	4798      	blx	r3
   16afa:	2800      	cmp	r0, #0
   16afc:	f040 80e5 	bne.w	16cca <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16b00:	f04f 0b00 	mov.w	fp, #0
   16b04:	4641      	mov	r1, r8
   16b06:	e008      	b.n	16b1a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   16b08:	ebb8 010b 	subs.w	r1, r8, fp
   16b0c:	f04f 0000 	mov.w	r0, #0
   16b10:	bf38      	it	cc
   16b12:	4601      	movcc	r1, r0
   16b14:	45c3      	cmp	fp, r8
   16b16:	f200 80a5 	bhi.w	16c64 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   16b1a:	eb0a 0e0b 	add.w	lr, sl, fp
   16b1e:	2000      	movs	r0, #0
   16b20:	f01e 0203 	ands.w	r2, lr, #3
   16b24:	bf18      	it	ne
   16b26:	f1d2 0c04 	rsbsne	ip, r2, #4
   16b2a:	d120      	bne.n	16b6e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   16b2c:	2908      	cmp	r1, #8
   16b2e:	d357      	bcc.n	16be0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16b30:	f1a1 0208 	sub.w	r2, r1, #8
   16b34:	4290      	cmp	r0, r2
   16b36:	d853      	bhi.n	16be0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16b38:	f85e 3000 	ldr.w	r3, [lr, r0]
   16b3c:	eb0e 0700 	add.w	r7, lr, r0
   16b40:	687f      	ldr	r7, [r7, #4]
   16b42:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   16b46:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16b4a:	ea26 0303 	bic.w	r3, r6, r3
   16b4e:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   16b52:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16b56:	ea26 0707 	bic.w	r7, r6, r7
   16b5a:	433b      	orrs	r3, r7
   16b5c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   16b60:	d102      	bne.n	16b68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   16b62:	3008      	adds	r0, #8
   16b64:	4290      	cmp	r0, r2
   16b66:	d9e7      	bls.n	16b38 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   16b68:	4288      	cmp	r0, r1
   16b6a:	d939      	bls.n	16be0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16b6c:	e0b1      	b.n	16cd2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   16b6e:	458c      	cmp	ip, r1
   16b70:	bf88      	it	hi
   16b72:	468c      	movhi	ip, r1
   16b74:	eb0e 060c 	add.w	r6, lr, ip
   16b78:	2000      	movs	r0, #0
   16b7a:	4663      	mov	r3, ip
   16b7c:	4677      	mov	r7, lr
   16b7e:	b363      	cbz	r3, 16bda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b80:	463a      	mov	r2, r7
   16b82:	f812 4b01 	ldrb.w	r4, [r2], #1
   16b86:	f1b4 050a 	subs.w	r5, r4, #10
   16b8a:	bf18      	it	ne
   16b8c:	2501      	movne	r5, #1
   16b8e:	4428      	add	r0, r5
   16b90:	2c0a      	cmp	r4, #10
   16b92:	d059      	beq.n	16c48 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b94:	42b2      	cmp	r2, r6
   16b96:	d020      	beq.n	16bda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b98:	787a      	ldrb	r2, [r7, #1]
   16b9a:	f1b2 040a 	subs.w	r4, r2, #10
   16b9e:	bf18      	it	ne
   16ba0:	2401      	movne	r4, #1
   16ba2:	4420      	add	r0, r4
   16ba4:	2a0a      	cmp	r2, #10
   16ba6:	d04f      	beq.n	16c48 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16ba8:	1cba      	adds	r2, r7, #2
   16baa:	42b2      	cmp	r2, r6
   16bac:	d015      	beq.n	16bda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16bae:	78ba      	ldrb	r2, [r7, #2]
   16bb0:	f1b2 040a 	subs.w	r4, r2, #10
   16bb4:	bf18      	it	ne
   16bb6:	2401      	movne	r4, #1
   16bb8:	4420      	add	r0, r4
   16bba:	2a0a      	cmp	r2, #10
   16bbc:	d044      	beq.n	16c48 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16bbe:	1cfa      	adds	r2, r7, #3
   16bc0:	42b2      	cmp	r2, r6
   16bc2:	d00a      	beq.n	16bda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16bc4:	78fa      	ldrb	r2, [r7, #3]
   16bc6:	3b04      	subs	r3, #4
   16bc8:	3704      	adds	r7, #4
   16bca:	f1b2 040a 	subs.w	r4, r2, #10
   16bce:	bf18      	it	ne
   16bd0:	2401      	movne	r4, #1
   16bd2:	4420      	add	r0, r4
   16bd4:	2a0a      	cmp	r2, #10
   16bd6:	d1d2      	bne.n	16b7e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   16bd8:	e036      	b.n	16c48 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16bda:	4660      	mov	r0, ip
   16bdc:	2908      	cmp	r1, #8
   16bde:	d2a7      	bcs.n	16b30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   16be0:	eb0e 0700 	add.w	r7, lr, r0
   16be4:	eb0e 0201 	add.w	r2, lr, r1
   16be8:	1a0e      	subs	r6, r1, r0
   16bea:	2100      	movs	r1, #0
   16bec:	b3ce      	cbz	r6, 16c62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16bee:	463b      	mov	r3, r7
   16bf0:	f813 5b01 	ldrb.w	r5, [r3], #1
   16bf4:	f1b5 040a 	subs.w	r4, r5, #10
   16bf8:	bf18      	it	ne
   16bfa:	2401      	movne	r4, #1
   16bfc:	4421      	add	r1, r4
   16bfe:	2d0a      	cmp	r5, #10
   16c00:	d021      	beq.n	16c46 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16c02:	4293      	cmp	r3, r2
   16c04:	d02d      	beq.n	16c62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16c06:	787b      	ldrb	r3, [r7, #1]
   16c08:	f1b3 050a 	subs.w	r5, r3, #10
   16c0c:	bf18      	it	ne
   16c0e:	2501      	movne	r5, #1
   16c10:	4429      	add	r1, r5
   16c12:	2b0a      	cmp	r3, #10
   16c14:	d017      	beq.n	16c46 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16c16:	1cbb      	adds	r3, r7, #2
   16c18:	4293      	cmp	r3, r2
   16c1a:	d022      	beq.n	16c62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16c1c:	78bb      	ldrb	r3, [r7, #2]
   16c1e:	f1b3 050a 	subs.w	r5, r3, #10
   16c22:	bf18      	it	ne
   16c24:	2501      	movne	r5, #1
   16c26:	4429      	add	r1, r5
   16c28:	2b0a      	cmp	r3, #10
   16c2a:	d00c      	beq.n	16c46 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16c2c:	1cfb      	adds	r3, r7, #3
   16c2e:	4293      	cmp	r3, r2
   16c30:	d017      	beq.n	16c62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16c32:	78fb      	ldrb	r3, [r7, #3]
   16c34:	3e04      	subs	r6, #4
   16c36:	3704      	adds	r7, #4
   16c38:	f1b3 050a 	subs.w	r5, r3, #10
   16c3c:	bf18      	it	ne
   16c3e:	2501      	movne	r5, #1
   16c40:	4429      	add	r1, r5
   16c42:	2b0a      	cmp	r3, #10
   16c44:	d1d2      	bne.n	16bec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   16c46:	4408      	add	r0, r1
   16c48:	4458      	add	r0, fp
   16c4a:	f100 0b01 	add.w	fp, r0, #1
   16c4e:	4540      	cmp	r0, r8
   16c50:	f4bf af5a 	bcs.w	16b08 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16c54:	f81a 0000 	ldrb.w	r0, [sl, r0]
   16c58:	280a      	cmp	r0, #10
   16c5a:	f47f af55 	bne.w	16b08 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16c5e:	2001      	movs	r0, #1
   16c60:	e001      	b.n	16c66 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   16c62:	2000      	movs	r0, #0
   16c64:	46c3      	mov	fp, r8
   16c66:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16c6a:	eba8 040b 	sub.w	r4, r8, fp
   16c6e:	7008      	strb	r0, [r1, #0]
   16c70:	fab4 f084 	clz	r0, r4
   16c74:	0942      	lsrs	r2, r0, #5
   16c76:	fabb f08b 	clz	r0, fp
   16c7a:	0943      	lsrs	r3, r0, #5
   16c7c:	e9d9 0100 	ldrd	r0, r1, [r9]
   16c80:	ea53 0602 	orrs.w	r6, r3, r2
   16c84:	d106      	bne.n	16c94 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   16c86:	45d8      	cmp	r8, fp
   16c88:	d926      	bls.n	16cd8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16c8a:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   16c8e:	f112 0f41 	cmn.w	r2, #65	; 0x41
   16c92:	dd21      	ble.n	16cd8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16c94:	68cb      	ldr	r3, [r1, #12]
   16c96:	4651      	mov	r1, sl
   16c98:	465a      	mov	r2, fp
   16c9a:	4798      	blx	r3
   16c9c:	b9a8      	cbnz	r0, 16cca <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16c9e:	2e00      	cmp	r6, #0
   16ca0:	f47f af19 	bne.w	16ad6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16ca4:	45d8      	cmp	r8, fp
   16ca6:	d905      	bls.n	16cb4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   16ca8:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   16cac:	f110 0f41 	cmn.w	r0, #65	; 0x41
   16cb0:	f73f af11 	bgt.w	16ad6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16cb4:	4650      	mov	r0, sl
   16cb6:	4641      	mov	r1, r8
   16cb8:	465a      	mov	r2, fp
   16cba:	4643      	mov	r3, r8
   16cbc:	f000 fe4d 	bl	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16cc0:	defe      	udf	#254	; 0xfe
   16cc2:	2000      	movs	r0, #0
   16cc4:	b001      	add	sp, #4
   16cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cca:	2001      	movs	r0, #1
   16ccc:	b001      	add	sp, #4
   16cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cd2:	f000 fe20 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16cd6:	defe      	udf	#254	; 0xfe
   16cd8:	4650      	mov	r0, sl
   16cda:	4641      	mov	r1, r8
   16cdc:	2200      	movs	r2, #0
   16cde:	465b      	mov	r3, fp
   16ce0:	f000 fe3b 	bl	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16ce4:	defe      	udf	#254	; 0xfe

00016ce6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   16ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ce8:	b08d      	sub	sp, #52	; 0x34
   16cea:	4604      	mov	r4, r0
   16cec:	7a00      	ldrb	r0, [r0, #8]
   16cee:	b138      	cbz	r0, 16d00 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   16cf0:	2001      	movs	r0, #1
   16cf2:	6861      	ldr	r1, [r4, #4]
   16cf4:	7220      	strb	r0, [r4, #8]
   16cf6:	1c48      	adds	r0, r1, #1
   16cf8:	6060      	str	r0, [r4, #4]
   16cfa:	4620      	mov	r0, r4
   16cfc:	b00d      	add	sp, #52	; 0x34
   16cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d00:	4616      	mov	r6, r2
   16d02:	460d      	mov	r5, r1
   16d04:	e9d4 1200 	ldrd	r1, r2, [r4]
   16d08:	7808      	ldrb	r0, [r1, #0]
   16d0a:	0740      	lsls	r0, r0, #29
   16d0c:	d419      	bmi.n	16d42 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   16d0e:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   16d12:	f64f 7136 	movw	r1, #65334	; 0xff36
   16d16:	f64f 7c3a 	movw	ip, #65338	; 0xff3a
   16d1a:	f2c0 0101 	movt	r1, #1
   16d1e:	2a00      	cmp	r2, #0
   16d20:	f2c0 0c01 	movt	ip, #1
   16d24:	bf08      	it	eq
   16d26:	4661      	moveq	r1, ip
   16d28:	68db      	ldr	r3, [r3, #12]
   16d2a:	f04f 0202 	mov.w	r2, #2
   16d2e:	bf08      	it	eq
   16d30:	2201      	moveq	r2, #1
   16d32:	4798      	blx	r3
   16d34:	2800      	cmp	r0, #0
   16d36:	d1db      	bne.n	16cf0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16d38:	68f2      	ldr	r2, [r6, #12]
   16d3a:	4628      	mov	r0, r5
   16d3c:	6821      	ldr	r1, [r4, #0]
   16d3e:	4790      	blx	r2
   16d40:	e7d7      	b.n	16cf2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   16d42:	b95a      	cbnz	r2, 16d5c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   16d44:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16d48:	2202      	movs	r2, #2
   16d4a:	68cb      	ldr	r3, [r1, #12]
   16d4c:	f64f 7138 	movw	r1, #65336	; 0xff38
   16d50:	f2c0 0101 	movt	r1, #1
   16d54:	4798      	blx	r3
   16d56:	2800      	cmp	r0, #0
   16d58:	d1ca      	bne.n	16cf0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16d5a:	6821      	ldr	r1, [r4, #0]
   16d5c:	2001      	movs	r0, #1
   16d5e:	f10d 030f 	add.w	r3, sp, #15
   16d62:	f88d 000f 	strb.w	r0, [sp, #15]
   16d66:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   16d6a:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   16d6e:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   16d72:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   16d76:	f891 1020 	ldrb.w	r1, [r1, #32]
   16d7a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   16d7e:	a904      	add	r1, sp, #16
   16d80:	e9cd 0204 	strd	r0, r2, [sp, #16]
   16d84:	f64f 701c 	movw	r0, #65308	; 0xff1c
   16d88:	f2c0 0001 	movt	r0, #1
   16d8c:	68f2      	ldr	r2, [r6, #12]
   16d8e:	900b      	str	r0, [sp, #44]	; 0x2c
   16d90:	4668      	mov	r0, sp
   16d92:	900a      	str	r0, [sp, #40]	; 0x28
   16d94:	4628      	mov	r0, r5
   16d96:	e9cd 3708 	strd	r3, r7, [sp, #32]
   16d9a:	e9cd ce06 	strd	ip, lr, [sp, #24]
   16d9e:	4790      	blx	r2
   16da0:	2800      	cmp	r0, #0
   16da2:	d1a5      	bne.n	16cf0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16da4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16da8:	2202      	movs	r2, #2
   16daa:	68cb      	ldr	r3, [r1, #12]
   16dac:	f64f 7134 	movw	r1, #65332	; 0xff34
   16db0:	f2c0 0101 	movt	r1, #1
   16db4:	4798      	blx	r3
   16db6:	e79c      	b.n	16cf2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00016db8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   16db8:	b5b0      	push	{r4, r5, r7, lr}
   16dba:	4604      	mov	r4, r0
   16dbc:	7a05      	ldrb	r5, [r0, #8]
   16dbe:	6840      	ldr	r0, [r0, #4]
   16dc0:	b308      	cbz	r0, 16e06 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   16dc2:	b10d      	cbz	r5, 16dc8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   16dc4:	2501      	movs	r5, #1
   16dc6:	e01d      	b.n	16e04 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16dc8:	2801      	cmp	r0, #1
   16dca:	d110      	bne.n	16dee <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16dcc:	7a60      	ldrb	r0, [r4, #9]
   16dce:	b170      	cbz	r0, 16dee <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16dd0:	6821      	ldr	r1, [r4, #0]
   16dd2:	7808      	ldrb	r0, [r1, #0]
   16dd4:	0740      	lsls	r0, r0, #29
   16dd6:	d40a      	bmi.n	16dee <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16dd8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16ddc:	2201      	movs	r2, #1
   16dde:	68cb      	ldr	r3, [r1, #12]
   16de0:	f64f 713b 	movw	r1, #65339	; 0xff3b
   16de4:	f2c0 0101 	movt	r1, #1
   16de8:	2501      	movs	r5, #1
   16dea:	4798      	blx	r3
   16dec:	b950      	cbnz	r0, 16e04 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16dee:	6821      	ldr	r1, [r4, #0]
   16df0:	2201      	movs	r2, #1
   16df2:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16df6:	68cb      	ldr	r3, [r1, #12]
   16df8:	f64f 713c 	movw	r1, #65340	; 0xff3c
   16dfc:	f2c0 0101 	movt	r1, #1
   16e00:	4798      	blx	r3
   16e02:	4605      	mov	r5, r0
   16e04:	7225      	strb	r5, [r4, #8]
   16e06:	2d00      	cmp	r5, #0
   16e08:	bf18      	it	ne
   16e0a:	2501      	movne	r5, #1
   16e0c:	4628      	mov	r0, r5
   16e0e:	bdb0      	pop	{r4, r5, r7, pc}

00016e10 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   16e10:	b580      	push	{r7, lr}
   16e12:	b082      	sub	sp, #8
   16e14:	468c      	mov	ip, r1
   16e16:	2100      	movs	r1, #0
   16e18:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   16e1c:	9101      	str	r1, [sp, #4]
   16e1e:	d207      	bcs.n	16e30 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   16e20:	f88d c004 	strb.w	ip, [sp, #4]
   16e24:	a901      	add	r1, sp, #4
   16e26:	2201      	movs	r2, #1
   16e28:	f7ff fe47 	bl	16aba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e2c:	b002      	add	sp, #8
   16e2e:	bd80      	pop	{r7, pc}
   16e30:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   16e34:	d210      	bcs.n	16e58 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   16e36:	ea4f 119c 	mov.w	r1, ip, lsr #6
   16e3a:	2306      	movs	r3, #6
   16e3c:	2202      	movs	r2, #2
   16e3e:	f363 115f 	bfi	r1, r3, #5, #27
   16e42:	f362 1c9f 	bfi	ip, r2, #6, #26
   16e46:	f88d c005 	strb.w	ip, [sp, #5]
   16e4a:	f88d 1004 	strb.w	r1, [sp, #4]
   16e4e:	a901      	add	r1, sp, #4
   16e50:	f7ff fe33 	bl	16aba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e54:	b002      	add	sp, #8
   16e56:	bd80      	pop	{r7, pc}
   16e58:	2202      	movs	r2, #2
   16e5a:	4663      	mov	r3, ip
   16e5c:	a901      	add	r1, sp, #4
   16e5e:	f362 139f 	bfi	r3, r2, #6, #26
   16e62:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   16e66:	d213      	bcs.n	16e90 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   16e68:	f88d 3006 	strb.w	r3, [sp, #6]
   16e6c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16e70:	f362 139f 	bfi	r3, r2, #6, #26
   16e74:	f88d 3005 	strb.w	r3, [sp, #5]
   16e78:	ea4f 321c 	mov.w	r2, ip, lsr #12
   16e7c:	230e      	movs	r3, #14
   16e7e:	f363 121f 	bfi	r2, r3, #4, #28
   16e82:	f88d 2004 	strb.w	r2, [sp, #4]
   16e86:	2203      	movs	r2, #3
   16e88:	f7ff fe17 	bl	16aba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e8c:	b002      	add	sp, #8
   16e8e:	bd80      	pop	{r7, pc}
   16e90:	f88d 3007 	strb.w	r3, [sp, #7]
   16e94:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16e98:	f362 139f 	bfi	r3, r2, #6, #26
   16e9c:	f88d 3006 	strb.w	r3, [sp, #6]
   16ea0:	ea4f 331c 	mov.w	r3, ip, lsr #12
   16ea4:	f362 139f 	bfi	r3, r2, #6, #26
   16ea8:	22f0      	movs	r2, #240	; 0xf0
   16eaa:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   16eae:	f88d 3005 	strb.w	r3, [sp, #5]
   16eb2:	f88d 2004 	strb.w	r2, [sp, #4]
   16eb6:	2204      	movs	r2, #4
   16eb8:	f7ff fdff 	bl	16aba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16ebc:	b002      	add	sp, #8
   16ebe:	bd80      	pop	{r7, pc}

00016ec0 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   16ec0:	b570      	push	{r4, r5, r6, lr}
   16ec2:	b088      	sub	sp, #32
   16ec4:	9001      	str	r0, [sp, #4]
   16ec6:	aa02      	add	r2, sp, #8
   16ec8:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16ecc:	f240 0108 	movw	r1, #8
   16ed0:	4610      	mov	r0, r2
   16ed2:	f2c0 0102 	movt	r1, #2
   16ed6:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16eda:	a801      	add	r0, sp, #4
   16edc:	f000 f89e 	bl	1701c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16ee0:	b008      	add	sp, #32
   16ee2:	bd70      	pop	{r4, r5, r6, pc}

00016ee4 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   16ee4:	6800      	ldr	r0, [r0, #0]
   16ee6:	f7ff bde8 	b.w	16aba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00016eea <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   16eea:	6800      	ldr	r0, [r0, #0]
   16eec:	f7ff bf90 	b.w	16e10 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00016ef0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   16ef0:	b570      	push	{r4, r5, r6, lr}
   16ef2:	b088      	sub	sp, #32
   16ef4:	6800      	ldr	r0, [r0, #0]
   16ef6:	aa02      	add	r2, sp, #8
   16ef8:	9001      	str	r0, [sp, #4]
   16efa:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16efe:	4610      	mov	r0, r2
   16f00:	f240 0108 	movw	r1, #8
   16f04:	f2c0 0102 	movt	r1, #2
   16f08:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16f0c:	a801      	add	r0, sp, #4
   16f0e:	f000 f885 	bl	1701c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16f12:	b008      	add	sp, #32
   16f14:	bd70      	pop	{r4, r5, r6, pc}

00016f16 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   16f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f1a:	b08d      	sub	sp, #52	; 0x34
   16f1c:	468c      	mov	ip, r1
   16f1e:	6801      	ldr	r1, [r0, #0]
   16f20:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16f24:	f64f 703f 	movw	r0, #65343	; 0xff3f
   16f28:	f242 7810 	movw	r8, #10000	; 0x2710
   16f2c:	4541      	cmp	r1, r8
   16f2e:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16f32:	f2c0 0001 	movt	r0, #1
   16f36:	d337      	bcc.n	16fa8 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   16f38:	f241 7959 	movw	r9, #5977	; 0x1759
   16f3c:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16f40:	f10d 0b0c 	add.w	fp, sp, #12
   16f44:	2300      	movs	r3, #0
   16f46:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16f4a:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16f4e:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16f52:	fba1 2409 	umull	r2, r4, r1, r9
   16f56:	42b9      	cmp	r1, r7
   16f58:	ea4f 3254 	mov.w	r2, r4, lsr #13
   16f5c:	fb02 1418 	mls	r4, r2, r8, r1
   16f60:	4611      	mov	r1, r2
   16f62:	b2a5      	uxth	r5, r4
   16f64:	fba5 560e 	umull	r5, r6, r5, lr
   16f68:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16f6c:	eb0b 0603 	add.w	r6, fp, r3
   16f70:	fb05 441a 	mls	r4, r5, sl, r4
   16f74:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   16f78:	f1a3 0304 	sub.w	r3, r3, #4
   16f7c:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16f80:	b2a4      	uxth	r4, r4
   16f82:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   16f86:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   16f8a:	d8e2      	bhi.n	16f52 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   16f8c:	f103 0427 	add.w	r4, r3, #39	; 0x27
   16f90:	4611      	mov	r1, r2
   16f92:	2963      	cmp	r1, #99	; 0x63
   16f94:	dc0b      	bgt.n	16fae <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   16f96:	460b      	mov	r3, r1
   16f98:	2b0a      	cmp	r3, #10
   16f9a:	db17      	blt.n	16fcc <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   16f9c:	1ea1      	subs	r1, r4, #2
   16f9e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   16fa2:	aa03      	add	r2, sp, #12
   16fa4:	5250      	strh	r0, [r2, r1]
   16fa6:	e016      	b.n	16fd6 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   16fa8:	2427      	movs	r4, #39	; 0x27
   16faa:	2963      	cmp	r1, #99	; 0x63
   16fac:	ddf3      	ble.n	16f96 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   16fae:	b28a      	uxth	r2, r1
   16fb0:	3c02      	subs	r4, #2
   16fb2:	fba2 230e 	umull	r2, r3, r2, lr
   16fb6:	2264      	movs	r2, #100	; 0x64
   16fb8:	095b      	lsrs	r3, r3, #5
   16fba:	fb03 1112 	mls	r1, r3, r2, r1
   16fbe:	aa03      	add	r2, sp, #12
   16fc0:	b289      	uxth	r1, r1
   16fc2:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   16fc6:	5311      	strh	r1, [r2, r4]
   16fc8:	2b0a      	cmp	r3, #10
   16fca:	dae7      	bge.n	16f9c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   16fcc:	1e61      	subs	r1, r4, #1
   16fce:	aa03      	add	r2, sp, #12
   16fd0:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16fd4:	5450      	strb	r0, [r2, r1]
   16fd6:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   16fda:	aa03      	add	r2, sp, #12
   16fdc:	4411      	add	r1, r2
   16fde:	f64f 5204 	movw	r2, #64772	; 0xfd04
   16fe2:	e9cd 1000 	strd	r1, r0, [sp]
   16fe6:	f2c0 0201 	movt	r2, #1
   16fea:	4660      	mov	r0, ip
   16fec:	2101      	movs	r1, #1
   16fee:	2300      	movs	r3, #0
   16ff0:	f000 f8f4 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16ff4:	b00d      	add	sp, #52	; 0x34
   16ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016ffa <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   16ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ffe:	b086      	sub	sp, #24
   17000:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   17004:	466a      	mov	r2, sp
   17006:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   1700a:	4613      	mov	r3, r2
   1700c:	4660      	mov	r0, ip
   1700e:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   17012:	f000 f803 	bl	1701c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17016:	b006      	add	sp, #24
   17018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001701c <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   1701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17020:	b08b      	sub	sp, #44	; 0x2c
   17022:	2303      	movs	r3, #3
   17024:	6897      	ldr	r7, [r2, #8]
   17026:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1702a:	2320      	movs	r3, #32
   1702c:	9303      	str	r3, [sp, #12]
   1702e:	2300      	movs	r3, #0
   17030:	2f00      	cmp	r7, #0
   17032:	9302      	str	r3, [sp, #8]
   17034:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17038:	9306      	str	r3, [sp, #24]
   1703a:	9304      	str	r3, [sp, #16]
   1703c:	d07c      	beq.n	17138 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   1703e:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   17042:	e9d2 9400 	ldrd	r9, r4, [r2]
   17046:	45a3      	cmp	fp, r4
   17048:	bf88      	it	hi
   1704a:	46a3      	movhi	fp, r4
   1704c:	f1bb 0f00 	cmp.w	fp, #0
   17050:	f000 809b 	beq.w	1718a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   17054:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   17058:	68cd      	ldr	r5, [r1, #12]
   1705a:	9201      	str	r2, [sp, #4]
   1705c:	e9d9 3200 	ldrd	r3, r2, [r9]
   17060:	4619      	mov	r1, r3
   17062:	47a8      	blx	r5
   17064:	2800      	cmp	r0, #0
   17066:	f040 809e 	bne.w	171a6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1706a:	464d      	mov	r5, r9
   1706c:	f04f 0a01 	mov.w	sl, #1
   17070:	f04f 0800 	mov.w	r8, #0
   17074:	f04f 0910 	mov.w	r9, #16
   17078:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   1707c:	6841      	ldr	r1, [r0, #4]
   1707e:	9103      	str	r1, [sp, #12]
   17080:	7f01      	ldrb	r1, [r0, #28]
   17082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   17086:	6881      	ldr	r1, [r0, #8]
   17088:	9102      	str	r1, [sp, #8]
   1708a:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1708e:	b18a      	cbz	r2, 170b4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   17090:	2a02      	cmp	r2, #2
   17092:	d011      	beq.n	170b8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17094:	9a01      	ldr	r2, [sp, #4]
   17096:	4291      	cmp	r1, r2
   17098:	f080 8098 	bcs.w	171cc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   1709c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   170a0:	f646 7317 	movw	r3, #28439	; 0x6f17
   170a4:	f2c0 0301 	movt	r3, #1
   170a8:	6852      	ldr	r2, [r2, #4]
   170aa:	429a      	cmp	r2, r3
   170ac:	d104      	bne.n	170b8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   170ae:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   170b2:	6809      	ldr	r1, [r1, #0]
   170b4:	2201      	movs	r2, #1
   170b6:	e000      	b.n	170ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   170b8:	2200      	movs	r2, #0
   170ba:	e9cd 2104 	strd	r2, r1, [sp, #16]
   170be:	f857 1009 	ldr.w	r1, [r7, r9]
   170c2:	68c0      	ldr	r0, [r0, #12]
   170c4:	b180      	cbz	r0, 170e8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   170c6:	2802      	cmp	r0, #2
   170c8:	d010      	beq.n	170ec <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   170ca:	9801      	ldr	r0, [sp, #4]
   170cc:	4281      	cmp	r1, r0
   170ce:	d27d      	bcs.n	171cc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   170d0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   170d4:	f646 7217 	movw	r2, #28439	; 0x6f17
   170d8:	f2c0 0201 	movt	r2, #1
   170dc:	6840      	ldr	r0, [r0, #4]
   170de:	4290      	cmp	r0, r2
   170e0:	d104      	bne.n	170ec <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   170e2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   170e6:	6801      	ldr	r1, [r0, #0]
   170e8:	2001      	movs	r0, #1
   170ea:	e000      	b.n	170ee <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   170ec:	2000      	movs	r0, #0
   170ee:	eb07 0209 	add.w	r2, r7, r9
   170f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   170f6:	9801      	ldr	r0, [sp, #4]
   170f8:	f852 1c10 	ldr.w	r1, [r2, #-16]
   170fc:	4281      	cmp	r1, r0
   170fe:	d25d      	bcs.n	171bc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   17100:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   17104:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   17108:	684a      	ldr	r2, [r1, #4]
   1710a:	a902      	add	r1, sp, #8
   1710c:	4790      	blx	r2
   1710e:	2800      	cmp	r0, #0
   17110:	d149      	bne.n	171a6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17112:	45da      	cmp	sl, fp
   17114:	d24b      	bcs.n	171ae <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   17116:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1711a:	eb05 0208 	add.w	r2, r5, r8
   1711e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   17122:	68db      	ldr	r3, [r3, #12]
   17124:	4798      	blx	r3
   17126:	f109 0920 	add.w	r9, r9, #32
   1712a:	f108 0808 	add.w	r8, r8, #8
   1712e:	f10a 0a01 	add.w	sl, sl, #1
   17132:	2800      	cmp	r0, #0
   17134:	d0a0      	beq.n	17078 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   17136:	e036      	b.n	171a6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17138:	6956      	ldr	r6, [r2, #20]
   1713a:	e9d2 9400 	ldrd	r9, r4, [r2]
   1713e:	42a6      	cmp	r6, r4
   17140:	bf88      	it	hi
   17142:	4626      	movhi	r6, r4
   17144:	b30e      	cbz	r6, 1718a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   17146:	6917      	ldr	r7, [r2, #16]
   17148:	e9d9 3200 	ldrd	r3, r2, [r9]
   1714c:	68cd      	ldr	r5, [r1, #12]
   1714e:	4619      	mov	r1, r3
   17150:	47a8      	blx	r5
   17152:	bb40      	cbnz	r0, 171a6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17154:	f10d 0808 	add.w	r8, sp, #8
   17158:	2500      	movs	r5, #0
   1715a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1715e:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   17162:	684a      	ldr	r2, [r1, #4]
   17164:	4641      	mov	r1, r8
   17166:	4790      	blx	r2
   17168:	b9e8      	cbnz	r0, 171a6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1716a:	f105 0a01 	add.w	sl, r5, #1
   1716e:	45b2      	cmp	sl, r6
   17170:	d20d      	bcs.n	1718e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   17172:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17176:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   1717a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   1717e:	68db      	ldr	r3, [r3, #12]
   17180:	4798      	blx	r3
   17182:	2800      	cmp	r0, #0
   17184:	4655      	mov	r5, sl
   17186:	d0e8      	beq.n	1715a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   17188:	e00d      	b.n	171a6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1718a:	f04f 0a00 	mov.w	sl, #0
   1718e:	4554      	cmp	r4, sl
   17190:	d910      	bls.n	171b4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   17192:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   17196:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1719a:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   1719e:	6852      	ldr	r2, [r2, #4]
   171a0:	68db      	ldr	r3, [r3, #12]
   171a2:	4798      	blx	r3
   171a4:	b130      	cbz	r0, 171b4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   171a6:	2001      	movs	r0, #1
   171a8:	b00b      	add	sp, #44	; 0x2c
   171aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171ae:	46a9      	mov	r9, r5
   171b0:	4554      	cmp	r4, sl
   171b2:	d8ee      	bhi.n	17192 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   171b4:	2000      	movs	r0, #0
   171b6:	b00b      	add	sp, #44	; 0x2c
   171b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171bc:	f240 0038 	movw	r0, #56	; 0x38
   171c0:	f2c0 0002 	movt	r0, #2
   171c4:	9a01      	ldr	r2, [sp, #4]
   171c6:	f7ff fc47 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   171ca:	defe      	udf	#254	; 0xfe
   171cc:	f240 0048 	movw	r0, #72	; 0x48
   171d0:	f2c0 0002 	movt	r0, #2
   171d4:	9a01      	ldr	r2, [sp, #4]
   171d6:	f7ff fc3f 	bl	16a58 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   171da:	defe      	udf	#254	; 0xfe

000171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   171dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171e0:	b083      	sub	sp, #12
   171e2:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   171e6:	469a      	mov	sl, r3
   171e8:	4604      	mov	r4, r0
   171ea:	b1e1      	cbz	r1, 17226 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   171ec:	f8d4 e000 	ldr.w	lr, [r4]
   171f0:	f04f 082b 	mov.w	r8, #43	; 0x2b
   171f4:	f01e 0101 	ands.w	r1, lr, #1
   171f8:	bf08      	it	eq
   171fa:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   171fe:	eb01 0907 	add.w	r9, r1, r7
   17202:	ea5f 714e 	movs.w	r1, lr, lsl #29
   17206:	d517      	bpl.n	17238 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   17208:	f1ba 0f00 	cmp.w	sl, #0
   1720c:	d033      	beq.n	17276 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   1720e:	f1aa 0101 	sub.w	r1, sl, #1
   17212:	f00a 0c03 	and.w	ip, sl, #3
   17216:	2903      	cmp	r1, #3
   17218:	d22f      	bcs.n	1727a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   1721a:	2100      	movs	r1, #0
   1721c:	4613      	mov	r3, r2
   1721e:	f1bc 0f00 	cmp.w	ip, #0
   17222:	d152      	bne.n	172ca <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   17224:	e069      	b.n	172fa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17226:	f8d4 e000 	ldr.w	lr, [r4]
   1722a:	f107 0901 	add.w	r9, r7, #1
   1722e:	f04f 082d 	mov.w	r8, #45	; 0x2d
   17232:	ea5f 714e 	movs.w	r1, lr, lsl #29
   17236:	d4e7      	bmi.n	17208 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   17238:	f04f 0a00 	mov.w	sl, #0
   1723c:	2200      	movs	r2, #0
   1723e:	68a0      	ldr	r0, [r4, #8]
   17240:	2801      	cmp	r0, #1
   17242:	d161      	bne.n	17308 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   17244:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   17248:	45cb      	cmp	fp, r9
   1724a:	d95d      	bls.n	17308 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   1724c:	ea5f 700e 	movs.w	r0, lr, lsl #28
   17250:	d46e      	bmi.n	17330 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   17252:	9202      	str	r2, [sp, #8]
   17254:	ebab 0109 	sub.w	r1, fp, r9
   17258:	f894 2020 	ldrb.w	r2, [r4, #32]
   1725c:	2000      	movs	r0, #0
   1725e:	46a9      	mov	r9, r5
   17260:	460e      	mov	r6, r1
   17262:	2a03      	cmp	r2, #3
   17264:	bf08      	it	eq
   17266:	2201      	moveq	r2, #1
   17268:	e8df f002 	tbb	[pc, r2]
   1726c:	02840287 	.word	0x02840287
   17270:	2600      	movs	r6, #0
   17272:	4608      	mov	r0, r1
   17274:	e081      	b.n	1737a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   17276:	2100      	movs	r1, #0
   17278:	e03f      	b.n	172fa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1727a:	ebac 060a 	sub.w	r6, ip, sl
   1727e:	2100      	movs	r1, #0
   17280:	4693      	mov	fp, r2
   17282:	4613      	mov	r3, r2
   17284:	e9cd 7501 	strd	r7, r5, [sp, #4]
   17288:	781a      	ldrb	r2, [r3, #0]
   1728a:	785d      	ldrb	r5, [r3, #1]
   1728c:	7898      	ldrb	r0, [r3, #2]
   1728e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17292:	78df      	ldrb	r7, [r3, #3]
   17294:	2a80      	cmp	r2, #128	; 0x80
   17296:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   1729a:	bf08      	it	eq
   1729c:	3101      	addeq	r1, #1
   1729e:	2a80      	cmp	r2, #128	; 0x80
   172a0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   172a4:	bf08      	it	eq
   172a6:	3101      	addeq	r1, #1
   172a8:	2880      	cmp	r0, #128	; 0x80
   172aa:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   172ae:	bf08      	it	eq
   172b0:	3101      	addeq	r1, #1
   172b2:	2880      	cmp	r0, #128	; 0x80
   172b4:	bf08      	it	eq
   172b6:	3101      	addeq	r1, #1
   172b8:	3304      	adds	r3, #4
   172ba:	3604      	adds	r6, #4
   172bc:	d1e4      	bne.n	17288 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   172be:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   172c2:	465a      	mov	r2, fp
   172c4:	f1bc 0f00 	cmp.w	ip, #0
   172c8:	d017      	beq.n	172fa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   172ca:	7818      	ldrb	r0, [r3, #0]
   172cc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   172d0:	2880      	cmp	r0, #128	; 0x80
   172d2:	bf08      	it	eq
   172d4:	3101      	addeq	r1, #1
   172d6:	f1bc 0f01 	cmp.w	ip, #1
   172da:	d00e      	beq.n	172fa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   172dc:	7858      	ldrb	r0, [r3, #1]
   172de:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   172e2:	2880      	cmp	r0, #128	; 0x80
   172e4:	bf08      	it	eq
   172e6:	3101      	addeq	r1, #1
   172e8:	f1bc 0f02 	cmp.w	ip, #2
   172ec:	d005      	beq.n	172fa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   172ee:	7898      	ldrb	r0, [r3, #2]
   172f0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   172f4:	2880      	cmp	r0, #128	; 0x80
   172f6:	bf08      	it	eq
   172f8:	3101      	addeq	r1, #1
   172fa:	eb09 000a 	add.w	r0, r9, sl
   172fe:	eba0 0901 	sub.w	r9, r0, r1
   17302:	68a0      	ldr	r0, [r4, #8]
   17304:	2801      	cmp	r0, #1
   17306:	d09d      	beq.n	17244 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   17308:	4620      	mov	r0, r4
   1730a:	4641      	mov	r1, r8
   1730c:	4653      	mov	r3, sl
   1730e:	f000 f893 	bl	17438 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17312:	b120      	cbz	r0, 1731e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   17314:	2601      	movs	r6, #1
   17316:	4630      	mov	r0, r6
   17318:	b003      	add	sp, #12
   1731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1731e:	69e1      	ldr	r1, [r4, #28]
   17320:	463a      	mov	r2, r7
   17322:	69a0      	ldr	r0, [r4, #24]
   17324:	68cb      	ldr	r3, [r1, #12]
   17326:	4629      	mov	r1, r5
   17328:	b003      	add	sp, #12
   1732a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1732e:	4718      	bx	r3
   17330:	6860      	ldr	r0, [r4, #4]
   17332:	2601      	movs	r6, #1
   17334:	9002      	str	r0, [sp, #8]
   17336:	2030      	movs	r0, #48	; 0x30
   17338:	f894 1020 	ldrb.w	r1, [r4, #32]
   1733c:	4653      	mov	r3, sl
   1733e:	6060      	str	r0, [r4, #4]
   17340:	4620      	mov	r0, r4
   17342:	9101      	str	r1, [sp, #4]
   17344:	4641      	mov	r1, r8
   17346:	f884 6020 	strb.w	r6, [r4, #32]
   1734a:	f000 f875 	bl	17438 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1734e:	2800      	cmp	r0, #0
   17350:	d1e1      	bne.n	17316 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17352:	f894 2020 	ldrb.w	r2, [r4, #32]
   17356:	ebab 0109 	sub.w	r1, fp, r9
   1735a:	2000      	movs	r0, #0
   1735c:	46a9      	mov	r9, r5
   1735e:	2a03      	cmp	r2, #3
   17360:	bf08      	it	eq
   17362:	2201      	moveq	r2, #1
   17364:	460e      	mov	r6, r1
   17366:	e8df f002 	tbb	[pc, r2]
   1736a:	0235      	.short	0x0235
   1736c:	0232      	.short	0x0232
   1736e:	2600      	movs	r6, #0
   17370:	4608      	mov	r0, r1
   17372:	e02f      	b.n	173d4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   17374:	0848      	lsrs	r0, r1, #1
   17376:	3101      	adds	r1, #1
   17378:	084e      	lsrs	r6, r1, #1
   1737a:	1c45      	adds	r5, r0, #1
   1737c:	3d01      	subs	r5, #1
   1737e:	d007      	beq.n	17390 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   17380:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17384:	6861      	ldr	r1, [r4, #4]
   17386:	6912      	ldr	r2, [r2, #16]
   17388:	4790      	blx	r2
   1738a:	2800      	cmp	r0, #0
   1738c:	d0f6      	beq.n	1737c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   1738e:	e7c1      	b.n	17314 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17390:	9a02      	ldr	r2, [sp, #8]
   17392:	4620      	mov	r0, r4
   17394:	4641      	mov	r1, r8
   17396:	4653      	mov	r3, sl
   17398:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1739c:	f000 f84c 	bl	17438 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   173a0:	2800      	cmp	r0, #0
   173a2:	d1b7      	bne.n	17314 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   173a4:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   173a8:	463a      	mov	r2, r7
   173aa:	68cb      	ldr	r3, [r1, #12]
   173ac:	4649      	mov	r1, r9
   173ae:	4798      	blx	r3
   173b0:	2800      	cmp	r0, #0
   173b2:	d1af      	bne.n	17314 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   173b4:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   173b8:	1c77      	adds	r7, r6, #1
   173ba:	2601      	movs	r6, #1
   173bc:	3f01      	subs	r7, #1
   173be:	d02c      	beq.n	1741a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   173c0:	6922      	ldr	r2, [r4, #16]
   173c2:	4628      	mov	r0, r5
   173c4:	4659      	mov	r1, fp
   173c6:	4790      	blx	r2
   173c8:	2800      	cmp	r0, #0
   173ca:	d0f7      	beq.n	173bc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   173cc:	e7a3      	b.n	17316 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   173ce:	0848      	lsrs	r0, r1, #1
   173d0:	3101      	adds	r1, #1
   173d2:	084e      	lsrs	r6, r1, #1
   173d4:	1c45      	adds	r5, r0, #1
   173d6:	3d01      	subs	r5, #1
   173d8:	d007      	beq.n	173ea <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   173da:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   173de:	6861      	ldr	r1, [r4, #4]
   173e0:	6912      	ldr	r2, [r2, #16]
   173e2:	4790      	blx	r2
   173e4:	2800      	cmp	r0, #0
   173e6:	d0f6      	beq.n	173d6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   173e8:	e794      	b.n	17314 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   173ea:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   173ee:	463a      	mov	r2, r7
   173f0:	68cb      	ldr	r3, [r1, #12]
   173f2:	4649      	mov	r1, r9
   173f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
   173f8:	4798      	blx	r3
   173fa:	2800      	cmp	r0, #0
   173fc:	f47f af8a 	bne.w	17314 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17400:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   17404:	1c77      	adds	r7, r6, #1
   17406:	2601      	movs	r6, #1
   17408:	3f01      	subs	r7, #1
   1740a:	d00b      	beq.n	17424 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   1740c:	692a      	ldr	r2, [r5, #16]
   1740e:	4648      	mov	r0, r9
   17410:	4641      	mov	r1, r8
   17412:	4790      	blx	r2
   17414:	2800      	cmp	r0, #0
   17416:	d0f7      	beq.n	17408 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   17418:	e77d      	b.n	17316 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1741a:	2600      	movs	r6, #0
   1741c:	4630      	mov	r0, r6
   1741e:	b003      	add	sp, #12
   17420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17424:	9801      	ldr	r0, [sp, #4]
   17426:	2600      	movs	r6, #0
   17428:	f884 0020 	strb.w	r0, [r4, #32]
   1742c:	9802      	ldr	r0, [sp, #8]
   1742e:	6060      	str	r0, [r4, #4]
   17430:	4630      	mov	r0, r6
   17432:	b003      	add	sp, #12
   17434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017438 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   17438:	b570      	push	{r4, r5, r6, lr}
   1743a:	461c      	mov	r4, r3
   1743c:	4615      	mov	r5, r2
   1743e:	4606      	mov	r6, r0
   17440:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   17444:	d006      	beq.n	17454 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   17446:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   1744a:	6912      	ldr	r2, [r2, #16]
   1744c:	4790      	blx	r2
   1744e:	b108      	cbz	r0, 17454 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   17450:	2001      	movs	r0, #1
   17452:	bd70      	pop	{r4, r5, r6, pc}
   17454:	b13d      	cbz	r5, 17466 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   17456:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   1745a:	4622      	mov	r2, r4
   1745c:	68cb      	ldr	r3, [r1, #12]
   1745e:	4629      	mov	r1, r5
   17460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17464:	4718      	bx	r3
   17466:	2000      	movs	r0, #0
   17468:	bd70      	pop	{r4, r5, r6, pc}
	...

0001746c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   1746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17470:	b081      	sub	sp, #4
   17472:	f8d0 e008 	ldr.w	lr, [r0, #8]
   17476:	4682      	mov	sl, r0
   17478:	6900      	ldr	r0, [r0, #16]
   1747a:	4691      	mov	r9, r2
   1747c:	4688      	mov	r8, r1
   1747e:	f1be 0f01 	cmp.w	lr, #1
   17482:	d111      	bne.n	174a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   17484:	2801      	cmp	r0, #1
   17486:	d012      	beq.n	174ae <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   17488:	f1b9 0f00 	cmp.w	r9, #0
   1748c:	f000 80c5 	beq.w	1761a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   17490:	f1a9 0101 	sub.w	r1, r9, #1
   17494:	f009 0003 	and.w	r0, r9, #3
   17498:	2903      	cmp	r1, #3
   1749a:	d267      	bcs.n	1756c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   1749c:	2100      	movs	r1, #0
   1749e:	4642      	mov	r2, r8
   174a0:	2800      	cmp	r0, #0
   174a2:	f040 8083 	bne.w	175ac <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   174a6:	e097      	b.n	175d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   174a8:	2801      	cmp	r0, #1
   174aa:	f040 80bd 	bne.w	17628 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   174ae:	f1b9 0f00 	cmp.w	r9, #0
   174b2:	d054      	beq.n	1755e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   174b4:	f8da 0014 	ldr.w	r0, [sl, #20]
   174b8:	eb08 0109 	add.w	r1, r8, r9
   174bc:	2200      	movs	r2, #0
   174be:	4647      	mov	r7, r8
   174c0:	1c43      	adds	r3, r0, #1
   174c2:	4646      	mov	r6, r8
   174c4:	463c      	mov	r4, r7
   174c6:	f914 5b01 	ldrsb.w	r5, [r4], #1
   174ca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   174ce:	b2e8      	uxtb	r0, r5
   174d0:	dc2e      	bgt.n	17530 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   174d2:	428c      	cmp	r4, r1
   174d4:	d01a      	beq.n	1750c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   174d6:	787d      	ldrb	r5, [r7, #1]
   174d8:	1cbc      	adds	r4, r7, #2
   174da:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   174de:	4627      	mov	r7, r4
   174e0:	f000 0b1f 	and.w	fp, r0, #31
   174e4:	28df      	cmp	r0, #223	; 0xdf
   174e6:	d917      	bls.n	17518 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   174e8:	428f      	cmp	r7, r1
   174ea:	d018      	beq.n	1751e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   174ec:	f817 4b01 	ldrb.w	r4, [r7], #1
   174f0:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   174f4:	463c      	mov	r4, r7
   174f6:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   174fa:	28f0      	cmp	r0, #240	; 0xf0
   174fc:	d316      	bcc.n	1752c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   174fe:	428f      	cmp	r7, r1
   17500:	d020      	beq.n	17544 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   17502:	f817 0b01 	ldrb.w	r0, [r7], #1
   17506:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1750a:	e01d      	b.n	17548 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   1750c:	2500      	movs	r5, #0
   1750e:	460f      	mov	r7, r1
   17510:	f000 0b1f 	and.w	fp, r0, #31
   17514:	28df      	cmp	r0, #223	; 0xdf
   17516:	d8e7      	bhi.n	174e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   17518:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   1751c:	e008      	b.n	17530 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1751e:	f04f 0c00 	mov.w	ip, #0
   17522:	460f      	mov	r7, r1
   17524:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   17528:	28f0      	cmp	r0, #240	; 0xf0
   1752a:	d2e8      	bcs.n	174fe <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   1752c:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   17530:	4627      	mov	r7, r4
   17532:	3b01      	subs	r3, #1
   17534:	d065      	beq.n	17602 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   17536:	1b90      	subs	r0, r2, r6
   17538:	42b9      	cmp	r1, r7
   1753a:	eb00 0207 	add.w	r2, r0, r7
   1753e:	463e      	mov	r6, r7
   17540:	d1c0      	bne.n	174c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   17542:	e061      	b.n	17608 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   17544:	2000      	movs	r0, #0
   17546:	4627      	mov	r7, r4
   17548:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   1754c:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   17550:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17554:	4428      	add	r0, r5
   17556:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1755a:	d1ea      	bne.n	17532 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   1755c:	e054      	b.n	17608 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1755e:	2200      	movs	r2, #0
   17560:	f1be 0f01 	cmp.w	lr, #1
   17564:	d054      	beq.n	17610 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   17566:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1756a:	e062      	b.n	17632 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   1756c:	eba0 0309 	sub.w	r3, r0, r9
   17570:	2100      	movs	r1, #0
   17572:	4642      	mov	r2, r8
   17574:	7817      	ldrb	r7, [r2, #0]
   17576:	7856      	ldrb	r6, [r2, #1]
   17578:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   1757c:	7895      	ldrb	r5, [r2, #2]
   1757e:	78d4      	ldrb	r4, [r2, #3]
   17580:	2f80      	cmp	r7, #128	; 0x80
   17582:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   17586:	bf08      	it	eq
   17588:	3101      	addeq	r1, #1
   1758a:	2f80      	cmp	r7, #128	; 0x80
   1758c:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   17590:	bf08      	it	eq
   17592:	3101      	addeq	r1, #1
   17594:	2f80      	cmp	r7, #128	; 0x80
   17596:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   1759a:	bf08      	it	eq
   1759c:	3101      	addeq	r1, #1
   1759e:	2f80      	cmp	r7, #128	; 0x80
   175a0:	bf08      	it	eq
   175a2:	3101      	addeq	r1, #1
   175a4:	3204      	adds	r2, #4
   175a6:	3304      	adds	r3, #4
   175a8:	d1e4      	bne.n	17574 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   175aa:	b1a8      	cbz	r0, 175d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   175ac:	7813      	ldrb	r3, [r2, #0]
   175ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   175b2:	2b80      	cmp	r3, #128	; 0x80
   175b4:	bf08      	it	eq
   175b6:	3101      	addeq	r1, #1
   175b8:	2801      	cmp	r0, #1
   175ba:	d00d      	beq.n	175d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   175bc:	7853      	ldrb	r3, [r2, #1]
   175be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   175c2:	2b80      	cmp	r3, #128	; 0x80
   175c4:	bf08      	it	eq
   175c6:	3101      	addeq	r1, #1
   175c8:	2802      	cmp	r0, #2
   175ca:	d005      	beq.n	175d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   175cc:	7890      	ldrb	r0, [r2, #2]
   175ce:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   175d2:	2880      	cmp	r0, #128	; 0x80
   175d4:	bf08      	it	eq
   175d6:	3101      	addeq	r1, #1
   175d8:	f8da 000c 	ldr.w	r0, [sl, #12]
   175dc:	eba9 0101 	sub.w	r1, r9, r1
   175e0:	4281      	cmp	r1, r0
   175e2:	d221      	bcs.n	17628 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   175e4:	f1b9 0f00 	cmp.w	r9, #0
   175e8:	d029      	beq.n	1763e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   175ea:	f1a9 0101 	sub.w	r1, r9, #1
   175ee:	f009 0c03 	and.w	ip, r9, #3
   175f2:	2903      	cmp	r1, #3
   175f4:	d225      	bcs.n	17642 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   175f6:	2100      	movs	r1, #0
   175f8:	4643      	mov	r3, r8
   175fa:	f1bc 0f00 	cmp.w	ip, #0
   175fe:	d142      	bne.n	17686 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   17600:	e059      	b.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17602:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17606:	d167      	bne.n	176d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   17608:	464a      	mov	r2, r9
   1760a:	f1be 0f01 	cmp.w	lr, #1
   1760e:	d1aa      	bne.n	17566 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   17610:	4691      	mov	r9, r2
   17612:	f1b9 0f00 	cmp.w	r9, #0
   17616:	f47f af3b 	bne.w	17490 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   1761a:	2100      	movs	r1, #0
   1761c:	f8da 000c 	ldr.w	r0, [sl, #12]
   17620:	eba9 0101 	sub.w	r1, r9, r1
   17624:	4281      	cmp	r1, r0
   17626:	d3dd      	bcc.n	175e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   17628:	f8da 101c 	ldr.w	r1, [sl, #28]
   1762c:	464a      	mov	r2, r9
   1762e:	f8da 0018 	ldr.w	r0, [sl, #24]
   17632:	68cb      	ldr	r3, [r1, #12]
   17634:	4641      	mov	r1, r8
   17636:	b001      	add	sp, #4
   17638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1763c:	4718      	bx	r3
   1763e:	2100      	movs	r1, #0
   17640:	e039      	b.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17642:	ebac 0709 	sub.w	r7, ip, r9
   17646:	2100      	movs	r1, #0
   17648:	4643      	mov	r3, r8
   1764a:	781e      	ldrb	r6, [r3, #0]
   1764c:	785d      	ldrb	r5, [r3, #1]
   1764e:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   17652:	789c      	ldrb	r4, [r3, #2]
   17654:	78da      	ldrb	r2, [r3, #3]
   17656:	2e80      	cmp	r6, #128	; 0x80
   17658:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   1765c:	bf08      	it	eq
   1765e:	3101      	addeq	r1, #1
   17660:	2e80      	cmp	r6, #128	; 0x80
   17662:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   17666:	bf08      	it	eq
   17668:	3101      	addeq	r1, #1
   1766a:	2e80      	cmp	r6, #128	; 0x80
   1766c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17670:	bf08      	it	eq
   17672:	3101      	addeq	r1, #1
   17674:	2a80      	cmp	r2, #128	; 0x80
   17676:	bf08      	it	eq
   17678:	3101      	addeq	r1, #1
   1767a:	3304      	adds	r3, #4
   1767c:	3704      	adds	r7, #4
   1767e:	d1e4      	bne.n	1764a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   17680:	f1bc 0f00 	cmp.w	ip, #0
   17684:	d017      	beq.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17686:	781a      	ldrb	r2, [r3, #0]
   17688:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1768c:	2a80      	cmp	r2, #128	; 0x80
   1768e:	bf08      	it	eq
   17690:	3101      	addeq	r1, #1
   17692:	f1bc 0f01 	cmp.w	ip, #1
   17696:	d00e      	beq.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17698:	785a      	ldrb	r2, [r3, #1]
   1769a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1769e:	2a80      	cmp	r2, #128	; 0x80
   176a0:	bf08      	it	eq
   176a2:	3101      	addeq	r1, #1
   176a4:	f1bc 0f02 	cmp.w	ip, #2
   176a8:	d005      	beq.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   176aa:	789a      	ldrb	r2, [r3, #2]
   176ac:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   176b0:	2a80      	cmp	r2, #128	; 0x80
   176b2:	bf08      	it	eq
   176b4:	3101      	addeq	r1, #1
   176b6:	f89a 3020 	ldrb.w	r3, [sl, #32]
   176ba:	eba1 0109 	sub.w	r1, r1, r9
   176be:	4401      	add	r1, r0
   176c0:	2000      	movs	r0, #0
   176c2:	1eda      	subs	r2, r3, #3
   176c4:	bf18      	it	ne
   176c6:	461a      	movne	r2, r3
   176c8:	460e      	mov	r6, r1
   176ca:	e8df f002 	tbb	[pc, r2]
   176ce:	0216      	.short	0x0216
   176d0:	0213      	.short	0x0213
   176d2:	2600      	movs	r6, #0
   176d4:	4608      	mov	r0, r1
   176d6:	e010      	b.n	176fa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   176d8:	2a00      	cmp	r2, #0
   176da:	bf18      	it	ne
   176dc:	454a      	cmpne	r2, r9
   176de:	d134      	bne.n	1774a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   176e0:	4640      	mov	r0, r8
   176e2:	2800      	cmp	r0, #0
   176e4:	bf0c      	ite	eq
   176e6:	464a      	moveq	r2, r9
   176e8:	4680      	movne	r8, r0
   176ea:	f1be 0f01 	cmp.w	lr, #1
   176ee:	f43f af8f 	beq.w	17610 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   176f2:	e738      	b.n	17566 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   176f4:	0848      	lsrs	r0, r1, #1
   176f6:	3101      	adds	r1, #1
   176f8:	084e      	lsrs	r6, r1, #1
   176fa:	1c44      	adds	r4, r0, #1
   176fc:	3c01      	subs	r4, #1
   176fe:	d008      	beq.n	17712 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   17700:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   17704:	f8da 1004 	ldr.w	r1, [sl, #4]
   17708:	6912      	ldr	r2, [r2, #16]
   1770a:	4790      	blx	r2
   1770c:	2800      	cmp	r0, #0
   1770e:	d0f5      	beq.n	176fc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   17710:	e013      	b.n	1773a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   17712:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   17716:	464a      	mov	r2, r9
   17718:	68cb      	ldr	r3, [r1, #12]
   1771a:	4641      	mov	r1, r8
   1771c:	f8da 7004 	ldr.w	r7, [sl, #4]
   17720:	4798      	blx	r3
   17722:	b950      	cbnz	r0, 1773a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   17724:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   17728:	3601      	adds	r6, #1
   1772a:	3e01      	subs	r6, #1
   1772c:	d009      	beq.n	17742 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   1772e:	692a      	ldr	r2, [r5, #16]
   17730:	4620      	mov	r0, r4
   17732:	4639      	mov	r1, r7
   17734:	4790      	blx	r2
   17736:	2800      	cmp	r0, #0
   17738:	d0f7      	beq.n	1772a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   1773a:	2001      	movs	r0, #1
   1773c:	b001      	add	sp, #4
   1773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17742:	2000      	movs	r0, #0
   17744:	b001      	add	sp, #4
   17746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1774a:	454a      	cmp	r2, r9
   1774c:	d204      	bcs.n	17758 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   1774e:	f918 0002 	ldrsb.w	r0, [r8, r2]
   17752:	f110 0f40 	cmn.w	r0, #64	; 0x40
   17756:	dac3      	bge.n	176e0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   17758:	2000      	movs	r0, #0
   1775a:	2200      	movs	r2, #0
   1775c:	2800      	cmp	r0, #0
   1775e:	bf0c      	ite	eq
   17760:	464a      	moveq	r2, r9
   17762:	4680      	movne	r8, r0
   17764:	f1be 0f01 	cmp.w	lr, #1
   17768:	f43f af52 	beq.w	17610 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1776c:	e6fb      	b.n	17566 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

0001776e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   1776e:	7800      	ldrb	r0, [r0, #0]
   17770:	f3c0 1000 	ubfx	r0, r0, #4, #1
   17774:	4770      	bx	lr

00017776 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   17776:	7800      	ldrb	r0, [r0, #0]
   17778:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1777c:	4770      	bx	lr

0001777e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   1777e:	b570      	push	{r4, r5, r6, lr}
   17780:	460d      	mov	r5, r1
   17782:	4606      	mov	r6, r0
   17784:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17788:	461c      	mov	r4, r3
   1778a:	68cb      	ldr	r3, [r1, #12]
   1778c:	4611      	mov	r1, r2
   1778e:	4622      	mov	r2, r4
   17790:	4798      	blx	r3
   17792:	7230      	strb	r0, [r6, #8]
   17794:	fab4 f084 	clz	r0, r4
   17798:	0940      	lsrs	r0, r0, #5
   1779a:	7270      	strb	r0, [r6, #9]
   1779c:	2000      	movs	r0, #0
   1779e:	e9c6 5000 	strd	r5, r0, [r6]
   177a2:	bd70      	pop	{r4, r5, r6, pc}

000177a4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   177a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   177a8:	b085      	sub	sp, #20
   177aa:	460c      	mov	r4, r1
   177ac:	4605      	mov	r5, r0
   177ae:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   177b2:	690a      	ldr	r2, [r1, #16]
   177b4:	2127      	movs	r1, #39	; 0x27
   177b6:	4790      	blx	r2
   177b8:	b118      	cbz	r0, 177c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   177ba:	2001      	movs	r0, #1
   177bc:	b005      	add	sp, #20
   177be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   177c2:	6829      	ldr	r1, [r5, #0]
   177c4:	a801      	add	r0, sp, #4
   177c6:	2201      	movs	r2, #1
   177c8:	f7ff f85c 	bl	16884 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   177cc:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   177d0:	f04f 091c 	mov.w	r9, #28
   177d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   177d8:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   177dc:	f89d 6010 	ldrb.w	r6, [sp, #16]
   177e0:	d139      	bne.n	17856 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   177e2:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   177e6:	2f02      	cmp	r7, #2
   177e8:	f0c0 806b 	bcc.w	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   177ec:	d00c      	beq.n	17808 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   177ee:	b2f0      	uxtb	r0, r6
   177f0:	2604      	movs	r6, #4
   177f2:	2703      	movs	r7, #3
   177f4:	215c      	movs	r1, #92	; 0x5c
   177f6:	e8df f000 	tbb	[pc, r0]
   177fa:	0364      	.short	0x0364
   177fc:	09242010 	.word	0x09242010
   17800:	2600      	movs	r6, #0
   17802:	2703      	movs	r7, #3
   17804:	217d      	movs	r1, #125	; 0x7d
   17806:	e001      	b.n	1780c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   17808:	2701      	movs	r7, #1
   1780a:	215c      	movs	r1, #92	; 0x5c
   1780c:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17810:	6912      	ldr	r2, [r2, #16]
   17812:	4790      	blx	r2
   17814:	2800      	cmp	r0, #0
   17816:	d0e6      	beq.n	177e6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   17818:	e7cf      	b.n	177ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   1781a:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   1781e:	2602      	movs	r6, #2
   17820:	2703      	movs	r7, #3
   17822:	f1b8 0f00 	cmp.w	r8, #0
   17826:	fa25 f100 	lsr.w	r1, r5, r0
   1782a:	bf08      	it	eq
   1782c:	2601      	moveq	r6, #1
   1782e:	bf18      	it	ne
   17830:	f1a8 0801 	subne.w	r8, r8, #1
   17834:	f367 111f 	bfi	r1, r7, #4, #28
   17838:	e7e8      	b.n	1780c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1783a:	2602      	movs	r6, #2
   1783c:	2703      	movs	r7, #3
   1783e:	217b      	movs	r1, #123	; 0x7b
   17840:	e7e4      	b.n	1780c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   17842:	2703      	movs	r7, #3
   17844:	2175      	movs	r1, #117	; 0x75
   17846:	2603      	movs	r6, #3
   17848:	e7e0      	b.n	1780c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1784a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1784e:	6912      	ldr	r2, [r2, #16]
   17850:	4790      	blx	r2
   17852:	2800      	cmp	r0, #0
   17854:	d1b1      	bne.n	177ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   17856:	4638      	mov	r0, r7
   17858:	2701      	movs	r7, #1
   1785a:	215c      	movs	r1, #92	; 0x5c
   1785c:	e8df f000 	tbb	[pc, r0]
   17860:	06020331 	.word	0x06020331
   17864:	e7f1      	b.n	1784a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17866:	2700      	movs	r7, #0
   17868:	4629      	mov	r1, r5
   1786a:	e7ee      	b.n	1784a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1786c:	b2f0      	uxtb	r0, r6
   1786e:	2604      	movs	r6, #4
   17870:	2703      	movs	r7, #3
   17872:	215c      	movs	r1, #92	; 0x5c
   17874:	e8df f000 	tbb	[pc, r0]
   17878:	1d080425 	.word	0x1d080425
   1787c:	0321      	.short	0x0321
   1787e:	e7e4      	b.n	1784a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17880:	2600      	movs	r6, #0
   17882:	2703      	movs	r7, #3
   17884:	217d      	movs	r1, #125	; 0x7d
   17886:	e7e0      	b.n	1784a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17888:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   1788c:	2602      	movs	r6, #2
   1788e:	2703      	movs	r7, #3
   17890:	fa25 f000 	lsr.w	r0, r5, r0
   17894:	f000 000f 	and.w	r0, r0, #15
   17898:	f100 0157 	add.w	r1, r0, #87	; 0x57
   1789c:	280a      	cmp	r0, #10
   1789e:	bf38      	it	cc
   178a0:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   178a4:	f1b8 0f00 	cmp.w	r8, #0
   178a8:	bf0c      	ite	eq
   178aa:	2601      	moveq	r6, #1
   178ac:	f1a8 0801 	subne.w	r8, r8, #1
   178b0:	e7cb      	b.n	1784a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   178b2:	2602      	movs	r6, #2
   178b4:	2703      	movs	r7, #3
   178b6:	217b      	movs	r1, #123	; 0x7b
   178b8:	e7c7      	b.n	1784a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   178ba:	2703      	movs	r7, #3
   178bc:	2175      	movs	r1, #117	; 0x75
   178be:	2603      	movs	r6, #3
   178c0:	e7c3      	b.n	1784a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   178c2:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   178c6:	690a      	ldr	r2, [r1, #16]
   178c8:	2127      	movs	r1, #39	; 0x27
   178ca:	b005      	add	sp, #20
   178cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   178d0:	4710      	bx	r2

000178d2 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   178d2:	b08c      	sub	sp, #48	; 0x30
   178d4:	e9cd 0100 	strd	r0, r1, [sp]
   178d8:	2002      	movs	r0, #2
   178da:	a908      	add	r1, sp, #32
   178dc:	9007      	str	r0, [sp, #28]
   178de:	9106      	str	r1, [sp, #24]
   178e0:	2100      	movs	r1, #0
   178e2:	9105      	str	r1, [sp, #20]
   178e4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   178e8:	f240 0098 	movw	r0, #152	; 0x98
   178ec:	f2c0 0002 	movt	r0, #2
   178f0:	a901      	add	r1, sp, #4
   178f2:	9002      	str	r0, [sp, #8]
   178f4:	f248 70ad 	movw	r0, #34733	; 0x87ad
   178f8:	f2c0 0001 	movt	r0, #1
   178fc:	900b      	str	r0, [sp, #44]	; 0x2c
   178fe:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17902:	4668      	mov	r0, sp
   17904:	f240 01a8 	movw	r1, #168	; 0xa8
   17908:	9008      	str	r0, [sp, #32]
   1790a:	a802      	add	r0, sp, #8
   1790c:	f2c0 0102 	movt	r1, #2
   17910:	f7ff f8c2 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17914:	defe      	udf	#254	; 0xfe

00017916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   17916:	b08c      	sub	sp, #48	; 0x30
   17918:	e9cd 0100 	strd	r0, r1, [sp]
   1791c:	2002      	movs	r0, #2
   1791e:	a908      	add	r1, sp, #32
   17920:	9007      	str	r0, [sp, #28]
   17922:	9106      	str	r1, [sp, #24]
   17924:	2100      	movs	r1, #0
   17926:	9105      	str	r1, [sp, #20]
   17928:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1792c:	f240 00dc 	movw	r0, #220	; 0xdc
   17930:	f2c0 0002 	movt	r0, #2
   17934:	a901      	add	r1, sp, #4
   17936:	9002      	str	r0, [sp, #8]
   17938:	f248 70ad 	movw	r0, #34733	; 0x87ad
   1793c:	f2c0 0001 	movt	r0, #1
   17940:	900b      	str	r0, [sp, #44]	; 0x2c
   17942:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17946:	4668      	mov	r0, sp
   17948:	f240 01ec 	movw	r1, #236	; 0xec
   1794c:	9008      	str	r0, [sp, #32]
   1794e:	a802      	add	r0, sp, #8
   17950:	f2c0 0102 	movt	r1, #2
   17954:	f7ff f8a0 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17958:	defe      	udf	#254	; 0xfe

0001795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   1795a:	b09a      	sub	sp, #104	; 0x68
   1795c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   17960:	e9cd 2300 	strd	r2, r3, [sp]
   17964:	d802      	bhi.n	1796c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   17966:	2501      	movs	r5, #1
   17968:	468c      	mov	ip, r1
   1796a:	e03e      	b.n	179ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1796c:	f1c1 0e00 	rsb	lr, r1, #0
   17970:	f44f 7c80 	mov.w	ip, #256	; 0x100
   17974:	458c      	cmp	ip, r1
   17976:	d205      	bcs.n	17984 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   17978:	f910 400c 	ldrsb.w	r4, [r0, ip]
   1797c:	f114 0f41 	cmn.w	r4, #65	; 0x41
   17980:	f300 8108 	bgt.w	17b94 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   17984:	eb0e 040c 	add.w	r4, lr, ip
   17988:	f1ac 0601 	sub.w	r6, ip, #1
   1798c:	2c01      	cmp	r4, #1
   1798e:	d02a      	beq.n	179e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17990:	428e      	cmp	r6, r1
   17992:	d206      	bcs.n	179a2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   17994:	eb00 050c 	add.w	r5, r0, ip
   17998:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   1799c:	f115 0f41 	cmn.w	r5, #65	; 0x41
   179a0:	dc21      	bgt.n	179e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   179a2:	f1ac 0602 	sub.w	r6, ip, #2
   179a6:	2c02      	cmp	r4, #2
   179a8:	d01d      	beq.n	179e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   179aa:	428e      	cmp	r6, r1
   179ac:	d206      	bcs.n	179bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   179ae:	eb00 050c 	add.w	r5, r0, ip
   179b2:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   179b6:	f115 0f41 	cmn.w	r5, #65	; 0x41
   179ba:	dc14      	bgt.n	179e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   179bc:	f1ac 0603 	sub.w	r6, ip, #3
   179c0:	2c03      	cmp	r4, #3
   179c2:	d010      	beq.n	179e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   179c4:	428e      	cmp	r6, r1
   179c6:	d206      	bcs.n	179d6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   179c8:	eb00 050c 	add.w	r5, r0, ip
   179cc:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   179d0:	f115 0f41 	cmn.w	r5, #65	; 0x41
   179d4:	dc07      	bgt.n	179e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   179d6:	f1bc 0c04 	subs.w	ip, ip, #4
   179da:	f04f 0500 	mov.w	r5, #0
   179de:	d004      	beq.n	179ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   179e0:	2c04      	cmp	r4, #4
   179e2:	d1c7      	bne.n	17974 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   179e4:	e001      	b.n	179ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   179e6:	2500      	movs	r5, #0
   179e8:	46b4      	mov	ip, r6
   179ea:	2605      	movs	r6, #5
   179ec:	2d00      	cmp	r5, #0
   179ee:	f240 15ba 	movw	r5, #442	; 0x1ba
   179f2:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   179f6:	bf18      	it	ne
   179f8:	2600      	movne	r6, #0
   179fa:	9605      	str	r6, [sp, #20]
   179fc:	f64f 5604 	movw	r6, #64772	; 0xfd04
   17a00:	f2c0 0502 	movt	r5, #2
   17a04:	f2c0 0601 	movt	r6, #1
   17a08:	bf18      	it	ne
   17a0a:	4635      	movne	r5, r6
   17a0c:	428a      	cmp	r2, r1
   17a0e:	9504      	str	r5, [sp, #16]
   17a10:	bf98      	it	ls
   17a12:	428b      	cmpls	r3, r1
   17a14:	d92a      	bls.n	17a6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   17a16:	428a      	cmp	r2, r1
   17a18:	f04f 0003 	mov.w	r0, #3
   17a1c:	a910      	add	r1, sp, #64	; 0x40
   17a1e:	bf88      	it	hi
   17a20:	4613      	movhi	r3, r2
   17a22:	900f      	str	r0, [sp, #60]	; 0x3c
   17a24:	910e      	str	r1, [sp, #56]	; 0x38
   17a26:	2100      	movs	r1, #0
   17a28:	910d      	str	r1, [sp, #52]	; 0x34
   17a2a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17a2e:	f240 10e0 	movw	r0, #480	; 0x1e0
   17a32:	f2c0 0002 	movt	r0, #2
   17a36:	a904      	add	r1, sp, #16
   17a38:	900a      	str	r0, [sp, #40]	; 0x28
   17a3a:	f648 009b 	movw	r0, #34971	; 0x889b
   17a3e:	f2c0 0001 	movt	r0, #1
   17a42:	9308      	str	r3, [sp, #32]
   17a44:	9015      	str	r0, [sp, #84]	; 0x54
   17a46:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   17a4a:	a802      	add	r0, sp, #8
   17a4c:	f240 11f8 	movw	r1, #504	; 0x1f8
   17a50:	9012      	str	r0, [sp, #72]	; 0x48
   17a52:	f248 70ad 	movw	r0, #34733	; 0x87ad
   17a56:	f2c0 0102 	movt	r1, #2
   17a5a:	f2c0 0001 	movt	r0, #1
   17a5e:	9011      	str	r0, [sp, #68]	; 0x44
   17a60:	a808      	add	r0, sp, #32
   17a62:	9010      	str	r0, [sp, #64]	; 0x40
   17a64:	a80a      	add	r0, sp, #40	; 0x28
   17a66:	f7ff f817 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17a6a:	defe      	udf	#254	; 0xfe
   17a6c:	429a      	cmp	r2, r3
   17a6e:	f200 80f1 	bhi.w	17c54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   17a72:	2a00      	cmp	r2, #0
   17a74:	bf18      	it	ne
   17a76:	4291      	cmpne	r1, r2
   17a78:	d109      	bne.n	17a8e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   17a7a:	461a      	mov	r2, r3
   17a7c:	2a00      	cmp	r2, #0
   17a7e:	9206      	str	r2, [sp, #24]
   17a80:	bf18      	it	ne
   17a82:	428a      	cmpne	r2, r1
   17a84:	d10e      	bne.n	17aa4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   17a86:	4613      	mov	r3, r2
   17a88:	428b      	cmp	r3, r1
   17a8a:	d047      	beq.n	17b1c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17a8c:	e052      	b.n	17b34 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17a8e:	d9f5      	bls.n	17a7c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   17a90:	5686      	ldrsb	r6, [r0, r2]
   17a92:	f116 0f40 	cmn.w	r6, #64	; 0x40
   17a96:	bfa8      	it	ge
   17a98:	461a      	movge	r2, r3
   17a9a:	2a00      	cmp	r2, #0
   17a9c:	9206      	str	r2, [sp, #24]
   17a9e:	bf18      	it	ne
   17aa0:	428a      	cmpne	r2, r1
   17aa2:	d0f0      	beq.n	17a86 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17aa4:	f1a0 0c01 	sub.w	ip, r0, #1
   17aa8:	f101 0e02 	add.w	lr, r1, #2
   17aac:	1ccc      	adds	r4, r1, #3
   17aae:	1c4d      	adds	r5, r1, #1
   17ab0:	1d0e      	adds	r6, r1, #4
   17ab2:	428a      	cmp	r2, r1
   17ab4:	d206      	bcs.n	17ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   17ab6:	eb0c 0302 	add.w	r3, ip, r2
   17aba:	f993 3001 	ldrsb.w	r3, [r3, #1]
   17abe:	f113 0f41 	cmn.w	r3, #65	; 0x41
   17ac2:	dce0      	bgt.n	17a86 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17ac4:	1e53      	subs	r3, r2, #1
   17ac6:	bf18      	it	ne
   17ac8:	4295      	cmpne	r5, r2
   17aca:	d025      	beq.n	17b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17acc:	428b      	cmp	r3, r1
   17ace:	d204      	bcs.n	17ada <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   17ad0:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   17ad4:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17ad8:	dc1e      	bgt.n	17b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17ada:	1e93      	subs	r3, r2, #2
   17adc:	bf18      	it	ne
   17ade:	4596      	cmpne	lr, r2
   17ae0:	d01a      	beq.n	17b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17ae2:	428b      	cmp	r3, r1
   17ae4:	d206      	bcs.n	17af4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   17ae6:	eb0c 0702 	add.w	r7, ip, r2
   17aea:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   17aee:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17af2:	dc11      	bgt.n	17b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17af4:	1ed3      	subs	r3, r2, #3
   17af6:	bf18      	it	ne
   17af8:	4294      	cmpne	r4, r2
   17afa:	d00d      	beq.n	17b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17afc:	428b      	cmp	r3, r1
   17afe:	d206      	bcs.n	17b0e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   17b00:	eb0c 0702 	add.w	r7, ip, r2
   17b04:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   17b08:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17b0c:	dc04      	bgt.n	17b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b0e:	1f13      	subs	r3, r2, #4
   17b10:	d002      	beq.n	17b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b12:	4296      	cmp	r6, r2
   17b14:	461a      	mov	r2, r3
   17b16:	d1cc      	bne.n	17ab2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   17b18:	428b      	cmp	r3, r1
   17b1a:	d10b      	bne.n	17b34 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17b1c:	f64f 60a0 	movw	r0, #65184	; 0xfea0
   17b20:	f240 2248 	movw	r2, #584	; 0x248
   17b24:	f2c0 0001 	movt	r0, #1
   17b28:	f2c0 0202 	movt	r2, #2
   17b2c:	212b      	movs	r1, #43	; 0x2b
   17b2e:	f7fe ff7d 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17b32:	defe      	udf	#254	; 0xfe
   17b34:	18c5      	adds	r5, r0, r3
   17b36:	462e      	mov	r6, r5
   17b38:	f916 4b01 	ldrsb.w	r4, [r6], #1
   17b3c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17b40:	b2e2      	uxtb	r2, r4
   17b42:	dd02      	ble.n	17b4a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   17b44:	9207      	str	r2, [sp, #28]
   17b46:	2101      	movs	r1, #1
   17b48:	e04d      	b.n	17be6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17b4a:	4408      	add	r0, r1
   17b4c:	4286      	cmp	r6, r0
   17b4e:	d10b      	bne.n	17b68 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   17b50:	2500      	movs	r5, #0
   17b52:	4606      	mov	r6, r0
   17b54:	f002 011f 	and.w	r1, r2, #31
   17b58:	2adf      	cmp	r2, #223	; 0xdf
   17b5a:	d80d      	bhi.n	17b78 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   17b5c:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   17b60:	2880      	cmp	r0, #128	; 0x80
   17b62:	9007      	str	r0, [sp, #28]
   17b64:	d333      	bcc.n	17bce <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17b66:	e034      	b.n	17bd2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17b68:	7869      	ldrb	r1, [r5, #1]
   17b6a:	1cae      	adds	r6, r5, #2
   17b6c:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   17b70:	f002 011f 	and.w	r1, r2, #31
   17b74:	2adf      	cmp	r2, #223	; 0xdf
   17b76:	d9f1      	bls.n	17b5c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   17b78:	4286      	cmp	r6, r0
   17b7a:	d10d      	bne.n	17b98 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   17b7c:	2400      	movs	r4, #0
   17b7e:	4606      	mov	r6, r0
   17b80:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17b84:	2af0      	cmp	r2, #240	; 0xf0
   17b86:	d20f      	bcs.n	17ba8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   17b88:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   17b8c:	2880      	cmp	r0, #128	; 0x80
   17b8e:	9007      	str	r0, [sp, #28]
   17b90:	d31d      	bcc.n	17bce <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17b92:	e01e      	b.n	17bd2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17b94:	2500      	movs	r5, #0
   17b96:	e728      	b.n	179ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17b98:	f816 4b01 	ldrb.w	r4, [r6], #1
   17b9c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   17ba0:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17ba4:	2af0      	cmp	r2, #240	; 0xf0
   17ba6:	d3ef      	bcc.n	17b88 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   17ba8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   17bac:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   17bb0:	4286      	cmp	r6, r0
   17bb2:	bf1a      	itte	ne
   17bb4:	7830      	ldrbne	r0, [r6, #0]
   17bb6:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   17bba:	2000      	moveq	r0, #0
   17bbc:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   17bc0:	4408      	add	r0, r1
   17bc2:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17bc6:	d0a9      	beq.n	17b1c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17bc8:	2880      	cmp	r0, #128	; 0x80
   17bca:	9007      	str	r0, [sp, #28]
   17bcc:	d201      	bcs.n	17bd2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17bce:	2101      	movs	r1, #1
   17bd0:	e009      	b.n	17be6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17bd2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   17bd6:	d201      	bcs.n	17bdc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   17bd8:	2102      	movs	r1, #2
   17bda:	e004      	b.n	17be6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17bdc:	2104      	movs	r1, #4
   17bde:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17be2:	bf38      	it	cc
   17be4:	2103      	movcc	r1, #3
   17be6:	4419      	add	r1, r3
   17be8:	aa10      	add	r2, sp, #64	; 0x40
   17bea:	a808      	add	r0, sp, #32
   17bec:	e9cd 3108 	strd	r3, r1, [sp, #32]
   17bf0:	2105      	movs	r1, #5
   17bf2:	910f      	str	r1, [sp, #60]	; 0x3c
   17bf4:	920e      	str	r2, [sp, #56]	; 0x38
   17bf6:	2200      	movs	r2, #0
   17bf8:	920d      	str	r2, [sp, #52]	; 0x34
   17bfa:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   17bfe:	f240 2184 	movw	r1, #644	; 0x284
   17c02:	f2c0 0102 	movt	r1, #2
   17c06:	aa04      	add	r2, sp, #16
   17c08:	910a      	str	r1, [sp, #40]	; 0x28
   17c0a:	f648 019b 	movw	r1, #34971	; 0x889b
   17c0e:	f2c0 0101 	movt	r1, #1
   17c12:	9119      	str	r1, [sp, #100]	; 0x64
   17c14:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   17c18:	a902      	add	r1, sp, #8
   17c1a:	9116      	str	r1, [sp, #88]	; 0x58
   17c1c:	f646 0123 	movw	r1, #26659	; 0x6823
   17c20:	f2c0 0101 	movt	r1, #1
   17c24:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   17c28:	f247 70a5 	movw	r0, #30629	; 0x77a5
   17c2c:	f2c0 0001 	movt	r0, #1
   17c30:	f240 21ac 	movw	r1, #684	; 0x2ac
   17c34:	9013      	str	r0, [sp, #76]	; 0x4c
   17c36:	a807      	add	r0, sp, #28
   17c38:	9012      	str	r0, [sp, #72]	; 0x48
   17c3a:	f248 70ad 	movw	r0, #34733	; 0x87ad
   17c3e:	f2c0 0001 	movt	r0, #1
   17c42:	f2c0 0102 	movt	r1, #2
   17c46:	9011      	str	r0, [sp, #68]	; 0x44
   17c48:	a806      	add	r0, sp, #24
   17c4a:	9010      	str	r0, [sp, #64]	; 0x40
   17c4c:	a80a      	add	r0, sp, #40	; 0x28
   17c4e:	f7fe ff23 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17c52:	defe      	udf	#254	; 0xfe
   17c54:	2004      	movs	r0, #4
   17c56:	a910      	add	r1, sp, #64	; 0x40
   17c58:	900f      	str	r0, [sp, #60]	; 0x3c
   17c5a:	910e      	str	r1, [sp, #56]	; 0x38
   17c5c:	2100      	movs	r1, #0
   17c5e:	910d      	str	r1, [sp, #52]	; 0x34
   17c60:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17c64:	f240 2018 	movw	r0, #536	; 0x218
   17c68:	f2c0 0002 	movt	r0, #2
   17c6c:	a904      	add	r1, sp, #16
   17c6e:	900a      	str	r0, [sp, #40]	; 0x28
   17c70:	f648 009b 	movw	r0, #34971	; 0x889b
   17c74:	f2c0 0001 	movt	r0, #1
   17c78:	9017      	str	r0, [sp, #92]	; 0x5c
   17c7a:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   17c7e:	a802      	add	r0, sp, #8
   17c80:	9014      	str	r0, [sp, #80]	; 0x50
   17c82:	f248 70ad 	movw	r0, #34733	; 0x87ad
   17c86:	a901      	add	r1, sp, #4
   17c88:	f2c0 0001 	movt	r0, #1
   17c8c:	9013      	str	r0, [sp, #76]	; 0x4c
   17c8e:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   17c92:	f240 2138 	movw	r1, #568	; 0x238
   17c96:	4668      	mov	r0, sp
   17c98:	f2c0 0102 	movt	r1, #2
   17c9c:	9010      	str	r0, [sp, #64]	; 0x40
   17c9e:	a80a      	add	r0, sp, #40	; 0x28
   17ca0:	f7fe fefa 	bl	16a98 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17ca4:	defe      	udf	#254	; 0xfe

00017ca6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   17ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17caa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17cae:	d270      	bcs.n	17d92 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   17cb0:	f240 2ecc 	movw	lr, #716	; 0x2cc
   17cb4:	f240 381e 	movw	r8, #798	; 0x31e
   17cb8:	fa1f f980 	uxth.w	r9, r0
   17cbc:	f2c0 0e02 	movt	lr, #2
   17cc0:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17cc4:	f04f 0a00 	mov.w	sl, #0
   17cc8:	f2c0 0802 	movt	r8, #2
   17ccc:	4675      	mov	r5, lr
   17cce:	786e      	ldrb	r6, [r5, #1]
   17cd0:	4652      	mov	r2, sl
   17cd2:	782b      	ldrb	r3, [r5, #0]
   17cd4:	3502      	adds	r5, #2
   17cd6:	44b2      	add	sl, r6
   17cd8:	4563      	cmp	r3, ip
   17cda:	d129      	bne.n	17d30 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   17cdc:	4592      	cmp	sl, r2
   17cde:	f0c0 8112 	bcc.w	17f06 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17ce2:	ea4f 035a 	mov.w	r3, sl, lsr #1
   17ce6:	2b92      	cmp	r3, #146	; 0x92
   17ce8:	f200 8112 	bhi.w	17f10 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   17cec:	eb08 0302 	add.w	r3, r8, r2
   17cf0:	199a      	adds	r2, r3, r6
   17cf2:	b31e      	cbz	r6, 17d3c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17cf4:	461f      	mov	r7, r3
   17cf6:	b2c4      	uxtb	r4, r0
   17cf8:	f817 1b01 	ldrb.w	r1, [r7], #1
   17cfc:	42a1      	cmp	r1, r4
   17cfe:	f000 80b6 	beq.w	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d02:	4297      	cmp	r7, r2
   17d04:	d01a      	beq.n	17d3c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17d06:	7859      	ldrb	r1, [r3, #1]
   17d08:	42a1      	cmp	r1, r4
   17d0a:	f000 80b0 	beq.w	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d0e:	1c99      	adds	r1, r3, #2
   17d10:	4291      	cmp	r1, r2
   17d12:	d013      	beq.n	17d3c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17d14:	7899      	ldrb	r1, [r3, #2]
   17d16:	42a1      	cmp	r1, r4
   17d18:	f000 80a9 	beq.w	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d1c:	1cd9      	adds	r1, r3, #3
   17d1e:	4291      	cmp	r1, r2
   17d20:	d00c      	beq.n	17d3c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17d22:	1d19      	adds	r1, r3, #4
   17d24:	78db      	ldrb	r3, [r3, #3]
   17d26:	3e04      	subs	r6, #4
   17d28:	42a3      	cmp	r3, r4
   17d2a:	460b      	mov	r3, r1
   17d2c:	d1e1      	bne.n	17cf2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   17d2e:	e09e      	b.n	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d30:	d808      	bhi.n	17d44 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17d32:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   17d36:	4295      	cmp	r5, r2
   17d38:	d1c9      	bne.n	17cce <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17d3a:	e003      	b.n	17d44 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17d3c:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   17d40:	428d      	cmp	r5, r1
   17d42:	d1c4      	bne.n	17cce <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17d44:	f240 4543 	movw	r5, #1091	; 0x443
   17d48:	2101      	movs	r1, #1
   17d4a:	f2c0 0502 	movt	r5, #2
   17d4e:	4628      	mov	r0, r5
   17d50:	4602      	mov	r2, r0
   17d52:	f812 7b01 	ldrb.w	r7, [r2], #1
   17d56:	b27e      	sxtb	r6, r7
   17d58:	2e00      	cmp	r6, #0
   17d5a:	d404      	bmi.n	17d66 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   17d5c:	4610      	mov	r0, r2
   17d5e:	ebb9 0907 	subs.w	r9, r9, r7
   17d62:	d50f      	bpl.n	17d84 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   17d64:	e0bd      	b.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17d66:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   17d6a:	429a      	cmp	r2, r3
   17d6c:	f000 80db 	beq.w	17f26 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17d70:	7842      	ldrb	r2, [r0, #1]
   17d72:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17d76:	3002      	adds	r0, #2
   17d78:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17d7c:	ebb9 0907 	subs.w	r9, r9, r7
   17d80:	f100 80af 	bmi.w	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17d84:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   17d88:	f081 0101 	eor.w	r1, r1, #1
   17d8c:	4290      	cmp	r0, r2
   17d8e:	d1df      	bne.n	17d50 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   17d90:	e0a7      	b.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17d92:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   17d96:	d26f      	bcs.n	17e78 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   17d98:	f240 5e7d 	movw	lr, #1405	; 0x57d
   17d9c:	f240 58c3 	movw	r8, #1475	; 0x5c3
   17da0:	fa1f f980 	uxth.w	r9, r0
   17da4:	f2c0 0e02 	movt	lr, #2
   17da8:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17dac:	f04f 0a00 	mov.w	sl, #0
   17db0:	f2c0 0802 	movt	r8, #2
   17db4:	4675      	mov	r5, lr
   17db6:	786e      	ldrb	r6, [r5, #1]
   17db8:	4652      	mov	r2, sl
   17dba:	782b      	ldrb	r3, [r5, #0]
   17dbc:	3502      	adds	r5, #2
   17dbe:	44b2      	add	sl, r6
   17dc0:	4563      	cmp	r3, ip
   17dc2:	d125      	bne.n	17e10 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   17dc4:	4592      	cmp	sl, r2
   17dc6:	f0c0 809e 	bcc.w	17f06 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17dca:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   17dce:	f200 80a5 	bhi.w	17f1c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   17dd2:	eb08 0302 	add.w	r3, r8, r2
   17dd6:	199a      	adds	r2, r3, r6
   17dd8:	b306      	cbz	r6, 17e1c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17dda:	461f      	mov	r7, r3
   17ddc:	b2c4      	uxtb	r4, r0
   17dde:	f817 1b01 	ldrb.w	r1, [r7], #1
   17de2:	42a1      	cmp	r1, r4
   17de4:	d043      	beq.n	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17de6:	4297      	cmp	r7, r2
   17de8:	d018      	beq.n	17e1c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17dea:	7859      	ldrb	r1, [r3, #1]
   17dec:	42a1      	cmp	r1, r4
   17dee:	d03e      	beq.n	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17df0:	1c99      	adds	r1, r3, #2
   17df2:	4291      	cmp	r1, r2
   17df4:	d012      	beq.n	17e1c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17df6:	7899      	ldrb	r1, [r3, #2]
   17df8:	42a1      	cmp	r1, r4
   17dfa:	d038      	beq.n	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17dfc:	1cd9      	adds	r1, r3, #3
   17dfe:	4291      	cmp	r1, r2
   17e00:	d00c      	beq.n	17e1c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17e02:	1d19      	adds	r1, r3, #4
   17e04:	78db      	ldrb	r3, [r3, #3]
   17e06:	3e04      	subs	r6, #4
   17e08:	42a3      	cmp	r3, r4
   17e0a:	460b      	mov	r3, r1
   17e0c:	d1e4      	bne.n	17dd8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   17e0e:	e02e      	b.n	17e6e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e10:	d808      	bhi.n	17e24 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17e12:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   17e16:	4295      	cmp	r5, r2
   17e18:	d1cd      	bne.n	17db6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17e1a:	e003      	b.n	17e24 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17e1c:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   17e20:	428d      	cmp	r5, r1
   17e22:	d1c8      	bne.n	17db6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17e24:	f240 6569 	movw	r5, #1641	; 0x669
   17e28:	2101      	movs	r1, #1
   17e2a:	f2c0 0502 	movt	r5, #2
   17e2e:	4628      	mov	r0, r5
   17e30:	4602      	mov	r2, r0
   17e32:	f812 7b01 	ldrb.w	r7, [r2], #1
   17e36:	b27e      	sxtb	r6, r7
   17e38:	2e00      	cmp	r6, #0
   17e3a:	d40a      	bmi.n	17e52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   17e3c:	4610      	mov	r0, r2
   17e3e:	ebb9 0907 	subs.w	r9, r9, r7
   17e42:	d44e      	bmi.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e44:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   17e48:	f081 0101 	eor.w	r1, r1, #1
   17e4c:	4290      	cmp	r0, r2
   17e4e:	d1ef      	bne.n	17e30 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   17e50:	e047      	b.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e52:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   17e56:	429a      	cmp	r2, r3
   17e58:	d065      	beq.n	17f26 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17e5a:	7842      	ldrb	r2, [r0, #1]
   17e5c:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17e60:	3002      	adds	r0, #2
   17e62:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17e66:	ebb9 0907 	subs.w	r9, r9, r7
   17e6a:	d5eb      	bpl.n	17e44 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   17e6c:	e039      	b.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e6e:	2100      	movs	r1, #0
   17e70:	f001 0001 	and.w	r0, r1, #1
   17e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e78:	f240 51e2 	movw	r1, #1506	; 0x5e2
   17e7c:	f240 63e2 	movw	r3, #1762	; 0x6e2
   17e80:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   17e84:	1842      	adds	r2, r0, r1
   17e86:	f2c0 030b 	movt	r3, #11
   17e8a:	2100      	movs	r1, #0
   17e8c:	429a      	cmp	r2, r3
   17e8e:	d328      	bcc.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e90:	f241 421f 	movw	r2, #5151	; 0x141f
   17e94:	f640 431f 	movw	r3, #3103	; 0xc1f
   17e98:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17e9c:	4402      	add	r2, r0
   17e9e:	429a      	cmp	r2, r3
   17ea0:	bf21      	itttt	cs
   17ea2:	f243 125e 	movwcs	r2, #12638	; 0x315e
   17ea6:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17eaa:	4402      	addcs	r2, r0
   17eac:	2a0e      	cmpcs	r2, #14
   17eae:	d318      	bcc.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17eb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   17eb4:	f64b 031e 	movw	r3, #47134	; 0xb81e
   17eb8:	f2c0 021f 	movt	r2, #31
   17ebc:	f2c0 0302 	movt	r3, #2
   17ec0:	4002      	ands	r2, r0
   17ec2:	429a      	cmp	r2, r3
   17ec4:	d00d      	beq.n	17ee2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17ec6:	f645 1229 	movw	r2, #22825	; 0x5929
   17eca:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17ece:	4402      	add	r2, r0
   17ed0:	2a29      	cmp	r2, #41	; 0x29
   17ed2:	bf21      	itttt	cs
   17ed4:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   17ed8:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17edc:	4402      	addcs	r2, r0
   17ede:	2a0b      	cmpcs	r2, #11
   17ee0:	d203      	bcs.n	17eea <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   17ee2:	f001 0001 	and.w	r0, r1, #1
   17ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17eea:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   17eee:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   17ef2:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   17ef6:	2000      	movs	r0, #0
   17ef8:	f2c0 0202 	movt	r2, #2
   17efc:	4291      	cmp	r1, r2
   17efe:	bf88      	it	hi
   17f00:	2001      	movhi	r0, #1
   17f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17f06:	4610      	mov	r0, r2
   17f08:	4651      	mov	r1, sl
   17f0a:	f7ff fd04 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17f0e:	defe      	udf	#254	; 0xfe
   17f10:	4650      	mov	r0, sl
   17f12:	f240 1125 	movw	r1, #293	; 0x125
   17f16:	f7ff fcdc 	bl	178d2 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17f1a:	defe      	udf	#254	; 0xfe
   17f1c:	4650      	mov	r0, sl
   17f1e:	21a6      	movs	r1, #166	; 0xa6
   17f20:	f7ff fcd7 	bl	178d2 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17f24:	defe      	udf	#254	; 0xfe
   17f26:	f64f 60a0 	movw	r0, #65184	; 0xfea0
   17f2a:	f240 22bc 	movw	r2, #700	; 0x2bc
   17f2e:	f2c0 0001 	movt	r0, #1
   17f32:	f2c0 0202 	movt	r2, #2
   17f36:	212b      	movs	r1, #43	; 0x2b
   17f38:	f7fe fd78 	bl	16a2c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17f3c:	defe      	udf	#254	; 0xfe

00017f3e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   17f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f42:	b0a3      	sub	sp, #140	; 0x8c
   17f44:	468c      	mov	ip, r1
   17f46:	6809      	ldr	r1, [r1, #0]
   17f48:	06ca      	lsls	r2, r1, #27
   17f4a:	d44a      	bmi.n	17fe2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   17f4c:	6804      	ldr	r4, [r0, #0]
   17f4e:	0688      	lsls	r0, r1, #26
   17f50:	f100 8089 	bmi.w	18066 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   17f54:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17f58:	f64f 723f 	movw	r2, #65343	; 0xff3f
   17f5c:	f242 7810 	movw	r8, #10000	; 0x2710
   17f60:	4544      	cmp	r4, r8
   17f62:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17f66:	f2c0 0201 	movt	r2, #1
   17f6a:	f0c0 80e3 	bcc.w	18134 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   17f6e:	f241 7959 	movw	r9, #5977	; 0x1759
   17f72:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17f76:	f10d 0b0c 	add.w	fp, sp, #12
   17f7a:	2300      	movs	r3, #0
   17f7c:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17f80:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17f84:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17f88:	fba4 0109 	umull	r0, r1, r4, r9
   17f8c:	42bc      	cmp	r4, r7
   17f8e:	ea4f 3051 	mov.w	r0, r1, lsr #13
   17f92:	fb00 4118 	mls	r1, r0, r8, r4
   17f96:	4604      	mov	r4, r0
   17f98:	b28d      	uxth	r5, r1
   17f9a:	fba5 560e 	umull	r5, r6, r5, lr
   17f9e:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17fa2:	eb0b 0603 	add.w	r6, fp, r3
   17fa6:	fb05 111a 	mls	r1, r5, sl, r1
   17faa:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   17fae:	f1a3 0304 	sub.w	r3, r3, #4
   17fb2:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17fb6:	b289      	uxth	r1, r1
   17fb8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   17fbc:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   17fc0:	d8e2      	bhi.n	17f88 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   17fc2:	f103 0127 	add.w	r1, r3, #39	; 0x27
   17fc6:	4604      	mov	r4, r0
   17fc8:	2c63      	cmp	r4, #99	; 0x63
   17fca:	f300 80b7 	bgt.w	1813c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   17fce:	4623      	mov	r3, r4
   17fd0:	2b0a      	cmp	r3, #10
   17fd2:	f2c0 80c3 	blt.w	1815c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   17fd6:	1e88      	subs	r0, r1, #2
   17fd8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   17fdc:	aa03      	add	r2, sp, #12
   17fde:	5211      	strh	r1, [r2, r0]
   17fe0:	e0c1      	b.n	18166 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   17fe2:	6800      	ldr	r0, [r0, #0]
   17fe4:	f10d 0e0c 	add.w	lr, sp, #12
   17fe8:	2381      	movs	r3, #129	; 0x81
   17fea:	2100      	movs	r1, #0
   17fec:	f000 020f 	and.w	r2, r0, #15
   17ff0:	f102 0457 	add.w	r4, r2, #87	; 0x57
   17ff4:	2a0a      	cmp	r2, #10
   17ff6:	bf38      	it	cc
   17ff8:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   17ffc:	eb0e 0203 	add.w	r2, lr, r3
   18000:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18004:	f802 4c02 	strb.w	r4, [r2, #-2]
   18008:	d071      	beq.n	180ee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   1800a:	0904      	lsrs	r4, r0, #4
   1800c:	f004 040f 	and.w	r4, r4, #15
   18010:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18014:	2c0a      	cmp	r4, #10
   18016:	bf38      	it	cc
   18018:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1801c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18020:	f802 5c03 	strb.w	r5, [r2, #-3]
   18024:	d079      	beq.n	1811a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18026:	0a04      	lsrs	r4, r0, #8
   18028:	f004 040f 	and.w	r4, r4, #15
   1802c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18030:	2c0a      	cmp	r4, #10
   18032:	bf38      	it	cc
   18034:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18038:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1803c:	f802 5c04 	strb.w	r5, [r2, #-4]
   18040:	d073      	beq.n	1812a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18042:	0b04      	lsrs	r4, r0, #12
   18044:	3b04      	subs	r3, #4
   18046:	f004 040f 	and.w	r4, r4, #15
   1804a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1804e:	2c0a      	cmp	r4, #10
   18050:	bf38      	it	cc
   18052:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18056:	f802 5c05 	strb.w	r5, [r2, #-5]
   1805a:	0c02      	lsrs	r2, r0, #16
   1805c:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18060:	4610      	mov	r0, r2
   18062:	d1c3      	bne.n	17fec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   18064:	e03f      	b.n	180e6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   18066:	f10d 0e0c 	add.w	lr, sp, #12
   1806a:	2381      	movs	r3, #129	; 0x81
   1806c:	2100      	movs	r1, #0
   1806e:	f004 000f 	and.w	r0, r4, #15
   18072:	eb0e 0203 	add.w	r2, lr, r3
   18076:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1807a:	280a      	cmp	r0, #10
   1807c:	bf38      	it	cc
   1807e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18082:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   18086:	f802 5c02 	strb.w	r5, [r2, #-2]
   1808a:	d030      	beq.n	180ee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   1808c:	0920      	lsrs	r0, r4, #4
   1808e:	f000 000f 	and.w	r0, r0, #15
   18092:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18096:	280a      	cmp	r0, #10
   18098:	bf38      	it	cc
   1809a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1809e:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   180a2:	f802 5c03 	strb.w	r5, [r2, #-3]
   180a6:	d038      	beq.n	1811a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   180a8:	0a20      	lsrs	r0, r4, #8
   180aa:	f000 000f 	and.w	r0, r0, #15
   180ae:	f100 0537 	add.w	r5, r0, #55	; 0x37
   180b2:	280a      	cmp	r0, #10
   180b4:	bf38      	it	cc
   180b6:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   180ba:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   180be:	f802 5c04 	strb.w	r5, [r2, #-4]
   180c2:	d032      	beq.n	1812a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   180c4:	0b20      	lsrs	r0, r4, #12
   180c6:	3b04      	subs	r3, #4
   180c8:	f000 000f 	and.w	r0, r0, #15
   180cc:	f100 0537 	add.w	r5, r0, #55	; 0x37
   180d0:	280a      	cmp	r0, #10
   180d2:	bf38      	it	cc
   180d4:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   180d8:	0c20      	lsrs	r0, r4, #16
   180da:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   180de:	4604      	mov	r4, r0
   180e0:	f802 5c05 	strb.w	r5, [r2, #-5]
   180e4:	d1c3      	bne.n	1806e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   180e6:	1e58      	subs	r0, r3, #1
   180e8:	2881      	cmp	r0, #129	; 0x81
   180ea:	d305      	bcc.n	180f8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   180ec:	e019      	b.n	18122 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   180ee:	1e59      	subs	r1, r3, #1
   180f0:	1e98      	subs	r0, r3, #2
   180f2:	460b      	mov	r3, r1
   180f4:	2881      	cmp	r0, #129	; 0x81
   180f6:	d214      	bcs.n	18122 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   180f8:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   180fc:	f64f 723d 	movw	r2, #65341	; 0xff3d
   18100:	4470      	add	r0, lr
   18102:	f2c0 0201 	movt	r2, #1
   18106:	e9cd 0100 	strd	r0, r1, [sp]
   1810a:	4660      	mov	r0, ip
   1810c:	2101      	movs	r1, #1
   1810e:	2302      	movs	r3, #2
   18110:	f7ff f864 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18114:	b023      	add	sp, #140	; 0x8c
   18116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1811a:	1ed8      	subs	r0, r3, #3
   1811c:	3b02      	subs	r3, #2
   1811e:	2881      	cmp	r0, #129	; 0x81
   18120:	d3ea      	bcc.n	180f8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18122:	2180      	movs	r1, #128	; 0x80
   18124:	f7ff fbf7 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18128:	defe      	udf	#254	; 0xfe
   1812a:	1f18      	subs	r0, r3, #4
   1812c:	3b03      	subs	r3, #3
   1812e:	2881      	cmp	r0, #129	; 0x81
   18130:	d3e2      	bcc.n	180f8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18132:	e7f6      	b.n	18122 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18134:	2127      	movs	r1, #39	; 0x27
   18136:	2c63      	cmp	r4, #99	; 0x63
   18138:	f77f af49 	ble.w	17fce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   1813c:	b2a0      	uxth	r0, r4
   1813e:	3902      	subs	r1, #2
   18140:	fba0 030e 	umull	r0, r3, r0, lr
   18144:	af03      	add	r7, sp, #12
   18146:	2064      	movs	r0, #100	; 0x64
   18148:	095b      	lsrs	r3, r3, #5
   1814a:	fb03 4010 	mls	r0, r3, r0, r4
   1814e:	b280      	uxth	r0, r0
   18150:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   18154:	5278      	strh	r0, [r7, r1]
   18156:	2b0a      	cmp	r3, #10
   18158:	f6bf af3d 	bge.w	17fd6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   1815c:	1e48      	subs	r0, r1, #1
   1815e:	aa03      	add	r2, sp, #12
   18160:	f103 0130 	add.w	r1, r3, #48	; 0x30
   18164:	5411      	strb	r1, [r2, r0]
   18166:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1816a:	aa03      	add	r2, sp, #12
   1816c:	4410      	add	r0, r2
   1816e:	f64f 5204 	movw	r2, #64772	; 0xfd04
   18172:	e9cd 0100 	strd	r0, r1, [sp]
   18176:	f2c0 0201 	movt	r2, #1
   1817a:	4660      	mov	r0, ip
   1817c:	2101      	movs	r1, #1
   1817e:	2300      	movs	r3, #0
   18180:	f7ff f82c 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18184:	b023      	add	sp, #140	; 0x8c
   18186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001818a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   1818a:	b580      	push	{r7, lr}
   1818c:	b0a2      	sub	sp, #136	; 0x88
   1818e:	7802      	ldrb	r2, [r0, #0]
   18190:	468c      	mov	ip, r1
   18192:	f002 030f 	and.w	r3, r2, #15
   18196:	f103 0057 	add.w	r0, r3, #87	; 0x57
   1819a:	2b0a      	cmp	r3, #10
   1819c:	bf38      	it	cc
   1819e:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   181a2:	2300      	movs	r3, #0
   181a4:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   181a8:	d00b      	beq.n	181c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   181aa:	0913      	lsrs	r3, r2, #4
   181ac:	f103 0157 	add.w	r1, r3, #87	; 0x57
   181b0:	2aa0      	cmp	r2, #160	; 0xa0
   181b2:	bf38      	it	cc
   181b4:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   181b8:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   181bc:	227e      	movs	r2, #126	; 0x7e
   181be:	2302      	movs	r3, #2
   181c0:	e001      	b.n	181c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   181c2:	227f      	movs	r2, #127	; 0x7f
   181c4:	2301      	movs	r3, #1
   181c6:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   181ca:	a802      	add	r0, sp, #8
   181cc:	4410      	add	r0, r2
   181ce:	f64f 723d 	movw	r2, #65341	; 0xff3d
   181d2:	e9cd 0300 	strd	r0, r3, [sp]
   181d6:	f2c0 0201 	movt	r2, #1
   181da:	4660      	mov	r0, ip
   181dc:	2101      	movs	r1, #1
   181de:	2302      	movs	r3, #2
   181e0:	f7fe fffc 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   181e4:	b022      	add	sp, #136	; 0x88
   181e6:	bd80      	pop	{r7, pc}

000181e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   181e8:	b580      	push	{r7, lr}
   181ea:	b0a2      	sub	sp, #136	; 0x88
   181ec:	7802      	ldrb	r2, [r0, #0]
   181ee:	468c      	mov	ip, r1
   181f0:	f002 030f 	and.w	r3, r2, #15
   181f4:	f103 0037 	add.w	r0, r3, #55	; 0x37
   181f8:	2b0a      	cmp	r3, #10
   181fa:	bf38      	it	cc
   181fc:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   18200:	2300      	movs	r3, #0
   18202:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   18206:	d00b      	beq.n	18220 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   18208:	0913      	lsrs	r3, r2, #4
   1820a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   1820e:	2aa0      	cmp	r2, #160	; 0xa0
   18210:	bf38      	it	cc
   18212:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18216:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1821a:	227e      	movs	r2, #126	; 0x7e
   1821c:	2302      	movs	r3, #2
   1821e:	e001      	b.n	18224 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   18220:	227f      	movs	r2, #127	; 0x7f
   18222:	2301      	movs	r3, #1
   18224:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   18228:	a802      	add	r0, sp, #8
   1822a:	4410      	add	r0, r2
   1822c:	f64f 723d 	movw	r2, #65341	; 0xff3d
   18230:	e9cd 0300 	strd	r0, r3, [sp]
   18234:	f2c0 0201 	movt	r2, #1
   18238:	4660      	mov	r0, ip
   1823a:	2101      	movs	r1, #1
   1823c:	2302      	movs	r3, #2
   1823e:	f7fe ffcd 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18242:	b022      	add	sp, #136	; 0x88
   18244:	bd80      	pop	{r7, pc}

00018246 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   18246:	b580      	push	{r7, lr}
   18248:	b0a2      	sub	sp, #136	; 0x88
   1824a:	8800      	ldrh	r0, [r0, #0]
   1824c:	468c      	mov	ip, r1
   1824e:	f000 020f 	and.w	r2, r0, #15
   18252:	f102 0357 	add.w	r3, r2, #87	; 0x57
   18256:	2a0a      	cmp	r2, #10
   18258:	bf38      	it	cc
   1825a:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   1825e:	2200      	movs	r2, #0
   18260:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   18264:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   18268:	d02a      	beq.n	182c0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   1826a:	0903      	lsrs	r3, r0, #4
   1826c:	f003 030f 	and.w	r3, r3, #15
   18270:	f103 0157 	add.w	r1, r3, #87	; 0x57
   18274:	2b0a      	cmp	r3, #10
   18276:	bf38      	it	cc
   18278:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1827c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   18280:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18284:	d031      	beq.n	182ea <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   18286:	0a01      	lsrs	r1, r0, #8
   18288:	f001 010f 	and.w	r1, r1, #15
   1828c:	f101 0257 	add.w	r2, r1, #87	; 0x57
   18290:	290a      	cmp	r1, #10
   18292:	bf38      	it	cc
   18294:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   18298:	2100      	movs	r1, #0
   1829a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1829e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   182a2:	d027      	beq.n	182f4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   182a4:	0b00      	lsrs	r0, r0, #12
   182a6:	f100 0157 	add.w	r1, r0, #87	; 0x57
   182aa:	280a      	cmp	r0, #10
   182ac:	bf38      	it	cc
   182ae:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   182b2:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   182b6:	227d      	movs	r2, #125	; 0x7d
   182b8:	207c      	movs	r0, #124	; 0x7c
   182ba:	2881      	cmp	r0, #129	; 0x81
   182bc:	d304      	bcc.n	182c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   182be:	e01d      	b.n	182fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   182c0:	2280      	movs	r2, #128	; 0x80
   182c2:	207f      	movs	r0, #127	; 0x7f
   182c4:	2881      	cmp	r0, #129	; 0x81
   182c6:	d219      	bcs.n	182fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   182c8:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   182cc:	ab02      	add	r3, sp, #8
   182ce:	4418      	add	r0, r3
   182d0:	2101      	movs	r1, #1
   182d2:	e9cd 0200 	strd	r0, r2, [sp]
   182d6:	f64f 723d 	movw	r2, #65341	; 0xff3d
   182da:	f2c0 0201 	movt	r2, #1
   182de:	4660      	mov	r0, ip
   182e0:	2302      	movs	r3, #2
   182e2:	f7fe ff7b 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   182e6:	b022      	add	sp, #136	; 0x88
   182e8:	bd80      	pop	{r7, pc}
   182ea:	207e      	movs	r0, #126	; 0x7e
   182ec:	227f      	movs	r2, #127	; 0x7f
   182ee:	2881      	cmp	r0, #129	; 0x81
   182f0:	d3ea      	bcc.n	182c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   182f2:	e003      	b.n	182fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   182f4:	207d      	movs	r0, #125	; 0x7d
   182f6:	227e      	movs	r2, #126	; 0x7e
   182f8:	2881      	cmp	r0, #129	; 0x81
   182fa:	d3e5      	bcc.n	182c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   182fc:	2180      	movs	r1, #128	; 0x80
   182fe:	f7ff fb0a 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18302:	defe      	udf	#254	; 0xfe

00018304 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   18304:	b580      	push	{r7, lr}
   18306:	b0a2      	sub	sp, #136	; 0x88
   18308:	8800      	ldrh	r0, [r0, #0]
   1830a:	468c      	mov	ip, r1
   1830c:	f000 020f 	and.w	r2, r0, #15
   18310:	f102 0337 	add.w	r3, r2, #55	; 0x37
   18314:	2a0a      	cmp	r2, #10
   18316:	bf38      	it	cc
   18318:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   1831c:	2200      	movs	r2, #0
   1831e:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   18322:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   18326:	d02a      	beq.n	1837e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   18328:	0903      	lsrs	r3, r0, #4
   1832a:	f003 030f 	and.w	r3, r3, #15
   1832e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   18332:	2b0a      	cmp	r3, #10
   18334:	bf38      	it	cc
   18336:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1833a:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1833e:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18342:	d031      	beq.n	183a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   18344:	0a01      	lsrs	r1, r0, #8
   18346:	f001 010f 	and.w	r1, r1, #15
   1834a:	f101 0237 	add.w	r2, r1, #55	; 0x37
   1834e:	290a      	cmp	r1, #10
   18350:	bf38      	it	cc
   18352:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   18356:	2100      	movs	r1, #0
   18358:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1835c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   18360:	d027      	beq.n	183b2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   18362:	0b00      	lsrs	r0, r0, #12
   18364:	f100 0137 	add.w	r1, r0, #55	; 0x37
   18368:	280a      	cmp	r0, #10
   1836a:	bf38      	it	cc
   1836c:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18370:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   18374:	227d      	movs	r2, #125	; 0x7d
   18376:	207c      	movs	r0, #124	; 0x7c
   18378:	2881      	cmp	r0, #129	; 0x81
   1837a:	d304      	bcc.n	18386 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   1837c:	e01d      	b.n	183ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1837e:	2280      	movs	r2, #128	; 0x80
   18380:	207f      	movs	r0, #127	; 0x7f
   18382:	2881      	cmp	r0, #129	; 0x81
   18384:	d219      	bcs.n	183ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   18386:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   1838a:	ab02      	add	r3, sp, #8
   1838c:	4418      	add	r0, r3
   1838e:	2101      	movs	r1, #1
   18390:	e9cd 0200 	strd	r0, r2, [sp]
   18394:	f64f 723d 	movw	r2, #65341	; 0xff3d
   18398:	f2c0 0201 	movt	r2, #1
   1839c:	4660      	mov	r0, ip
   1839e:	2302      	movs	r3, #2
   183a0:	f7fe ff1c 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   183a4:	b022      	add	sp, #136	; 0x88
   183a6:	bd80      	pop	{r7, pc}
   183a8:	207e      	movs	r0, #126	; 0x7e
   183aa:	227f      	movs	r2, #127	; 0x7f
   183ac:	2881      	cmp	r0, #129	; 0x81
   183ae:	d3ea      	bcc.n	18386 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   183b0:	e003      	b.n	183ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   183b2:	207d      	movs	r0, #125	; 0x7d
   183b4:	227e      	movs	r2, #126	; 0x7e
   183b6:	2881      	cmp	r0, #129	; 0x81
   183b8:	d3e5      	bcc.n	18386 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   183ba:	2180      	movs	r1, #128	; 0x80
   183bc:	f7ff faab 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   183c0:	defe      	udf	#254	; 0xfe

000183c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   183c2:	b5b0      	push	{r4, r5, r7, lr}
   183c4:	b0a2      	sub	sp, #136	; 0x88
   183c6:	6800      	ldr	r0, [r0, #0]
   183c8:	f10d 0e08 	add.w	lr, sp, #8
   183cc:	468c      	mov	ip, r1
   183ce:	2381      	movs	r3, #129	; 0x81
   183d0:	2100      	movs	r1, #0
   183d2:	f000 020f 	and.w	r2, r0, #15
   183d6:	f102 0457 	add.w	r4, r2, #87	; 0x57
   183da:	2a0a      	cmp	r2, #10
   183dc:	bf38      	it	cc
   183de:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   183e2:	eb0e 0203 	add.w	r2, lr, r3
   183e6:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   183ea:	f802 4c02 	strb.w	r4, [r2, #-2]
   183ee:	d030      	beq.n	18452 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   183f0:	0904      	lsrs	r4, r0, #4
   183f2:	f004 040f 	and.w	r4, r4, #15
   183f6:	f104 0557 	add.w	r5, r4, #87	; 0x57
   183fa:	2c0a      	cmp	r4, #10
   183fc:	bf38      	it	cc
   183fe:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18402:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18406:	f802 5c03 	strb.w	r5, [r2, #-3]
   1840a:	d028      	beq.n	1845e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   1840c:	0a04      	lsrs	r4, r0, #8
   1840e:	f004 040f 	and.w	r4, r4, #15
   18412:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18416:	2c0a      	cmp	r4, #10
   18418:	bf38      	it	cc
   1841a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1841e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18422:	f802 5c04 	strb.w	r5, [r2, #-4]
   18426:	d01f      	beq.n	18468 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   18428:	0b04      	lsrs	r4, r0, #12
   1842a:	3b04      	subs	r3, #4
   1842c:	f004 040f 	and.w	r4, r4, #15
   18430:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18434:	2c0a      	cmp	r4, #10
   18436:	bf38      	it	cc
   18438:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1843c:	f802 5c05 	strb.w	r5, [r2, #-5]
   18440:	0c02      	lsrs	r2, r0, #16
   18442:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18446:	4610      	mov	r0, r2
   18448:	d1c3      	bne.n	183d2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   1844a:	1e58      	subs	r0, r3, #1
   1844c:	2881      	cmp	r0, #129	; 0x81
   1844e:	d30f      	bcc.n	18470 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   18450:	e01e      	b.n	18490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18452:	1e59      	subs	r1, r3, #1
   18454:	1e98      	subs	r0, r3, #2
   18456:	460b      	mov	r3, r1
   18458:	2881      	cmp	r0, #129	; 0x81
   1845a:	d309      	bcc.n	18470 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1845c:	e018      	b.n	18490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1845e:	1ed8      	subs	r0, r3, #3
   18460:	3b02      	subs	r3, #2
   18462:	2881      	cmp	r0, #129	; 0x81
   18464:	d304      	bcc.n	18470 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   18466:	e013      	b.n	18490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18468:	1f18      	subs	r0, r3, #4
   1846a:	3b03      	subs	r3, #3
   1846c:	2881      	cmp	r0, #129	; 0x81
   1846e:	d20f      	bcs.n	18490 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18470:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18474:	f64f 723d 	movw	r2, #65341	; 0xff3d
   18478:	4470      	add	r0, lr
   1847a:	f2c0 0201 	movt	r2, #1
   1847e:	e9cd 0100 	strd	r0, r1, [sp]
   18482:	4660      	mov	r0, ip
   18484:	2101      	movs	r1, #1
   18486:	2302      	movs	r3, #2
   18488:	f7fe fea8 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1848c:	b022      	add	sp, #136	; 0x88
   1848e:	bdb0      	pop	{r4, r5, r7, pc}
   18490:	2180      	movs	r1, #128	; 0x80
   18492:	f7ff fa40 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18496:	defe      	udf	#254	; 0xfe

00018498 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   18498:	b5b0      	push	{r4, r5, r7, lr}
   1849a:	b0a2      	sub	sp, #136	; 0x88
   1849c:	6800      	ldr	r0, [r0, #0]
   1849e:	f10d 0e08 	add.w	lr, sp, #8
   184a2:	468c      	mov	ip, r1
   184a4:	2381      	movs	r3, #129	; 0x81
   184a6:	2100      	movs	r1, #0
   184a8:	f000 020f 	and.w	r2, r0, #15
   184ac:	f102 0437 	add.w	r4, r2, #55	; 0x37
   184b0:	2a0a      	cmp	r2, #10
   184b2:	bf38      	it	cc
   184b4:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   184b8:	eb0e 0203 	add.w	r2, lr, r3
   184bc:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   184c0:	f802 4c02 	strb.w	r4, [r2, #-2]
   184c4:	d030      	beq.n	18528 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   184c6:	0904      	lsrs	r4, r0, #4
   184c8:	f004 040f 	and.w	r4, r4, #15
   184cc:	f104 0537 	add.w	r5, r4, #55	; 0x37
   184d0:	2c0a      	cmp	r4, #10
   184d2:	bf38      	it	cc
   184d4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   184d8:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   184dc:	f802 5c03 	strb.w	r5, [r2, #-3]
   184e0:	d028      	beq.n	18534 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   184e2:	0a04      	lsrs	r4, r0, #8
   184e4:	f004 040f 	and.w	r4, r4, #15
   184e8:	f104 0537 	add.w	r5, r4, #55	; 0x37
   184ec:	2c0a      	cmp	r4, #10
   184ee:	bf38      	it	cc
   184f0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   184f4:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   184f8:	f802 5c04 	strb.w	r5, [r2, #-4]
   184fc:	d01f      	beq.n	1853e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   184fe:	0b04      	lsrs	r4, r0, #12
   18500:	3b04      	subs	r3, #4
   18502:	f004 040f 	and.w	r4, r4, #15
   18506:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1850a:	2c0a      	cmp	r4, #10
   1850c:	bf38      	it	cc
   1850e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18512:	f802 5c05 	strb.w	r5, [r2, #-5]
   18516:	0c02      	lsrs	r2, r0, #16
   18518:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1851c:	4610      	mov	r0, r2
   1851e:	d1c3      	bne.n	184a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   18520:	1e58      	subs	r0, r3, #1
   18522:	2881      	cmp	r0, #129	; 0x81
   18524:	d30f      	bcc.n	18546 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   18526:	e01e      	b.n	18566 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18528:	1e59      	subs	r1, r3, #1
   1852a:	1e98      	subs	r0, r3, #2
   1852c:	460b      	mov	r3, r1
   1852e:	2881      	cmp	r0, #129	; 0x81
   18530:	d309      	bcc.n	18546 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   18532:	e018      	b.n	18566 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18534:	1ed8      	subs	r0, r3, #3
   18536:	3b02      	subs	r3, #2
   18538:	2881      	cmp	r0, #129	; 0x81
   1853a:	d304      	bcc.n	18546 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1853c:	e013      	b.n	18566 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1853e:	1f18      	subs	r0, r3, #4
   18540:	3b03      	subs	r3, #3
   18542:	2881      	cmp	r0, #129	; 0x81
   18544:	d20f      	bcs.n	18566 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18546:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1854a:	f64f 723d 	movw	r2, #65341	; 0xff3d
   1854e:	4470      	add	r0, lr
   18550:	f2c0 0201 	movt	r2, #1
   18554:	e9cd 0100 	strd	r0, r1, [sp]
   18558:	4660      	mov	r0, ip
   1855a:	2101      	movs	r1, #1
   1855c:	2302      	movs	r3, #2
   1855e:	f7fe fe3d 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18562:	b022      	add	sp, #136	; 0x88
   18564:	bdb0      	pop	{r4, r5, r7, pc}
   18566:	2180      	movs	r1, #128	; 0x80
   18568:	f7ff f9d5 	bl	17916 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1856c:	defe      	udf	#254	; 0xfe

0001856e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   1856e:	b580      	push	{r7, lr}
   18570:	b08c      	sub	sp, #48	; 0x30
   18572:	7802      	ldrb	r2, [r0, #0]
   18574:	2a64      	cmp	r2, #100	; 0x64
   18576:	d314      	bcc.n	185a2 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   18578:	f248 501f 	movw	r0, #34079	; 0x851f
   1857c:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   18580:	fba2 0300 	umull	r0, r3, r2, r0
   18584:	2064      	movs	r0, #100	; 0x64
   18586:	095b      	lsrs	r3, r3, #5
   18588:	fb03 2010 	mls	r0, r3, r0, r2
   1858c:	f64f 723f 	movw	r2, #65343	; 0xff3f
   18590:	f2c0 0201 	movt	r2, #1
   18594:	b2c0      	uxtb	r0, r0
   18596:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1859a:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1859e:	2024      	movs	r0, #36	; 0x24
   185a0:	e003      	b.n	185aa <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   185a2:	2a0a      	cmp	r2, #10
   185a4:	d206      	bcs.n	185b4 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   185a6:	2026      	movs	r0, #38	; 0x26
   185a8:	4613      	mov	r3, r2
   185aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
   185ae:	ab02      	add	r3, sp, #8
   185b0:	541a      	strb	r2, [r3, r0]
   185b2:	e008      	b.n	185c6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   185b4:	f64f 703f 	movw	r0, #65343	; 0xff3f
   185b8:	f2c0 0001 	movt	r0, #1
   185bc:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   185c0:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   185c4:	2025      	movs	r0, #37	; 0x25
   185c6:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   185ca:	ab02      	add	r3, sp, #8
   185cc:	4418      	add	r0, r3
   185ce:	2300      	movs	r3, #0
   185d0:	e9cd 0200 	strd	r0, r2, [sp]
   185d4:	f64f 5204 	movw	r2, #64772	; 0xfd04
   185d8:	4608      	mov	r0, r1
   185da:	f2c0 0201 	movt	r2, #1
   185de:	2101      	movs	r1, #1
   185e0:	f7fe fdfc 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   185e4:	b00c      	add	sp, #48	; 0x30
   185e6:	bd80      	pop	{r7, pc}

000185e8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   185e8:	b580      	push	{r7, lr}
   185ea:	b08c      	sub	sp, #48	; 0x30
   185ec:	8800      	ldrh	r0, [r0, #0]
   185ee:	f242 720f 	movw	r2, #9999	; 0x270f
   185f2:	468e      	mov	lr, r1
   185f4:	4290      	cmp	r0, r2
   185f6:	d924      	bls.n	18642 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   185f8:	f241 7259 	movw	r2, #5977	; 0x1759
   185fc:	f248 511f 	movw	r1, #34079	; 0x851f
   18600:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   18604:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   18608:	fba0 2302 	umull	r2, r3, r0, r2
   1860c:	0b5a      	lsrs	r2, r3, #13
   1860e:	f242 7310 	movw	r3, #10000	; 0x2710
   18612:	fb02 0013 	mls	r0, r2, r3, r0
   18616:	b283      	uxth	r3, r0
   18618:	fba3 1301 	umull	r1, r3, r3, r1
   1861c:	0959      	lsrs	r1, r3, #5
   1861e:	2364      	movs	r3, #100	; 0x64
   18620:	fb01 0013 	mls	r0, r1, r3, r0
   18624:	f64f 733f 	movw	r3, #65343	; 0xff3f
   18628:	f2c0 0301 	movt	r3, #1
   1862c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   18630:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   18634:	b280      	uxth	r0, r0
   18636:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1863a:	2323      	movs	r3, #35	; 0x23
   1863c:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18640:	e024      	b.n	1868c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   18642:	f64f 7c3f 	movw	ip, #65343	; 0xff3f
   18646:	2863      	cmp	r0, #99	; 0x63
   18648:	f2c0 0c01 	movt	ip, #1
   1864c:	d919      	bls.n	18682 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   1864e:	f248 511f 	movw	r1, #34079	; 0x851f
   18652:	2325      	movs	r3, #37	; 0x25
   18654:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   18658:	fba0 1201 	umull	r1, r2, r0, r1
   1865c:	0951      	lsrs	r1, r2, #5
   1865e:	2264      	movs	r2, #100	; 0x64
   18660:	fb01 0012 	mls	r0, r1, r2, r0
   18664:	b280      	uxth	r0, r0
   18666:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   1866a:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1866e:	4608      	mov	r0, r1
   18670:	b282      	uxth	r2, r0
   18672:	2a0a      	cmp	r2, #10
   18674:	d309      	bcc.n	1868a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   18676:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   1867a:	1e98      	subs	r0, r3, #2
   1867c:	aa02      	add	r2, sp, #8
   1867e:	5211      	strh	r1, [r2, r0]
   18680:	e009      	b.n	18696 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   18682:	2327      	movs	r3, #39	; 0x27
   18684:	b282      	uxth	r2, r0
   18686:	2a0a      	cmp	r2, #10
   18688:	d2f5      	bcs.n	18676 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   1868a:	4602      	mov	r2, r0
   1868c:	1e58      	subs	r0, r3, #1
   1868e:	f102 0130 	add.w	r1, r2, #48	; 0x30
   18692:	aa02      	add	r2, sp, #8
   18694:	5411      	strb	r1, [r2, r0]
   18696:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1869a:	aa02      	add	r2, sp, #8
   1869c:	4410      	add	r0, r2
   1869e:	f64f 5204 	movw	r2, #64772	; 0xfd04
   186a2:	e9cd 0100 	strd	r0, r1, [sp]
   186a6:	f2c0 0201 	movt	r2, #1
   186aa:	4670      	mov	r0, lr
   186ac:	2101      	movs	r1, #1
   186ae:	2300      	movs	r3, #0
   186b0:	f7fe fd94 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   186b4:	b00c      	add	sp, #48	; 0x30
   186b6:	bd80      	pop	{r7, pc}

000186b8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   186b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186bc:	b08f      	sub	sp, #60	; 0x3c
   186be:	6805      	ldr	r5, [r0, #0]
   186c0:	f248 581f 	movw	r8, #34079	; 0x851f
   186c4:	460e      	mov	r6, r1
   186c6:	f64f 713f 	movw	r1, #65343	; 0xff3f
   186ca:	2d00      	cmp	r5, #0
   186cc:	f242 7910 	movw	r9, #10000	; 0x2710
   186d0:	462b      	mov	r3, r5
   186d2:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   186d6:	bf48      	it	mi
   186d8:	426b      	negmi	r3, r5
   186da:	454b      	cmp	r3, r9
   186dc:	f2c0 0101 	movt	r1, #1
   186e0:	d33a      	bcc.n	18758 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   186e2:	f241 7a59 	movw	sl, #5977	; 0x1759
   186e6:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   186ea:	f10d 0e14 	add.w	lr, sp, #20
   186ee:	2400      	movs	r4, #0
   186f0:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   186f4:	f04f 0b64 	mov.w	fp, #100	; 0x64
   186f8:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   186fc:	e9cd 5603 	strd	r5, r6, [sp, #12]
   18700:	fba3 250a 	umull	r2, r5, r3, sl
   18704:	eb0e 0704 	add.w	r7, lr, r4
   18708:	3c04      	subs	r4, #4
   1870a:	4283      	cmp	r3, r0
   1870c:	ea4f 3255 	mov.w	r2, r5, lsr #13
   18710:	fb02 3519 	mls	r5, r2, r9, r3
   18714:	4613      	mov	r3, r2
   18716:	b2ae      	uxth	r6, r5
   18718:	fba6 6c08 	umull	r6, ip, r6, r8
   1871c:	ea4f 165c 	mov.w	r6, ip, lsr #5
   18720:	fb06 551b 	mls	r5, r6, fp, r5
   18724:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   18728:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   1872c:	b2ad      	uxth	r5, r5
   1872e:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   18732:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   18736:	d8e3      	bhi.n	18700 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   18738:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   1873c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18740:	4613      	mov	r3, r2
   18742:	2b63      	cmp	r3, #99	; 0x63
   18744:	dc0b      	bgt.n	1875e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   18746:	461a      	mov	r2, r3
   18748:	2a0a      	cmp	r2, #10
   1874a:	db17      	blt.n	1877c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   1874c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   18750:	3802      	subs	r0, #2
   18752:	aa05      	add	r2, sp, #20
   18754:	5211      	strh	r1, [r2, r0]
   18756:	e016      	b.n	18786 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   18758:	2027      	movs	r0, #39	; 0x27
   1875a:	2b63      	cmp	r3, #99	; 0x63
   1875c:	ddf3      	ble.n	18746 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   1875e:	b29a      	uxth	r2, r3
   18760:	3802      	subs	r0, #2
   18762:	fba2 2708 	umull	r2, r7, r2, r8
   18766:	097a      	lsrs	r2, r7, #5
   18768:	2764      	movs	r7, #100	; 0x64
   1876a:	fb02 3317 	mls	r3, r2, r7, r3
   1876e:	af05      	add	r7, sp, #20
   18770:	b29b      	uxth	r3, r3
   18772:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   18776:	523b      	strh	r3, [r7, r0]
   18778:	2a0a      	cmp	r2, #10
   1877a:	dae7      	bge.n	1874c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   1877c:	3801      	subs	r0, #1
   1877e:	f102 0130 	add.w	r1, r2, #48	; 0x30
   18782:	aa05      	add	r2, sp, #20
   18784:	5411      	strb	r1, [r2, r0]
   18786:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1878a:	aa05      	add	r2, sp, #20
   1878c:	4410      	add	r0, r2
   1878e:	f64f 5204 	movw	r2, #64772	; 0xfd04
   18792:	e9cd 0100 	strd	r0, r1, [sp]
   18796:	43e8      	mvns	r0, r5
   18798:	0fc1      	lsrs	r1, r0, #31
   1879a:	f2c0 0201 	movt	r2, #1
   1879e:	4630      	mov	r0, r6
   187a0:	2300      	movs	r3, #0
   187a2:	f7fe fd1b 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   187a6:	b00f      	add	sp, #60	; 0x3c
   187a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000187ac <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   187ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b0:	b08d      	sub	sp, #52	; 0x34
   187b2:	468c      	mov	ip, r1
   187b4:	6801      	ldr	r1, [r0, #0]
   187b6:	f248 5e1f 	movw	lr, #34079	; 0x851f
   187ba:	f64f 703f 	movw	r0, #65343	; 0xff3f
   187be:	f242 7810 	movw	r8, #10000	; 0x2710
   187c2:	4541      	cmp	r1, r8
   187c4:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   187c8:	f2c0 0001 	movt	r0, #1
   187cc:	d337      	bcc.n	1883e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   187ce:	f241 7959 	movw	r9, #5977	; 0x1759
   187d2:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   187d6:	f10d 0b0c 	add.w	fp, sp, #12
   187da:	2300      	movs	r3, #0
   187dc:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   187e0:	f04f 0a64 	mov.w	sl, #100	; 0x64
   187e4:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   187e8:	fba1 2409 	umull	r2, r4, r1, r9
   187ec:	42b9      	cmp	r1, r7
   187ee:	ea4f 3254 	mov.w	r2, r4, lsr #13
   187f2:	fb02 1418 	mls	r4, r2, r8, r1
   187f6:	4611      	mov	r1, r2
   187f8:	b2a5      	uxth	r5, r4
   187fa:	fba5 560e 	umull	r5, r6, r5, lr
   187fe:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18802:	eb0b 0603 	add.w	r6, fp, r3
   18806:	fb05 441a 	mls	r4, r5, sl, r4
   1880a:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1880e:	f1a3 0304 	sub.w	r3, r3, #4
   18812:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18816:	b2a4      	uxth	r4, r4
   18818:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1881c:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   18820:	d8e2      	bhi.n	187e8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   18822:	f103 0427 	add.w	r4, r3, #39	; 0x27
   18826:	4611      	mov	r1, r2
   18828:	2963      	cmp	r1, #99	; 0x63
   1882a:	dc0b      	bgt.n	18844 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   1882c:	460b      	mov	r3, r1
   1882e:	2b0a      	cmp	r3, #10
   18830:	db17      	blt.n	18862 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   18832:	1ea1      	subs	r1, r4, #2
   18834:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   18838:	aa03      	add	r2, sp, #12
   1883a:	5250      	strh	r0, [r2, r1]
   1883c:	e016      	b.n	1886c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   1883e:	2427      	movs	r4, #39	; 0x27
   18840:	2963      	cmp	r1, #99	; 0x63
   18842:	ddf3      	ble.n	1882c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   18844:	b28a      	uxth	r2, r1
   18846:	3c02      	subs	r4, #2
   18848:	fba2 230e 	umull	r2, r3, r2, lr
   1884c:	2264      	movs	r2, #100	; 0x64
   1884e:	095b      	lsrs	r3, r3, #5
   18850:	fb03 1112 	mls	r1, r3, r2, r1
   18854:	aa03      	add	r2, sp, #12
   18856:	b289      	uxth	r1, r1
   18858:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1885c:	5311      	strh	r1, [r2, r4]
   1885e:	2b0a      	cmp	r3, #10
   18860:	dae7      	bge.n	18832 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   18862:	1e61      	subs	r1, r4, #1
   18864:	aa03      	add	r2, sp, #12
   18866:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1886a:	5450      	strb	r0, [r2, r1]
   1886c:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   18870:	aa03      	add	r2, sp, #12
   18872:	4411      	add	r1, r2
   18874:	f64f 5204 	movw	r2, #64772	; 0xfd04
   18878:	e9cd 1000 	strd	r1, r0, [sp]
   1887c:	f2c0 0201 	movt	r2, #1
   18880:	4660      	mov	r0, ip
   18882:	2101      	movs	r1, #1
   18884:	2300      	movs	r3, #0
   18886:	f7fe fca9 	bl	171dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1888a:	b00d      	add	sp, #52	; 0x34
   1888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018890 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   18890:	e9d0 2000 	ldrd	r2, r0, [r0]
   18894:	68c3      	ldr	r3, [r0, #12]
   18896:	4610      	mov	r0, r2
   18898:	4718      	bx	r3

0001889a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   1889a:	460b      	mov	r3, r1
   1889c:	e9d0 1200 	ldrd	r1, r2, [r0]
   188a0:	4618      	mov	r0, r3
   188a2:	f7fe bde3 	b.w	1746c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

000188a8 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   188a8:	4b07      	ldr	r3, [pc, #28]	; (188c8 <__semihost+0x20>)
   188aa:	781b      	ldrb	r3, [r3, #0]
   188ac:	b14b      	cbz	r3, 188c2 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   188ae:	b410      	push	{r4}
   188b0:	4602      	mov	r2, r0
   188b2:	460c      	mov	r4, r1
    __asm( 
   188b4:	4610      	mov	r0, r2
   188b6:	4621      	mov	r1, r4
   188b8:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   188ba:	2000      	movs	r0, #0
}
   188bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   188c0:	4770      	bx	lr
    if (!log_enabled) return -1;
   188c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   188c6:	4770      	bx	lr
   188c8:	20000100 	.word	0x20000100

000188cc <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   188cc:	4b02      	ldr	r3, [pc, #8]	; (188d8 <debugger_connected+0xc>)
   188ce:	6818      	ldr	r0, [r3, #0]
}
   188d0:	f000 0001 	and.w	r0, r0, #1
   188d4:	4770      	bx	lr
   188d6:	bf00      	nop
   188d8:	e000edf0 	.word	0xe000edf0

000188dc <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   188dc:	b570      	push	{r4, r5, r6, lr}
   188de:	b084      	sub	sp, #16
   188e0:	4606      	mov	r6, r0
   188e2:	460d      	mov	r5, r1
   188e4:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   188e6:	f7ff fff1 	bl	188cc <debugger_connected>
   188ea:	4603      	mov	r3, r0
   188ec:	b108      	cbz	r0, 188f2 <semihost_write+0x16>
    if (length == 0) { return 0; }
   188ee:	b91c      	cbnz	r4, 188f8 <semihost_write+0x1c>
   188f0:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   188f2:	4618      	mov	r0, r3
   188f4:	b004      	add	sp, #16
   188f6:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   188f8:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   188fa:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   188fc:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   188fe:	a901      	add	r1, sp, #4
   18900:	2005      	movs	r0, #5
   18902:	f7ff ffd1 	bl	188a8 <__semihost>
   18906:	4603      	mov	r3, r0
   18908:	e7f3      	b.n	188f2 <semihost_write+0x16>
	...

0001890c <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   1890c:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   1890e:	4b0e      	ldr	r3, [pc, #56]	; (18948 <console_flush+0x3c>)
   18910:	781b      	ldrb	r3, [r3, #0]
   18912:	b1bb      	cbz	r3, 18944 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   18914:	4b0d      	ldr	r3, [pc, #52]	; (1894c <console_flush+0x40>)
   18916:	681d      	ldr	r5, [r3, #0]
   18918:	b1a5      	cbz	r5, 18944 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1891a:	4b0d      	ldr	r3, [pc, #52]	; (18950 <console_flush+0x44>)
   1891c:	685b      	ldr	r3, [r3, #4]
   1891e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   18922:	b97b      	cbnz	r3, 18944 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   18924:	4b09      	ldr	r3, [pc, #36]	; (1894c <console_flush+0x40>)
   18926:	2200      	movs	r2, #0
   18928:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   1892a:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   1892c:	e005      	b.n	1893a <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   1892e:	88e2      	ldrh	r2, [r4, #6]
   18930:	6821      	ldr	r1, [r4, #0]
   18932:	2002      	movs	r0, #2
   18934:	f7ff ffd2 	bl	188dc <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   18938:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   1893a:	2c00      	cmp	r4, #0
   1893c:	d1f7      	bne.n	1892e <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   1893e:	4628      	mov	r0, r5
   18940:	f001 fbfc 	bl	1a13c <os_mbuf_free_chain>
}
   18944:	bd38      	pop	{r3, r4, r5, pc}
   18946:	bf00      	nop
   18948:	20000100 	.word	0x20000100
   1894c:	200016b4 	.word	0x200016b4
   18950:	e000ed00 	.word	0xe000ed00

00018954 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   18954:	b508      	push	{r3, lr}
   18956:	f7ff ffd9 	bl	1890c <console_flush>
   1895a:	bd08      	pop	{r3, pc}

0001895c <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   1895c:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1895e:	4b12      	ldr	r3, [pc, #72]	; (189a8 <console_buffer+0x4c>)
   18960:	781b      	ldrb	r3, [r3, #0]
   18962:	b903      	cbnz	r3, 18966 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   18964:	bd38      	pop	{r3, r4, r5, pc}
   18966:	460d      	mov	r5, r1
   18968:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   1896a:	f7ff ffaf 	bl	188cc <debugger_connected>
   1896e:	2800      	cmp	r0, #0
   18970:	d0f8      	beq.n	18964 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   18972:	4b0e      	ldr	r3, [pc, #56]	; (189ac <console_buffer+0x50>)
   18974:	681b      	ldr	r3, [r3, #0]
   18976:	b173      	cbz	r3, 18996 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   18978:	4b0c      	ldr	r3, [pc, #48]	; (189ac <console_buffer+0x50>)
   1897a:	6818      	ldr	r0, [r3, #0]
   1897c:	f001 fbf0 	bl	1a160 <os_mbuf_len>
   18980:	4428      	add	r0, r5
   18982:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   18986:	d2ed      	bcs.n	18964 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   18988:	b2aa      	uxth	r2, r5
   1898a:	4621      	mov	r1, r4
   1898c:	4b07      	ldr	r3, [pc, #28]	; (189ac <console_buffer+0x50>)
   1898e:	6818      	ldr	r0, [r3, #0]
   18990:	f001 fbf0 	bl	1a174 <os_mbuf_append>
   18994:	e7e6      	b.n	18964 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   18996:	2100      	movs	r1, #0
   18998:	b2a8      	uxth	r0, r5
   1899a:	f001 fd93 	bl	1a4c4 <os_msys_get_pkthdr>
   1899e:	4b03      	ldr	r3, [pc, #12]	; (189ac <console_buffer+0x50>)
   189a0:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   189a2:	2800      	cmp	r0, #0
   189a4:	d1e8      	bne.n	18978 <console_buffer+0x1c>
   189a6:	e7dd      	b.n	18964 <console_buffer+0x8>
   189a8:	20000100 	.word	0x20000100
   189ac:	200016b4 	.word	0x200016b4

000189b0 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   189b0:	b500      	push	{lr}
   189b2:	b083      	sub	sp, #12
   189b4:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   189b8:	280d      	cmp	r0, #13
   189ba:	d004      	beq.n	189c6 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   189bc:	2101      	movs	r1, #1
   189be:	f10d 0007 	add.w	r0, sp, #7
   189c2:	f7ff ffcb 	bl	1895c <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   189c6:	b003      	add	sp, #12
   189c8:	f85d fb04 	ldr.w	pc, [sp], #4

000189cc <console_printhex>:
void console_printhex(uint8_t v) {
   189cc:	b510      	push	{r4, lr}
   189ce:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   189d0:	2310      	movs	r3, #16
    int length = 0;
   189d2:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   189d4:	e005      	b.n	189e2 <console_printhex+0x16>
        v = v % divisor;
   189d6:	fbb0 f1f3 	udiv	r1, r0, r3
   189da:	fb03 0011 	mls	r0, r3, r1, r0
   189de:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   189e0:	091b      	lsrs	r3, r3, #4
   189e2:	b18b      	cbz	r3, 18a08 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   189e4:	fbb0 f4f3 	udiv	r4, r0, r3
   189e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
   189ec:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   189ee:	2939      	cmp	r1, #57	; 0x39
   189f0:	d902      	bls.n	189f8 <console_printhex+0x2c>
   189f2:	f104 0157 	add.w	r1, r4, #87	; 0x57
   189f6:	b2c9      	uxtb	r1, r1
            if (length < size) {
   189f8:	2a02      	cmp	r2, #2
   189fa:	dcec      	bgt.n	189d6 <console_printhex+0xa>
                buffer[length++] = digit;
   189fc:	ac02      	add	r4, sp, #8
   189fe:	4414      	add	r4, r2
   18a00:	f804 1c04 	strb.w	r1, [r4, #-4]
   18a04:	3201      	adds	r2, #1
   18a06:	e7e6      	b.n	189d6 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   18a08:	b92a      	cbnz	r2, 18a16 <console_printhex+0x4a>
   18a0a:	ab02      	add	r3, sp, #8
   18a0c:	4413      	add	r3, r2
   18a0e:	2130      	movs	r1, #48	; 0x30
   18a10:	f803 1c04 	strb.w	r1, [r3, #-4]
   18a14:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   18a16:	2a02      	cmp	r2, #2
   18a18:	dc04      	bgt.n	18a24 <console_printhex+0x58>
   18a1a:	ab02      	add	r3, sp, #8
   18a1c:	441a      	add	r2, r3
   18a1e:	2300      	movs	r3, #0
   18a20:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   18a24:	2300      	movs	r3, #0
   18a26:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   18a2a:	a801      	add	r0, sp, #4
   18a2c:	f002 fb73 	bl	1b116 <strlen>
   18a30:	4601      	mov	r1, r0
   18a32:	a801      	add	r0, sp, #4
   18a34:	f7ff ff92 	bl	1895c <console_buffer>
}
   18a38:	b002      	add	sp, #8
   18a3a:	bd10      	pop	{r4, pc}

00018a3c <console_printint>:
void console_printint(int i) {
   18a3c:	b508      	push	{r3, lr}
    console_printf("%d", i);
   18a3e:	4601      	mov	r1, r0
   18a40:	4801      	ldr	r0, [pc, #4]	; (18a48 <console_printint+0xc>)
   18a42:	f000 f873 	bl	18b2c <console_printf>
}
   18a46:	bd08      	pop	{r3, pc}
   18a48:	00020f04 	.word	0x00020f04

00018a4c <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   18a4c:	b180      	cbz	r0, 18a70 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   18a4e:	b570      	push	{r4, r5, r6, lr}
   18a50:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   18a52:	b161      	cbz	r1, 18a6e <console_dump+0x22>
   18a54:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   18a56:	2400      	movs	r4, #0
   18a58:	e007      	b.n	18a6a <console_dump+0x1e>
   18a5a:	5d30      	ldrb	r0, [r6, r4]
   18a5c:	f7ff ffb6 	bl	189cc <console_printhex>
   18a60:	2101      	movs	r1, #1
   18a62:	4804      	ldr	r0, [pc, #16]	; (18a74 <console_dump+0x28>)
   18a64:	f7ff ff7a 	bl	1895c <console_buffer>
   18a68:	3401      	adds	r4, #1
   18a6a:	42ac      	cmp	r4, r5
   18a6c:	d3f5      	bcc.n	18a5a <console_dump+0xe>
}
   18a6e:	bd70      	pop	{r4, r5, r6, pc}
   18a70:	4770      	bx	lr
   18a72:	bf00      	nop
   18a74:	00020f00 	.word	0x00020f00

00018a78 <console_out_nolock>:

int console_out_nolock(int character) {
   18a78:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   18a7a:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   18a7c:	4b0b      	ldr	r3, [pc, #44]	; (18aac <console_out_nolock+0x34>)
   18a7e:	781b      	ldrb	r3, [r3, #0]
   18a80:	b953      	cbnz	r3, 18a98 <console_out_nolock+0x20>
   18a82:	4604      	mov	r4, r0
    if ('\n' == c) {
   18a84:	2d0a      	cmp	r5, #10
   18a86:	d009      	beq.n	18a9c <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   18a88:	4b09      	ldr	r3, [pc, #36]	; (18ab0 <console_out_nolock+0x38>)
   18a8a:	2201      	movs	r2, #1
   18a8c:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   18a8e:	4628      	mov	r0, r5
   18a90:	f7ff ff8e 	bl	189b0 <semihosting_console_write_ch>
    return character;
   18a94:	4620      	mov	r0, r4
}
   18a96:	bd38      	pop	{r3, r4, r5, pc}
   18a98:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   18a9a:	e7fc      	b.n	18a96 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   18a9c:	200d      	movs	r0, #13
   18a9e:	f7ff ff87 	bl	189b0 <semihosting_console_write_ch>
        console_is_midline = 0;
   18aa2:	4b03      	ldr	r3, [pc, #12]	; (18ab0 <console_out_nolock+0x38>)
   18aa4:	2200      	movs	r2, #0
   18aa6:	601a      	str	r2, [r3, #0]
   18aa8:	e7f1      	b.n	18a8e <console_out_nolock+0x16>
   18aaa:	bf00      	nop
   18aac:	2000a564 	.word	0x2000a564
   18ab0:	2000a568 	.word	0x2000a568

00018ab4 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   18ab4:	2000      	movs	r0, #0
   18ab6:	4770      	bx	lr

00018ab8 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   18ab8:	b570      	push	{r4, r5, r6, lr}
   18aba:	4606      	mov	r6, r0
   18abc:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   18abe:	2400      	movs	r4, #0
   18ac0:	42ac      	cmp	r4, r5
   18ac2:	da07      	bge.n	18ad4 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   18ac4:	5d30      	ldrb	r0, [r6, r4]
   18ac6:	f7ff ffd7 	bl	18a78 <console_out_nolock>
   18aca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18ace:	d001      	beq.n	18ad4 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   18ad0:	3401      	adds	r4, #1
   18ad2:	e7f5      	b.n	18ac0 <console_write+0x8>
    }
}
   18ad4:	bd70      	pop	{r4, r5, r6, pc}

00018ad6 <console_blocking_mode>:

void console_blocking_mode(void) {
   18ad6:	b508      	push	{r3, lr}
    disable_buffer();
   18ad8:	f7ff ff3c 	bl	18954 <disable_buffer>
}
   18adc:	bd08      	pop	{r3, pc}
	...

00018ae0 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   18ae0:	b510      	push	{r4, lr}
   18ae2:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18ae4:	4b0d      	ldr	r3, [pc, #52]	; (18b1c <console_pkg_init+0x3c>)
   18ae6:	781b      	ldrb	r3, [r3, #0]
   18ae8:	b193      	cbz	r3, 18b10 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   18aea:	480d      	ldr	r0, [pc, #52]	; (18b20 <console_pkg_init+0x40>)
   18aec:	f001 f9fa 	bl	19ee4 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   18af0:	480c      	ldr	r0, [pc, #48]	; (18b24 <console_pkg_init+0x44>)
   18af2:	f001 fd15 	bl	1a520 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   18af6:	f7ff ffdd 	bl	18ab4 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   18afa:	b138      	cbz	r0, 18b0c <console_pkg_init+0x2c>
   18afc:	2000      	movs	r0, #0
   18afe:	9000      	str	r0, [sp, #0]
   18b00:	4b09      	ldr	r3, [pc, #36]	; (18b28 <console_pkg_init+0x48>)
   18b02:	681c      	ldr	r4, [r3, #0]
   18b04:	4603      	mov	r3, r0
   18b06:	4602      	mov	r2, r0
   18b08:	4601      	mov	r1, r0
   18b0a:	47a0      	blx	r4
}
   18b0c:	b002      	add	sp, #8
   18b0e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18b10:	461a      	mov	r2, r3
   18b12:	4619      	mov	r1, r3
   18b14:	4618      	mov	r0, r3
   18b16:	f000 fed1 	bl	198bc <__assert_func>
   18b1a:	bf00      	nop
   18b1c:	2000a56c 	.word	0x2000a56c
   18b20:	200016b8 	.word	0x200016b8
   18b24:	200016c8 	.word	0x200016c8
   18b28:	20000104 	.word	0x20000104

00018b2c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   18b2c:	b40f      	push	{r0, r1, r2, r3}
   18b2e:	b510      	push	{r4, lr}
   18b30:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   18b32:	f000 f81f 	bl	18b74 <console_get_ticks>
   18b36:	b160      	cbz	r0, 18b52 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   18b38:	4b0c      	ldr	r3, [pc, #48]	; (18b6c <console_printf+0x40>)
   18b3a:	681b      	ldr	r3, [r3, #0]
   18b3c:	b10b      	cbz	r3, 18b42 <console_printf+0x16>
    num_chars = 0;
   18b3e:	2400      	movs	r4, #0
   18b40:	e008      	b.n	18b54 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   18b42:	f002 f8d9 	bl	1acf8 <os_time_get>
   18b46:	4601      	mov	r1, r0
   18b48:	4809      	ldr	r0, [pc, #36]	; (18b70 <console_printf+0x44>)
   18b4a:	f002 fd97 	bl	1b67c <printf>
   18b4e:	4604      	mov	r4, r0
   18b50:	e000      	b.n	18b54 <console_printf+0x28>
    num_chars = 0;
   18b52:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   18b54:	a905      	add	r1, sp, #20
   18b56:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   18b58:	9804      	ldr	r0, [sp, #16]
   18b5a:	f002 fdbf 	bl	1b6dc <vprintf>
    va_end(args);

    return num_chars;
}
   18b5e:	4420      	add	r0, r4
   18b60:	b002      	add	sp, #8
   18b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18b66:	b004      	add	sp, #16
   18b68:	4770      	bx	lr
   18b6a:	bf00      	nop
   18b6c:	2000a568 	.word	0x2000a568
   18b70:	00020f08 	.word	0x00020f08

00018b74 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   18b74:	4b01      	ldr	r3, [pc, #4]	; (18b7c <console_get_ticks+0x8>)
   18b76:	7818      	ldrb	r0, [r3, #0]
   18b78:	4770      	bx	lr
   18b7a:	bf00      	nop
   18b7c:	200016d4 	.word	0x200016d4

00018b80 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   18b80:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   18b82:	f000 fe9b 	bl	198bc <__assert_func>
	...

00018b88 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   18b88:	4b01      	ldr	r3, [pc, #4]	; (18b90 <sysinit_start+0x8>)
   18b8a:	2201      	movs	r2, #1
   18b8c:	701a      	strb	r2, [r3, #0]
}
   18b8e:	4770      	bx	lr
   18b90:	2000a56c 	.word	0x2000a56c

00018b94 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   18b94:	4b01      	ldr	r3, [pc, #4]	; (18b9c <sysinit_end+0x8>)
   18b96:	2200      	movs	r2, #0
   18b98:	701a      	strb	r2, [r3, #0]
}
   18b9a:	4770      	bx	lr
   18b9c:	2000a56c 	.word	0x2000a56c

00018ba0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   18ba0:	4a09      	ldr	r2, [pc, #36]	; (18bc8 <NVIC_Relocate+0x28>)
   18ba2:	4b0a      	ldr	r3, [pc, #40]	; (18bcc <NVIC_Relocate+0x2c>)
   18ba4:	429a      	cmp	r2, r3
   18ba6:	d00a      	beq.n	18bbe <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18ba8:	2300      	movs	r3, #0
   18baa:	e006      	b.n	18bba <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   18bac:	4a07      	ldr	r2, [pc, #28]	; (18bcc <NVIC_Relocate+0x2c>)
   18bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   18bb2:	4a05      	ldr	r2, [pc, #20]	; (18bc8 <NVIC_Relocate+0x28>)
   18bb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18bb8:	3301      	adds	r3, #1
   18bba:	2b35      	cmp	r3, #53	; 0x35
   18bbc:	ddf6      	ble.n	18bac <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   18bbe:	4a02      	ldr	r2, [pc, #8]	; (18bc8 <NVIC_Relocate+0x28>)
   18bc0:	4b03      	ldr	r3, [pc, #12]	; (18bd0 <NVIC_Relocate+0x30>)
   18bc2:	609a      	str	r2, [r3, #8]
#endif
}
   18bc4:	4770      	bx	lr
   18bc6:	bf00      	nop
   18bc8:	20000000 	.word	0x20000000
   18bcc:	00008020 	.word	0x00008020
   18bd0:	e000ed00 	.word	0xe000ed00

00018bd4 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   18bd4:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18bd6:	2400      	movs	r4, #0
   18bd8:	e000      	b.n	18bdc <hal_gpio_irq_handler+0x8>
   18bda:	3401      	adds	r4, #1
   18bdc:	2c07      	cmp	r4, #7
   18bde:	dc1c      	bgt.n	18c1a <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   18be0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18be4:	4a0d      	ldr	r2, [pc, #52]	; (18c1c <hal_gpio_irq_handler+0x48>)
   18be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18bea:	2b00      	cmp	r3, #0
   18bec:	d0f5      	beq.n	18bda <hal_gpio_irq_handler+0x6>
   18bee:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   18bf2:	2301      	movs	r3, #1
   18bf4:	40a3      	lsls	r3, r4
   18bf6:	421a      	tst	r2, r3
   18bf8:	d0ef      	beq.n	18bda <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   18bfa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18bfe:	4a07      	ldr	r2, [pc, #28]	; (18c1c <hal_gpio_irq_handler+0x48>)
   18c00:	2100      	movs	r1, #0
   18c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   18c06:	4b06      	ldr	r3, [pc, #24]	; (18c20 <hal_gpio_irq_handler+0x4c>)
   18c08:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   18c0c:	2a00      	cmp	r2, #0
   18c0e:	d0e4      	beq.n	18bda <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   18c10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18c14:	6858      	ldr	r0, [r3, #4]
   18c16:	4790      	blx	r2
   18c18:	e7df      	b.n	18bda <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   18c1a:	bd10      	pop	{r4, pc}
   18c1c:	40006000 	.word	0x40006000
   18c20:	200016d8 	.word	0x200016d8

00018c24 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   18c24:	4b06      	ldr	r3, [pc, #24]	; (18c40 <hal_gpio_irq_setup+0x1c>)
   18c26:	781b      	ldrb	r3, [r3, #0]
   18c28:	b94b      	cbnz	r3, 18c3e <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18c2a:	4b06      	ldr	r3, [pc, #24]	; (18c44 <hal_gpio_irq_setup+0x20>)
   18c2c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18c2e:	4a06      	ldr	r2, [pc, #24]	; (18c48 <hal_gpio_irq_setup+0x24>)
   18c30:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18c32:	4b06      	ldr	r3, [pc, #24]	; (18c4c <hal_gpio_irq_setup+0x28>)
   18c34:	2240      	movs	r2, #64	; 0x40
   18c36:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   18c38:	4b01      	ldr	r3, [pc, #4]	; (18c40 <hal_gpio_irq_setup+0x1c>)
   18c3a:	2201      	movs	r2, #1
   18c3c:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   18c3e:	4770      	bx	lr
   18c40:	20001718 	.word	0x20001718
   18c44:	e000ed00 	.word	0xe000ed00
   18c48:	00018bd5 	.word	0x00018bd5
   18c4c:	e000e100 	.word	0xe000e100

00018c50 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18c50:	2000      	movs	r0, #0
   18c52:	2807      	cmp	r0, #7
   18c54:	dc05      	bgt.n	18c62 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   18c56:	4b04      	ldr	r3, [pc, #16]	; (18c68 <hal_gpio_find_empty_slot+0x18>)
   18c58:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18c5c:	b11b      	cbz	r3, 18c66 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18c5e:	3001      	adds	r0, #1
   18c60:	e7f7      	b.n	18c52 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   18c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18c66:	4770      	bx	lr
   18c68:	200016d8 	.word	0x200016d8

00018c6c <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   18c6c:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18c6e:	2000      	movs	r0, #0
   18c70:	e000      	b.n	18c74 <hal_gpio_find_pin+0x8>
   18c72:	3001      	adds	r0, #1
   18c74:	2807      	cmp	r0, #7
   18c76:	dc0e      	bgt.n	18c96 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   18c78:	4b08      	ldr	r3, [pc, #32]	; (18c9c <hal_gpio_find_pin+0x30>)
   18c7a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18c7e:	2b00      	cmp	r3, #0
   18c80:	d0f7      	beq.n	18c72 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   18c82:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   18c86:	4a06      	ldr	r2, [pc, #24]	; (18ca0 <hal_gpio_find_pin+0x34>)
   18c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18c8c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   18c90:	428b      	cmp	r3, r1
   18c92:	d1ee      	bne.n	18c72 <hal_gpio_find_pin+0x6>
   18c94:	e001      	b.n	18c9a <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   18c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18c9a:	4770      	bx	lr
   18c9c:	200016d8 	.word	0x200016d8
   18ca0:	40006000 	.word	0x40006000

00018ca4 <hal_gpio_init_in>:
    switch (pull) {
   18ca4:	2901      	cmp	r1, #1
   18ca6:	d003      	beq.n	18cb0 <hal_gpio_init_in+0xc>
   18ca8:	2902      	cmp	r1, #2
   18caa:	d00f      	beq.n	18ccc <hal_gpio_init_in+0x28>
        conf = 0;
   18cac:	2100      	movs	r1, #0
        break;
   18cae:	e000      	b.n	18cb2 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   18cb0:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   18cb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18cb6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   18cbe:	2301      	movs	r3, #1
   18cc0:	fa03 f000 	lsl.w	r0, r3, r0
   18cc4:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   18cc8:	2000      	movs	r0, #0
   18cca:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   18ccc:	2104      	movs	r1, #4
   18cce:	e7f0      	b.n	18cb2 <hal_gpio_init_in+0xe>

00018cd0 <hal_gpio_init_out>:
    if (val) {
   18cd0:	b999      	cbnz	r1, 18cfa <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18cd2:	2301      	movs	r3, #1
   18cd4:	4083      	lsls	r3, r0
   18cd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18cda:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   18cde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18ce2:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18ce6:	2103      	movs	r1, #3
   18ce8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   18cec:	2301      	movs	r3, #1
   18cee:	fa03 f000 	lsl.w	r0, r3, r0
   18cf2:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   18cf6:	2000      	movs	r0, #0
   18cf8:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18cfa:	2301      	movs	r3, #1
   18cfc:	4083      	lsls	r3, r0
   18cfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18d02:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   18d06:	e7ea      	b.n	18cde <hal_gpio_init_out+0xe>

00018d08 <hal_gpio_write>:
    if (val) {
   18d08:	b939      	cbnz	r1, 18d1a <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18d0a:	2301      	movs	r3, #1
   18d0c:	fa03 f000 	lsl.w	r0, r3, r0
   18d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d14:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   18d18:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18d1a:	2301      	movs	r3, #1
   18d1c:	fa03 f000 	lsl.w	r0, r3, r0
   18d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d24:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   18d28:	4770      	bx	lr

00018d2a <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   18d2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d2e:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   18d32:	2301      	movs	r3, #1
   18d34:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18d36:	421a      	tst	r2, r3
   18d38:	d108      	bne.n	18d4c <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d3e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18d42:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18d46:	f000 0001 	and.w	r0, r0, #1
}
   18d4a:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d50:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   18d54:	fa23 f000 	lsr.w	r0, r3, r0
   18d58:	f000 0001 	and.w	r0, r0, #1
   18d5c:	4770      	bx	lr
	...

00018d60 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   18d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d64:	4680      	mov	r8, r0
   18d66:	460f      	mov	r7, r1
   18d68:	4616      	mov	r6, r2
   18d6a:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   18d6c:	f7ff ff5a 	bl	18c24 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   18d70:	f7ff ff6e 	bl	18c50 <hal_gpio_find_empty_slot>
    if (i < 0) {
   18d74:	1e05      	subs	r5, r0, #0
   18d76:	db27      	blt.n	18dc8 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   18d78:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18d7c:	4640      	mov	r0, r8
   18d7e:	f7ff ff91 	bl	18ca4 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   18d82:	2c02      	cmp	r4, #2
   18d84:	d01d      	beq.n	18dc2 <hal_gpio_irq_init+0x62>
   18d86:	2c03      	cmp	r4, #3
   18d88:	d018      	beq.n	18dbc <hal_gpio_irq_init+0x5c>
   18d8a:	2c01      	cmp	r4, #1
   18d8c:	d002      	beq.n	18d94 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   18d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d92:	e011      	b.n	18db8 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   18d94:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   18d98:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   18d9c:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   18da0:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   18da4:	4b0a      	ldr	r3, [pc, #40]	; (18dd0 <hal_gpio_irq_init+0x70>)
   18da6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   18daa:	4b0a      	ldr	r3, [pc, #40]	; (18dd4 <hal_gpio_irq_init+0x74>)
   18dac:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   18db0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18db4:	605e      	str	r6, [r3, #4]

    return 0;
   18db6:	2000      	movs	r0, #0
}
   18db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   18dbc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   18dc0:	e7ea      	b.n	18d98 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   18dc2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   18dc6:	e7e7      	b.n	18d98 <hal_gpio_irq_init+0x38>
        return -1;
   18dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18dcc:	e7f4      	b.n	18db8 <hal_gpio_irq_init+0x58>
   18dce:	bf00      	nop
   18dd0:	40006000 	.word	0x40006000
   18dd4:	200016d8 	.word	0x200016d8

00018dd8 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   18dd8:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   18dda:	f7ff ff47 	bl	18c6c <hal_gpio_find_pin>
    if (i < 0) {
   18dde:	2800      	cmp	r0, #0
   18de0:	db0a      	blt.n	18df8 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   18de2:	4a06      	ldr	r2, [pc, #24]	; (18dfc <hal_gpio_irq_enable+0x24>)
   18de4:	f100 0340 	add.w	r3, r0, #64	; 0x40
   18de8:	2100      	movs	r1, #0
   18dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   18dee:	2301      	movs	r3, #1
   18df0:	fa03 f000 	lsl.w	r0, r3, r0
   18df4:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   18df8:	bd08      	pop	{r3, pc}
   18dfa:	bf00      	nop
   18dfc:	40006000 	.word	0x40006000

00018e00 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   18e00:	3801      	subs	r0, #1
   18e02:	bf00      	nop
   18e04:	bf00      	nop
   18e06:	bf00      	nop
   18e08:	bf00      	nop
   18e0a:	bf00      	nop
   18e0c:	bf00      	nop
   18e0e:	bf00      	nop
   18e10:	bf00      	nop
   18e12:	bf00      	nop
   18e14:	bf00      	nop
   18e16:	bf00      	nop
   18e18:	bf00      	nop
   18e1a:	bf00      	nop
   18e1c:	bf00      	nop
   18e1e:	bf00      	nop
   18e20:	bf00      	nop
   18e22:	bf00      	nop
   18e24:	bf00      	nop
   18e26:	bf00      	nop
   18e28:	bf00      	nop
   18e2a:	bf00      	nop
   18e2c:	bf00      	nop
   18e2e:	bf00      	nop
   18e30:	bf00      	nop
   18e32:	bf00      	nop
   18e34:	bf00      	nop
   18e36:	bf00      	nop
   18e38:	bf00      	nop
   18e3a:	bf00      	nop
   18e3c:	bf00      	nop
   18e3e:	bf00      	nop
   18e40:	bf00      	nop
   18e42:	bf00      	nop
   18e44:	bf00      	nop
   18e46:	bf00      	nop
   18e48:	bf00      	nop
   18e4a:	bf00      	nop
   18e4c:	bf00      	nop
   18e4e:	bf00      	nop
   18e50:	bf00      	nop
   18e52:	bf00      	nop
   18e54:	bf00      	nop
   18e56:	bf00      	nop
   18e58:	bf00      	nop
   18e5a:	bf00      	nop
   18e5c:	bf00      	nop
   18e5e:	bf00      	nop
   18e60:	bf00      	nop
   18e62:	bf00      	nop
   18e64:	bf00      	nop
   18e66:	bf00      	nop
   18e68:	bf00      	nop
   18e6a:	bf00      	nop
   18e6c:	bf00      	nop
   18e6e:	bf00      	nop
   18e70:	bf00      	nop
   18e72:	bf00      	nop
   18e74:	bf00      	nop
   18e76:	d1c3      	bne.n	18e00 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   18e78:	4770      	bx	lr
	...

00018e7c <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   18e7c:	2801      	cmp	r0, #1
   18e7e:	d806      	bhi.n	18e8e <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   18e80:	4b06      	ldr	r3, [pc, #24]	; (18e9c <hal_i2c_resolve+0x20>)
   18e82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18e86:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   18e88:	b12b      	cbz	r3, 18e96 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   18e8a:	2000      	movs	r0, #0
}
   18e8c:	4770      	bx	lr
        *out_i2c = NULL;
   18e8e:	2300      	movs	r3, #0
   18e90:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   18e92:	2002      	movs	r0, #2
   18e94:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   18e96:	2002      	movs	r0, #2
   18e98:	4770      	bx	lr
   18e9a:	bf00      	nop
   18e9c:	00020f10 	.word	0x00020f10

00018ea0 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   18ea0:	b148      	cbz	r0, 18eb6 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   18ea2:	f010 0f04 	tst.w	r0, #4
   18ea6:	d107      	bne.n	18eb8 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   18ea8:	f010 0f02 	tst.w	r0, #2
   18eac:	d101      	bne.n	18eb2 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   18eae:	2001      	movs	r0, #1
    }
}
   18eb0:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   18eb2:	2004      	movs	r0, #4
   18eb4:	4770      	bx	lr
   18eb6:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   18eb8:	2005      	movs	r0, #5
   18eba:	4770      	bx	lr

00018ebc <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18ec0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18ec4:	fa23 f000 	lsr.w	r0, r3, r0
}
   18ec8:	f000 0001 	and.w	r0, r0, #1
   18ecc:	4770      	bx	lr

00018ece <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   18ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ed2:	4605      	mov	r5, r0
   18ed4:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18ed6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   18eda:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   18ede:	f240 630c 	movw	r3, #1548	; 0x60c
   18ee2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18ee6:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   18eea:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   18eee:	2101      	movs	r1, #1
   18ef0:	f7ff ff0a 	bl	18d08 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   18ef4:	2101      	movs	r1, #1
   18ef6:	4630      	mov	r0, r6
   18ef8:	f7ff ff06 	bl	18d08 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   18efc:	f240 630d 	movw	r3, #1549	; 0x60d
   18f00:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   18f04:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   18f08:	2004      	movs	r0, #4
   18f0a:	f7ff ff79 	bl	18e00 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   18f0e:	2400      	movs	r4, #0
   18f10:	2c08      	cmp	r4, #8
   18f12:	dc14      	bgt.n	18f3e <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   18f14:	4630      	mov	r0, r6
   18f16:	f7ff ffd1 	bl	18ebc <read_gpio_inbuffer>
   18f1a:	b978      	cbnz	r0, 18f3c <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   18f1c:	2100      	movs	r1, #0
   18f1e:	4628      	mov	r0, r5
   18f20:	f7ff fef2 	bl	18d08 <hal_gpio_write>
        hal_i2c_delay_us(4);
   18f24:	2004      	movs	r0, #4
   18f26:	f7ff ff6b 	bl	18e00 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   18f2a:	2101      	movs	r1, #1
   18f2c:	4628      	mov	r0, r5
   18f2e:	f7ff feeb 	bl	18d08 <hal_gpio_write>
        hal_i2c_delay_us(4);
   18f32:	2004      	movs	r0, #4
   18f34:	f7ff ff64 	bl	18e00 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   18f38:	3401      	adds	r4, #1
   18f3a:	e7e9      	b.n	18f10 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   18f3c:	b154      	cbz	r4, 18f54 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   18f3e:	2100      	movs	r1, #0
   18f40:	4630      	mov	r0, r6
   18f42:	f7ff fee1 	bl	18d08 <hal_gpio_write>
    hal_i2c_delay_us(4);
   18f46:	2004      	movs	r0, #4
   18f48:	f7ff ff5a 	bl	18e00 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   18f4c:	2101      	movs	r1, #1
   18f4e:	4630      	mov	r0, r6
   18f50:	f7ff feda 	bl	18d08 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18f58:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   18f5c:	f240 620c 	movw	r2, #1548	; 0x60c
   18f60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18f64:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   18f68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   18f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018f70 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   18f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f72:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   18f74:	b1a1      	cbz	r1, 18fa0 <hal_i2c_init+0x30>
   18f76:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   18f78:	a901      	add	r1, sp, #4
   18f7a:	f7ff ff7f 	bl	18e7c <hal_i2c_resolve>
    if (rc != 0) {
   18f7e:	4606      	mov	r6, r0
   18f80:	bba8      	cbnz	r0, 18fee <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   18f82:	9b01      	ldr	r3, [sp, #4]
   18f84:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   18f86:	68a3      	ldr	r3, [r4, #8]
   18f88:	2bfa      	cmp	r3, #250	; 0xfa
   18f8a:	d035      	beq.n	18ff8 <hal_i2c_init+0x88>
   18f8c:	d90e      	bls.n	18fac <hal_i2c_init+0x3c>
   18f8e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   18f92:	d02f      	beq.n	18ff4 <hal_i2c_init+0x84>
   18f94:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   18f98:	d131      	bne.n	18ffe <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   18f9a:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   18f9e:	e009      	b.n	18fb4 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   18fa0:	2300      	movs	r3, #0
   18fa2:	461a      	mov	r2, r3
   18fa4:	4619      	mov	r1, r3
   18fa6:	4618      	mov	r0, r3
   18fa8:	f000 fc88 	bl	198bc <__assert_func>
    switch (cfg->i2c_frequency) {
   18fac:	2b64      	cmp	r3, #100	; 0x64
   18fae:	d126      	bne.n	18ffe <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   18fb0:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   18fb4:	6861      	ldr	r1, [r4, #4]
   18fb6:	6820      	ldr	r0, [r4, #0]
   18fb8:	f7ff ff89 	bl	18ece <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   18fbc:	6823      	ldr	r3, [r4, #0]
   18fbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18fc2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18fc6:	f240 610c 	movw	r1, #1548	; 0x60c
   18fca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   18fce:	6863      	ldr	r3, [r4, #4]
   18fd0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   18fd8:	6823      	ldr	r3, [r4, #0]
   18fda:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   18fde:	6863      	ldr	r3, [r4, #4]
   18fe0:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   18fe4:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   18fe8:	2305      	movs	r3, #5
   18fea:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   18fee:	4630      	mov	r0, r6
   18ff0:	b003      	add	sp, #12
   18ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   18ff4:	4f03      	ldr	r7, [pc, #12]	; (19004 <hal_i2c_init+0x94>)
        break;
   18ff6:	e7dd      	b.n	18fb4 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   18ff8:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   18ffc:	e7da      	b.n	18fb4 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   18ffe:	2602      	movs	r6, #2
   19000:	e7f5      	b.n	18fee <hal_i2c_init+0x7e>
   19002:	bf00      	nop
   19004:	06147ae9 	.word	0x06147ae9

00019008 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   19008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1900c:	b083      	sub	sp, #12
   1900e:	4688      	mov	r8, r1
   19010:	4615      	mov	r5, r2
   19012:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19014:	a901      	add	r1, sp, #4
   19016:	f7ff ff31 	bl	18e7c <hal_i2c_resolve>
    if (rc != 0) {
   1901a:	4681      	mov	r9, r0
   1901c:	b118      	cbz	r0, 19026 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1901e:	4648      	mov	r0, r9
   19020:	b003      	add	sp, #12
   19022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   19026:	9b01      	ldr	r3, [sp, #4]
   19028:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   1902a:	f898 3000 	ldrb.w	r3, [r8]
   1902e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   19032:	2300      	movs	r3, #0
   19034:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19038:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1903c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   19040:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   19044:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   19048:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1904c:	2300      	movs	r3, #0
   1904e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   19052:	2301      	movs	r3, #1
   19054:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   19056:	f000 fe61 	bl	19d1c <os_cputime_get32>
   1905a:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1905e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19062:	f7ff fe62 	bl	18d2a <hal_gpio_read>
   19066:	b1b0      	cbz	r0, 19096 <hal_i2c_master_write+0x8e>
   19068:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1906c:	b99b      	cbnz	r3, 19096 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1906e:	f000 fe55 	bl	19d1c <os_cputime_get32>
   19072:	1b80      	subs	r0, r0, r6
   19074:	2800      	cmp	r0, #0
   19076:	dbf2      	blt.n	1905e <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19078:	2300      	movs	r3, #0
   1907a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1907e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19082:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19086:	f7ff ff22 	bl	18ece <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1908a:	2305      	movs	r3, #5
   1908c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19090:	f1bb 0b01 	subs.w	fp, fp, #1
   19094:	d1da      	bne.n	1904c <hal_i2c_master_write+0x44>
    start = os_time_get();
   19096:	f001 fe2f 	bl	1acf8 <os_time_get>
   1909a:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   1909c:	464f      	mov	r7, r9
   1909e:	e003      	b.n	190a8 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   190a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190a4:	b9db      	cbnz	r3, 190de <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   190a6:	3701      	adds	r7, #1
   190a8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   190ac:	42bb      	cmp	r3, r7
   190ae:	dd24      	ble.n	190fa <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   190b0:	2300      	movs	r3, #0
   190b2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   190b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   190ba:	5ddb      	ldrb	r3, [r3, r7]
   190bc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   190c0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   190c4:	2b00      	cmp	r3, #0
   190c6:	d1eb      	bne.n	190a0 <hal_i2c_master_write+0x98>
   190c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190cc:	2b00      	cmp	r3, #0
   190ce:	d1e7      	bne.n	190a0 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   190d0:	f001 fe12 	bl	1acf8 <os_time_get>
   190d4:	1b80      	subs	r0, r0, r6
   190d6:	42a8      	cmp	r0, r5
   190d8:	d9f2      	bls.n	190c0 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   190da:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   190de:	2301      	movs	r3, #1
   190e0:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   190e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   190e6:	2b00      	cmp	r3, #0
   190e8:	d099      	beq.n	1901e <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   190ea:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   190ee:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   190f2:	f7ff fed5 	bl	18ea0 <hal_i2c_convert_status>
   190f6:	4681      	mov	r9, r0
   190f8:	e791      	b.n	1901e <hal_i2c_master_write+0x16>
    if (last_op) {
   190fa:	f1ba 0f00 	cmp.w	sl, #0
   190fe:	d08e      	beq.n	1901e <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   19100:	2300      	movs	r3, #0
   19102:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   19106:	2301      	movs	r3, #1
   19108:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1910a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1910e:	b953      	cbnz	r3, 19126 <hal_i2c_master_write+0x11e>
   19110:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19114:	b93b      	cbnz	r3, 19126 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   19116:	f001 fdef 	bl	1acf8 <os_time_get>
   1911a:	1b80      	subs	r0, r0, r6
   1911c:	42a8      	cmp	r0, r5
   1911e:	d9f4      	bls.n	1910a <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   19120:	f04f 0903 	mov.w	r9, #3
   19124:	e7db      	b.n	190de <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   19126:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1912a:	2b00      	cmp	r3, #0
   1912c:	d1d7      	bne.n	190de <hal_i2c_master_write+0xd6>
   1912e:	e776      	b.n	1901e <hal_i2c_master_write+0x16>

00019130 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   19130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19134:	b085      	sub	sp, #20
   19136:	460f      	mov	r7, r1
   19138:	4615      	mov	r5, r2
   1913a:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1913c:	a903      	add	r1, sp, #12
   1913e:	f7ff fe9d 	bl	18e7c <hal_i2c_resolve>
    if (rc != 0) {
   19142:	4681      	mov	r9, r0
   19144:	b118      	cbz	r0, 1914e <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   19146:	4648      	mov	r0, r9
   19148:	b005      	add	sp, #20
   1914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1914e:	9b03      	ldr	r3, [sp, #12]
   19150:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   19152:	f001 fdd1 	bl	1acf8 <os_time_get>
   19156:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   19158:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1915c:	b11b      	cbz	r3, 19166 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   1915e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   19162:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   19166:	2300      	movs	r3, #0
   19168:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1916c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19170:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   19174:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   19178:	783b      	ldrb	r3, [r7, #0]
   1917a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1917e:	887b      	ldrh	r3, [r7, #2]
   19180:	2b01      	cmp	r3, #1
   19182:	d02e      	beq.n	191e2 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   19184:	2301      	movs	r3, #1
   19186:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1918a:	46a2      	mov	sl, r4
    int retry = 2;
   1918c:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19190:	2300      	movs	r3, #0
   19192:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   19196:	2301      	movs	r3, #1
   19198:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1919c:	f000 fdbe 	bl	19d1c <os_cputime_get32>
   191a0:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   191a4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   191a8:	f7ff fdbf 	bl	18d2a <hal_gpio_read>
   191ac:	b1b8      	cbz	r0, 191de <hal_i2c_master_read+0xae>
   191ae:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   191b2:	b9a3      	cbnz	r3, 191de <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   191b4:	f000 fdb2 	bl	19d1c <os_cputime_get32>
   191b8:	eba0 0008 	sub.w	r0, r0, r8
   191bc:	2800      	cmp	r0, #0
   191be:	dbf1      	blt.n	191a4 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   191c0:	2300      	movs	r3, #0
   191c2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   191c6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   191ca:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   191ce:	f7ff fe7e 	bl	18ece <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   191d2:	2305      	movs	r3, #5
   191d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   191d8:	f1bb 0b01 	subs.w	fp, fp, #1
   191dc:	d1d8      	bne.n	19190 <hal_i2c_master_read+0x60>
    int retry = 2;
   191de:	46c8      	mov	r8, r9
   191e0:	e017      	b.n	19212 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   191e2:	9b01      	ldr	r3, [sp, #4]
   191e4:	2b00      	cmp	r3, #0
   191e6:	d0cd      	beq.n	19184 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   191e8:	2302      	movs	r3, #2
   191ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   191ee:	e7cc      	b.n	1918a <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   191f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191f4:	bb0b      	cbnz	r3, 1923a <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   191f6:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   191fa:	687b      	ldr	r3, [r7, #4]
   191fc:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   19200:	887b      	ldrh	r3, [r7, #2]
   19202:	3b02      	subs	r3, #2
   19204:	4543      	cmp	r3, r8
   19206:	d02a      	beq.n	1925e <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   19208:	2300      	movs	r3, #0
   1920a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   1920e:	f108 0801 	add.w	r8, r8, #1
   19212:	887b      	ldrh	r3, [r7, #2]
   19214:	4543      	cmp	r3, r8
   19216:	dd96      	ble.n	19146 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   19218:	2301      	movs	r3, #1
   1921a:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   1921c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19220:	2b00      	cmp	r3, #0
   19222:	d1e5      	bne.n	191f0 <hal_i2c_master_read+0xc0>
   19224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19228:	2b00      	cmp	r3, #0
   1922a:	d1e1      	bne.n	191f0 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   1922c:	f001 fd64 	bl	1acf8 <os_time_get>
   19230:	1b80      	subs	r0, r0, r6
   19232:	42a8      	cmp	r0, r5
   19234:	d9f2      	bls.n	1921c <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   19236:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1923a:	2301      	movs	r3, #1
   1923c:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   1923e:	2300      	movs	r3, #0
   19240:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   19244:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19248:	2b00      	cmp	r3, #0
   1924a:	f43f af7c 	beq.w	19146 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   1924e:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   19252:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   19256:	f7ff fe23 	bl	18ea0 <hal_i2c_convert_status>
   1925a:	4681      	mov	r9, r0
   1925c:	e773      	b.n	19146 <hal_i2c_master_read+0x16>
            if (last_op) {
   1925e:	9b01      	ldr	r3, [sp, #4]
   19260:	2b00      	cmp	r3, #0
   19262:	d0d1      	beq.n	19208 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   19264:	2302      	movs	r3, #2
   19266:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1926a:	e7cd      	b.n	19208 <hal_i2c_master_read+0xd8>

0001926c <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1926c:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1926e:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   19270:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19274:	b32b      	cbz	r3, 192c2 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   19276:	2300      	movs	r3, #0
   19278:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1927c:	7843      	ldrb	r3, [r0, #1]
   1927e:	b303      	cbz	r3, 192c2 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   19280:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   19284:	88c3      	ldrh	r3, [r0, #6]
   19286:	fa13 f382 	uxtah	r3, r3, r2
   1928a:	b29b      	uxth	r3, r3
   1928c:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1928e:	8881      	ldrh	r1, [r0, #4]
   19290:	428b      	cmp	r3, r1
   19292:	d217      	bcs.n	192c4 <nrf52_irqm_handler+0x58>
   19294:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   19296:	6984      	ldr	r4, [r0, #24]
   19298:	4414      	add	r4, r2
   1929a:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1929c:	1acb      	subs	r3, r1, r3
   1929e:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   192a0:	2bff      	cmp	r3, #255	; 0xff
   192a2:	bf28      	it	cs
   192a4:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   192a6:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   192aa:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   192ae:	69c1      	ldr	r1, [r0, #28]
   192b0:	b129      	cbz	r1, 192be <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   192b2:	440a      	add	r2, r1
   192b4:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   192b6:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   192ba:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   192be:	2301      	movs	r3, #1
   192c0:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   192c2:	bd38      	pop	{r3, r4, r5, pc}
   192c4:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   192c6:	6a03      	ldr	r3, [r0, #32]
   192c8:	b10b      	cbz	r3, 192ce <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   192ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
   192cc:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   192ce:	2300      	movs	r3, #0
   192d0:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   192d2:	2340      	movs	r3, #64	; 0x40
   192d4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   192d8:	e7f3      	b.n	192c2 <nrf52_irqm_handler+0x56>
	...

000192dc <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   192dc:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   192de:	4b04      	ldr	r3, [pc, #16]	; (192f0 <nrf52_spi0_irq_handler+0x14>)
   192e0:	781b      	ldrb	r3, [r3, #0]
   192e2:	b103      	cbz	r3, 192e6 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   192e4:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   192e6:	4802      	ldr	r0, [pc, #8]	; (192f0 <nrf52_spi0_irq_handler+0x14>)
   192e8:	f7ff ffc0 	bl	1926c <nrf52_irqm_handler>
}
   192ec:	e7fa      	b.n	192e4 <nrf52_spi0_irq_handler+0x8>
   192ee:	bf00      	nop
   192f0:	2000a570 	.word	0x2000a570

000192f4 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   192f4:	2301      	movs	r3, #1
   192f6:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   192f8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   192fc:	2b00      	cmp	r3, #0
   192fe:	d0fb      	beq.n	192f8 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   19300:	2300      	movs	r3, #0
   19302:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   19306:	4770      	bx	lr

00019308 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   19308:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1930a:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1930c:	780b      	ldrb	r3, [r1, #0]
   1930e:	2b03      	cmp	r3, #3
   19310:	d80c      	bhi.n	1932c <hal_spi_config_slave+0x24>
   19312:	e8df f003 	tbb	[pc, r3]
   19316:	0e02      	.short	0x0e02
   19318:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1931a:	2300      	movs	r3, #0
    rc = 0;
   1931c:	4618      	mov	r0, r3
   1931e:	e00a      	b.n	19336 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   19320:	2304      	movs	r3, #4
    rc = 0;
   19322:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   19324:	e007      	b.n	19336 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   19326:	2306      	movs	r3, #6
    rc = 0;
   19328:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1932a:	e004      	b.n	19336 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1932c:	2300      	movs	r3, #0
            rc = EINVAL;
   1932e:	2016      	movs	r0, #22
            break;
   19330:	e001      	b.n	19336 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   19332:	2302      	movs	r3, #2
    rc = 0;
   19334:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   19336:	784c      	ldrb	r4, [r1, #1]
   19338:	2c01      	cmp	r4, #1
   1933a:	d006      	beq.n	1934a <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1933c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   19340:	788b      	ldrb	r3, [r1, #2]
   19342:	b92b      	cbnz	r3, 19350 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   19344:	f85d 4b04 	ldr.w	r4, [sp], #4
   19348:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1934a:	f043 0301 	orr.w	r3, r3, #1
   1934e:	e7f5      	b.n	1933c <hal_spi_config_slave+0x34>
            rc = EINVAL;
   19350:	2016      	movs	r0, #22
    return rc;
   19352:	e7f7      	b.n	19344 <hal_spi_config_slave+0x3c>

00019354 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   19354:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   19356:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   19358:	2501      	movs	r5, #1
   1935a:	409d      	lsls	r5, r3
   1935c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19360:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   19364:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19368:	2503      	movs	r5, #3
   1936a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1936e:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   19370:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19374:	2500      	movs	r5, #0
   19376:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1937a:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1937c:	780c      	ldrb	r4, [r1, #0]
   1937e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   19382:	784c      	ldrb	r4, [r1, #1]
   19384:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   19388:	7889      	ldrb	r1, [r1, #2]
   1938a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1938e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19392:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   19396:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1939a:	4919      	ldr	r1, [pc, #100]	; (19400 <hal_spi_init_master+0xac>)
   1939c:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1939e:	3310      	adds	r3, #16
   193a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   193a4:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   193a8:	42ab      	cmp	r3, r5
   193aa:	db22      	blt.n	193f2 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   193ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   193b0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   193b4:	22e0      	movs	r2, #224	; 0xe0
   193b6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   193ba:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   193be:	2b00      	cmp	r3, #0
   193c0:	db08      	blt.n	193d4 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   193c2:	f003 011f 	and.w	r1, r3, #31
   193c6:	095b      	lsrs	r3, r3, #5
   193c8:	2201      	movs	r2, #1
   193ca:	408a      	lsls	r2, r1
   193cc:	3360      	adds	r3, #96	; 0x60
   193ce:	490d      	ldr	r1, [pc, #52]	; (19404 <hal_spi_init_master+0xb0>)
   193d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   193d4:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   193d8:	2b00      	cmp	r3, #0
   193da:	db07      	blt.n	193ec <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   193dc:	f003 011f 	and.w	r1, r3, #31
   193e0:	095b      	lsrs	r3, r3, #5
   193e2:	2201      	movs	r2, #1
   193e4:	408a      	lsls	r2, r1
   193e6:	4907      	ldr	r1, [pc, #28]	; (19404 <hal_spi_init_master+0xb0>)
   193e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   193ec:	2000      	movs	r0, #0
   193ee:	bc30      	pop	{r4, r5}
   193f0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   193f2:	f003 030f 	and.w	r3, r3, #15
   193f6:	4a04      	ldr	r2, [pc, #16]	; (19408 <hal_spi_init_master+0xb4>)
   193f8:	441a      	add	r2, r3
   193fa:	23e0      	movs	r3, #224	; 0xe0
   193fc:	7613      	strb	r3, [r2, #24]
   193fe:	e7dc      	b.n	193ba <hal_spi_init_master+0x66>
   19400:	e000ed00 	.word	0xe000ed00
   19404:	e000e100 	.word	0xe000e100
   19408:	e000ecfc 	.word	0xe000ecfc

0001940c <hal_spi_config_master>:
{
   1940c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1940e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   19410:	680c      	ldr	r4, [r1, #0]
   19412:	684b      	ldr	r3, [r1, #4]
   19414:	6084      	str	r4, [r0, #8]
   19416:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   19418:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1941c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   19420:	7808      	ldrb	r0, [r1, #0]
   19422:	2801      	cmp	r0, #1
   19424:	d916      	bls.n	19454 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   19426:	2001      	movs	r0, #1
   19428:	4098      	lsls	r0, r3
   1942a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1942e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   19432:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19436:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1943a:	2403      	movs	r4, #3
   1943c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   19440:	788b      	ldrb	r3, [r1, #2]
   19442:	b973      	cbnz	r3, 19462 <hal_spi_config_master+0x56>
    rc = 0;
   19444:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   19446:	780b      	ldrb	r3, [r1, #0]
   19448:	2b03      	cmp	r3, #3
   1944a:	d812      	bhi.n	19472 <hal_spi_config_master+0x66>
   1944c:	e8df f003 	tbb	[pc, r3]
   19450:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   19454:	2001      	movs	r0, #1
   19456:	4098      	lsls	r0, r3
   19458:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1945c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   19460:	e7e7      	b.n	19432 <hal_spi_config_master+0x26>
            rc = EINVAL;
   19462:	2016      	movs	r0, #22
   19464:	e7ef      	b.n	19446 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   19466:	2300      	movs	r3, #0
   19468:	e007      	b.n	1947a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1946a:	2304      	movs	r3, #4
            break;
   1946c:	e005      	b.n	1947a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1946e:	2306      	movs	r3, #6
            break;
   19470:	e003      	b.n	1947a <hal_spi_config_master+0x6e>
            nrf_config = 0;
   19472:	2300      	movs	r3, #0
            rc = EINVAL;
   19474:	2016      	movs	r0, #22
            break;
   19476:	e000      	b.n	1947a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   19478:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1947a:	784c      	ldrb	r4, [r1, #1]
   1947c:	2c01      	cmp	r4, #1
   1947e:	d010      	beq.n	194a2 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   19480:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   19484:	684b      	ldr	r3, [r1, #4]
   19486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1948a:	d023      	beq.n	194d4 <hal_spi_config_master+0xc8>
   1948c:	d80c      	bhi.n	194a8 <hal_spi_config_master+0x9c>
   1948e:	2bfa      	cmp	r3, #250	; 0xfa
   19490:	d029      	beq.n	194e6 <hal_spi_config_master+0xda>
   19492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   19496:	d01a      	beq.n	194ce <hal_spi_config_master+0xc2>
   19498:	2b7d      	cmp	r3, #125	; 0x7d
   1949a:	d011      	beq.n	194c0 <hal_spi_config_master+0xb4>
            frequency = 0;
   1949c:	2300      	movs	r3, #0
            rc = EINVAL;
   1949e:	2016      	movs	r0, #22
            break;
   194a0:	e010      	b.n	194c4 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   194a2:	f043 0301 	orr.w	r3, r3, #1
   194a6:	e7eb      	b.n	19480 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   194a8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   194ac:	d015      	beq.n	194da <hal_spi_config_master+0xce>
   194ae:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   194b2:	d015      	beq.n	194e0 <hal_spi_config_master+0xd4>
   194b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   194b8:	d1f0      	bne.n	1949c <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   194ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   194be:	e001      	b.n	194c4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   194c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   194c4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   194c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   194cc:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   194ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   194d2:	e7f7      	b.n	194c4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   194d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   194d8:	e7f4      	b.n	194c4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   194da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   194de:	e7f1      	b.n	194c4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   194e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   194e4:	e7ee      	b.n	194c4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   194e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   194ea:	e7eb      	b.n	194c4 <hal_spi_config_master+0xb8>

000194ec <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194ec:	2802      	cmp	r0, #2
   194ee:	dc10      	bgt.n	19512 <hal_spi_config+0x26>
{
   194f0:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194f2:	4b0b      	ldr	r3, [pc, #44]	; (19520 <hal_spi_config+0x34>)
   194f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   194f8:	b168      	cbz	r0, 19516 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   194fa:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   194fc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   19500:	b95b      	cbnz	r3, 1951a <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19502:	7803      	ldrb	r3, [r0, #0]
   19504:	b113      	cbz	r3, 1950c <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   19506:	f7ff feff 	bl	19308 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1950a:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1950c:	f7ff ff7e 	bl	1940c <hal_spi_config_master>
   19510:	e7fb      	b.n	1950a <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19512:	2016      	movs	r0, #22
}
   19514:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19516:	2016      	movs	r0, #22
   19518:	e7f7      	b.n	1950a <hal_spi_config+0x1e>
        return -1;
   1951a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1951e:	e7f4      	b.n	1950a <hal_spi_config+0x1e>
   19520:	00020f18 	.word	0x00020f18

00019524 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19524:	2802      	cmp	r0, #2
   19526:	dc1b      	bgt.n	19560 <hal_spi_enable+0x3c>
   19528:	4b10      	ldr	r3, [pc, #64]	; (1956c <hal_spi_enable+0x48>)
   1952a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1952e:	b1cb      	cbz	r3, 19564 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19530:	781a      	ldrb	r2, [r3, #0]
   19532:	b17a      	cbz	r2, 19554 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   19534:	6a1a      	ldr	r2, [r3, #32]
   19536:	b1ba      	cbz	r2, 19568 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   19538:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1953a:	2000      	movs	r0, #0
   1953c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19540:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   19544:	f240 4202 	movw	r2, #1026	; 0x402
   19548:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1954c:	2202      	movs	r2, #2
   1954e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   19552:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   19554:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   19556:	2201      	movs	r2, #1
   19558:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1955c:	2000      	movs	r0, #0
   1955e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19560:	2016      	movs	r0, #22
   19562:	4770      	bx	lr
   19564:	2016      	movs	r0, #22
   19566:	4770      	bx	lr
            rc = EINVAL;
   19568:	2016      	movs	r0, #22

err:
    return rc;
}
   1956a:	4770      	bx	lr
   1956c:	00020f18 	.word	0x00020f18

00019570 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19570:	2802      	cmp	r0, #2
   19572:	dc2a      	bgt.n	195ca <hal_spi_disable+0x5a>
{
   19574:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19576:	4b17      	ldr	r3, [pc, #92]	; (195d4 <hal_spi_disable+0x64>)
   19578:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1957c:	b33c      	cbz	r4, 195ce <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1957e:	7823      	ldrb	r3, [r4, #0]
   19580:	b9ab      	cbnz	r3, 195ae <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   19582:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19588:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1958c:	7863      	ldrb	r3, [r4, #1]
   1958e:	b943      	cbnz	r3, 195a2 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   19590:	2300      	movs	r3, #0
   19592:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   19596:	2000      	movs	r0, #0
   19598:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1959a:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1959c:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1959e:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   195a0:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   195a2:	4628      	mov	r0, r5
   195a4:	f7ff fea6 	bl	192f4 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   195a8:	2300      	movs	r3, #0
   195aa:	7063      	strb	r3, [r4, #1]
   195ac:	e7f0      	b.n	19590 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   195ae:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   195b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   195b4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   195b8:	2300      	movs	r3, #0
   195ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   195be:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   195c2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   195c6:	70e3      	strb	r3, [r4, #3]
   195c8:	e7e5      	b.n	19596 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195ca:	2016      	movs	r0, #22
}
   195cc:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195ce:	2016      	movs	r0, #22
    return rc;
   195d0:	e7e6      	b.n	195a0 <hal_spi_disable+0x30>
   195d2:	bf00      	nop
   195d4:	00020f18 	.word	0x00020f18

000195d8 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195d8:	2802      	cmp	r0, #2
   195da:	dc1d      	bgt.n	19618 <hal_spi_init+0x40>
{
   195dc:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195de:	4b13      	ldr	r3, [pc, #76]	; (1962c <hal_spi_init+0x54>)
   195e0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   195e4:	b1d4      	cbz	r4, 1961c <hal_spi_init+0x44>
    if (cfg == NULL) {
   195e6:	b1d9      	cbz	r1, 19620 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   195e8:	2a01      	cmp	r2, #1
   195ea:	d81b      	bhi.n	19624 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   195ec:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   195ee:	b9d8      	cbnz	r0, 19628 <hal_spi_init+0x50>
   195f0:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   195f2:	2303      	movs	r3, #3
   195f4:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   195f6:	b94a      	cbnz	r2, 1960c <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   195f8:	4b0d      	ldr	r3, [pc, #52]	; (19630 <hal_spi_init+0x58>)
   195fa:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   195fc:	f7ff ffb8 	bl	19570 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   19600:	4a0c      	ldr	r2, [pc, #48]	; (19634 <hal_spi_init+0x5c>)
   19602:	4629      	mov	r1, r5
   19604:	4620      	mov	r0, r4
   19606:	f7ff fea5 	bl	19354 <hal_spi_init_master>
   1960a:	e00c      	b.n	19626 <hal_spi_init+0x4e>
            assert(0);
   1960c:	2300      	movs	r3, #0
   1960e:	461a      	mov	r2, r3
   19610:	4619      	mov	r1, r3
   19612:	4618      	mov	r0, r3
   19614:	f000 f952 	bl	198bc <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19618:	2016      	movs	r0, #22
}
   1961a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1961c:	2016      	movs	r0, #22
   1961e:	e002      	b.n	19626 <hal_spi_init+0x4e>
    rc = EINVAL;
   19620:	2016      	movs	r0, #22
   19622:	e000      	b.n	19626 <hal_spi_init+0x4e>
   19624:	2016      	movs	r0, #22
}
   19626:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   19628:	2016      	movs	r0, #22
    return (rc);
   1962a:	e7fc      	b.n	19626 <hal_spi_init+0x4e>
   1962c:	00020f18 	.word	0x00020f18
   19630:	40003000 	.word	0x40003000
   19634:	000192dd 	.word	0x000192dd

00019638 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19638:	2802      	cmp	r0, #2
   1963a:	dc0a      	bgt.n	19652 <hal_spi_set_txrx_cb+0x1a>
   1963c:	4b08      	ldr	r3, [pc, #32]	; (19660 <hal_spi_set_txrx_cb+0x28>)
   1963e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19642:	b143      	cbz	r3, 19656 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   19644:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   19646:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1964a:	b930      	cbnz	r0, 1965a <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1964c:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1964e:	625a      	str	r2, [r3, #36]	; 0x24
   19650:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19652:	2016      	movs	r0, #22
   19654:	4770      	bx	lr
   19656:	2016      	movs	r0, #22
   19658:	4770      	bx	lr
        rc = -1;
   1965a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1965e:	4770      	bx	lr
   19660:	00020f18 	.word	0x00020f18

00019664 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   19664:	2b00      	cmp	r3, #0
   19666:	d046      	beq.n	196f6 <hal_spi_txrx+0x92>
{
   19668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1966a:	460d      	mov	r5, r1
   1966c:	4617      	mov	r7, r2
   1966e:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   19670:	2802      	cmp	r0, #2
   19672:	dc42      	bgt.n	196fa <hal_spi_txrx+0x96>
   19674:	4b25      	ldr	r3, [pc, #148]	; (1970c <hal_spi_txrx+0xa8>)
   19676:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1967a:	2b00      	cmp	r3, #0
   1967c:	d03f      	beq.n	196fe <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1967e:	781a      	ldrb	r2, [r3, #0]
   19680:	2a00      	cmp	r2, #0
   19682:	d13e      	bne.n	19702 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   19684:	2900      	cmp	r1, #0
   19686:	d03e      	beq.n	19706 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   19688:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1968a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1968e:	2b07      	cmp	r3, #7
   19690:	d004      	beq.n	1969c <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   19692:	b95b      	cbnz	r3, 196ac <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   19694:	2301      	movs	r3, #1
   19696:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1969a:	e007      	b.n	196ac <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1969c:	f7ff ff68 	bl	19570 <hal_spi_disable>
   196a0:	e7f8      	b.n	19694 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   196a2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   196a6:	2300      	movs	r3, #0
   196a8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   196ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196b0:	2b00      	cmp	r3, #0
   196b2:	d1f6      	bne.n	196a2 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   196b4:	782b      	ldrb	r3, [r5, #0]
   196b6:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   196ba:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   196bc:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   196be:	2200      	movs	r2, #0
   196c0:	e00d      	b.n	196de <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   196c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   196c6:	2b00      	cmp	r3, #0
   196c8:	d0fb      	beq.n	196c2 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   196ca:	2300      	movs	r3, #0
   196cc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   196d0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   196d4:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   196d6:	b10f      	cbz	r7, 196dc <hal_spi_txrx+0x78>
                *rxd = rxval;
   196d8:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   196dc:	3201      	adds	r2, #1
   196de:	42b2      	cmp	r2, r6
   196e0:	da07      	bge.n	196f2 <hal_spi_txrx+0x8e>
            if (txcnt) {
   196e2:	2900      	cmp	r1, #0
   196e4:	d0ed      	beq.n	196c2 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   196e6:	786b      	ldrb	r3, [r5, #1]
   196e8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   196ec:	3901      	subs	r1, #1
                ++txd;
   196ee:	3501      	adds	r5, #1
   196f0:	e7e7      	b.n	196c2 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   196f2:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   196f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   196f6:	2016      	movs	r0, #22
}
   196f8:	4770      	bx	lr
    return rc;
   196fa:	2016      	movs	r0, #22
   196fc:	e7fa      	b.n	196f4 <hal_spi_txrx+0x90>
   196fe:	2016      	movs	r0, #22
   19700:	e7f8      	b.n	196f4 <hal_spi_txrx+0x90>
   19702:	2016      	movs	r0, #22
   19704:	e7f6      	b.n	196f4 <hal_spi_txrx+0x90>
   19706:	2016      	movs	r0, #22
   19708:	e7f4      	b.n	196f4 <hal_spi_txrx+0x90>
   1970a:	bf00      	nop
   1970c:	00020f18 	.word	0x00020f18

00019710 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19710:	2802      	cmp	r0, #2
   19712:	dc57      	bgt.n	197c4 <hal_spi_txrx_noblock+0xb4>
{
   19714:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19716:	4c35      	ldr	r4, [pc, #212]	; (197ec <hal_spi_txrx_noblock+0xdc>)
   19718:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1971c:	2800      	cmp	r0, #0
   1971e:	d053      	beq.n	197c8 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   19720:	6a04      	ldr	r4, [r0, #32]
   19722:	2c00      	cmp	r4, #0
   19724:	d052      	beq.n	197cc <hal_spi_txrx_noblock+0xbc>
   19726:	2b00      	cmp	r3, #0
   19728:	d052      	beq.n	197d0 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1972a:	7804      	ldrb	r4, [r0, #0]
   1972c:	2c00      	cmp	r4, #0
   1972e:	d137      	bne.n	197a0 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   19730:	2900      	cmp	r1, #0
   19732:	d050      	beq.n	197d6 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   19734:	7844      	ldrb	r4, [r0, #1]
   19736:	2c00      	cmp	r4, #0
   19738:	d14f      	bne.n	197da <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1973a:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1973c:	2540      	movs	r5, #64	; 0x40
   1973e:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   19742:	2501      	movs	r5, #1
   19744:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   19746:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1974a:	2d07      	cmp	r5, #7
   1974c:	d005      	beq.n	1975a <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1974e:	2500      	movs	r5, #0
   19750:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   19754:	2507      	movs	r5, #7
   19756:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1975a:	2500      	movs	r5, #0
   1975c:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1975e:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   19760:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   19762:	2bff      	cmp	r3, #255	; 0xff
   19764:	bfa8      	it	ge
   19766:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   19768:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1976c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   19770:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   19772:	b172      	cbz	r2, 19792 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   19774:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   19778:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1977c:	2000      	movs	r0, #0
   1977e:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   19782:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   19786:	2301      	movs	r3, #1
   19788:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1978a:	2340      	movs	r3, #64	; 0x40
   1978c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   19790:	e01f      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   19792:	3002      	adds	r0, #2
   19794:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   19798:	2301      	movs	r3, #1
   1979a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1979e:	e7ed      	b.n	1977c <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   197a0:	b161      	cbz	r1, 197bc <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   197a2:	2bff      	cmp	r3, #255	; 0xff
   197a4:	dc1c      	bgt.n	197e0 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   197a6:	78c4      	ldrb	r4, [r0, #3]
   197a8:	b9e4      	cbnz	r4, 197e4 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   197aa:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   197ac:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   197ae:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   197b0:	2301      	movs	r3, #1
   197b2:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   197b4:	6902      	ldr	r2, [r0, #16]
   197b6:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   197b8:	2000      	movs	r0, #0
   197ba:	e00a      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   197bc:	2a00      	cmp	r2, #0
   197be:	d1f0      	bne.n	197a2 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   197c0:	2016      	movs	r0, #22
   197c2:	e006      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   197c4:	2016      	movs	r0, #22

err:
    return rc;
}
   197c6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   197c8:	2016      	movs	r0, #22
   197ca:	e002      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   197cc:	2016      	movs	r0, #22
   197ce:	e000      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
   197d0:	2016      	movs	r0, #22
}
   197d2:	bc30      	pop	{r4, r5}
   197d4:	4770      	bx	lr
    rc = EINVAL;
   197d6:	2016      	movs	r0, #22
   197d8:	e7fb      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   197da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197de:	e7f8      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   197e0:	2016      	movs	r0, #22
   197e2:	e7f6      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   197e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197e8:	e7f3      	b.n	197d2 <hal_spi_txrx_noblock+0xc2>
   197ea:	bf00      	nop
   197ec:	00020f18 	.word	0x00020f18

000197f0 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   197f0:	b508      	push	{r3, lr}
    assert(0);
   197f2:	2300      	movs	r3, #0
   197f4:	461a      	mov	r2, r3
   197f6:	4619      	mov	r1, r3
   197f8:	4618      	mov	r0, r3
   197fa:	f000 f85f 	bl	198bc <__assert_func>
	...

00019800 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   19800:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   19802:	4b06      	ldr	r3, [pc, #24]	; (1981c <nrf52_wdt_irq_handler+0x1c>)
   19804:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   19808:	f013 0f01 	tst.w	r3, #1
   1980c:	d100      	bne.n	19810 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1980e:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   19810:	4b02      	ldr	r3, [pc, #8]	; (1981c <nrf52_wdt_irq_handler+0x1c>)
   19812:	2200      	movs	r2, #0
   19814:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   19818:	f7ff ffea 	bl	197f0 <nrf52_hal_wdt_default_handler>
   1981c:	40010000 	.word	0x40010000

00019820 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   19820:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   19822:	4b17      	ldr	r3, [pc, #92]	; (19880 <hal_watchdog_init+0x60>)
   19824:	2201      	movs	r2, #1
   19826:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1982a:	4b16      	ldr	r3, [pc, #88]	; (19884 <hal_watchdog_init+0x64>)
   1982c:	4298      	cmp	r0, r3
   1982e:	d821      	bhi.n	19874 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   19830:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   19834:	0153      	lsls	r3, r2, #5
   19836:	4a14      	ldr	r2, [pc, #80]	; (19888 <hal_watchdog_init+0x68>)
   19838:	fba2 2303 	umull	r2, r3, r2, r3
   1983c:	08db      	lsrs	r3, r3, #3
   1983e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   19842:	4b0f      	ldr	r3, [pc, #60]	; (19880 <hal_watchdog_init+0x60>)
   19844:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19848:	4a10      	ldr	r2, [pc, #64]	; (1988c <hal_watchdog_init+0x6c>)
   1984a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1984c:	4910      	ldr	r1, [pc, #64]	; (19890 <hal_watchdog_init+0x70>)
   1984e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19852:	4a10      	ldr	r2, [pc, #64]	; (19894 <hal_watchdog_init+0x74>)
   19854:	21e0      	movs	r1, #224	; 0xe0
   19856:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1985a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1985e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19862:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   19864:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   19868:	f042 0201 	orr.w	r2, r2, #1
   1986c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   19870:	2000      	movs	r0, #0
   19872:	bd08      	pop	{r3, pc}
        assert(0);
   19874:	2300      	movs	r3, #0
   19876:	461a      	mov	r2, r3
   19878:	4619      	mov	r1, r3
   1987a:	4618      	mov	r0, r3
   1987c:	f000 f81e 	bl	198bc <__assert_func>
   19880:	40010000 	.word	0x40010000
   19884:	02aaaaaa 	.word	0x02aaaaaa
   19888:	10624dd3 	.word	0x10624dd3
   1988c:	e000ed00 	.word	0xe000ed00
   19890:	00019801 	.word	0x00019801
   19894:	e000e100 	.word	0xe000e100

00019898 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   19898:	4b02      	ldr	r3, [pc, #8]	; (198a4 <hal_watchdog_enable+0xc>)
   1989a:	2201      	movs	r2, #1
   1989c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   198a0:	601a      	str	r2, [r3, #0]
}
   198a2:	4770      	bx	lr
   198a4:	40010000 	.word	0x40010000

000198a8 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   198a8:	4b02      	ldr	r3, [pc, #8]	; (198b4 <hal_watchdog_tickle+0xc>)
   198aa:	4a03      	ldr	r2, [pc, #12]	; (198b8 <hal_watchdog_tickle+0x10>)
   198ac:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   198b0:	4770      	bx	lr
   198b2:	bf00      	nop
   198b4:	40010000 	.word	0x40010000
   198b8:	6e524635 	.word	0x6e524635

000198bc <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   198bc:	b508      	push	{r3, lr}
   198be:	4675      	mov	r5, lr
   198c0:	4604      	mov	r4, r0
   198c2:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   198c4:	f001 fa90 	bl	1ade8 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   198c8:	f7ff f905 	bl	18ad6 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   198cc:	b18c      	cbz	r4, 198f2 <__assert_func+0x36>
   198ce:	4633      	mov	r3, r6
   198d0:	4622      	mov	r2, r4
   198d2:	4629      	mov	r1, r5
   198d4:	4809      	ldr	r0, [pc, #36]	; (198fc <__assert_func+0x40>)
   198d6:	f7ff f929 	bl	18b2c <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   198da:	f7ee fc53 	bl	8184 <hal_debugger_connected>
   198de:	b100      	cbz	r0, 198e2 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   198e0:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   198e2:	4b07      	ldr	r3, [pc, #28]	; (19900 <__assert_func+0x44>)
   198e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   198e8:	605a      	str	r2, [r3, #4]
    asm("isb");
   198ea:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   198ee:	f7ee fc51 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   198f2:	4629      	mov	r1, r5
   198f4:	4803      	ldr	r0, [pc, #12]	; (19904 <__assert_func+0x48>)
   198f6:	f7ff f919 	bl	18b2c <console_printf>
   198fa:	e7ee      	b.n	198da <__assert_func+0x1e>
   198fc:	00020f34 	.word	0x00020f34
   19900:	e000ed00 	.word	0xe000ed00
   19904:	00020f24 	.word	0x00020f24

00019908 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   19908:	b500      	push	{lr}
   1990a:	b083      	sub	sp, #12
   1990c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1990e:	f7ff f8e2 	bl	18ad6 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   19912:	4d1b      	ldr	r5, [pc, #108]	; (19980 <os_default_irq+0x78>)
   19914:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   19916:	6822      	ldr	r2, [r4, #0]
   19918:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1991c:	4819      	ldr	r0, [pc, #100]	; (19984 <os_default_irq+0x7c>)
   1991e:	f7ff f905 	bl	18b2c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   19922:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   19924:	6883      	ldr	r3, [r0, #8]
   19926:	6842      	ldr	r2, [r0, #4]
   19928:	6801      	ldr	r1, [r0, #0]
   1992a:	68c0      	ldr	r0, [r0, #12]
   1992c:	9000      	str	r0, [sp, #0]
   1992e:	4816      	ldr	r0, [pc, #88]	; (19988 <os_default_irq+0x80>)
   19930:	f7ff f8fc 	bl	18b2c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   19934:	6923      	ldr	r3, [r4, #16]
   19936:	9300      	str	r3, [sp, #0]
   19938:	68e3      	ldr	r3, [r4, #12]
   1993a:	68a2      	ldr	r2, [r4, #8]
   1993c:	6861      	ldr	r1, [r4, #4]
   1993e:	4813      	ldr	r0, [pc, #76]	; (1998c <os_default_irq+0x84>)
   19940:	f7ff f8f4 	bl	18b2c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   19944:	6a23      	ldr	r3, [r4, #32]
   19946:	9300      	str	r3, [sp, #0]
   19948:	69e3      	ldr	r3, [r4, #28]
   1994a:	69a2      	ldr	r2, [r4, #24]
   1994c:	6961      	ldr	r1, [r4, #20]
   1994e:	4810      	ldr	r0, [pc, #64]	; (19990 <os_default_irq+0x88>)
   19950:	f7ff f8ec 	bl	18b2c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   19954:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   19956:	6983      	ldr	r3, [r0, #24]
   19958:	6942      	ldr	r2, [r0, #20]
   1995a:	6901      	ldr	r1, [r0, #16]
   1995c:	69c0      	ldr	r0, [r0, #28]
   1995e:	9000      	str	r0, [sp, #0]
   19960:	480c      	ldr	r0, [pc, #48]	; (19994 <os_default_irq+0x8c>)
   19962:	f7ff f8e3 	bl	18b2c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   19966:	6869      	ldr	r1, [r5, #4]
   19968:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1996a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1996c:	480a      	ldr	r0, [pc, #40]	; (19998 <os_default_irq+0x90>)
   1996e:	f7ff f8dd 	bl	18b2c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   19972:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   19974:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   19976:	4809      	ldr	r0, [pc, #36]	; (1999c <os_default_irq+0x94>)
   19978:	f7ff f8d8 	bl	18b2c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1997c:	f7ee fc0a 	bl	8194 <hal_system_reset>
   19980:	e000ed00 	.word	0xe000ed00
   19984:	00020f4c 	.word	0x00020f4c
   19988:	00020f80 	.word	0x00020f80
   1998c:	00020fb4 	.word	0x00020fb4
   19990:	00020fe8 	.word	0x00020fe8
   19994:	0002101c 	.word	0x0002101c
   19998:	00021050 	.word	0x00021050
   1999c:	00021078 	.word	0x00021078

000199a0 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   199a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   199a2:	f7ff ff81 	bl	198a8 <hal_watchdog_tickle>
    sanity_last = 0;
   199a6:	2500      	movs	r5, #0
   199a8:	e00b      	b.n	199c2 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   199aa:	f000 fec7 	bl	1a73c <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   199ae:	f7ff ff7b 	bl	198a8 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   199b2:	4625      	mov	r5, r4
   199b4:	e011      	b.n	199da <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   199b6:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   199b8:	f002 f842 	bl	1ba40 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   199bc:	4638      	mov	r0, r7
   199be:	f001 fa19 	bl	1adf4 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   199c2:	4a14      	ldr	r2, [pc, #80]	; (19a14 <os_idle_task+0x74>)
   199c4:	6813      	ldr	r3, [r2, #0]
   199c6:	3301      	adds	r3, #1
   199c8:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   199ca:	f001 f995 	bl	1acf8 <os_time_get>
   199ce:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   199d0:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   199d4:	1ac3      	subs	r3, r0, r3
   199d6:	2b00      	cmp	r3, #0
   199d8:	dce7      	bgt.n	199aa <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   199da:	f001 fa05 	bl	1ade8 <os_arch_save_sr>
   199de:	4607      	mov	r7, r0
        now = os_time_get();
   199e0:	f001 f98a 	bl	1acf8 <os_time_get>
   199e4:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   199e6:	f000 ffd7 	bl	1a998 <os_sched_wakeup_ticks>
   199ea:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   199ec:	4630      	mov	r0, r6
   199ee:	f000 f975 	bl	19cdc <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   199f2:	42a0      	cmp	r0, r4
   199f4:	bf28      	it	cs
   199f6:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   199f8:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   199fc:	1b9b      	subs	r3, r3, r6
   199fe:	4298      	cmp	r0, r3
   19a00:	bf28      	it	cs
   19a02:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   19a04:	280b      	cmp	r0, #11
   19a06:	d9d6      	bls.n	199b6 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   19a08:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   19a0c:	d9d4      	bls.n	199b8 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   19a0e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   19a12:	e7d1      	b.n	199b8 <os_idle_task+0x18>
   19a14:	2000a63c 	.word	0x2000a63c

00019a18 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   19a18:	b508      	push	{r3, lr}
   19a1a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   19a1c:	2100      	movs	r1, #0
   19a1e:	4608      	mov	r0, r1
   19a20:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   19a22:	2300      	movs	r3, #0
   19a24:	461a      	mov	r2, r3
   19a26:	4619      	mov	r1, r3
   19a28:	4618      	mov	r0, r3
   19a2a:	f7ff ff47 	bl	198bc <__assert_func>
	...

00019a30 <os_started>:
}
   19a30:	4b01      	ldr	r3, [pc, #4]	; (19a38 <os_started+0x8>)
   19a32:	6818      	ldr	r0, [r3, #0]
   19a34:	4770      	bx	lr
   19a36:	bf00      	nop
   19a38:	2000a638 	.word	0x2000a638

00019a3c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   19a3c:	b500      	push	{lr}
   19a3e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   19a40:	2340      	movs	r3, #64	; 0x40
   19a42:	9303      	str	r3, [sp, #12]
   19a44:	4b15      	ldr	r3, [pc, #84]	; (19a9c <os_init_idle_task+0x60>)
   19a46:	9302      	str	r3, [sp, #8]
   19a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a4c:	9301      	str	r3, [sp, #4]
   19a4e:	23ff      	movs	r3, #255	; 0xff
   19a50:	9300      	str	r3, [sp, #0]
   19a52:	2300      	movs	r3, #0
   19a54:	4a12      	ldr	r2, [pc, #72]	; (19aa0 <os_init_idle_task+0x64>)
   19a56:	4913      	ldr	r1, [pc, #76]	; (19aa4 <os_init_idle_task+0x68>)
   19a58:	4813      	ldr	r0, [pc, #76]	; (19aa8 <os_init_idle_task+0x6c>)
   19a5a:	f001 f88d 	bl	1ab78 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   19a5e:	b950      	cbnz	r0, 19a76 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   19a60:	f000 fea2 	bl	1a7a8 <os_sanity_init>
    assert(rc == 0);
   19a64:	b968      	cbnz	r0, 19a82 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   19a66:	f247 5030 	movw	r0, #30000	; 0x7530
   19a6a:	f7ff fed9 	bl	19820 <hal_watchdog_init>
    assert(rc == 0);
   19a6e:	b970      	cbnz	r0, 19a8e <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   19a70:	b005      	add	sp, #20
   19a72:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   19a76:	2300      	movs	r3, #0
   19a78:	461a      	mov	r2, r3
   19a7a:	4619      	mov	r1, r3
   19a7c:	4618      	mov	r0, r3
   19a7e:	f7ff ff1d 	bl	198bc <__assert_func>
    assert(rc == 0);
   19a82:	2300      	movs	r3, #0
   19a84:	461a      	mov	r2, r3
   19a86:	4619      	mov	r1, r3
   19a88:	4618      	mov	r0, r3
   19a8a:	f7ff ff17 	bl	198bc <__assert_func>
    assert(rc == 0);
   19a8e:	2300      	movs	r3, #0
   19a90:	461a      	mov	r2, r3
   19a92:	4619      	mov	r1, r3
   19a94:	4618      	mov	r0, r3
   19a96:	f7ff ff11 	bl	198bc <__assert_func>
   19a9a:	bf00      	nop
   19a9c:	20001720 	.word	0x20001720
   19aa0:	000199a1 	.word	0x000199a1
   19aa4:	0002109c 	.word	0x0002109c
   19aa8:	2000a598 	.word	0x2000a598

00019aac <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   19aac:	b510      	push	{r4, lr}
   19aae:	b084      	sub	sp, #16
   19ab0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   19ab2:	4b24      	ldr	r3, [pc, #144]	; (19b44 <os_init+0x98>)
   19ab4:	2200      	movs	r2, #0
   19ab6:	601a      	str	r2, [r3, #0]
   19ab8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   19aba:	4b23      	ldr	r3, [pc, #140]	; (19b48 <os_init+0x9c>)
   19abc:	601a      	str	r2, [r3, #0]
   19abe:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   19ac0:	f000 faba 	bl	1a038 <os_eventq_dflt_get>
   19ac4:	f000 fa0e 	bl	19ee4 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   19ac8:	f000 fa04 	bl	19ed4 <os_dev_reset>

    err = os_arch_os_init();
   19acc:	f001 f9c6 	bl	1ae5c <os_arch_os_init>
    assert(err == OS_OK);
   19ad0:	bb00      	cbnz	r0, 19b14 <os_init+0x68>

    if (main_fn) {
   19ad2:	b18c      	cbz	r4, 19af8 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   19ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19ad8:	9303      	str	r3, [sp, #12]
   19ada:	4b1c      	ldr	r3, [pc, #112]	; (19b4c <os_init+0xa0>)
   19adc:	9302      	str	r3, [sp, #8]
   19ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ae2:	9301      	str	r3, [sp, #4]
   19ae4:	237f      	movs	r3, #127	; 0x7f
   19ae6:	9300      	str	r3, [sp, #0]
   19ae8:	4623      	mov	r3, r4
   19aea:	4a19      	ldr	r2, [pc, #100]	; (19b50 <os_init+0xa4>)
   19aec:	4919      	ldr	r1, [pc, #100]	; (19b54 <os_init+0xa8>)
   19aee:	481a      	ldr	r0, [pc, #104]	; (19b58 <os_init+0xac>)
   19af0:	f001 f842 	bl	1ab78 <os_task_init>
   19af4:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   19af6:	b998      	cbnz	r0, 19b20 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   19af8:	f001 fe72 	bl	1b7e0 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   19afc:	2001      	movs	r0, #1
   19afe:	f000 f985 	bl	19e0c <os_dev_initialize_all>
   19b02:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19b04:	b990      	cbnz	r0, 19b2c <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   19b06:	2002      	movs	r0, #2
   19b08:	f000 f980 	bl	19e0c <os_dev_initialize_all>
   19b0c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19b0e:	b998      	cbnz	r0, 19b38 <os_init+0x8c>
}
   19b10:	b004      	add	sp, #16
   19b12:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   19b14:	2300      	movs	r3, #0
   19b16:	461a      	mov	r2, r3
   19b18:	4619      	mov	r1, r3
   19b1a:	4618      	mov	r0, r3
   19b1c:	f7ff fece 	bl	198bc <__assert_func>
        assert(err == 0);
   19b20:	2300      	movs	r3, #0
   19b22:	461a      	mov	r2, r3
   19b24:	4619      	mov	r1, r3
   19b26:	4618      	mov	r0, r3
   19b28:	f7ff fec8 	bl	198bc <__assert_func>
    assert(err == OS_OK);
   19b2c:	2300      	movs	r3, #0
   19b2e:	461a      	mov	r2, r3
   19b30:	4619      	mov	r1, r3
   19b32:	4618      	mov	r0, r3
   19b34:	f7ff fec2 	bl	198bc <__assert_func>
    assert(err == OS_OK);
   19b38:	2300      	movs	r3, #0
   19b3a:	461a      	mov	r2, r3
   19b3c:	4619      	mov	r1, r3
   19b3e:	4618      	mov	r0, r3
   19b40:	f7ff febc 	bl	198bc <__assert_func>
   19b44:	2000a640 	.word	0x2000a640
   19b48:	2000a668 	.word	0x2000a668
   19b4c:	20001820 	.word	0x20001820
   19b50:	00019a19 	.word	0x00019a19
   19b54:	00021094 	.word	0x00021094
   19b58:	2000a5e8 	.word	0x2000a5e8

00019b5c <os_start>:

void
os_start(void)
{
   19b5c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   19b5e:	f7ff fe9b 	bl	19898 <hal_watchdog_enable>

    err = os_arch_os_start();
   19b62:	f001 f9db 	bl	1af1c <os_arch_os_start>
    assert(err == OS_OK);
   19b66:	b900      	cbnz	r0, 19b6a <os_start+0xe>
#else
    assert(0);
#endif
}
   19b68:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   19b6a:	2300      	movs	r3, #0
   19b6c:	461a      	mov	r2, r3
   19b6e:	4619      	mov	r1, r3
   19b70:	4618      	mov	r0, r3
   19b72:	f7ff fea3 	bl	198bc <__assert_func>
	...

00019b78 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   19b78:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19b7a:	4b0c      	ldr	r3, [pc, #48]	; (19bac <os_pkg_init+0x34>)
   19b7c:	781b      	ldrb	r3, [r3, #0]
   19b7e:	b14b      	cbz	r3, 19b94 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   19b80:	2003      	movs	r0, #3
   19b82:	f000 f943 	bl	19e0c <os_dev_initialize_all>
   19b86:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19b88:	b948      	cbnz	r0, 19b9e <os_pkg_init+0x26>

    os_mempool_module_init();
   19b8a:	f000 fc25 	bl	1a3d8 <os_mempool_module_init>
    os_msys_init();
   19b8e:	f000 fcad 	bl	1a4ec <os_msys_init>
}
   19b92:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19b94:	461a      	mov	r2, r3
   19b96:	4619      	mov	r1, r3
   19b98:	4618      	mov	r0, r3
   19b9a:	f7ff fe8f 	bl	198bc <__assert_func>
    assert(err == OS_OK);
   19b9e:	2300      	movs	r3, #0
   19ba0:	461a      	mov	r2, r3
   19ba2:	4619      	mov	r1, r3
   19ba4:	4618      	mov	r0, r3
   19ba6:	f7ff fe89 	bl	198bc <__assert_func>
   19baa:	bf00      	nop
   19bac:	2000a56c 	.word	0x2000a56c

00019bb0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   19bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19bb2:	4604      	mov	r4, r0
   19bb4:	460d      	mov	r5, r1
   19bb6:	4617      	mov	r7, r2
   19bb8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   19bba:	2220      	movs	r2, #32
   19bbc:	2100      	movs	r1, #0
   19bbe:	f001 fa80 	bl	1b0c2 <memset>
    c->c_ev.ev_cb = ev_cb;
   19bc2:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   19bc4:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   19bc6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   19bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019bcc <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   19bcc:	b538      	push	{r3, r4, r5, lr}
   19bce:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   19bd0:	f001 f90a 	bl	1ade8 <os_arch_save_sr>
   19bd4:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   19bd6:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   19bd8:	b13b      	cbz	r3, 19bea <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19bda:	69a2      	ldr	r2, [r4, #24]
   19bdc:	b172      	cbz	r2, 19bfc <os_callout_stop+0x30>
   19bde:	61d3      	str	r3, [r2, #28]
   19be0:	69e3      	ldr	r3, [r4, #28]
   19be2:	69a2      	ldr	r2, [r4, #24]
   19be4:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   19be6:	2300      	movs	r3, #0
   19be8:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   19bea:	6920      	ldr	r0, [r4, #16]
   19bec:	b110      	cbz	r0, 19bf4 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   19bee:	4621      	mov	r1, r4
   19bf0:	f000 fa02 	bl	19ff8 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   19bf4:	4628      	mov	r0, r5
   19bf6:	f001 f8fd 	bl	1adf4 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   19bfa:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19bfc:	4a01      	ldr	r2, [pc, #4]	; (19c04 <os_callout_stop+0x38>)
   19bfe:	6053      	str	r3, [r2, #4]
   19c00:	e7ee      	b.n	19be0 <os_callout_stop+0x14>
   19c02:	bf00      	nop
   19c04:	2000a640 	.word	0x2000a640

00019c08 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   19c08:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   19c0a:	6903      	ldr	r3, [r0, #16]
   19c0c:	b1c3      	cbz	r3, 19c40 <os_callout_reset+0x38>
   19c0e:	4605      	mov	r5, r0
   19c10:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   19c12:	2900      	cmp	r1, #0
   19c14:	db2f      	blt.n	19c76 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   19c16:	f001 f8e7 	bl	1ade8 <os_arch_save_sr>
   19c1a:	4606      	mov	r6, r0

    os_callout_stop(c);
   19c1c:	4628      	mov	r0, r5
   19c1e:	f7ff ffd5 	bl	19bcc <os_callout_stop>

    if (ticks == 0) {
   19c22:	b904      	cbnz	r4, 19c26 <os_callout_reset+0x1e>
        ticks = 1;
   19c24:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   19c26:	f001 f867 	bl	1acf8 <os_time_get>
   19c2a:	4420      	add	r0, r4
   19c2c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19c2e:	4b13      	ldr	r3, [pc, #76]	; (19c7c <os_callout_reset+0x74>)
   19c30:	681b      	ldr	r3, [r3, #0]
   19c32:	b153      	cbz	r3, 19c4a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   19c34:	695a      	ldr	r2, [r3, #20]
   19c36:	1a82      	subs	r2, r0, r2
   19c38:	2a00      	cmp	r2, #0
   19c3a:	db06      	blt.n	19c4a <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19c3c:	699b      	ldr	r3, [r3, #24]
   19c3e:	e7f8      	b.n	19c32 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   19c40:	461a      	mov	r2, r3
   19c42:	4619      	mov	r1, r3
   19c44:	4618      	mov	r0, r3
   19c46:	f7ff fe39 	bl	198bc <__assert_func>
            break;
        }
    }

    if (entry) {
   19c4a:	b15b      	cbz	r3, 19c64 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   19c4c:	69da      	ldr	r2, [r3, #28]
   19c4e:	61ea      	str	r2, [r5, #28]
   19c50:	61ab      	str	r3, [r5, #24]
   19c52:	69da      	ldr	r2, [r3, #28]
   19c54:	6015      	str	r5, [r2, #0]
   19c56:	3518      	adds	r5, #24
   19c58:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   19c5a:	4630      	mov	r0, r6
   19c5c:	f001 f8ca 	bl	1adf4 <os_arch_restore_sr>

    ret = OS_OK;
   19c60:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   19c62:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   19c64:	2300      	movs	r3, #0
   19c66:	61ab      	str	r3, [r5, #24]
   19c68:	4b04      	ldr	r3, [pc, #16]	; (19c7c <os_callout_reset+0x74>)
   19c6a:	685a      	ldr	r2, [r3, #4]
   19c6c:	61ea      	str	r2, [r5, #28]
   19c6e:	6015      	str	r5, [r2, #0]
   19c70:	3518      	adds	r5, #24
   19c72:	605d      	str	r5, [r3, #4]
   19c74:	e7f1      	b.n	19c5a <os_callout_reset+0x52>
        ret = OS_EINVAL;
   19c76:	2002      	movs	r0, #2
    return ret;
   19c78:	e7f3      	b.n	19c62 <os_callout_reset+0x5a>
   19c7a:	bf00      	nop
   19c7c:	2000a640 	.word	0x2000a640

00019c80 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   19c80:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   19c82:	f001 f839 	bl	1acf8 <os_time_get>
   19c86:	4605      	mov	r5, r0
   19c88:	e00f      	b.n	19caa <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19c8a:	69e2      	ldr	r2, [r4, #28]
   19c8c:	4b12      	ldr	r3, [pc, #72]	; (19cd8 <os_callout_tick+0x58>)
   19c8e:	605a      	str	r2, [r3, #4]
   19c90:	69e3      	ldr	r3, [r4, #28]
   19c92:	69a2      	ldr	r2, [r4, #24]
   19c94:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   19c96:	2300      	movs	r3, #0
   19c98:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   19c9a:	f001 f8ab 	bl	1adf4 <os_arch_restore_sr>

        if (c) {
   19c9e:	b1d4      	cbz	r4, 19cd6 <os_callout_tick+0x56>
            if (c->c_evq) {
   19ca0:	6920      	ldr	r0, [r4, #16]
   19ca2:	b9a0      	cbnz	r0, 19cce <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   19ca4:	6863      	ldr	r3, [r4, #4]
   19ca6:	4620      	mov	r0, r4
   19ca8:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   19caa:	f001 f89d 	bl	1ade8 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   19cae:	4b0a      	ldr	r3, [pc, #40]	; (19cd8 <os_callout_tick+0x58>)
   19cb0:	681c      	ldr	r4, [r3, #0]
        if (c) {
   19cb2:	2c00      	cmp	r4, #0
   19cb4:	d0f1      	beq.n	19c9a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   19cb6:	6963      	ldr	r3, [r4, #20]
   19cb8:	1aeb      	subs	r3, r5, r3
   19cba:	2b00      	cmp	r3, #0
   19cbc:	db05      	blt.n	19cca <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19cbe:	69a3      	ldr	r3, [r4, #24]
   19cc0:	2b00      	cmp	r3, #0
   19cc2:	d0e2      	beq.n	19c8a <os_callout_tick+0xa>
   19cc4:	69e2      	ldr	r2, [r4, #28]
   19cc6:	61da      	str	r2, [r3, #28]
   19cc8:	e7e2      	b.n	19c90 <os_callout_tick+0x10>
                c = NULL;
   19cca:	2400      	movs	r4, #0
   19ccc:	e7e5      	b.n	19c9a <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   19cce:	4621      	mov	r1, r4
   19cd0:	f000 f915 	bl	19efe <os_eventq_put>
   19cd4:	e7e9      	b.n	19caa <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   19cd6:	bd38      	pop	{r3, r4, r5, pc}
   19cd8:	2000a640 	.word	0x2000a640

00019cdc <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   19cdc:	b510      	push	{r4, lr}
   19cde:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   19ce0:	f001 f88b 	bl	1adfa <os_arch_in_critical>
   19ce4:	b130      	cbz	r0, 19cf4 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   19ce6:	4b09      	ldr	r3, [pc, #36]	; (19d0c <os_callout_wakeup_ticks+0x30>)
   19ce8:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   19cea:	b15b      	cbz	r3, 19d04 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   19cec:	6958      	ldr	r0, [r3, #20]
   19cee:	1b00      	subs	r0, r0, r4
   19cf0:	d406      	bmi.n	19d00 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   19cf2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   19cf4:	2300      	movs	r3, #0
   19cf6:	461a      	mov	r2, r3
   19cf8:	4619      	mov	r1, r3
   19cfa:	4618      	mov	r0, r3
   19cfc:	f7ff fdde 	bl	198bc <__assert_func>
            rt = 0;     /* callout time is in the past */
   19d00:	2000      	movs	r0, #0
   19d02:	e7f6      	b.n	19cf2 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   19d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19d08:	e7f3      	b.n	19cf2 <os_callout_wakeup_ticks+0x16>
   19d0a:	bf00      	nop
   19d0c:	2000a640 	.word	0x2000a640

00019d10 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   19d10:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   19d12:	4601      	mov	r1, r0
   19d14:	2000      	movs	r0, #0
   19d16:	f002 f84d 	bl	1bdb4 <hal_timer_config>
    return rc;
}
   19d1a:	bd08      	pop	{r3, pc}

00019d1c <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   19d1c:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   19d1e:	2000      	movs	r0, #0
   19d20:	f002 f8c4 	bl	1beac <hal_timer_read>
    return cpu_time;
}
   19d24:	bd08      	pop	{r3, pc}
	...

00019d28 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   19d28:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   19d2a:	4b15      	ldr	r3, [pc, #84]	; (19d80 <os_dev_add+0x58>)
   19d2c:	681d      	ldr	r5, [r3, #0]
   19d2e:	b115      	cbz	r5, 19d36 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19d30:	462b      	mov	r3, r5
    prev_dev = NULL;
   19d32:	2400      	movs	r4, #0
   19d34:	e008      	b.n	19d48 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19d36:	4603      	mov	r3, r0
   19d38:	f843 5f20 	str.w	r5, [r3, #32]!
   19d3c:	4a10      	ldr	r2, [pc, #64]	; (19d80 <os_dev_add+0x58>)
   19d3e:	6053      	str	r3, [r2, #4]
   19d40:	6010      	str	r0, [r2, #0]
        return (0);
   19d42:	e010      	b.n	19d66 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   19d44:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19d46:	6a1b      	ldr	r3, [r3, #32]
   19d48:	b143      	cbz	r3, 19d5c <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   19d4a:	7e01      	ldrb	r1, [r0, #24]
   19d4c:	7e1a      	ldrb	r2, [r3, #24]
   19d4e:	4291      	cmp	r1, r2
   19d50:	d304      	bcc.n	19d5c <os_dev_add+0x34>
   19d52:	d1f7      	bne.n	19d44 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   19d54:	7e41      	ldrb	r1, [r0, #25]
   19d56:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   19d58:	4291      	cmp	r1, r2
   19d5a:	d2f3      	bcs.n	19d44 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   19d5c:	b15c      	cbz	r4, 19d76 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19d5e:	6a23      	ldr	r3, [r4, #32]
   19d60:	6203      	str	r3, [r0, #32]
   19d62:	b11b      	cbz	r3, 19d6c <os_dev_add+0x44>
   19d64:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   19d66:	2000      	movs	r0, #0
   19d68:	bc30      	pop	{r4, r5}
   19d6a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19d6c:	f100 0320 	add.w	r3, r0, #32
   19d70:	4a03      	ldr	r2, [pc, #12]	; (19d80 <os_dev_add+0x58>)
   19d72:	6053      	str	r3, [r2, #4]
   19d74:	e7f6      	b.n	19d64 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19d76:	6205      	str	r5, [r0, #32]
   19d78:	4b01      	ldr	r3, [pc, #4]	; (19d80 <os_dev_add+0x58>)
   19d7a:	6018      	str	r0, [r3, #0]
   19d7c:	e7f3      	b.n	19d66 <os_dev_add+0x3e>
   19d7e:	bf00      	nop
   19d80:	20005820 	.word	0x20005820

00019d84 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   19d84:	b510      	push	{r4, lr}
   19d86:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   19d88:	6903      	ldr	r3, [r0, #16]
   19d8a:	6941      	ldr	r1, [r0, #20]
   19d8c:	4798      	blx	r3
    if (rc != 0) {
   19d8e:	4603      	mov	r3, r0
   19d90:	b128      	cbz	r0, 19d9e <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   19d92:	7ee2      	ldrb	r2, [r4, #27]
   19d94:	f012 0f08 	tst.w	r2, #8
   19d98:	d105      	bne.n	19da6 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   19d9a:	2300      	movs	r3, #0
   19d9c:	e003      	b.n	19da6 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   19d9e:	7ee2      	ldrb	r2, [r4, #27]
   19da0:	f042 0201 	orr.w	r2, r2, #1
   19da4:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   19da6:	4618      	mov	r0, r3
   19da8:	bd10      	pop	{r4, pc}

00019daa <os_dev_init>:
    dev->od_name = name;
   19daa:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   19dac:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   19dae:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   19db0:	2300      	movs	r3, #0
   19db2:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   19db4:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   19db6:	9a00      	ldr	r2, [sp, #0]
   19db8:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   19dba:	9a01      	ldr	r2, [sp, #4]
   19dbc:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   19dbe:	6003      	str	r3, [r0, #0]
   19dc0:	6043      	str	r3, [r0, #4]
   19dc2:	6083      	str	r3, [r0, #8]
   19dc4:	60c3      	str	r3, [r0, #12]
}
   19dc6:	4618      	mov	r0, r3
   19dc8:	4770      	bx	lr
	...

00019dcc <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   19dcc:	b530      	push	{r4, r5, lr}
   19dce:	b083      	sub	sp, #12
   19dd0:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   19dd2:	9c07      	ldr	r4, [sp, #28]
   19dd4:	9401      	str	r4, [sp, #4]
   19dd6:	9c06      	ldr	r4, [sp, #24]
   19dd8:	9400      	str	r4, [sp, #0]
   19dda:	f7ff ffe6 	bl	19daa <os_dev_init>
    if (rc != 0) {
   19dde:	4603      	mov	r3, r0
   19de0:	b110      	cbz	r0, 19de8 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   19de2:	4618      	mov	r0, r3
   19de4:	b003      	add	sp, #12
   19de6:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   19de8:	4628      	mov	r0, r5
   19dea:	f7ff ff9d 	bl	19d28 <os_dev_add>
    if (rc != 0) {
   19dee:	4603      	mov	r3, r0
   19df0:	2800      	cmp	r0, #0
   19df2:	d1f6      	bne.n	19de2 <os_dev_create+0x16>
    if (g_os_started) {
   19df4:	4a04      	ldr	r2, [pc, #16]	; (19e08 <os_dev_create+0x3c>)
   19df6:	6812      	ldr	r2, [r2, #0]
   19df8:	2a00      	cmp	r2, #0
   19dfa:	d0f2      	beq.n	19de2 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   19dfc:	4628      	mov	r0, r5
   19dfe:	f7ff ffc1 	bl	19d84 <os_dev_initialize>
   19e02:	4603      	mov	r3, r0
    return (rc);
   19e04:	e7ed      	b.n	19de2 <os_dev_create+0x16>
   19e06:	bf00      	nop
   19e08:	2000a638 	.word	0x2000a638

00019e0c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   19e0c:	b538      	push	{r3, r4, r5, lr}
   19e0e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e10:	4b08      	ldr	r3, [pc, #32]	; (19e34 <os_dev_initialize_all+0x28>)
   19e12:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   19e14:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e16:	e000      	b.n	19e1a <os_dev_initialize_all+0xe>
   19e18:	6a24      	ldr	r4, [r4, #32]
   19e1a:	b144      	cbz	r4, 19e2e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   19e1c:	7e23      	ldrb	r3, [r4, #24]
   19e1e:	42ab      	cmp	r3, r5
   19e20:	d1fa      	bne.n	19e18 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   19e22:	4620      	mov	r0, r4
   19e24:	f7ff ffae 	bl	19d84 <os_dev_initialize>
            if (rc) {
   19e28:	4602      	mov	r2, r0
   19e2a:	2800      	cmp	r0, #0
   19e2c:	d0f4      	beq.n	19e18 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   19e2e:	4610      	mov	r0, r2
   19e30:	bd38      	pop	{r3, r4, r5, pc}
   19e32:	bf00      	nop
   19e34:	20005820 	.word	0x20005820

00019e38 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   19e38:	b538      	push	{r3, r4, r5, lr}
   19e3a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e3c:	4b05      	ldr	r3, [pc, #20]	; (19e54 <os_dev_lookup+0x1c>)
   19e3e:	681c      	ldr	r4, [r3, #0]
   19e40:	b134      	cbz	r4, 19e50 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19e42:	4629      	mov	r1, r5
   19e44:	69e0      	ldr	r0, [r4, #28]
   19e46:	f001 f958 	bl	1b0fa <strcmp>
   19e4a:	b108      	cbz	r0, 19e50 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e4c:	6a24      	ldr	r4, [r4, #32]
   19e4e:	e7f7      	b.n	19e40 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19e50:	4620      	mov	r0, r4
   19e52:	bd38      	pop	{r3, r4, r5, pc}
   19e54:	20005820 	.word	0x20005820

00019e58 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   19e58:	b570      	push	{r4, r5, r6, lr}
   19e5a:	460d      	mov	r5, r1
   19e5c:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   19e5e:	f7ff ffeb 	bl	19e38 <os_dev_lookup>
    if (dev == NULL) {
   19e62:	4604      	mov	r4, r0
   19e64:	b1a0      	cbz	r0, 19e90 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   19e66:	7ec3      	ldrb	r3, [r0, #27]
   19e68:	f013 0f01 	tst.w	r3, #1
   19e6c:	d012      	beq.n	19e94 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   19e6e:	6803      	ldr	r3, [r0, #0]
   19e70:	b11b      	cbz	r3, 19e7a <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   19e72:	4632      	mov	r2, r6
   19e74:	4629      	mov	r1, r5
   19e76:	4798      	blx	r3
        if (rc != 0) {
   19e78:	b970      	cbnz	r0, 19e98 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19e7a:	f000 ffb5 	bl	1ade8 <os_arch_save_sr>
    ++dev->od_open_ref;
   19e7e:	7ea3      	ldrb	r3, [r4, #26]
   19e80:	3301      	adds	r3, #1
   19e82:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   19e84:	7ee3      	ldrb	r3, [r4, #27]
   19e86:	f043 0302 	orr.w	r3, r3, #2
   19e8a:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   19e8c:	f000 ffb2 	bl	1adf4 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   19e90:	4620      	mov	r0, r4
   19e92:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   19e94:	2400      	movs	r4, #0
   19e96:	e7fb      	b.n	19e90 <os_dev_open+0x38>
    return (NULL);
   19e98:	2400      	movs	r4, #0
   19e9a:	e7f9      	b.n	19e90 <os_dev_open+0x38>

00019e9c <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   19e9c:	b1b0      	cbz	r0, 19ecc <os_dev_close+0x30>
{
   19e9e:	b510      	push	{r4, lr}
   19ea0:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   19ea2:	68c3      	ldr	r3, [r0, #12]
   19ea4:	b113      	cbz	r3, 19eac <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   19ea6:	4798      	blx	r3
        if (rc != 0) {
   19ea8:	4603      	mov	r3, r0
   19eaa:	b968      	cbnz	r0, 19ec8 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19eac:	f000 ff9c 	bl	1ade8 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   19eb0:	7ea3      	ldrb	r3, [r4, #26]
   19eb2:	3b01      	subs	r3, #1
   19eb4:	b2db      	uxtb	r3, r3
   19eb6:	76a3      	strb	r3, [r4, #26]
   19eb8:	b91b      	cbnz	r3, 19ec2 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   19eba:	7ee3      	ldrb	r3, [r4, #27]
   19ebc:	f023 0306 	bic.w	r3, r3, #6
   19ec0:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   19ec2:	f000 ff97 	bl	1adf4 <os_arch_restore_sr>

    return (0);
   19ec6:	2300      	movs	r3, #0
err:
    return (rc);
}
   19ec8:	4618      	mov	r0, r3
   19eca:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   19ecc:	2302      	movs	r3, #2
}
   19ece:	4618      	mov	r0, r3
   19ed0:	4770      	bx	lr
	...

00019ed4 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   19ed4:	4b02      	ldr	r3, [pc, #8]	; (19ee0 <os_dev_reset+0xc>)
   19ed6:	2200      	movs	r2, #0
   19ed8:	601a      	str	r2, [r3, #0]
   19eda:	605b      	str	r3, [r3, #4]
}
   19edc:	4770      	bx	lr
   19ede:	bf00      	nop
   19ee0:	20005820 	.word	0x20005820

00019ee4 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   19ee4:	2200      	movs	r2, #0
   19ee6:	6002      	str	r2, [r0, #0]
   19ee8:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   19eea:	4603      	mov	r3, r0
   19eec:	f843 2f08 	str.w	r2, [r3, #8]!
   19ef0:	60c3      	str	r3, [r0, #12]
}
   19ef2:	4770      	bx	lr

00019ef4 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   19ef4:	68c0      	ldr	r0, [r0, #12]
}
   19ef6:	3000      	adds	r0, #0
   19ef8:	bf18      	it	ne
   19efa:	2001      	movne	r0, #1
   19efc:	4770      	bx	lr

00019efe <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   19efe:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   19f00:	b1f0      	cbz	r0, 19f40 <os_eventq_put+0x42>
   19f02:	460c      	mov	r4, r1
   19f04:	4605      	mov	r5, r0
   19f06:	f7ff fff5 	bl	19ef4 <os_eventq_inited>
   19f0a:	b1c8      	cbz	r0, 19f40 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19f0c:	f000 ff6c 	bl	1ade8 <os_arch_save_sr>
   19f10:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   19f12:	7823      	ldrb	r3, [r4, #0]
   19f14:	b9d3      	cbnz	r3, 19f4c <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   19f16:	2301      	movs	r3, #1
   19f18:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   19f1a:	2300      	movs	r3, #0
   19f1c:	60e3      	str	r3, [r4, #12]
   19f1e:	68eb      	ldr	r3, [r5, #12]
   19f20:	601c      	str	r4, [r3, #0]
   19f22:	340c      	adds	r4, #12
   19f24:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   19f26:	6868      	ldr	r0, [r5, #4]
   19f28:	b1b8      	cbz	r0, 19f5a <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   19f2a:	7b03      	ldrb	r3, [r0, #12]
   19f2c:	2b02      	cmp	r3, #2
   19f2e:	d010      	beq.n	19f52 <os_eventq_put+0x54>
    resched = 0;
   19f30:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   19f32:	2300      	movs	r3, #0
   19f34:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   19f36:	4630      	mov	r0, r6
   19f38:	f000 ff5c 	bl	1adf4 <os_arch_restore_sr>

    if (resched) {
   19f3c:	b97c      	cbnz	r4, 19f5e <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   19f3e:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   19f40:	2300      	movs	r3, #0
   19f42:	461a      	mov	r2, r3
   19f44:	4619      	mov	r1, r3
   19f46:	4618      	mov	r0, r3
   19f48:	f7ff fcb8 	bl	198bc <__assert_func>
        OS_EXIT_CRITICAL(sr);
   19f4c:	f000 ff52 	bl	1adf4 <os_arch_restore_sr>
   19f50:	e7f5      	b.n	19f3e <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   19f52:	f000 fcc7 	bl	1a8e4 <os_sched_wakeup>
            resched = 1;
   19f56:	2401      	movs	r4, #1
   19f58:	e7eb      	b.n	19f32 <os_eventq_put+0x34>
    resched = 0;
   19f5a:	2400      	movs	r4, #0
   19f5c:	e7eb      	b.n	19f36 <os_eventq_put+0x38>
        os_sched(NULL);
   19f5e:	2000      	movs	r0, #0
   19f60:	f000 fd40 	bl	1a9e4 <os_sched>
   19f64:	e7eb      	b.n	19f3e <os_eventq_put+0x40>

00019f66 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   19f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f68:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   19f6a:	f000 fc67 	bl	1a83c <os_sched_get_current_task>
   19f6e:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   19f70:	682b      	ldr	r3, [r5, #0]
   19f72:	4283      	cmp	r3, r0
   19f74:	d001      	beq.n	19f7a <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   19f76:	b9db      	cbnz	r3, 19fb0 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   19f78:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   19f7a:	f000 ff35 	bl	1ade8 <os_arch_save_sr>
   19f7e:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   19f80:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   19f82:	b9de      	cbnz	r6, 19fbc <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   19f84:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   19f86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f8a:	4620      	mov	r0, r4
   19f8c:	f000 fc62 	bl	1a854 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   19f90:	7b63      	ldrb	r3, [r4, #13]
   19f92:	f043 0308 	orr.w	r3, r3, #8
   19f96:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   19f98:	4638      	mov	r0, r7
   19f9a:	f000 ff2b 	bl	1adf4 <os_arch_restore_sr>

        os_sched(NULL);
   19f9e:	2000      	movs	r0, #0
   19fa0:	f000 fd20 	bl	1a9e4 <os_sched>

        OS_ENTER_CRITICAL(sr);
   19fa4:	f000 ff20 	bl	1ade8 <os_arch_save_sr>
   19fa8:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   19faa:	2300      	movs	r3, #0
   19fac:	606b      	str	r3, [r5, #4]
        goto pull_one;
   19fae:	e7e7      	b.n	19f80 <os_eventq_get+0x1a>
            assert(0);
   19fb0:	2300      	movs	r3, #0
   19fb2:	461a      	mov	r2, r3
   19fb4:	4619      	mov	r1, r3
   19fb6:	4618      	mov	r0, r3
   19fb8:	f7ff fc80 	bl	198bc <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19fbc:	68f3      	ldr	r3, [r6, #12]
   19fbe:	60ab      	str	r3, [r5, #8]
   19fc0:	b153      	cbz	r3, 19fd8 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   19fc2:	2300      	movs	r3, #0
   19fc4:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   19fc6:	7b63      	ldrb	r3, [r4, #13]
   19fc8:	f023 0308 	bic.w	r3, r3, #8
   19fcc:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   19fce:	4638      	mov	r0, r7
   19fd0:	f000 ff10 	bl	1adf4 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   19fd4:	4630      	mov	r0, r6
   19fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19fd8:	f105 0308 	add.w	r3, r5, #8
   19fdc:	60eb      	str	r3, [r5, #12]
   19fde:	e7f0      	b.n	19fc2 <os_eventq_get+0x5c>

00019fe0 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   19fe0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   19fe2:	f7ff ffc0 	bl	19f66 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   19fe6:	6843      	ldr	r3, [r0, #4]
   19fe8:	b10b      	cbz	r3, 19fee <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   19fea:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   19fec:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   19fee:	461a      	mov	r2, r3
   19ff0:	4619      	mov	r1, r3
   19ff2:	4618      	mov	r0, r3
   19ff4:	f7ff fc62 	bl	198bc <__assert_func>

00019ff8 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   19ff8:	b538      	push	{r3, r4, r5, lr}
   19ffa:	4605      	mov	r5, r0
   19ffc:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19ffe:	f000 fef3 	bl	1ade8 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1a002:	7823      	ldrb	r3, [r4, #0]
   1a004:	b183      	cbz	r3, 1a028 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a006:	68aa      	ldr	r2, [r5, #8]
   1a008:	42a2      	cmp	r2, r4
   1a00a:	d107      	bne.n	1a01c <os_eventq_remove+0x24>
   1a00c:	68d3      	ldr	r3, [r2, #12]
   1a00e:	60ab      	str	r3, [r5, #8]
   1a010:	b953      	cbnz	r3, 1a028 <os_eventq_remove+0x30>
   1a012:	f105 0308 	add.w	r3, r5, #8
   1a016:	60eb      	str	r3, [r5, #12]
   1a018:	e006      	b.n	1a028 <os_eventq_remove+0x30>
   1a01a:	461a      	mov	r2, r3
   1a01c:	68d3      	ldr	r3, [r2, #12]
   1a01e:	42a3      	cmp	r3, r4
   1a020:	d1fb      	bne.n	1a01a <os_eventq_remove+0x22>
   1a022:	68db      	ldr	r3, [r3, #12]
   1a024:	60d3      	str	r3, [r2, #12]
   1a026:	b123      	cbz	r3, 1a032 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1a028:	2300      	movs	r3, #0
   1a02a:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1a02c:	f000 fee2 	bl	1adf4 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1a030:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a032:	320c      	adds	r2, #12
   1a034:	60ea      	str	r2, [r5, #12]
   1a036:	e7f7      	b.n	1a028 <os_eventq_remove+0x30>

0001a038 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1a038:	4800      	ldr	r0, [pc, #0]	; (1a03c <os_eventq_dflt_get+0x4>)
   1a03a:	4770      	bx	lr
   1a03c:	20005828 	.word	0x20005828

0001a040 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1a040:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1a042:	2000      	movs	r0, #0
   1a044:	6018      	str	r0, [r3, #0]
   1a046:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1a048:	6098      	str	r0, [r3, #8]
   1a04a:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1a04c:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1a04e:	611a      	str	r2, [r3, #16]

    return (0);
}
   1a050:	4770      	bx	lr

0001a052 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1a052:	b538      	push	{r3, r4, r5, lr}
   1a054:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a056:	f000 fec7 	bl	1ade8 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1a05a:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1a05c:	b114      	cbz	r4, 1a064 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a05e:	6863      	ldr	r3, [r4, #4]
   1a060:	602b      	str	r3, [r5, #0]
   1a062:	b12b      	cbz	r3, 1a070 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1a064:	f000 fec6 	bl	1adf4 <os_arch_restore_sr>

    if (mp) {
   1a068:	b124      	cbz	r4, 1a074 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1a06a:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1a06e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a070:	606d      	str	r5, [r5, #4]
   1a072:	e7f7      	b.n	1a064 <os_mqueue_get+0x12>
        m = NULL;
   1a074:	2000      	movs	r0, #0
    return (m);
   1a076:	e7fa      	b.n	1a06e <os_mqueue_get+0x1c>

0001a078 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1a07a:	7953      	ldrb	r3, [r2, #5]
   1a07c:	2b07      	cmp	r3, #7
   1a07e:	d916      	bls.n	1a0ae <os_mqueue_put+0x36>
   1a080:	4614      	mov	r4, r2
   1a082:	460e      	mov	r6, r1
   1a084:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1a086:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1a08a:	f000 fead 	bl	1ade8 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1a08e:	2300      	movs	r3, #0
   1a090:	f844 3f14 	str.w	r3, [r4, #20]!
   1a094:	686b      	ldr	r3, [r5, #4]
   1a096:	601f      	str	r7, [r3, #0]
   1a098:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1a09a:	f000 feab 	bl	1adf4 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1a09e:	b146      	cbz	r6, 1a0b2 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1a0a0:	f105 0108 	add.w	r1, r5, #8
   1a0a4:	4630      	mov	r0, r6
   1a0a6:	f7ff ff2a 	bl	19efe <os_eventq_put>
    }

    return (0);
   1a0aa:	2000      	movs	r0, #0
   1a0ac:	e000      	b.n	1a0b0 <os_mqueue_put+0x38>
err:
    return (rc);
   1a0ae:	2002      	movs	r0, #2
}
   1a0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1a0b2:	2000      	movs	r0, #0
   1a0b4:	e7fc      	b.n	1a0b0 <os_mqueue_put+0x38>

0001a0b6 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1a0b6:	3a10      	subs	r2, #16
   1a0b8:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1a0ba:	6041      	str	r1, [r0, #4]

    return (0);
}
   1a0bc:	2000      	movs	r0, #0
   1a0be:	4770      	bx	lr

0001a0c0 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1a0c0:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1a0c2:	8803      	ldrh	r3, [r0, #0]
   1a0c4:	428b      	cmp	r3, r1
   1a0c6:	d312      	bcc.n	1a0ee <os_mbuf_get+0x2e>
   1a0c8:	460d      	mov	r5, r1
   1a0ca:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1a0cc:	6840      	ldr	r0, [r0, #4]
   1a0ce:	f000 f947 	bl	1a360 <os_memblock_get>
    if (!om) {
   1a0d2:	4603      	mov	r3, r0
   1a0d4:	b148      	cbz	r0, 1a0ea <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1a0d6:	2200      	movs	r2, #0
   1a0d8:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1a0da:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1a0dc:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1a0de:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1a0e0:	f100 0110 	add.w	r1, r0, #16
   1a0e4:	4429      	add	r1, r5
   1a0e6:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1a0e8:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1a0ea:	4618      	mov	r0, r3
   1a0ec:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a0ee:	2300      	movs	r3, #0
    return om;
   1a0f0:	e7fb      	b.n	1a0ea <os_mbuf_get+0x2a>

0001a0f2 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1a0f2:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1a0f4:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1a0f8:	8803      	ldrh	r3, [r0, #0]
   1a0fa:	42ab      	cmp	r3, r5
   1a0fc:	d310      	bcc.n	1a120 <os_mbuf_get_pkthdr+0x2e>
   1a0fe:	2dff      	cmp	r5, #255	; 0xff
   1a100:	d810      	bhi.n	1a124 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1a102:	2100      	movs	r1, #0
   1a104:	f7ff ffdc 	bl	1a0c0 <os_mbuf_get>
    if (om) {
   1a108:	4603      	mov	r3, r0
   1a10a:	b138      	cbz	r0, 1a11c <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1a10c:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1a10e:	6802      	ldr	r2, [r0, #0]
   1a110:	4415      	add	r5, r2
   1a112:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1a114:	2200      	movs	r2, #0
   1a116:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1a118:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1a11a:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1a11c:	4618      	mov	r0, r3
   1a11e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a120:	2300      	movs	r3, #0
   1a122:	e7fb      	b.n	1a11c <os_mbuf_get_pkthdr+0x2a>
   1a124:	2300      	movs	r3, #0
    return om;
   1a126:	e7f9      	b.n	1a11c <os_mbuf_get_pkthdr+0x2a>

0001a128 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1a128:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1a12a:	6883      	ldr	r3, [r0, #8]
   1a12c:	b123      	cbz	r3, 1a138 <os_mbuf_free+0x10>
   1a12e:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1a130:	6858      	ldr	r0, [r3, #4]
   1a132:	f000 f93d 	bl	1a3b0 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1a136:	bd08      	pop	{r3, pc}
    rc = 0;
   1a138:	2000      	movs	r0, #0
    return (rc);
   1a13a:	e7fc      	b.n	1a136 <os_mbuf_free+0xe>

0001a13c <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1a13c:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1a13e:	b160      	cbz	r0, 1a15a <os_mbuf_free_chain+0x1e>
{
   1a140:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1a142:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1a144:	4618      	mov	r0, r3
   1a146:	f7ff ffef 	bl	1a128 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1a14a:	4623      	mov	r3, r4
        if (rc != 0) {
   1a14c:	4602      	mov	r2, r0
   1a14e:	b910      	cbnz	r0, 1a156 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1a150:	2c00      	cmp	r4, #0
   1a152:	d1f6      	bne.n	1a142 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1a154:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1a156:	4610      	mov	r0, r2
   1a158:	bd10      	pop	{r4, pc}
    rc = 0;
   1a15a:	2200      	movs	r2, #0
}
   1a15c:	4610      	mov	r0, r2
   1a15e:	4770      	bx	lr

0001a160 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1a160:	2300      	movs	r3, #0
    while (om != NULL) {
   1a162:	e003      	b.n	1a16c <os_mbuf_len+0xc>
        len += om->om_len;
   1a164:	88c2      	ldrh	r2, [r0, #6]
   1a166:	4413      	add	r3, r2
   1a168:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1a16a:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1a16c:	2800      	cmp	r0, #0
   1a16e:	d1f9      	bne.n	1a164 <os_mbuf_len+0x4>
    }

    return len;
}
   1a170:	4618      	mov	r0, r3
   1a172:	4770      	bx	lr

0001a174 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1a174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1a178:	2800      	cmp	r0, #0
   1a17a:	d04d      	beq.n	1a218 <os_mbuf_append+0xa4>
   1a17c:	460f      	mov	r7, r1
   1a17e:	4691      	mov	r9, r2
   1a180:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1a182:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1a186:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a188:	e000      	b.n	1a18c <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1a18a:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a18c:	68eb      	ldr	r3, [r5, #12]
   1a18e:	2b00      	cmp	r3, #0
   1a190:	d1fb      	bne.n	1a18a <os_mbuf_append+0x16>
    }

    remainder = len;
   1a192:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1a194:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a196:	f105 0410 	add.w	r4, r5, #16
   1a19a:	881b      	ldrh	r3, [r3, #0]
   1a19c:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1a19e:	6828      	ldr	r0, [r5, #0]
   1a1a0:	88eb      	ldrh	r3, [r5, #6]
   1a1a2:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a1a4:	1a24      	subs	r4, r4, r0
   1a1a6:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1a1a8:	b164      	cbz	r4, 1a1c4 <os_mbuf_append+0x50>
        if (space > remainder) {
   1a1aa:	454c      	cmp	r4, r9
   1a1ac:	dd00      	ble.n	1a1b0 <os_mbuf_append+0x3c>
            space = remainder;
   1a1ae:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1a1b0:	4622      	mov	r2, r4
   1a1b2:	4639      	mov	r1, r7
   1a1b4:	f000 ff78 	bl	1b0a8 <memcpy>

        last->om_len += space;
   1a1b8:	88eb      	ldrh	r3, [r5, #6]
   1a1ba:	4423      	add	r3, r4
   1a1bc:	80eb      	strh	r3, [r5, #6]
        data += space;
   1a1be:	4427      	add	r7, r4
        remainder -= space;
   1a1c0:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1a1c4:	2e00      	cmp	r6, #0
   1a1c6:	dd16      	ble.n	1a1f6 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1a1c8:	2100      	movs	r1, #0
   1a1ca:	4640      	mov	r0, r8
   1a1cc:	f7ff ff78 	bl	1a0c0 <os_mbuf_get>
        if (!new) {
   1a1d0:	4604      	mov	r4, r0
   1a1d2:	b180      	cbz	r0, 1a1f6 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1a1d4:	f8b8 2000 	ldrh.w	r2, [r8]
   1a1d8:	42b2      	cmp	r2, r6
   1a1da:	bfa8      	it	ge
   1a1dc:	4632      	movge	r2, r6
   1a1de:	b292      	uxth	r2, r2
   1a1e0:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1a1e2:	4639      	mov	r1, r7
   1a1e4:	6800      	ldr	r0, [r0, #0]
   1a1e6:	f000 ff5f 	bl	1b0a8 <memcpy>
        data += new->om_len;
   1a1ea:	88e3      	ldrh	r3, [r4, #6]
   1a1ec:	441f      	add	r7, r3
        remainder -= new->om_len;
   1a1ee:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1a1f0:	60ec      	str	r4, [r5, #12]
        last = new;
   1a1f2:	4625      	mov	r5, r4
   1a1f4:	e7e6      	b.n	1a1c4 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a1f6:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1a1fa:	2b07      	cmp	r3, #7
   1a1fc:	d907      	bls.n	1a20e <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1a1fe:	eba9 0906 	sub.w	r9, r9, r6
   1a202:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1a206:	fa13 f989 	uxtah	r9, r3, r9
   1a20a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1a20e:	b106      	cbz	r6, 1a212 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1a210:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1a212:	4630      	mov	r0, r6
   1a214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1a218:	2602      	movs	r6, #2
   1a21a:	e7fa      	b.n	1a212 <os_mbuf_append+0x9e>

0001a21c <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a220:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1a222:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1a226:	2700      	movs	r7, #0
    head = NULL;
   1a228:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a22a:	e017      	b.n	1a25c <os_mbuf_dup+0x40>
    startoff = 0;
   1a22c:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a22e:	4623      	mov	r3, r4
   1a230:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a234:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a236:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1a238:	b299      	uxth	r1, r3
   1a23a:	4640      	mov	r0, r8
   1a23c:	f7ff ff40 	bl	1a0c0 <os_mbuf_get>
   1a240:	4605      	mov	r5, r0
   1a242:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1a244:	b188      	cbz	r0, 1a26a <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1a246:	7923      	ldrb	r3, [r4, #4]
   1a248:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1a24a:	88e3      	ldrh	r3, [r4, #6]
   1a24c:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1a24e:	88e2      	ldrh	r2, [r4, #6]
   1a250:	6821      	ldr	r1, [r4, #0]
   1a252:	6828      	ldr	r0, [r5, #0]
   1a254:	f000 ff28 	bl	1b0a8 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a258:	68e4      	ldr	r4, [r4, #12]
   1a25a:	462f      	mov	r7, r5
   1a25c:	b14c      	cbz	r4, 1a272 <os_mbuf_dup+0x56>
        if (head) {
   1a25e:	b15e      	cbz	r6, 1a278 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a260:	7963      	ldrb	r3, [r4, #5]
   1a262:	2b07      	cmp	r3, #7
   1a264:	d9e2      	bls.n	1a22c <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1a266:	b299      	uxth	r1, r3
   1a268:	e7e1      	b.n	1a22e <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1a26a:	4630      	mov	r0, r6
   1a26c:	f7ff ff66 	bl	1a13c <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1a270:	462e      	mov	r6, r5
}
   1a272:	4630      	mov	r0, r6
   1a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a278:	7963      	ldrb	r3, [r4, #5]
   1a27a:	2b07      	cmp	r3, #7
   1a27c:	d911      	bls.n	1a2a2 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1a27e:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a280:	4623      	mov	r3, r4
   1a282:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a286:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a288:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1a28a:	b299      	uxth	r1, r3
   1a28c:	4640      	mov	r0, r8
   1a28e:	f7ff ff17 	bl	1a0c0 <os_mbuf_get>
            if (!head) {
   1a292:	4606      	mov	r6, r0
   1a294:	2800      	cmp	r0, #0
   1a296:	d0ec      	beq.n	1a272 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1a298:	7963      	ldrb	r3, [r4, #5]
   1a29a:	2b07      	cmp	r3, #7
   1a29c:	d803      	bhi.n	1a2a6 <os_mbuf_dup+0x8a>
            copy = head;
   1a29e:	4605      	mov	r5, r0
   1a2a0:	e7d1      	b.n	1a246 <os_mbuf_dup+0x2a>
    startoff = 0;
   1a2a2:	2100      	movs	r1, #0
   1a2a4:	e7ec      	b.n	1a280 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1a2a6:	88c3      	ldrh	r3, [r0, #6]
   1a2a8:	b973      	cbnz	r3, 1a2c8 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1a2aa:	f100 0510 	add.w	r5, r0, #16
   1a2ae:	7962      	ldrb	r2, [r4, #5]
   1a2b0:	f104 0110 	add.w	r1, r4, #16
   1a2b4:	4628      	mov	r0, r5
   1a2b6:	f000 fef7 	bl	1b0a8 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1a2ba:	7963      	ldrb	r3, [r4, #5]
   1a2bc:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1a2be:	7963      	ldrb	r3, [r4, #5]
   1a2c0:	441d      	add	r5, r3
   1a2c2:	6035      	str	r5, [r6, #0]
            copy = head;
   1a2c4:	4635      	mov	r5, r6
   1a2c6:	e7be      	b.n	1a246 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1a2c8:	2300      	movs	r3, #0
   1a2ca:	461a      	mov	r2, r3
   1a2cc:	4619      	mov	r1, r3
   1a2ce:	4618      	mov	r0, r3
   1a2d0:	f7ff faf4 	bl	198bc <__assert_func>

0001a2d4 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1a2d4:	2800      	cmp	r0, #0
   1a2d6:	d031      	beq.n	1a33c <os_mempool_init_internal+0x68>
{
   1a2d8:	b430      	push	{r4, r5}
   1a2da:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1a2dc:	2a00      	cmp	r2, #0
   1a2de:	d02f      	beq.n	1a340 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1a2e0:	b1bb      	cbz	r3, 1a312 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1a2e2:	b113      	cbz	r3, 1a2ea <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1a2e4:	f013 0f03 	tst.w	r3, #3
   1a2e8:	d12c      	bne.n	1a344 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1a2ea:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1a2ec:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1a2ee:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1a2f0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1a2f4:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1a2f6:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1a2f8:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1a2fa:	9802      	ldr	r0, [sp, #8]
   1a2fc:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1a2fe:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1a300:	b199      	cbz	r1, 1a32a <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1a302:	f012 0f03 	tst.w	r2, #3
   1a306:	d002      	beq.n	1a30e <os_mempool_init_internal+0x3a>
   1a308:	f022 0203 	bic.w	r2, r2, #3
   1a30c:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1a30e:	2001      	movs	r0, #1
   1a310:	e007      	b.n	1a322 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1a312:	2900      	cmp	r1, #0
   1a314:	d0e5      	beq.n	1a2e2 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1a316:	2003      	movs	r0, #3
   1a318:	e00e      	b.n	1a338 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1a31a:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1a31c:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1a31e:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1a320:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1a322:	4281      	cmp	r1, r0
   1a324:	dcf9      	bgt.n	1a31a <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1a326:	2200      	movs	r2, #0
   1a328:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1a32a:	2000      	movs	r0, #0
   1a32c:	6120      	str	r0, [r4, #16]
   1a32e:	4b06      	ldr	r3, [pc, #24]	; (1a348 <os_mempool_init_internal+0x74>)
   1a330:	685a      	ldr	r2, [r3, #4]
   1a332:	6014      	str	r4, [r2, #0]
   1a334:	3410      	adds	r4, #16
   1a336:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1a338:	bc30      	pop	{r4, r5}
   1a33a:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a33c:	2003      	movs	r0, #3
}
   1a33e:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a340:	2003      	movs	r0, #3
   1a342:	e7f9      	b.n	1a338 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1a344:	2004      	movs	r0, #4
   1a346:	e7f7      	b.n	1a338 <os_mempool_init_internal+0x64>
   1a348:	2000a648 	.word	0x2000a648

0001a34c <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1a34c:	b510      	push	{r4, lr}
   1a34e:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1a350:	2400      	movs	r4, #0
   1a352:	9401      	str	r4, [sp, #4]
   1a354:	9c04      	ldr	r4, [sp, #16]
   1a356:	9400      	str	r4, [sp, #0]
   1a358:	f7ff ffbc 	bl	1a2d4 <os_mempool_init_internal>
}
   1a35c:	b002      	add	sp, #8
   1a35e:	bd10      	pop	{r4, pc}

0001a360 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1a360:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1a362:	b1a0      	cbz	r0, 1a38e <os_memblock_get+0x2e>
   1a364:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1a366:	f000 fd3f 	bl	1ade8 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1a36a:	88e3      	ldrh	r3, [r4, #6]
   1a36c:	b153      	cbz	r3, 1a384 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1a36e:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1a370:	682a      	ldr	r2, [r5, #0]
   1a372:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1a374:	3b01      	subs	r3, #1
   1a376:	b29b      	uxth	r3, r3
   1a378:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1a37a:	8922      	ldrh	r2, [r4, #8]
   1a37c:	4293      	cmp	r3, r2
   1a37e:	d202      	bcs.n	1a386 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1a380:	8123      	strh	r3, [r4, #8]
   1a382:	e000      	b.n	1a386 <os_memblock_get+0x26>
    block = NULL;
   1a384:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1a386:	f000 fd35 	bl	1adf4 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1a38a:	4628      	mov	r0, r5
   1a38c:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1a38e:	2500      	movs	r5, #0
    return (void *)block;
   1a390:	e7fb      	b.n	1a38a <os_memblock_get+0x2a>

0001a392 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1a392:	b538      	push	{r3, r4, r5, lr}
   1a394:	4604      	mov	r4, r0
   1a396:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1a398:	f000 fd26 	bl	1ade8 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1a39c:	6963      	ldr	r3, [r4, #20]
   1a39e:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1a3a0:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1a3a2:	88e3      	ldrh	r3, [r4, #6]
   1a3a4:	3301      	adds	r3, #1
   1a3a6:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1a3a8:	f000 fd24 	bl	1adf4 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1a3ac:	2000      	movs	r0, #0
   1a3ae:	bd38      	pop	{r3, r4, r5, pc}

0001a3b0 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1a3b0:	b168      	cbz	r0, 1a3ce <os_memblock_put+0x1e>
{
   1a3b2:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1a3b4:	b169      	cbz	r1, 1a3d2 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1a3b6:	7a83      	ldrb	r3, [r0, #10]
   1a3b8:	f013 0f01 	tst.w	r3, #1
   1a3bc:	d004      	beq.n	1a3c8 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1a3be:	69c3      	ldr	r3, [r0, #28]
   1a3c0:	b113      	cbz	r3, 1a3c8 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1a3c2:	6a02      	ldr	r2, [r0, #32]
   1a3c4:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1a3c6:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1a3c8:	f7ff ffe3 	bl	1a392 <os_memblock_put_from_cb>
   1a3cc:	e7fb      	b.n	1a3c6 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1a3ce:	2003      	movs	r0, #3
}
   1a3d0:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a3d2:	2003      	movs	r0, #3
   1a3d4:	e7f7      	b.n	1a3c6 <os_memblock_put+0x16>
	...

0001a3d8 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1a3d8:	4b02      	ldr	r3, [pc, #8]	; (1a3e4 <os_mempool_module_init+0xc>)
   1a3da:	2200      	movs	r2, #0
   1a3dc:	601a      	str	r2, [r3, #0]
   1a3de:	605b      	str	r3, [r3, #4]
}
   1a3e0:	4770      	bx	lr
   1a3e2:	bf00      	nop
   1a3e4:	2000a648 	.word	0x2000a648

0001a3e8 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a3e8:	4b02      	ldr	r3, [pc, #8]	; (1a3f4 <os_msys_find_biggest_pool+0xc>)
   1a3ea:	6818      	ldr	r0, [r3, #0]
   1a3ec:	b108      	cbz	r0, 1a3f2 <os_msys_find_biggest_pool+0xa>
   1a3ee:	6858      	ldr	r0, [r3, #4]
   1a3f0:	3808      	subs	r0, #8
}
   1a3f2:	4770      	bx	lr
   1a3f4:	2000010c 	.word	0x2000010c

0001a3f8 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a3f8:	4b09      	ldr	r3, [pc, #36]	; (1a420 <os_msys_find_pool+0x28>)
   1a3fa:	6819      	ldr	r1, [r3, #0]
   1a3fc:	460b      	mov	r3, r1
   1a3fe:	b123      	cbz	r3, 1a40a <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1a400:	881a      	ldrh	r2, [r3, #0]
   1a402:	4282      	cmp	r2, r0
   1a404:	d201      	bcs.n	1a40a <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a406:	689b      	ldr	r3, [r3, #8]
   1a408:	e7f9      	b.n	1a3fe <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1a40a:	b10b      	cbz	r3, 1a410 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1a40c:	4618      	mov	r0, r3
   1a40e:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a410:	b119      	cbz	r1, 1a41a <os_msys_find_pool+0x22>
   1a412:	4b03      	ldr	r3, [pc, #12]	; (1a420 <os_msys_find_pool+0x28>)
   1a414:	685b      	ldr	r3, [r3, #4]
   1a416:	3b08      	subs	r3, #8
   1a418:	e7f8      	b.n	1a40c <os_msys_find_pool+0x14>
   1a41a:	460b      	mov	r3, r1
    return (pool);
   1a41c:	e7f6      	b.n	1a40c <os_msys_find_pool+0x14>
   1a41e:	bf00      	nop
   1a420:	2000010c 	.word	0x2000010c

0001a424 <os_msys_register>:
{
   1a424:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a426:	4b11      	ldr	r3, [pc, #68]	; (1a46c <os_msys_register+0x48>)
   1a428:	681d      	ldr	r5, [r3, #0]
   1a42a:	462b      	mov	r3, r5
    prev = NULL;
   1a42c:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a42e:	b133      	cbz	r3, 1a43e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1a430:	8801      	ldrh	r1, [r0, #0]
   1a432:	881a      	ldrh	r2, [r3, #0]
   1a434:	4291      	cmp	r1, r2
   1a436:	d302      	bcc.n	1a43e <os_msys_register+0x1a>
        prev = pool;
   1a438:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a43a:	689b      	ldr	r3, [r3, #8]
   1a43c:	e7f7      	b.n	1a42e <os_msys_register+0xa>
    if (prev) {
   1a43e:	b15c      	cbz	r4, 1a458 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a440:	68a3      	ldr	r3, [r4, #8]
   1a442:	6083      	str	r3, [r0, #8]
   1a444:	b11b      	cbz	r3, 1a44e <os_msys_register+0x2a>
   1a446:	60a0      	str	r0, [r4, #8]
}
   1a448:	2000      	movs	r0, #0
   1a44a:	bc30      	pop	{r4, r5}
   1a44c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a44e:	f100 0308 	add.w	r3, r0, #8
   1a452:	4a06      	ldr	r2, [pc, #24]	; (1a46c <os_msys_register+0x48>)
   1a454:	6053      	str	r3, [r2, #4]
   1a456:	e7f6      	b.n	1a446 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1a458:	6085      	str	r5, [r0, #8]
   1a45a:	b115      	cbz	r5, 1a462 <os_msys_register+0x3e>
   1a45c:	4b03      	ldr	r3, [pc, #12]	; (1a46c <os_msys_register+0x48>)
   1a45e:	6018      	str	r0, [r3, #0]
   1a460:	e7f2      	b.n	1a448 <os_msys_register+0x24>
   1a462:	f100 0308 	add.w	r3, r0, #8
   1a466:	4a01      	ldr	r2, [pc, #4]	; (1a46c <os_msys_register+0x48>)
   1a468:	6053      	str	r3, [r2, #4]
   1a46a:	e7f7      	b.n	1a45c <os_msys_register+0x38>
   1a46c:	2000010c 	.word	0x2000010c

0001a470 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1a470:	b530      	push	{r4, r5, lr}
   1a472:	b083      	sub	sp, #12
   1a474:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1a476:	9d07      	ldr	r5, [sp, #28]
   1a478:	9501      	str	r5, [sp, #4]
   1a47a:	9d06      	ldr	r5, [sp, #24]
   1a47c:	9500      	str	r5, [sp, #0]
   1a47e:	f001 f96d 	bl	1b75c <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a482:	b138      	cbz	r0, 1a494 <os_msys_init_once+0x24>
   1a484:	2000      	movs	r0, #0
   1a486:	9000      	str	r0, [sp, #0]
   1a488:	4b09      	ldr	r3, [pc, #36]	; (1a4b0 <os_msys_init_once+0x40>)
   1a48a:	681d      	ldr	r5, [r3, #0]
   1a48c:	4603      	mov	r3, r0
   1a48e:	4602      	mov	r2, r0
   1a490:	4601      	mov	r1, r0
   1a492:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1a494:	4620      	mov	r0, r4
   1a496:	f7ff ffc5 	bl	1a424 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a49a:	b138      	cbz	r0, 1a4ac <os_msys_init_once+0x3c>
   1a49c:	2000      	movs	r0, #0
   1a49e:	9000      	str	r0, [sp, #0]
   1a4a0:	4b03      	ldr	r3, [pc, #12]	; (1a4b0 <os_msys_init_once+0x40>)
   1a4a2:	681c      	ldr	r4, [r3, #0]
   1a4a4:	4603      	mov	r3, r0
   1a4a6:	4602      	mov	r2, r0
   1a4a8:	4601      	mov	r1, r0
   1a4aa:	47a0      	blx	r4
}
   1a4ac:	b003      	add	sp, #12
   1a4ae:	bd30      	pop	{r4, r5, pc}
   1a4b0:	20000104 	.word	0x20000104

0001a4b4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1a4b4:	4b02      	ldr	r3, [pc, #8]	; (1a4c0 <os_msys_reset+0xc>)
   1a4b6:	2200      	movs	r2, #0
   1a4b8:	601a      	str	r2, [r3, #0]
   1a4ba:	605b      	str	r3, [r3, #4]
}
   1a4bc:	4770      	bx	lr
   1a4be:	bf00      	nop
   1a4c0:	2000010c 	.word	0x2000010c

0001a4c4 <os_msys_get_pkthdr>:
{
   1a4c4:	b510      	push	{r4, lr}
   1a4c6:	460c      	mov	r4, r1
    if (dsize == 0) {
   1a4c8:	b930      	cbnz	r0, 1a4d8 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1a4ca:	f7ff ff8d 	bl	1a3e8 <os_msys_find_biggest_pool>
    if (!pool) {
   1a4ce:	b158      	cbz	r0, 1a4e8 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1a4d0:	b2e1      	uxtb	r1, r4
   1a4d2:	f7ff fe0e 	bl	1a0f2 <os_mbuf_get_pkthdr>
}
   1a4d6:	bd10      	pop	{r4, pc}
   1a4d8:	f101 0308 	add.w	r3, r1, #8
   1a4dc:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1a4de:	4403      	add	r3, r0
   1a4e0:	b298      	uxth	r0, r3
   1a4e2:	f7ff ff89 	bl	1a3f8 <os_msys_find_pool>
   1a4e6:	e7f2      	b.n	1a4ce <os_msys_get_pkthdr+0xa>
    return (NULL);
   1a4e8:	2000      	movs	r0, #0
   1a4ea:	e7f4      	b.n	1a4d6 <os_msys_get_pkthdr+0x12>

0001a4ec <os_msys_init>:

void
os_msys_init(void)
{
   1a4ec:	b500      	push	{lr}
   1a4ee:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1a4f0:	f7ff ffe0 	bl	1a4b4 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1a4f4:	4b06      	ldr	r3, [pc, #24]	; (1a510 <os_msys_init+0x24>)
   1a4f6:	9301      	str	r3, [sp, #4]
   1a4f8:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a4fc:	9300      	str	r3, [sp, #0]
   1a4fe:	2340      	movs	r3, #64	; 0x40
   1a500:	4a04      	ldr	r2, [pc, #16]	; (1a514 <os_msys_init+0x28>)
   1a502:	4905      	ldr	r1, [pc, #20]	; (1a518 <os_msys_init+0x2c>)
   1a504:	4805      	ldr	r0, [pc, #20]	; (1a51c <os_msys_init+0x30>)
   1a506:	f7ff ffb3 	bl	1a470 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1a50a:	b003      	add	sp, #12
   1a50c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a510:	000210a4 	.word	0x000210a4
   1a514:	2000a138 	.word	0x2000a138
   1a518:	2000a144 	.word	0x2000a144
   1a51c:	20005838 	.word	0x20005838

0001a520 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1a520:	4603      	mov	r3, r0
   1a522:	b128      	cbz	r0, 1a530 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1a524:	2000      	movs	r0, #0
   1a526:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1a528:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1a52a:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1a52c:	6018      	str	r0, [r3, #0]
   1a52e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a530:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1a532:	4770      	bx	lr

0001a534 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1a536:	4b2c      	ldr	r3, [pc, #176]	; (1a5e8 <os_mutex_release+0xb4>)
   1a538:	681b      	ldr	r3, [r3, #0]
   1a53a:	2b00      	cmp	r3, #0
   1a53c:	d04d      	beq.n	1a5da <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a53e:	2800      	cmp	r0, #0
   1a540:	d04d      	beq.n	1a5de <os_mutex_release+0xaa>
   1a542:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1a544:	f000 f97a 	bl	1a83c <os_sched_get_current_task>
   1a548:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1a54a:	88e3      	ldrh	r3, [r4, #6]
   1a54c:	2b00      	cmp	r3, #0
   1a54e:	d048      	beq.n	1a5e2 <os_mutex_release+0xae>
   1a550:	68a2      	ldr	r2, [r4, #8]
   1a552:	4282      	cmp	r2, r0
   1a554:	d001      	beq.n	1a55a <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1a556:	2005      	movs	r0, #5
   1a558:	e040      	b.n	1a5dc <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1a55a:	2b01      	cmp	r3, #1
   1a55c:	d003      	beq.n	1a566 <os_mutex_release+0x32>
        --mu->mu_level;
   1a55e:	3b01      	subs	r3, #1
   1a560:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1a562:	2000      	movs	r0, #0
        goto done;
   1a564:	e03a      	b.n	1a5dc <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1a566:	f000 fc3f 	bl	1ade8 <os_arch_save_sr>
   1a56a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1a56c:	88e3      	ldrh	r3, [r4, #6]
   1a56e:	3b01      	subs	r3, #1
   1a570:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1a572:	7aea      	ldrb	r2, [r5, #11]
   1a574:	7963      	ldrb	r3, [r4, #5]
   1a576:	429a      	cmp	r2, r3
   1a578:	d11e      	bne.n	1a5b8 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1a57a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1a57c:	b146      	cbz	r6, 1a590 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1a57e:	69f3      	ldr	r3, [r6, #28]
   1a580:	b1fb      	cbz	r3, 1a5c2 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1a582:	4630      	mov	r0, r6
   1a584:	f000 f9ae 	bl	1a8e4 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1a588:	2301      	movs	r3, #1
   1a58a:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1a58c:	7af3      	ldrb	r3, [r6, #11]
   1a58e:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1a590:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1a592:	b116      	cbz	r6, 1a59a <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1a594:	7bb3      	ldrb	r3, [r6, #14]
   1a596:	3301      	adds	r3, #1
   1a598:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1a59a:	7bab      	ldrb	r3, [r5, #14]
   1a59c:	3b01      	subs	r3, #1
   1a59e:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1a5a0:	f000 fa1a 	bl	1a9d8 <os_sched_next_task>
   1a5a4:	4604      	mov	r4, r0
    if (rdy != current) {
   1a5a6:	4285      	cmp	r5, r0
   1a5a8:	d010      	beq.n	1a5cc <os_mutex_release+0x98>
        resched = 1;
   1a5aa:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1a5ac:	4638      	mov	r0, r7
   1a5ae:	f000 fc21 	bl	1adf4 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1a5b2:	b96d      	cbnz	r5, 1a5d0 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1a5b4:	2000      	movs	r0, #0
   1a5b6:	e011      	b.n	1a5dc <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1a5b8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1a5ba:	4628      	mov	r0, r5
   1a5bc:	f000 fa24 	bl	1aa08 <os_sched_resort>
   1a5c0:	e7db      	b.n	1a57a <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1a5c2:	461a      	mov	r2, r3
   1a5c4:	4619      	mov	r1, r3
   1a5c6:	4618      	mov	r0, r3
   1a5c8:	f7ff f978 	bl	198bc <__assert_func>
    resched = 0;
   1a5cc:	2500      	movs	r5, #0
   1a5ce:	e7ed      	b.n	1a5ac <os_mutex_release+0x78>
        os_sched(rdy);
   1a5d0:	4620      	mov	r0, r4
   1a5d2:	f000 fa07 	bl	1a9e4 <os_sched>
    ret = OS_OK;
   1a5d6:	2000      	movs	r0, #0
   1a5d8:	e000      	b.n	1a5dc <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1a5da:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1a5de:	2003      	movs	r0, #3
   1a5e0:	e7fc      	b.n	1a5dc <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1a5e2:	2005      	movs	r0, #5
   1a5e4:	e7fa      	b.n	1a5dc <os_mutex_release+0xa8>
   1a5e6:	bf00      	nop
   1a5e8:	2000a638 	.word	0x2000a638

0001a5ec <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1a5ec:	4b36      	ldr	r3, [pc, #216]	; (1a6c8 <os_mutex_pend+0xdc>)
   1a5ee:	681b      	ldr	r3, [r3, #0]
   1a5f0:	2b00      	cmp	r3, #0
   1a5f2:	d065      	beq.n	1a6c0 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a5f4:	2800      	cmp	r0, #0
   1a5f6:	d065      	beq.n	1a6c4 <os_mutex_pend+0xd8>
{
   1a5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5fc:	460f      	mov	r7, r1
   1a5fe:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1a600:	f000 fbf2 	bl	1ade8 <os_arch_save_sr>
   1a604:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1a606:	f000 f919 	bl	1a83c <os_sched_get_current_task>
   1a60a:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1a60c:	88e3      	ldrh	r3, [r4, #6]
   1a60e:	b19b      	cbz	r3, 1a638 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1a610:	68a2      	ldr	r2, [r4, #8]
   1a612:	4282      	cmp	r2, r0
   1a614:	d01e      	beq.n	1a654 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1a616:	b327      	cbz	r7, 1a662 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1a618:	7ad1      	ldrb	r1, [r2, #11]
   1a61a:	7ac3      	ldrb	r3, [r0, #11]
   1a61c:	4299      	cmp	r1, r3
   1a61e:	d825      	bhi.n	1a66c <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1a620:	6821      	ldr	r1, [r4, #0]
   1a622:	b369      	cbz	r1, 1a680 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a624:	460b      	mov	r3, r1
    last = NULL;
   1a626:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a628:	b32b      	cbz	r3, 1a676 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1a62a:	7ae8      	ldrb	r0, [r5, #11]
   1a62c:	7ada      	ldrb	r2, [r3, #11]
   1a62e:	4290      	cmp	r0, r2
   1a630:	d321      	bcc.n	1a676 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1a632:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a636:	e7f7      	b.n	1a628 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1a638:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1a63a:	7ac3      	ldrb	r3, [r0, #11]
   1a63c:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1a63e:	7b83      	ldrb	r3, [r0, #14]
   1a640:	3301      	adds	r3, #1
   1a642:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1a644:	2301      	movs	r3, #1
   1a646:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a648:	4640      	mov	r0, r8
   1a64a:	f000 fbd3 	bl	1adf4 <os_arch_restore_sr>
        ret = OS_OK;
   1a64e:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1a654:	3301      	adds	r3, #1
   1a656:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a658:	4640      	mov	r0, r8
   1a65a:	f000 fbcb 	bl	1adf4 <os_arch_restore_sr>
        ret = OS_OK;
   1a65e:	2000      	movs	r0, #0
        goto done;
   1a660:	e7f6      	b.n	1a650 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1a662:	4640      	mov	r0, r8
   1a664:	f000 fbc6 	bl	1adf4 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1a668:	2006      	movs	r0, #6
        goto done;
   1a66a:	e7f1      	b.n	1a650 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1a66c:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1a66e:	68a0      	ldr	r0, [r4, #8]
   1a670:	f000 f9ca 	bl	1aa08 <os_sched_resort>
   1a674:	e7d4      	b.n	1a620 <os_mutex_pend+0x34>
    if (last) {
   1a676:	b11e      	cbz	r6, 1a680 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1a678:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1a67a:	64eb      	str	r3, [r5, #76]	; 0x4c
   1a67c:	64f5      	str	r5, [r6, #76]	; 0x4c
   1a67e:	e001      	b.n	1a684 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1a680:	64e9      	str	r1, [r5, #76]	; 0x4c
   1a682:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1a684:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1a686:	7b6b      	ldrb	r3, [r5, #13]
   1a688:	f043 0304 	orr.w	r3, r3, #4
   1a68c:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1a68e:	4639      	mov	r1, r7
   1a690:	4628      	mov	r0, r5
   1a692:	f000 f8df 	bl	1a854 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1a696:	4640      	mov	r0, r8
   1a698:	f000 fbac 	bl	1adf4 <os_arch_restore_sr>
    os_sched(NULL);
   1a69c:	2000      	movs	r0, #0
   1a69e:	f000 f9a1 	bl	1a9e4 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1a6a2:	f000 fba1 	bl	1ade8 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1a6a6:	7b6b      	ldrb	r3, [r5, #13]
   1a6a8:	f023 0304 	bic.w	r3, r3, #4
   1a6ac:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1a6ae:	f000 fba1 	bl	1adf4 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1a6b2:	68a3      	ldr	r3, [r4, #8]
   1a6b4:	42ab      	cmp	r3, r5
   1a6b6:	d001      	beq.n	1a6bc <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1a6b8:	2006      	movs	r0, #6
   1a6ba:	e7c9      	b.n	1a650 <os_mutex_pend+0x64>
        ret = OS_OK;
   1a6bc:	2000      	movs	r0, #0
   1a6be:	e7c7      	b.n	1a650 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1a6c0:	2009      	movs	r0, #9
   1a6c2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a6c4:	2003      	movs	r0, #3
}
   1a6c6:	4770      	bx	lr
   1a6c8:	2000a638 	.word	0x2000a638

0001a6cc <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1a6cc:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a6ce:	4b05      	ldr	r3, [pc, #20]	; (1a6e4 <os_sanity_check_list_lock+0x18>)
   1a6d0:	6818      	ldr	r0, [r3, #0]
   1a6d2:	b900      	cbnz	r0, 1a6d6 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a6d4:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1a6d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a6da:	4803      	ldr	r0, [pc, #12]	; (1a6e8 <os_sanity_check_list_lock+0x1c>)
   1a6dc:	f7ff ff86 	bl	1a5ec <os_mutex_pend>
err:
   1a6e0:	e7f8      	b.n	1a6d4 <os_sanity_check_list_lock+0x8>
   1a6e2:	bf00      	nop
   1a6e4:	2000a638 	.word	0x2000a638
   1a6e8:	2000a650 	.word	0x2000a650

0001a6ec <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1a6ec:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a6ee:	4b04      	ldr	r3, [pc, #16]	; (1a700 <os_sanity_check_list_unlock+0x14>)
   1a6f0:	6818      	ldr	r0, [r3, #0]
   1a6f2:	b900      	cbnz	r0, 1a6f6 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a6f4:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1a6f6:	4803      	ldr	r0, [pc, #12]	; (1a704 <os_sanity_check_list_unlock+0x18>)
   1a6f8:	f7ff ff1c 	bl	1a534 <os_mutex_release>
err:
   1a6fc:	e7fa      	b.n	1a6f4 <os_sanity_check_list_unlock+0x8>
   1a6fe:	bf00      	nop
   1a700:	2000a638 	.word	0x2000a638
   1a704:	2000a650 	.word	0x2000a650

0001a708 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1a708:	2300      	movs	r3, #0
   1a70a:	6003      	str	r3, [r0, #0]
   1a70c:	6043      	str	r3, [r0, #4]
   1a70e:	6083      	str	r3, [r0, #8]
   1a710:	60c3      	str	r3, [r0, #12]
   1a712:	6103      	str	r3, [r0, #16]
}
   1a714:	4618      	mov	r0, r3
   1a716:	4770      	bx	lr

0001a718 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1a718:	b510      	push	{r4, lr}
   1a71a:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1a71c:	f7ff ffd6 	bl	1a6cc <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1a720:	4603      	mov	r3, r0
   1a722:	b108      	cbz	r0, 1a728 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1a724:	4618      	mov	r0, r3
   1a726:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1a728:	4b03      	ldr	r3, [pc, #12]	; (1a738 <os_sanity_check_register+0x20>)
   1a72a:	681a      	ldr	r2, [r3, #0]
   1a72c:	6122      	str	r2, [r4, #16]
   1a72e:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1a730:	f7ff ffdc 	bl	1a6ec <os_sanity_check_list_unlock>
   1a734:	4603      	mov	r3, r0
err:
   1a736:	e7f5      	b.n	1a724 <os_sanity_check_register+0xc>
   1a738:	2000a160 	.word	0x2000a160

0001a73c <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1a73c:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1a73e:	f7ff ffc5 	bl	1a6cc <os_sanity_check_list_lock>
    if (rc != 0) {
   1a742:	b910      	cbnz	r0, 1a74a <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a744:	4b17      	ldr	r3, [pc, #92]	; (1a7a4 <os_sanity_run+0x68>)
   1a746:	681c      	ldr	r4, [r3, #0]
   1a748:	e00e      	b.n	1a768 <os_sanity_run+0x2c>
        assert(0);
   1a74a:	2300      	movs	r3, #0
   1a74c:	461a      	mov	r2, r3
   1a74e:	4619      	mov	r1, r3
   1a750:	4618      	mov	r0, r3
   1a752:	f7ff f8b3 	bl	198bc <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1a756:	f000 facf 	bl	1acf8 <os_time_get>
   1a75a:	6823      	ldr	r3, [r4, #0]
   1a75c:	6862      	ldr	r2, [r4, #4]
   1a75e:	4413      	add	r3, r2
   1a760:	1ac3      	subs	r3, r0, r3
   1a762:	2b00      	cmp	r3, #0
   1a764:	dc0d      	bgt.n	1a782 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a766:	6924      	ldr	r4, [r4, #16]
   1a768:	b18c      	cbz	r4, 1a78e <os_sanity_run+0x52>
        if (sc->sc_func) {
   1a76a:	68a3      	ldr	r3, [r4, #8]
   1a76c:	2b00      	cmp	r3, #0
   1a76e:	d0f2      	beq.n	1a756 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1a770:	68e1      	ldr	r1, [r4, #12]
   1a772:	4620      	mov	r0, r4
   1a774:	4798      	blx	r3
            if (rc == OS_OK) {
   1a776:	2800      	cmp	r0, #0
   1a778:	d1ed      	bne.n	1a756 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1a77a:	f000 fabd 	bl	1acf8 <os_time_get>
   1a77e:	6020      	str	r0, [r4, #0]
                continue;
   1a780:	e7f1      	b.n	1a766 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1a782:	2300      	movs	r3, #0
   1a784:	461a      	mov	r2, r3
   1a786:	4619      	mov	r1, r3
   1a788:	4618      	mov	r0, r3
   1a78a:	f7ff f897 	bl	198bc <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1a78e:	f7ff ffad 	bl	1a6ec <os_sanity_check_list_unlock>
    if (rc != 0) {
   1a792:	b900      	cbnz	r0, 1a796 <os_sanity_run+0x5a>
        assert(0);
    }
}
   1a794:	bd10      	pop	{r4, pc}
        assert(0);
   1a796:	2300      	movs	r3, #0
   1a798:	461a      	mov	r2, r3
   1a79a:	4619      	mov	r1, r3
   1a79c:	4618      	mov	r0, r3
   1a79e:	f7ff f88d 	bl	198bc <__assert_func>
   1a7a2:	bf00      	nop
   1a7a4:	2000a160 	.word	0x2000a160

0001a7a8 <os_sanity_init>:

int
os_sanity_init(void)
{
   1a7a8:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1a7aa:	4802      	ldr	r0, [pc, #8]	; (1a7b4 <os_sanity_init+0xc>)
   1a7ac:	f7ff feb8 	bl	1a520 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1a7b0:	bd08      	pop	{r3, pc}
   1a7b2:	bf00      	nop
   1a7b4:	2000a650 	.word	0x2000a650

0001a7b8 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1a7b8:	7b03      	ldrb	r3, [r0, #12]
   1a7ba:	2b01      	cmp	r3, #1
   1a7bc:	d001      	beq.n	1a7c2 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1a7be:	2002      	movs	r0, #2
}
   1a7c0:	4770      	bx	lr
{
   1a7c2:	b510      	push	{r4, lr}
   1a7c4:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a7c6:	f000 fb0f 	bl	1ade8 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a7ca:	4b0f      	ldr	r3, [pc, #60]	; (1a808 <os_sched_insert+0x50>)
   1a7cc:	681b      	ldr	r3, [r3, #0]
   1a7ce:	b12b      	cbz	r3, 1a7dc <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1a7d0:	7ae1      	ldrb	r1, [r4, #11]
   1a7d2:	7ada      	ldrb	r2, [r3, #11]
   1a7d4:	4291      	cmp	r1, r2
   1a7d6:	d301      	bcc.n	1a7dc <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a7da:	e7f8      	b.n	1a7ce <os_sched_insert+0x16>
    if (entry) {
   1a7dc:	b153      	cbz	r3, 1a7f4 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1a7de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a7e0:	64a2      	str	r2, [r4, #72]	; 0x48
   1a7e2:	6463      	str	r3, [r4, #68]	; 0x44
   1a7e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a7e6:	6014      	str	r4, [r2, #0]
   1a7e8:	3444      	adds	r4, #68	; 0x44
   1a7ea:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1a7ec:	f000 fb02 	bl	1adf4 <os_arch_restore_sr>
    return (0);
   1a7f0:	2000      	movs	r0, #0
}
   1a7f2:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1a7f4:	2300      	movs	r3, #0
   1a7f6:	6463      	str	r3, [r4, #68]	; 0x44
   1a7f8:	4b03      	ldr	r3, [pc, #12]	; (1a808 <os_sched_insert+0x50>)
   1a7fa:	685a      	ldr	r2, [r3, #4]
   1a7fc:	64a2      	str	r2, [r4, #72]	; 0x48
   1a7fe:	6014      	str	r4, [r2, #0]
   1a800:	3444      	adds	r4, #68	; 0x44
   1a802:	605c      	str	r4, [r3, #4]
   1a804:	e7f2      	b.n	1a7ec <os_sched_insert+0x34>
   1a806:	bf00      	nop
   1a808:	20000114 	.word	0x20000114

0001a80c <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1a80c:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1a80e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a810:	3301      	adds	r3, #1
   1a812:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1a814:	4b06      	ldr	r3, [pc, #24]	; (1a830 <os_sched_ctx_sw_hook+0x24>)
   1a816:	681c      	ldr	r4, [r3, #0]
   1a818:	4b06      	ldr	r3, [pc, #24]	; (1a834 <os_sched_ctx_sw_hook+0x28>)
   1a81a:	6818      	ldr	r0, [r3, #0]
   1a81c:	4906      	ldr	r1, [pc, #24]	; (1a838 <os_sched_ctx_sw_hook+0x2c>)
   1a81e:	680b      	ldr	r3, [r1, #0]
   1a820:	1ac2      	subs	r2, r0, r3
   1a822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a824:	4413      	add	r3, r2
   1a826:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1a828:	6008      	str	r0, [r1, #0]
}
   1a82a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a82e:	4770      	bx	lr
   1a830:	2000a660 	.word	0x2000a660
   1a834:	2000a670 	.word	0x2000a670
   1a838:	2000a65c 	.word	0x2000a65c

0001a83c <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1a83c:	4b01      	ldr	r3, [pc, #4]	; (1a844 <os_sched_get_current_task+0x8>)
   1a83e:	6818      	ldr	r0, [r3, #0]
   1a840:	4770      	bx	lr
   1a842:	bf00      	nop
   1a844:	2000a660 	.word	0x2000a660

0001a848 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1a848:	4b01      	ldr	r3, [pc, #4]	; (1a850 <os_sched_set_current_task+0x8>)
   1a84a:	6018      	str	r0, [r3, #0]
}
   1a84c:	4770      	bx	lr
   1a84e:	bf00      	nop
   1a850:	2000a660 	.word	0x2000a660

0001a854 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1a854:	b538      	push	{r3, r4, r5, lr}
   1a856:	4604      	mov	r4, r0
   1a858:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a85a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a85c:	b1d3      	cbz	r3, 1a894 <os_sched_sleep+0x40>
   1a85e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a860:	649a      	str	r2, [r3, #72]	; 0x48
   1a862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a864:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a866:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1a868:	2302      	movs	r3, #2
   1a86a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1a86c:	f000 fa44 	bl	1acf8 <os_time_get>
   1a870:	4428      	add	r0, r5
   1a872:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1a874:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a878:	d010      	beq.n	1a89c <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a87a:	4b18      	ldr	r3, [pc, #96]	; (1a8dc <os_sched_sleep+0x88>)
   1a87c:	681b      	ldr	r3, [r3, #0]
   1a87e:	b1d3      	cbz	r3, 1a8b6 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a880:	7b5a      	ldrb	r2, [r3, #13]
   1a882:	f012 0f01 	tst.w	r2, #1
   1a886:	d116      	bne.n	1a8b6 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1a888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a88a:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a88c:	2a00      	cmp	r2, #0
   1a88e:	dc12      	bgt.n	1a8b6 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a892:	e7f4      	b.n	1a87e <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a894:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a896:	4b12      	ldr	r3, [pc, #72]	; (1a8e0 <os_sched_sleep+0x8c>)
   1a898:	605a      	str	r2, [r3, #4]
   1a89a:	e7e2      	b.n	1a862 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1a89c:	7b63      	ldrb	r3, [r4, #13]
   1a89e:	f043 0301 	orr.w	r3, r3, #1
   1a8a2:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a8a4:	2300      	movs	r3, #0
   1a8a6:	6463      	str	r3, [r4, #68]	; 0x44
   1a8a8:	4b0c      	ldr	r3, [pc, #48]	; (1a8dc <os_sched_sleep+0x88>)
   1a8aa:	685a      	ldr	r2, [r3, #4]
   1a8ac:	64a2      	str	r2, [r4, #72]	; 0x48
   1a8ae:	6014      	str	r4, [r2, #0]
   1a8b0:	3444      	adds	r4, #68	; 0x44
   1a8b2:	605c      	str	r4, [r3, #4]
   1a8b4:	e007      	b.n	1a8c6 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1a8b6:	b143      	cbz	r3, 1a8ca <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1a8b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a8ba:	64a2      	str	r2, [r4, #72]	; 0x48
   1a8bc:	6463      	str	r3, [r4, #68]	; 0x44
   1a8be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a8c0:	6014      	str	r4, [r2, #0]
   1a8c2:	3444      	adds	r4, #68	; 0x44
   1a8c4:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1a8c6:	2000      	movs	r0, #0
   1a8c8:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a8ca:	2300      	movs	r3, #0
   1a8cc:	6463      	str	r3, [r4, #68]	; 0x44
   1a8ce:	4b03      	ldr	r3, [pc, #12]	; (1a8dc <os_sched_sleep+0x88>)
   1a8d0:	685a      	ldr	r2, [r3, #4]
   1a8d2:	64a2      	str	r2, [r4, #72]	; 0x48
   1a8d4:	6014      	str	r4, [r2, #0]
   1a8d6:	3444      	adds	r4, #68	; 0x44
   1a8d8:	605c      	str	r4, [r3, #4]
   1a8da:	e7f4      	b.n	1a8c6 <os_sched_sleep+0x72>
   1a8dc:	2000011c 	.word	0x2000011c
   1a8e0:	20000114 	.word	0x20000114

0001a8e4 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1a8e4:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1a8e6:	7b03      	ldrb	r3, [r0, #12]
   1a8e8:	2b02      	cmp	r3, #2
   1a8ea:	d108      	bne.n	1a8fe <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1a8ec:	69c3      	ldr	r3, [r0, #28]
   1a8ee:	b1db      	cbz	r3, 1a928 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a8f0:	681a      	ldr	r2, [r3, #0]
   1a8f2:	b152      	cbz	r2, 1a90a <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a8f4:	4282      	cmp	r2, r0
   1a8f6:	d10f      	bne.n	1a918 <os_sched_wakeup+0x34>
   1a8f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1a8fa:	601a      	str	r2, [r3, #0]
   1a8fc:	e011      	b.n	1a922 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1a8fe:	2300      	movs	r3, #0
   1a900:	461a      	mov	r2, r3
   1a902:	4619      	mov	r1, r3
   1a904:	4618      	mov	r0, r3
   1a906:	f7fe ffd9 	bl	198bc <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a90a:	2300      	movs	r3, #0
   1a90c:	461a      	mov	r2, r3
   1a90e:	4619      	mov	r1, r3
   1a910:	4618      	mov	r0, r3
   1a912:	f7fe ffd3 	bl	198bc <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a916:	461a      	mov	r2, r3
   1a918:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1a91a:	4283      	cmp	r3, r0
   1a91c:	d1fb      	bne.n	1a916 <os_sched_wakeup+0x32>
   1a91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a920:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1a922:	2300      	movs	r3, #0
   1a924:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1a926:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1a928:	2301      	movs	r3, #1
   1a92a:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1a92c:	2300      	movs	r3, #0
   1a92e:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1a930:	7b43      	ldrb	r3, [r0, #13]
   1a932:	f023 0301 	bic.w	r3, r3, #1
   1a936:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a938:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a93a:	b143      	cbz	r3, 1a94e <os_sched_wakeup+0x6a>
   1a93c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a93e:	649a      	str	r2, [r3, #72]	; 0x48
   1a940:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a942:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a944:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1a946:	f7ff ff37 	bl	1a7b8 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1a94a:	2000      	movs	r0, #0
   1a94c:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a94e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a950:	4b01      	ldr	r3, [pc, #4]	; (1a958 <os_sched_wakeup+0x74>)
   1a952:	605a      	str	r2, [r3, #4]
   1a954:	e7f4      	b.n	1a940 <os_sched_wakeup+0x5c>
   1a956:	bf00      	nop
   1a958:	2000011c 	.word	0x2000011c

0001a95c <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1a95c:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1a95e:	f000 f9cb 	bl	1acf8 <os_time_get>
   1a962:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1a964:	f000 fa40 	bl	1ade8 <os_arch_save_sr>
   1a968:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1a96a:	4b0a      	ldr	r3, [pc, #40]	; (1a994 <os_sched_os_timer_exp+0x38>)
   1a96c:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1a96e:	b160      	cbz	r0, 1a98a <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1a970:	7b43      	ldrb	r3, [r0, #13]
   1a972:	f013 0f01 	tst.w	r3, #1
   1a976:	d108      	bne.n	1a98a <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1a978:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1a97a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a97c:	1aeb      	subs	r3, r5, r3
   1a97e:	2b00      	cmp	r3, #0
   1a980:	db03      	blt.n	1a98a <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1a982:	f7ff ffaf 	bl	1a8e4 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1a986:	4620      	mov	r0, r4
   1a988:	e7f1      	b.n	1a96e <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1a98a:	4630      	mov	r0, r6
   1a98c:	f000 fa32 	bl	1adf4 <os_arch_restore_sr>
}
   1a990:	bd70      	pop	{r4, r5, r6, pc}
   1a992:	bf00      	nop
   1a994:	2000011c 	.word	0x2000011c

0001a998 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1a998:	b510      	push	{r4, lr}
   1a99a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1a99c:	f000 fa2d 	bl	1adfa <os_arch_in_critical>
   1a9a0:	b150      	cbz	r0, 1a9b8 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1a9a2:	4b0c      	ldr	r3, [pc, #48]	; (1a9d4 <os_sched_wakeup_ticks+0x3c>)
   1a9a4:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1a9a6:	b17b      	cbz	r3, 1a9c8 <os_sched_wakeup_ticks+0x30>
   1a9a8:	7b5a      	ldrb	r2, [r3, #13]
   1a9aa:	f012 0f01 	tst.w	r2, #1
   1a9ae:	d10e      	bne.n	1a9ce <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1a9b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1a9b2:	1b00      	subs	r0, r0, r4
   1a9b4:	d406      	bmi.n	1a9c4 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1a9b6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1a9b8:	2300      	movs	r3, #0
   1a9ba:	461a      	mov	r2, r3
   1a9bc:	4619      	mov	r1, r3
   1a9be:	4618      	mov	r0, r3
   1a9c0:	f7fe ff7c 	bl	198bc <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1a9c4:	2000      	movs	r0, #0
   1a9c6:	e7f6      	b.n	1a9b6 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1a9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a9cc:	e7f3      	b.n	1a9b6 <os_sched_wakeup_ticks+0x1e>
   1a9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1a9d2:	e7f0      	b.n	1a9b6 <os_sched_wakeup_ticks+0x1e>
   1a9d4:	2000011c 	.word	0x2000011c

0001a9d8 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1a9d8:	4b01      	ldr	r3, [pc, #4]	; (1a9e0 <os_sched_next_task+0x8>)
   1a9da:	6818      	ldr	r0, [r3, #0]
   1a9dc:	4770      	bx	lr
   1a9de:	bf00      	nop
   1a9e0:	20000114 	.word	0x20000114

0001a9e4 <os_sched>:
{
   1a9e4:	b538      	push	{r3, r4, r5, lr}
   1a9e6:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a9e8:	f000 f9fe 	bl	1ade8 <os_arch_save_sr>
   1a9ec:	4605      	mov	r5, r0
    if (!next_t) {
   1a9ee:	b134      	cbz	r4, 1a9fe <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1a9f0:	4620      	mov	r0, r4
   1a9f2:	f000 f9ef 	bl	1add4 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1a9f6:	4628      	mov	r0, r5
   1a9f8:	f000 f9fc 	bl	1adf4 <os_arch_restore_sr>
}
   1a9fc:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1a9fe:	f7ff ffeb 	bl	1a9d8 <os_sched_next_task>
   1aa02:	4604      	mov	r4, r0
   1aa04:	e7f4      	b.n	1a9f0 <os_sched+0xc>
	...

0001aa08 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1aa08:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1aa0a:	7b03      	ldrb	r3, [r0, #12]
   1aa0c:	2b01      	cmp	r3, #1
   1aa0e:	d000      	beq.n	1aa12 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1aa10:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1aa12:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1aa14:	b13b      	cbz	r3, 1aa26 <os_sched_resort+0x1e>
   1aa16:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1aa18:	649a      	str	r2, [r3, #72]	; 0x48
   1aa1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1aa1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1aa1e:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1aa20:	f7ff feca 	bl	1a7b8 <os_sched_insert>
}
   1aa24:	e7f4      	b.n	1aa10 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1aa26:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1aa28:	4b01      	ldr	r3, [pc, #4]	; (1aa30 <os_sched_resort+0x28>)
   1aa2a:	605a      	str	r2, [r3, #4]
   1aa2c:	e7f5      	b.n	1aa1a <os_sched_resort+0x12>
   1aa2e:	bf00      	nop
   1aa30:	20000114 	.word	0x20000114

0001aa34 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1aa34:	4603      	mov	r3, r0
   1aa36:	b118      	cbz	r0, 1aa40 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1aa38:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1aa3a:	2000      	movs	r0, #0
   1aa3c:	6018      	str	r0, [r3, #0]
   1aa3e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1aa40:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1aa42:	4770      	bx	lr

0001aa44 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1aa46:	4b17      	ldr	r3, [pc, #92]	; (1aaa4 <os_sem_release+0x60>)
   1aa48:	681b      	ldr	r3, [r3, #0]
   1aa4a:	b33b      	cbz	r3, 1aa9c <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aa4c:	b340      	cbz	r0, 1aaa0 <os_sem_release+0x5c>
   1aa4e:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1aa50:	f7ff fef4 	bl	1a83c <os_sched_get_current_task>
   1aa54:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1aa56:	f000 f9c7 	bl	1ade8 <os_arch_save_sr>
   1aa5a:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1aa5c:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1aa5e:	b165      	cbz	r5, 1aa7a <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1aa60:	7b6b      	ldrb	r3, [r5, #13]
   1aa62:	f023 0302 	bic.w	r3, r3, #2
   1aa66:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1aa68:	4628      	mov	r0, r5
   1aa6a:	f7ff ff3b 	bl	1a8e4 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1aa6e:	7afa      	ldrb	r2, [r7, #11]
   1aa70:	7aeb      	ldrb	r3, [r5, #11]
   1aa72:	429a      	cmp	r2, r3
   1aa74:	d80b      	bhi.n	1aa8e <os_sem_release+0x4a>
    resched = 0;
   1aa76:	2400      	movs	r4, #0
   1aa78:	e003      	b.n	1aa82 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1aa7a:	88e3      	ldrh	r3, [r4, #6]
   1aa7c:	3301      	adds	r3, #1
   1aa7e:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1aa80:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1aa82:	4630      	mov	r0, r6
   1aa84:	f000 f9b6 	bl	1adf4 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1aa88:	b91c      	cbnz	r4, 1aa92 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1aa8a:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1aa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1aa8e:	2401      	movs	r4, #1
   1aa90:	e7f7      	b.n	1aa82 <os_sem_release+0x3e>
        os_sched(rdy);
   1aa92:	4628      	mov	r0, r5
   1aa94:	f7ff ffa6 	bl	1a9e4 <os_sched>
    ret = OS_OK;
   1aa98:	2000      	movs	r0, #0
   1aa9a:	e7f7      	b.n	1aa8c <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1aa9c:	2009      	movs	r0, #9
   1aa9e:	e7f5      	b.n	1aa8c <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1aaa0:	2003      	movs	r0, #3
   1aaa2:	e7f3      	b.n	1aa8c <os_sem_release+0x48>
   1aaa4:	2000a638 	.word	0x2000a638

0001aaa8 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1aaaa:	4b2c      	ldr	r3, [pc, #176]	; (1ab5c <os_sem_pend+0xb4>)
   1aaac:	681b      	ldr	r3, [r3, #0]
   1aaae:	2b00      	cmp	r3, #0
   1aab0:	d04f      	beq.n	1ab52 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aab2:	2800      	cmp	r0, #0
   1aab4:	d04f      	beq.n	1ab56 <os_sem_pend+0xae>
   1aab6:	460d      	mov	r5, r1
   1aab8:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1aaba:	f7ff febf 	bl	1a83c <os_sched_get_current_task>
   1aabe:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1aac0:	f000 f992 	bl	1ade8 <os_arch_save_sr>
   1aac4:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1aac6:	88e3      	ldrh	r3, [r4, #6]
   1aac8:	b14b      	cbz	r3, 1aade <os_sem_pend+0x36>
        sem->sem_tokens--;
   1aaca:	3b01      	subs	r3, #1
   1aacc:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1aace:	2400      	movs	r4, #0
    sched = 0;
   1aad0:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1aad2:	4638      	mov	r0, r7
   1aad4:	f000 f98e 	bl	1adf4 <os_arch_restore_sr>

    if (sched) {
   1aad8:	bb45      	cbnz	r5, 1ab2c <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1aada:	4620      	mov	r0, r4
   1aadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1aade:	b315      	cbz	r5, 1ab26 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1aae0:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1aae2:	7b73      	ldrb	r3, [r6, #13]
   1aae4:	f043 0302 	orr.w	r3, r3, #2
   1aae8:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1aaea:	f8d4 c000 	ldr.w	ip, [r4]
   1aaee:	f1bc 0f00 	cmp.w	ip, #0
   1aaf2:	d00e      	beq.n	1ab12 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aaf4:	4663      	mov	r3, ip
        last = NULL;
   1aaf6:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aaf8:	b133      	cbz	r3, 1ab08 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1aafa:	7af1      	ldrb	r1, [r6, #11]
   1aafc:	7ada      	ldrb	r2, [r3, #11]
   1aafe:	4291      	cmp	r1, r2
   1ab00:	d302      	bcc.n	1ab08 <os_sem_pend+0x60>
                last = entry;
   1ab02:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ab04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ab06:	e7f7      	b.n	1aaf8 <os_sem_pend+0x50>
        if (last) {
   1ab08:	b118      	cbz	r0, 1ab12 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1ab0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1ab0c:	64f3      	str	r3, [r6, #76]	; 0x4c
   1ab0e:	64c6      	str	r6, [r0, #76]	; 0x4c
   1ab10:	e002      	b.n	1ab18 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1ab12:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1ab16:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1ab18:	4629      	mov	r1, r5
   1ab1a:	4630      	mov	r0, r6
   1ab1c:	f7ff fe9a 	bl	1a854 <os_sched_sleep>
        ret = OS_OK;
   1ab20:	2400      	movs	r4, #0
        sched = 1;
   1ab22:	2501      	movs	r5, #1
   1ab24:	e7d5      	b.n	1aad2 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1ab26:	2406      	movs	r4, #6
    sched = 0;
   1ab28:	2500      	movs	r5, #0
   1ab2a:	e7d2      	b.n	1aad2 <os_sem_pend+0x2a>
        os_sched(NULL);
   1ab2c:	2000      	movs	r0, #0
   1ab2e:	f7ff ff59 	bl	1a9e4 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1ab32:	7b73      	ldrb	r3, [r6, #13]
   1ab34:	f013 0f02 	tst.w	r3, #2
   1ab38:	d101      	bne.n	1ab3e <os_sem_pend+0x96>
            ret = OS_OK;
   1ab3a:	2400      	movs	r4, #0
   1ab3c:	e7cd      	b.n	1aada <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1ab3e:	f000 f953 	bl	1ade8 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1ab42:	7b73      	ldrb	r3, [r6, #13]
   1ab44:	f023 0302 	bic.w	r3, r3, #2
   1ab48:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1ab4a:	f000 f953 	bl	1adf4 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1ab4e:	2406      	movs	r4, #6
   1ab50:	e7c3      	b.n	1aada <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1ab52:	2409      	movs	r4, #9
   1ab54:	e7c1      	b.n	1aada <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1ab56:	2403      	movs	r4, #3
   1ab58:	e7bf      	b.n	1aada <os_sem_pend+0x32>
   1ab5a:	bf00      	nop
   1ab5c:	2000a638 	.word	0x2000a638

0001ab60 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1ab60:	2300      	movs	r3, #0
   1ab62:	e003      	b.n	1ab6c <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1ab64:	4a03      	ldr	r2, [pc, #12]	; (1ab74 <_clear_stack+0x14>)
   1ab66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1ab6a:	3301      	adds	r3, #1
   1ab6c:	428b      	cmp	r3, r1
   1ab6e:	dbf9      	blt.n	1ab64 <_clear_stack+0x4>
    }
}
   1ab70:	4770      	bx	lr
   1ab72:	bf00      	nop
   1ab74:	deadbeef 	.word	0xdeadbeef

0001ab78 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab7c:	4604      	mov	r4, r0
   1ab7e:	460f      	mov	r7, r1
   1ab80:	4690      	mov	r8, r2
   1ab82:	461d      	mov	r5, r3
   1ab84:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1ab88:	2250      	movs	r2, #80	; 0x50
   1ab8a:	2100      	movs	r1, #0
   1ab8c:	f000 fa99 	bl	1b0c2 <memset>

    t->t_func = func;
   1ab90:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1ab94:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1ab96:	f000 f927 	bl	1ade8 <os_arch_save_sr>
    rc = g_task_id;
   1ab9a:	4b2b      	ldr	r3, [pc, #172]	; (1ac48 <os_task_init+0xd0>)
   1ab9c:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1ab9e:	1c6a      	adds	r2, r5, #1
   1aba0:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1aba2:	f000 f927 	bl	1adf4 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1aba6:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1aba8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1abac:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1abae:	2301      	movs	r3, #1
   1abb0:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1abb2:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1abb4:	2300      	movs	r3, #0
   1abb6:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1abb8:	f104 0720 	add.w	r7, r4, #32
   1abbc:	4638      	mov	r0, r7
   1abbe:	f7ff fda3 	bl	1a708 <os_sanity_check_init>
    if (rc != OS_OK) {
   1abc2:	4605      	mov	r5, r0
   1abc4:	2800      	cmp	r0, #0
   1abc6:	d132      	bne.n	1ac2e <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1abc8:	9b07      	ldr	r3, [sp, #28]
   1abca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1abce:	d005      	beq.n	1abdc <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1abd0:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1abd2:	4638      	mov	r0, r7
   1abd4:	f7ff fda0 	bl	1a718 <os_sanity_check_register>
        if (rc != OS_OK) {
   1abd8:	4605      	mov	r5, r0
   1abda:	bb40      	cbnz	r0, 1ac2e <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1abdc:	4631      	mov	r1, r6
   1abde:	9808      	ldr	r0, [sp, #32]
   1abe0:	f7ff ffbe 	bl	1ab60 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1abe4:	9b08      	ldr	r3, [sp, #32]
   1abe6:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1abea:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1abec:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1abee:	4632      	mov	r2, r6
   1abf0:	4620      	mov	r0, r4
   1abf2:	f000 f907 	bl	1ae04 <os_arch_task_stack_init>
   1abf6:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1abf8:	4b14      	ldr	r3, [pc, #80]	; (1ac4c <os_task_init+0xd4>)
   1abfa:	681b      	ldr	r3, [r3, #0]
   1abfc:	b15b      	cbz	r3, 1ac16 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1abfe:	7ae1      	ldrb	r1, [r4, #11]
   1ac00:	7ada      	ldrb	r2, [r3, #11]
   1ac02:	4291      	cmp	r1, r2
   1ac04:	d001      	beq.n	1ac0a <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1ac06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ac08:	e7f8      	b.n	1abfc <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1ac0a:	2300      	movs	r3, #0
   1ac0c:	461a      	mov	r2, r3
   1ac0e:	4619      	mov	r1, r3
   1ac10:	4618      	mov	r0, r3
   1ac12:	f7fe fe53 	bl	198bc <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1ac16:	6423      	str	r3, [r4, #64]	; 0x40
   1ac18:	4b0c      	ldr	r3, [pc, #48]	; (1ac4c <os_task_init+0xd4>)
   1ac1a:	685a      	ldr	r2, [r3, #4]
   1ac1c:	6014      	str	r4, [r2, #0]
   1ac1e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1ac22:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1ac24:	4620      	mov	r0, r4
   1ac26:	f7ff fdc7 	bl	1a7b8 <os_sched_insert>
   1ac2a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1ac2c:	b110      	cbz	r0, 1ac34 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1ac2e:	4628      	mov	r0, r5
   1ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1ac34:	f7fe fefc 	bl	19a30 <os_started>
   1ac38:	b908      	cbnz	r0, 1ac3e <os_task_init+0xc6>
    return (0);
   1ac3a:	4605      	mov	r5, r0
   1ac3c:	e7f7      	b.n	1ac2e <os_task_init+0xb6>
        os_sched(NULL);
   1ac3e:	2000      	movs	r0, #0
   1ac40:	f7ff fed0 	bl	1a9e4 <os_sched>
   1ac44:	e7f3      	b.n	1ac2e <os_task_init+0xb6>
   1ac46:	bf00      	nop
   1ac48:	2000a664 	.word	0x2000a664
   1ac4c:	2000a668 	.word	0x2000a668

0001ac50 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1ac50:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1ac54:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1ac56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1ac5a:	e9d1 4500 	ldrd	r4, r5, [r1]
   1ac5e:	eb14 0b03 	adds.w	fp, r4, r3
   1ac62:	f145 0c00 	adc.w	ip, r5, #0
   1ac66:	e9c2 bc00 	strd	fp, ip, [r2]
   1ac6a:	688b      	ldr	r3, [r1, #8]
   1ac6c:	f641 6184 	movw	r1, #7812	; 0x1e84
   1ac70:	fb01 3000 	mla	r0, r1, r0, r3
   1ac74:	6090      	str	r0, [r2, #8]
   1ac76:	4b08      	ldr	r3, [pc, #32]	; (1ac98 <os_deltatime+0x48>)
   1ac78:	4298      	cmp	r0, r3
   1ac7a:	dd0a      	ble.n	1ac92 <os_deltatime+0x42>
   1ac7c:	f11b 0401 	adds.w	r4, fp, #1
   1ac80:	f14c 0500 	adc.w	r5, ip, #0
   1ac84:	e9c2 4500 	strd	r4, r5, [r2]
   1ac88:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1ac8c:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1ac90:	6090      	str	r0, [r2, #8]
}
   1ac92:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1ac96:	4770      	bx	lr
   1ac98:	000f423f 	.word	0x000f423f

0001ac9c <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1ac9c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1ac9e:	1e04      	subs	r4, r0, #0
   1aca0:	db0d      	blt.n	1acbe <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1aca2:	f000 f8a1 	bl	1ade8 <os_arch_save_sr>
   1aca6:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1aca8:	4a11      	ldr	r2, [pc, #68]	; (1acf0 <os_time_tick+0x54>)
   1acaa:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1acac:	18e0      	adds	r0, r4, r3
   1acae:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1acb0:	ea90 0f03 	teq	r0, r3
   1acb4:	d409      	bmi.n	1acca <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1acb6:	4628      	mov	r0, r5
   1acb8:	f000 f89c 	bl	1adf4 <os_arch_restore_sr>
}
   1acbc:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1acbe:	2300      	movs	r3, #0
   1acc0:	461a      	mov	r2, r3
   1acc2:	4619      	mov	r1, r3
   1acc4:	4618      	mov	r0, r3
   1acc6:	f7fe fdf9 	bl	198bc <__assert_func>
        delta = g_os_time - basetod.ostime;
   1acca:	4e0a      	ldr	r6, [pc, #40]	; (1acf4 <os_time_tick+0x58>)
   1accc:	4631      	mov	r1, r6
   1acce:	f851 4b08 	ldr.w	r4, [r1], #8
   1acd2:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1acd4:	460a      	mov	r2, r1
   1acd6:	4620      	mov	r0, r4
   1acd8:	f7ff ffba 	bl	1ac50 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1acdc:	f106 0118 	add.w	r1, r6, #24
   1ace0:	460a      	mov	r2, r1
   1ace2:	4620      	mov	r0, r4
   1ace4:	f7ff ffb4 	bl	1ac50 <os_deltatime>
        basetod.ostime = g_os_time;
   1ace8:	4b01      	ldr	r3, [pc, #4]	; (1acf0 <os_time_tick+0x54>)
   1acea:	681b      	ldr	r3, [r3, #0]
   1acec:	6033      	str	r3, [r6, #0]
   1acee:	e7e2      	b.n	1acb6 <os_time_tick+0x1a>
   1acf0:	2000a670 	.word	0x2000a670
   1acf4:	2000a168 	.word	0x2000a168

0001acf8 <os_time_get>:
}
   1acf8:	4b01      	ldr	r3, [pc, #4]	; (1ad00 <os_time_get+0x8>)
   1acfa:	6818      	ldr	r0, [r3, #0]
   1acfc:	4770      	bx	lr
   1acfe:	bf00      	nop
   1ad00:	2000a670 	.word	0x2000a670

0001ad04 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1ad04:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1ad06:	1e04      	subs	r4, r0, #0
   1ad08:	db09      	blt.n	1ad1e <os_time_advance+0x1a>

    if (ticks > 0) {
   1ad0a:	2c00      	cmp	r4, #0
   1ad0c:	dd06      	ble.n	1ad1c <os_time_advance+0x18>
        if (!os_started()) {
   1ad0e:	f7fe fe8f 	bl	19a30 <os_started>
   1ad12:	b950      	cbnz	r0, 1ad2a <os_time_advance+0x26>
            g_os_time += ticks;
   1ad14:	4a0a      	ldr	r2, [pc, #40]	; (1ad40 <os_time_advance+0x3c>)
   1ad16:	6813      	ldr	r3, [r2, #0]
   1ad18:	441c      	add	r4, r3
   1ad1a:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1ad1c:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1ad1e:	2300      	movs	r3, #0
   1ad20:	461a      	mov	r2, r3
   1ad22:	4619      	mov	r1, r3
   1ad24:	4618      	mov	r0, r3
   1ad26:	f7fe fdc9 	bl	198bc <__assert_func>
            os_time_tick(ticks);
   1ad2a:	4620      	mov	r0, r4
   1ad2c:	f7ff ffb6 	bl	1ac9c <os_time_tick>
            os_callout_tick();
   1ad30:	f7fe ffa6 	bl	19c80 <os_callout_tick>
            os_sched_os_timer_exp();
   1ad34:	f7ff fe12 	bl	1a95c <os_sched_os_timer_exp>
            os_sched(NULL);
   1ad38:	2000      	movs	r0, #0
   1ad3a:	f7ff fe53 	bl	1a9e4 <os_sched>
}
   1ad3e:	e7ed      	b.n	1ad1c <os_time_advance+0x18>
   1ad40:	2000a670 	.word	0x2000a670

0001ad44 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1ad44:	b900      	cbnz	r0, 1ad48 <os_time_delay+0x4>
   1ad46:	4770      	bx	lr
{
   1ad48:	b538      	push	{r3, r4, r5, lr}
   1ad4a:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1ad4c:	f000 f84c 	bl	1ade8 <os_arch_save_sr>
   1ad50:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1ad52:	f7ff fd73 	bl	1a83c <os_sched_get_current_task>
   1ad56:	4621      	mov	r1, r4
   1ad58:	f7ff fd7c 	bl	1a854 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1ad5c:	4628      	mov	r0, r5
   1ad5e:	f000 f849 	bl	1adf4 <os_arch_restore_sr>
        os_sched(NULL);
   1ad62:	2000      	movs	r0, #0
   1ad64:	f7ff fe3e 	bl	1a9e4 <os_sched>
    }
}
   1ad68:	bd38      	pop	{r3, r4, r5, pc}
	...

0001ad6c <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1ad6c:	b570      	push	{r4, r5, r6, lr}
   1ad6e:	4605      	mov	r5, r0
   1ad70:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1ad72:	f000 f839 	bl	1ade8 <os_arch_save_sr>
   1ad76:	4606      	mov	r6, r0
    if (tv != NULL) {
   1ad78:	b145      	cbz	r5, 1ad8c <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1ad7a:	f7ff ffbd 	bl	1acf8 <os_time_get>
   1ad7e:	4908      	ldr	r1, [pc, #32]	; (1ada0 <os_gettimeofday+0x34>)
   1ad80:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1ad84:	462a      	mov	r2, r5
   1ad86:	1ac0      	subs	r0, r0, r3
   1ad88:	f7ff ff62 	bl	1ac50 <os_deltatime>
    }

    if (tz != NULL) {
   1ad8c:	b114      	cbz	r4, 1ad94 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1ad8e:	4b04      	ldr	r3, [pc, #16]	; (1ada0 <os_gettimeofday+0x34>)
   1ad90:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1ad92:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1ad94:	4630      	mov	r0, r6
   1ad96:	f000 f82d 	bl	1adf4 <os_arch_restore_sr>

    return (0);
}
   1ad9a:	2000      	movs	r0, #0
   1ad9c:	bd70      	pop	{r4, r5, r6, pc}
   1ad9e:	bf00      	nop
   1ada0:	2000a168 	.word	0x2000a168

0001ada4 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1ada4:	b538      	push	{r3, r4, r5, lr}
   1ada6:	4604      	mov	r4, r0
   1ada8:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1adaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1adae:	2300      	movs	r3, #0
   1adb0:	01c0      	lsls	r0, r0, #7
   1adb2:	0e61      	lsrs	r1, r4, #25
   1adb4:	f002 f88a 	bl	1cecc <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1adb8:	2901      	cmp	r1, #1
   1adba:	bf08      	it	eq
   1adbc:	2800      	cmpeq	r0, #0
   1adbe:	d202      	bcs.n	1adc6 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1adc0:	6028      	str	r0, [r5, #0]
    return 0;
   1adc2:	2000      	movs	r0, #0
}
   1adc4:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1adc6:	2002      	movs	r0, #2
   1adc8:	e7fc      	b.n	1adc4 <os_time_ms_to_ticks+0x20>

0001adca <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1adca:	b508      	push	{r3, lr}
    os_time_advance(1);
   1adcc:	2001      	movs	r0, #1
   1adce:	f7ff ff99 	bl	1ad04 <os_time_advance>
}
   1add2:	bd08      	pop	{r3, pc}

0001add4 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1add4:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1add6:	f7ff fd19 	bl	1a80c <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1adda:	4b02      	ldr	r3, [pc, #8]	; (1ade4 <os_arch_ctx_sw+0x10>)
   1addc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ade0:	605a      	str	r2, [r3, #4]
}
   1ade2:	bd08      	pop	{r3, pc}
   1ade4:	e000ed00 	.word	0xe000ed00

0001ade8 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ade8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1adec:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1adee:	f000 0001 	and.w	r0, r0, #1
   1adf2:	4770      	bx	lr

0001adf4 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1adf4:	b900      	cbnz	r0, 1adf8 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1adf6:	b662      	cpsie	i
        __enable_irq();
    }
}
   1adf8:	4770      	bx	lr

0001adfa <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1adfa:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1adfe:	f000 0001 	and.w	r0, r0, #1
   1ae02:	4770      	bx	lr

0001ae04 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1ae04:	b570      	push	{r4, r5, r6, lr}
   1ae06:	4606      	mov	r6, r0
   1ae08:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1ae0a:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1ae0e:	2309      	movs	r3, #9
   1ae10:	e003      	b.n	1ae1a <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1ae12:	2200      	movs	r2, #0
   1ae14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1ae18:	3301      	adds	r3, #1
   1ae1a:	2b0d      	cmp	r3, #13
   1ae1c:	ddf9      	ble.n	1ae12 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1ae1e:	4620      	mov	r0, r4
   1ae20:	f000 f8b6 	bl	1af90 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1ae24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1ae28:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1ae2c:	6973      	ldr	r3, [r6, #20]
   1ae2e:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1ae32:	69b3      	ldr	r3, [r6, #24]
   1ae34:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1ae38:	f06f 0302 	mvn.w	r3, #2
   1ae3c:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1ae40:	4620      	mov	r0, r4
   1ae42:	bd70      	pop	{r4, r5, r6, pc}

0001ae44 <os_arch_init>:

void
os_arch_init(void)
{
   1ae44:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1ae46:	4a04      	ldr	r2, [pc, #16]	; (1ae58 <os_arch_init+0x14>)
   1ae48:	6953      	ldr	r3, [r2, #20]
   1ae4a:	f043 0310 	orr.w	r3, r3, #16
   1ae4e:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1ae50:	f7fe fdf4 	bl	19a3c <os_init_idle_task>
}
   1ae54:	bd08      	pop	{r3, pc}
   1ae56:	bf00      	nop
   1ae58:	e000ed00 	.word	0xe000ed00

0001ae5c <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ae5e:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1ae62:	b90c      	cbnz	r4, 1ae68 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1ae64:	2400      	movs	r4, #0
   1ae66:	e009      	b.n	1ae7c <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1ae68:	2007      	movs	r0, #7
   1ae6a:	e02e      	b.n	1aeca <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1ae6c:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1ae70:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1ae74:	26ff      	movs	r6, #255	; 0xff
   1ae76:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1ae7a:	3401      	adds	r4, #1
   1ae7c:	2cef      	cmp	r4, #239	; 0xef
   1ae7e:	d9f5      	bls.n	1ae6c <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1ae80:	f06f 040d 	mvn.w	r4, #13
   1ae84:	e007      	b.n	1ae96 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1ae86:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae88:	4e12      	ldr	r6, [pc, #72]	; (1aed4 <os_arch_os_init+0x78>)
   1ae8a:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae8c:	3510      	adds	r5, #16
   1ae8e:	4f12      	ldr	r7, [pc, #72]	; (1aed8 <os_arch_os_init+0x7c>)
   1ae90:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1ae94:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1ae96:	2c25      	cmp	r4, #37	; 0x25
   1ae98:	ddf5      	ble.n	1ae86 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae9a:	4c0e      	ldr	r4, [pc, #56]	; (1aed4 <os_arch_os_init+0x78>)
   1ae9c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae9e:	4e0f      	ldr	r6, [pc, #60]	; (1aedc <os_arch_os_init+0x80>)
   1aea0:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1aea2:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1aea4:	4e0e      	ldr	r6, [pc, #56]	; (1aee0 <os_arch_os_init+0x84>)
   1aea6:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1aea8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1aeaa:	4e0e      	ldr	r6, [pc, #56]	; (1aee4 <os_arch_os_init+0x88>)
   1aeac:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aeae:	25e0      	movs	r5, #224	; 0xe0
   1aeb0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1aeb4:	2520      	movs	r5, #32
   1aeb6:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1aeb8:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1aebc:	f014 0f01 	tst.w	r4, #1
   1aec0:	d004      	beq.n	1aecc <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1aec2:	f8df c024 	ldr.w	ip, [pc, #36]	; 1aee8 <os_arch_os_init+0x8c>
   1aec6:	df00      	svc	0
        err = OS_OK;
   1aec8:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1aeca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1aecc:	f7ff ffba 	bl	1ae44 <os_arch_init>
        err = OS_OK;
   1aed0:	2000      	movs	r0, #0
   1aed2:	e7fa      	b.n	1aeca <os_arch_os_init+0x6e>
   1aed4:	e000ed00 	.word	0xe000ed00
   1aed8:	0001b02f 	.word	0x0001b02f
   1aedc:	0001af97 	.word	0x0001af97
   1aee0:	0001afdd 	.word	0x0001afdd
   1aee4:	0001b023 	.word	0x0001b023
   1aee8:	0001ae45 	.word	0x0001ae45

0001aeec <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1aeec:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1aeee:	f7ff fd73 	bl	1a9d8 <os_sched_next_task>
   1aef2:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1aef4:	f7ff fca8 	bl	1a848 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1aef8:	6823      	ldr	r3, [r4, #0]
   1aefa:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1aefc:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1af00:	2106      	movs	r1, #6
   1af02:	2080      	movs	r0, #128	; 0x80
   1af04:	f000 fde8 	bl	1bad8 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1af08:	4b03      	ldr	r3, [pc, #12]	; (1af18 <os_arch_start+0x2c>)
   1af0a:	2201      	movs	r2, #1
   1af0c:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1af0e:	4620      	mov	r0, r4
   1af10:	f7ff ff60 	bl	1add4 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1af14:	69a0      	ldr	r0, [r4, #24]
   1af16:	bd10      	pop	{r4, pc}
   1af18:	2000a638 	.word	0x2000a638

0001af1c <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1af1c:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1af1e:	4814      	ldr	r0, [pc, #80]	; (1af70 <os_arch_os_start+0x54>)
   1af20:	6800      	ldr	r0, [r0, #0]
   1af22:	3804      	subs	r0, #4
   1af24:	f000 f82a 	bl	1af7c <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1af28:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1af2c:	b9d4      	cbnz	r4, 1af64 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1af2e:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1af32:	f004 0403 	and.w	r4, r4, #3
   1af36:	2c03      	cmp	r4, #3
   1af38:	d808      	bhi.n	1af4c <os_arch_os_start+0x30>
   1af3a:	e8df f004 	tbb	[pc, r4]
   1af3e:	1515      	.short	0x1515
   1af40:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1af42:	4c0c      	ldr	r4, [pc, #48]	; (1af74 <os_arch_os_start+0x58>)
   1af44:	6824      	ldr	r4, [r4, #0]
   1af46:	f014 0f01 	tst.w	r4, #1
   1af4a:	d10f      	bne.n	1af6c <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1af4c:	f8df c028 	ldr.w	ip, [pc, #40]	; 1af78 <os_arch_os_start+0x5c>
   1af50:	df00      	svc	0
   1af52:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1af54:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1af56:	4c07      	ldr	r4, [pc, #28]	; (1af74 <os_arch_os_start+0x58>)
   1af58:	6824      	ldr	r4, [r4, #0]
   1af5a:	f014 0f01 	tst.w	r4, #1
   1af5e:	d1f5      	bne.n	1af4c <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1af60:	2008      	movs	r0, #8
   1af62:	e7f7      	b.n	1af54 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1af64:	2007      	movs	r0, #7
   1af66:	e7f5      	b.n	1af54 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1af68:	2008      	movs	r0, #8
   1af6a:	e7f3      	b.n	1af54 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1af6c:	2008      	movs	r0, #8
   1af6e:	e7f1      	b.n	1af54 <os_arch_os_start+0x38>
   1af70:	2000a598 	.word	0x2000a598
   1af74:	2000a198 	.word	0x2000a198
   1af78:	0001aeed 	.word	0x0001aeed

0001af7c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1af7c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1af80:	4832      	ldr	r0, [pc, #200]	; (1b04c <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1af82:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1af84:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1af86:	f380 8814 	msr	CONTROL, r0
        ISB
   1af8a:	f3bf 8f6f 	isb	sy
        BX      LR
   1af8e:	4770      	bx	lr

0001af90 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1af90:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1af94:	4770      	bx	lr

0001af96 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1af96:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1af9a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1af9c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1afa0:	b951      	cbnz	r1, 1afb8 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1afa2:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1afa6:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1afa8:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1afaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1afae:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1afb2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1afb6:	4770      	bx	lr

0001afb8 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1afb8:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1afba:	4a25      	ldr	r2, [pc, #148]	; (1b050 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1afbc:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1afbe:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1afc0:	d809      	bhi.n	1afd6 <SVC_Done>

        LDR     R4,=SVC_Table-4
   1afc2:	4c24      	ldr	r4, [pc, #144]	; (1b054 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1afc4:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1afc8:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1afcc:	47a0      	blx	r4

        MRS     R12,PSP
   1afce:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1afd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001afd6 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1afd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1afda:	4770      	bx	lr

0001afdc <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1afdc:	4b1e      	ldr	r3, [pc, #120]	; (1b058 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1afde:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1afe0:	4b1e      	ldr	r3, [pc, #120]	; (1b05c <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1afe2:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1afe4:	4291      	cmp	r1, r2
        IT      EQ
   1afe6:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1afe8:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1afea:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1afee:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1aff2:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1aff4:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1aff8:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1affc:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1b000:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1b002:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1b006:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1b00a:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1b00e:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1b010:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1b014:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1b018:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1b01c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1b020:	4770      	bx	lr

0001b022 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b022:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1b024:	f7ff fed1 	bl	1adca <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1b02c:	4770      	bx	lr

0001b02e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1b02e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1b032:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1b034:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1b038:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1b03c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1b040:	4668      	mov	r0, sp
        BL      os_default_irq
   1b042:	f7fe fc61 	bl	19908 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1b046:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1b04a:	4770      	bx	lr
        LDR     R0,=os_flags
   1b04c:	2000a198 	.word	0x2000a198
        LDR     R2,=SVC_Count
   1b050:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1b054:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b058:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1b05c:	2000a660 	.word	0x2000a660

0001b060 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1b060:	b470      	push	{r4, r5, r6}
   1b062:	f04f 0500 	mov.w	r5, #0
   1b066:	f022 0603 	bic.w	r6, r2, #3
   1b06a:	e005      	b.n	1b078 <test1>

0001b06c <loop1>:
   1b06c:	5943      	ldr	r3, [r0, r5]
   1b06e:	594c      	ldr	r4, [r1, r5]
   1b070:	42a3      	cmp	r3, r4
   1b072:	d104      	bne.n	1b07e <res1>
   1b074:	f105 0504 	add.w	r5, r5, #4

0001b078 <test1>:
   1b078:	42b5      	cmp	r5, r6
   1b07a:	d1f7      	bne.n	1b06c <loop1>
   1b07c:	e00d      	b.n	1b09a <test2>

0001b07e <res1>:
   1b07e:	ba1b      	rev	r3, r3
   1b080:	ba24      	rev	r4, r4
   1b082:	1b1b      	subs	r3, r3, r4
   1b084:	bf8c      	ite	hi
   1b086:	2301      	movhi	r3, #1
   1b088:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1b08c:	e009      	b.n	1b0a2 <done>

0001b08e <loop2>:
   1b08e:	5d43      	ldrb	r3, [r0, r5]
   1b090:	5d4c      	ldrb	r4, [r1, r5]
   1b092:	1b1b      	subs	r3, r3, r4
   1b094:	d105      	bne.n	1b0a2 <done>
   1b096:	f105 0501 	add.w	r5, r5, #1

0001b09a <test2>:
   1b09a:	4295      	cmp	r5, r2
   1b09c:	d1f7      	bne.n	1b08e <loop2>
   1b09e:	f04f 0300 	mov.w	r3, #0

0001b0a2 <done>:
   1b0a2:	4618      	mov	r0, r3
   1b0a4:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1b0a6:	4770      	bx	lr

0001b0a8 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1b0a8:	e001      	b.n	1b0ae <test1>

0001b0aa <loop1>:
   1b0aa:	588b      	ldr	r3, [r1, r2]
   1b0ac:	5083      	str	r3, [r0, r2]

0001b0ae <test1>:
   1b0ae:	3a04      	subs	r2, #4
   1b0b0:	d5fb      	bpl.n	1b0aa <loop1>
   1b0b2:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1b0b6:	e001      	b.n	1b0bc <test2>

0001b0b8 <loop2>:
   1b0b8:	5c8b      	ldrb	r3, [r1, r2]
   1b0ba:	5483      	strb	r3, [r0, r2]

0001b0bc <test2>:
   1b0bc:	3a01      	subs	r2, #1
   1b0be:	d5fb      	bpl.n	1b0b8 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1b0c0:	4770      	bx	lr

0001b0c2 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1b0c2:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1b0c4:	4605      	mov	r5, r0
   1b0c6:	b2c9      	uxtb	r1, r1
   1b0c8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1b0cc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1b0d0:	18ab      	adds	r3, r5, r2
   1b0d2:	2403      	movs	r4, #3
   1b0d4:	4023      	ands	r3, r4
   1b0d6:	1ad3      	subs	r3, r2, r3
   1b0d8:	d40b      	bmi.n	1b0f2 <memset+0x30>
   1b0da:	e001      	b.n	1b0e0 <memset+0x1e>
   1b0dc:	3a01      	subs	r2, #1
   1b0de:	54a9      	strb	r1, [r5, r2]
   1b0e0:	429a      	cmp	r2, r3
   1b0e2:	d1fb      	bne.n	1b0dc <memset+0x1a>
   1b0e4:	e000      	b.n	1b0e8 <memset+0x26>
   1b0e6:	50a9      	str	r1, [r5, r2]
   1b0e8:	3a04      	subs	r2, #4
   1b0ea:	d5fc      	bpl.n	1b0e6 <memset+0x24>
   1b0ec:	3204      	adds	r2, #4
   1b0ee:	e000      	b.n	1b0f2 <memset+0x30>
   1b0f0:	54a9      	strb	r1, [r5, r2]
   1b0f2:	3a01      	subs	r2, #1
   1b0f4:	d5fc      	bpl.n	1b0f0 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1b0f6:	bc30      	pop	{r4, r5}
   1b0f8:	4770      	bx	lr

0001b0fa <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1b0fa:	b430      	push	{r4, r5}
   1b0fc:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1b0fe:	1c55      	adds	r5, r2, #1
   1b100:	7813      	ldrb	r3, [r2, #0]
   1b102:	1c4c      	adds	r4, r1, #1
   1b104:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1b106:	1a18      	subs	r0, r3, r0
   1b108:	d103      	bne.n	1b112 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1b10a:	462a      	mov	r2, r5
   1b10c:	4621      	mov	r1, r4
		if (d || !ch)
   1b10e:	2b00      	cmp	r3, #0
   1b110:	d1f5      	bne.n	1b0fe <strcmp+0x4>
			break;
	}

	return d;
}
   1b112:	bc30      	pop	{r4, r5}
   1b114:	4770      	bx	lr

0001b116 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1b116:	4603      	mov	r3, r0
	while (*ss)
   1b118:	e000      	b.n	1b11c <strlen+0x6>
		ss++;
   1b11a:	3301      	adds	r3, #1
	while (*ss)
   1b11c:	781a      	ldrb	r2, [r3, #0]
   1b11e:	2a00      	cmp	r2, #0
   1b120:	d1fb      	bne.n	1b11a <strlen+0x4>
	return ss - s;
}
   1b122:	1a18      	subs	r0, r3, r0
   1b124:	4770      	bx	lr

0001b126 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1b126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b12a:	b082      	sub	sp, #8
   1b12c:	e9cd 0100 	strd	r0, r1, [sp]
   1b130:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1b132:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1b136:	2401      	movs	r4, #1
   1b138:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1b13a:	e004      	b.n	1b146 <ui2a+0x20>
        d *= p->base;
   1b13c:	fb06 f305 	mul.w	r3, r6, r5
   1b140:	fba4 4506 	umull	r4, r5, r4, r6
   1b144:	441d      	add	r5, r3
    while (num / d >= p->base)
   1b146:	4622      	mov	r2, r4
   1b148:	462b      	mov	r3, r5
   1b14a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b14e:	f001 febd 	bl	1cecc <__aeabi_uldivmod>
   1b152:	f899 6003 	ldrb.w	r6, [r9, #3]
   1b156:	2700      	movs	r7, #0
   1b158:	42b9      	cmp	r1, r7
   1b15a:	bf08      	it	eq
   1b15c:	42b0      	cmpeq	r0, r6
   1b15e:	d2ed      	bcs.n	1b13c <ui2a+0x16>
    int n = 0;
   1b160:	f04f 0a00 	mov.w	sl, #0
   1b164:	e007      	b.n	1b176 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b166:	2330      	movs	r3, #48	; 0x30
   1b168:	441e      	add	r6, r3
   1b16a:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1b16e:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b172:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1b176:	ea54 0305 	orrs.w	r3, r4, r5
   1b17a:	d02e      	beq.n	1b1da <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1b17c:	4622      	mov	r2, r4
   1b17e:	462b      	mov	r3, r5
   1b180:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b184:	f001 fea2 	bl	1cecc <__aeabi_uldivmod>
   1b188:	4606      	mov	r6, r0
   1b18a:	460f      	mov	r7, r1
        num %= d;
   1b18c:	4622      	mov	r2, r4
   1b18e:	462b      	mov	r3, r5
   1b190:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b194:	f001 fe9a 	bl	1cecc <__aeabi_uldivmod>
   1b198:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1b19c:	f899 2003 	ldrb.w	r2, [r9, #3]
   1b1a0:	2300      	movs	r3, #0
   1b1a2:	4620      	mov	r0, r4
   1b1a4:	4629      	mov	r1, r5
   1b1a6:	f001 fe91 	bl	1cecc <__aeabi_uldivmod>
   1b1aa:	4604      	mov	r4, r0
   1b1ac:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1b1ae:	f1ba 0f00 	cmp.w	sl, #0
   1b1b2:	d105      	bne.n	1b1c0 <ui2a+0x9a>
   1b1b4:	ea56 0307 	orrs.w	r3, r6, r7
   1b1b8:	d102      	bne.n	1b1c0 <ui2a+0x9a>
   1b1ba:	ea54 0305 	orrs.w	r3, r4, r5
   1b1be:	d1da      	bne.n	1b176 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b1c0:	2f00      	cmp	r7, #0
   1b1c2:	bf08      	it	eq
   1b1c4:	2e0a      	cmpeq	r6, #10
   1b1c6:	d3ce      	bcc.n	1b166 <ui2a+0x40>
   1b1c8:	f899 3002 	ldrb.w	r3, [r9, #2]
   1b1cc:	f013 0f04 	tst.w	r3, #4
   1b1d0:	d001      	beq.n	1b1d6 <ui2a+0xb0>
   1b1d2:	2337      	movs	r3, #55	; 0x37
   1b1d4:	e7c8      	b.n	1b168 <ui2a+0x42>
   1b1d6:	2357      	movs	r3, #87	; 0x57
   1b1d8:	e7c6      	b.n	1b168 <ui2a+0x42>
        }
    }
    *bf = 0;
   1b1da:	2300      	movs	r3, #0
   1b1dc:	f888 3000 	strb.w	r3, [r8]
}
   1b1e0:	b002      	add	sp, #8
   1b1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b1e6 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1b1e6:	b508      	push	{r3, lr}
    if (num < 0) {
   1b1e8:	2800      	cmp	r0, #0
   1b1ea:	f171 0300 	sbcs.w	r3, r1, #0
   1b1ee:	db02      	blt.n	1b1f6 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1b1f0:	f7ff ff99 	bl	1b126 <ui2a>
}
   1b1f4:	bd08      	pop	{r3, pc}
        num = -num;
   1b1f6:	4240      	negs	r0, r0
   1b1f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1b1fc:	7893      	ldrb	r3, [r2, #2]
   1b1fe:	f043 0301 	orr.w	r3, r3, #1
   1b202:	7093      	strb	r3, [r2, #2]
   1b204:	e7f4      	b.n	1b1f0 <i2a+0xa>

0001b206 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1b206:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b20a:	b2db      	uxtb	r3, r3
   1b20c:	2b09      	cmp	r3, #9
   1b20e:	d90b      	bls.n	1b228 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1b210:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1b214:	b2db      	uxtb	r3, r3
   1b216:	2b05      	cmp	r3, #5
   1b218:	d908      	bls.n	1b22c <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1b21a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1b21e:	b2db      	uxtb	r3, r3
   1b220:	2b05      	cmp	r3, #5
   1b222:	d805      	bhi.n	1b230 <a2d+0x2a>
        return ch - 'A' + 10;
   1b224:	3837      	subs	r0, #55	; 0x37
   1b226:	4770      	bx	lr
        return ch - '0';
   1b228:	3830      	subs	r0, #48	; 0x30
   1b22a:	4770      	bx	lr
        return ch - 'a' + 10;
   1b22c:	3857      	subs	r0, #87	; 0x57
   1b22e:	4770      	bx	lr
    else
        return -1;
   1b230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b234:	4770      	bx	lr

0001b236 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1b236:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b23a:	4605      	mov	r5, r0
   1b23c:	4688      	mov	r8, r1
   1b23e:	4617      	mov	r7, r2
   1b240:	4699      	mov	r9, r3
    const char *p = *src;
   1b242:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1b244:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1b246:	4628      	mov	r0, r5
   1b248:	f7ff ffdd 	bl	1b206 <a2d>
   1b24c:	2800      	cmp	r0, #0
   1b24e:	db06      	blt.n	1b25e <a2i+0x28>
        if (digit > base)
   1b250:	42b8      	cmp	r0, r7
   1b252:	dc04      	bgt.n	1b25e <a2i+0x28>
            break;
        num = num * base + digit;
   1b254:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1b258:	7825      	ldrb	r5, [r4, #0]
   1b25a:	3401      	adds	r4, #1
   1b25c:	e7f3      	b.n	1b246 <a2i+0x10>
    }
    *src = p;
   1b25e:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1b262:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1b266:	4628      	mov	r0, r5
   1b268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b26c <putf>:

static int putf(FILE *putp, char c)
{
   1b26c:	b500      	push	{lr}
   1b26e:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1b270:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1b274:	6803      	ldr	r3, [r0, #0]
   1b276:	681b      	ldr	r3, [r3, #0]
   1b278:	b14b      	cbz	r3, 1b28e <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1b27a:	2201      	movs	r2, #1
   1b27c:	f10d 0107 	add.w	r1, sp, #7
   1b280:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1b282:	2801      	cmp	r0, #1
   1b284:	d005      	beq.n	1b292 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1b286:	2000      	movs	r0, #0
    else
        return 1;
}
   1b288:	b003      	add	sp, #12
   1b28a:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1b28e:	2000      	movs	r0, #0
   1b290:	e7fa      	b.n	1b288 <putf+0x1c>
        return 1;
   1b292:	2001      	movs	r0, #1
   1b294:	e7f8      	b.n	1b288 <putf+0x1c>
	...

0001b298 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b29c:	4606      	mov	r6, r0
   1b29e:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1b2a0:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1b2a2:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1b2a4:	e001      	b.n	1b2aa <putchw+0x12>
        n--;
   1b2a6:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1b2a8:	4613      	mov	r3, r2
   1b2aa:	1c5a      	adds	r2, r3, #1
   1b2ac:	781b      	ldrb	r3, [r3, #0]
   1b2ae:	b10b      	cbz	r3, 1b2b4 <putchw+0x1c>
   1b2b0:	2c00      	cmp	r4, #0
   1b2b2:	dcf8      	bgt.n	1b2a6 <putchw+0xe>
    if (p->sign)
   1b2b4:	78bb      	ldrb	r3, [r7, #2]
   1b2b6:	f013 0f01 	tst.w	r3, #1
   1b2ba:	d000      	beq.n	1b2be <putchw+0x26>
        n--;
   1b2bc:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1b2be:	887b      	ldrh	r3, [r7, #2]
   1b2c0:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b2c4:	b29b      	uxth	r3, r3
   1b2c6:	f241 0202 	movw	r2, #4098	; 0x1002
   1b2ca:	4293      	cmp	r3, r2
   1b2cc:	d01c      	beq.n	1b308 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1b2ce:	f640 0202 	movw	r2, #2050	; 0x802
   1b2d2:	4293      	cmp	r3, r2
   1b2d4:	d01a      	beq.n	1b30c <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1b2d6:	683b      	ldr	r3, [r7, #0]
   1b2d8:	4d35      	ldr	r5, [pc, #212]	; (1b3b0 <putchw+0x118>)
   1b2da:	401d      	ands	r5, r3
   1b2dc:	b1f5      	cbz	r5, 1b31c <putchw+0x84>
    unsigned written = 0;
   1b2de:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1b2e0:	78bb      	ldrb	r3, [r7, #2]
   1b2e2:	f013 0f01 	tst.w	r3, #1
   1b2e6:	d11f      	bne.n	1b328 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1b2e8:	887b      	ldrh	r3, [r7, #2]
   1b2ea:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b2ee:	b29b      	uxth	r3, r3
   1b2f0:	f241 0202 	movw	r2, #4098	; 0x1002
   1b2f4:	4293      	cmp	r3, r2
   1b2f6:	d01d      	beq.n	1b334 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1b2f8:	f640 0202 	movw	r2, #2050	; 0x802
   1b2fc:	4293      	cmp	r3, r2
   1b2fe:	d02a      	beq.n	1b356 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1b300:	787b      	ldrb	r3, [r7, #1]
   1b302:	bba3      	cbnz	r3, 1b36e <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1b304:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1b306:	e03d      	b.n	1b384 <putchw+0xec>
        n -= 2;
   1b308:	3c02      	subs	r4, #2
   1b30a:	e7e4      	b.n	1b2d6 <putchw+0x3e>
        n--;
   1b30c:	3c01      	subs	r4, #1
   1b30e:	e7e2      	b.n	1b2d6 <putchw+0x3e>
            written += putf(putp, ' ');
   1b310:	2120      	movs	r1, #32
   1b312:	4630      	mov	r0, r6
   1b314:	f7ff ffaa 	bl	1b26c <putf>
   1b318:	4405      	add	r5, r0
        while (n-- > 0)
   1b31a:	4644      	mov	r4, r8
   1b31c:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b320:	2c00      	cmp	r4, #0
   1b322:	dcf5      	bgt.n	1b310 <putchw+0x78>
   1b324:	4644      	mov	r4, r8
   1b326:	e7db      	b.n	1b2e0 <putchw+0x48>
        written += putf(putp, '-');
   1b328:	212d      	movs	r1, #45	; 0x2d
   1b32a:	4630      	mov	r0, r6
   1b32c:	f7ff ff9e 	bl	1b26c <putf>
   1b330:	4405      	add	r5, r0
   1b332:	e7d9      	b.n	1b2e8 <putchw+0x50>
        written += putf(putp, '0');
   1b334:	2130      	movs	r1, #48	; 0x30
   1b336:	4630      	mov	r0, r6
   1b338:	f7ff ff98 	bl	1b26c <putf>
   1b33c:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b33e:	78bb      	ldrb	r3, [r7, #2]
   1b340:	f013 0f04 	tst.w	r3, #4
   1b344:	d005      	beq.n	1b352 <putchw+0xba>
   1b346:	2158      	movs	r1, #88	; 0x58
   1b348:	4630      	mov	r0, r6
   1b34a:	f7ff ff8f 	bl	1b26c <putf>
   1b34e:	4405      	add	r5, r0
   1b350:	e7d6      	b.n	1b300 <putchw+0x68>
   1b352:	2178      	movs	r1, #120	; 0x78
   1b354:	e7f8      	b.n	1b348 <putchw+0xb0>
        written += putf(putp, '0');
   1b356:	2130      	movs	r1, #48	; 0x30
   1b358:	4630      	mov	r0, r6
   1b35a:	f7ff ff87 	bl	1b26c <putf>
   1b35e:	4405      	add	r5, r0
   1b360:	e7ce      	b.n	1b300 <putchw+0x68>
            written += putf(putp, '0');
   1b362:	2130      	movs	r1, #48	; 0x30
   1b364:	4630      	mov	r0, r6
   1b366:	f7ff ff81 	bl	1b26c <putf>
   1b36a:	4405      	add	r5, r0
        while (n-- > 0)
   1b36c:	4644      	mov	r4, r8
   1b36e:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b372:	2c00      	cmp	r4, #0
   1b374:	dcf5      	bgt.n	1b362 <putchw+0xca>
   1b376:	4644      	mov	r4, r8
   1b378:	e7c4      	b.n	1b304 <putchw+0x6c>
        written += putf(putp, ch);
   1b37a:	4630      	mov	r0, r6
   1b37c:	f7ff ff76 	bl	1b26c <putf>
   1b380:	4405      	add	r5, r0
    while ((ch = *bf++))
   1b382:	4643      	mov	r3, r8
   1b384:	f103 0801 	add.w	r8, r3, #1
   1b388:	7819      	ldrb	r1, [r3, #0]
   1b38a:	2900      	cmp	r1, #0
   1b38c:	d1f5      	bne.n	1b37a <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b38e:	78bb      	ldrb	r3, [r7, #2]
   1b390:	f013 0f08 	tst.w	r3, #8
   1b394:	d106      	bne.n	1b3a4 <putchw+0x10c>
   1b396:	e008      	b.n	1b3aa <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1b398:	2120      	movs	r1, #32
   1b39a:	4630      	mov	r0, r6
   1b39c:	f7ff ff66 	bl	1b26c <putf>
   1b3a0:	4405      	add	r5, r0
        while (n-- > 0)
   1b3a2:	463c      	mov	r4, r7
   1b3a4:	1e67      	subs	r7, r4, #1
   1b3a6:	2c00      	cmp	r4, #0
   1b3a8:	dcf6      	bgt.n	1b398 <putchw+0x100>
    }
    
    return written;
}
   1b3aa:	4628      	mov	r0, r5
   1b3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b3b0:	0008ff00 	.word	0x0008ff00

0001b3b4 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b3b4:	b160      	cbz	r0, 1b3d0 <intarg+0x1c>
   1b3b6:	2801      	cmp	r0, #1
   1b3b8:	d017      	beq.n	1b3ea <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b3ba:	bb19      	cbnz	r1, 1b404 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1b3bc:	6813      	ldr	r3, [r2, #0]
   1b3be:	3307      	adds	r3, #7
   1b3c0:	f023 0307 	bic.w	r3, r3, #7
   1b3c4:	f103 0108 	add.w	r1, r3, #8
   1b3c8:	6011      	str	r1, [r2, #0]
   1b3ca:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b3ce:	4770      	bx	lr
        if (sign) {
   1b3d0:	b129      	cbz	r1, 1b3de <intarg+0x2a>
            val = va_arg(*va, int);
   1b3d2:	6813      	ldr	r3, [r2, #0]
   1b3d4:	1d19      	adds	r1, r3, #4
   1b3d6:	6011      	str	r1, [r2, #0]
   1b3d8:	6818      	ldr	r0, [r3, #0]
   1b3da:	17c1      	asrs	r1, r0, #31
   1b3dc:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b3de:	6813      	ldr	r3, [r2, #0]
   1b3e0:	1d19      	adds	r1, r3, #4
   1b3e2:	6011      	str	r1, [r2, #0]
   1b3e4:	6818      	ldr	r0, [r3, #0]
   1b3e6:	2100      	movs	r1, #0
   1b3e8:	4770      	bx	lr
        if (sign) {
   1b3ea:	b129      	cbz	r1, 1b3f8 <intarg+0x44>
            val = va_arg(*va, long);
   1b3ec:	6813      	ldr	r3, [r2, #0]
   1b3ee:	1d19      	adds	r1, r3, #4
   1b3f0:	6011      	str	r1, [r2, #0]
   1b3f2:	6818      	ldr	r0, [r3, #0]
   1b3f4:	17c1      	asrs	r1, r0, #31
   1b3f6:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b3f8:	6813      	ldr	r3, [r2, #0]
   1b3fa:	1d19      	adds	r1, r3, #4
   1b3fc:	6011      	str	r1, [r2, #0]
   1b3fe:	6818      	ldr	r0, [r3, #0]
   1b400:	2100      	movs	r1, #0
   1b402:	4770      	bx	lr
            val = va_arg(*va, long long);
   1b404:	6813      	ldr	r3, [r2, #0]
   1b406:	3307      	adds	r3, #7
   1b408:	f023 0307 	bic.w	r3, r3, #7
   1b40c:	f103 0108 	add.w	r1, r3, #8
   1b410:	6011      	str	r1, [r2, #0]
   1b412:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b416:	4770      	bx	lr

0001b418 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b418:	b570      	push	{r4, r5, r6, lr}
   1b41a:	b08a      	sub	sp, #40	; 0x28
   1b41c:	4605      	mov	r5, r0
   1b41e:	9101      	str	r1, [sp, #4]
   1b420:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b422:	ab02      	add	r3, sp, #8
   1b424:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b426:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1b428:	9b01      	ldr	r3, [sp, #4]
   1b42a:	1c5a      	adds	r2, r3, #1
   1b42c:	9201      	str	r2, [sp, #4]
   1b42e:	7819      	ldrb	r1, [r3, #0]
   1b430:	2900      	cmp	r1, #0
   1b432:	f000 811c 	beq.w	1b66e <tfp_format+0x256>
        if (ch != '%') {
   1b436:	2925      	cmp	r1, #37	; 0x25
   1b438:	d004      	beq.n	1b444 <tfp_format+0x2c>
            written += putf(putp, ch);
   1b43a:	4628      	mov	r0, r5
   1b43c:	f7ff ff16 	bl	1b26c <putf>
   1b440:	4404      	add	r4, r0
   1b442:	e7f1      	b.n	1b428 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b444:	2200      	movs	r2, #0
   1b446:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b44a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b44e:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1b452:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1b456:	f362 0382 	bfi	r3, r2, #2, #1
   1b45a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b45e:	9b01      	ldr	r3, [sp, #4]
   1b460:	1c5a      	adds	r2, r3, #1
   1b462:	9201      	str	r2, [sp, #4]
   1b464:	7818      	ldrb	r0, [r3, #0]
   1b466:	b128      	cbz	r0, 1b474 <tfp_format+0x5c>
                switch (ch) {
   1b468:	282d      	cmp	r0, #45	; 0x2d
   1b46a:	d04e      	beq.n	1b50a <tfp_format+0xf2>
   1b46c:	2830      	cmp	r0, #48	; 0x30
   1b46e:	d03c      	beq.n	1b4ea <tfp_format+0xd2>
   1b470:	2823      	cmp	r0, #35	; 0x23
   1b472:	d043      	beq.n	1b4fc <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b474:	282a      	cmp	r0, #42	; 0x2a
   1b476:	d052      	beq.n	1b51e <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b478:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b47c:	b2db      	uxtb	r3, r3
   1b47e:	2b09      	cmp	r3, #9
   1b480:	d961      	bls.n	1b546 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b482:	286c      	cmp	r0, #108	; 0x6c
   1b484:	d065      	beq.n	1b552 <tfp_format+0x13a>
            lng = 0;
   1b486:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1b488:	287a      	cmp	r0, #122	; 0x7a
   1b48a:	d06f      	beq.n	1b56c <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1b48c:	2869      	cmp	r0, #105	; 0x69
   1b48e:	f000 808e 	beq.w	1b5ae <tfp_format+0x196>
   1b492:	d970      	bls.n	1b576 <tfp_format+0x15e>
   1b494:	2873      	cmp	r0, #115	; 0x73
   1b496:	f000 80dd 	beq.w	1b654 <tfp_format+0x23c>
   1b49a:	f200 8099 	bhi.w	1b5d0 <tfp_format+0x1b8>
   1b49e:	286f      	cmp	r0, #111	; 0x6f
   1b4a0:	f000 80c7 	beq.w	1b632 <tfp_format+0x21a>
   1b4a4:	2870      	cmp	r0, #112	; 0x70
   1b4a6:	d1bf      	bne.n	1b428 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1b4a8:	9b00      	ldr	r3, [sp, #0]
   1b4aa:	1d1a      	adds	r2, r3, #4
   1b4ac:	9200      	str	r2, [sp, #0]
   1b4ae:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b4b0:	2310      	movs	r3, #16
   1b4b2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b4b6:	aa08      	add	r2, sp, #32
   1b4b8:	2100      	movs	r1, #0
   1b4ba:	f7ff fe34 	bl	1b126 <ui2a>
                p.width = 2 * sizeof(void*);
   1b4be:	2308      	movs	r3, #8
   1b4c0:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b4c4:	2301      	movs	r3, #1
   1b4c6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b4ca:	2130      	movs	r1, #48	; 0x30
   1b4cc:	4628      	mov	r0, r5
   1b4ce:	f7ff fecd 	bl	1b26c <putf>
   1b4d2:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1b4d4:	2178      	movs	r1, #120	; 0x78
   1b4d6:	4628      	mov	r0, r5
   1b4d8:	f7ff fec8 	bl	1b26c <putf>
   1b4dc:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1b4de:	a908      	add	r1, sp, #32
   1b4e0:	4628      	mov	r0, r5
   1b4e2:	f7ff fed9 	bl	1b298 <putchw>
   1b4e6:	4404      	add	r4, r0
                break;
   1b4e8:	e79e      	b.n	1b428 <tfp_format+0x10>
                    if (!p.left) {
   1b4ea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b4ee:	f013 0f08 	tst.w	r3, #8
   1b4f2:	d1b4      	bne.n	1b45e <tfp_format+0x46>
                        p.lz = 1;
   1b4f4:	2301      	movs	r3, #1
   1b4f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b4fa:	e7b0      	b.n	1b45e <tfp_format+0x46>
                    p.alt = 1;
   1b4fc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b500:	f043 0302 	orr.w	r3, r3, #2
   1b504:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b508:	e7a9      	b.n	1b45e <tfp_format+0x46>
                    p.left = 1;
   1b50a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b50e:	f043 0308 	orr.w	r3, r3, #8
   1b512:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b516:	2300      	movs	r3, #0
   1b518:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b51c:	e79f      	b.n	1b45e <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b51e:	466a      	mov	r2, sp
   1b520:	2101      	movs	r1, #1
   1b522:	2000      	movs	r0, #0
   1b524:	f7ff ff46 	bl	1b3b4 <intarg>
                if (i > UCHAR_MAX) {
   1b528:	28ff      	cmp	r0, #255	; 0xff
   1b52a:	dd07      	ble.n	1b53c <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1b52c:	23ff      	movs	r3, #255	; 0xff
   1b52e:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b532:	9b01      	ldr	r3, [sp, #4]
   1b534:	1c5a      	adds	r2, r3, #1
   1b536:	9201      	str	r2, [sp, #4]
   1b538:	7818      	ldrb	r0, [r3, #0]
   1b53a:	e7a2      	b.n	1b482 <tfp_format+0x6a>
                } else if (i > 0) {
   1b53c:	2800      	cmp	r0, #0
   1b53e:	ddf8      	ble.n	1b532 <tfp_format+0x11a>
                    p.width = i;
   1b540:	f88d 0020 	strb.w	r0, [sp, #32]
   1b544:	e7f5      	b.n	1b532 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b546:	ab08      	add	r3, sp, #32
   1b548:	220a      	movs	r2, #10
   1b54a:	a901      	add	r1, sp, #4
   1b54c:	f7ff fe73 	bl	1b236 <a2i>
   1b550:	e797      	b.n	1b482 <tfp_format+0x6a>
                ch = *(fmt++);
   1b552:	9b01      	ldr	r3, [sp, #4]
   1b554:	1c5a      	adds	r2, r3, #1
   1b556:	9201      	str	r2, [sp, #4]
   1b558:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1b55a:	286c      	cmp	r0, #108	; 0x6c
   1b55c:	d001      	beq.n	1b562 <tfp_format+0x14a>
                lng = 1;
   1b55e:	2601      	movs	r6, #1
   1b560:	e792      	b.n	1b488 <tfp_format+0x70>
                    ch = *(fmt++);
   1b562:	1c9a      	adds	r2, r3, #2
   1b564:	9201      	str	r2, [sp, #4]
   1b566:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1b568:	2602      	movs	r6, #2
   1b56a:	e78d      	b.n	1b488 <tfp_format+0x70>
                ch = *(fmt++);
   1b56c:	9b01      	ldr	r3, [sp, #4]
   1b56e:	1c5a      	adds	r2, r3, #1
   1b570:	9201      	str	r2, [sp, #4]
   1b572:	7818      	ldrb	r0, [r3, #0]
   1b574:	e78a      	b.n	1b48c <tfp_format+0x74>
            switch (ch) {
   1b576:	2858      	cmp	r0, #88	; 0x58
   1b578:	d040      	beq.n	1b5fc <tfp_format+0x1e4>
   1b57a:	d80a      	bhi.n	1b592 <tfp_format+0x17a>
   1b57c:	2800      	cmp	r0, #0
   1b57e:	d076      	beq.n	1b66e <tfp_format+0x256>
   1b580:	2825      	cmp	r0, #37	; 0x25
   1b582:	f47f af51 	bne.w	1b428 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b586:	4601      	mov	r1, r0
   1b588:	4628      	mov	r0, r5
   1b58a:	f7ff fe6f 	bl	1b26c <putf>
   1b58e:	4404      	add	r4, r0
                break;
   1b590:	e74a      	b.n	1b428 <tfp_format+0x10>
            switch (ch) {
   1b592:	2863      	cmp	r0, #99	; 0x63
   1b594:	d108      	bne.n	1b5a8 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1b596:	9b00      	ldr	r3, [sp, #0]
   1b598:	1d1a      	adds	r2, r3, #4
   1b59a:	9200      	str	r2, [sp, #0]
   1b59c:	7819      	ldrb	r1, [r3, #0]
   1b59e:	4628      	mov	r0, r5
   1b5a0:	f7ff fe64 	bl	1b26c <putf>
   1b5a4:	4404      	add	r4, r0
                break;
   1b5a6:	e73f      	b.n	1b428 <tfp_format+0x10>
            switch (ch) {
   1b5a8:	2864      	cmp	r0, #100	; 0x64
   1b5aa:	f47f af3d 	bne.w	1b428 <tfp_format+0x10>
                p.base = 10;
   1b5ae:	230a      	movs	r3, #10
   1b5b0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b5b4:	466a      	mov	r2, sp
   1b5b6:	2101      	movs	r1, #1
   1b5b8:	4630      	mov	r0, r6
   1b5ba:	f7ff fefb 	bl	1b3b4 <intarg>
   1b5be:	aa08      	add	r2, sp, #32
   1b5c0:	f7ff fe11 	bl	1b1e6 <i2a>
                written += putchw(putp, &p);
   1b5c4:	a908      	add	r1, sp, #32
   1b5c6:	4628      	mov	r0, r5
   1b5c8:	f7ff fe66 	bl	1b298 <putchw>
   1b5cc:	4404      	add	r4, r0
                break;
   1b5ce:	e72b      	b.n	1b428 <tfp_format+0x10>
            switch (ch) {
   1b5d0:	2875      	cmp	r0, #117	; 0x75
   1b5d2:	d110      	bne.n	1b5f6 <tfp_format+0x1de>
                p.base = 10;
   1b5d4:	230a      	movs	r3, #10
   1b5d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b5da:	466a      	mov	r2, sp
   1b5dc:	2100      	movs	r1, #0
   1b5de:	4630      	mov	r0, r6
   1b5e0:	f7ff fee8 	bl	1b3b4 <intarg>
   1b5e4:	aa08      	add	r2, sp, #32
   1b5e6:	f7ff fd9e 	bl	1b126 <ui2a>
                written += putchw(putp, &p);
   1b5ea:	a908      	add	r1, sp, #32
   1b5ec:	4628      	mov	r0, r5
   1b5ee:	f7ff fe53 	bl	1b298 <putchw>
   1b5f2:	4404      	add	r4, r0
                break;
   1b5f4:	e718      	b.n	1b428 <tfp_format+0x10>
            switch (ch) {
   1b5f6:	2878      	cmp	r0, #120	; 0x78
   1b5f8:	f47f af16 	bne.w	1b428 <tfp_format+0x10>
                p.base = 16;
   1b5fc:	2310      	movs	r3, #16
   1b5fe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b602:	2858      	cmp	r0, #88	; 0x58
   1b604:	bf14      	ite	ne
   1b606:	2300      	movne	r3, #0
   1b608:	2301      	moveq	r3, #1
   1b60a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1b60e:	f363 0282 	bfi	r2, r3, #2, #1
   1b612:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b616:	466a      	mov	r2, sp
   1b618:	2100      	movs	r1, #0
   1b61a:	4630      	mov	r0, r6
   1b61c:	f7ff feca 	bl	1b3b4 <intarg>
   1b620:	aa08      	add	r2, sp, #32
   1b622:	f7ff fd80 	bl	1b126 <ui2a>
                written += putchw(putp, &p);
   1b626:	a908      	add	r1, sp, #32
   1b628:	4628      	mov	r0, r5
   1b62a:	f7ff fe35 	bl	1b298 <putchw>
   1b62e:	4404      	add	r4, r0
                break;
   1b630:	e6fa      	b.n	1b428 <tfp_format+0x10>
                p.base = 8;
   1b632:	2308      	movs	r3, #8
   1b634:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b638:	466a      	mov	r2, sp
   1b63a:	2100      	movs	r1, #0
   1b63c:	4630      	mov	r0, r6
   1b63e:	f7ff feb9 	bl	1b3b4 <intarg>
   1b642:	aa08      	add	r2, sp, #32
   1b644:	f7ff fd6f 	bl	1b126 <ui2a>
                written += putchw(putp, &p);
   1b648:	a908      	add	r1, sp, #32
   1b64a:	4628      	mov	r0, r5
   1b64c:	f7ff fe24 	bl	1b298 <putchw>
   1b650:	4404      	add	r4, r0
                break;
   1b652:	e6e9      	b.n	1b428 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b654:	9b00      	ldr	r3, [sp, #0]
   1b656:	1d1a      	adds	r2, r3, #4
   1b658:	9200      	str	r2, [sp, #0]
   1b65a:	681b      	ldr	r3, [r3, #0]
   1b65c:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b65e:	a908      	add	r1, sp, #32
   1b660:	4628      	mov	r0, r5
   1b662:	f7ff fe19 	bl	1b298 <putchw>
   1b666:	4404      	add	r4, r0
                p.bf = bf;
   1b668:	ab02      	add	r3, sp, #8
   1b66a:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b66c:	e6dc      	b.n	1b428 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b66e:	4620      	mov	r0, r4
   1b670:	b00a      	add	sp, #40	; 0x28
   1b672:	bd70      	pop	{r4, r5, r6, pc}

0001b674 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b674:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b676:	f7ff fecf 	bl	1b418 <tfp_format>
}
   1b67a:	bd08      	pop	{r3, pc}

0001b67c <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1b67c:	b40f      	push	{r0, r1, r2, r3}
   1b67e:	b500      	push	{lr}
   1b680:	b083      	sub	sp, #12
   1b682:	aa04      	add	r2, sp, #16
   1b684:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b688:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b68a:	4b04      	ldr	r3, [pc, #16]	; (1b69c <printf+0x20>)
   1b68c:	6818      	ldr	r0, [r3, #0]
   1b68e:	f7ff fff1 	bl	1b674 <vfprintf>
    va_end(va);
    return rv;
}
   1b692:	b003      	add	sp, #12
   1b694:	f85d eb04 	ldr.w	lr, [sp], #4
   1b698:	b004      	add	sp, #16
   1b69a:	4770      	bx	lr
   1b69c:	000210b4 	.word	0x000210b4

0001b6a0 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6a2:	b085      	sub	sp, #20
   1b6a4:	4605      	mov	r5, r0
   1b6a6:	460c      	mov	r4, r1
   1b6a8:	4616      	mov	r6, r2
   1b6aa:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1b6ac:	460a      	mov	r2, r1
   1b6ae:	4601      	mov	r1, r0
   1b6b0:	4668      	mov	r0, sp
   1b6b2:	f000 f835 	bl	1b720 <fmemopen_w>
    tfp_format(f, fmt, va);
   1b6b6:	463a      	mov	r2, r7
   1b6b8:	4631      	mov	r1, r6
   1b6ba:	f7ff fead 	bl	1b418 <tfp_format>
    if (size > 0) {
   1b6be:	b12c      	cbz	r4, 1b6cc <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1b6c0:	9b02      	ldr	r3, [sp, #8]
   1b6c2:	42a3      	cmp	r3, r4
   1b6c4:	d305      	bcc.n	1b6d2 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1b6c6:	3c01      	subs	r4, #1
   1b6c8:	2300      	movs	r3, #0
   1b6ca:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1b6cc:	9802      	ldr	r0, [sp, #8]
   1b6ce:	b005      	add	sp, #20
   1b6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1b6d2:	9b01      	ldr	r3, [sp, #4]
   1b6d4:	2200      	movs	r2, #0
   1b6d6:	701a      	strb	r2, [r3, #0]
   1b6d8:	e7f8      	b.n	1b6cc <vsnprintf+0x2c>
	...

0001b6dc <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1b6dc:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1b6de:	460a      	mov	r2, r1
   1b6e0:	4601      	mov	r1, r0
   1b6e2:	4b02      	ldr	r3, [pc, #8]	; (1b6ec <vprintf+0x10>)
   1b6e4:	6818      	ldr	r0, [r3, #0]
   1b6e6:	f7ff ffc5 	bl	1b674 <vfprintf>
}
   1b6ea:	bd08      	pop	{r3, pc}
   1b6ec:	000210b4 	.word	0x000210b4

0001b6f0 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1b6f0:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1b6f2:	2500      	movs	r5, #0
    
    while (n--)
   1b6f4:	e000      	b.n	1b6f8 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1b6f6:	4622      	mov	r2, r4
    while (n--)
   1b6f8:	1e54      	subs	r4, r2, #1
   1b6fa:	b16a      	cbz	r2, 1b718 <memfile_write+0x28>
        f->bytes_written++;
   1b6fc:	6883      	ldr	r3, [r0, #8]
   1b6fe:	3301      	adds	r3, #1
   1b700:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1b702:	68c2      	ldr	r2, [r0, #12]
   1b704:	4293      	cmp	r3, r2
   1b706:	d8f6      	bhi.n	1b6f6 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1b708:	6843      	ldr	r3, [r0, #4]
   1b70a:	1c5a      	adds	r2, r3, #1
   1b70c:	6042      	str	r2, [r0, #4]
   1b70e:	780a      	ldrb	r2, [r1, #0]
   1b710:	701a      	strb	r2, [r3, #0]
            i++;
   1b712:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1b714:	3101      	adds	r1, #1
   1b716:	e7ee      	b.n	1b6f6 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1b718:	4628      	mov	r0, r5
   1b71a:	bc30      	pop	{r4, r5}
   1b71c:	4770      	bx	lr
	...

0001b720 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1b720:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1b722:	4c04      	ldr	r4, [pc, #16]	; (1b734 <fmemopen_w+0x14>)
   1b724:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1b726:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1b728:	2100      	movs	r1, #0
   1b72a:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1b72c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1b72e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b732:	4770      	bx	lr
   1b734:	000210ac 	.word	0x000210ac

0001b738 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1b738:	2000      	movs	r0, #0
   1b73a:	4770      	bx	lr

0001b73c <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1b73c:	b510      	push	{r4, lr}
   1b73e:	4608      	mov	r0, r1
   1b740:	4614      	mov	r4, r2
    console_write(bp, n);
   1b742:	4611      	mov	r1, r2
   1b744:	f7fd f9b8 	bl	18ab8 <console_write>
    return n;
}
   1b748:	4620      	mov	r0, r4
   1b74a:	bd10      	pop	{r4, pc}

0001b74c <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1b74c:	b508      	push	{r3, lr}
    sysinit();
   1b74e:	f7fd fa1b 	bl	18b88 <sysinit_start>
   1b752:	f000 f81b 	bl	1b78c <sysinit_app>
   1b756:	f7fd fa1d 	bl	18b94 <sysinit_end>
}
   1b75a:	bd08      	pop	{r3, pc}

0001b75c <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1b75c:	b570      	push	{r4, r5, r6, lr}
   1b75e:	b082      	sub	sp, #8
   1b760:	460c      	mov	r4, r1
   1b762:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1b764:	b29d      	uxth	r5, r3
   1b766:	9b07      	ldr	r3, [sp, #28]
   1b768:	9300      	str	r3, [sp, #0]
   1b76a:	4603      	mov	r3, r0
   1b76c:	9a06      	ldr	r2, [sp, #24]
   1b76e:	4629      	mov	r1, r5
   1b770:	4620      	mov	r0, r4
   1b772:	f7fe fdeb 	bl	1a34c <os_mempool_init>
    if (rc != 0) {
   1b776:	b108      	cbz	r0, 1b77c <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b778:	b002      	add	sp, #8
   1b77a:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1b77c:	462b      	mov	r3, r5
   1b77e:	9a06      	ldr	r2, [sp, #24]
   1b780:	b292      	uxth	r2, r2
   1b782:	4621      	mov	r1, r4
   1b784:	4630      	mov	r0, r6
   1b786:	f7fe fc96 	bl	1a0b6 <os_mbuf_pool_init>
   1b78a:	e7f5      	b.n	1b778 <mem_init_mbuf_pool+0x1c>

0001b78c <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1b78c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1b78e:	f7fe f9f3 	bl	19b78 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1b792:	f001 f985 	bl	1caa0 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1b796:	f7fd f9a3 	bl	18ae0 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1b79a:	f001 fac7 	bl	1cd2c <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1b79e:	f001 f9b7 	bl	1cb10 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1b7a2:	f001 f8e1 	bl	1c968 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1b7a6:	f001 f8f1 	bl	1c98c <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1b7aa:	f001 f8f0 	bl	1c98e <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1b7ae:	f001 f8ef 	bl	1c990 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1b7b2:	f001 f8ee 	bl	1c992 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1b7b6:	f001 f8ed 	bl	1c994 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1b7ba:	f000 fbd1 	bl	1bf60 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1b7be:	f000 fd1f 	bl	1c200 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1b7c2:	f000 ff3d 	bl	1c640 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1b7c6:	f000 feb3 	bl	1c530 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1b7ca:	f000 fe3d 	bl	1c448 <init_sensor_coap>
}
   1b7ce:	bd08      	pop	{r3, pc}

0001b7d0 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1b7d0:	b908      	cbnz	r0, 1b7d6 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1b7d2:	4802      	ldr	r0, [pc, #8]	; (1b7dc <hal_bsp_flash_dev+0xc>)
   1b7d4:	4770      	bx	lr
    }

    return NULL;
   1b7d6:	2000      	movs	r0, #0
}
   1b7d8:	4770      	bx	lr
   1b7da:	bf00      	nop
   1b7dc:	000210b8 	.word	0x000210b8

0001b7e0 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1b7e0:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1b7e2:	f7ec fced 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1b7e6:	f000 fbb3 	bl	1bf50 <nrf52_periph_create>
}
   1b7ea:	bd08      	pop	{r3, pc}

0001b7ec <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1b7ec:	2300      	movs	r3, #0
   1b7ee:	4a07      	ldr	r2, [pc, #28]	; (1b80c <nrf52k_flash_wait_ready+0x20>)
   1b7f0:	4293      	cmp	r3, r2
   1b7f2:	dc06      	bgt.n	1b802 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1b7f4:	4a06      	ldr	r2, [pc, #24]	; (1b810 <nrf52k_flash_wait_ready+0x24>)
   1b7f6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1b7fa:	2a01      	cmp	r2, #1
   1b7fc:	d004      	beq.n	1b808 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1b7fe:	3301      	adds	r3, #1
   1b800:	e7f5      	b.n	1b7ee <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1b802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b806:	4770      	bx	lr
            return 0;
   1b808:	2000      	movs	r0, #0
}
   1b80a:	4770      	bx	lr
   1b80c:	0001869f 	.word	0x0001869f
   1b810:	4001e000 	.word	0x4001e000

0001b814 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1b814:	b538      	push	{r3, r4, r5, lr}
   1b816:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1b818:	f7ff ffe8 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b81c:	b9f0      	cbnz	r0, 1b85c <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b81e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b822:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1b824:	4b0f      	ldr	r3, [pc, #60]	; (1b864 <nrf52k_flash_erase_sector+0x50>)
   1b826:	2202      	movs	r2, #2
   1b828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1b82c:	f7ff ffde 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b830:	b148      	cbz	r0, 1b846 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1b832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1b836:	4a0b      	ldr	r2, [pc, #44]	; (1b864 <nrf52k_flash_erase_sector+0x50>)
   1b838:	2100      	movs	r1, #0
   1b83a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b83e:	b904      	cbnz	r4, 1b842 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1b840:	b662      	cpsie	i
    return rc;
}
   1b842:	4618      	mov	r0, r3
   1b844:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1b846:	4b07      	ldr	r3, [pc, #28]	; (1b864 <nrf52k_flash_erase_sector+0x50>)
   1b848:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1b84c:	f7ff ffce 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b850:	4603      	mov	r3, r0
   1b852:	2800      	cmp	r0, #0
   1b854:	d0ef      	beq.n	1b836 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1b856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b85a:	e7ec      	b.n	1b836 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1b85c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b860:	e7ef      	b.n	1b842 <nrf52k_flash_erase_sector+0x2e>
   1b862:	bf00      	nop
   1b864:	4001e000 	.word	0x4001e000

0001b868 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1b868:	2000      	movs	r0, #0
   1b86a:	4770      	bx	lr

0001b86c <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b86c:	297f      	cmp	r1, #127	; 0x7f
   1b86e:	dc06      	bgt.n	1b87e <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1b870:	0309      	lsls	r1, r1, #12
   1b872:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1b874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b878:	601a      	str	r2, [r3, #0]
}
   1b87a:	2000      	movs	r0, #0
   1b87c:	4770      	bx	lr
{
   1b87e:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b880:	2300      	movs	r3, #0
   1b882:	461a      	mov	r2, r3
   1b884:	4619      	mov	r1, r3
   1b886:	4618      	mov	r0, r3
   1b888:	f7fe f818 	bl	198bc <__assert_func>

0001b88c <nrf52k_flash_write>:
{
   1b88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b890:	b082      	sub	sp, #8
   1b892:	460d      	mov	r5, r1
   1b894:	4616      	mov	r6, r2
   1b896:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1b898:	f7ff ffa8 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b89c:	2800      	cmp	r0, #0
   1b89e:	d158      	bne.n	1b952 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b8a0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b8a4:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1b8a6:	4b2c      	ldr	r3, [pc, #176]	; (1b958 <nrf52k_flash_write+0xcc>)
   1b8a8:	2201      	movs	r2, #1
   1b8aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1b8ae:	f015 0803 	ands.w	r8, r5, #3
   1b8b2:	d10b      	bne.n	1b8cc <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1b8b4:	2c03      	cmp	r4, #3
   1b8b6:	d925      	bls.n	1b904 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1b8b8:	f7ff ff98 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b8bc:	2800      	cmp	r0, #0
   1b8be:	d139      	bne.n	1b934 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1b8c0:	f856 3b04 	ldr.w	r3, [r6], #4
   1b8c4:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1b8c8:	3c04      	subs	r4, #4
   1b8ca:	e7f3      	b.n	1b8b4 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1b8cc:	f7ff ff8e 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b8d0:	bb68      	cbnz	r0, 1b92e <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1b8d2:	f025 0a03 	bic.w	sl, r5, #3
   1b8d6:	f8da 3000 	ldr.w	r3, [sl]
   1b8da:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1b8dc:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1b8e0:	45a1      	cmp	r9, r4
   1b8e2:	d900      	bls.n	1b8e6 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1b8e4:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1b8e6:	464a      	mov	r2, r9
   1b8e8:	4631      	mov	r1, r6
   1b8ea:	ab01      	add	r3, sp, #4
   1b8ec:	eb03 0008 	add.w	r0, r3, r8
   1b8f0:	f7ff fbda 	bl	1b0a8 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1b8f4:	9b01      	ldr	r3, [sp, #4]
   1b8f6:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1b8fa:	444d      	add	r5, r9
        num_bytes -= cnt;
   1b8fc:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1b900:	444e      	add	r6, r9
   1b902:	e7d7      	b.n	1b8b4 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1b904:	b164      	cbz	r4, 1b920 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1b906:	682b      	ldr	r3, [r5, #0]
   1b908:	a802      	add	r0, sp, #8
   1b90a:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1b90e:	4622      	mov	r2, r4
   1b910:	4631      	mov	r1, r6
   1b912:	f7ff fbc9 	bl	1b0a8 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1b916:	f7ff ff69 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b91a:	b9b8      	cbnz	r0, 1b94c <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1b91c:	9b01      	ldr	r3, [sp, #4]
   1b91e:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1b920:	f7ff ff64 	bl	1b7ec <nrf52k_flash_wait_ready>
   1b924:	4603      	mov	r3, r0
   1b926:	b138      	cbz	r0, 1b938 <nrf52k_flash_write+0xac>
        rc = -1;
   1b928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b92c:	e004      	b.n	1b938 <nrf52k_flash_write+0xac>
    int rc = -1;
   1b92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b932:	e001      	b.n	1b938 <nrf52k_flash_write+0xac>
   1b934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1b938:	4a07      	ldr	r2, [pc, #28]	; (1b958 <nrf52k_flash_write+0xcc>)
   1b93a:	2100      	movs	r1, #0
   1b93c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b940:	b907      	cbnz	r7, 1b944 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1b942:	b662      	cpsie	i
}
   1b944:	4618      	mov	r0, r3
   1b946:	b002      	add	sp, #8
   1b948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1b94c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b950:	e7f2      	b.n	1b938 <nrf52k_flash_write+0xac>
        return -1;
   1b952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b956:	e7f5      	b.n	1b944 <nrf52k_flash_write+0xb8>
   1b958:	4001e000 	.word	0x4001e000

0001b95c <nrf52k_flash_read>:
{
   1b95c:	b508      	push	{r3, lr}
   1b95e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1b960:	461a      	mov	r2, r3
   1b962:	f7ff fba1 	bl	1b0a8 <memcpy>
}
   1b966:	2000      	movs	r0, #0
   1b968:	bd08      	pop	{r3, pc}
	...

0001b96c <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1b96e:	f7ff fa3b 	bl	1ade8 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1b972:	4b31      	ldr	r3, [pc, #196]	; (1ba38 <nrf52_timer_handler+0xcc>)
   1b974:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1b978:	4b30      	ldr	r3, [pc, #192]	; (1ba3c <nrf52_timer_handler+0xd0>)
   1b97a:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1b97c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1b980:	d225      	bcs.n	1b9ce <nrf52_timer_handler+0x62>
   1b982:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1b984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1b988:	d227      	bcs.n	1b9da <nrf52_timer_handler+0x6e>
    result = x - y;
   1b98a:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1b98c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1b990:	d129      	bne.n	1b9e6 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1b992:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1b996:	4f29      	ldr	r7, [pc, #164]	; (1ba3c <nrf52_timer_handler+0xd0>)
   1b998:	683c      	ldr	r4, [r7, #0]
   1b99a:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1b99e:	4628      	mov	r0, r5
   1b9a0:	f7ff f9b0 	bl	1ad04 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1b9a4:	4b24      	ldr	r3, [pc, #144]	; (1ba38 <nrf52_timer_handler+0xcc>)
   1b9a6:	2200      	movs	r2, #0
   1b9a8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b9ac:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1b9ae:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b9b0:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1b9b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b9b8:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1b9ba:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1b9bc:	f7ff fa1d 	bl	1adfa <os_arch_in_critical>
   1b9c0:	bb28      	cbnz	r0, 1ba0e <nrf52_timer_handler+0xa2>
   1b9c2:	2300      	movs	r3, #0
   1b9c4:	461a      	mov	r2, r3
   1b9c6:	4619      	mov	r1, r3
   1b9c8:	4618      	mov	r0, r3
   1b9ca:	f7fd ff77 	bl	198bc <__assert_func>
    assert(x <= 0xffffff);
   1b9ce:	2300      	movs	r3, #0
   1b9d0:	461a      	mov	r2, r3
   1b9d2:	4619      	mov	r1, r3
   1b9d4:	4618      	mov	r0, r3
   1b9d6:	f7fd ff71 	bl	198bc <__assert_func>
    assert(y <= 0xffffff);
   1b9da:	2300      	movs	r3, #0
   1b9dc:	461a      	mov	r2, r3
   1b9de:	4619      	mov	r1, r3
   1b9e0:	4618      	mov	r0, r3
   1b9e2:	f7fd ff6b 	bl	198bc <__assert_func>
        return (result | 0xff800000);
   1b9e6:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1b9ea:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1b9ee:	e7d2      	b.n	1b996 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1b9f0:	2300      	movs	r3, #0
   1b9f2:	461a      	mov	r2, r3
   1b9f4:	4619      	mov	r1, r3
   1b9f6:	4618      	mov	r0, r3
   1b9f8:	f7fd ff60 	bl	198bc <__assert_func>
        return (result | 0xff800000);
   1b9fc:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1ba00:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1ba04:	2a02      	cmp	r2, #2
   1ba06:	dc13      	bgt.n	1ba30 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ba08:	4a0c      	ldr	r2, [pc, #48]	; (1ba3c <nrf52_timer_handler+0xd0>)
   1ba0a:	6814      	ldr	r4, [r2, #0]
   1ba0c:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1ba0e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1ba12:	4a09      	ldr	r2, [pc, #36]	; (1ba38 <nrf52_timer_handler+0xcc>)
   1ba14:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1ba18:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1ba1c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1ba20:	d2e6      	bcs.n	1b9f0 <nrf52_timer_handler+0x84>
    result = x - y;
   1ba22:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1ba24:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1ba28:	d1e8      	bne.n	1b9fc <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1ba2a:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1ba2e:	e7e9      	b.n	1ba04 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1ba30:	4630      	mov	r0, r6
   1ba32:	f7ff f9df 	bl	1adf4 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1ba36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba38:	40011000 	.word	0x40011000
   1ba3c:	2000a674 	.word	0x2000a674

0001ba40 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1ba40:	b538      	push	{r3, r4, r5, lr}
   1ba42:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1ba44:	f7ff f9d9 	bl	1adfa <os_arch_in_critical>
   1ba48:	b1a0      	cbz	r0, 1ba74 <os_tick_idle+0x34>

    if (ticks > 0) {
   1ba4a:	2d00      	cmp	r5, #0
   1ba4c:	d038      	beq.n	1bac0 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1ba4e:	4b20      	ldr	r3, [pc, #128]	; (1bad0 <os_tick_idle+0x90>)
   1ba50:	685b      	ldr	r3, [r3, #4]
   1ba52:	42ab      	cmp	r3, r5
   1ba54:	d200      	bcs.n	1ba58 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1ba56:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1ba58:	4b1d      	ldr	r3, [pc, #116]	; (1bad0 <os_tick_idle+0x90>)
   1ba5a:	689c      	ldr	r4, [r3, #8]
   1ba5c:	681a      	ldr	r2, [r3, #0]
   1ba5e:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1ba62:	f7ff f9ca 	bl	1adfa <os_arch_in_critical>
   1ba66:	b9d0      	cbnz	r0, 1ba9e <os_tick_idle+0x5e>
   1ba68:	2300      	movs	r3, #0
   1ba6a:	461a      	mov	r2, r3
   1ba6c:	4619      	mov	r1, r3
   1ba6e:	4618      	mov	r0, r3
   1ba70:	f7fd ff24 	bl	198bc <__assert_func>
    OS_ASSERT_CRITICAL();
   1ba74:	2300      	movs	r3, #0
   1ba76:	461a      	mov	r2, r3
   1ba78:	4619      	mov	r1, r3
   1ba7a:	4618      	mov	r0, r3
   1ba7c:	f7fd ff1e 	bl	198bc <__assert_func>
    assert(y <= 0xffffff);
   1ba80:	2300      	movs	r3, #0
   1ba82:	461a      	mov	r2, r3
   1ba84:	4619      	mov	r1, r3
   1ba86:	4618      	mov	r0, r3
   1ba88:	f7fd ff18 	bl	198bc <__assert_func>
        return (result | 0xff800000);
   1ba8c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1ba90:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1ba94:	2b02      	cmp	r3, #2
   1ba96:	dc13      	bgt.n	1bac0 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ba98:	4b0d      	ldr	r3, [pc, #52]	; (1bad0 <os_tick_idle+0x90>)
   1ba9a:	681c      	ldr	r4, [r3, #0]
   1ba9c:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1ba9e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1baa2:	4b0c      	ldr	r3, [pc, #48]	; (1bad4 <os_tick_idle+0x94>)
   1baa4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1baa8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1baac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bab0:	d2e6      	bcs.n	1ba80 <os_tick_idle+0x40>
    result = x - y;
   1bab2:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1bab4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1bab8:	d1e8      	bne.n	1ba8c <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1baba:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1babe:	e7e9      	b.n	1ba94 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1bac0:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1bac4:	bf30      	wfi

    if (ticks > 0) {
   1bac6:	b905      	cbnz	r5, 1baca <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1bac8:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1baca:	f7ff ff4f 	bl	1b96c <nrf52_timer_handler>
}
   1bace:	e7fb      	b.n	1bac8 <os_tick_idle+0x88>
   1bad0:	2000a674 	.word	0x2000a674
   1bad4:	40011000 	.word	0x40011000

0001bad8 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1bad8:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bade:	fbb3 f3f0 	udiv	r3, r3, r0
   1bae2:	fb00 f303 	mul.w	r3, r0, r3
   1bae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1baea:	d136      	bne.n	1bb5a <os_tick_init+0x82>
   1baec:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1baee:	4d1e      	ldr	r5, [pc, #120]	; (1bb68 <os_tick_init+0x90>)
   1baf0:	2600      	movs	r6, #0
   1baf2:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1baf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1baf8:	fbb3 f0f0 	udiv	r0, r3, r0
   1bafc:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1bafe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1bb02:	fbb3 f0f0 	udiv	r0, r3, r0
   1bb06:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1bb08:	f7ff f96e 	bl	1ade8 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bb0c:	0164      	lsls	r4, r4, #5
   1bb0e:	b2e4      	uxtb	r4, r4
   1bb10:	4b16      	ldr	r3, [pc, #88]	; (1bb6c <os_tick_init+0x94>)
   1bb12:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bb16:	4a16      	ldr	r2, [pc, #88]	; (1bb70 <os_tick_init+0x98>)
   1bb18:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bb1a:	4916      	ldr	r1, [pc, #88]	; (1bb74 <os_tick_init+0x9c>)
   1bb1c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1bb24:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1bb26:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1bb2a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1bb2e:	2201      	movs	r2, #1
   1bb30:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1bb32:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1bb34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb38:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1bb3c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1bb40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1bb44:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1bb48:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1bb4c:	6829      	ldr	r1, [r5, #0]
   1bb4e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1bb52:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1bb54:	f7ff f94e 	bl	1adf4 <os_arch_restore_sr>
}
   1bb58:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bb5a:	2300      	movs	r3, #0
   1bb5c:	461a      	mov	r2, r3
   1bb5e:	4619      	mov	r1, r3
   1bb60:	4618      	mov	r0, r3
   1bb62:	f7fd feab 	bl	198bc <__assert_func>
   1bb66:	bf00      	nop
   1bb68:	2000a674 	.word	0x2000a674
   1bb6c:	e000e100 	.word	0xe000e100
   1bb70:	e000ed00 	.word	0xe000ed00
   1bb74:	0001b96d 	.word	0x0001b96d

0001bb78 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1bb78:	2301      	movs	r3, #1
   1bb7a:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1bb7c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1bb80:	4770      	bx	lr
	...

0001bb84 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1bb84:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1bb86:	7883      	ldrb	r3, [r0, #2]
   1bb88:	b393      	cbz	r3, 1bbf0 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bb8a:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bb8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bb90:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1bb94:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1bb96:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1bb9a:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bb9e:	b11d      	cbz	r5, 1bba8 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1bba0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1bba4:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1bba8:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1bbaa:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1bbac:	2b02      	cmp	r3, #2
   1bbae:	dc0e      	bgt.n	1bbce <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bbb0:	7842      	ldrb	r2, [r0, #1]
   1bbb2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bbb4:	2b00      	cmp	r3, #0
   1bbb6:	db15      	blt.n	1bbe4 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bbb8:	f002 021f 	and.w	r2, r2, #31
   1bbbc:	095b      	lsrs	r3, r3, #5
   1bbbe:	2101      	movs	r1, #1
   1bbc0:	fa01 f202 	lsl.w	r2, r1, r2
   1bbc4:	3340      	adds	r3, #64	; 0x40
   1bbc6:	491b      	ldr	r1, [pc, #108]	; (1bc34 <nrf_timer_set_ocmp+0xb0>)
   1bbc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1bbcc:	e00a      	b.n	1bbe4 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1bbce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bbd2:	d208      	bcs.n	1bbe6 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1bbd4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bbd8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bbdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bbe0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1bbe4:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1bbe6:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1bbea:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1bbee:	e7f5      	b.n	1bbdc <nrf_timer_set_ocmp+0x58>
   1bbf0:	460d      	mov	r5, r1
   1bbf2:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1bbf4:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bbf6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bbfa:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1bbfe:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bc02:	2200      	movs	r2, #0
   1bc04:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bc08:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1bc0c:	f7ff ffb4 	bl	1bb78 <nrf_read_timer_cntr>
   1bc10:	1b40      	subs	r0, r0, r5
   1bc12:	2800      	cmp	r0, #0
   1bc14:	dbe6      	blt.n	1bbe4 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bc16:	7862      	ldrb	r2, [r4, #1]
   1bc18:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	dbe2      	blt.n	1bbe4 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bc1e:	f002 021f 	and.w	r2, r2, #31
   1bc22:	095b      	lsrs	r3, r3, #5
   1bc24:	2101      	movs	r1, #1
   1bc26:	fa01 f202 	lsl.w	r2, r1, r2
   1bc2a:	3340      	adds	r3, #64	; 0x40
   1bc2c:	4901      	ldr	r1, [pc, #4]	; (1bc34 <nrf_timer_set_ocmp+0xb0>)
   1bc2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1bc32:	e7d7      	b.n	1bbe4 <nrf_timer_set_ocmp+0x60>
   1bc34:	e000e100 	.word	0xe000e100

0001bc38 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bc38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bc3c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bc40:	4770      	bx	lr

0001bc42 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bc42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bc46:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bc4a:	4770      	bx	lr

0001bc4c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1bc4c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bc4e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bc50:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bc54:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1bc56:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1bc58:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1bc5c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bc60:	b1ad      	cbz	r5, 1bc8e <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1bc62:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1bc66:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1bc68:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1bc6c:	2500      	movs	r5, #0
   1bc6e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bc72:	7840      	ldrb	r0, [r0, #1]
   1bc74:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1bc76:	42aa      	cmp	r2, r5
   1bc78:	db09      	blt.n	1bc8e <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bc7a:	f000 001f 	and.w	r0, r0, #31
   1bc7e:	0952      	lsrs	r2, r2, #5
   1bc80:	2501      	movs	r5, #1
   1bc82:	fa05 f000 	lsl.w	r0, r5, r0
   1bc86:	3240      	adds	r2, #64	; 0x40
   1bc88:	4d04      	ldr	r5, [pc, #16]	; (1bc9c <hal_timer_read_bsptimer+0x50>)
   1bc8a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1bc8e:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bc92:	b904      	cbnz	r4, 1bc96 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1bc94:	b662      	cpsie	i

    return tcntr;
}
   1bc96:	bc30      	pop	{r4, r5}
   1bc98:	4770      	bx	lr
   1bc9a:	bf00      	nop
   1bc9c:	e000e100 	.word	0xe000e100

0001bca0 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1bca0:	b570      	push	{r4, r5, r6, lr}
   1bca2:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bca4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bca8:	b672      	cpsid	i
   1bcaa:	e013      	b.n	1bcd4 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1bcac:	6928      	ldr	r0, [r5, #16]
   1bcae:	f7ff ff63 	bl	1bb78 <nrf_read_timer_cntr>
            delta = 0;
   1bcb2:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1bcb4:	68e3      	ldr	r3, [r4, #12]
   1bcb6:	1ac0      	subs	r0, r0, r3
   1bcb8:	4290      	cmp	r0, r2
   1bcba:	db19      	blt.n	1bcf0 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bcbc:	6923      	ldr	r3, [r4, #16]
   1bcbe:	b1a3      	cbz	r3, 1bcea <hal_timer_chk_queue+0x4a>
   1bcc0:	6962      	ldr	r2, [r4, #20]
   1bcc2:	615a      	str	r2, [r3, #20]
   1bcc4:	6963      	ldr	r3, [r4, #20]
   1bcc6:	6922      	ldr	r2, [r4, #16]
   1bcc8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1bcca:	2300      	movs	r3, #0
   1bccc:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1bcce:	6863      	ldr	r3, [r4, #4]
   1bcd0:	68a0      	ldr	r0, [r4, #8]
   1bcd2:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1bcd4:	696c      	ldr	r4, [r5, #20]
   1bcd6:	b15c      	cbz	r4, 1bcf0 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1bcd8:	78ab      	ldrb	r3, [r5, #2]
   1bcda:	2b00      	cmp	r3, #0
   1bcdc:	d0e6      	beq.n	1bcac <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1bcde:	4628      	mov	r0, r5
   1bce0:	f7ff ffb4 	bl	1bc4c <hal_timer_read_bsptimer>
            delta = -3;
   1bce4:	f06f 0202 	mvn.w	r2, #2
   1bce8:	e7e4      	b.n	1bcb4 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bcea:	6963      	ldr	r3, [r4, #20]
   1bcec:	61ab      	str	r3, [r5, #24]
   1bcee:	e7e9      	b.n	1bcc4 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1bcf0:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1bcf2:	b133      	cbz	r3, 1bd02 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1bcf4:	68d9      	ldr	r1, [r3, #12]
   1bcf6:	4628      	mov	r0, r5
   1bcf8:	f7ff ff44 	bl	1bb84 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bcfc:	b906      	cbnz	r6, 1bd00 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1bcfe:	b662      	cpsie	i
}
   1bd00:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1bd02:	78ab      	ldrb	r3, [r5, #2]
   1bd04:	b11b      	cbz	r3, 1bd0e <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1bd06:	6928      	ldr	r0, [r5, #16]
   1bd08:	f7ff ff9b 	bl	1bc42 <nrf_rtc_disable_ocmp>
   1bd0c:	e7f6      	b.n	1bcfc <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1bd0e:	6928      	ldr	r0, [r5, #16]
   1bd10:	f7ff ff92 	bl	1bc38 <nrf_timer_disable_ocmp>
   1bd14:	e7f2      	b.n	1bcfc <hal_timer_chk_queue+0x5c>

0001bd16 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1bd16:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1bd18:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bd1a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1bd1e:	b113      	cbz	r3, 1bd26 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bd20:	2300      	movs	r3, #0
   1bd22:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1bd26:	6883      	ldr	r3, [r0, #8]
   1bd28:	3301      	adds	r3, #1
   1bd2a:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1bd2c:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1bd30:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1bd34:	d100      	bne.n	1bd38 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1bd36:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1bd38:	f7ff ffb2 	bl	1bca0 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bd3c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1bd40:	e7f9      	b.n	1bd36 <hal_timer_irq_handler+0x20>
	...

0001bd44 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1bd44:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1bd46:	4802      	ldr	r0, [pc, #8]	; (1bd50 <nrf52_timer0_irq_handler+0xc>)
   1bd48:	f7ff ffe5 	bl	1bd16 <hal_timer_irq_handler>
}
   1bd4c:	bd08      	pop	{r3, pc}
   1bd4e:	bf00      	nop
   1bd50:	2000a680 	.word	0x2000a680

0001bd54 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bd54:	2805      	cmp	r0, #5
   1bd56:	dc1c      	bgt.n	1bd92 <hal_timer_init+0x3e>
   1bd58:	4b12      	ldr	r3, [pc, #72]	; (1bda4 <hal_timer_init+0x50>)
   1bd5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1bd5e:	b1d3      	cbz	r3, 1bd96 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1bd60:	781a      	ldrb	r2, [r3, #0]
   1bd62:	b9d2      	cbnz	r2, 1bd9a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1bd64:	b9d8      	cbnz	r0, 1bd9e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1bd66:	4a10      	ldr	r2, [pc, #64]	; (1bda8 <hal_timer_init+0x54>)
   1bd68:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1bd6a:	2208      	movs	r2, #8
   1bd6c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bd6e:	4b0f      	ldr	r3, [pc, #60]	; (1bdac <hal_timer_init+0x58>)
   1bd70:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bd74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1bd78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bd7c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bd80:	22e0      	movs	r2, #224	; 0xe0
   1bd82:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bd86:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1bd8a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bd8c:	4a08      	ldr	r2, [pc, #32]	; (1bdb0 <hal_timer_init+0x5c>)
   1bd8e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1bd90:	4770      	bx	lr

err:
    return rc;
   1bd92:	2016      	movs	r0, #22
   1bd94:	4770      	bx	lr
   1bd96:	2016      	movs	r0, #22
   1bd98:	4770      	bx	lr
   1bd9a:	2016      	movs	r0, #22
   1bd9c:	4770      	bx	lr
   1bd9e:	2016      	movs	r0, #22
}
   1bda0:	4770      	bx	lr
   1bda2:	bf00      	nop
   1bda4:	000210ec 	.word	0x000210ec
   1bda8:	40008000 	.word	0x40008000
   1bdac:	e000e100 	.word	0xe000e100
   1bdb0:	0001bd45 	.word	0x0001bd45

0001bdb4 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bdb4:	2805      	cmp	r0, #5
   1bdb6:	dc65      	bgt.n	1be84 <hal_timer_config+0xd0>
   1bdb8:	4b39      	ldr	r3, [pc, #228]	; (1bea0 <hal_timer_config+0xec>)
   1bdba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1bdbe:	2800      	cmp	r0, #0
   1bdc0:	d062      	beq.n	1be88 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1bdc2:	4b38      	ldr	r3, [pc, #224]	; (1bea4 <hal_timer_config+0xf0>)
   1bdc4:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bdc8:	7803      	ldrb	r3, [r0, #0]
   1bdca:	2b00      	cmp	r3, #0
   1bdcc:	d15e      	bne.n	1be8c <hal_timer_config+0xd8>
   1bdce:	2900      	cmp	r1, #0
   1bdd0:	d05e      	beq.n	1be90 <hal_timer_config+0xdc>
   1bdd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1bdd6:	d85d      	bhi.n	1be94 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1bdd8:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bdda:	2a00      	cmp	r2, #0
   1bddc:	d05c      	beq.n	1be98 <hal_timer_config+0xe4>
{
   1bdde:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1bde0:	2901      	cmp	r1, #1
   1bde2:	d013      	beq.n	1be0c <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bde4:	2301      	movs	r3, #1
   1bde6:	2b09      	cmp	r3, #9
   1bde8:	d810      	bhi.n	1be0c <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1bdea:	2201      	movs	r2, #1
   1bdec:	409a      	lsls	r2, r3
   1bdee:	428a      	cmp	r2, r1
   1bdf0:	d202      	bcs.n	1bdf8 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bdf2:	3301      	adds	r3, #1
   1bdf4:	b2db      	uxtb	r3, r3
   1bdf6:	e7f6      	b.n	1bde6 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1bdf8:	1e5c      	subs	r4, r3, #1
   1bdfa:	2501      	movs	r5, #1
   1bdfc:	fa05 f404 	lsl.w	r4, r5, r4
   1be00:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1be02:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1be04:	428c      	cmp	r4, r1
   1be06:	d201      	bcs.n	1be0c <hal_timer_config+0x58>
                    prescaler -= 1;
   1be08:	3b01      	subs	r3, #1
   1be0a:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1be0c:	4a25      	ldr	r2, [pc, #148]	; (1bea4 <hal_timer_config+0xf0>)
   1be0e:	411a      	asrs	r2, r3
   1be10:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1be12:	2201      	movs	r2, #1
   1be14:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1be16:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1be1a:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1be1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1be20:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1be24:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1be28:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1be2c:	d00c      	beq.n	1be48 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1be2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1be32:	2100      	movs	r1, #0
   1be34:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1be38:	2101      	movs	r1, #1
   1be3a:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1be3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1be40:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1be44:	2a00      	cmp	r2, #0
   1be46:	d0f9      	beq.n	1be3c <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1be48:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1be4a:	2101      	movs	r1, #1
   1be4c:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1be4e:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1be50:	2500      	movs	r5, #0
   1be52:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1be56:	2503      	movs	r5, #3
   1be58:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1be5c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1be60:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1be62:	7842      	ldrb	r2, [r0, #1]
   1be64:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1be66:	2b00      	cmp	r3, #0
   1be68:	db07      	blt.n	1be7a <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1be6a:	f002 021f 	and.w	r2, r2, #31
   1be6e:	095b      	lsrs	r3, r3, #5
   1be70:	fa01 f202 	lsl.w	r2, r1, r2
   1be74:	490c      	ldr	r1, [pc, #48]	; (1bea8 <hal_timer_config+0xf4>)
   1be76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1be7a:	b97c      	cbnz	r4, 1be9c <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1be7c:	b662      	cpsie	i

    return 0;
   1be7e:	2000      	movs	r0, #0

err:
    return rc;
}
   1be80:	bc30      	pop	{r4, r5}
   1be82:	4770      	bx	lr
    return rc;
   1be84:	2016      	movs	r0, #22
   1be86:	4770      	bx	lr
   1be88:	2016      	movs	r0, #22
   1be8a:	4770      	bx	lr
   1be8c:	2016      	movs	r0, #22
   1be8e:	4770      	bx	lr
   1be90:	2016      	movs	r0, #22
   1be92:	4770      	bx	lr
   1be94:	2016      	movs	r0, #22
   1be96:	4770      	bx	lr
   1be98:	2016      	movs	r0, #22
}
   1be9a:	4770      	bx	lr
    return 0;
   1be9c:	2000      	movs	r0, #0
   1be9e:	e7ef      	b.n	1be80 <hal_timer_config+0xcc>
   1bea0:	000210ec 	.word	0x000210ec
   1bea4:	00f42400 	.word	0x00f42400
   1bea8:	e000e100 	.word	0xe000e100

0001beac <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1beac:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1beae:	2805      	cmp	r0, #5
   1beb0:	dc0c      	bgt.n	1becc <hal_timer_read+0x20>
   1beb2:	4b09      	ldr	r3, [pc, #36]	; (1bed8 <hal_timer_read+0x2c>)
   1beb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1beb8:	b140      	cbz	r0, 1becc <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1beba:	7883      	ldrb	r3, [r0, #2]
   1bebc:	b91b      	cbnz	r3, 1bec6 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1bebe:	6900      	ldr	r0, [r0, #16]
   1bec0:	f7ff fe5a 	bl	1bb78 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1bec4:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1bec6:	f7ff fec1 	bl	1bc4c <hal_timer_read_bsptimer>
   1beca:	e7fb      	b.n	1bec4 <hal_timer_read+0x18>
    assert(0);
   1becc:	2300      	movs	r3, #0
   1bece:	461a      	mov	r2, r3
   1bed0:	4619      	mov	r1, r3
   1bed2:	4618      	mov	r0, r3
   1bed4:	f7fd fcf2 	bl	198bc <__assert_func>
   1bed8:	000210ec 	.word	0x000210ec

0001bedc <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1bedc:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1bede:	2100      	movs	r1, #0
   1bee0:	4608      	mov	r0, r1
   1bee2:	f7ff ff37 	bl	1bd54 <hal_timer_init>
    assert(rc == 0);
   1bee6:	b920      	cbnz	r0, 1bef2 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1bee8:	4808      	ldr	r0, [pc, #32]	; (1bf0c <nrf52_periph_create_timers+0x30>)
   1beea:	f7fd ff11 	bl	19d10 <os_cputime_init>
    assert(rc == 0);
   1beee:	b930      	cbnz	r0, 1befe <nrf52_periph_create_timers+0x22>
#endif
}
   1bef0:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bef2:	2300      	movs	r3, #0
   1bef4:	461a      	mov	r2, r3
   1bef6:	4619      	mov	r1, r3
   1bef8:	4618      	mov	r0, r3
   1befa:	f7fd fcdf 	bl	198bc <__assert_func>
    assert(rc == 0);
   1befe:	2300      	movs	r3, #0
   1bf00:	461a      	mov	r2, r3
   1bf02:	4619      	mov	r1, r3
   1bf04:	4618      	mov	r0, r3
   1bf06:	f7fd fcd9 	bl	198bc <__assert_func>
   1bf0a:	bf00      	nop
   1bf0c:	000f4240 	.word	0x000f4240

0001bf10 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1bf10:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1bf12:	4906      	ldr	r1, [pc, #24]	; (1bf2c <nrf52_periph_create_i2c+0x1c>)
   1bf14:	2001      	movs	r0, #1
   1bf16:	f7fd f82b 	bl	18f70 <hal_i2c_init>
    assert(rc == 0);
   1bf1a:	b900      	cbnz	r0, 1bf1e <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1bf1c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bf1e:	2300      	movs	r3, #0
   1bf20:	461a      	mov	r2, r3
   1bf22:	4619      	mov	r1, r3
   1bf24:	4618      	mov	r0, r3
   1bf26:	f7fd fcc9 	bl	198bc <__assert_func>
   1bf2a:	bf00      	nop
   1bf2c:	00021104 	.word	0x00021104

0001bf30 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1bf30:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1bf32:	2200      	movs	r2, #0
   1bf34:	4905      	ldr	r1, [pc, #20]	; (1bf4c <nrf52_periph_create_spi+0x1c>)
   1bf36:	4610      	mov	r0, r2
   1bf38:	f7fd fb4e 	bl	195d8 <hal_spi_init>
    assert(rc == 0);
   1bf3c:	b900      	cbnz	r0, 1bf40 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1bf3e:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bf40:	2300      	movs	r3, #0
   1bf42:	461a      	mov	r2, r3
   1bf44:	4619      	mov	r1, r3
   1bf46:	4618      	mov	r0, r3
   1bf48:	f7fd fcb8 	bl	198bc <__assert_func>
   1bf4c:	00021110 	.word	0x00021110

0001bf50 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1bf50:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1bf52:	f7ff ffc3 	bl	1bedc <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1bf56:	f7ff ffdb 	bl	1bf10 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1bf5a:	f7ff ffe9 	bl	1bf30 <nrf52_periph_create_spi>
}
   1bf5e:	bd08      	pop	{r3, pc}

0001bf60 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1bf60:	4770      	bx	lr
	...

0001bf64 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1bf64:	4b08      	ldr	r3, [pc, #32]	; (1bf88 <sensor_mgr_remove+0x24>)
   1bf66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bf68:	4282      	cmp	r2, r0
   1bf6a:	d104      	bne.n	1bf76 <sensor_mgr_remove+0x12>
   1bf6c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1bf70:	631a      	str	r2, [r3, #48]	; 0x30
   1bf72:	4770      	bx	lr
   1bf74:	461a      	mov	r2, r3
   1bf76:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1bf7a:	4283      	cmp	r3, r0
   1bf7c:	d1fa      	bne.n	1bf74 <sensor_mgr_remove+0x10>
   1bf7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bf82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1bf86:	4770      	bx	lr
   1bf88:	2000a6a0 	.word	0x2000a6a0

0001bf8c <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1bf8c:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1bf8e:	6a03      	ldr	r3, [r0, #32]
   1bf90:	b993      	cbnz	r3, 1bfb8 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf92:	4b15      	ldr	r3, [pc, #84]	; (1bfe8 <sensor_mgr_insert+0x5c>)
   1bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1bf96:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf98:	e002      	b.n	1bfa0 <sensor_mgr_insert+0x14>
            prev = cursor;
   1bf9a:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bfa0:	2b00      	cmp	r3, #0
   1bfa2:	d1fa      	bne.n	1bf9a <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1bfa4:	b1c9      	cbz	r1, 1bfda <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1bfa6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1bfaa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1bfae:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1bfb2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bfb6:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bfb8:	4b0b      	ldr	r3, [pc, #44]	; (1bfe8 <sensor_mgr_insert+0x5c>)
   1bfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1bfbc:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bfbe:	2b00      	cmp	r3, #0
   1bfc0:	d0f0      	beq.n	1bfa4 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1bfc2:	6a1a      	ldr	r2, [r3, #32]
   1bfc4:	2a00      	cmp	r2, #0
   1bfc6:	d0ed      	beq.n	1bfa4 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1bfc8:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1bfca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1bfcc:	1b12      	subs	r2, r2, r4
   1bfce:	2a00      	cmp	r2, #0
   1bfd0:	dbe8      	blt.n	1bfa4 <sensor_mgr_insert+0x18>
        prev = cursor;
   1bfd2:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bfd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bfd8:	e7f1      	b.n	1bfbe <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1bfda:	4b03      	ldr	r3, [pc, #12]	; (1bfe8 <sensor_mgr_insert+0x5c>)
   1bfdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bfde:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1bfe2:	6318      	str	r0, [r3, #48]	; 0x30
   1bfe4:	e7e5      	b.n	1bfb2 <sensor_mgr_insert+0x26>
   1bfe6:	bf00      	nop
   1bfe8:	2000a6a0 	.word	0x2000a6a0

0001bfec <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1bfec:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1bfee:	fab0 f080 	clz	r0, r0
   1bff2:	0940      	lsrs	r0, r0, #5
   1bff4:	4770      	bx	lr
	...

0001bff8 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1bff8:	4b01      	ldr	r3, [pc, #4]	; (1c000 <sensor_mgr_evq_set+0x8>)
   1bffa:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1bffc:	4770      	bx	lr
   1bffe:	bf00      	nop
   1c000:	2000a6a0 	.word	0x2000a6a0

0001c004 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1c004:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1c008:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c00c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c010:	ea02 0b04 	and.w	fp, r2, r4
   1c014:	ea03 0c05 	and.w	ip, r3, r5
   1c018:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1c01c:	ea0b 0200 	and.w	r2, fp, r0
   1c020:	ea0c 0301 	and.w	r3, ip, r1
   1c024:	4313      	orrs	r3, r2
}
   1c026:	bf14      	ite	ne
   1c028:	2001      	movne	r0, #1
   1c02a:	2000      	moveq	r0, #0
   1c02c:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1c030:	4770      	bx	lr

0001c032 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1c032:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c036:	b083      	sub	sp, #12
   1c038:	4605      	mov	r5, r0
   1c03a:	4689      	mov	r9, r1
   1c03c:	4690      	mov	r8, r2
   1c03e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1c042:	790b      	ldrb	r3, [r1, #4]
   1c044:	2b01      	cmp	r3, #1
   1c046:	d013      	beq.n	1c070 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1c048:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1c04a:	e000      	b.n	1c04e <sensor_read_data_func+0x1c>
   1c04c:	6924      	ldr	r4, [r4, #16]
   1c04e:	b17c      	cbz	r4, 1c070 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1c050:	e9d4 0100 	ldrd	r0, r1, [r4]
   1c054:	ea00 0206 	and.w	r2, r0, r6
   1c058:	ea01 0307 	and.w	r3, r1, r7
   1c05c:	4313      	orrs	r3, r2
   1c05e:	d0f5      	beq.n	1c04c <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1c060:	68a3      	ldr	r3, [r4, #8]
   1c062:	68e1      	ldr	r1, [r4, #12]
   1c064:	e9cd 6700 	strd	r6, r7, [sp]
   1c068:	4642      	mov	r2, r8
   1c06a:	4628      	mov	r0, r5
   1c06c:	4798      	blx	r3
   1c06e:	e7ed      	b.n	1c04c <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1c070:	f8d9 3000 	ldr.w	r3, [r9]
   1c074:	b14b      	cbz	r3, 1c08a <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1c076:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1c07a:	e9cd 6700 	strd	r6, r7, [sp]
   1c07e:	4642      	mov	r2, r8
   1c080:	4628      	mov	r0, r5
   1c082:	4798      	blx	r3
    }

    return (0);
}
   1c084:	b003      	add	sp, #12
   1c086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1c08a:	2000      	movs	r0, #0
   1c08c:	e7fa      	b.n	1c084 <sensor_read_data_func+0x52>
	...

0001c090 <sensor_base_ts_update_event>:
{
   1c090:	b530      	push	{r4, r5, lr}
   1c092:	b087      	sub	sp, #28
    ticks = os_time_get();
   1c094:	f7fe fe30 	bl	1acf8 <os_time_get>
   1c098:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1c09a:	a901      	add	r1, sp, #4
   1c09c:	a802      	add	r0, sp, #8
   1c09e:	f7fe fe65 	bl	1ad6c <os_gettimeofday>
    if (rc) {
   1c0a2:	b138      	cbz	r0, 1c0b4 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1c0a4:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1c0a8:	4621      	mov	r1, r4
   1c0aa:	4809      	ldr	r0, [pc, #36]	; (1c0d0 <sensor_base_ts_update_event+0x40>)
   1c0ac:	f7fd fdac 	bl	19c08 <os_callout_reset>
}
   1c0b0:	b007      	add	sp, #28
   1c0b2:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1c0b4:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1c0b8:	4d06      	ldr	r5, [pc, #24]	; (1c0d4 <sensor_base_ts_update_event+0x44>)
   1c0ba:	ab06      	add	r3, sp, #24
   1c0bc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c0c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c0c4:	9b01      	ldr	r3, [sp, #4]
   1c0c6:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c0c8:	f7fd fe28 	bl	19d1c <os_cputime_get32>
   1c0cc:	6168      	str	r0, [r5, #20]
   1c0ce:	e7eb      	b.n	1c0a8 <sensor_base_ts_update_event+0x18>
   1c0d0:	2000a6d4 	.word	0x2000a6d4
   1c0d4:	2000a6f8 	.word	0x2000a6f8

0001c0d8 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1c0d8:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1c0dc:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1c0de:	f7fd fe1d 	bl	19d1c <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1c0e2:	4a0e      	ldr	r2, [pc, #56]	; (1c11c <sensor_up_timestamp+0x44>)
   1c0e4:	6955      	ldr	r5, [r2, #20]
   1c0e6:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1c0e8:	6460      	str	r0, [r4, #68]	; 0x44
   1c0ea:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c0ec:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c0f0:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c0f2:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c0f4:	4b0a      	ldr	r3, [pc, #40]	; (1c120 <sensor_up_timestamp+0x48>)
   1c0f6:	fba3 c305 	umull	ip, r3, r3, r5
   1c0fa:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c0fc:	eb10 0b03 	adds.w	fp, r0, r3
   1c100:	f141 0c00 	adc.w	ip, r1, #0
   1c104:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1c108:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1c10c:	4905      	ldr	r1, [pc, #20]	; (1c124 <sensor_up_timestamp+0x4c>)
   1c10e:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1c112:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1c114:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1c116:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1c11a:	bf00      	nop
   1c11c:	2000a6f8 	.word	0x2000a6f8
   1c120:	431bde83 	.word	0x431bde83
   1c124:	000f4240 	.word	0x000f4240

0001c128 <sensor_mgr_lock>:
{
   1c128:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1c12a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c12e:	4804      	ldr	r0, [pc, #16]	; (1c140 <sensor_mgr_lock+0x18>)
   1c130:	f7fe fa5c 	bl	1a5ec <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c134:	b108      	cbz	r0, 1c13a <sensor_mgr_lock+0x12>
   1c136:	2809      	cmp	r0, #9
   1c138:	d000      	beq.n	1c13c <sensor_mgr_lock+0x14>
}
   1c13a:	bd08      	pop	{r3, pc}
        return (0);
   1c13c:	2000      	movs	r0, #0
   1c13e:	e7fc      	b.n	1c13a <sensor_mgr_lock+0x12>
   1c140:	2000a6a0 	.word	0x2000a6a0

0001c144 <sensor_mgr_unlock>:
{
   1c144:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1c146:	4802      	ldr	r0, [pc, #8]	; (1c150 <sensor_mgr_unlock+0xc>)
   1c148:	f7fe f9f4 	bl	1a534 <os_mutex_release>
}
   1c14c:	bd08      	pop	{r3, pc}
   1c14e:	bf00      	nop
   1c150:	2000a6a0 	.word	0x2000a6a0

0001c154 <sensor_mgr_evq_get>:
}
   1c154:	4b01      	ldr	r3, [pc, #4]	; (1c15c <sensor_mgr_evq_get+0x8>)
   1c156:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1c158:	4770      	bx	lr
   1c15a:	bf00      	nop
   1c15c:	2000a6a0 	.word	0x2000a6a0

0001c160 <sensor_mgr_init>:
{
   1c160:	b570      	push	{r4, r5, r6, lr}
   1c162:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1c164:	f7fd ff68 	bl	1a038 <os_eventq_dflt_get>
   1c168:	f7ff ff46 	bl	1bff8 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1c16c:	4b1c      	ldr	r3, [pc, #112]	; (1c1e0 <sensor_mgr_init+0x80>)
   1c16e:	9300      	str	r3, [sp, #0]
   1c170:	4b1c      	ldr	r3, [pc, #112]	; (1c1e4 <sensor_mgr_init+0x84>)
   1c172:	2218      	movs	r2, #24
   1c174:	2105      	movs	r1, #5
   1c176:	481c      	ldr	r0, [pc, #112]	; (1c1e8 <sensor_mgr_init+0x88>)
   1c178:	f7fe f8e8 	bl	1a34c <os_mempool_init>
    assert(rc == OS_OK);
   1c17c:	bb50      	cbnz	r0, 1c1d4 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1c17e:	f7ff ffe9 	bl	1c154 <sensor_mgr_evq_get>
   1c182:	4e1a      	ldr	r6, [pc, #104]	; (1c1ec <sensor_mgr_init+0x8c>)
   1c184:	2300      	movs	r3, #0
   1c186:	4a1a      	ldr	r2, [pc, #104]	; (1c1f0 <sensor_mgr_init+0x90>)
   1c188:	4601      	mov	r1, r0
   1c18a:	4630      	mov	r0, r6
   1c18c:	f7fd fd10 	bl	19bb0 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1c190:	ad04      	add	r5, sp, #16
   1c192:	a903      	add	r1, sp, #12
   1c194:	4628      	mov	r0, r5
   1c196:	f7fe fde9 	bl	1ad6c <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1c19a:	4c16      	ldr	r4, [pc, #88]	; (1c1f4 <sensor_mgr_init+0x94>)
   1c19c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c1a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c1a4:	9b03      	ldr	r3, [sp, #12]
   1c1a6:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c1a8:	f7fd fdb8 	bl	19d1c <os_cputime_get32>
   1c1ac:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1c1ae:	f7ff ffd1 	bl	1c154 <sensor_mgr_evq_get>
   1c1b2:	4c11      	ldr	r4, [pc, #68]	; (1c1f8 <sensor_mgr_init+0x98>)
   1c1b4:	2300      	movs	r3, #0
   1c1b6:	4a11      	ldr	r2, [pc, #68]	; (1c1fc <sensor_mgr_init+0x9c>)
   1c1b8:	4601      	mov	r1, r0
   1c1ba:	4620      	mov	r0, r4
   1c1bc:	f7fd fcf8 	bl	19bb0 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1c1c0:	2180      	movs	r1, #128	; 0x80
   1c1c2:	4620      	mov	r0, r4
   1c1c4:	f7fd fd20 	bl	19c08 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1c1c8:	f1a6 000c 	sub.w	r0, r6, #12
   1c1cc:	f7fe f9a8 	bl	1a520 <os_mutex_init>
}
   1c1d0:	b008      	add	sp, #32
   1c1d2:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1c1d4:	2300      	movs	r3, #0
   1c1d6:	461a      	mov	r2, r3
   1c1d8:	4619      	mov	r1, r3
   1c1da:	4618      	mov	r0, r3
   1c1dc:	f7fd fb6e 	bl	198bc <__assert_func>
   1c1e0:	00021114 	.word	0x00021114
   1c1e4:	2000a19c 	.word	0x2000a19c
   1c1e8:	2000a214 	.word	0x2000a214
   1c1ec:	2000a6ac 	.word	0x2000a6ac
   1c1f0:	0001c3cd 	.word	0x0001c3cd
   1c1f4:	2000a6f8 	.word	0x2000a6f8
   1c1f8:	2000a6d4 	.word	0x2000a6d4
   1c1fc:	0001c091 	.word	0x0001c091

0001c200 <sensor_pkg_init>:
{
   1c200:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1c202:	f7ff ffad 	bl	1c160 <sensor_mgr_init>
}
   1c206:	bd08      	pop	{r3, pc}

0001c208 <sensor_lock>:
{
   1c208:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1c20a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c20e:	3004      	adds	r0, #4
   1c210:	f7fe f9ec 	bl	1a5ec <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c214:	b108      	cbz	r0, 1c21a <sensor_lock+0x12>
   1c216:	2809      	cmp	r0, #9
   1c218:	d000      	beq.n	1c21c <sensor_lock+0x14>
}
   1c21a:	bd08      	pop	{r3, pc}
        return (0);
   1c21c:	2000      	movs	r0, #0
   1c21e:	e7fc      	b.n	1c21a <sensor_lock+0x12>

0001c220 <sensor_unlock>:
{
   1c220:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1c222:	3004      	adds	r0, #4
   1c224:	f7fe f986 	bl	1a534 <os_mutex_release>
}
   1c228:	bd08      	pop	{r3, pc}

0001c22a <sensor_update_nextrun>:
{
   1c22a:	b530      	push	{r4, r5, lr}
   1c22c:	b083      	sub	sp, #12
   1c22e:	4604      	mov	r4, r0
   1c230:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1c232:	a901      	add	r1, sp, #4
   1c234:	6a00      	ldr	r0, [r0, #32]
   1c236:	f7fe fdb5 	bl	1ada4 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1c23a:	4620      	mov	r0, r4
   1c23c:	f7ff ffe4 	bl	1c208 <sensor_lock>
    sensor_mgr_remove(sensor);
   1c240:	4620      	mov	r0, r4
   1c242:	f7ff fe8f 	bl	1bf64 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1c246:	9b01      	ldr	r3, [sp, #4]
   1c248:	441d      	add	r5, r3
   1c24a:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1c24c:	4620      	mov	r0, r4
   1c24e:	f7ff fe9d 	bl	1bf8c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c252:	4620      	mov	r0, r4
   1c254:	f7ff ffe4 	bl	1c220 <sensor_unlock>
}
   1c258:	b003      	add	sp, #12
   1c25a:	bd30      	pop	{r4, r5, pc}

0001c25c <sensor_calc_nextrun_delta>:
{
   1c25c:	b538      	push	{r3, r4, r5, lr}
   1c25e:	4605      	mov	r5, r0
   1c260:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1c262:	f7ff ffd1 	bl	1c208 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1c266:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1c268:	1b0c      	subs	r4, r1, r4
   1c26a:	d404      	bmi.n	1c276 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1c26c:	4628      	mov	r0, r5
   1c26e:	f7ff ffd7 	bl	1c220 <sensor_unlock>
}
   1c272:	4620      	mov	r0, r4
   1c274:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1c276:	2400      	movs	r4, #0
   1c278:	e7f8      	b.n	1c26c <sensor_calc_nextrun_delta+0x10>
	...

0001c27c <sensor_find_min_nextrun_sensor>:
{
   1c27c:	b570      	push	{r4, r5, r6, lr}
   1c27e:	4606      	mov	r6, r0
   1c280:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1c282:	f7ff ff51 	bl	1c128 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1c286:	4b05      	ldr	r3, [pc, #20]	; (1c29c <sensor_find_min_nextrun_sensor+0x20>)
   1c288:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1c28a:	4631      	mov	r1, r6
   1c28c:	4620      	mov	r0, r4
   1c28e:	f7ff ffe5 	bl	1c25c <sensor_calc_nextrun_delta>
   1c292:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1c294:	f7ff ff56 	bl	1c144 <sensor_mgr_unlock>
}
   1c298:	4620      	mov	r0, r4
   1c29a:	bd70      	pop	{r4, r5, r6, pc}
   1c29c:	2000a6a0 	.word	0x2000a6a0

0001c2a0 <sensor_mgr_register>:
{
   1c2a0:	b538      	push	{r3, r4, r5, lr}
   1c2a2:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1c2a4:	f7ff ff40 	bl	1c128 <sensor_mgr_lock>
    if (rc != 0) {
   1c2a8:	4604      	mov	r4, r0
   1c2aa:	b108      	cbz	r0, 1c2b0 <sensor_mgr_register+0x10>
}
   1c2ac:	4620      	mov	r0, r4
   1c2ae:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1c2b0:	4628      	mov	r0, r5
   1c2b2:	f7ff ffa9 	bl	1c208 <sensor_lock>
    if (rc != 0) {
   1c2b6:	4604      	mov	r4, r0
   1c2b8:	2800      	cmp	r0, #0
   1c2ba:	d1f7      	bne.n	1c2ac <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1c2bc:	4628      	mov	r0, r5
   1c2be:	f7ff fe65 	bl	1bf8c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c2c2:	4628      	mov	r0, r5
   1c2c4:	f7ff ffac 	bl	1c220 <sensor_unlock>
    sensor_mgr_unlock();
   1c2c8:	f7ff ff3c 	bl	1c144 <sensor_mgr_unlock>
    return (0);
   1c2cc:	e7ee      	b.n	1c2ac <sensor_mgr_register+0xc>

0001c2ce <sensor_init>:
{
   1c2ce:	b538      	push	{r3, r4, r5, lr}
   1c2d0:	4604      	mov	r4, r0
   1c2d2:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1c2d4:	2288      	movs	r2, #136	; 0x88
   1c2d6:	2100      	movs	r1, #0
   1c2d8:	f7fe fef3 	bl	1b0c2 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1c2dc:	1d20      	adds	r0, r4, #4
   1c2de:	f7fe f91f 	bl	1a520 <os_mutex_init>
    if (rc != 0) {
   1c2e2:	4603      	mov	r3, r0
   1c2e4:	b900      	cbnz	r0, 1c2e8 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1c2e6:	6025      	str	r5, [r4, #0]
}
   1c2e8:	4618      	mov	r0, r3
   1c2ea:	bd38      	pop	{r3, r4, r5, pc}

0001c2ec <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1c2ec:	b530      	push	{r4, r5, lr}
   1c2ee:	b089      	sub	sp, #36	; 0x24
   1c2f0:	4604      	mov	r4, r0
   1c2f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1c2f6:	f7ff ff87 	bl	1c208 <sensor_lock>
    if (rc) {
   1c2fa:	4605      	mov	r5, r0
   1c2fc:	b9f8      	cbnz	r0, 1c33e <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1c2fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c300:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1c302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c304:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1c306:	a904      	add	r1, sp, #16
   1c308:	4620      	mov	r0, r4
   1c30a:	f7ff fe7b 	bl	1c004 <sensor_mgr_match_bytype>
   1c30e:	b1e0      	cbz	r0, 1c34a <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1c310:	4620      	mov	r0, r4
   1c312:	f7ff fee1 	bl	1c0d8 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1c316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c318:	6819      	ldr	r1, [r3, #0]
   1c31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c31c:	9302      	str	r3, [sp, #8]
   1c31e:	ab06      	add	r3, sp, #24
   1c320:	9301      	str	r3, [sp, #4]
   1c322:	4b0b      	ldr	r3, [pc, #44]	; (1c350 <sensor_read+0x64>)
   1c324:	9300      	str	r3, [sp, #0]
   1c326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c32a:	4620      	mov	r0, r4
   1c32c:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1c32e:	4605      	mov	r5, r0
   1c330:	b128      	cbz	r0, 1c33e <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1c332:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1c334:	b11b      	cbz	r3, 1c33e <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1c336:	4602      	mov	r2, r0
   1c338:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1c33a:	4620      	mov	r0, r4
   1c33c:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1c33e:	4620      	mov	r0, r4
   1c340:	f7ff ff6e 	bl	1c220 <sensor_unlock>
    return (rc);
}
   1c344:	4628      	mov	r0, r5
   1c346:	b009      	add	sp, #36	; 0x24
   1c348:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1c34a:	f06f 0503 	mvn.w	r5, #3
   1c34e:	e7f6      	b.n	1c33e <sensor_read+0x52>
   1c350:	0001c033 	.word	0x0001c033

0001c354 <sensor_mgr_poll_bytype>:
{
   1c354:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c356:	b085      	sub	sp, #20
   1c358:	4616      	mov	r6, r2
   1c35a:	461f      	mov	r7, r3
   1c35c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1c35e:	b10c      	cbz	r4, 1c364 <sensor_mgr_poll_bytype+0x10>
   1c360:	8aa3      	ldrh	r3, [r4, #20]
   1c362:	b9cb      	cbnz	r3, 1c398 <sensor_mgr_poll_bytype+0x44>
   1c364:	4632      	mov	r2, r6
   1c366:	463b      	mov	r3, r7
   1c368:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1c36a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c36e:	9102      	str	r1, [sp, #8]
   1c370:	2100      	movs	r1, #0
   1c372:	9101      	str	r1, [sp, #4]
   1c374:	9100      	str	r1, [sp, #0]
   1c376:	f7ff ffb9 	bl	1c2ec <sensor_read>
        sensor_lock(sensor);
   1c37a:	4628      	mov	r0, r5
   1c37c:	f7ff ff44 	bl	1c208 <sensor_lock>
        if (stt) {
   1c380:	b12c      	cbz	r4, 1c38e <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1c382:	8aa3      	ldrh	r3, [r4, #20]
   1c384:	b91b      	cbnz	r3, 1c38e <sensor_mgr_poll_bytype+0x3a>
   1c386:	8a63      	ldrh	r3, [r4, #18]
   1c388:	b10b      	cbz	r3, 1c38e <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1c38a:	3b01      	subs	r3, #1
   1c38c:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1c38e:	4628      	mov	r0, r5
   1c390:	f7ff ff46 	bl	1c220 <sensor_unlock>
}
   1c394:	b005      	add	sp, #20
   1c396:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1c398:	3b01      	subs	r3, #1
   1c39a:	82a3      	strh	r3, [r4, #20]
}
   1c39c:	e7fa      	b.n	1c394 <sensor_mgr_poll_bytype+0x40>

0001c39e <sensor_poll_per_type_trait>:
{
   1c39e:	b570      	push	{r4, r5, r6, lr}
   1c3a0:	b082      	sub	sp, #8
   1c3a2:	4605      	mov	r5, r0
   1c3a4:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1c3a6:	f7ff ff2f 	bl	1c208 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c3aa:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1c3ac:	e007      	b.n	1c3be <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1c3ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c3b2:	9601      	str	r6, [sp, #4]
   1c3b4:	9400      	str	r4, [sp, #0]
   1c3b6:	4628      	mov	r0, r5
   1c3b8:	f7ff ffcc 	bl	1c354 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c3bc:	6a24      	ldr	r4, [r4, #32]
   1c3be:	2c00      	cmp	r4, #0
   1c3c0:	d1f5      	bne.n	1c3ae <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1c3c2:	4628      	mov	r0, r5
   1c3c4:	f7ff ff2c 	bl	1c220 <sensor_unlock>
}
   1c3c8:	b002      	add	sp, #8
   1c3ca:	bd70      	pop	{r4, r5, r6, pc}

0001c3cc <sensor_mgr_wakeup_event>:
{
   1c3cc:	b570      	push	{r4, r5, r6, lr}
   1c3ce:	b084      	sub	sp, #16
    now = os_time_get();
   1c3d0:	f7fe fc92 	bl	1acf8 <os_time_get>
   1c3d4:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1c3d6:	f7ff fea7 	bl	1c128 <sensor_mgr_lock>
   1c3da:	e012      	b.n	1c402 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1c3dc:	4620      	mov	r0, r4
   1c3de:	f7ff ff1f 	bl	1c220 <sensor_unlock>
            sensor_mgr_unlock();
   1c3e2:	f7ff feaf 	bl	1c144 <sensor_mgr_unlock>
}
   1c3e6:	b004      	add	sp, #16
   1c3e8:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1c3ea:	4632      	mov	r2, r6
   1c3ec:	4629      	mov	r1, r5
   1c3ee:	4620      	mov	r0, r4
   1c3f0:	f7ff ffd5 	bl	1c39e <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1c3f4:	4629      	mov	r1, r5
   1c3f6:	4620      	mov	r0, r4
   1c3f8:	f7ff ff17 	bl	1c22a <sensor_update_nextrun>
        sensor_unlock(cursor);
   1c3fc:	4620      	mov	r0, r4
   1c3fe:	f7ff ff0f 	bl	1c220 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1c402:	a903      	add	r1, sp, #12
   1c404:	4628      	mov	r0, r5
   1c406:	f7ff ff39 	bl	1c27c <sensor_find_min_nextrun_sensor>
   1c40a:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1c40c:	f7ff fefc 	bl	1c208 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1c410:	6a23      	ldr	r3, [r4, #32]
   1c412:	2b00      	cmp	r3, #0
   1c414:	d0e2      	beq.n	1c3dc <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1c416:	9e03      	ldr	r6, [sp, #12]
   1c418:	b96e      	cbnz	r6, 1c436 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1c41a:	4620      	mov	r0, r4
   1c41c:	f7ff fde6 	bl	1bfec <sensor_type_traits_empty>
   1c420:	2800      	cmp	r0, #0
   1c422:	d0e2      	beq.n	1c3ea <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1c424:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1c428:	9501      	str	r5, [sp, #4]
   1c42a:	2100      	movs	r1, #0
   1c42c:	9100      	str	r1, [sp, #0]
   1c42e:	4620      	mov	r0, r4
   1c430:	f7ff ff90 	bl	1c354 <sensor_mgr_poll_bytype>
   1c434:	e7de      	b.n	1c3f4 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1c436:	f7ff fe85 	bl	1c144 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1c43a:	9903      	ldr	r1, [sp, #12]
   1c43c:	4801      	ldr	r0, [pc, #4]	; (1c444 <sensor_mgr_wakeup_event+0x78>)
   1c43e:	f7fd fbe3 	bl	19c08 <os_callout_reset>
   1c442:	e7d0      	b.n	1c3e6 <sensor_mgr_wakeup_event+0x1a>
   1c444:	2000a6ac 	.word	0x2000a6ac

0001c448 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1c448:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1c44a:	2101      	movs	r1, #1
   1c44c:	4806      	ldr	r0, [pc, #24]	; (1c468 <init_sensor_coap+0x20>)
   1c44e:	f7fe faf1 	bl	1aa34 <os_sem_init>
    assert(rc == OS_OK);
   1c452:	b918      	cbnz	r0, 1c45c <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1c454:	4b05      	ldr	r3, [pc, #20]	; (1c46c <init_sensor_coap+0x24>)
   1c456:	2201      	movs	r2, #1
   1c458:	701a      	strb	r2, [r3, #0]
}
   1c45a:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1c45c:	2300      	movs	r3, #0
   1c45e:	461a      	mov	r2, r3
   1c460:	4619      	mov	r1, r3
   1c462:	4618      	mov	r0, r3
   1c464:	f7fd fa2a 	bl	198bc <__assert_func>
   1c468:	2000a230 	.word	0x2000a230
   1c46c:	2000a238 	.word	0x2000a238

0001c470 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c470:	4b04      	ldr	r3, [pc, #16]	; (1c484 <is_sensor_node+0x14>)
   1c472:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c476:	4313      	orrs	r3, r2
   1c478:	d101      	bne.n	1c47e <is_sensor_node+0xe>
    return false;
   1c47a:	2000      	movs	r0, #0
}
   1c47c:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c47e:	2001      	movs	r0, #1
   1c480:	4770      	bx	lr
   1c482:	bf00      	nop
   1c484:	2000a250 	.word	0x2000a250

0001c488 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1c488:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1c48a:	4b16      	ldr	r3, [pc, #88]	; (1c4e4 <get_hardware_id+0x5c>)
   1c48c:	681b      	ldr	r3, [r3, #0]
   1c48e:	b10b      	cbz	r3, 1c494 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1c490:	4815      	ldr	r0, [pc, #84]	; (1c4e8 <get_hardware_id+0x60>)
   1c492:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1c494:	f000 fcee 	bl	1ce74 <hal_bsp_hw_id_len>
   1c498:	4b12      	ldr	r3, [pc, #72]	; (1c4e4 <get_hardware_id+0x5c>)
   1c49a:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c49c:	280b      	cmp	r0, #11
   1c49e:	d914      	bls.n	1c4ca <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c4a0:	210c      	movs	r1, #12
   1c4a2:	4811      	ldr	r0, [pc, #68]	; (1c4e8 <get_hardware_id+0x60>)
   1c4a4:	f000 fce8 	bl	1ce78 <hal_bsp_hw_id>
   1c4a8:	4b0e      	ldr	r3, [pc, #56]	; (1c4e4 <get_hardware_id+0x5c>)
   1c4aa:	6018      	str	r0, [r3, #0]
   1c4ac:	2800      	cmp	r0, #0
   1c4ae:	dd12      	ble.n	1c4d6 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1c4b0:	490e      	ldr	r1, [pc, #56]	; (1c4ec <get_hardware_id+0x64>)
   1c4b2:	480f      	ldr	r0, [pc, #60]	; (1c4f0 <get_hardware_id+0x68>)
   1c4b4:	f7fc fb3a 	bl	18b2c <console_printf>
   1c4b8:	4b0a      	ldr	r3, [pc, #40]	; (1c4e4 <get_hardware_id+0x5c>)
   1c4ba:	6819      	ldr	r1, [r3, #0]
   1c4bc:	480a      	ldr	r0, [pc, #40]	; (1c4e8 <get_hardware_id+0x60>)
   1c4be:	f7fc fac5 	bl	18a4c <console_dump>
   1c4c2:	480c      	ldr	r0, [pc, #48]	; (1c4f4 <get_hardware_id+0x6c>)
   1c4c4:	f7fc fb32 	bl	18b2c <console_printf>
   1c4c8:	e7e2      	b.n	1c490 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	461a      	mov	r2, r3
   1c4ce:	4619      	mov	r1, r3
   1c4d0:	4618      	mov	r0, r3
   1c4d2:	f7fd f9f3 	bl	198bc <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c4d6:	2300      	movs	r3, #0
   1c4d8:	461a      	mov	r2, r3
   1c4da:	4619      	mov	r1, r3
   1c4dc:	4618      	mov	r0, r3
   1c4de:	f7fd f9ed 	bl	198bc <__assert_func>
   1c4e2:	bf00      	nop
   1c4e4:	2000a248 	.word	0x2000a248
   1c4e8:	2000a23c 	.word	0x2000a23c
   1c4ec:	000211b8 	.word	0x000211b8
   1c4f0:	00021170 	.word	0x00021170
   1c4f4:	000212d0 	.word	0x000212d0

0001c4f8 <is_collector_node>:
bool is_collector_node(void) {
   1c4f8:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1c4fa:	f7ff ffc5 	bl	1c488 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c4fe:	220c      	movs	r2, #12
   1c500:	4903      	ldr	r1, [pc, #12]	; (1c510 <is_collector_node+0x18>)
   1c502:	f7fe fdad 	bl	1b060 <memcmp>
   1c506:	b108      	cbz	r0, 1c50c <is_collector_node+0x14>
    return false; 
   1c508:	2000      	movs	r0, #0
}
   1c50a:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c50c:	2001      	movs	r0, #1
   1c50e:	e7fc      	b.n	1c50a <is_collector_node+0x12>
   1c510:	00021128 	.word	0x00021128

0001c514 <is_standalone_node>:
bool is_standalone_node(void) {
   1c514:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1c516:	f7ff ffef 	bl	1c4f8 <is_collector_node>
   1c51a:	b928      	cbnz	r0, 1c528 <is_standalone_node+0x14>
   1c51c:	4604      	mov	r4, r0
   1c51e:	f7ff ffa7 	bl	1c470 <is_sensor_node>
   1c522:	b910      	cbnz	r0, 1c52a <is_standalone_node+0x16>
   1c524:	2401      	movs	r4, #1
   1c526:	e000      	b.n	1c52a <is_standalone_node+0x16>
    return false;
   1c528:	2400      	movs	r4, #0
}
   1c52a:	4620      	mov	r0, r4
   1c52c:	bd10      	pop	{r4, pc}
	...

0001c530 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1c530:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c532:	2400      	movs	r4, #0
   1c534:	2c04      	cmp	r4, #4
   1c536:	dc15      	bgt.n	1c564 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1c538:	4b23      	ldr	r3, [pc, #140]	; (1c5c8 <sensor_network_init+0x98>)
   1c53a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c542:	4922      	ldr	r1, [pc, #136]	; (1c5cc <sensor_network_init+0x9c>)
   1c544:	4822      	ldr	r0, [pc, #136]	; (1c5d0 <sensor_network_init+0xa0>)
   1c546:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1c54a:	f000 fcaf 	bl	1ceac <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c54e:	3001      	adds	r0, #1
   1c550:	280b      	cmp	r0, #11
   1c552:	dc01      	bgt.n	1c558 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c554:	3401      	adds	r4, #1
   1c556:	e7ed      	b.n	1c534 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c558:	2300      	movs	r3, #0
   1c55a:	461a      	mov	r2, r3
   1c55c:	4619      	mov	r1, r3
   1c55e:	4618      	mov	r0, r3
   1c560:	f7fd f9ac 	bl	198bc <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1c564:	f7ff ff90 	bl	1c488 <get_hardware_id>
   1c568:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c56a:	2400      	movs	r4, #0
   1c56c:	2c04      	cmp	r4, #4
   1c56e:	dc19      	bgt.n	1c5a4 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1c570:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c574:	0093      	lsls	r3, r2, #2
   1c576:	220c      	movs	r2, #12
   1c578:	4916      	ldr	r1, [pc, #88]	; (1c5d4 <sensor_network_init+0xa4>)
   1c57a:	4419      	add	r1, r3
   1c57c:	4628      	mov	r0, r5
   1c57e:	f7fe fd6f 	bl	1b060 <memcmp>
   1c582:	b108      	cbz	r0, 1c588 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c584:	3401      	adds	r4, #1
   1c586:	e7f1      	b.n	1c56c <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1c588:	4b0f      	ldr	r3, [pc, #60]	; (1c5c8 <sensor_network_init+0x98>)
   1c58a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c58e:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c592:	4b11      	ldr	r3, [pc, #68]	; (1c5d8 <sensor_network_init+0xa8>)
   1c594:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1c598:	1c63      	adds	r3, r4, #1
   1c59a:	4a10      	ldr	r2, [pc, #64]	; (1c5dc <sensor_network_init+0xac>)
   1c59c:	4910      	ldr	r1, [pc, #64]	; (1c5e0 <sensor_network_init+0xb0>)
   1c59e:	4811      	ldr	r0, [pc, #68]	; (1c5e4 <sensor_network_init+0xb4>)
   1c5a0:	f7fc fac4 	bl	18b2c <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c5a4:	f7ff ffa8 	bl	1c4f8 <is_collector_node>
   1c5a8:	b940      	cbnz	r0, 1c5bc <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1c5aa:	f7ff ffb3 	bl	1c514 <is_standalone_node>
   1c5ae:	b150      	cbz	r0, 1c5c6 <sensor_network_init+0x96>
   1c5b0:	4a0a      	ldr	r2, [pc, #40]	; (1c5dc <sensor_network_init+0xac>)
   1c5b2:	490b      	ldr	r1, [pc, #44]	; (1c5e0 <sensor_network_init+0xb0>)
   1c5b4:	480c      	ldr	r0, [pc, #48]	; (1c5e8 <sensor_network_init+0xb8>)
   1c5b6:	f7fc fab9 	bl	18b2c <console_printf>
}
   1c5ba:	e004      	b.n	1c5c6 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c5bc:	4a07      	ldr	r2, [pc, #28]	; (1c5dc <sensor_network_init+0xac>)
   1c5be:	4908      	ldr	r1, [pc, #32]	; (1c5e0 <sensor_network_init+0xb0>)
   1c5c0:	480a      	ldr	r0, [pc, #40]	; (1c5ec <sensor_network_init+0xbc>)
   1c5c2:	f7fc fab3 	bl	18b2c <console_printf>
}
   1c5c6:	bd38      	pop	{r3, r4, r5, pc}
   1c5c8:	000211d0 	.word	0x000211d0
   1c5cc:	00021178 	.word	0x00021178
   1c5d0:	20000130 	.word	0x20000130
   1c5d4:	00021134 	.word	0x00021134
   1c5d8:	2000a250 	.word	0x2000a250
   1c5dc:	00021180 	.word	0x00021180
   1c5e0:	000211b8 	.word	0x000211b8
   1c5e4:	00021188 	.word	0x00021188
   1c5e8:	000211a8 	.word	0x000211a8
   1c5ec:	00021198 	.word	0x00021198

0001c5f0 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1c5f0:	b530      	push	{r4, r5, lr}
   1c5f2:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1c5f4:	2200      	movs	r2, #0
   1c5f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c5fa:	4810      	ldr	r0, [pc, #64]	; (1c63c <config_device+0x4c>)
   1c5fc:	f7fd fc2c 	bl	19e58 <os_dev_open>
    assert(dev != NULL);
   1c600:	b178      	cbz	r0, 1c622 <config_device+0x32>
   1c602:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1c604:	4668      	mov	r0, sp
   1c606:	f000 f86c 	bl	1c6e2 <temp_stub_default_cfg>
    assert(rc == 0);
   1c60a:	b980      	cbnz	r0, 1c62e <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1c60c:	4669      	mov	r1, sp
   1c60e:	4620      	mov	r0, r4
   1c610:	f000 f900 	bl	1c814 <temp_stub_config>
   1c614:	4605      	mov	r5, r0
    os_dev_close(dev);
   1c616:	4620      	mov	r0, r4
   1c618:	f7fd fc40 	bl	19e9c <os_dev_close>
    return rc;
}
   1c61c:	4628      	mov	r0, r5
   1c61e:	b003      	add	sp, #12
   1c620:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1c622:	2300      	movs	r3, #0
   1c624:	461a      	mov	r2, r3
   1c626:	4619      	mov	r1, r3
   1c628:	4618      	mov	r0, r3
   1c62a:	f7fd f947 	bl	198bc <__assert_func>
    assert(rc == 0);
   1c62e:	2300      	movs	r3, #0
   1c630:	461a      	mov	r2, r3
   1c632:	4619      	mov	r1, r3
   1c634:	4618      	mov	r0, r3
   1c636:	f7fd f941 	bl	198bc <__assert_func>
   1c63a:	bf00      	nop
   1c63c:	000211f8 	.word	0x000211f8

0001c640 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1c640:	b510      	push	{r4, lr}
   1c642:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1c644:	4c10      	ldr	r4, [pc, #64]	; (1c688 <temp_stub_create+0x48>)
   1c646:	4621      	mov	r1, r4
   1c648:	4810      	ldr	r0, [pc, #64]	; (1c68c <temp_stub_create+0x4c>)
   1c64a:	f7fc fa6f 	bl	18b2c <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1c64e:	4b10      	ldr	r3, [pc, #64]	; (1c690 <temp_stub_create+0x50>)
   1c650:	9301      	str	r3, [sp, #4]
   1c652:	4b10      	ldr	r3, [pc, #64]	; (1c694 <temp_stub_create+0x54>)
   1c654:	9300      	str	r3, [sp, #0]
   1c656:	2300      	movs	r3, #0
   1c658:	2201      	movs	r2, #1
   1c65a:	4621      	mov	r1, r4
   1c65c:	480e      	ldr	r0, [pc, #56]	; (1c698 <temp_stub_create+0x58>)
   1c65e:	f7fd fbb5 	bl	19dcc <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1c662:	b920      	cbnz	r0, 1c66e <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1c664:	f7ff ffc4 	bl	1c5f0 <config_device>
    assert(rc == 0);
   1c668:	b938      	cbnz	r0, 1c67a <temp_stub_create+0x3a>
}
   1c66a:	b002      	add	sp, #8
   1c66c:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1c66e:	2300      	movs	r3, #0
   1c670:	461a      	mov	r2, r3
   1c672:	4619      	mov	r1, r3
   1c674:	4618      	mov	r0, r3
   1c676:	f7fd f921 	bl	198bc <__assert_func>
    assert(rc == 0);
   1c67a:	2300      	movs	r3, #0
   1c67c:	461a      	mov	r2, r3
   1c67e:	4619      	mov	r1, r3
   1c680:	4618      	mov	r0, r3
   1c682:	f7fd f91b 	bl	198bc <__assert_func>
   1c686:	bf00      	nop
   1c688:	000211f8 	.word	0x000211f8
   1c68c:	00021204 	.word	0x00021204
   1c690:	2000a290 	.word	0x2000a290
   1c694:	0001c6f1 	.word	0x0001c6f1
   1c698:	2000a2a8 	.word	0x2000a2a8

0001c69c <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1c69c:	2000      	movs	r0, #0
   1c69e:	4770      	bx	lr

0001c6a0 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1c6a0:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1c6a4:	2100      	movs	r1, #0
   1c6a6:	ea50 0301 	orrs.w	r3, r0, r1
   1c6aa:	d004      	beq.n	1c6b6 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1c6ac:	9b00      	ldr	r3, [sp, #0]
   1c6ae:	2201      	movs	r2, #1
   1c6b0:	701a      	strb	r2, [r3, #0]
    return (0);
   1c6b2:	2000      	movs	r0, #0
   1c6b4:	4770      	bx	lr
err:
    return (rc);
   1c6b6:	f06f 0001 	mvn.w	r0, #1
}
   1c6ba:	4770      	bx	lr

0001c6bc <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1c6bc:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c6be:	b120      	cbz	r0, 1c6ca <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1c6c0:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1c6c4:	d007      	beq.n	1c6d6 <temp_stub_open+0x1a>
}
   1c6c6:	2000      	movs	r0, #0
   1c6c8:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c6ca:	2300      	movs	r3, #0
   1c6cc:	461a      	mov	r2, r3
   1c6ce:	4619      	mov	r1, r3
   1c6d0:	4618      	mov	r0, r3
   1c6d2:	f7fd f8f3 	bl	198bc <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1c6d6:	2300      	movs	r3, #0
   1c6d8:	461a      	mov	r2, r3
   1c6da:	4619      	mov	r1, r3
   1c6dc:	4618      	mov	r0, r3
   1c6de:	f7fd f8ed 	bl	198bc <__assert_func>

0001c6e2 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1c6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c6e6:	2300      	movs	r3, #0
   1c6e8:	e9c0 2300 	strd	r2, r3, [r0]
}
   1c6ec:	2000      	movs	r0, #0
   1c6ee:	4770      	bx	lr

0001c6f0 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c6f2:	b379      	cbz	r1, 1c754 <temp_stub_init+0x64>
   1c6f4:	460d      	mov	r5, r1
   1c6f6:	b380      	cbz	r0, 1c75a <temp_stub_init+0x6a>
   1c6f8:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1c6fa:	30b0      	adds	r0, #176	; 0xb0
   1c6fc:	f7ff fff1 	bl	1c6e2 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1c700:	4603      	mov	r3, r0
   1c702:	b108      	cbz	r0, 1c708 <temp_stub_init+0x18>
}
   1c704:	4618      	mov	r0, r3
   1c706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1c708:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1c70c:	4621      	mov	r1, r4
   1c70e:	4630      	mov	r0, r6
   1c710:	f7ff fddd 	bl	1c2ce <sensor_init>
    if (rc != 0) { goto err; }
   1c714:	4603      	mov	r3, r0
   1c716:	2800      	cmp	r0, #0
   1c718:	d1f4      	bne.n	1c704 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1c71a:	4b11      	ldr	r3, [pc, #68]	; (1c760 <temp_stub_init+0x70>)
   1c71c:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1c71e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c722:	2300      	movs	r3, #0
   1c724:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1c728:	682a      	ldr	r2, [r5, #0]
   1c72a:	686f      	ldr	r7, [r5, #4]
   1c72c:	68a8      	ldr	r0, [r5, #8]
   1c72e:	68e9      	ldr	r1, [r5, #12]
   1c730:	6722      	str	r2, [r4, #112]	; 0x70
   1c732:	6767      	str	r7, [r4, #116]	; 0x74
   1c734:	67a0      	str	r0, [r4, #120]	; 0x78
   1c736:	67e1      	str	r1, [r4, #124]	; 0x7c
   1c738:	692a      	ldr	r2, [r5, #16]
   1c73a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1c73e:	4630      	mov	r0, r6
   1c740:	f7ff fdae 	bl	1c2a0 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1c744:	4603      	mov	r3, r0
   1c746:	2800      	cmp	r0, #0
   1c748:	d1dc      	bne.n	1c704 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1c74a:	4a06      	ldr	r2, [pc, #24]	; (1c764 <temp_stub_init+0x74>)
   1c74c:	6022      	str	r2, [r4, #0]
   1c74e:	4a06      	ldr	r2, [pc, #24]	; (1c768 <temp_stub_init+0x78>)
   1c750:	60e2      	str	r2, [r4, #12]
    return (0);
   1c752:	e7d7      	b.n	1c704 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c754:	f06f 0308 	mvn.w	r3, #8
   1c758:	e7d4      	b.n	1c704 <temp_stub_init+0x14>
   1c75a:	f06f 0308 	mvn.w	r3, #8
   1c75e:	e7d1      	b.n	1c704 <temp_stub_init+0x14>
   1c760:	00021214 	.word	0x00021214
   1c764:	0001c6bd 	.word	0x0001c6bd
   1c768:	0001c69d 	.word	0x0001c69d

0001c76c <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1c76c:	b538      	push	{r3, r4, r5, lr}
   1c76e:	460d      	mov	r5, r1
   1c770:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1c772:	4808      	ldr	r0, [pc, #32]	; (1c794 <temp_stub_get_raw_temperature+0x28>)
   1c774:	f7fc f9da 	bl	18b2c <console_printf>
    assert(temp_sum);
   1c778:	b134      	cbz	r4, 1c788 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1c77a:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1c77e:	fb01 f105 	mul.w	r1, r1, r5
   1c782:	6021      	str	r1, [r4, #0]
}
   1c784:	2000      	movs	r0, #0
   1c786:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1c788:	2300      	movs	r3, #0
   1c78a:	461a      	mov	r2, r3
   1c78c:	4619      	mov	r1, r3
   1c78e:	4618      	mov	r0, r3
   1c790:	f7fd f894 	bl	198bc <__assert_func>
   1c794:	0002123c 	.word	0x0002123c

0001c798 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1c798:	b530      	push	{r4, r5, lr}
   1c79a:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c79c:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1c7a0:	2500      	movs	r5, #0
   1c7a2:	ea54 0305 	orrs.w	r3, r4, r5
   1c7a6:	d032      	beq.n	1c80e <temp_stub_sensor_read+0x76>
   1c7a8:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c7aa:	6805      	ldr	r5, [r0, #0]
   1c7ac:	b165      	cbz	r5, 1c7c8 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1c7ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c7b2:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1c7b4:	2200      	movs	r2, #0
   1c7b6:	4611      	mov	r1, r2
   1c7b8:	4628      	mov	r0, r5
   1c7ba:	f7ff ff7f 	bl	1c6bc <temp_stub_open>
        if (rc) { goto err; }
   1c7be:	4603      	mov	r3, r0
   1c7c0:	b140      	cbz	r0, 1c7d4 <temp_stub_sensor_read+0x3c>
}
   1c7c2:	4618      	mov	r0, r3
   1c7c4:	b007      	add	sp, #28
   1c7c6:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c7c8:	2300      	movs	r3, #0
   1c7ca:	461a      	mov	r2, r3
   1c7cc:	4619      	mov	r1, r3
   1c7ce:	4618      	mov	r0, r3
   1c7d0:	f7fd f874 	bl	198bc <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1c7d4:	2300      	movs	r3, #0
   1c7d6:	aa03      	add	r2, sp, #12
   1c7d8:	2101      	movs	r1, #1
   1c7da:	4628      	mov	r0, r5
   1c7dc:	f7ff ffc6 	bl	1c76c <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1c7e0:	4603      	mov	r3, r0
   1c7e2:	2800      	cmp	r0, #0
   1c7e4:	d1ed      	bne.n	1c7c2 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1c7e6:	9a03      	ldr	r2, [sp, #12]
   1c7e8:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1c7ea:	2201      	movs	r2, #1
   1c7ec:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1c7f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c7f2:	2a00      	cmp	r2, #0
   1c7f4:	d0e5      	beq.n	1c7c2 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1c7f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c7fa:	2300      	movs	r3, #0
   1c7fc:	e9cd 2300 	strd	r2, r3, [sp]
   1c800:	aa04      	add	r2, sp, #16
   1c802:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c804:	4620      	mov	r0, r4
   1c806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c808:	4798      	blx	r3
   1c80a:	4603      	mov	r3, r0
   1c80c:	e7d9      	b.n	1c7c2 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c80e:	f06f 0301 	mvn.w	r3, #1
   1c812:	e7d6      	b.n	1c7c2 <temp_stub_sensor_read+0x2a>

0001c814 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1c814:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c816:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1c81a:	d009      	beq.n	1c830 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1c81c:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1c820:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1c824:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c828:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1c82c:	2000      	movs	r0, #0
   1c82e:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c830:	2300      	movs	r3, #0
   1c832:	461a      	mov	r2, r3
   1c834:	4619      	mov	r1, r3
   1c836:	4618      	mov	r0, r3
   1c838:	f7fd f840 	bl	198bc <__assert_func>

0001c83c <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1c83c:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c83e:	e002      	b.n	1c846 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1c840:	4618      	mov	r0, r3
   1c842:	f000 f85b 	bl	1c8fc <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c846:	4808      	ldr	r0, [pc, #32]	; (1c868 <oc_buffer_tx+0x2c>)
   1c848:	f7fd fc03 	bl	1a052 <os_mqueue_get>
   1c84c:	4603      	mov	r3, r0
   1c84e:	b148      	cbz	r0, 1c864 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1c850:	2200      	movs	r2, #0
   1c852:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1c854:	7e1a      	ldrb	r2, [r3, #24]
   1c856:	f012 0f08 	tst.w	r2, #8
   1c85a:	d0f1      	beq.n	1c840 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1c85c:	4618      	mov	r0, r3
   1c85e:	f000 f85d 	bl	1c91c <oc_send_multicast_message>
   1c862:	e7f0      	b.n	1c846 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1c864:	bd08      	pop	{r3, pc}
   1c866:	bf00      	nop
   1c868:	2000a380 	.word	0x2000a380

0001c86c <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1c86c:	b500      	push	{lr}
   1c86e:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1c870:	4808      	ldr	r0, [pc, #32]	; (1c894 <oc_buffer_rx+0x28>)
   1c872:	f7fd fbee 	bl	1a052 <os_mqueue_get>
   1c876:	9001      	str	r0, [sp, #4]
   1c878:	b140      	cbz	r0, 1c88c <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1c87a:	a801      	add	r0, sp, #4
   1c87c:	f000 faa2 	bl	1cdc4 <__wrap_coap_receive>
#endif
        if (m) {
   1c880:	9801      	ldr	r0, [sp, #4]
   1c882:	2800      	cmp	r0, #0
   1c884:	d0f4      	beq.n	1c870 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1c886:	f7fd fc59 	bl	1a13c <os_mbuf_free_chain>
   1c88a:	e7f1      	b.n	1c870 <oc_buffer_rx+0x4>
        }
    }
}
   1c88c:	b003      	add	sp, #12
   1c88e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c892:	bf00      	nop
   1c894:	2000a368 	.word	0x2000a368

0001c898 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1c898:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1c89a:	2200      	movs	r2, #0
   1c89c:	4904      	ldr	r1, [pc, #16]	; (1c8b0 <oc_buffer_init+0x18>)
   1c89e:	4805      	ldr	r0, [pc, #20]	; (1c8b4 <oc_buffer_init+0x1c>)
   1c8a0:	f7fd fbce 	bl	1a040 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1c8a4:	2200      	movs	r2, #0
   1c8a6:	4904      	ldr	r1, [pc, #16]	; (1c8b8 <oc_buffer_init+0x20>)
   1c8a8:	4804      	ldr	r0, [pc, #16]	; (1c8bc <oc_buffer_init+0x24>)
   1c8aa:	f7fd fbc9 	bl	1a040 <os_mqueue_init>
}
   1c8ae:	bd08      	pop	{r3, pc}
   1c8b0:	0001c86d 	.word	0x0001c86d
   1c8b4:	2000a368 	.word	0x2000a368
   1c8b8:	0001c83d 	.word	0x0001c83d
   1c8bc:	2000a380 	.word	0x2000a380

0001c8c0 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1c8c0:	b500      	push	{lr}
   1c8c2:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1c8c4:	4b07      	ldr	r3, [pc, #28]	; (1c8e4 <oc_ri_mem_init+0x24>)
   1c8c6:	9300      	str	r3, [sp, #0]
   1c8c8:	4b07      	ldr	r3, [pc, #28]	; (1c8e8 <oc_ri_mem_init+0x28>)
   1c8ca:	2264      	movs	r2, #100	; 0x64
   1c8cc:	2102      	movs	r1, #2
   1c8ce:	4807      	ldr	r0, [pc, #28]	; (1c8ec <oc_ri_mem_init+0x2c>)
   1c8d0:	f7fd fd3c 	bl	1a34c <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1c8d4:	f000 f860 	bl	1c998 <oc_rep_init>
#endif
    oc_buffer_init();
   1c8d8:	f7ff ffde 	bl	1c898 <oc_buffer_init>
}
   1c8dc:	b003      	add	sp, #12
   1c8de:	f85d fb04 	ldr.w	pc, [sp], #4
   1c8e2:	bf00      	nop
   1c8e4:	00021254 	.word	0x00021254
   1c8e8:	2000a398 	.word	0x2000a398
   1c8ec:	2000a460 	.word	0x2000a460

0001c8f0 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1c8f0:	4b01      	ldr	r3, [pc, #4]	; (1c8f8 <oc_evq_set+0x8>)
   1c8f2:	6018      	str	r0, [r3, #0]
}
   1c8f4:	4770      	bx	lr
   1c8f6:	bf00      	nop
   1c8f8:	2000a47c 	.word	0x2000a47c

0001c8fc <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1c8fc:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1c8fe:	7e03      	ldrb	r3, [r0, #24]
   1c900:	f003 0307 	and.w	r3, r3, #7
   1c904:	4a04      	ldr	r2, [pc, #16]	; (1c918 <oc_send_buffer+0x1c>)
   1c906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1c90a:	b113      	cbz	r3, 1c912 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1c90c:	68db      	ldr	r3, [r3, #12]
   1c90e:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1c910:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1c912:	f7fd fc13 	bl	1a13c <os_mbuf_free_chain>
}
   1c916:	e7fb      	b.n	1c910 <oc_send_buffer+0x14>
   1c918:	2000a710 	.word	0x2000a710

0001c91c <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1c91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c920:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c922:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1c924:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c926:	e002      	b.n	1c92e <oc_send_multicast_message+0x12>
   1c928:	4635      	mov	r5, r6
   1c92a:	3401      	adds	r4, #1
   1c92c:	462e      	mov	r6, r5
   1c92e:	2c07      	cmp	r4, #7
   1c930:	dc12      	bgt.n	1c958 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1c932:	4b0c      	ldr	r3, [pc, #48]	; (1c964 <oc_send_multicast_message+0x48>)
   1c934:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1c938:	2d00      	cmp	r5, #0
   1c93a:	d0f5      	beq.n	1c928 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1c93c:	2e00      	cmp	r6, #0
   1c93e:	d0f4      	beq.n	1c92a <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1c940:	4638      	mov	r0, r7
   1c942:	f7fd fc6b 	bl	1a21c <os_mbuf_dup>
   1c946:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1c948:	6933      	ldr	r3, [r6, #16]
   1c94a:	4638      	mov	r0, r7
   1c94c:	4798      	blx	r3
            if (!n) {
   1c94e:	f1b8 0f00 	cmp.w	r8, #0
   1c952:	d005      	beq.n	1c960 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1c954:	4647      	mov	r7, r8
   1c956:	e7e8      	b.n	1c92a <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1c958:	b116      	cbz	r6, 1c960 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1c95a:	6933      	ldr	r3, [r6, #16]
   1c95c:	4638      	mov	r0, r7
   1c95e:	4798      	blx	r3
    }
}
   1c960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c964:	2000a710 	.word	0x2000a710

0001c968 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1c968:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1c96a:	4b07      	ldr	r3, [pc, #28]	; (1c988 <oc_init+0x20>)
   1c96c:	781b      	ldrb	r3, [r3, #0]
   1c96e:	b133      	cbz	r3, 1c97e <oc_init+0x16>
    oc_ri_mem_init();
   1c970:	f7ff ffa6 	bl	1c8c0 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1c974:	f7fd fb60 	bl	1a038 <os_eventq_dflt_get>
   1c978:	f7ff ffba 	bl	1c8f0 <oc_evq_set>
}
   1c97c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c97e:	461a      	mov	r2, r3
   1c980:	4619      	mov	r1, r3
   1c982:	4618      	mov	r0, r3
   1c984:	f7fc ff9a 	bl	198bc <__assert_func>
   1c988:	2000a56c 	.word	0x2000a56c

0001c98c <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1c98c:	4770      	bx	lr

0001c98e <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1c98e:	4770      	bx	lr

0001c990 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1c990:	4770      	bx	lr

0001c992 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1c992:	4770      	bx	lr

0001c994 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1c994:	4770      	bx	lr
	...

0001c998 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1c998:	b500      	push	{lr}
   1c99a:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1c99c:	4b05      	ldr	r3, [pc, #20]	; (1c9b4 <oc_rep_init+0x1c>)
   1c99e:	9300      	str	r3, [sp, #0]
   1c9a0:	4b05      	ldr	r3, [pc, #20]	; (1c9b8 <oc_rep_init+0x20>)
   1c9a2:	2218      	movs	r2, #24
   1c9a4:	2102      	movs	r1, #2
   1c9a6:	4805      	ldr	r0, [pc, #20]	; (1c9bc <oc_rep_init+0x24>)
   1c9a8:	f7fd fcd0 	bl	1a34c <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1c9ac:	b003      	add	sp, #12
   1c9ae:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9b2:	bf00      	nop
   1c9b4:	00021260 	.word	0x00021260
   1c9b8:	2000a49c 	.word	0x2000a49c
   1c9bc:	2000a480 	.word	0x2000a480

0001c9c0 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1c9c0:	b570      	push	{r4, r5, r6, lr}
   1c9c2:	b086      	sub	sp, #24
   1c9c4:	4605      	mov	r5, r0
   1c9c6:	460e      	mov	r6, r1
   1c9c8:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1c9ca:	2300      	movs	r3, #0
   1c9cc:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1c9ce:	f000 f9ad 	bl	1cd2c <mfg_init>

    mfg_open(&reader);
   1c9d2:	a801      	add	r0, sp, #4
   1c9d4:	f000 f9c6 	bl	1cd64 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1c9d8:	6823      	ldr	r3, [r4, #0]
   1c9da:	42ab      	cmp	r3, r5
   1c9dc:	da29      	bge.n	1ca32 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1c9de:	2102      	movs	r1, #2
   1c9e0:	a801      	add	r0, sp, #4
   1c9e2:	f000 f98c 	bl	1ccfe <mfg_seek_next_with_type>
   1c9e6:	4603      	mov	r3, r0
        switch (rc) {
   1c9e8:	f110 0f0f 	cmn.w	r0, #15
   1c9ec:	d003      	beq.n	1c9f6 <flash_map_read_mfg+0x36>
   1c9ee:	b120      	cbz	r0, 1c9fa <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1c9f0:	4618      	mov	r0, r3
   1c9f2:	b006      	add	sp, #24
   1c9f4:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1c9f6:	2300      	movs	r3, #0
   1c9f8:	e7fa      	b.n	1c9f0 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1c9fa:	a903      	add	r1, sp, #12
   1c9fc:	a801      	add	r0, sp, #4
   1c9fe:	f000 f98b 	bl	1cd18 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1ca02:	4603      	mov	r3, r0
   1ca04:	2800      	cmp	r0, #0
   1ca06:	d1f3      	bne.n	1c9f0 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1ca08:	6823      	ldr	r3, [r4, #0]
   1ca0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ca0e:	009a      	lsls	r2, r3, #2
   1ca10:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1ca12:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1ca16:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1ca18:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1ca1c:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1ca1e:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1ca22:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1ca24:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1ca28:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1ca2a:	6823      	ldr	r3, [r4, #0]
   1ca2c:	3301      	adds	r3, #1
   1ca2e:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1ca30:	e7d2      	b.n	1c9d8 <flash_map_read_mfg+0x18>
            return -1;
   1ca32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ca36:	e7db      	b.n	1c9f0 <flash_map_read_mfg+0x30>

0001ca38 <flash_area_open>:
{
   1ca38:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1ca3a:	4b0d      	ldr	r3, [pc, #52]	; (1ca70 <flash_area_open+0x38>)
   1ca3c:	681d      	ldr	r5, [r3, #0]
   1ca3e:	b1a5      	cbz	r5, 1ca6a <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1ca40:	2300      	movs	r3, #0
   1ca42:	4a0c      	ldr	r2, [pc, #48]	; (1ca74 <flash_area_open+0x3c>)
   1ca44:	6812      	ldr	r2, [r2, #0]
   1ca46:	429a      	cmp	r2, r3
   1ca48:	dd0b      	ble.n	1ca62 <flash_area_open+0x2a>
        area = flash_map + i;
   1ca4a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1ca4e:	00a2      	lsls	r2, r4, #2
   1ca50:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1ca52:	5caa      	ldrb	r2, [r5, r2]
   1ca54:	4282      	cmp	r2, r0
   1ca56:	d001      	beq.n	1ca5c <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1ca58:	3301      	adds	r3, #1
   1ca5a:	e7f2      	b.n	1ca42 <flash_area_open+0xa>
            *fap = area;
   1ca5c:	600c      	str	r4, [r1, #0]
            return 0;
   1ca5e:	2000      	movs	r0, #0
   1ca60:	e001      	b.n	1ca66 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1ca62:	f06f 0003 	mvn.w	r0, #3
}
   1ca66:	bc30      	pop	{r4, r5}
   1ca68:	4770      	bx	lr
        return SYS_EACCES;
   1ca6a:	f06f 0006 	mvn.w	r0, #6
   1ca6e:	e7fa      	b.n	1ca66 <flash_area_open+0x2e>
   1ca70:	2000a734 	.word	0x2000a734
   1ca74:	2000a730 	.word	0x2000a730

0001ca78 <flash_area_read>:
{
   1ca78:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1ca7a:	6884      	ldr	r4, [r0, #8]
   1ca7c:	428c      	cmp	r4, r1
   1ca7e:	d308      	bcc.n	1ca92 <flash_area_read+0x1a>
   1ca80:	18cd      	adds	r5, r1, r3
   1ca82:	42ac      	cmp	r4, r5
   1ca84:	d308      	bcc.n	1ca98 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1ca86:	6844      	ldr	r4, [r0, #4]
   1ca88:	4421      	add	r1, r4
   1ca8a:	7840      	ldrb	r0, [r0, #1]
   1ca8c:	f000 f9c8 	bl	1ce20 <hal_flash_read>
}
   1ca90:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1ca92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ca96:	e7fb      	b.n	1ca90 <flash_area_read+0x18>
   1ca98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ca9c:	e7f8      	b.n	1ca90 <flash_area_read+0x18>
	...

0001caa0 <flash_map_init>:

void
flash_map_init(void)
{
   1caa0:	b510      	push	{r4, lr}
   1caa2:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1caa4:	4b14      	ldr	r3, [pc, #80]	; (1caf8 <flash_map_init+0x58>)
   1caa6:	781b      	ldrb	r3, [r3, #0]
   1caa8:	b303      	cbz	r3, 1caec <flash_map_init+0x4c>

    rc = hal_flash_init();
   1caaa:	f000 f9a5 	bl	1cdf8 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1caae:	b138      	cbz	r0, 1cac0 <flash_map_init+0x20>
   1cab0:	2000      	movs	r0, #0
   1cab2:	9000      	str	r0, [sp, #0]
   1cab4:	4b11      	ldr	r3, [pc, #68]	; (1cafc <flash_map_init+0x5c>)
   1cab6:	681c      	ldr	r4, [r3, #0]
   1cab8:	4603      	mov	r3, r0
   1caba:	4602      	mov	r2, r0
   1cabc:	4601      	mov	r1, r0
   1cabe:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1cac0:	4b0f      	ldr	r3, [pc, #60]	; (1cb00 <flash_map_init+0x60>)
   1cac2:	4a10      	ldr	r2, [pc, #64]	; (1cb04 <flash_map_init+0x64>)
   1cac4:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1cac6:	4b10      	ldr	r3, [pc, #64]	; (1cb08 <flash_map_init+0x68>)
   1cac8:	2206      	movs	r2, #6
   1caca:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1cacc:	aa03      	add	r2, sp, #12
   1cace:	490f      	ldr	r1, [pc, #60]	; (1cb0c <flash_map_init+0x6c>)
   1cad0:	200a      	movs	r0, #10
   1cad2:	f7ff ff75 	bl	1c9c0 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1cad6:	b938      	cbnz	r0, 1cae8 <flash_map_init+0x48>
   1cad8:	9b03      	ldr	r3, [sp, #12]
   1cada:	2b00      	cmp	r3, #0
   1cadc:	dd04      	ble.n	1cae8 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1cade:	4a08      	ldr	r2, [pc, #32]	; (1cb00 <flash_map_init+0x60>)
   1cae0:	490a      	ldr	r1, [pc, #40]	; (1cb0c <flash_map_init+0x6c>)
   1cae2:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1cae4:	4a08      	ldr	r2, [pc, #32]	; (1cb08 <flash_map_init+0x68>)
   1cae6:	6013      	str	r3, [r2, #0]
    }
}
   1cae8:	b004      	add	sp, #16
   1caea:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1caec:	461a      	mov	r2, r3
   1caee:	4619      	mov	r1, r3
   1caf0:	4618      	mov	r0, r3
   1caf2:	f7fc fee3 	bl	198bc <__assert_func>
   1caf6:	bf00      	nop
   1caf8:	2000a56c 	.word	0x2000a56c
   1cafc:	20000104 	.word	0x20000104
   1cb00:	2000a734 	.word	0x2000a734
   1cb04:	0002126c 	.word	0x0002126c
   1cb08:	2000a730 	.word	0x2000a730
   1cb0c:	2000a4cc 	.word	0x2000a4cc

0001cb10 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1cb10:	4770      	bx	lr
	...

0001cb14 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1cb14:	b530      	push	{r4, r5, lr}
   1cb16:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1cb18:	7885      	ldrb	r5, [r0, #2]
   1cb1a:	4b21      	ldr	r3, [pc, #132]	; (1cba0 <mfg_seek_next_aux+0x8c>)
   1cb1c:	681b      	ldr	r3, [r3, #0]
   1cb1e:	429d      	cmp	r5, r3
   1cb20:	da32      	bge.n	1cb88 <mfg_seek_next_aux+0x74>
   1cb22:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1cb24:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1cb28:	0093      	lsls	r3, r2, #2
   1cb2a:	a901      	add	r1, sp, #4
   1cb2c:	4a1d      	ldr	r2, [pc, #116]	; (1cba4 <mfg_seek_next_aux+0x90>)
   1cb2e:	5cd0      	ldrb	r0, [r2, r3]
   1cb30:	f7ff ff82 	bl	1ca38 <flash_area_open>
    if (rc != 0) {
   1cb34:	bb58      	cbnz	r0, 1cb8e <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1cb36:	6862      	ldr	r2, [r4, #4]
   1cb38:	b9c2      	cbnz	r2, 1cb6c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1cb3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cb3e:	00aa      	lsls	r2, r5, #2
   1cb40:	4b18      	ldr	r3, [pc, #96]	; (1cba4 <mfg_seek_next_aux+0x90>)
   1cb42:	4413      	add	r3, r2
   1cb44:	685b      	ldr	r3, [r3, #4]
   1cb46:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1cb48:	6861      	ldr	r1, [r4, #4]
   1cb4a:	9801      	ldr	r0, [sp, #4]
   1cb4c:	6883      	ldr	r3, [r0, #8]
   1cb4e:	3b08      	subs	r3, #8
   1cb50:	4299      	cmp	r1, r3
   1cb52:	d310      	bcc.n	1cb76 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1cb54:	78a3      	ldrb	r3, [r4, #2]
   1cb56:	1c59      	adds	r1, r3, #1
   1cb58:	4a11      	ldr	r2, [pc, #68]	; (1cba0 <mfg_seek_next_aux+0x8c>)
   1cb5a:	6812      	ldr	r2, [r2, #0]
   1cb5c:	4291      	cmp	r1, r2
   1cb5e:	da19      	bge.n	1cb94 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1cb60:	2200      	movs	r2, #0
   1cb62:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1cb64:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1cb66:	f06f 0305 	mvn.w	r3, #5
   1cb6a:	e015      	b.n	1cb98 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1cb6c:	7863      	ldrb	r3, [r4, #1]
   1cb6e:	4413      	add	r3, r2
   1cb70:	3302      	adds	r3, #2
   1cb72:	6063      	str	r3, [r4, #4]
   1cb74:	e7e8      	b.n	1cb48 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1cb76:	2302      	movs	r3, #2
   1cb78:	4622      	mov	r2, r4
   1cb7a:	f7ff ff7d 	bl	1ca78 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1cb7e:	4603      	mov	r3, r0
   1cb80:	b150      	cbz	r0, 1cb98 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1cb82:	f06f 0304 	mvn.w	r3, #4
   1cb86:	e007      	b.n	1cb98 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1cb88:	f06f 0301 	mvn.w	r3, #1
   1cb8c:	e004      	b.n	1cb98 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1cb8e:	f06f 0304 	mvn.w	r3, #4
   1cb92:	e001      	b.n	1cb98 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1cb94:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1cb98:	4618      	mov	r0, r3
   1cb9a:	b003      	add	sp, #12
   1cb9c:	bd30      	pop	{r4, r5, pc}
   1cb9e:	bf00      	nop
   1cba0:	2000a560 	.word	0x2000a560
   1cba4:	2000a548 	.word	0x2000a548

0001cba8 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1cba8:	b530      	push	{r4, r5, lr}
   1cbaa:	b085      	sub	sp, #20
   1cbac:	4605      	mov	r5, r0
   1cbae:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1cbb0:	a903      	add	r1, sp, #12
   1cbb2:	f7ff ff41 	bl	1ca38 <flash_area_open>
    if (rc != 0) {
   1cbb6:	b9e8      	cbnz	r0, 1cbf4 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1cbb8:	9803      	ldr	r0, [sp, #12]
   1cbba:	6881      	ldr	r1, [r0, #8]
   1cbbc:	2308      	movs	r3, #8
   1cbbe:	aa01      	add	r2, sp, #4
   1cbc0:	3908      	subs	r1, #8
   1cbc2:	f7ff ff59 	bl	1ca78 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1cbc6:	4601      	mov	r1, r0
   1cbc8:	b9b8      	cbnz	r0, 1cbfa <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1cbca:	9a02      	ldr	r2, [sp, #8]
   1cbcc:	4b11      	ldr	r3, [pc, #68]	; (1cc14 <mfg_read_mmr+0x6c>)
   1cbce:	429a      	cmp	r2, r3
   1cbd0:	d116      	bne.n	1cc00 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1cbd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1cbd6:	2b02      	cmp	r3, #2
   1cbd8:	d115      	bne.n	1cc06 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1cbda:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cbde:	9b03      	ldr	r3, [sp, #12]
   1cbe0:	689b      	ldr	r3, [r3, #8]
   1cbe2:	429a      	cmp	r2, r3
   1cbe4:	d812      	bhi.n	1cc0c <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1cbe6:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1cbe8:	7025      	strb	r5, [r4, #0]
   1cbea:	6063      	str	r3, [r4, #4]
   1cbec:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1cbee:	4608      	mov	r0, r1
   1cbf0:	b005      	add	sp, #20
   1cbf2:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1cbf4:	f06f 0104 	mvn.w	r1, #4
   1cbf8:	e7f9      	b.n	1cbee <mfg_read_mmr+0x46>
        return SYS_EIO;
   1cbfa:	f06f 0104 	mvn.w	r1, #4
   1cbfe:	e7f6      	b.n	1cbee <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cc00:	f06f 0108 	mvn.w	r1, #8
   1cc04:	e7f3      	b.n	1cbee <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1cc06:	f06f 010b 	mvn.w	r1, #11
   1cc0a:	e7f0      	b.n	1cbee <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cc0c:	f06f 0108 	mvn.w	r1, #8
   1cc10:	e7ed      	b.n	1cbee <mfg_read_mmr+0x46>
   1cc12:	bf00      	nop
   1cc14:	3bb2a269 	.word	0x3bb2a269

0001cc18 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1cc18:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cc1a:	2300      	movs	r3, #0
   1cc1c:	4a11      	ldr	r2, [pc, #68]	; (1cc64 <mfg_read_next_mmr+0x4c>)
   1cc1e:	6812      	ldr	r2, [r2, #0]
   1cc20:	429a      	cmp	r2, r3
   1cc22:	dd08      	ble.n	1cc36 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1cc24:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1cc28:	008a      	lsls	r2, r1, #2
   1cc2a:	490f      	ldr	r1, [pc, #60]	; (1cc68 <mfg_read_next_mmr+0x50>)
   1cc2c:	5c8a      	ldrb	r2, [r1, r2]
   1cc2e:	4282      	cmp	r2, r0
   1cc30:	d011      	beq.n	1cc56 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cc32:	3301      	adds	r3, #1
   1cc34:	e7f2      	b.n	1cc1c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1cc36:	2a01      	cmp	r2, #1
   1cc38:	dc11      	bgt.n	1cc5e <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1cc3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1cc3e:	0093      	lsls	r3, r2, #2
   1cc40:	4909      	ldr	r1, [pc, #36]	; (1cc68 <mfg_read_next_mmr+0x50>)
   1cc42:	4419      	add	r1, r3
   1cc44:	f7ff ffb0 	bl	1cba8 <mfg_read_mmr>
    if (rc != 0) {
   1cc48:	4603      	mov	r3, r0
   1cc4a:	b930      	cbnz	r0, 1cc5a <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1cc4c:	4905      	ldr	r1, [pc, #20]	; (1cc64 <mfg_read_next_mmr+0x4c>)
   1cc4e:	680a      	ldr	r2, [r1, #0]
   1cc50:	3201      	adds	r2, #1
   1cc52:	600a      	str	r2, [r1, #0]
    return 0;
   1cc54:	e001      	b.n	1cc5a <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1cc56:	f06f 030a 	mvn.w	r3, #10
}
   1cc5a:	4618      	mov	r0, r3
   1cc5c:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1cc5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cc62:	e7fa      	b.n	1cc5a <mfg_read_next_mmr+0x42>
   1cc64:	2000a560 	.word	0x2000a560
   1cc68:	2000a548 	.word	0x2000a548

0001cc6c <mfg_open_flash_area>:
{
   1cc6c:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cc6e:	7883      	ldrb	r3, [r0, #2]
   1cc70:	4a0b      	ldr	r2, [pc, #44]	; (1cca0 <mfg_open_flash_area+0x34>)
   1cc72:	6812      	ldr	r2, [r2, #0]
   1cc74:	4293      	cmp	r3, r2
   1cc76:	da0a      	bge.n	1cc8e <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1cc78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cc7c:	009a      	lsls	r2, r3, #2
   1cc7e:	4b09      	ldr	r3, [pc, #36]	; (1cca4 <mfg_open_flash_area+0x38>)
   1cc80:	5c98      	ldrb	r0, [r3, r2]
   1cc82:	f7ff fed9 	bl	1ca38 <flash_area_open>
    if (rc != 0) {
   1cc86:	4603      	mov	r3, r0
   1cc88:	b938      	cbnz	r0, 1cc9a <mfg_open_flash_area+0x2e>
}
   1cc8a:	4618      	mov	r0, r3
   1cc8c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cc8e:	2300      	movs	r3, #0
   1cc90:	461a      	mov	r2, r3
   1cc92:	4619      	mov	r1, r3
   1cc94:	4618      	mov	r0, r3
   1cc96:	f7fc fe11 	bl	198bc <__assert_func>
        return SYS_EIO;
   1cc9a:	f06f 0304 	mvn.w	r3, #4
   1cc9e:	e7f4      	b.n	1cc8a <mfg_open_flash_area+0x1e>
   1cca0:	2000a560 	.word	0x2000a560
   1cca4:	2000a548 	.word	0x2000a548

0001cca8 <mfg_read_tlv_body>:
{
   1cca8:	b570      	push	{r4, r5, r6, lr}
   1ccaa:	b082      	sub	sp, #8
   1ccac:	4606      	mov	r6, r0
   1ccae:	460c      	mov	r4, r1
   1ccb0:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1ccb2:	a901      	add	r1, sp, #4
   1ccb4:	f7ff ffda 	bl	1cc6c <mfg_open_flash_area>
    if (rc != 0) {
   1ccb8:	4603      	mov	r3, r0
   1ccba:	b110      	cbz	r0, 1ccc2 <mfg_read_tlv_body+0x1a>
}
   1ccbc:	4618      	mov	r0, r3
   1ccbe:	b002      	add	sp, #8
   1ccc0:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1ccc2:	462a      	mov	r2, r5
   1ccc4:	2100      	movs	r1, #0
   1ccc6:	4620      	mov	r0, r4
   1ccc8:	f7fe f9fb 	bl	1b0c2 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1cccc:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1ccce:	6871      	ldr	r1, [r6, #4]
   1ccd0:	42ab      	cmp	r3, r5
   1ccd2:	bfa8      	it	ge
   1ccd4:	462b      	movge	r3, r5
   1ccd6:	4622      	mov	r2, r4
   1ccd8:	3102      	adds	r1, #2
   1ccda:	9801      	ldr	r0, [sp, #4]
   1ccdc:	f7ff fecc 	bl	1ca78 <flash_area_read>
    if (rc != 0) {
   1cce0:	4603      	mov	r3, r0
   1cce2:	2800      	cmp	r0, #0
   1cce4:	d0ea      	beq.n	1ccbc <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1cce6:	f06f 0304 	mvn.w	r3, #4
   1ccea:	e7e7      	b.n	1ccbc <mfg_read_tlv_body+0x14>

0001ccec <mfg_seek_next>:
{
   1ccec:	b510      	push	{r4, lr}
   1ccee:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1ccf0:	4620      	mov	r0, r4
   1ccf2:	f7ff ff0f 	bl	1cb14 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1ccf6:	f110 0f06 	cmn.w	r0, #6
   1ccfa:	d0f9      	beq.n	1ccf0 <mfg_seek_next+0x4>
}
   1ccfc:	bd10      	pop	{r4, pc}

0001ccfe <mfg_seek_next_with_type>:
{
   1ccfe:	b538      	push	{r3, r4, r5, lr}
   1cd00:	4604      	mov	r4, r0
   1cd02:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1cd04:	4620      	mov	r0, r4
   1cd06:	f7ff fff1 	bl	1ccec <mfg_seek_next>
        if (rc != 0) {
   1cd0a:	4602      	mov	r2, r0
   1cd0c:	b910      	cbnz	r0, 1cd14 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1cd0e:	7823      	ldrb	r3, [r4, #0]
   1cd10:	42ab      	cmp	r3, r5
   1cd12:	d1f7      	bne.n	1cd04 <mfg_seek_next_with_type+0x6>
}
   1cd14:	4610      	mov	r0, r2
   1cd16:	bd38      	pop	{r3, r4, r5, pc}

0001cd18 <mfg_read_tlv_flash_area>:
{
   1cd18:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1cd1a:	220a      	movs	r2, #10
   1cd1c:	f7ff ffc4 	bl	1cca8 <mfg_read_tlv_body>
}
   1cd20:	bd08      	pop	{r3, pc}

0001cd22 <mfg_read_tlv_mmr_ref>:
{
   1cd22:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1cd24:	2201      	movs	r2, #1
   1cd26:	f7ff ffbf 	bl	1cca8 <mfg_read_tlv_body>
}
   1cd2a:	bd08      	pop	{r3, pc}

0001cd2c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1cd2c:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1cd2e:	4b0b      	ldr	r3, [pc, #44]	; (1cd5c <mfg_init+0x30>)
   1cd30:	781b      	ldrb	r3, [r3, #0]
   1cd32:	b94b      	cbnz	r3, 1cd48 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1cd34:	4b09      	ldr	r3, [pc, #36]	; (1cd5c <mfg_init+0x30>)
   1cd36:	2201      	movs	r2, #1
   1cd38:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cd3a:	4b09      	ldr	r3, [pc, #36]	; (1cd60 <mfg_init+0x34>)
   1cd3c:	781b      	ldrb	r3, [r3, #0]
   1cd3e:	b123      	cbz	r3, 1cd4a <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1cd40:	2000      	movs	r0, #0
   1cd42:	f7ff ff69 	bl	1cc18 <mfg_read_next_mmr>
    if (rc != 0) {
   1cd46:	b128      	cbz	r0, 1cd54 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1cd48:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cd4a:	461a      	mov	r2, r3
   1cd4c:	4619      	mov	r1, r3
   1cd4e:	4618      	mov	r0, r3
   1cd50:	f7fc fdb4 	bl	198bc <__assert_func>
    rc = mfg_read_mmr_refs();
   1cd54:	f000 f80e 	bl	1cd74 <mfg_read_mmr_refs>
err:
   1cd58:	e7f6      	b.n	1cd48 <mfg_init+0x1c>
   1cd5a:	bf00      	nop
   1cd5c:	2000a544 	.word	0x2000a544
   1cd60:	2000a56c 	.word	0x2000a56c

0001cd64 <mfg_open>:
{
   1cd64:	b510      	push	{r4, lr}
   1cd66:	4604      	mov	r4, r0
    mfg_init();
   1cd68:	f7ff ffe0 	bl	1cd2c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1cd6c:	2300      	movs	r3, #0
   1cd6e:	6023      	str	r3, [r4, #0]
   1cd70:	6063      	str	r3, [r4, #4]
}
   1cd72:	bd10      	pop	{r4, pc}

0001cd74 <mfg_read_mmr_refs>:
{
   1cd74:	b500      	push	{lr}
   1cd76:	b085      	sub	sp, #20
    mfg_open(&reader);
   1cd78:	a801      	add	r0, sp, #4
   1cd7a:	f7ff fff3 	bl	1cd64 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1cd7e:	2104      	movs	r1, #4
   1cd80:	eb0d 0001 	add.w	r0, sp, r1
   1cd84:	f7ff ffbb 	bl	1ccfe <mfg_seek_next_with_type>
   1cd88:	4603      	mov	r3, r0
        switch (rc) {
   1cd8a:	f110 0f0f 	cmn.w	r0, #15
   1cd8e:	d004      	beq.n	1cd9a <mfg_read_mmr_refs+0x26>
   1cd90:	b128      	cbz	r0, 1cd9e <mfg_read_mmr_refs+0x2a>
}
   1cd92:	4618      	mov	r0, r3
   1cd94:	b005      	add	sp, #20
   1cd96:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1cd9a:	2300      	movs	r3, #0
   1cd9c:	e7f9      	b.n	1cd92 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1cd9e:	a903      	add	r1, sp, #12
   1cda0:	a801      	add	r0, sp, #4
   1cda2:	f7ff ffbe 	bl	1cd22 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1cda6:	4603      	mov	r3, r0
   1cda8:	2800      	cmp	r0, #0
   1cdaa:	d1f2      	bne.n	1cd92 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1cdac:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1cdb0:	f7ff ff32 	bl	1cc18 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1cdb4:	4603      	mov	r3, r0
   1cdb6:	2800      	cmp	r0, #0
   1cdb8:	d0e1      	beq.n	1cd7e <mfg_read_mmr_refs+0xa>
   1cdba:	f110 0f0b 	cmn.w	r0, #11
   1cdbe:	d0de      	beq.n	1cd7e <mfg_read_mmr_refs+0xa>
   1cdc0:	e7e7      	b.n	1cd92 <mfg_read_mmr_refs+0x1e>
	...

0001cdc4 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1cdc4:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1cdc6:	4803      	ldr	r0, [pc, #12]	; (1cdd4 <__wrap_coap_receive+0x10>)
   1cdc8:	f7fb feb0 	bl	18b2c <console_printf>
    return -1;
}
   1cdcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cdd0:	bd08      	pop	{r3, pc}
   1cdd2:	bf00      	nop
   1cdd4:	000212b4 	.word	0x000212b4

0001cdd8 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1cdd8:	4770      	bx	lr

0001cdda <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1cdda:	6843      	ldr	r3, [r0, #4]
   1cddc:	428b      	cmp	r3, r1
   1cdde:	d808      	bhi.n	1cdf2 <hal_flash_check_addr+0x18>
   1cde0:	6882      	ldr	r2, [r0, #8]
   1cde2:	4413      	add	r3, r2
   1cde4:	428b      	cmp	r3, r1
   1cde6:	d301      	bcc.n	1cdec <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1cde8:	2000      	movs	r0, #0
}
   1cdea:	4770      	bx	lr
        return SYS_EINVAL;
   1cdec:	f06f 0001 	mvn.w	r0, #1
   1cdf0:	4770      	bx	lr
   1cdf2:	f06f 0001 	mvn.w	r0, #1
   1cdf6:	4770      	bx	lr

0001cdf8 <hal_flash_init>:
{
   1cdf8:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1cdfa:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1cdfc:	462c      	mov	r4, r5
   1cdfe:	e001      	b.n	1ce04 <hal_flash_init+0xc>
   1ce00:	3401      	adds	r4, #1
   1ce02:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1ce04:	4620      	mov	r0, r4
   1ce06:	f7fe fce3 	bl	1b7d0 <hal_bsp_flash_dev>
        if (!hf) {
   1ce0a:	b138      	cbz	r0, 1ce1c <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1ce0c:	6802      	ldr	r2, [r0, #0]
   1ce0e:	6952      	ldr	r2, [r2, #20]
   1ce10:	4790      	blx	r2
   1ce12:	2800      	cmp	r0, #0
   1ce14:	d0f4      	beq.n	1ce00 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1ce16:	f06f 0504 	mvn.w	r5, #4
   1ce1a:	e7f1      	b.n	1ce00 <hal_flash_init+0x8>
}
   1ce1c:	4628      	mov	r0, r5
   1ce1e:	bd38      	pop	{r3, r4, r5, pc}

0001ce20 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1ce20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce24:	460d      	mov	r5, r1
   1ce26:	4690      	mov	r8, r2
   1ce28:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1ce2a:	f7fe fcd1 	bl	1b7d0 <hal_bsp_flash_dev>
    if (!hf) {
   1ce2e:	b1c0      	cbz	r0, 1ce62 <hal_flash_read+0x42>
   1ce30:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1ce32:	4629      	mov	r1, r5
   1ce34:	f7ff ffd1 	bl	1cdda <hal_flash_check_addr>
   1ce38:	b9b0      	cbnz	r0, 1ce68 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1ce3a:	19a9      	adds	r1, r5, r6
   1ce3c:	4620      	mov	r0, r4
   1ce3e:	f7ff ffcc 	bl	1cdda <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1ce42:	b9a0      	cbnz	r0, 1ce6e <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1ce44:	6823      	ldr	r3, [r4, #0]
   1ce46:	681f      	ldr	r7, [r3, #0]
   1ce48:	4633      	mov	r3, r6
   1ce4a:	4642      	mov	r2, r8
   1ce4c:	4629      	mov	r1, r5
   1ce4e:	4620      	mov	r0, r4
   1ce50:	47b8      	blx	r7
    if (rc != 0) {
   1ce52:	4603      	mov	r3, r0
   1ce54:	b910      	cbnz	r0, 1ce5c <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1ce56:	4618      	mov	r0, r3
   1ce58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1ce5c:	f06f 0304 	mvn.w	r3, #4
   1ce60:	e7f9      	b.n	1ce56 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ce62:	f06f 0301 	mvn.w	r3, #1
   1ce66:	e7f6      	b.n	1ce56 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ce68:	f06f 0301 	mvn.w	r3, #1
   1ce6c:	e7f3      	b.n	1ce56 <hal_flash_read+0x36>
   1ce6e:	f06f 0301 	mvn.w	r3, #1
   1ce72:	e7f0      	b.n	1ce56 <hal_flash_read+0x36>

0001ce74 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1ce74:	2010      	movs	r0, #16
   1ce76:	4770      	bx	lr

0001ce78 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1ce78:	b570      	push	{r4, r5, r6, lr}
   1ce7a:	4606      	mov	r6, r0
   1ce7c:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1ce7e:	460d      	mov	r5, r1
   1ce80:	2908      	cmp	r1, #8
   1ce82:	bf28      	it	cs
   1ce84:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1ce86:	462a      	mov	r2, r5
   1ce88:	4906      	ldr	r1, [pc, #24]	; (1cea4 <hal_bsp_hw_id+0x2c>)
   1ce8a:	f7fe f90d 	bl	1b0a8 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1ce8e:	1b64      	subs	r4, r4, r5
   1ce90:	2c08      	cmp	r4, #8
   1ce92:	bf28      	it	cs
   1ce94:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1ce96:	4622      	mov	r2, r4
   1ce98:	4903      	ldr	r1, [pc, #12]	; (1cea8 <hal_bsp_hw_id+0x30>)
   1ce9a:	1970      	adds	r0, r6, r5
   1ce9c:	f7fe f904 	bl	1b0a8 <memcpy>

    return len + cnt;
}
   1cea0:	1928      	adds	r0, r5, r4
   1cea2:	bd70      	pop	{r4, r5, r6, pc}
   1cea4:	10000060 	.word	0x10000060
   1cea8:	100000a4 	.word	0x100000a4

0001ceac <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1ceac:	b40e      	push	{r1, r2, r3}
   1ceae:	b500      	push	{lr}
   1ceb0:	b082      	sub	sp, #8
   1ceb2:	ab03      	add	r3, sp, #12
   1ceb4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1ceb8:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1ceba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cebe:	f7fe fbef 	bl	1b6a0 <vsnprintf>
	va_end(ap);

	return rv;
}
   1cec2:	b002      	add	sp, #8
   1cec4:	f85d eb04 	ldr.w	lr, [sp], #4
   1cec8:	b003      	add	sp, #12
   1ceca:	4770      	bx	lr

0001cecc <__aeabi_uldivmod>:
   1cecc:	b953      	cbnz	r3, 1cee4 <__aeabi_uldivmod+0x18>
   1cece:	b94a      	cbnz	r2, 1cee4 <__aeabi_uldivmod+0x18>
   1ced0:	2900      	cmp	r1, #0
   1ced2:	bf08      	it	eq
   1ced4:	2800      	cmpeq	r0, #0
   1ced6:	bf1c      	itt	ne
   1ced8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1cedc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1cee0:	f000 b972 	b.w	1d1c8 <__aeabi_idiv0>
   1cee4:	f1ad 0c08 	sub.w	ip, sp, #8
   1cee8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ceec:	f000 f806 	bl	1cefc <__udivmoddi4>
   1cef0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cef8:	b004      	add	sp, #16
   1cefa:	4770      	bx	lr

0001cefc <__udivmoddi4>:
   1cefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf00:	9e08      	ldr	r6, [sp, #32]
   1cf02:	4604      	mov	r4, r0
   1cf04:	4688      	mov	r8, r1
   1cf06:	2b00      	cmp	r3, #0
   1cf08:	d14b      	bne.n	1cfa2 <__udivmoddi4+0xa6>
   1cf0a:	428a      	cmp	r2, r1
   1cf0c:	4615      	mov	r5, r2
   1cf0e:	d967      	bls.n	1cfe0 <__udivmoddi4+0xe4>
   1cf10:	fab2 f282 	clz	r2, r2
   1cf14:	b14a      	cbz	r2, 1cf2a <__udivmoddi4+0x2e>
   1cf16:	f1c2 0720 	rsb	r7, r2, #32
   1cf1a:	fa01 f302 	lsl.w	r3, r1, r2
   1cf1e:	fa20 f707 	lsr.w	r7, r0, r7
   1cf22:	4095      	lsls	r5, r2
   1cf24:	ea47 0803 	orr.w	r8, r7, r3
   1cf28:	4094      	lsls	r4, r2
   1cf2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cf2e:	0c23      	lsrs	r3, r4, #16
   1cf30:	fbb8 f7fe 	udiv	r7, r8, lr
   1cf34:	fa1f fc85 	uxth.w	ip, r5
   1cf38:	fb0e 8817 	mls	r8, lr, r7, r8
   1cf3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1cf40:	fb07 f10c 	mul.w	r1, r7, ip
   1cf44:	4299      	cmp	r1, r3
   1cf46:	d909      	bls.n	1cf5c <__udivmoddi4+0x60>
   1cf48:	18eb      	adds	r3, r5, r3
   1cf4a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1cf4e:	f080 811b 	bcs.w	1d188 <__udivmoddi4+0x28c>
   1cf52:	4299      	cmp	r1, r3
   1cf54:	f240 8118 	bls.w	1d188 <__udivmoddi4+0x28c>
   1cf58:	3f02      	subs	r7, #2
   1cf5a:	442b      	add	r3, r5
   1cf5c:	1a5b      	subs	r3, r3, r1
   1cf5e:	b2a4      	uxth	r4, r4
   1cf60:	fbb3 f0fe 	udiv	r0, r3, lr
   1cf64:	fb0e 3310 	mls	r3, lr, r0, r3
   1cf68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1cf6c:	fb00 fc0c 	mul.w	ip, r0, ip
   1cf70:	45a4      	cmp	ip, r4
   1cf72:	d909      	bls.n	1cf88 <__udivmoddi4+0x8c>
   1cf74:	192c      	adds	r4, r5, r4
   1cf76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1cf7a:	f080 8107 	bcs.w	1d18c <__udivmoddi4+0x290>
   1cf7e:	45a4      	cmp	ip, r4
   1cf80:	f240 8104 	bls.w	1d18c <__udivmoddi4+0x290>
   1cf84:	3802      	subs	r0, #2
   1cf86:	442c      	add	r4, r5
   1cf88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1cf8c:	eba4 040c 	sub.w	r4, r4, ip
   1cf90:	2700      	movs	r7, #0
   1cf92:	b11e      	cbz	r6, 1cf9c <__udivmoddi4+0xa0>
   1cf94:	40d4      	lsrs	r4, r2
   1cf96:	2300      	movs	r3, #0
   1cf98:	e9c6 4300 	strd	r4, r3, [r6]
   1cf9c:	4639      	mov	r1, r7
   1cf9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cfa2:	428b      	cmp	r3, r1
   1cfa4:	d909      	bls.n	1cfba <__udivmoddi4+0xbe>
   1cfa6:	2e00      	cmp	r6, #0
   1cfa8:	f000 80eb 	beq.w	1d182 <__udivmoddi4+0x286>
   1cfac:	2700      	movs	r7, #0
   1cfae:	e9c6 0100 	strd	r0, r1, [r6]
   1cfb2:	4638      	mov	r0, r7
   1cfb4:	4639      	mov	r1, r7
   1cfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cfba:	fab3 f783 	clz	r7, r3
   1cfbe:	2f00      	cmp	r7, #0
   1cfc0:	d147      	bne.n	1d052 <__udivmoddi4+0x156>
   1cfc2:	428b      	cmp	r3, r1
   1cfc4:	d302      	bcc.n	1cfcc <__udivmoddi4+0xd0>
   1cfc6:	4282      	cmp	r2, r0
   1cfc8:	f200 80fa 	bhi.w	1d1c0 <__udivmoddi4+0x2c4>
   1cfcc:	1a84      	subs	r4, r0, r2
   1cfce:	eb61 0303 	sbc.w	r3, r1, r3
   1cfd2:	2001      	movs	r0, #1
   1cfd4:	4698      	mov	r8, r3
   1cfd6:	2e00      	cmp	r6, #0
   1cfd8:	d0e0      	beq.n	1cf9c <__udivmoddi4+0xa0>
   1cfda:	e9c6 4800 	strd	r4, r8, [r6]
   1cfde:	e7dd      	b.n	1cf9c <__udivmoddi4+0xa0>
   1cfe0:	b902      	cbnz	r2, 1cfe4 <__udivmoddi4+0xe8>
   1cfe2:	deff      	udf	#255	; 0xff
   1cfe4:	fab2 f282 	clz	r2, r2
   1cfe8:	2a00      	cmp	r2, #0
   1cfea:	f040 808f 	bne.w	1d10c <__udivmoddi4+0x210>
   1cfee:	1b49      	subs	r1, r1, r5
   1cff0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cff4:	fa1f f885 	uxth.w	r8, r5
   1cff8:	2701      	movs	r7, #1
   1cffa:	fbb1 fcfe 	udiv	ip, r1, lr
   1cffe:	0c23      	lsrs	r3, r4, #16
   1d000:	fb0e 111c 	mls	r1, lr, ip, r1
   1d004:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d008:	fb08 f10c 	mul.w	r1, r8, ip
   1d00c:	4299      	cmp	r1, r3
   1d00e:	d907      	bls.n	1d020 <__udivmoddi4+0x124>
   1d010:	18eb      	adds	r3, r5, r3
   1d012:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1d016:	d202      	bcs.n	1d01e <__udivmoddi4+0x122>
   1d018:	4299      	cmp	r1, r3
   1d01a:	f200 80cd 	bhi.w	1d1b8 <__udivmoddi4+0x2bc>
   1d01e:	4684      	mov	ip, r0
   1d020:	1a59      	subs	r1, r3, r1
   1d022:	b2a3      	uxth	r3, r4
   1d024:	fbb1 f0fe 	udiv	r0, r1, lr
   1d028:	fb0e 1410 	mls	r4, lr, r0, r1
   1d02c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1d030:	fb08 f800 	mul.w	r8, r8, r0
   1d034:	45a0      	cmp	r8, r4
   1d036:	d907      	bls.n	1d048 <__udivmoddi4+0x14c>
   1d038:	192c      	adds	r4, r5, r4
   1d03a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d03e:	d202      	bcs.n	1d046 <__udivmoddi4+0x14a>
   1d040:	45a0      	cmp	r8, r4
   1d042:	f200 80b6 	bhi.w	1d1b2 <__udivmoddi4+0x2b6>
   1d046:	4618      	mov	r0, r3
   1d048:	eba4 0408 	sub.w	r4, r4, r8
   1d04c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d050:	e79f      	b.n	1cf92 <__udivmoddi4+0x96>
   1d052:	f1c7 0c20 	rsb	ip, r7, #32
   1d056:	40bb      	lsls	r3, r7
   1d058:	fa22 fe0c 	lsr.w	lr, r2, ip
   1d05c:	ea4e 0e03 	orr.w	lr, lr, r3
   1d060:	fa01 f407 	lsl.w	r4, r1, r7
   1d064:	fa20 f50c 	lsr.w	r5, r0, ip
   1d068:	fa21 f30c 	lsr.w	r3, r1, ip
   1d06c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1d070:	4325      	orrs	r5, r4
   1d072:	fbb3 f9f8 	udiv	r9, r3, r8
   1d076:	0c2c      	lsrs	r4, r5, #16
   1d078:	fb08 3319 	mls	r3, r8, r9, r3
   1d07c:	fa1f fa8e 	uxth.w	sl, lr
   1d080:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1d084:	fb09 f40a 	mul.w	r4, r9, sl
   1d088:	429c      	cmp	r4, r3
   1d08a:	fa02 f207 	lsl.w	r2, r2, r7
   1d08e:	fa00 f107 	lsl.w	r1, r0, r7
   1d092:	d90b      	bls.n	1d0ac <__udivmoddi4+0x1b0>
   1d094:	eb1e 0303 	adds.w	r3, lr, r3
   1d098:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1d09c:	f080 8087 	bcs.w	1d1ae <__udivmoddi4+0x2b2>
   1d0a0:	429c      	cmp	r4, r3
   1d0a2:	f240 8084 	bls.w	1d1ae <__udivmoddi4+0x2b2>
   1d0a6:	f1a9 0902 	sub.w	r9, r9, #2
   1d0aa:	4473      	add	r3, lr
   1d0ac:	1b1b      	subs	r3, r3, r4
   1d0ae:	b2ad      	uxth	r5, r5
   1d0b0:	fbb3 f0f8 	udiv	r0, r3, r8
   1d0b4:	fb08 3310 	mls	r3, r8, r0, r3
   1d0b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1d0bc:	fb00 fa0a 	mul.w	sl, r0, sl
   1d0c0:	45a2      	cmp	sl, r4
   1d0c2:	d908      	bls.n	1d0d6 <__udivmoddi4+0x1da>
   1d0c4:	eb1e 0404 	adds.w	r4, lr, r4
   1d0c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d0cc:	d26b      	bcs.n	1d1a6 <__udivmoddi4+0x2aa>
   1d0ce:	45a2      	cmp	sl, r4
   1d0d0:	d969      	bls.n	1d1a6 <__udivmoddi4+0x2aa>
   1d0d2:	3802      	subs	r0, #2
   1d0d4:	4474      	add	r4, lr
   1d0d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d0da:	fba0 8902 	umull	r8, r9, r0, r2
   1d0de:	eba4 040a 	sub.w	r4, r4, sl
   1d0e2:	454c      	cmp	r4, r9
   1d0e4:	46c2      	mov	sl, r8
   1d0e6:	464b      	mov	r3, r9
   1d0e8:	d354      	bcc.n	1d194 <__udivmoddi4+0x298>
   1d0ea:	d051      	beq.n	1d190 <__udivmoddi4+0x294>
   1d0ec:	2e00      	cmp	r6, #0
   1d0ee:	d069      	beq.n	1d1c4 <__udivmoddi4+0x2c8>
   1d0f0:	ebb1 050a 	subs.w	r5, r1, sl
   1d0f4:	eb64 0403 	sbc.w	r4, r4, r3
   1d0f8:	fa04 fc0c 	lsl.w	ip, r4, ip
   1d0fc:	40fd      	lsrs	r5, r7
   1d0fe:	40fc      	lsrs	r4, r7
   1d100:	ea4c 0505 	orr.w	r5, ip, r5
   1d104:	e9c6 5400 	strd	r5, r4, [r6]
   1d108:	2700      	movs	r7, #0
   1d10a:	e747      	b.n	1cf9c <__udivmoddi4+0xa0>
   1d10c:	f1c2 0320 	rsb	r3, r2, #32
   1d110:	fa20 f703 	lsr.w	r7, r0, r3
   1d114:	4095      	lsls	r5, r2
   1d116:	fa01 f002 	lsl.w	r0, r1, r2
   1d11a:	fa21 f303 	lsr.w	r3, r1, r3
   1d11e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d122:	4338      	orrs	r0, r7
   1d124:	0c01      	lsrs	r1, r0, #16
   1d126:	fbb3 f7fe 	udiv	r7, r3, lr
   1d12a:	fa1f f885 	uxth.w	r8, r5
   1d12e:	fb0e 3317 	mls	r3, lr, r7, r3
   1d132:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d136:	fb07 f308 	mul.w	r3, r7, r8
   1d13a:	428b      	cmp	r3, r1
   1d13c:	fa04 f402 	lsl.w	r4, r4, r2
   1d140:	d907      	bls.n	1d152 <__udivmoddi4+0x256>
   1d142:	1869      	adds	r1, r5, r1
   1d144:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1d148:	d22f      	bcs.n	1d1aa <__udivmoddi4+0x2ae>
   1d14a:	428b      	cmp	r3, r1
   1d14c:	d92d      	bls.n	1d1aa <__udivmoddi4+0x2ae>
   1d14e:	3f02      	subs	r7, #2
   1d150:	4429      	add	r1, r5
   1d152:	1acb      	subs	r3, r1, r3
   1d154:	b281      	uxth	r1, r0
   1d156:	fbb3 f0fe 	udiv	r0, r3, lr
   1d15a:	fb0e 3310 	mls	r3, lr, r0, r3
   1d15e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d162:	fb00 f308 	mul.w	r3, r0, r8
   1d166:	428b      	cmp	r3, r1
   1d168:	d907      	bls.n	1d17a <__udivmoddi4+0x27e>
   1d16a:	1869      	adds	r1, r5, r1
   1d16c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1d170:	d217      	bcs.n	1d1a2 <__udivmoddi4+0x2a6>
   1d172:	428b      	cmp	r3, r1
   1d174:	d915      	bls.n	1d1a2 <__udivmoddi4+0x2a6>
   1d176:	3802      	subs	r0, #2
   1d178:	4429      	add	r1, r5
   1d17a:	1ac9      	subs	r1, r1, r3
   1d17c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1d180:	e73b      	b.n	1cffa <__udivmoddi4+0xfe>
   1d182:	4637      	mov	r7, r6
   1d184:	4630      	mov	r0, r6
   1d186:	e709      	b.n	1cf9c <__udivmoddi4+0xa0>
   1d188:	4607      	mov	r7, r0
   1d18a:	e6e7      	b.n	1cf5c <__udivmoddi4+0x60>
   1d18c:	4618      	mov	r0, r3
   1d18e:	e6fb      	b.n	1cf88 <__udivmoddi4+0x8c>
   1d190:	4541      	cmp	r1, r8
   1d192:	d2ab      	bcs.n	1d0ec <__udivmoddi4+0x1f0>
   1d194:	ebb8 0a02 	subs.w	sl, r8, r2
   1d198:	eb69 020e 	sbc.w	r2, r9, lr
   1d19c:	3801      	subs	r0, #1
   1d19e:	4613      	mov	r3, r2
   1d1a0:	e7a4      	b.n	1d0ec <__udivmoddi4+0x1f0>
   1d1a2:	4660      	mov	r0, ip
   1d1a4:	e7e9      	b.n	1d17a <__udivmoddi4+0x27e>
   1d1a6:	4618      	mov	r0, r3
   1d1a8:	e795      	b.n	1d0d6 <__udivmoddi4+0x1da>
   1d1aa:	4667      	mov	r7, ip
   1d1ac:	e7d1      	b.n	1d152 <__udivmoddi4+0x256>
   1d1ae:	4681      	mov	r9, r0
   1d1b0:	e77c      	b.n	1d0ac <__udivmoddi4+0x1b0>
   1d1b2:	3802      	subs	r0, #2
   1d1b4:	442c      	add	r4, r5
   1d1b6:	e747      	b.n	1d048 <__udivmoddi4+0x14c>
   1d1b8:	f1ac 0c02 	sub.w	ip, ip, #2
   1d1bc:	442b      	add	r3, r5
   1d1be:	e72f      	b.n	1d020 <__udivmoddi4+0x124>
   1d1c0:	4638      	mov	r0, r7
   1d1c2:	e708      	b.n	1cfd6 <__udivmoddi4+0xda>
   1d1c4:	4637      	mov	r7, r6
   1d1c6:	e6e9      	b.n	1cf9c <__udivmoddi4+0xa0>

0001d1c8 <__aeabi_idiv0>:
   1d1c8:	4770      	bx	lr
   1d1ca:	bf00      	nop

0001d1cc <__aeabi_memclr>:
   1d1cc:	2200      	movs	r2, #0
   1d1ce:	f000 b803 	b.w	1d1d8 <__aeabi_memset>
   1d1d2:	bf00      	nop

0001d1d4 <__aeabi_memcpy>:
   1d1d4:	f7fd bf68 	b.w	1b0a8 <memcpy>

0001d1d8 <__aeabi_memset>:
   1d1d8:	b470      	push	{r4, r5, r6}
   1d1da:	0784      	lsls	r4, r0, #30
   1d1dc:	d046      	beq.n	1d26c <__aeabi_memset+0x94>
   1d1de:	1e4c      	subs	r4, r1, #1
   1d1e0:	2900      	cmp	r1, #0
   1d1e2:	d041      	beq.n	1d268 <__aeabi_memset+0x90>
   1d1e4:	b2d5      	uxtb	r5, r2
   1d1e6:	4603      	mov	r3, r0
   1d1e8:	e002      	b.n	1d1f0 <__aeabi_memset+0x18>
   1d1ea:	1e61      	subs	r1, r4, #1
   1d1ec:	b3e4      	cbz	r4, 1d268 <__aeabi_memset+0x90>
   1d1ee:	460c      	mov	r4, r1
   1d1f0:	f803 5b01 	strb.w	r5, [r3], #1
   1d1f4:	0799      	lsls	r1, r3, #30
   1d1f6:	d1f8      	bne.n	1d1ea <__aeabi_memset+0x12>
   1d1f8:	2c03      	cmp	r4, #3
   1d1fa:	d92e      	bls.n	1d25a <__aeabi_memset+0x82>
   1d1fc:	b2d5      	uxtb	r5, r2
   1d1fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1d202:	2c0f      	cmp	r4, #15
   1d204:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1d208:	d919      	bls.n	1d23e <__aeabi_memset+0x66>
   1d20a:	4626      	mov	r6, r4
   1d20c:	f103 0110 	add.w	r1, r3, #16
   1d210:	3e10      	subs	r6, #16
   1d212:	2e0f      	cmp	r6, #15
   1d214:	f841 5c10 	str.w	r5, [r1, #-16]
   1d218:	f841 5c0c 	str.w	r5, [r1, #-12]
   1d21c:	f841 5c08 	str.w	r5, [r1, #-8]
   1d220:	f841 5c04 	str.w	r5, [r1, #-4]
   1d224:	f101 0110 	add.w	r1, r1, #16
   1d228:	d8f2      	bhi.n	1d210 <__aeabi_memset+0x38>
   1d22a:	f1a4 0110 	sub.w	r1, r4, #16
   1d22e:	f021 010f 	bic.w	r1, r1, #15
   1d232:	f004 040f 	and.w	r4, r4, #15
   1d236:	3110      	adds	r1, #16
   1d238:	2c03      	cmp	r4, #3
   1d23a:	440b      	add	r3, r1
   1d23c:	d90d      	bls.n	1d25a <__aeabi_memset+0x82>
   1d23e:	461e      	mov	r6, r3
   1d240:	4621      	mov	r1, r4
   1d242:	3904      	subs	r1, #4
   1d244:	2903      	cmp	r1, #3
   1d246:	f846 5b04 	str.w	r5, [r6], #4
   1d24a:	d8fa      	bhi.n	1d242 <__aeabi_memset+0x6a>
   1d24c:	1f21      	subs	r1, r4, #4
   1d24e:	f021 0103 	bic.w	r1, r1, #3
   1d252:	3104      	adds	r1, #4
   1d254:	440b      	add	r3, r1
   1d256:	f004 0403 	and.w	r4, r4, #3
   1d25a:	b12c      	cbz	r4, 1d268 <__aeabi_memset+0x90>
   1d25c:	b2d2      	uxtb	r2, r2
   1d25e:	441c      	add	r4, r3
   1d260:	f803 2b01 	strb.w	r2, [r3], #1
   1d264:	42a3      	cmp	r3, r4
   1d266:	d1fb      	bne.n	1d260 <__aeabi_memset+0x88>
   1d268:	bc70      	pop	{r4, r5, r6}
   1d26a:	4770      	bx	lr
   1d26c:	460c      	mov	r4, r1
   1d26e:	4603      	mov	r3, r0
   1d270:	e7c2      	b.n	1d1f8 <__aeabi_memset+0x20>
   1d272:	5344      	.short	0x5344
   1d274:	61662050 	.word	0x61662050
   1d278:	43546c69 	.word	0x43546c69
   1d27c:	61662048 	.word	0x61662048
   1d280:	45476c69 	.word	0x45476c69
   1d284:	61662054 	.word	0x61662054
   1d288:	55526c69 	.word	0x55526c69
   1d28c:	6166204e 	.word	0x6166204e
   1d290:	6c69      	.short	0x6c69
   1d292:	7572      	.short	0x7572
   1d294:	612f7473 	.word	0x612f7473
   1d298:	732f7070 	.word	0x732f7070
   1d29c:	6c2f6372 	.word	0x6c2f6372
   1d2a0:	722e6269 	.word	0x722e6269
   1d2a4:	00000073 	.word	0x00000073
   1d2a8:	0001d292 	.word	0x0001d292
   1d2ac:	00000013 	.word	0x00000013
   1d2b0:	0000005b 	.word	0x0000005b
   1d2b4:	00000005 	.word	0x00000005
   1d2b8:	0001d292 	.word	0x0001d292
   1d2bc:	00000013 	.word	0x00000013
   1d2c0:	00000064 	.word	0x00000064
   1d2c4:	00000005 	.word	0x00000005
   1d2c8:	50494843 	.word	0x50494843
   1d2cc:	61662038 	.word	0x61662038
   1d2d0:	00006c69 	.word	0x00006c69
   1d2d4:	0001d292 	.word	0x0001d292
   1d2d8:	00000013 	.word	0x00000013
   1d2dc:	00000076 	.word	0x00000076
   1d2e0:	00000005 	.word	0x00000005
   1d2e4:	0001d292 	.word	0x0001d292
   1d2e8:	00000013 	.word	0x00000013
   1d2ec:	0000007c 	.word	0x0000007c
   1d2f0:	0000000d 	.word	0x0000000d
   1d2f4:	0001d292 	.word	0x0001d292
   1d2f8:	00000013 	.word	0x00000013
   1d2fc:	0000007b 	.word	0x0000007b
   1d300:	00000009 	.word	0x00000009
   1d304:	696e6170 	.word	0x696e6170
   1d308:	2063      	.short	0x2063
   1d30a:	6f6e      	.short	0x6f6e
   1d30c:	636f6c20 	.word	0x636f6c20
   1d310:	0a          	.byte	0x0a
   1d311:	61          	.byte	0x61
   1d312:	2074      	.short	0x2074
   1d314:	6e696c20 	.word	0x6e696c20
   1d318:	2065      	.short	0x2065
   1d31a:	000a      	.short	0x000a
   1d31c:	0001d292 	.word	0x0001d292
   1d320:	00000013 	.word	0x00000013
   1d324:	00000094 	.word	0x00000094
   1d328:	00000014 	.word	0x00000014
   1d32c:	74737552 	.word	0x74737552
   1d330:	756f7420 	.word	0x756f7420
   1d334:	73206863 	.word	0x73206863
   1d338:	6f736e65 	.word	0x6f736e65
   1d33c:	00000a72 	.word	0x00000a72
   1d340:	00000000 	.word	0x00000000
   1d344:	0001d340 	.word	0x0001d340
   1d348:	65737361 	.word	0x65737361
   1d34c:	6f697472 	.word	0x6f697472
   1d350:	6166206e 	.word	0x6166206e
   1d354:	64656c69 	.word	0x64656c69
   1d358:	2860203a 	.word	0x2860203a
   1d35c:	7466656c 	.word	0x7466656c
   1d360:	203d3d20 	.word	0x203d3d20
   1d364:	68676972 	.word	0x68676972
   1d368:	0a602974 	.word	0x0a602974
   1d36c:	656c2020 	.word	0x656c2020
   1d370:	203a7466 	.word	0x203a7466
   1d374:	60          	.byte	0x60
   1d375:	60          	.byte	0x60
   1d376:	0a2c      	.short	0x0a2c
   1d378:	67697220 	.word	0x67697220
   1d37c:	203a7468 	.word	0x203a7468
   1d380:	60          	.byte	0x60
   1d381:	60          	.byte	0x60
   1d382:	203a      	.short	0x203a
   1d384:	0001d348 	.word	0x0001d348
   1d388:	0000002d 	.word	0x0000002d
   1d38c:	0001d375 	.word	0x0001d375
   1d390:	0000000c 	.word	0x0000000c
   1d394:	0001d381 	.word	0x0001d381
   1d398:	00000003 	.word	0x00000003
   1d39c:	0001d384 	.word	0x0001d384
   1d3a0:	20515249 	.word	0x20515249
   1d3a4:	74696e69 	.word	0x74696e69
   1d3a8:	69616620 	.word	0x69616620
   1d3ac:	0000006c 	.word	0x0000006c
   1d3b0:	0001d3a0 	.word	0x0001d3a0
   1d3b4:	0000000d 	.word	0x0000000d
   1d3b8:	0001d3b0 	.word	0x0001d3b0
   1d3bc:	0001d3bc 	.word	0x0001d3bc
   1d3c0:	74737572 	.word	0x74737572
   1d3c4:	7070612f 	.word	0x7070612f
   1d3c8:	6372732f 	.word	0x6372732f
   1d3cc:	756f742f 	.word	0x756f742f
   1d3d0:	735f6863 	.word	0x735f6863
   1d3d4:	6f736e65 	.word	0x6f736e65
   1d3d8:	73722e72 	.word	0x73722e72
   1d3dc:	0001d3c0 	.word	0x0001d3c0
   1d3e0:	0000001c 	.word	0x0000001c
   1d3e4:	0000003f 	.word	0x0000003f
   1d3e8:	00000005 	.word	0x00000005
   1d3ec:	20633269 	.word	0x20633269
   1d3f0:	72646461 	.word	0x72646461
   1d3f4:	0001d3c0 	.word	0x0001d3c0
   1d3f8:	0000001c 	.word	0x0000001c
   1d3fc:	0000004b 	.word	0x0000004b
   1d400:	00000011 	.word	0x00000011
   1d404:	63756f74 	.word	0x63756f74
   1d408:	74616468 	.word	0x74616468
   1d40c:	61662061 	.word	0x61662061
   1d410:	00006c69 	.word	0x00006c69
   1d414:	0001d3c0 	.word	0x0001d3c0
   1d418:	0000001c 	.word	0x0000001c
   1d41c:	00000056 	.word	0x00000056
   1d420:	00000009 	.word	0x00000009
   1d424:	0001d3c0 	.word	0x0001d3c0
   1d428:	0000001c 	.word	0x0000001c
   1d42c:	0000005a 	.word	0x0000005a
   1d430:	00000031 	.word	0x00000031
   1d434:	64616572 	.word	0x64616572
   1d438:	756f7420 	.word	0x756f7420
   1d43c:	61646863 	.word	0x61646863
   1d440:	66206174 	.word	0x66206174
   1d444:	006c6961 	.word	0x006c6961
   1d448:	0001d3c0 	.word	0x0001d3c0
   1d44c:	0000001c 	.word	0x0000001c
   1d450:	00000089 	.word	0x00000089
   1d454:	00000005 	.word	0x00000005
   1d458:	0001d3c0 	.word	0x0001d3c0
   1d45c:	0000001c 	.word	0x0000001c
   1d460:	00000095 	.word	0x00000095
   1d464:	00000037 	.word	0x00000037
	...

0001d470 <str.0>:
   1d470:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1d480:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1d490:	00000077 0001d3c0 0000001c 00000095     w...............
   1d4a0:	00000024 00000000 00000000 00000000     $...............

0001d4b0 <str.1>:
   1d4b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d4c0:	20687469 7265766f 776f6c66 0001d3c0     ith overflow....
   1d4d0:	0000001c 00000095 00000020 0001d3c0     ........ .......
   1d4e0:	0000001c 00000099 00000009 0001d3c0     ................
   1d4f0:	0000001c 0000009a 00000037 0001d3c0     ........7.......
   1d500:	0000001c 0000009a 00000023 0001d3c0     ........#.......
   1d510:	0000001c 0000009a 0000001f 0001d3c0     ................
   1d520:	0000001c 0000009b 00000037 0001d3c0     ........7.......
   1d530:	0000001c 0000009b 00000023 0001d3c0     ........#.......
   1d540:	0000001c 0000009b 0000001f 0001d3c0     ................
   1d550:	0000001c 0000009c 00000009 0001d3c0     ................
   1d560:	0000001c 0000009e 00000037 0001d3c0     ........7.......
   1d570:	0000001c 0000009e 00000023 0001d3c0     ........#.......
   1d580:	0000001c 0000009e 0000001f 0001d3c0     ................
   1d590:	0000001c 0000009f 00000037 0001d3c0     ........7.......
   1d5a0:	0000001c 0000009f 00000023 0001d3c0     ........#.......
   1d5b0:	0000001c 0000009f 0000001f 0001d3c0     ................
   1d5c0:	0000001c 000000a0 00000009 0001d3c0     ................
   1d5d0:	0000001c 000000a4 00000030 0001d3c0     ........0.......
   1d5e0:	0000001c 000000a4 0000001a 0001d3c0     ................
   1d5f0:	0000001c 000000a4 00000016 0001d3c0     ................
   1d600:	0000001c 000000a3 00000009 0001d3c0     ................
   1d610:	0000001c 000000a6 00000030 0001d3c0     ........0.......
   1d620:	0000001c 000000a6 0000001a 0001d3c0     ................
   1d630:	0000001c 000000a6 00000016 0001d3c0     ................
   1d640:	0000001c 000000a5 00000009 0001d3c0     ................
   1d650:	0000001c 000000aa 0000002d 0001d3c0     ........-.......
   1d660:	0000001c 000000aa 0000001a 0001d3c0     ................
   1d670:	0000001c 000000aa 00000016 0001d3c0     ................
   1d680:	0000001c 000000a9 00000009 0001d3c0     ................
   1d690:	0000001c 000000ac 0000002d 0001d3c0     ........-.......
   1d6a0:	0000001c 000000ac 0000001a 0001d3c0     ................
   1d6b0:	0000001c 000000ac 00000016 0001d3c0     ................
   1d6c0:	0000001c 000000ab 00000009 0001d3c0     ................
   1d6d0:	0000001c 000000af 0000000d 0001d3c0     ................
   1d6e0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1d6f0:	00667562 0001d3c0 0000001c 000000f1     buf.............
   1d700:	00000005 0001d3c0 0000001c 000000f2     ................
   1d710:	0000000d 0001d3c0 0000001c 000000f2     ................
   1d720:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1d730:	48432074 0a385049 50532512 20454341     t CHIP8..%SPACE 
   1d740:	41564e49 53524544 392e3020 79422031     INVADERS 0.91 By
   1d750:	76614420 57206469 45544e49 61006052      David WINTER`.a
   1d760:	a3086200 7118d0dd 311ef208 702d1220     .b.....q...1 .-p
   1d770:	30006108 692d1240 6e156c05 60912300     .a.0@.-i.l.n.#.`
   1d780:	f015f00a 12003007 7e91234b 66451201     .....0..K#.~..Ef
   1d790:	691c6800 6b046a00 6d046c0a 000f6e3c     .h.i.j.k.l.m<n..
   1d7a0:	237523e0 6015fd51 129ee004 3875237d     .#u#Q..`....}#u8
   1d7b0:	23ff7800 e0066075 238b129e 78393875     .x.#u`.....#u89x
   1d7c0:	36752301 609f1200 129ee005 650166e9     .#u6...`.....f.e
   1d7d0:	a380841b a351d4d9 7551d4d9 12ff35ff     ......Q...Qu.5..
   1d7e0:	120066ad 3f51d4e9 d4e91201 83006651     .f....Q?....Qf..
   1d7f0:	83037340 83f862b5 33086222 23c91200     @s...b.."b.3...#
   1d800:	4306827d 33d31208 23d51210 3306827d     }..C...3...#}..3
   1d810:	23dd1218 4306827d 33e71220 23e91228     ...#}..C ..3(..#
   1d820:	13003e7d 49067907 6a006918 6c0a6b04     }>...y.I.i.j.k.l
   1d830:	6ef47d04 23e0000f fd752351 f76f1215     .}.n...#Q#u...o.
   1d840:	12003707 2315fd6f 3ba48b51 7c1b1312     .7..o..#Q..;...|
   1d850:	3bfc6a02 7c231302 23046a02 12183c51     .j.;..#|.j.#Q<..
   1d860:	a4e0006f 611460dd d00f6208 f208701f     o....`.a.b...p..
   1d870:	132c301e f0ff6033 3007f015 f0411300     .0,.3`.....0..A.
   1d880:	a7e0000a 1265fe06 f9c1a325 2308611e     ......e.%....a.#
   1d890:	23068169 23068169 23068169 00d07b69     i..#i..#i..#i{..
   1d8a0:	80e080ee db003012 000c7bc6 60d9a3ee     .....0...{.....`
   1d8b0:	0004d81c 8e5123ee 60512323 f018f005     .....#Q.##Q`....
   1d8c0:	3007f015 00891300 8d006aee e9046be0     ...0.....j...k..
   1d8d0:	a65712a1 f01efd0c 13ff3065 6b006aaf     ..W.....e0...j.k
   1d8e0:	6e016d04 a5971301 db1ef00a 7d087bc6     .m.n.........{.}
   1d8f0:	3a017a01 00971307 ff7e3cee 7e9999ff     .z.:.....<~....~
   1d900:	2424ffff 3cff7ee7 81db7e3c ff7e3c42     ..$$.~.<<~..B<~.
   1d910:	7c3810db 7f0000fe 7f003f00 01000000     ..8|.....?......
   1d920:	03030101 00000303 2020203f 20202020     ........?       
   1d930:	08083f20 fe0000ff fe00fc00 7e000000      ?.............~
   1d940:	62624242 00006262 000000ff 00000000     BBbbbb..........
   1d950:	0000ff00 007d00ff 7d057d41 c200007d     ......}.A}.}}...
   1d960:	6c44c6c2 00003828 000000ff 00000000     ..Dl(8..........
   1d970:	0000ff00 10f700ff 04f7f714 7c000004     ...............|
   1d980:	c2c2fe44 0000c2c2 000000ff 00000000     D...............
   1d990:	0000ff00 20ef00ff 2fe8e828 f900002f     ....... (..//...
   1d9a0:	c5c5c585 0000f9c5 000000ff 00000000     ................
   1d9b0:	0000ff00 00be00ff be203020 f70000be     ........ 0 .....
   1d9c0:	8585e704 0000f484 000000ff 00000000     ................
   1d9d0:	0000ff00 7f0000ff 7f003f00 ef000000     .........?......
   1d9e0:	e000ef28 00006f60 000000ff 00000000     (...`o..........
   1d9f0:	0000ff00 fe0000ff fe00fc00 c0000000     ................
   1da00:	c0c0c000 0000c0c0 040404fc 04040404     ................
   1da10:	1010fc04 b981f9ff fa9a9a8b 9a8afa00     ................
   1da20:	f8999b9a f42525e6 00343434 37341417     .....%%.444...47
   1da30:	dfc72636 d85c5050 df00dfd8 1b121f11     6&..PP\.........
   1da40:	447cd919 868686fe 82fe84fc 80fefe82     ..|D............
   1da50:	fec0c0c0 c2c282fc 80fefcc2 fec0c0f8     ................
   1da60:	c0f080fe 80fec0c0 fe8686be 86fe8686     ................
   1da70:	10108686 10101010 48181818 909c7848     ...........HHx..
   1da80:	9cb0c0b0 c0c08080 92eefec0 86868692     ................
   1da90:	868682fe 827c8686 7c868686 c0fe82fe     ......|....|....
   1daa0:	827cc0c0 7ac4cac2 90fe86fe c0fe849c     ..|....z........
   1dab0:	fe0202fe 303010fe 82823030 fec2c2c2     ......0000......
   1dac0:	ee828282 86861038 ee929296 38384482     ....8........D88
   1dad0:	82828244 303030fe f01e02fe 0000fe80     D....000........
   1dae0:	06060000 60000000 0000c060 00000000     .......``.......
   1daf0:	18181818 c67c1800 1800180c fefe0000     ......|.........
   1db00:	82fe0000 fe868686 18080808 02fe1818     ................
   1db10:	fec0c0fe 061e02fe c484fe06 0404fec4     ................
   1db20:	06fe80fe c0c0fe06 fe82fec0 060202fe     ................
   1db30:	447c0606 fe8686fe 06fe82fe fe440606     ..|D..........D.
   1db40:	44fe4444 a8a8a8a8 6ca8a8a8 180c005a     DD.D.......lZ...
   1db50:	7e4e30a8 66181200 665aa86c 00662454     .0N~...fl.ZfT$f.
   1db60:	12184848 a89006a8 307e0012 3084a812     HH........~0...0
   1db70:	6618724e a8a8a8a8 5490a8a8 7848a878     Nr.f.......Tx.Hx
   1db80:	12a8726c 66726c18 72a89054 30a8182a     lr...lrfT..r*..0
   1db90:	12007e4e a86c6618 5aa85472 187e1866     N~...fl.rT.Zf.~.
   1dba0:	72a8724e 6630182a 7e4e30a8 54306c00     Nr.r*.0f.0N~.l0T
   1dbb0:	a8a89c4e a8a8a8a8 7e5448a8 5490a818     N........HT~...T
   1dbc0:	6ca86678 a85a302a 2a723084 00a8d8a8     xf.l*0Z..0r*....
   1dbd0:	e4a8124e 4e00a8a2 2a6ca812 a8725454     N......N..l*TTr.
   1dbe0:	2a723084 a89cdea8 a8182a72 5a48540c     .0r*....r*...THZ
   1dbf0:	66187278 5a1866a8 6c726654 002a72a8     xr.f.f.ZTfrl.r*.
   1dc00:	2a72a872 4e30a818 1812007e 00a86c66     r.r*..0N~...fl..
   1dc10:	30a81866 18660c4e 4e306c00 2a72a824     f..0N.f..l0N$.r*
   1dc20:	a8663018 0c66541e 24a89c18 a8125454     .0f..Tf....$TT..
   1dc30:	3c0c7842 a8a8aea8 a8a8a8a8 0000ffa8     Bx.<............
	...
   1dc4c:	49484300 64203850 0a656e6f 20746573     .CHIP8 done.set 
   1dc5c:	720a202c 2f747375 2f707061 2f637273     , .rust/app/src/
   1dc6c:	70696863 73722e38 0001dc5f 00000015     chip8.rs_.......
   1dc7c:	00000057 00000015 00000000 00000000     W...............
   1dc8c:	00000000                                ....

0001dc90 <str.0>:
   1dc90:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dca0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dcb0:	00000077 0001dc5f 00000015 00000057     w..._.......W...
   1dcc0:	00000011 00000000 00000000 00000000     ................

0001dcd0 <str.1>:
   1dcd0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dce0:	20687469 7265766f 776f6c66 0001dc5f     ith overflow_...
   1dcf0:	00000015 00000058 00000012 0001dc5f     ....X......._...
   1dd00:	00000015 00000059 0000001d 0001dc5f     ....Y......._...
   1dd10:	00000015 0000005a 0000001d 0001dc5f     ....Z......._...
   1dd20:	00000015 0000005d 00000042 00000000     ....]...B.......

0001dd30 <str.2>:
   1dd30:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dd40:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dd50:	00000077 0001dc5f 00000015 0000005d     w..._.......]...
   1dd60:	0000005d 0001dc5f 00000015 00000067     ]..._.......g...
   1dd70:	00000015 0001dc5f 00000015 00000067     ...._.......g...
   1dd80:	00000011 0001dc5f 00000015 00000068     ...._.......h...
   1dd90:	00000012 0001dc5f 00000015 0000008d     ...._...........
   1dda0:	00000009 0001dc5f 00000015 0000009d     ...._...........
   1ddb0:	0000000d 0001dc5f 00000015 0000009c     ...._...........
   1ddc0:	00000009 50494843 6f742038 20686375     ....CHIP8 touch 
   1ddd0:	20746f6e 646e6168 0a64656c 6573552f     not handled./Use
   1dde0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1ddf0:	69676572 79727473 6372732f 7469672f     registry/src/git
   1de00:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1de10:	65396264 33323863 62696c2f 70696863     db9ec823/libchip
   1de20:	2e302d38 2f322e31 2f637273 2e62696c     8-0.1.2/src/lib.
   1de30:	00007372 0001dddc 00000056 0000009d     rs......V.......
   1de40:	00000014 0001dddc 00000056 000000d4     ........V.......
   1de50:	00000011 0001dddc 00000056 000000d5     ........V.......
   1de60:	0000001a 00000000 00000000 00000000     ................

0001de70 <str.0>:
   1de70:	65747461 2074706d 61206f74 77206464     attempt to add w
   1de80:	20687469 7265766f 776f6c66 0001dddc     ith overflow....
   1de90:	00000056 000000d5 00000011 00000005     V...............
   1dea0:	0001de9c 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1deb0:	0000005d 0001dea4 00000001 0001dea5     ]...............
   1dec0:	0000000c 0001deb4 00000000 00000020     ............ ...
   1ded0:	00000008 00000002 00000000 00000000     ................
   1dee0:	00000004 00000003 0001dec8 6362696c     ............libc
   1def0:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1df00:	6e6e6e20 00000040 00000020 0001deec      nnn@... .......
   1df10:	00000008 0001deec 00000008 0001dddc     ................
   1df20:	00000056 000001a1 0001df0c 0001dddc     V...............
   1df30:	00000056 000001a3 0000001d 0001dddc     V...............
   1df40:	00000056 000001a4 0000002a 0001dddc     V.......*.......
   1df50:	00000056 000001a4 00000021 0001dddc     V.......!.......
   1df60:	00000056 000001a4 00000015 444c205d     V...........] LD
   1df70:	5d495b20 7856202c 0001dea4 00000001      [I], Vx........
   1df80:	0001df6c 0000000c 0001df78 0001deec     l.......x.......
   1df90:	00000008 0001deec 00000008 0001dddc     ................
   1dfa0:	00000056 0000019a 0001df8c 0001dddc     V...............
   1dfb0:	00000056 0000019c 0000001d 0001dddc     V...............
   1dfc0:	00000056 0000019d 00000035 0001dddc     V.......5.......
   1dfd0:	00000056 0000019d 0000001e 0001dddc     V...............
   1dfe0:	00000056 0000019d 00000015 444c205d     V...........] LD
   1dff0:	202c4220 00007856 0001dea4 00000001      B, Vx..........
   1e000:	0001dfec 0000000a 0001dff8 0001deec     ................
   1e010:	00000008 0001deec 00000008 0001dddc     ................
   1e020:	00000056 00000193 0001e00c 0001dddc     V...............
   1e030:	00000056 00000194 0000001b 0001dddc     V...............
   1e040:	00000056 00000195 00000011 0001dddc     V...............
   1e050:	00000056 00000196 0000001a 0001dddc     V...............
   1e060:	00000056 00000196 00000011 0001dddc     V...............
   1e070:	00000056 00000197 0000001a 0001dddc     V...............
   1e080:	00000056 00000197 00000011 444c205d     V...........] LD
   1e090:	202c4620 00007856 0001dea4 00000001      F, Vx..........
   1e0a0:	0001e08c 0000000a 0001e098 0001deec     ................
   1e0b0:	00000008 0001deec 00000008 0001dddc     ................
   1e0c0:	00000056 0000018f 0001e0ac 0001dddc     V...............
   1e0d0:	00000056 00000190 0000001b 0001dddc     V...............
   1e0e0:	00000056 00000190 0000001a 00000000     V...............

0001e0f0 <str.1>:
   1e0f0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e100:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e110:	41205d77 49204444 7856202c 0001dea4     w] ADD I, Vx....
   1e120:	00000001 0001e111 0000000b 0001e11c     ................
   1e130:	0001deec 00000008 0001deec 00000008     ................
   1e140:	0001dddc 00000056 0000018b 0001e130     ....V.......0...
   1e150:	0001dddc 00000056 0000018c 0000002e     ....V...........
   1e160:	444c205d 2c545320 00785620 0001dea4     ] LD ST, Vx.....
   1e170:	00000001 0001e160 0000000b 0001e16c     ....`.......l...
   1e180:	0001deec 00000008 0001deec 00000008     ................
   1e190:	0001dddc 00000056 00000187 0001e180     ....V...........
   1e1a0:	0001dddc 00000056 00000188 0000001b     ....V...........
   1e1b0:	444c205d 2c544420 00785620 0001dea4     ] LD DT, Vx.....
   1e1c0:	00000001 0001e1b0 0000000b 0001e1bc     ................
   1e1d0:	0001deec 00000008 0001deec 00000008     ................
   1e1e0:	0001dddc 00000056 00000183 0001e1d0     ....V...........
   1e1f0:	0001dddc 00000056 00000184 0000001b     ....V...........
   1e200:	444c205d 2c785620 00004b20 0001dea4     ] LD Vx, K......
   1e210:	00000001 0001e200 0000000a 0001e20c     ................
   1e220:	0001deec 00000008 0001deec 00000008     ................
   1e230:	0001dddc 00000056 0000017f 0001e220     ....V....... ...
   1e240:	0001dddc 00000056 00000180 00000011     ....V...........
   1e250:	444c205d 2c785620 00544420 0001dea4     ] LD Vx, DT.....
   1e260:	00000001 0001e250 0000000b 0001e25c     ....P.......\...
   1e270:	0001deec 00000008 0001deec 00000008     ................
   1e280:	0001dddc 00000056 0000017b 0001e270     ....V...{...p...
   1e290:	0001dddc 00000056 0000017c 00000011     ....V...|.......
   1e2a0:	4b53205d 5620504e 00000078 0001dea4     ] SKNP Vx.......
   1e2b0:	00000001 0001e2a0 00000009 0001e2ac     ................
   1e2c0:	0001deec 00000008 0001deec 00000008     ................
   1e2d0:	0001dddc 00000056 00000175 0001e2c0     ....V...u.......
   1e2e0:	0001dddc 00000056 00000176 00000021     ....V...v...!...
   1e2f0:	0001dea4 00000001 0001def4 00000008     ................
   1e300:	0001e2f0 0001deec 00000008 0001deec     ................
   1e310:	00000008 0001dddc 00000056 0000016f     ........V...o...
   1e320:	0001e304 0001dddc 00000056 00000170     ........V...p...
   1e330:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1e340:	006e202c 0001dea4 00000001 0001e334     , n.........4...
   1e350:	0000000f 0001e344 0001deec 00000008     ....D...........
   1e360:	0001deec 00000008 0001dddc 00000056     ............V...
   1e370:	00000156 0001e358 0001dddc 00000056     V...X.......V...
   1e380:	00000157 0000001d 0001dddc 00000056     W...........V...
   1e390:	00000158 0000001d 0001dddc 00000056     X...........V...
   1e3a0:	0000015e 00000026 0001dddc 00000056     ^...&.......V...
   1e3b0:	0000015e 0000001d 0001dddc 00000056     ^...........V...
   1e3c0:	00000160 00000021 00000000 00000000     `...!...........

0001e3d0 <str.2>:
   1e3d0:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1e3e0:	6574616c 65687420 6d657220 646e6961     late the remaind
   1e3f0:	77207265 20687469 69642061 6f736976     er with a diviso
   1e400:	666f2072 72657a20 0000006f 0001dddc     r of zero.......
   1e410:	00000056 00000163 00000025 0001dddc     V...c...%.......
   1e420:	00000056 00000165 0000002d 00000000     V...e...-.......

0001e430 <str.3>:
   1e430:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e440:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e450:	00000077 0001dddc 00000056 00000165     w.......V...e...
   1e460:	00000028 00000000 00000000 00000000     (...............

0001e470 <str.4>:
   1e470:	65747461 2074706d 73206f74 74666968     attempt to shift
   1e480:	66656c20 69772074 6f206874 66726576      left with overf
   1e490:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1e4a0:	0001dea4 00000001 0001e493 0000000c     ................
   1e4b0:	0001e4a0 0001deec 00000008 0001deec     ................
   1e4c0:	00000008 0001dddc 00000056 00000152     ........V...R...
   1e4d0:	0001e4b4 0001dddc 00000056 00000153     ........V...S...
   1e4e0:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1e4f0:	0001dea4 00000001 0001e4e4 0000000c     ................
   1e500:	0001e4f0 0001deec 00000008 0001deec     ................
   1e510:	00000008 0001dddc 00000056 0000014e     ........V...N...
   1e520:	0001e504 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1e530:	0001dea4 00000001 0001e524 0000000b     ........$.......
   1e540:	0001e530 0001deec 00000008 0001deec     0...............
   1e550:	00000008 0001dddc 00000056 0000014a     ........V...J...
   1e560:	0001e544 4e53205d 78562045 7956202c     D...] SNE Vx, Vy
   1e570:	0001dea4 00000001 0001e564 0000000c     ........d.......
   1e580:	0001e570 0001deec 00000008 0001deec     p...............
   1e590:	00000008 0001dddc 00000056 00000144     ........V...D...
   1e5a0:	0001e584 0001dddc 00000056 00000145     ........V...E...
   1e5b0:	00000014 0001dddc 00000056 00000145     ........V...E...
   1e5c0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1e5d0:	0001dea4 00000001 0001e5c4 0000000c     ................
   1e5e0:	0001e5d0 0001deec 00000008 0001deec     ................
   1e5f0:	00000008 0001dddc 00000056 0000013f     ........V...?...
   1e600:	0001e5e4 0001dddc 00000056 00000140     ........V...@...
   1e610:	00000020 0001dddc 00000056 00000141      .......V...A...
   1e620:	0000001d 0001dddc 00000056 00000141     ........V...A...
   1e630:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1e640:	00000079 0001dea4 00000001 0001e634     y...........4...
   1e650:	0000000d 0001e644 0001deec 00000008     ....D...........
   1e660:	0001deec 00000008 0001dddc 00000056     ............V...
   1e670:	00000139 0001e658 0001dddc 00000056     9...X.......V...
   1e680:	0000013a 0000001e 0001dddc 00000056     :...........V...
   1e690:	0000013a 00000038 0001dddc 00000056     :...8.......V...
   1e6a0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1e6b0:	7956202c 0001dea4 00000001 0001e6a8     , Vy............
   1e6c0:	0000000c 0001e6b4 0001deec 00000008     ................
   1e6d0:	0001deec 00000008 0001dddc 00000056     ............V...
   1e6e0:	00000134 0001e6c8 0001dddc 00000056     4...........V...
   1e6f0:	00000135 0000001f 0001dddc 00000056     5...........V...
   1e700:	00000136 0000001d 0001dddc 00000056     6...........V...
   1e710:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1e720:	7956202c 0001dea4 00000001 0001e718     , Vy............
   1e730:	0000000c 0001e724 0001deec 00000008     ....$...........
   1e740:	0001deec 00000008 0001dddc 00000056     ............V...
   1e750:	0000012e 0001e738 0001dddc 00000056     ....8.......V...
   1e760:	0000012f 0000001e 0001dddc 00000056     /...........V...
   1e770:	0000012f 00000038 0001dddc 00000056     /...8.......V...
   1e780:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1e790:	7956202c 0001dea4 00000001 0001e788     , Vy............
   1e7a0:	0000000c 0001e794 0001deec 00000008     ................
   1e7b0:	0001deec 00000008 0001dddc 00000056     ............V...
   1e7c0:	00000128 0001e7a8 0001dddc 00000056     (...........V...
   1e7d0:	00000129 0000001e 0001dddc 00000056     )...........V...
   1e7e0:	00000129 00000038 0001dddc 00000056     )...8.......V...
   1e7f0:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1e800:	7956202c 0001dea4 00000001 0001e7f8     , Vy............
   1e810:	0000000c 0001e804 0001deec 00000008     ................
   1e820:	0001deec 00000008 0001dddc 00000056     ............V...
   1e830:	00000124 0001e818 0001dddc 00000056     $...........V...
   1e840:	00000125 0000001e 0001dddc 00000056     %...........V...
   1e850:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1e860:	7956202c 0001dea4 00000001 0001e858     , Vy........X...
   1e870:	0000000c 0001e864 0001deec 00000008     ....d...........
   1e880:	0001deec 00000008 0001dddc 00000056     ............V...
   1e890:	00000120 0001e878 0001dddc 00000056      ...x.......V...
   1e8a0:	00000121 0000001e 0001dddc 00000056     !...........V...
   1e8b0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1e8c0:	00795620 0001dea4 00000001 0001e8b8      Vy.............
   1e8d0:	0000000b 0001e8c4 0001deec 00000008     ................
   1e8e0:	0001deec 00000008 0001dddc 00000056     ............V...
   1e8f0:	0000011c 0001e8d8 0001dddc 00000056     ............V...
   1e900:	0000011d 0000001e 0001dddc 00000056     ............V...
   1e910:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1e920:	00795620 0001dea4 00000001 0001e918      Vy.............
   1e930:	0000000b 0001e924 0001deec 00000008     ....$...........
   1e940:	0001deec 00000008 0001dddc 00000056     ............V...
   1e950:	00000118 0001e938 0001dddc 00000056     ....8.......V...
   1e960:	00000119 0000001d 0001dddc 00000056     ............V...
   1e970:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1e980:	6b6b202c 0001dea4 00000001 0001e978     , kk........x...
   1e990:	0000000c 0001e984 0001deec 00000008     ................
   1e9a0:	0001deec 00000008 0001dddc 00000056     ............V...
   1e9b0:	00000114 0001e998 0001dddc 00000056     ............V...
   1e9c0:	00000115 0000001d 0001dddc 00000056     ............V...
   1e9d0:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1e9e0:	006b6b20 0001dea4 00000001 0001e9d8      kk.............
   1e9f0:	0000000b 0001e9e4 0001deec 00000008     ................
   1ea00:	0001deec 00000008 0001dddc 00000056     ............V...
   1ea10:	00000110 0001e9f8 0001dddc 00000056     ............V...
   1ea20:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1ea30:	706f2064 0000203a 0001dea4 00000001     d op: ..........
   1ea40:	0001ea28 0000000e 0001ea38 00000000     (.......8.......
   1ea50:	00000020 00000008 00000002 00000000      ...............
   1ea60:	00000000 00000004 00000003 00000001     ................
   1ea70:	00000020 00000008 00000002 00000000      ...............
   1ea80:	00000000 00000004 00000003 0001ea4c     ............L...
   1ea90:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1eaa0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1eab0:	0001ea90 0000001e 00000005 00000032     ............2...
   1eac0:	4553205d 2c785620 00795620 0001dea4     ] SE Vx, Vy.....
   1ead0:	00000001 0001eac0 0000000b 0001eacc     ................
   1eae0:	0001deec 00000008 0001deec 00000008     ................
   1eaf0:	0001dddc 00000056 0000010a 0001eae0     ....V...........
   1eb00:	0001dddc 00000056 0000010b 00000014     ....V...........
   1eb10:	0001dddc 00000056 0000010b 00000021     ....V.......!...
   1eb20:	4e53205d 78562045 6b6b202c 0001dea4     ] SNE Vx, kk....
   1eb30:	00000001 0001eb20 0000000c 0001eb2c     .... .......,...
   1eb40:	0001deec 00000008 0001deec 00000008     ................
   1eb50:	0001dddc 00000056 00000104 0001eb40     ....V.......@...
   1eb60:	0001dddc 00000056 00000105 00000014     ....V...........
   1eb70:	4553205d 20785620 00006b6b 0001dea4     ] SE Vx kk......
   1eb80:	00000001 0001eb70 0000000a 0001eb7c     ....p.......|...
   1eb90:	0001deec 00000008 0001deec 00000008     ................
   1eba0:	0001dddc 00000056 000000fe 0001eb90     ....V...........
   1ebb0:	0001dddc 00000056 000000ff 00000014     ....V...........
   1ebc0:	4143205d 6e204c4c 00006e6e 0001dea4     ] CALL nnn......
   1ebd0:	00000001 0001ebc0 0000000a 0001ebcc     ................
   1ebe0:	0001deec 00000008 0001deec 00000008     ................
   1ebf0:	0001dddc 00000056 000000f9 0001ebe0     ....V...........
   1ec00:	0001dea4 00000001 0001defc 00000008     ................
   1ec10:	0001ec00 0001deec 00000008 0001deec     ................
   1ec20:	00000008 0001dddc 00000056 000000f5     ........V.......
   1ec30:	0001ec14 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   1ec40:	0001dea4 00000001 0001ec34 00000009     ........4.......
   1ec50:	0001ec40 0001deec 00000008 0001deec     @...............
   1ec60:	00000008 0001dddc 00000056 000000f1     ........V.......
   1ec70:	0001ec54 20746f6e 6c706d69 6e656d65     T...not implemen
   1ec80:	00646574 0001ea90 0000001e 00000002     ted.............
   1ec90:	00000002 4552205d 00000054 0001dea4     ....] RET.......
   1eca0:	00000001 0001ec94 00000005 0001ec9c     ................
   1ecb0:	0001deec 00000008 0001deec 00000008     ................
   1ecc0:	0001dddc 00000056 000000ec 0001ecb0     ....V...........
   1ecd0:	4c43205d 00000053 0001dea4 00000001     ] CLS...........
   1ece0:	0001ecd0 00000005 0001ecd8 0001deec     ................
   1ecf0:	00000008 0001deec 00000008 0001dddc     ................
   1ed00:	00000056 000000e5 0001ecec 0001dddc     V...............
   1ed10:	00000056 00000093 0000001b 0001dddc     V...............
   1ed20:	00000056 00000097 00000009 0001dddc     V...............
   1ed30:	00000056 000000bb 0000000d 0001dddc     V...............
   1ed40:	00000056 000000be 0000000d 6c6c6163     V...........call
   1ed50:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1ed60:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1ed70:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1ed80:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1ed90:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1eda0:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1edb0:	2f333238 65626d65 64656464 6172672d     823/embedded-gra
   1edc0:	63696870 2e302d73 2f322e35 2f637273     phics-0.5.2/src/
   1edd0:	726f6f63 73722e64 65726e55 61686361     coord.rsUnreacha
   1ede0:	20656c62 65646e69 00002078 0001edd8     ble index ......
   1edf0:	00000012 0001edec 0001ed77 00000061     ........w...a...
   1ee00:	00000070 00000016                       p.......

0001ee08 <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1ee08:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1ee18:	f010f010 10f09090 f080f010 80f0f010     ................
   1ee28:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1ee38:	90f0f010 e09090f0 e090e090 808080f0     ................
   1ee48:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1ee58:	72656874 73692065 206f6e20 68637573     there is no such
   1ee68:	69687420 6120676e 6e612073 71636120      thing as an acq
   1ee78:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1ee88:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1ee98:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1eea8:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1eeb8:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1eec8:	2f736f72 2e646f6d 00007372 0001ee89     ros/mod.rs......
   1eed8:	00000049 0000000a 00000009 72656874     I...........ther
   1eee8:	73692065 206f6e20 68637573 69687420     e is no such thi
   1eef8:	6120676e 20612073 656c6572 20657361     ng as a release 
   1ef08:	64616f6c 0000e9db 00000000 00000001     load............
   1ef18:	0000ed97 0000eda3 0000edad 0001ef0c     ................
   1ef28:	0000e9db 00000000 00000001 0000ed97     ................
   1ef38:	0000eda3 0000edad                       ........

0001ef40 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1ef40:	00000000 0001ef40 0001ef44 65737361     ....@...D...asse
   1ef50:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1ef60:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1ef70:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1ef80:	203a7468 203a6060 0001ef4c 0000002d     ht: ``: L...-...
   1ef90:	0001ef79 0000000c 0001ef85 00000003     y...............
   1efa0:	0001ef88 6e206f6e 006c6c75 0001efa4     ....no null.....
   1efb0:	00000007 0001efac 0001efb8 74737572     ............rust
   1efc0:	6e796d2f 2f747765 2f637273 2e62696c     /mynewt/src/lib.
   1efd0:	00007372 0001efbc 00000016 000000db     rs..............
   1efe0:	00000011 0000f453 00000004 00000004     ....S...........
   1eff0:	00013205 65737361 6f697472 6166206e     .2..assertion fa
   1f000:	64656c69 2860203a 7466656c 203d3d20     iled: `(left == 
   1f010:	68676972 0a602974 656c2020 203a7466     right)`.  left: 
   1f020:	0a2c6060 67697220 203a7468 203a6060     ``,. right: ``: 
   1f030:	0001eff4 0000002d 0001f021 0000000c     ....-...!.......
   1f040:	0001f02d 00000003 0001f030 74736564     -.......0...dest
   1f050:	74616e69 206e6f69 20646e61 72756f73     ination and sour
   1f060:	73206563 6563696c 61682073 64206576     ce slices have d
   1f070:	65666669 746e6572 6e656c20 73687467     ifferent lengths
   1f080:	0001f04c 00000034 0001f080 0001f08c     L...4...........
   1f090:	7375722f 352f6374 66613765 39363634     /rustc/5e7af4669
   1f0a0:	65303866 38366635 31343132 30353066     f80e5f682141f050
   1f0b0:	61333931 39373662 62646661 2f316234     193ab679afdb4b1/
   1f0c0:	2f637273 6362696c 2f65726f 7263616d     src/libcore/macr
   1f0d0:	6d2f736f 722e646f 00000073 0001f090     os/mod.rs.......
   1f0e0:	00000049 00000012 0000000d 0001d340     I...........@...
   1f0f0:	65737361 6f697472 6166206e 64656c69     assertion failed
   1f100:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1f110:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1f120:	67697220 203a7468 203a6060 0001f0f0      right: ``: ....
   1f130:	0000002d 0001f11d 0000000c 0001f129     -...........)...
   1f140:	00000003 0001f12c 20697073 666e6f63     ....,...spi conf
   1f150:	66206769 006c6961 0001f148 0000000f     ig fail.H.......
   1f160:	0001f158 0001f164 74737572 6e796d2f     X...d...rust/myn
   1f170:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1f180:	0001f168 00000016 00000016 00000009     h...............
   1f190:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1f1a0:	0001f190 0000000f 0001f1a0 0001f168     ............h...
   1f1b0:	00000016 00000019 00000009 20697073     ............spi 
   1f1c0:	74696e69 69616620 0000006c 0001f1bc     init fail.......
   1f1d0:	0000000d 0001f1cc 0001f168 00000016     ........h.......
   1f1e0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1f1f0:	0000006c 0001f1e8 00000009 0001f1f4     l...............
   1f200:	0001f168 00000016 00000045 00000009     h.......E.......
   1f210:	0001f168 00000016 0000006c 0000001b     h.......l.......

0001f220 <str.0>:
   1f220:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f230:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f240:	6d6f5377 6e6f4e65 00000065 0000f44b     wSomeNone...K...
   1f250:	00000004 00000004 0000ff5f 77617264     ........_...draw
   1f260:	6f6c6220 20736b63 6c696166 74737572      blocks failrust
   1f270:	6569702f 6d652d74 64646562 702f6465     /piet-embedded/p
   1f280:	2d746569 65626d65 64656464 6172672d     iet-embedded-gra
   1f290:	63696870 72732f73 69642f63 616c7073     phics/src/displa
   1f2a0:	73722e79 0001f26c 00000038 00000080     y.rsl...8.......
   1f2b0:	00000005 00000060 0001f2b4 6576656e     ....`.......neve
   1f2c0:	73757272 69702f74 652d7465 6465626d     rrust/piet-embed
   1f2d0:	2f646564 74656970 626d652d 65646465     ded/piet-embedde
   1f2e0:	72672d64 69687061 732f7363 622f6372     d-graphics/src/b
   1f2f0:	68637461 0073722e 0001f2c1 00000036     atch.rs.....6...
   1f300:	000000be 00000019 0001f2c1 00000036     ............6...
   1f310:	000000c3 0000001d 00000000 00000000     ................

0001f320 <str.0>:
   1f320:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f330:	20687469 7265766f 776f6c66 0001f2c1     ith overflow....
   1f340:	00000036 000000d5 00000015 0001f2c1     6...............
   1f350:	00000036 00000104 00000019 0001f2c1     6...............
   1f360:	00000036 00000109 0000001d 0001f2c1     6...............
   1f370:	00000036 0000011d 00000015 20697073     6...........spi 
   1f380:	73756c66 61662068 552f6c69 73726573     flush fail/Users
   1f390:	70754c2f 502f7970 54656e69 2f656d69     /Luppy/PineTime/
   1f3a0:	656e6970 656d6974 7375722d 796d2d74     pinetime-rust-my
   1f3b0:	7477656e 7375722f 74732f74 35333737     newt/rust/st7735
   1f3c0:	64636c2d 7461622d 722d6863 72732f73     -lcd-batch-rs/sr
   1f3d0:	696c2f63 73722e62 0001f38a 0000004e     c/lib.rs....N...
   1f3e0:	000000fe 00000009 20697073 61746164     ........spi data
   1f3f0:	69616620 0000006c 0001f38a 0000004e      fail.......N...
   1f400:	000000b0 00000009 0001f38a 0000004e     ............N...
   1f410:	000000f3 00000009 0001f38a 0000004e     ............N...
   1f420:	00000098 0000000d 20697073 20646d63     ........spi cmd 
   1f430:	6c696166 0001f38a 0000004e 00000097     fail....N.......
   1f440:	00000009 0001f38a 0000004e 0000009d     ........N.......
   1f450:	00000011 0001f38a 0000004e 0000009c     ........N.......
   1f460:	0000000d 0001f38a 0000004e 000000c5     ........N.......
   1f470:	0000002d 0001f38a 0000004e 000000c9     -.......N.......
   1f480:	0000002d 0001f38a 0000004e 000000d8     -.......N.......
   1f490:	00000019 00000000 00000000 00000000     ................

0001f4a0 <str.0>:
   1f4a0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f4b0:	20687469 7265766f 776f6c66 0001f38a     ith overflow....
   1f4c0:	0000004e 000000d9 00000019 0001f38a     N...............
   1f4d0:	0000004e 000000db 00000019 0001f38a     N...............
   1f4e0:	0000004e 000000dc 00000019 20697073     N...........spi 
   1f4f0:	74696e69 69616620 0000006c 0001f38a     init fail.......
   1f500:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1f510:	0001f50c 012d2c01 00002d2c 0001f514     .....,-.,-......
   1f520:	00000007 0001f520 008402a2 0001f528     .... .......(...
   1f530:	000000c5 0001f530 0000000a 0001f538     ....0.......8...
   1f540:	00002a8a 0001f540 0000ee8a 0001f548     .*..@.......H...
   1f550:	0000000e 0001f550 00000000 0001f558     ....P.......X...
   1f560:	00000008 0001f560 00000005 0001f568     ....`.......h...
   1f570:	0001f38a 0000004e 00000088 00000009     ....N...........
   1f580:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1f590:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1f5a0:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1f5b0:	39393236 65396264 33323863 626d652f     6299db9ec823/emb
   1f5c0:	65646465 72672d64 69687061 302d7363     edded-graphics-0
   1f5d0:	322e352e 6372732f 6972702f 6974696d     .5.2/src/primiti
   1f5e0:	2f736576 74636572 6c676e61 73722e65     ves/rectangle.rs
   1f5f0:	0001f580 00000070 000000c0 00000032     ....p.......2...

0001f600 <str.0>:
   1f600:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f610:	20687469 7265766f 776f6c66 0001f580     ith overflow....
   1f620:	00000070 000000c2 00000031 00000000     p.......1.......

0001f630 <str.1>:
   1f630:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f640:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f650:	00000077 0001f580 00000070 000000c4     w.......p.......
   1f660:	00000031 0001f580 00000070 000000c6     1.......p.......
   1f670:	00000031 65707845 64657463 72747320     1...Expected str
   1f680:	00656b6f 0001f580 00000070 000000cc     oke.....p.......
   1f690:	00000019 0001f580 00000070 000000d5     ........p.......
   1f6a0:	0000000d 0001f580 00000070 000000da     ........p.......
   1f6b0:	00000011 00012e9b 00000004 00000004     ................
   1f6c0:	00013205 00697073 0001d340 65737361     .2..spi.@...asse
   1f6d0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1f6e0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1f6f0:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1f700:	203a7468 203a6060 0001f6cc 0000002d     ht: ``: ....-...
   1f710:	0001f6f9 0000000c 0001f705 00000003     ................
   1f720:	0001f708 20697073 666e6f63 66206769     ....spi config f
   1f730:	006c6961 0001f724 0000000f 0001f734     ail.$.......4...
   1f740:	0001f740 74737572 6e796d2f 2f747765     @...rust/mynewt/
   1f750:	2f637273 2e697073 00007372 0001f744     src/spi.rs..D...
   1f760:	00000016 00000050 0000004a 20697073     ....P...J...spi 
   1f770:	66206263 006c6961 0001f76c 0000000b     cb fail.l.......
   1f780:	0001f778 0001f744 00000016 00000057     x...D.......W...
   1f790:	00000005 20697073 62616e65 6620656c     ....spi enable f
   1f7a0:	006c6961 0001f794 0000000f 0001f7a4     ail.............
   1f7b0:	0001f744 00000016 0000005a 00000037     D.......Z...7...
   1f7c0:	6f697067 69616620 0000006c 0001f7c0     gpio fail.......
   1f7d0:	00000009 0001f7cc 0001f744 00000016     ........D.......
   1f7e0:	0000005b 00000040 0001f744 00000016     [...@...D.......
   1f7f0:	0000005c 00000040 6575716d 66206575     \...@...mqueue f
   1f800:	006c6961 0001f7f8 0000000b 0001f804     ail.............
   1f810:	0001f744 00000016 00000065 00000005     D.......e.......
   1f820:	206d6573 6c696166 20697073 6c696166     sem failspi fail
   1f830:	0001f820 00000008 0001f830 0001f744      .......0...D...
   1f840:	00000016 00000069 00000005 0001f744     ....i.......D...
   1f850:	00000016 0000006d 00000005 00000000     ....m...........
   1f860:	0001f6c4 00000004 0001f85c 6e657665     ........\...even
   1f870:	66207174 006c6961 0001f744 00000016     tq fail.D.......
   1f880:	00000081 00000009 65737361 6f697472     ........assertio
   1f890:	6166206e 64656c69 6e75203a 65666173     n failed: unsafe
   1f8a0:	50207b20 49444e45 435f474e 6c2e444d      { PENDING_CMD.l
   1f8b0:	29286e65 3e207d20 00003020 0001f744     en() } > 0..D...
   1f8c0:	00000016 00000097 00000005 0001f744     ............D...
   1f8d0:	00000016 000000a6 00000012 0001f744     ............D...
   1f8e0:	00000016 000000bf 00000035 00000000     ........5.......

0001f8f0 <str.0>:
   1f8f0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f900:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f910:	00000077 0001f744 00000016 000000c2     w...D...........
   1f920:	0000000f 00000000 00000000 00000000     ................

0001f930 <str.1>:
   1f930:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f940:	20687469 7265766f 776f6c66 20746e69     ith overflowint 
   1f950:	20697073 6c696166 0001f744 00000016     spi failD.......
   1f960:	000000ff 00000011 0001f744 00000016     ........D.......
   1f970:	0000010f 00000015 00000000 00000000     ................

0001f980 <str.2>:
   1f980:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f990:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f9a0:	00000077 0001f744 00000016 0000010d     w...D...........
   1f9b0:	00000011 0001f744 00000016 00000115     ....D...........
   1f9c0:	00000011 0001f744 00000016 00000122     ....D......."...
   1f9d0:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1f9e0:	0001f744 00000016 00000129 00000005     D.......).......
   1f9f0:	0001f828 00000008 0001f9f0 0001f744     (...........D...
   1fa00:	00000016 0000013f 00000009 0001f744     ....?.......D...
   1fa10:	00000016 00000148 00000009 0001f744     ....H.......D...
   1fa20:	00000016 0000014c 00000030 0001f744     ....L...0...D...
   1fa30:	00000016 00000158 00000005 0001f744     ....X.......D...
   1fa40:	00000016 0000015d 00000017 6c6c6163     ....].......call
   1fa50:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1fa60:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1fa70:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fa80:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fa90:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1faa0:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fab0:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fac0:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fad0:	0001fa77 00000056 000001e8 0000000d     w...V...........

0001fae0 <str.0>:
   1fae0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1faf0:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   1fb00:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   1fb10:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   1fb20:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   1fb30:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   1fb40:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   1fb50:	73722e63 00000000 00000000 00000000     c.rs............

0001fb60 <str.0>:
   1fb60:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fb70:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fb80:	00000077 0001fafe 00000056 00000066     w.......V...f...
   1fb90:	00000009 00000000 00000000 00000000     ................

0001fba0 <str.1>:
   1fba0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fbb0:	20687469 7265766f 776f6c66 0001fafe     ith overflow....
   1fbc0:	00000056 0000003e 0000000c 0001fafe     V...>...........
   1fbd0:	00000056 0000002d 00000009 0001fafe     V...-...........
   1fbe0:	00000056 0000007e 00000011 00011d05     V...~...........
   1fbf0:	00000000 00000001 000150bd 00011c49     .........P..I...
   1fc00:	00000002 00000002 000165cd 6c6c6163     .........e..call
   1fc10:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   1fc20:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   1fc30:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fc40:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fc50:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fc60:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fc70:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fc80:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fc90:	0001fc37 00000056 00000066 00000009     7...V...f.......

0001fca0 <str.0>:
   1fca0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fcb0:	20687469 7265766f 776f6c66 0001fc37     ith overflow7...
   1fcc0:	00000056 0000003e 0000000c 0001fc37     V...>.......7...
   1fcd0:	00000056 0000007e 00000011 00000000     V...~...........

0001fce0 <str.1>:
   1fce0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fcf0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fd00:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1fd10:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1fd20:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1fd30:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1fd40:	20736920 00000000 00000020 00000008      is .... .......
   1fd50:	00000002 00000000 00000000 00000002     ................
   1fd60:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1fd70:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1fd80:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1fd90:	00000002 00000000 00000002 00000000     ................
   1fda0:	00000003 00000000 00000020 00000008     ........ .......
   1fdb0:	00000002 00000000 00000001 00000001     ................
   1fdc0:	00000003 002e2e60 0001fdc5 00000002     ....`...........
   1fdd0:	65726c61 20796461 72726f62 6465776f     already borrowed
   1fde0:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1fdf0:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1fe00:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001fe10 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1fe10:	00010201 00000000 00000000 00000000     ................
   1fe20:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1fe30:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1fe40:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1fe50:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1fe60:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1fe70:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1fe80:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1fe90:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1fea0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1feb0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1fec0:	656e6f4e 61762060 0065756c 0001fd04     None` value.....
   1fed0:	00000000 0000203a 0001fd04 00000000     ....: ..........
   1fee0:	0001fed4 00000002 00016821 00000000     ........!h......
   1fef0:	00000001 00016871 74756220 65687420     ....qh.. but the
   1ff00:	646e6920 69207865 00002073 0001fd24      index is ..$...
   1ff10:	00000020 0001fef8 00000012 00016821      ...........!h..
   1ff20:	0000000c 00000004 00016abb 00016e11     .........j...n..
   1ff30:	00016ec1 202c0a2c 2c280a28 30783029     .n..,., (.(,)0x0
   1ff40:	30313030 30333032 30353034 30373036     0010203040506070
   1ff50:	31393038 31313130 31333132 31353134     8091011121314151
   1ff60:	31373136 32393138 32313230 32333232     6171819202122232
   1ff70:	32353234 32373236 33393238 33313330     4252627282930313
   1ff80:	33333332 33353334 33373336 34393338     2333435363738394
   1ff90:	34313430 34333432 34353434 34373436     0414243444546474
   1ffa0:	35393438 35313530 35333532 35353534     8495051525354555
   1ffb0:	35373536 36393538 36313630 36333632     6575859606162636
   1ffc0:	36353634 36373636 37393638 37313730     4656667686970717
   1ffd0:	37333732 37353734 37373736 38393738     2737475767778798
   1ffe0:	38313830 38333832 38353834 38373836     0818283848586878
   1fff0:	39393838 39313930 39333932 39353934     8899091929394959
   20000:	39373936 00393938 00016821 00000004     6979899.!h......
   20010:	00000004 00016ee5 00016eeb 00016ef1     .....n...n...n..
   20020:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   20030:	2e646f6d 00007372 00020020 00000016     mod.rs.. .......
   20040:	0000043b 00000011 00020020 00000016     ;....... .......
   20050:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   20060:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   20070:	65646e69 6f202078 6f207475 61722066     index  out of ra
   20080:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   20090:	6e656c20 20687467 00020070 00000006      length p.......
   200a0:	00020076 00000022 00020058 00000018     v..."...X.......
   200b0:	00000a72 00000005 63696c73 6e692065     r.......slice in
   200c0:	20786564 72617473 61207374 62202074     dex starts at  b
   200d0:	65207475 2073646e 00207461 000200b8     ut ends at .....
   200e0:	00000016 000200ce 0000000d 00020058     ............X...
   200f0:	00000018 00000a78 00000005 696e6966     ....x.......fini
   20100:	64656873 73796168 6b636174 79622820     shedhaystack (by
   20110:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   20120:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   20130:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   20140:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   20150:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   20160:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   20170:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   20180:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   20190:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   201a0:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   201b0:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   201c0:	20657479 65646e69 69202078 756f2073     yte index  is ou
   201d0:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   201e0:	000201bf 0000000b 000201ca 00000016     ................
   201f0:	0001fdc4 00000001 000201a4 00000016     ................
   20200:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   20210:	646e6520 00002820 00020208 0000000e      end (..........
   20220:	0001fe34 00000004 0001fde0 00000010     4...............
   20230:	0001fdc4 00000001 000201a4 00000016     ................
   20240:	00000857 00000005 000201a4 00000016     W...............
   20250:	00000868 0000000e 20736920 20746f6e     h....... is not 
   20260:	68632061 62207261 646e756f 3b797261     a char boundary;
   20270:	20746920 69207369 6469736e 20292065      it is inside ) 
   20280:	6020666f 000201bf 0000000b 00020258     of `........X...
   20290:	00000026 0002010c 00000008 0002027e     &...........~...
   202a0:	00000006 0001fdc4 00000001 000201a4     ................
   202b0:	00000016 0000086a 00000005 0001fd64     ....j.......d...
   202c0:	00000020 0000001a 00000028 05030100      .......(.......
   202d0:	03060605 08080607 1c0a1109 140c190b     ................
   202e0:	0d0e120d 0310040f 09131212 05170116     ................
   202f0:	03190218 021c071a 161f011d 042b0320     ............ .+.
   20300:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   20310:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   20320:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   20330:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   20340:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   20350:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   20360:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   20370:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   20380:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   20390:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   203a0:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   203b0:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   203c0:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   203d0:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   203e0:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   203f0:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   20400:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   20410:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   20420:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   20430:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   20440:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   20450:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   20460:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   20470:	04020855 03090a1c 03070308 03030302     U...............
   20480:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   20490:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   204a0:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   204b0:	03b08205 fd82061a 15075903 1409170b     .........Y......
   204c0:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   204d0:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   204e0:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   204f0:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   20500:	048c800f 0b199782 05948815 073b052f     ............/.;.
   20510:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   20520:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   20530:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   20540:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   20550:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   20560:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   20570:	80044c06 be80048d 0f031b03 0106000d     .L..............
   20580:	04010301 09080802 0b050a02 11011002     ................
   20590:	13051204 15021411 19021702 1d051c04     ................
   205a0:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   205b0:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   205c0:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   205d0:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   205e0:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   205f0:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   20600:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   20610:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   20620:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   20630:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   20640:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   20650:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   20660:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   20670:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   20680:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   20690:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   206a0:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   206b0:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   206c0:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   206d0:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   206e0:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   206f0:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   20700:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   20710:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   20720:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   20730:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   20740:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   20750:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   20760:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   20770:	81080411 6b04898c 09030d05 60931007     .......k.......`
   20780:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   20790:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   207a0:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   207b0:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   207c0:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   207d0:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   207e0:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   207f0:	31037752 0ca68003 05030414 85060d03     Rw.1............
   20800:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   20810:	65646f63 646f6d2f 0073722e 00020801     code/mod.rs.....
   20820:	0000001a 00000038 0000000f 00020801     ....8...........
   20830:	0000001a 00000039 00000010              ....9.......

0002083c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   2083c:	1b150f04 17120319 0e000011 00000016     ................
	...
   20864:	00130600 00000000 00000000 00000000     ................
   20874:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   20894:	01050000 00000000 00000000 00000000     ................
   208a4:	00000000 10000000 00000000 0009000b     ................
   208b4:	                                         ...

000208b7 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   208d3:	00120f00 00000000 00000000 00000000     ................
   208e3:	0000001f 00000000 00000000 00000000     ................
   208f3:	1d664649 00000000 00000000 00000000     IFf.............
   20903:	00003e8a 00000000 00000000 4b000000     .>.............K
   20913:	00000053 00000000 00000000 42236700     S............g#B
	...
   2092f:	0000003d 00230000 00000000 00000000     =.....#.........
   2093f:	2d000075 00000000 00000000 00000000     u..-............
   2094f:	003c4e82 00000000 00000000 63000000     .N<............c
   2095f:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   2096f:	00000300 00000000 00000000 0000002f     ............/...
   2097f:	00000000 00001000 13000000 00000800     ................
	...
   20997:	43000000 89007200 00000000 00000000     ...C.r..........
   209a7:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   209b7:	00210000 00000000 00000000 00000000     ..!.............
   209c7:	4100000a 00000000 00000000 00000000     ...A............
   209d7:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   209e7:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   209f7:	00000031 00000053 3a000000 00000000     1...S......:....
   20a07:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   20a17:	0017003b 00000000 00000000 00000000     ;...............
   20a27:	57000055 83000000 00000000 00000000     U..W............
   20a37:	00000059 26000000 00161b6e 00000000     Y......&n.......
   20a47:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   20a57:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   20a67:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   20a77:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   20a87:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   20a97:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00020aa8 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   20ab0:	00000001 00000000 0000000d 00000000     ................
   20ac0:	0000001c 00000000 00000040 00000000     ........@.......
   20ad0:	000000b6 00000000 000000bf 00000000     ................
   20ae0:	000003f8 00000000 000007f0 00000000     ................
   20af0:	000007ff 00000000 00001000 00000000     ................
   20b00:	00001e00 00000000 00003800 00000000     .........8......
   20b10:	00003f00 00000000 00007f80 00000000     .?..............
   20b20:	00008000 00000000 0001ffc0 00000000     ................
   20b30:	0003ff80 00000000 00078000 00000000     ................
   20b40:	007f0000 00000000 00802001 00000000     ......... ......
   20b50:	00a30000 00000000 037ffc00 00000000     ................
   20b60:	06000000 00000000 07ff0000 00000000     ................
   20b70:	09800000 00000000 0e000000 00000000     ................
   20b80:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   20b90:	200ffe40 00000000 30000001 00000000     @.. .......0....
   20ba0:	40000000 00000000 4000005c 00000000     ...@....\..@....
   20bb0:	60000000 00000000 805c8400 00000000     ...`......\.....
   20bc0:	c0000000 00000000 e0000000 00000000     ................
   20bd0:	00000000 00000001 0cf00000 00000001     ................
   20be0:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   20bf0:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   20c00:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   20c10:	00000000 00000060 00000844 00000060     ....`...D...`...
   20c20:	00000000 000000f0 00000060 00000200     ........`.......
   20c30:	f9ffff7f 000007db 80000000 000007f8     ................
   20c40:	e0000000 00000fbc 00000000 00002120     ............ !..
   20c50:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   20c60:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   20c70:	00000000 00003fc0 00000000 0000f000     .....?..........
   20c80:	00000000 0000fc00 f8000010 0000fffe     ................
   20c90:	0000ffff 0000ffff ffffffff 0000ffff     ................
   20ca0:	fffff800 00010000 00000000 0001ffc0     ................
   20cb0:	ffff0000 0001ffff 00000000 00030000     ................
   20cc0:	00000000 00038000 00000000 0003a340     ............@...
   20cd0:	00000000 00080000 000c0000 000c0000     ................
   20ce0:	00000004 000ff800 00000000 00180000     ................
   20cf0:	001c0000 001c0000 c3000000 001e0001     ................
   20d00:	00000000 001f0000 00800001 001f1fc0     ................
   20d10:	00000007 001fef80 ffffffff 00201fff     .............. .
   20d20:	00023986 00230000 00000002 00403000     .9....#......0@.
   20d30:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   20d40:	00000000 007f0000 00000000 00bf2800     .............(..
   20d50:	00000000 00cff000 03000000 02a00000     ................
   20d60:	fff70000 031021fd 00000003 06780000     .....!........x.
   20d70:	00000000 06ff8000 00000000 07c00000     ................
   20d80:	00000000 07f20000 00000000 0e040187     ................
   20d90:	00000006 10000000 00001008 10000000     ................
   20da0:	00000007 14000000 0000000f 17f00000     ................
   20db0:	00000000 1ff20000 feffe0df 1fffffff     ................
   20dc0:	00000000 20000000 00000000 200ff800     ....... ....... 
   20dd0:	00000007 33c80000 00000000 3fb00000     .......3.......?
   20de0:	00000000 3ff78000 00000004 40000000     .......?.......@
   20df0:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   20e00:	00000002 50000000 00000003 58000000     .......P.......X
   20e10:	00000000 66fde000 000007fe 79f80000     .......f.......y
   20e20:	00000003 7fc00000 00000000 7ffe0000     ................
   20e30:	00000000 7fff0000 00000000 80000000     ................
   20e40:	0000007f 80000000 00000030 8003ffff     ........0.......
   20e50:	0000f06e 87000000 00000002 90000000     n...............
   20e60:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   20e70:	00000000 a7f80000 00000000 b03c8000     ..............<.
   20e80:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   20e90:	fffe0000 bfffffff 00000011 c0000000     ................
   20ea0:	00000000 c19d0000 00000002 d0000000     ................
   20eb0:	00000000 f807c3a0 ffffffff f87fffff     ................
   20ec0:	ffffffff fbffffff 000021be fc00000c     .........!......
   20ed0:	00000000 ff000000 00000002 ff000000     ................
   20ee0:	00020000 ffff0000 fff80000 fffffffb     ................
   20ef0:	00000000 ffffffff ffffffff ffffffff     ................
   20f00:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00020f10 <nrf52_hal_i2cs>:
   20f10:	00000000 20000108                       ....... 

00020f18 <nrf52_hal_spis>:
   20f18:	2000a570 00000000 00000000 65737341     p.. ........Asse
   20f28:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   20f38:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   20f48:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   20f58:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   20f68:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   20f78:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   20f88:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   20f98:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   20fa8:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   20fb8:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   20fc8:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   20fd8:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   20fe8:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   20ff8:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   21008:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   21018:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   21028:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   21038:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   21048:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   21058:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   21068:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   21078:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   21088:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   21098:	00000000 656c6469 00000000 7379736d     ....idle....msys
   210a8:	0000315f                                _1..

000210ac <MemFile_methods>:
   210ac:	0001b6f1 00000000                       ........

000210b4 <stdout>:
   210b4:	20000124                                $.. 

000210b8 <nrf52k_flash_dev>:
   210b8:	000210d0 00000000 00080000 00000080     ................
   210c8:	00000001 000000ff                       ........

000210d0 <nrf52k_flash_funcs>:
   210d0:	0001b95d 0001b88d 0001b815 0001b86d     ]...........m...
   210e0:	00000000 0001b869 00000000              ....i.......

000210ec <nrf52_hal_timers>:
   210ec:	2000a680 00000000 00000000 00000000     ... ............
	...

00021104 <hal_i2c1_cfg>:
   21104:	00000007 00000006 00000064              ........d...

00021110 <os_bsp_spi0m_cfg>:
   21110:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   21120:	7476655f 00000073                       _evts...

00021128 <COLLECTOR_NODE_HW_ID>:
   21128:	066aff57 50547878 67242949              W.j.xxTPI)$g

00021134 <SENSOR_NODE_HW_IDS>:
   21134:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   21144:	08070605 020b0a09 04030201 08070605     ................
   21154:	030b0a09 04030201 08070605 040b0a09     ................
   21164:	04030201 08070605 050b0a09 77687325     ............%shw
   21174:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   21184:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   21194:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   211a4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   211b4:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   211c4:	0a732520 00000000 00000000               %s.........

000211d0 <sensor_node_addresses>:
   211d0:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   211e0:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   211f0:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   21200:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   21210:	00000a73                                s...

00021214 <g_temp_stub_sensor_driver>:
   21214:	0001c799 0001c6a1 00000000 00000000     ................
	...
   2123c:	20425453 64616572 6d657420 65732070     STB read temp se
   2124c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   2125c:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0002126c <sysflash_map_dflt>:
	...
   21274:	00004000 00000001 00008000 00073c00     .@...........<..
   21284:	00000002 0007bc00 00000400 00000003     ................
   21294:	0007c000 00001000 00000010 00004000     .............@..
   212a4:	00004000 00000011 0007d000 00003000     .@...........0..
   212b4:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   212c4:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 103116	    108	  42728	 145952	  23a20	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
