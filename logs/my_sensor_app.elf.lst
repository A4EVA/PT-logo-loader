
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x0001f59c vaddr 0x0001f59c paddr 0x0001f59c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0001f5b4 memsz 0x0001f5b4 flags rwx
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x0001f5b4 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00020148 vaddr 0x20000148 paddr 0x0001f620 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001757c  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001f59c  0001f59c  00020144  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001f59c  0001f59c  0001f59c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00020144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0001f5b4  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00020144  2**0  CONTENTS
  8 .bss               0000de40  20000148  0001f620  00020148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00020148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000202f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00020333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000203b2  2**0  CONTENTS, READONLY
 13 .debug_line        000490cd  00000000  00000000  000203b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000851a7  00000000  00000000  00069483  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000e307  00000000  00000000  000ee62a  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     000059b8  00000000  00000000  000fc938  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00059361  00000000  00000000  001022f0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000134bc  00000000  00000000  0015b651  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00019ca0  00000000  00000000  0016eb0d  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000e840  00000000  00000000  001887b0  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000053  00000000  00000000  00196ff0  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00014a97  00000000  00000000  00197043  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00030880  00000000  00000000  001abada  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
0001f59c l    d  .ARM.extab	00000000 .ARM.extab
0001f59c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0002bf00 l       .debug_str	00000000 
00051b8c l       .debug_str	00000000 
000522f3 l       .debug_str	00000000 
000515c0 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002bf2d l       .debug_str	00000000 
0002bf1f l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000547e5 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005366e l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003ee3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002beec l       .debug_str	00000000 
000572a6 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016ef9 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000012fa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
0000133d l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
00001398 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00001433 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00001478 l       .debug_str	00000000 
0001aace l       .debug_str	00000000 
000014a3 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002beec l       .debug_str	00000000 
00001501 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011087 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f9a4 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000579a5 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00016034 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
0000153e l       .debug_str	00000000 
000015c3 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
000547ee l       .debug_str	00000000 
00001600 l       .debug_str	00000000 
000373ca l       .debug_str	00000000 
00001628 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00001692 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00058d3a l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000171b l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
00001783 l       .debug_str	00000000 
0000178c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
0005170d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
00053b33 l       .debug_str	00000000 
000018af l       .debug_str	00000000 
0000191c l       .debug_str	00000000 
0000198e l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000019ec l       .debug_str	00000000 
000464ea l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
00003138 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
00003691 l       .debug_str	00000000 
000036df l       .debug_str	00000000 
0000371f l       .debug_str	00000000 
00003746 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
00003794 l       .debug_str	00000000 
00003803 l       .debug_str	00000000 
0000382e l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
000038b1 l       .debug_str	00000000 
00003921 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000394d l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016ef9 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00047069 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00057a6f l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
000562a5 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
000251a2 l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00055e32 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
00055d1b l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
000551df l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
00056069 l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
00055297 l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005623d l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
00055f05 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005539a l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002b9eb l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003b45 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00003aba l       .debug_str	00000000 
00003b1d l       .debug_str	00000000 
00003bc3 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c69 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00003cff l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00003979 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa5a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000049f0 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a8e l       .debug_str	00000000 
00004af6 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004bb3 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00004c35 l       .debug_str	00000000 
00004caf l       .debug_str	00000000 
00004d1b l       .debug_str	00000000 
00004d94 l       .debug_str	00000000 
00004e0d l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004ee7 l       .debug_str	00000000 
00004eee l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00004f21 l       .debug_str	00000000 
00004f96 l       .debug_str	00000000 
00005013 l       .debug_str	00000000 
00004f12 l       .debug_str	00000000 
0000501f l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00047069 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
000050ff l       .debug_str	00000000 
0000517d l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005267 l       .debug_str	00000000 
00005281 l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
000052f6 l       .debug_str	00000000 
00005302 l       .debug_str	00000000 
00005378 l       .debug_str	00000000 
000053ee l       .debug_str	00000000 
00005464 l       .debug_str	00000000 
000054cc l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
0000553b l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
000055a8 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00005632 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
000056b4 l       .debug_str	00000000 
00053676 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000056e9 l       .debug_str	00000000 
000530af l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00005723 l       .debug_str	00000000 
00052f56 l       .debug_str	00000000 
000583ed l       .debug_str	00000000 
00005756 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00005763 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00016034 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
00005784 l       .debug_str	00000000 
00005789 l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
00005798 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
000057a8 l       .debug_str	00000000 
000057b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003d2b l       .debug_str	00000000 
00013bba l       .debug_str	00000000 
00003d9f l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003dab l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002b9eb l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e04 l       .debug_str	00000000 
00003e0f l       .debug_str	00000000 
00003e1a l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00003ed4 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003eb2 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003eb9 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003ee8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003f45 l       .debug_str	00000000 
00003faa l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fd4 l       .debug_str	00000000 
00003fbb l       .debug_str	00000000 
00003fec l       .debug_str	00000000 
00004012 l       .debug_str	00000000 
0000408a l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
00004101 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
000041e2 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
0000424c l       .debug_str	00000000 
000042c5 l       .debug_str	00000000 
000583eb l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000042ca l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000042f0 l       .debug_str	00000000 
000042d7 l       .debug_str	00000000 
000042d2 l       .debug_str	00000000 
000042fb l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000043ef l       .debug_str	00000000 
000043ff l       .debug_str	00000000 
00004477 l       .debug_str	00000000 
00052c06 l       .debug_str	00000000 
00052960 l       .debug_str	00000000 
00004481 l       .debug_str	00000000 
00004488 l       .debug_str	00000000 
000044ab l       .debug_str	00000000 
00004492 l       .debug_str	00000000 
0000448d l       .debug_str	00000000 
000044b5 l       .debug_str	00000000 
000044cd l       .debug_str	00000000 
00004537 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
000045ac l       .debug_str	00000000 
00004613 l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
00004857 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004903 l       .debug_str	00000000 
00004972 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000077a3 l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00028fe7 l       .debug_str	00000000 
00021e9f l       .debug_str	00000000 
0000a289 l       .debug_str	00000000 
0000a2b9 l       .debug_str	00000000 
0000a517 l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
0000a547 l       .debug_str	00000000 
0000a551 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000057b8 l       .debug_str	00000000 
000057e8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00028f73 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000220f3 l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005a5d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
0000ac10 l       .debug_str	00000000 
0000ac19 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a7fe l       .debug_str	00000000 
0000b122 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000a835 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
0000a89c l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000a8f0 l       .debug_str	00000000 
0000a937 l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0000a995 l       .debug_str	00000000 
0000aa11 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0000aa3b l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d245 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013baa l       .debug_str	00000000 
0000ab94 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
00054ad1 l       .debug_str	00000000 
0000ae2c l       .debug_str	00000000 
00051687 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000590ff l       .debug_str	00000000 
000590fe l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00016034 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000251a2 l       .debug_str	00000000 
000251a7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ac20 l       .debug_str	00000000 
000515aa l       .debug_str	00000000 
0000ac24 l       .debug_str	00000000 
0000ac55 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
0000ac9c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000acb1 l       .debug_str	00000000 
0000ace8 l       .debug_str	00000000 
0000acf3 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
0000ad25 l       .debug_str	00000000 
000516ee l       .debug_str	00000000 
0000ad59 l       .debug_str	00000000 
000516dd l       .debug_str	00000000 
0000ad8d l       .debug_str	00000000 
00051695 l       .debug_str	00000000 
0000adc4 l       .debug_str	00000000 
00051727 l       .debug_str	00000000 
0000adfc l       .debug_str	00000000 
00051558 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003df8 l       .debug_str	00000000 
0000b173 l       .debug_str	00000000 
0000b19a l       .debug_str	00000000 
0000b1a5 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
000555e6 l       .debug_str	00000000 
000528f0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ae5d l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0000ae93 l       .debug_str	00000000 
0000aea5 l       .debug_str	00000000 
0000aeb6 l       .debug_str	00000000 
0000af02 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000af0e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00047069 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00057a6f l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000af12 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
000562a5 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
000251a2 l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00055e32 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
00055d1b l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
000551df l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
00056069 l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
00055297 l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005623d l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
00055f05 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005539a l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002b9eb l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00052413 l       .debug_str	00000000 
0000af1f l       .debug_str	00000000 
0000afd7 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b071 l       .debug_str	00000000 
0000b08a l       .debug_str	00000000 
0000b0c4 l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b11c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
0000b139 l       .debug_str	00000000 
0000b143 l       .debug_str	00000000 
0000b169 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005713f l       .debug_str	00000000 
0000b29d l       .debug_str	00000000 
0000b2d9 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003155 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011c14 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0000b6f3 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000b318 l       .debug_str	00000000 
0000b360 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
0000b37f l       .debug_str	00000000 
0000b3ba l       .debug_str	00000000 
0000b3df l       .debug_str	00000000 
0000b406 l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b46f l       .debug_str	00000000 
0000b4da l       .debug_str	00000000 
0000b4ea l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00047069 l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00057a6f l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
000562a5 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
000251a2 l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00055e32 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
00055d1b l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
000551df l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
00056069 l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
00055297 l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005623d l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
00055f05 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005539a l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
0002b9eb l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b569 l       .debug_str	00000000 
0000b5cc l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0000b64c l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0000ba46 l       .debug_str	00000000 
0000ba77 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000ba91 l       .debug_str	00000000 
0000bac2 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0000baf2 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0000bb3f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000bb45 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
0000bbea l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bd09 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bdae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000579a5 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
0000bd2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000b7ba l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0000b80b l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000b85b l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b8a3 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000b8f4 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0000b945 l       .debug_str	00000000 
0000b976 l       .debug_str	00000000 
00019145 l       .debug_str	00000000 
0000b97f l       .debug_str	00000000 
0000b9b0 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
0000b9ba l       .debug_str	00000000 
0000b9eb l       .debug_str	00000000 
00019159 l       .debug_str	00000000 
0000ba0b l       .debug_str	00000000 
0000ba3c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000bf55 l       .debug_str	00000000 
0000be52 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0000beab l       .debug_str	00000000 
0000beb7 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
0000bf0a l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa5a l       .debug_str	00000000 
00009440 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c225 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000259c9 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
000275c4 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00019328 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000c33d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001914f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
00016966 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00022f76 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c042 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
000550a0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00022f5c l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000524d3 l       .debug_str	00000000 
00022f9f l       .debug_str	00000000 
00057f7b l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
000573b7 l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
00056a0f l       .debug_str	00000000 
0000e73f l       .debug_str	00000000 
0000c071 l       .debug_str	00000000 
0000c0b1 l       .debug_str	00000000 
0000c0c0 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c108 l       .debug_str	00000000 
0000c14f l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a1 l       .debug_str	00000000 
0000c1ac l       .debug_str	00000000 
0000c1b5 l       .debug_str	00000000 
0000c1bd l       .debug_str	00000000 
000542b8 l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00010a38 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c218 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0001688e l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000191be l       .debug_str	00000000 
00057838 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e3ad l       .debug_str	00000000 
0000e311 l       .debug_str	00000000 
0000e357 l       .debug_str	00000000 
0000e3f6 l       .debug_str	00000000 
0000e43c l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
000110ed l       .debug_str	00000000 
0000e476 l       .debug_str	00000000 
0000e4bd l       .debug_str	00000000 
0000e50b l       .debug_str	00000000 
0000e557 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c225 l       .debug_str	00000000 
0001688e l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
000191be l       .debug_str	00000000 
00057838 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
000259c9 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
000275c4 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00019328 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000e597 l       .debug_str	00000000 
0000e643 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e715 l       .debug_str	00000000 
0000e72e l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
0001f978 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
0001d467 l       .debug_str	00000000 
0000e77e l       .debug_str	00000000 
00038801 l       .debug_str	00000000 
0001a3d8 l       .debug_str	00000000 
000353b1 l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
000107c4 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00022a78 l       .debug_str	00000000 
0000e788 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00025a0e l       .debug_str	00000000 
0000e78f l       .debug_str	00000000 
000550a1 l       .debug_str	00000000 
0000c05e l       .debug_str	00000000 
00016966 l       .debug_str	00000000 
000542b8 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e7b3 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
0000e7cb l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e7d8 l       .debug_str	00000000 
00059227 l       .debug_str	00000000 
0000e7e5 l       .debug_str	00000000 
0000e85c l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001926f l       .debug_str	00000000 
0000e88b l       .debug_str	00000000 
0000e8c0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e722 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e94e l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00056914 l       .debug_str	00000000 
0000c488 l       .debug_str	00000000 
000550a0 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00022f5c l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000524d3 l       .debug_str	00000000 
00022f9f l       .debug_str	00000000 
00057f7b l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
000573b7 l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
00056a0f l       .debug_str	00000000 
0000e73f l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000c4a4 l       .debug_str	00000000 
0000c4e0 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
0000c4ff l       .debug_str	00000000 
0000c54d l       .debug_str	00000000 
0000c58e l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
0000c63c l       .debug_str	00000000 
0000c6a8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010422 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
0000dd6b l       .debug_str	00000000 
0000ddb9 l       .debug_str	00000000 
0000df39 l       .debug_str	00000000 
0000df87 l       .debug_str	00000000 
0000dfc8 l       .debug_str	00000000 
0000e016 l       .debug_str	00000000 
0000e057 l       .debug_str	00000000 
0000e0a7 l       .debug_str	00000000 
0000e229 l       .debug_str	00000000 
0000e27a l       .debug_str	00000000 
0000e2be l       .debug_str	00000000 
0001bb20 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c488 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e934 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e94e l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00056914 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e8cc l       .debug_str	00000000 
0000e908 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e9a9 l       .debug_str	00000000 
0000e99e l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0000e9e7 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e95a l       .debug_str	00000000 
0000a434 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f578 l       .debug_str	00000000 
0000ff39 l       .debug_str	00000000 
0001008c l       .debug_str	00000000 
000100bc l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
00010a38 l       .debug_str	00000000 
00010a1b l       .debug_str	00000000 
000101e3 l       .debug_str	00000000 
00010213 l       .debug_str	00000000 
00010abf l       .debug_str	00000000 
00010a61 l       .debug_str	00000000 
00010255 l       .debug_str	00000000 
00010285 l       .debug_str	00000000 
000102d4 l       .debug_str	00000000 
00010304 l       .debug_str	00000000 
00010316 l       .debug_str	00000000 
00010346 l       .debug_str	00000000 
0001037f l       .debug_str	00000000 
00010388 l       .debug_str	00000000 
000103b5 l       .debug_str	00000000 
000103f8 l       .debug_str	00000000 
0001040e l       .debug_str	00000000 
00010552 l       .debug_str	00000000 
000105ee l       .debug_str	00000000 
000106b8 l       .debug_str	00000000 
000106d1 l       .debug_str	00000000 
000107b0 l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
00010a16 l       .debug_str	00000000 
00010a4e l       .debug_str	00000000 
00010a93 l       .debug_str	00000000 
00010a9b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
0000e9f9 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000ea1e l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
0000ea2a l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eacc l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000eadf l       .debug_str	00000000 
0000eae5 l       .debug_str	00000000 
0000eaec l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000eaf4 l       .debug_str	00000000 
0000ec06 l       .debug_str	00000000 
0000ed35 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
0000ee63 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0001090d l       .debug_str	00000000 
000103ac l       .debug_str	00000000 
0000ef89 l       .debug_str	00000000 
0000efb9 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000103c8 l       .debug_str	00000000 
0000eff0 l       .debug_str	00000000 
0000f020 l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
0000f06d l       .debug_str	00000000 
0000f09d l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
00010422 l       .debug_str	00000000 
0000f0bd l       .debug_str	00000000 
0000f0ed l       .debug_str	00000000 
0000e8c5 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000191be l       .debug_str	00000000 
0000f259 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
000259c9 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
000275c4 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00027558 l       .debug_str	00000000 
0000f266 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00010576 l       .debug_str	00000000 
0000f272 l       .debug_str	00000000 
0000f2a2 l       .debug_str	00000000 
0000f348 l       .debug_str	00000000 
0000f34d l       .debug_str	00000000 
0000f353 l       .debug_str	00000000 
0000f35c l       .debug_str	00000000 
00054d19 l       .debug_str	00000000 
00010612 l       .debug_str	00000000 
0000f366 l       .debug_str	00000000 
0000f396 l       .debug_str	00000000 
0000f46a l       .debug_str	00000000 
00056557 l       .debug_str	00000000 
000251a7 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
0000f470 l       .debug_str	00000000 
0000f4a0 l       .debug_str	00000000 
0000f4c3 l       .debug_str	00000000 
0000f4f0 l       .debug_str	00000000 
0000f511 l       .debug_str	00000000 
0000f618 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f6f2 l       .debug_str	00000000 
0000f769 l       .debug_str	00000000 
0000f7ed l       .debug_str	00000000 
0000f868 l       .debug_str	00000000 
0000f906 l       .debug_str	00000000 
0000f9b1 l       .debug_str	00000000 
0000fa53 l       .debug_str	00000000 
0000fb27 l       .debug_str	00000000 
0000fc18 l       .debug_str	00000000 
0000fd08 l       .debug_str	00000000 
000106e5 l       .debug_str	00000000 
0000fdf0 l       .debug_str	00000000 
0000fe20 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
000107c4 l       .debug_str	00000000 
0000ff09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00052278 l       .debug_str	00000000 
00010aca l       .debug_str	00000000 
00010afb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001914f l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00010b04 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
000138da l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010c68 l       .debug_str	00000000 
00010c74 l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
000259ae l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e934 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e94e l       .debug_str	00000000 
00010b7a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010ba0 l       .debug_str	00000000 
00010c61 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
000259ae l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e715 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e722 l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010d62 l       .debug_str	00000000 
00010c61 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010c68 l       .debug_str	00000000 
00010e09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
00010f00 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010c68 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00010b7a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00010eb0 l       .debug_str	00000000 
00010ee9 l       .debug_str	00000000 
000259ae l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00010b7a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00010f39 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00011099 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011024 l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011087 l       .debug_str	00000000 
0001107b l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0001108e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00057add l       .debug_str	00000000 
00054f98 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000560e8 l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
0001143d l       .debug_str	00000000 
00011464 l       .debug_str	00000000 
0001146c l       .debug_str	00000000 
00011473 l       .debug_str	00000000 
00011479 l       .debug_str	00000000 
00011480 l       .debug_str	00000000 
00054ad2 l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00011495 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
000114a3 l       .debug_str	00000000 
000114a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000547e5 l       .debug_str	00000000 
000112e4 l       .debug_str	00000000 
000110a4 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
000524d3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00022f9f l       .debug_str	00000000 
000110b0 l       .debug_str	00000000 
000110e7 l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
0001112a l       .debug_str	00000000 
00011135 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001113d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00011144 l       .debug_str	00000000 
0001114b l       .debug_str	00000000 
00057e5a l       .debug_str	00000000 
00011154 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
0001115e l       .debug_str	00000000 
00011455 l       .debug_str	00000000 
00011168 l       .debug_str	00000000 
0001a5b1 l       .debug_str	00000000 
0001119e l       .debug_str	00000000 
000111cc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000111d8 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
0005798e l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00011218 l       .debug_str	00000000 
0001122c l       .debug_str	00000000 
0001125f l       .debug_str	00000000 
0001126a l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000112a0 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000360da l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000112f1 l       .debug_str	00000000 
00011334 l       .debug_str	00000000 
0001134c l       .debug_str	00000000 
0001138c l       .debug_str	00000000 
000113a1 l       .debug_str	00000000 
000113db l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
00011429 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00019145 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000aeac l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000b5fe l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000ad72 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000ad26 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001bd40 l     O .text	00000021 str.0
0001bd80 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
00011ab0 l       .debug_str	00000000 
000373ca l       .debug_str	00000000 
0001163e l       .debug_str	00000000 
000475ff l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00011678 l       .debug_str	00000000 
000116b5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
000116c4 l       .debug_str	00000000 
000116c8 l       .debug_str	00000000 
000116d9 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0001174c l       .debug_str	00000000 
00011758 l       .debug_str	00000000 
00011787 l       .debug_str	00000000 
00052392 l       .debug_str	00000000 
000117e1 l       .debug_str	00000000 
000353b0 l       .debug_str	00000000 
0001183a l       .debug_str	00000000 
00011898 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
000118ff l       .debug_str	00000000 
00011908 l       .debug_str	00000000 
0001196b l       .debug_str	00000000 
00011978 l       .debug_str	00000000 
000119d7 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000119e1 l       .debug_str	00000000 
000119f0 l       .debug_str	00000000 
00011a4b l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011a51 l       .debug_str	00000000 
00011aab l       .debug_str	00000000 
00053655 l       .debug_str	00000000 
00011b0b l       .debug_str	00000000 
00011b3b l       .debug_str	00000000 
00011b48 l       .debug_str	00000000 
00011ba4 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
000191be l       .debug_str	00000000 
0000f259 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
000259c9 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
000275c4 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
000274ed l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
00057adc l       .debug_str	00000000 
00011baf l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00011bc1 l       .debug_str	00000000 
000131af l       .debug_str	00000000 
00011bc4 l       .debug_str	00000000 
0004473c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005314e l       .debug_str	00000000 
00057a67 l       .debug_str	00000000 
000259ae l       .debug_str	00000000 
00011bc7 l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
00012b80 l       .debug_str	00000000 
00053b34 l       .debug_str	00000000 
00011bcf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011bdb l       .debug_str	00000000 
000539ac l       .debug_str	00000000 
00054407 l       .debug_str	00000000 
0001158c l       .debug_str	00000000 
00054029 l       .debug_str	00000000 
000124c5 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00011bf6 l       .debug_str	00000000 
000353af l       .debug_str	00000000 
0001108c l       .debug_str	00000000 
0003e2ea l       .debug_str	00000000 
0000237c l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011c10 l       .debug_str	00000000 
00011c1b l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011c27 l       .debug_str	00000000 
00011c32 l       .debug_str	00000000 
00011c3d l       .debug_str	00000000 
00011c48 l       .debug_str	00000000 
00011c53 l       .debug_str	00000000 
00011c5e l       .debug_str	00000000 
00011c69 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000547e5 l       .debug_str	00000000 
00011bbb l       .debug_str	00000000 
000114ac l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000114b7 l       .debug_str	00000000 
000114e5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000114f6 l       .debug_str	00000000 
0001152a l       .debug_str	00000000 
00011538 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
0001157b l       .debug_str	00000000 
00011586 l       .debug_str	00000000 
00011592 l       .debug_str	00000000 
0001159c l       .debug_str	00000000 
000124d6 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001a386 l       .debug_str	00000000 
00011c07 l       .debug_str	00000000 
000115a9 l       .debug_str	00000000 
000115d4 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000360da l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000115dd l       .debug_str	00000000 
00022a1e l       .debug_str	00000000 
00011609 l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
0000ba3c l     F .text	00000364 _ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E
0000b966 l     F .text	00000036 _ZN3app5chip813PixelIterator3new17h8011ce45451de010E
0000b99c l     F .text	000000a0 _ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0000bfd4 l     F .text	000000e0 _ZN3app5chip88Hardware3new17h2513f3a9e68453b3E
0000b8b0 l     F .text	000000b6 _ZN3app5chip89task_func17h385831a0096277b5E
0001c5a0 l     O .text	00000021 str.0
0001c5f0 l     O .text	00000021 str.1
0001c630 l     O .text	0000001c str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
00011e74 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00011e39 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00011edd l       .debug_str	00000000 
00011f48 l       .debug_str	00000000 
00011f84 l       .debug_str	00000000 
00011fd1 l       .debug_str	00000000 
0001200d l       .debug_str	00000000 
0001201b l       .debug_str	00000000 
00012086 l       .debug_str	00000000 
000120a1 l       .debug_str	00000000 
0001210d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012164 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00011c98 l       .debug_str	00000000 
00011c7d l       .debug_str	00000000 
00011cc7 l       .debug_str	00000000 
00012177 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f9a4 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
00011d19 l       .debug_str	00000000 
00011d28 l       .debug_str	00000000 
00011d61 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000119e1 l       .debug_str	00000000 
00011dc0 l       .debug_str	00000000 
00011df9 l       .debug_str	00000000 
00011e22 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
000353b1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
00016966 l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
000547e5 l       .debug_str	00000000 
00011bbb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
0001157b l       .debug_str	00000000 
00011586 l       .debug_str	00000000 
00011592 l       .debug_str	00000000 
0001159c l       .debug_str	00000000 
000124d6 l       .debug_str	00000000 
000124c5 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
000121c4 l       .debug_str	00000000 
00012210 l       .debug_str	00000000 
0000e77e l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00038801 l       .debug_str	00000000 
0001a3d8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
00012341 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e72e l       .debug_str	00000000 
0000e77e l       .debug_str	00000000 
00038801 l       .debug_str	00000000 
0001a3d8 l       .debug_str	00000000 
000353b1 l       .debug_str	00000000 
0000e781 l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
000550a0 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00022f5c l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000524d3 l       .debug_str	00000000 
00022f9f l       .debug_str	00000000 
00057f7b l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
000573b7 l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
00056a0f l       .debug_str	00000000 
0000e73f l       .debug_str	00000000 
000547e5 l       .debug_str	00000000 
00011bbb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
0001157b l       .debug_str	00000000 
00011586 l       .debug_str	00000000 
00011592 l       .debug_str	00000000 
0001159c l       .debug_str	00000000 
000124d6 l       .debug_str	00000000 
000124c5 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
00012243 l       .debug_str	00000000 
00012291 l       .debug_str	00000000 
000122f1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4ae8jurj2cyz895o
000002a2 l       .debug_str	00000000 
000124a0 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001174c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000124c0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000123a3 l       .debug_str	00000000 
000547e5 l       .debug_str	00000000 
00011bbb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
0001157b l       .debug_str	00000000 
00011586 l       .debug_str	00000000 
00011592 l       .debug_str	00000000 
0001159c l       .debug_str	00000000 
000124d6 l       .debug_str	00000000 
000124c5 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
000123ac l       .debug_str	00000000 
0001240f l       .debug_str	00000000 
00012439 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
000526b3 l       .debug_str	00000000 
00011bc1 l       .debug_str	00000000 
000131af l       .debug_str	00000000 
00011bc4 l       .debug_str	00000000 
0004473c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005314e l       .debug_str	00000000 
00057a67 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
0001300a l       .debug_str	00000000 
0001307c l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012bb7 l       .debug_str	00000000 
00012177 l       .debug_str	00000000 
00012bad l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00012ba5 l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
00012ba1 l       .debug_str	00000000 
00012b9c l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00053b34 l       .debug_str	00000000 
00012b71 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011d19 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00012b52 l       .debug_str	00000000 
00012b18 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00012afa l       .debug_str	00000000 
00012ac1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00012aa5 l       .debug_str	00000000 
000259ae l       .debug_str	00000000 
00011bc7 l       .debug_str	00000000 
00012a6e l       .debug_str	00000000 
00012a52 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00012a1b l       .debug_str	00000000 
00012a00 l       .debug_str	00000000 
000129ca l       .debug_str	00000000 
000129af l       .debug_str	00000000 
00012979 l       .debug_str	00000000 
0001295e l       .debug_str	00000000 
00012928 l       .debug_str	00000000 
0001290d l       .debug_str	00000000 
000128d7 l       .debug_str	00000000 
000128bc l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
00012814 l       .debug_str	00000000 
000127f2 l       .debug_str	00000000 
0001279e l       .debug_str	00000000 
00012783 l       .debug_str	00000000 
0001274d l       .debug_str	00000000 
00012733 l       .debug_str	00000000 
000126fe l       .debug_str	00000000 
000126e4 l       .debug_str	00000000 
000126af l       .debug_str	00000000 
00012695 l       .debug_str	00000000 
00012660 l       .debug_str	00000000 
00011c98 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
000125d4 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000119e1 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000125b7 l       .debug_str	00000000 
0001252b l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00012523 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00012519 l       .debug_str	00000000 
000124f3 l       .debug_str	00000000 
00012b80 l       .debug_str	00000000 
00011c07 l       .debug_str	00000000 
000124d6 l       .debug_str	00000000 
0001159c l       .debug_str	00000000 
00011592 l       .debug_str	00000000 
00011586 l       .debug_str	00000000 
0001157b l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
00011569 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001a386 l       .debug_str	00000000 
00011bbb l       .debug_str	00000000 
000547e5 l       .debug_str	00000000 
00013826 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00012be3 l       .debug_str	00000000 
00012bdf l       .debug_str	00000000 
000528f0 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000515ec l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000124e4 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
000124e8 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002beb8 l       .debug_str	00000000 
000124ed l       .debug_str	00000000 
0001fb86 l       .debug_str	00000000 
0001f9db l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012bd9 l       .debug_str	00000000 
00012bd3 l       .debug_str	00000000 
00012bcd l       .debug_str	00000000 
00012bc7 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00054ad2 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0001914f l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00012bc4 l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
00012bc0 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00053286 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0001c9d0 l     O .text	0000001c str.0
0001cc50 l     O .text	00000021 str.1
0001cf30 l     O .text	00000039 str.2
0001cf90 l     O .text	00000021 str.3
0001cfd0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00012d96 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000119e1 l       .debug_str	00000000 
00011e22 l       .debug_str	00000000 
00012d02 l       .debug_str	00000000 
00012ddf l       .debug_str	00000000 
00012e29 l       .debug_str	00000000 
00012e7c l       .debug_str	00000000 
00012f0b l       .debug_str	00000000 
00012f6e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00012fe6 l       .debug_str	00000000 
00013058 l       .debug_str	00000000 
00013116 l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00011c7d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00012ba5 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00011c98 l       .debug_str	00000000 
00012bad l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00012177 l       .debug_str	00000000 
00012bb7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001307c l       .debug_str	00000000 
0001300a l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00012be8 l       .debug_str	00000000 
00012c72 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013173 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00013122 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
000131f2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00013180 l       .debug_str	00000000 
00013185 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001318c l       .debug_str	00000000 
00013194 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
0001319c l       .debug_str	00000000 
000131a4 l       .debug_str	00000000 
000131ab l       .debug_str	00000000 
00016b5b l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
000131b2 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fa73 l       .debug_str	00000000 
00013207 l       .debug_str	00000000 
000131b7 l       .debug_str	00000000 
0002b85f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00013313 l       .debug_str	00000000 
00012bb7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001307c l       .debug_str	00000000 
0001300a l       .debug_str	00000000 
000132a4 l       .debug_str	00000000 
000132e5 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
000133b7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
00013407 l       .debug_str	00000000 
00013487 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000119e1 l       .debug_str	00000000 
000134fb l       .debug_str	00000000 
0001357b l       .debug_str	00000000 
00011e22 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011c7d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000123a3 l       .debug_str	00000000 
0002e0bf l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00011c98 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00013213 l       .debug_str	00000000 
00013256 l       .debug_str	00000000 
00012ba5 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00012bad l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00012177 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
00013657 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
00013696 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000119e1 l       .debug_str	00000000 
00013709 l       .debug_str	00000000 
00013748 l       .debug_str	00000000 
00013826 l       .debug_str	00000000 
00013785 l       .debug_str	00000000 
000137e8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001380f l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000123a3 l       .debug_str	00000000 
0002e0bf l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
000135b9 l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00011c98 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00014e86 l       .debug_str	00000000 
00013e77 l       .debug_str	00000000 
00013ea1 l       .debug_str	00000000 
00013eef l       .debug_str	00000000 
00013ef7 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00013f44 l       .debug_str	00000000 
00013f9e l       .debug_str	00000000 
00013fac l       .debug_str	00000000 
00013fff l       .debug_str	00000000 
00014007 l       .debug_str	00000000 
0001405c l       .debug_str	00000000 
00014066 l       .debug_str	00000000 
000140a4 l       .debug_str	00000000 
000140bf l       .debug_str	00000000 
0001411e l       .debug_str	00000000 
00013117 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00014183 l       .debug_str	00000000 
000141b4 l       .debug_str	00000000 
000141bf l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000141f1 l       .debug_str	00000000 
0001421f l       .debug_str	00000000 
00014231 l       .debug_str	00000000 
00014257 l       .debug_str	00000000 
00014263 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
000142aa l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000142f5 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
000142fb l       .debug_str	00000000 
00014387 l       .debug_str	00000000 
000143a2 l       .debug_str	00000000 
000143d2 l       .debug_str	00000000 
00014407 l       .debug_str	00000000 
00014437 l       .debug_str	00000000 
0001444d l       .debug_str	00000000 
00014483 l       .debug_str	00000000 
0001449e l       .debug_str	00000000 
000144d8 l       .debug_str	00000000 
000144f7 l       .debug_str	00000000 
00014533 l       .debug_str	00000000 
00014559 l       .debug_str	00000000 
00014565 l       .debug_str	00000000 
0001458c l       .debug_str	00000000 
00014599 l       .debug_str	00000000 
000147a6 l       .debug_str	00000000 
000145e7 l       .debug_str	00000000 
00014816 l       .debug_str	00000000 
00014638 l       .debug_str	00000000 
0001468a l       .debug_str	00000000 
00014696 l       .debug_str	00000000 
000146e1 l       .debug_str	00000000 
000146f3 l       .debug_str	00000000 
00014736 l       .debug_str	00000000 
00014741 l       .debug_str	00000000 
0001479d l       .debug_str	00000000 
000147ae l       .debug_str	00000000 
0001480d l       .debug_str	00000000 
00014821 l       .debug_str	00000000 
00014877 l       .debug_str	00000000 
0001490c l       .debug_str	00000000 
00014918 l       .debug_str	00000000 
000149b2 l       .debug_str	00000000 
000149c3 l       .debug_str	00000000 
000149e8 l       .debug_str	00000000 
00014a91 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
00014aa2 l       .debug_str	00000000 
00014b2a l       .debug_str	00000000 
00014ae1 l       .debug_str	00000000 
00014b25 l       .debug_str	00000000 
00014b6f l       .debug_str	00000000 
00014bb0 l       .debug_str	00000000 
00014bd5 l       .debug_str	00000000 
00014c26 l       .debug_str	00000000 
00014c6b l       .debug_str	00000000 
00014cbe l       .debug_str	00000000 
00014d1f l       .debug_str	00000000 
00014d86 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00014dcd l       .debug_str	00000000 
00014e18 l       .debug_str	00000000 
00014e25 l       .debug_str	00000000 
00014eff l       .debug_str	00000000 
00014ef7 l       .debug_str	00000000 
00014f07 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00014f23 l       .debug_str	00000000 
00014f98 l       .debug_str	00000000 
00014fc3 l       .debug_str	00000000 
0001503c l       .debug_str	00000000 
00015046 l       .debug_str	00000000 
0001506c l       .debug_str	00000000 
000150a5 l       .debug_str	00000000 
00011d19 l       .debug_str	00000000 
000150bd l       .debug_str	00000000 
000150f6 l       .debug_str	00000000 
0001512e l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00015167 l       .debug_str	00000000 
000151a2 l       .debug_str	00000000 
000151e6 l       .debug_str	00000000 
0001522c l       .debug_str	00000000 
00015268 l       .debug_str	00000000 
00015290 l       .debug_str	00000000 
000152cc l       .debug_str	00000000 
000152f0 l       .debug_str	00000000 
0001534d l       .debug_str	00000000 
00015361 l       .debug_str	00000000 
000153b2 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
000153be l       .debug_str	00000000 
0001540f l       .debug_str	00000000 
00015426 l       .debug_str	00000000 
00015477 l       .debug_str	00000000 
00015495 l       .debug_str	00000000 
000154e6 l       .debug_str	00000000 
000154f8 l       .debug_str	00000000 
00015550 l       .debug_str	00000000 
00015566 l       .debug_str	00000000 
000155c9 l       .debug_str	00000000 
000155f4 l       .debug_str	00000000 
00015657 l       .debug_str	00000000 
000156cc l       .debug_str	00000000 
00015730 l       .debug_str	00000000 
0001573a l       .debug_str	00000000 
000157a5 l       .debug_str	00000000 
000157b4 l       .debug_str	00000000 
00015820 l       .debug_str	00000000 
00015852 l       .debug_str	00000000 
00015878 l       .debug_str	00000000 
000158e7 l       .debug_str	00000000 
00015907 l       .debug_str	00000000 
00015977 l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
00015a0c l       .debug_str	00000000 
00015a8c l       .debug_str	00000000 
00015ad2 l       .debug_str	00000000 
00015afb l       .debug_str	00000000 
00015b02 l       .debug_str	00000000 
00015b3a l       .debug_str	00000000 
00015b79 l       .debug_str	00000000 
00015b80 l       .debug_str	00000000 
00015bf9 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00015c90 l       .debug_str	00000000 
00015d0e l       .debug_str	00000000 
00015d18 l       .debug_str	00000000 
00015da6 l       .debug_str	00000000 
00015e52 l       .debug_str	00000000 
00015e99 l       .debug_str	00000000 
00015ea6 l       .debug_str	00000000 
00015ef3 l       .debug_str	00000000 
00015f06 l       .debug_str	00000000 
00015f58 l       .debug_str	00000000 
00015fc8 l       .debug_str	00000000 
00013bba l       .debug_str	00000000 
00016028 l       .debug_str	00000000 
00016039 l       .debug_str	00000000 
0001609e l       .debug_str	00000000 
000160ce l       .debug_str	00000000 
000160d7 l       .debug_str	00000000 
00016113 l       .debug_str	00000000 
00016127 l       .debug_str	00000000 
00016162 l       .debug_str	00000000 
000161a8 l       .debug_str	00000000 
000161c6 l       .debug_str	00000000 
000161f6 l       .debug_str	00000000 
000161ff l       .debug_str	00000000 
00016239 l       .debug_str	00000000 
0001624b l       .debug_str	00000000 
00016279 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00016280 l       .debug_str	00000000 
0001628c l       .debug_str	00000000 
00016296 l       .debug_str	00000000 
000162a0 l       .debug_str	00000000 
000162c3 l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
00016318 l       .debug_str	00000000 
00016378 l       .debug_str	00000000 
00016384 l       .debug_str	00000000 
000163d4 l       .debug_str	00000000 
00016437 l       .debug_str	00000000 
0001649e l       .debug_str	00000000 
0001650d l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
00013116 l       .debug_str	00000000 
0001659d l       .debug_str	00000000 
000539ac l       .debug_str	00000000 
0001158c l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
000165c4 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000165cb l       .debug_str	00000000 
000528f0 l       .debug_str	00000000 
000165d8 l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000165e3 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00016637 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00016642 l       .debug_str	00000000 
0001666d l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016679 l       .debug_str	00000000 
000166b3 l       .debug_str	00000000 
000166ec l       .debug_str	00000000 
000166fb l       .debug_str	00000000 
0001673e l       .debug_str	00000000 
00053bc1 l       .debug_str	00000000 
0003054c l       .debug_str	00000000 
000555e6 l       .debug_str	00000000 
00016780 l       .debug_str	00000000 
000167a4 l       .debug_str	00000000 
00015d13 l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
0003e2ea l       .debug_str	00000000 
000167ff l       .debug_str	00000000 
00016806 l       .debug_str	00000000 
0002eee6 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00016847 l       .debug_str	00000000 
0001688e l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001fdb2 l       .debug_str	00000000 
00016868 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
0001688a l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011c10 l       .debug_str	00000000 
00011c1b l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011c14 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00013830 l       .debug_str	00000000 
00013888 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000138d5 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000138df l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000138eb l       .debug_str	00000000 
00016653 l       .debug_str	00000000 
00016647 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002d26b l       .debug_str	00000000 
000138fc l       .debug_str	00000000 
00013901 l       .debug_str	00000000 
00013907 l       .debug_str	00000000 
00016b5b l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00012ba5 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001390f l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00013915 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013920 l       .debug_str	00000000 
00013949 l       .debug_str	00000000 
00013958 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
000116c4 l       .debug_str	00000000 
000166f5 l       .debug_str	00000000 
00013972 l       .debug_str	00000000 
0001399b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
000139d0 l       .debug_str	00000000 
000139e4 l       .debug_str	00000000 
000139f7 l       .debug_str	00000000 
00013a43 l       .debug_str	00000000 
00013a51 l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0002d245 l       .debug_str	00000000 
00013a59 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000123a3 l       .debug_str	00000000 
0002e0bf l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013baa l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00016821 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00012bad l       .debug_str	00000000 
00013a63 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
0001505e l       .debug_str	00000000 
000167d7 l       .debug_str	00000000 
00012bb7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
000164c2 l       .debug_str	00000000 
00013a69 l       .debug_str	00000000 
00013a6f l       .debug_str	00000000 
00013a98 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00015047 l       .debug_str	00000000 
00013aa4 l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00013ad1 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00013b05 l       .debug_str	00000000 
00013b0c l       .debug_str	00000000 
00013b36 l       .debug_str	00000000 
00020ad2 l       .debug_str	00000000 
00013b3a l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00013b43 l       .debug_str	00000000 
00013b85 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013b98 l       .debug_str	00000000 
0005710c l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00042999 l       .debug_str	00000000 
00013bb3 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00013bc2 l       .debug_str	00000000 
00013bcc l       .debug_str	00000000 
00016874 l       .debug_str	00000000 
00016034 l       .debug_str	00000000 
00013bd1 l       .debug_str	00000000 
00013c57 l       .debug_str	00000000 
00013c61 l       .debug_str	00000000 
00013cf3 l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
00013d39 l       .debug_str	00000000 
00013dcd l       .debug_str	00000000 
00013e2f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00017250 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000191be l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00016947 l       .debug_str	00000000 
00016950 l       .debug_str	00000000 
00016958 l       .debug_str	00000000 
00016961 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
0001696e l       .debug_str	00000000 
0001697e l       .debug_str	00000000 
0001698f l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
000169a0 l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001926f l       .debug_str	00000000 
000169a9 l       .debug_str	00000000 
000169af l       .debug_str	00000000 
000169ba l       .debug_str	00000000 
000169c4 l       .debug_str	00000000 
000169ce l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00016a16 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
00016a5e l       .debug_str	00000000 
00016aa6 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00016aaf l       .debug_str	00000000 
00016ad8 l       .debug_str	00000000 
00016ae1 l       .debug_str	00000000 
00016b3e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00016b64 l       .debug_str	00000000 
00016b8c l       .debug_str	00000000 
00016bbe l       .debug_str	00000000 
000141b4 l       .debug_str	00000000 
00016bef l       .debug_str	00000000 
00016c4c l       .debug_str	00000000 
00016ca9 l       .debug_str	00000000 
00016d06 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00016d38 l       .debug_str	00000000 
00016d7d l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00016d89 l       .debug_str	00000000 
0005170c l       .debug_str	00000000 
00016dc5 l       .debug_str	00000000 
0000e99e l       .debug_str	00000000 
00016e09 l       .debug_str	00000000 
00016e50 l       .debug_str	00000000 
00016e5e l       .debug_str	00000000 
00016ea5 l       .debug_str	00000000 
00016eb3 l       .debug_str	00000000 
00016ef3 l       .debug_str	00000000 
00016efb l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
00016f08 l       .debug_str	00000000 
00016f43 l       .debug_str	00000000 
00016f81 l       .debug_str	00000000 
00016fb1 l       .debug_str	00000000 
00016fc5 l       .debug_str	00000000 
00016ff5 l       .debug_str	00000000 
00017009 l       .debug_str	00000000 
00017039 l       .debug_str	00000000 
0001704d l       .debug_str	00000000 
000373ca l       .debug_str	00000000 
00017098 l       .debug_str	00000000 
000170ef l       .debug_str	00000000 
000170fe l       .debug_str	00000000 
00017149 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
000171c0 l       .debug_str	00000000 
00017245 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000172c7 l       .debug_str	00000000 
0001734c l       .debug_str	00000000 
00017357 l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
000173e0 l       .debug_str	00000000 
00020220 l       .debug_str	00000000 
00017457 l       .debug_str	00000000 
00053b33 l       .debug_str	00000000 
000174ec l       .debug_str	00000000 
00017583 l       .debug_str	00000000 
0001761e l       .debug_str	00000000 
000176b3 l       .debug_str	00000000 
0001774a l       .debug_str	00000000 
000177e5 l       .debug_str	00000000 
000178ad l       .debug_str	00000000 
000178b8 l       .debug_str	00000000 
00017984 l       .debug_str	00000000 
00017a14 l       .debug_str	00000000 
00017a20 l       .debug_str	00000000 
00017ac6 l       .debug_str	00000000 
00017ad2 l       .debug_str	00000000 
00017b76 l       .debug_str	00000000 
00017c18 l       .debug_str	00000000 
00017cbc l       .debug_str	00000000 
00017d10 l       .debug_str	00000000 
00017d65 l       .debug_str	00000000 
00017dba l       .debug_str	00000000 
00013bba l       .debug_str	00000000 
00017e3d l       .debug_str	00000000 
00017ec1 l       .debug_str	00000000 
00017f45 l       .debug_str	00000000 
00002878 l       .debug_str	00000000 
00017f8c l       .debug_str	00000000 
0000287e l       .debug_str	00000000 
00017fd3 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0001801a l       .debug_str	00000000 
00018098 l       .debug_str	00000000 
00018117 l       .debug_str	00000000 
000181b2 l       .debug_str	00000000 
00018246 l       .debug_str	00000000 
00018293 l       .debug_str	00000000 
0001829f l       .debug_str	00000000 
00018302 l       .debug_str	00000000 
0001834a l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
00018352 l       .debug_str	00000000 
000183e6 l       .debug_str	00000000 
0001844c l       .debug_str	00000000 
000184dd l       .debug_str	00000000 
0001857c l       .debug_str	00000000 
0001860d l       .debug_str	00000000 
000186ac l       .debug_str	00000000 
0001874e l       .debug_str	00000000 
000187df l       .debug_str	00000000 
0001888d l       .debug_str	00000000 
0001893d l       .debug_str	00000000 
000189f1 l       .debug_str	00000000 
00018ae4 l       .debug_str	00000000 
00018aef l       .debug_str	00000000 
00018be6 l       .debug_str	00000000 
00018c92 l       .debug_str	00000000 
00018c9c l       .debug_str	00000000 
00018d0e l       .debug_str	00000000 
00018d83 l       .debug_str	00000000 
00018df6 l       .debug_str	00000000 
00018e67 l       .debug_str	00000000 
00018eda l       .debug_str	00000000 
00018f51 l       .debug_str	00000000 
00018fc6 l       .debug_str	00000000 
0001903b l       .debug_str	00000000 
000190ab l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00019137 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0001913d l       .debug_str	00000000 
00013eef l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000165e3 l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
00019140 l       .debug_str	00000000 
0001914a l       .debug_str	00000000 
00019154 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001915e l       .debug_str	00000000 
0001918f l       .debug_str	00000000 
00059227 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000191c4 l       .debug_str	00000000 
000191ce l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000191d8 l       .debug_str	00000000 
000191e1 l       .debug_str	00000000 
00019210 l       .debug_str	00000000 
0001921d l       .debug_str	00000000 
00019220 l       .debug_str	00000000 
00019223 l       .debug_str	00000000 
00019226 l       .debug_str	00000000 
00019229 l       .debug_str	00000000 
0001922c l       .debug_str	00000000 
0001922f l       .debug_str	00000000 
0001927d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011c14 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011c27 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
000192c7 l       .debug_str	00000000 
00019320 l       .debug_str	00000000 
000192fb l       .debug_str	00000000 
00019351 l       .debug_str	00000000 
0001932d l       .debug_str	00000000 
00019382 l       .debug_str	00000000 
0001935d l       .debug_str	00000000 
000193b6 l       .debug_str	00000000 
0001938f l       .debug_str	00000000 
000193eb l       .debug_str	00000000 
000193c5 l       .debug_str	00000000 
0001941f l       .debug_str	00000000 
000193f9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016892 l       .debug_str	00000000 
000168f2 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00019145 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0001914f l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00019159 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002d26b l       .debug_str	00000000 
000138fc l       .debug_str	00000000 
00013901 l       .debug_str	00000000 
00013907 l       .debug_str	00000000 
00016b5b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003015c l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
000111b6 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
000154e6 l       .debug_str	00000000 
00019907 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
00019952 l       .debug_str	00000000 
00014483 l       .debug_str	00000000 
00019988 l       .debug_str	00000000 
000144d8 l       .debug_str	00000000 
000199c2 l       .debug_str	00000000 
000199fe l       .debug_str	00000000 
00014559 l       .debug_str	00000000 
00019a24 l       .debug_str	00000000 
0001458c l       .debug_str	00000000 
00019a4b l       .debug_str	00000000 
000147a6 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019a99 l       .debug_str	00000000 
00014816 l       .debug_str	00000000 
00019aea l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00019b3c l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00019b91 l       .debug_str	00000000 
0001490c l       .debug_str	00000000 
00019c26 l       .debug_str	00000000 
00019c74 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00019c83 l       .debug_str	00000000 
00019cd4 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00019cec l       .debug_str	00000000 
00019d41 l       .debug_str	00000000 
00019d5d l       .debug_str	00000000 
00019d65 l       .debug_str	00000000 
00019dab l       .debug_str	00000000 
00019db3 l       .debug_str	00000000 
00014736 l       .debug_str	00000000 
00019dfc l       .debug_str	00000000 
00053b33 l       .debug_str	00000000 
00019e6b l       .debug_str	00000000 
000153b2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00019ebc l       .debug_str	00000000 
00019f0d l       .debug_str	00000000 
00015550 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00013ad1 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
00019fc8 l       .debug_str	00000000 
00019ff2 l       .debug_str	00000000 
0001a055 l       .debug_str	00000000 
0001a05e l       .debug_str	00000000 
0001a0cb l       .debug_str	00000000 
0001a0dd l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
0001a14e l       .debug_str	00000000 
00013bba l       .debug_str	00000000 
0001a1ae l       .debug_str	00000000 
0001a1e1 l       .debug_str	00000000 
0001a24b l       .debug_str	00000000 
0001a27e l       .debug_str	00000000 
0001a283 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
000563ec l       .debug_str	00000000 
0001a342 l       .debug_str	00000000 
0001a37e l       .debug_str	00000000 
0001a38c l       .debug_str	00000000 
0001a3bb l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
000165c4 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000528f0 l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
000165cb l       .debug_str	00000000 
000165d8 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00016637 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016679 l       .debug_str	00000000 
000166b3 l       .debug_str	00000000 
000166ec l       .debug_str	00000000 
000166fb l       .debug_str	00000000 
0001673e l       .debug_str	00000000 
00053bc1 l       .debug_str	00000000 
0003054c l       .debug_str	00000000 
000555e6 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00016780 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
0002d7de l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
0001a3c3 l       .debug_str	00000000 
0001a3db l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001a3f8 l       .debug_str	00000000 
0001a386 l       .debug_str	00000000 
0001a411 l       .debug_str	00000000 
0001a42d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001942d l       .debug_str	00000000 
00019482 l       .debug_str	00000000 
000194cc l       .debug_str	00000000 
000194d3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000110a1 l       .debug_str	00000000 
00011c2f l       .debug_str	00000000 
00011c3a l       .debug_str	00000000 
00011c45 l       .debug_str	00000000 
0001a3d5 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013915 l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000194db l       .debug_str	00000000 
00013949 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013958 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
000116c4 l       .debug_str	00000000 
000166f5 l       .debug_str	00000000 
00019504 l       .debug_str	00000000 
0001399b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
000139d0 l       .debug_str	00000000 
000139e4 l       .debug_str	00000000 
0001952d l       .debug_str	00000000 
00013a43 l       .debug_str	00000000 
00013a51 l       .debug_str	00000000 
00013a59 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00019579 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
000195a2 l       .debug_str	00000000 
000195ac l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
000195b0 l       .debug_str	00000000 
0005266a l       .debug_str	00000000 
0001a427 l       .debug_str	00000000 
0001a3f1 l       .debug_str	00000000 
000195ba l       .debug_str	00000000 
0001405c l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
0001960f l       .debug_str	00000000 
0001964d l       .debug_str	00000000 
00019665 l       .debug_str	00000000 
000140a4 l       .debug_str	00000000 
000196a3 l       .debug_str	00000000 
00013117 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00019708 l       .debug_str	00000000 
00019738 l       .debug_str	00000000 
0001975f l       .debug_str	00000000 
00014257 l       .debug_str	00000000 
00019785 l       .debug_str	00000000 
000197ca l       .debug_str	00000000 
000197d6 l       .debug_str	00000000 
0001981c l       .debug_str	00000000 
00019829 l       .debug_str	00000000 
0001986f l       .debug_str	00000000 
0001987c l       .debug_str	00000000 
000198ba l       .debug_str	00000000 
000198c0 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
000112c4 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0001132e l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011358 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
00011396 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011466 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001a4b1 l       .debug_str	00000000 
0001a4af l       .debug_str	00000000 
0001a502 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a436 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001a455 l       .debug_str	00000000 
0001a4a6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c680 l       .debug_str	00000000 
0001319c l       .debug_str	00000000 
000131a4 l       .debug_str	00000000 
000131ab l       .debug_str	00000000 
000124e4 l       .debug_str	00000000 
0001fb86 l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001a82a l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0001a82e l       .debug_str	00000000 
00019dab l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0002d245 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013baa l       .debug_str	00000000 
0001a8ac l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
0003e2ea l       .debug_str	00000000 
00057b90 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0001a8c3 l       .debug_str	00000000 
00013a98 l       .debug_str	00000000 
0001a8ec l       .debug_str	00000000 
0001a91e l       .debug_str	00000000 
00013915 l       .debug_str	00000000 
0003015c l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
0001a930 l       .debug_str	00000000 
0001a959 l       .debug_str	00000000 
00013958 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
000116c4 l       .debug_str	00000000 
000166f5 l       .debug_str	00000000 
0001a97e l       .debug_str	00000000 
0001399b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001a9a7 l       .debug_str	00000000 
0001a9d1 l       .debug_str	00000000 
0001a9fa l       .debug_str	00000000 
0001aa46 l       .debug_str	00000000 
00013a51 l       .debug_str	00000000 
0001aa6a l       .debug_str	00000000 
00013a59 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
0001aa78 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000123a3 l       .debug_str	00000000 
0002e0bf l       .debug_str	00000000 
0005345b l       .debug_str	00000000 
000464ae l       .debug_str	00000000 
000541c0 l       .debug_str	00000000 
00055ad9 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
0001f7e0 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00030d66 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
0001faf0 l       .debug_str	00000000 
0001fa98 l       .debug_str	00000000 
0001aa8d l       .debug_str	00000000 
0001aa97 l       .debug_str	00000000 
0001f978 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
0001f750 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001d467 l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
0001fb29 l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
0001fb08 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
0001f7a1 l       .debug_str	00000000 
00013a69 l       .debug_str	00000000 
0001aaa0 l       .debug_str	00000000 
0001aac9 l       .debug_str	00000000 
0001aad7 l       .debug_str	00000000 
0001aae4 l       .debug_str	00000000 
0001aaf7 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
0001ab10 l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001ab25 l       .debug_str	00000000 
0001aba1 l       .debug_str	00000000 
0001ab38 l       .debug_str	00000000 
0001ab7a l       .debug_str	00000000 
0001ab8f l       .debug_str	00000000 
0005710c l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00042999 l       .debug_str	00000000 
0001abac l       .debug_str	00000000 
0001abb6 l       .debug_str	00000000 
0001abe8 l       .debug_str	00000000 
0001abfc l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
0001ed4b l       .debug_str	00000000 
0001ef54 l       .debug_str	00000000 
0001ac18 l       .debug_str	00000000 
0001ac23 l       .debug_str	00000000 
0001aca7 l       .debug_str	00000000 
0001acd5 l       .debug_str	00000000 
0001ad5b l       .debug_str	00000000 
0003a548 l       .debug_str	00000000 
0001ad83 l       .debug_str	00000000 
0001ad94 l       .debug_str	00000000 
0001ae1e l       .debug_str	00000000 
0001ae3c l       .debug_str	00000000 
0001aeca l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001af80 l       .debug_str	00000000 
0001afc8 l       .debug_str	00000000 
0001aff7 l       .debug_str	00000000 
0001b03f l       .debug_str	00000000 
0001b05e l       .debug_str	00000000 
0001b0a6 l       .debug_str	00000000 
0001b0b6 l       .debug_str	00000000 
0001b0fe l       .debug_str	00000000 
0001b10f l       .debug_str	00000000 
0001b157 l       .debug_str	00000000 
0001b15f l       .debug_str	00000000 
0001b1a7 l       .debug_str	00000000 
0001b1b1 l       .debug_str	00000000 
0001b1f9 l       .debug_str	00000000 
0001b213 l       .debug_str	00000000 
0001b25b l       .debug_str	00000000 
0001b274 l       .debug_str	00000000 
0001b2bc l       .debug_str	00000000 
0001b2cf l       .debug_str	00000000 
0001b317 l       .debug_str	00000000 
0001b320 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0001b368 l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
0001b3fd l       .debug_str	00000000 
0001b43b l       .debug_str	00000000 
0001b46c l       .debug_str	00000000 
0001964d l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001b4aa l       .debug_str	00000000 
0001b4d3 l       .debug_str	00000000 
0001b4de l       .debug_str	00000000 
0001b503 l       .debug_str	00000000 
0001b562 l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
0001b5c9 l       .debug_str	00000000 
0001b5f3 l       .debug_str	00000000 
0001b61b l       .debug_str	00000000 
0001b653 l       .debug_str	00000000 
0001b684 l       .debug_str	00000000 
0001b68e l       .debug_str	00000000 
0001b6eb l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001b71d l       .debug_str	00000000 
0001b743 l       .debug_str	00000000 
0001b765 l       .debug_str	00000000 
0001b78b l       .debug_str	00000000 
0001b7ad l       .debug_str	00000000 
0001b7d6 l       .debug_str	00000000 
0001b7fb l       .debug_str	00000000 
0001b843 l       .debug_str	00000000 
0001b850 l       .debug_str	00000000 
0001b859 l       .debug_str	00000000 
0001b8e3 l       .debug_str	00000000 
00012523 l       .debug_str	00000000 
0001b900 l       .debug_str	00000000 
0001b98c l       .debug_str	00000000 
0001b9a9 l       .debug_str	00000000 
0001b9c9 l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
0001b9d0 l       .debug_str	00000000 
0001ba0b l       .debug_str	00000000 
0001ba3d l       .debug_str	00000000 
0001ba4e l       .debug_str	00000000 
0001ba89 l       .debug_str	00000000 
0001bacf l       .debug_str	00000000 
00017039 l       .debug_str	00000000 
0001baff l       .debug_str	00000000 
0001bb2f l       .debug_str	00000000 
0001bb4d l       .debug_str	00000000 
0001bb7d l       .debug_str	00000000 
0001bb90 l       .debug_str	00000000 
0001bbc0 l       .debug_str	00000000 
0001bbd5 l       .debug_str	00000000 
0001bc05 l       .debug_str	00000000 
0001bc21 l       .debug_str	00000000 
0001bc51 l       .debug_str	00000000 
0001bc6f l       .debug_str	00000000 
0001bc9f l       .debug_str	00000000 
0001bcba l       .debug_str	00000000 
0001bcea l       .debug_str	00000000 
0001bd0e l       .debug_str	00000000 
0001bd3e l       .debug_str	00000000 
0001bd78 l       .debug_str	00000000 
0001bda8 l       .debug_str	00000000 
0001bdcd l       .debug_str	00000000 
0001bdfd l       .debug_str	00000000 
0001be27 l       .debug_str	00000000 
0001be5d l       .debug_str	00000000 
0001be8e l       .debug_str	00000000 
0001bec8 l       .debug_str	00000000 
0001befd l       .debug_str	00000000 
0001bf39 l       .debug_str	00000000 
0001bf5f l       .debug_str	00000000 
0001bf81 l       .debug_str	00000000 
0001bfa8 l       .debug_str	00000000 
0001bfcb l       .debug_str	00000000 
000147a6 l       .debug_str	00000000 
0001c019 l       .debug_str	00000000 
00014816 l       .debug_str	00000000 
0001c06a l       .debug_str	00000000 
0001c0bb l       .debug_str	00000000 
0001c0c8 l       .debug_str	00000000 
0001c11a l       .debug_str	00000000 
0001c128 l       .debug_str	00000000 
000146e1 l       .debug_str	00000000 
0001c173 l       .debug_str	00000000 
0001c1be l       .debug_str	00000000 
0001c1d2 l       .debug_str	00000000 
0001c215 l       .debug_str	00000000 
0001c222 l       .debug_str	00000000 
00014736 l       .debug_str	00000000 
0001c265 l       .debug_str	00000000 
0001479d l       .debug_str	00000000 
0001c2c1 l       .debug_str	00000000 
0001480d l       .debug_str	00000000 
0001c320 l       .debug_str	00000000 
0001c372 l       .debug_str	00000000 
0001c3c4 l       .debug_str	00000000 
0001c3ce l       .debug_str	00000000 
0001c423 l       .debug_str	00000000 
0001c478 l       .debug_str	00000000 
0001c4ce l       .debug_str	00000000 
0001468a l       .debug_str	00000000 
0001c524 l       .debug_str	00000000 
0001c560 l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
0001c59e l       .debug_str	00000000 
0001c5d9 l       .debug_str	00000000 
000165d8 l       .debug_str	00000000 
0001c5e4 l       .debug_str	00000000 
0001c62b l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
0001c641 l       .debug_str	00000000 
0001c6d2 l       .debug_str	00000000 
0001c6e8 l       .debug_str	00000000 
0001c72d l       .debug_str	00000000 
0001c747 l       .debug_str	00000000 
0001c7aa l       .debug_str	00000000 
0001c7ca l       .debug_str	00000000 
0001c809 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001c86a l       .debug_str	00000000 
0001c8a9 l       .debug_str	00000000 
0001f973 l       .debug_str	00000000 
0001c8d0 l       .debug_str	00000000 
0001c910 l       .debug_str	00000000 
0001c943 l       .debug_str	00000000 
0001c95a l       .debug_str	00000000 
0001c9a0 l       .debug_str	00000000 
0001c9bc l       .debug_str	00000000 
0001ca20 l       .debug_str	00000000 
0001ca42 l       .debug_str	00000000 
0001ca84 l       .debug_str	00000000 
0001caa5 l       .debug_str	00000000 
0001cae7 l       .debug_str	00000000 
00054d19 l       .debug_str	00000000 
0001cb17 l       .debug_str	00000000 
0001cb5b l       .debug_str	00000000 
0001cbb0 l       .debug_str	00000000 
0001cbf4 l       .debug_str	00000000 
0001cc4a l       .debug_str	00000000 
0001cc8e l       .debug_str	00000000 
0001cd06 l       .debug_str	00000000 
0001cd4a l       .debug_str	00000000 
0001cd8a l       .debug_str	00000000 
0001cda5 l       .debug_str	00000000 
0001cde6 l       .debug_str	00000000 
0001ce3c l       .debug_str	00000000 
0001ce80 l       .debug_str	00000000 
0001cead l       .debug_str	00000000 
0001cef2 l       .debug_str	00000000 
0001cf3a l       .debug_str	00000000 
0001cf4b l       .debug_str	00000000 
0001cf93 l       .debug_str	00000000 
0001cfa4 l       .debug_str	00000000 
0002b85f l       .debug_str	00000000 
0001cfdf l       .debug_str	00000000 
0001d01b l       .debug_str	00000000 
0001d021 l       .debug_str	00000000 
0001d057 l       .debug_str	00000000 
0001d06a l       .debug_str	00000000 
0001d0a1 l       .debug_str	00000000 
0001d0b5 l       .debug_str	00000000 
0001d0f7 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0001d15b l       .debug_str	00000000 
0001d176 l       .debug_str	00000000 
0001d1db l       .debug_str	00000000 
0001d242 l       .debug_str	00000000 
0001d24d l       .debug_str	00000000 
0001d293 l       .debug_str	00000000 
0001d2d9 l       .debug_str	00000000 
0001d2e3 l       .debug_str	00000000 
0001d32a l       .debug_str	00000000 
0001d335 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0001d37c l       .debug_str	00000000 
0001d3c5 l       .debug_str	00000000 
0001d40e l       .debug_str	00000000 
0001d447 l       .debug_str	00000000 
0001d462 l       .debug_str	00000000 
0001d471 l       .debug_str	00000000 
0001d4aa l       .debug_str	00000000 
0001d4cf l       .debug_str	00000000 
0001d508 l       .debug_str	00000000 
0001d541 l       .debug_str	00000000 
0001d567 l       .debug_str	00000000 
0001d5a0 l       .debug_str	00000000 
0001d5de l       .debug_str	00000000 
0001d618 l       .debug_str	00000000 
0001d624 l       .debug_str	00000000 
0001d660 l       .debug_str	00000000 
0001d673 l       .debug_str	00000000 
0001d6af l       .debug_str	00000000 
0001d6c8 l       .debug_str	00000000 
0001d705 l       .debug_str	00000000 
0001d716 l       .debug_str	00000000 
000153b2 l       .debug_str	00000000 
0001d767 l       .debug_str	00000000 
0001a4a6 l       .debug_str	00000000 
0001d7b8 l       .debug_str	00000000 
0001d813 l       .debug_str	00000000 
0001d876 l       .debug_str	00000000 
0001d892 l       .debug_str	00000000 
0001d8f2 l       .debug_str	00000000 
0001d952 l       .debug_str	00000000 
0001d9b6 l       .debug_str	00000000 
0001d9d1 l       .debug_str	00000000 
0001da35 l       .debug_str	00000000 
0001da40 l       .debug_str	00000000 
0001daaa l       .debug_str	00000000 
0001dab9 l       .debug_str	00000000 
0001db28 l       .debug_str	00000000 
0001db40 l       .debug_str	00000000 
0001dbb0 l       .debug_str	00000000 
0001dbc9 l       .debug_str	00000000 
0001dc34 l       .debug_str	00000000 
0001dc49 l       .debug_str	00000000 
0001dcb9 l       .debug_str	00000000 
0001dcce l       .debug_str	00000000 
0001dd3e l       .debug_str	00000000 
0001dd50 l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
0001ddc1 l       .debug_str	00000000 
0001de32 l       .debug_str	00000000 
0001de48 l       .debug_str	00000000 
0001de5a l       .debug_str	00000000 
0001dec6 l       .debug_str	00000000 
0001ded8 l       .debug_str	00000000 
0001df44 l       .debug_str	00000000 
0001df53 l       .debug_str	00000000 
0001dfbb l       .debug_str	00000000 
0001dfc5 l       .debug_str	00000000 
0001e039 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
0001e044 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
0001e0d5 l       .debug_str	00000000 
0001e14d l       .debug_str	00000000 
0001e1e3 l       .debug_str	00000000 
0001e1ff l       .debug_str	00000000 
0001e295 l       .debug_str	00000000 
0001e32b l       .debug_str	00000000 
0001e3c1 l       .debug_str	00000000 
0001490c l       .debug_str	00000000 
0001e436 l       .debug_str	00000000 
0001e4aa l       .debug_str	00000000 
0001e523 l       .debug_str	00000000 
0001e5a2 l       .debug_str	00000000 
0001e5b3 l       .debug_str	00000000 
0001e633 l       .debug_str	00000000 
0001e695 l       .debug_str	00000000 
0001fbf3 l       .debug_str	00000000 
0001e6e6 l       .debug_str	00000000 
0001e708 l       .debug_str	00000000 
0001e735 l       .debug_str	00000000 
0001e764 l       .debug_str	00000000 
0001e786 l       .debug_str	00000000 
0001e7ad l       .debug_str	00000000 
0001e7d6 l       .debug_str	00000000 
0001e808 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
0001e858 l       .debug_str	00000000 
0001e89e l       .debug_str	00000000 
0001e8b1 l       .debug_str	00000000 
0001e905 l       .debug_str	00000000 
0001e977 l       .debug_str	00000000 
0001e9e9 l       .debug_str	00000000 
0001ea5b l       .debug_str	00000000 
0001eaaa l       .debug_str	00000000 
0001ead8 l       .debug_str	00000000 
0001eae3 l       .debug_str	00000000 
0001eb3d l       .debug_str	00000000 
0001ebb5 l       .debug_str	00000000 
0001ec2d l       .debug_str	00000000 
0001ec82 l       .debug_str	00000000 
0001ecb7 l       .debug_str	00000000 
0000b6c3 l       .debug_str	00000000 
0001ece2 l       .debug_str	00000000 
000373ca l       .debug_str	00000000 
0001ed11 l       .debug_str	00000000 
0001ed41 l       .debug_str	00000000 
0001ed59 l       .debug_str	00000000 
0001ed8a l       .debug_str	00000000 
0001edbc l       .debug_str	00000000 
0001edfb l       .debug_str	00000000 
0001ee0e l       .debug_str	00000000 
0001ee46 l       .debug_str	00000000 
0001ee52 l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
0001eeb3 l       .debug_str	00000000 
0001eeb9 l       .debug_str	00000000 
0001eee6 l       .debug_str	00000000 
0001ef17 l       .debug_str	00000000 
0001ef4a l       .debug_str	00000000 
0001ef64 l       .debug_str	00000000 
0001ef98 l       .debug_str	00000000 
0001efcb l       .debug_str	00000000 
000516a4 l       .debug_str	00000000 
0001f018 l       .debug_str	00000000 
0001f061 l       .debug_str	00000000 
00051687 l       .debug_str	00000000 
0001f0ac l       .debug_str	00000000 
0001f0d4 l       .debug_str	00000000 
0001f11a l       .debug_str	00000000 
0001f120 l       .debug_str	00000000 
0001f14e l       .debug_str	00000000 
0001f16a l       .debug_str	00000000 
0001f197 l       .debug_str	00000000 
0001f1a7 l       .debug_str	00000000 
0001f1ff l       .debug_str	00000000 
0001f258 l       .debug_str	00000000 
0001f27b l       .debug_str	00000000 
0001f2aa l       .debug_str	00000000 
0001f2bc l       .debug_str	00000000 
0001f2ef l       .debug_str	00000000 
0001f305 l       .debug_str	00000000 
0001f352 l       .debug_str	00000000 
0001f3a5 l       .debug_str	00000000 
0001f3d8 l       .debug_str	00000000 
0001f3e8 l       .debug_str	00000000 
0001f43e l       .debug_str	00000000 
0001f498 l       .debug_str	00000000 
0001f4e6 l       .debug_str	00000000 
0001f538 l       .debug_str	00000000 
0001f58d l       .debug_str	00000000 
0001f5dd l       .debug_str	00000000 
0001f631 l       .debug_str	00000000 
0001f688 l       .debug_str	00000000 
0001f6de l       .debug_str	00000000 
0001f735 l       .debug_str	00000000 
0001f781 l       .debug_str	00000000 
0001f7c9 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0001f7fe l       .debug_str	00000000 
0001f82a l       .debug_str	00000000 
0001f846 l       .debug_str	00000000 
0001f853 l       .debug_str	00000000 
0001f861 l       .debug_str	00000000 
0001f866 l       .debug_str	00000000 
0001f86d l       .debug_str	00000000 
0001f884 l       .debug_str	00000000 
0001f89a l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001f8aa l       .debug_str	00000000 
000528f0 l       .debug_str	00000000 
0001f8cd l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0001913d l       .debug_str	00000000 
0001f8ee l       .debug_str	00000000 
00013eef l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f8f5 l       .debug_str	00000000 
0001f948 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001f969 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0001f96e l       .debug_str	00000000 
00019154 l       .debug_str	00000000 
0001f982 l       .debug_str	00000000 
0001f996 l       .debug_str	00000000 
0001f99f l       .debug_str	00000000 
0001f9aa l       .debug_str	00000000 
0001f9bc l       .debug_str	00000000 
0001f9d0 l       .debug_str	00000000 
0001f9e1 l       .debug_str	00000000 
0001f9fb l       .debug_str	00000000 
0001fa2b l       .debug_str	00000000 
0001fa46 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016679 l       .debug_str	00000000 
000166b3 l       .debug_str	00000000 
000166ec l       .debug_str	00000000 
000166fb l       .debug_str	00000000 
0001673e l       .debug_str	00000000 
00053bc1 l       .debug_str	00000000 
0003054c l       .debug_str	00000000 
000555e6 l       .debug_str	00000000 
0001fa66 l       .debug_str	00000000 
0001fa85 l       .debug_str	00000000 
00057b16 l       .debug_str	00000000 
0001faa8 l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
000131f2 l       .debug_str	00000000 
0001faae l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
0001fab6 l       .debug_str	00000000 
000534c8 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
000165cb l       .debug_str	00000000 
00053f37 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011c14 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0001fabe l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
0001fadd l       .debug_str	00000000 
0001fafc l       .debug_str	00000000 
0001fb0e l       .debug_str	00000000 
00016ef9 l       .debug_str	00000000 
00011d19 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00059227 l       .debug_str	00000000 
00053de2 l       .debug_str	00000000 
0002eee6 l       .debug_str	00000000 
0001fb80 l       .debug_str	00000000 
0001a81b l       .debug_str	00000000 
0001fb92 l       .debug_str	00000000 
00057add l       .debug_str	00000000 
0001fba6 l       .debug_str	00000000 
0001fbbc l       .debug_str	00000000 
0001fbcc l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001fbde l       .debug_str	00000000 
0001fbd8 l       .debug_str	00000000 
0001fbed l       .debug_str	00000000 
0001fc04 l       .debug_str	00000000 
0001fc03 l       .debug_str	00000000 
00011c10 l       .debug_str	00000000 
00011c1b l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00011c27 l       .debug_str	00000000 
00011c32 l       .debug_str	00000000 
00011c3d l       .debug_str	00000000 
00011c48 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a5de l       .debug_str	00000000 
0001a630 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000515ec l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001a677 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a67e l       .debug_str	00000000 
0001b9ba l       .debug_str	00000000 
0001f9e6 l       .debug_str	00000000 
00019159 l       .debug_str	00000000 
0001a687 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001f11b l       .debug_str	00000000 
0001a68e l       .debug_str	00000000 
0001a6b1 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00013180 l       .debug_str	00000000 
00013185 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
000131b2 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fa73 l       .debug_str	00000000 
00013207 l       .debug_str	00000000 
0001a6b7 l       .debug_str	00000000 
0001a6d9 l       .debug_str	00000000 
0001a6ee l       .debug_str	00000000 
0001a720 l       .debug_str	00000000 
0001a730 l       .debug_str	00000000 
0001a75d l       .debug_str	00000000 
0001a76e l       .debug_str	00000000 
0001a79c l       .debug_str	00000000 
0001a7ae l       .debug_str	00000000 
0001f98c l       .debug_str	00000000 
0001fbd1 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0001a7dd l       .debug_str	00000000 
0001f9a4 l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
000124e8 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002beb8 l       .debug_str	00000000 
000124ed l       .debug_str	00000000 
0001f9db l       .debug_str	00000000 
0001a804 l       .debug_str	00000000 
0001f9c7 l       .debug_str	00000000 
0001f9c1 l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0001fa0f l       .debug_str	00000000 
0001fa00 l       .debug_str	00000000 
0001fa5a l       .debug_str	00000000 
0001fa4b l       .debug_str	00000000 
0001a80b l       .debug_str	00000000 
0001a814 l       .debug_str	00000000 
000522f3 l       .debug_str	00000000 
000515c0 l       .debug_str	00000000 
0001f9b5 l       .debug_str	00000000 
0001f9af l       .debug_str	00000000 
0001f9d5 l       .debug_str	00000000 
0001f99b l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002d26b l       .debug_str	00000000 
000138fc l       .debug_str	00000000 
00013901 l       .debug_str	00000000 
00013907 l       .debug_str	00000000 
00016b5b l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
0002b56b l       .debug_str	00000000 
000567bf l       .debug_str	00000000 
0001a820 l       .debug_str	00000000 
0001318c l       .debug_str	00000000 
00013194 l       .debug_str	00000000 
00011b14 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00011aea l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00011a10 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00011aac l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00011b3e l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
00011b4e l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00011ace l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00011ada l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
00011d02 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00011b68 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00011b90 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00011a06 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001d9e4 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00011b5e l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
000119fc l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011792 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
000117ca l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
000117e0 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
000117f0 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00011894 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
00011d28 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
00011dd2 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00011d14 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00011960 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
0002026f l       .debug_str	00000000 
00013b05 l       .debug_str	00000000 
000191d8 l       .debug_str	00000000 
0001fcbb l       .debug_str	00000000 
0001fcf0 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
0001fcfc l       .debug_str	00000000 
0001fd34 l       .debug_str	00000000 
0001fd4e l       .debug_str	00000000 
0001fd58 l       .debug_str	00000000 
0001fd60 l       .debug_str	00000000 
0001fd68 l       .debug_str	00000000 
0001fda4 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001fdb7 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001fdbf l       .debug_str	00000000 
0001fdf7 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
0001fdff l       .debug_str	00000000 
0001fe37 l       .debug_str	00000000 
0001fe3f l       .debug_str	00000000 
0001fe77 l       .debug_str	00000000 
0001fe91 l       .debug_str	00000000 
0001fe9a l       .debug_str	00000000 
0001fed2 l       .debug_str	00000000 
0001fedb l       .debug_str	00000000 
0001ff13 l       .debug_str	00000000 
00013c57 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
0001ff9b l       .debug_str	00000000 
0001ffe3 l       .debug_str	00000000 
0001ffee l       .debug_str	00000000 
0001964d l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0002002c l       .debug_str	00000000 
0001b4d3 l       .debug_str	00000000 
00020055 l       .debug_str	00000000 
0002007a l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
0001b5c9 l       .debug_str	00000000 
000200d9 l       .debug_str	00000000 
0001b61b l       .debug_str	00000000 
00020101 l       .debug_str	00000000 
00020132 l       .debug_str	00000000 
0002013e l       .debug_str	00000000 
0002019d l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000201cf l       .debug_str	00000000 
00020217 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00020224 l       .debug_str	00000000 
0002027f l       .debug_str	00000000 
0002028d l       .debug_str	00000000 
0001b843 l       .debug_str	00000000 
0001ba3d l       .debug_str	00000000 
0000ea25 l       .debug_str	00000000 
000202d5 l       .debug_str	00000000 
0001ba89 l       .debug_str	00000000 
00020310 l       .debug_str	00000000 
00020347 l       .debug_str	00000000 
00020360 l       .debug_str	00000000 
0002036c l       .debug_str	00000000 
000147a6 l       .debug_str	00000000 
000203be l       .debug_str	00000000 
00014816 l       .debug_str	00000000 
00020413 l       .debug_str	00000000 
0002034d l       .debug_str	00000000 
00020446 l       .debug_str	00000000 
00019dab l       .debug_str	00000000 
0002048c l       .debug_str	00000000 
00014736 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000204d5 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
000204e6 l       .debug_str	00000000 
0002055b l       .debug_str	00000000 
00020588 l       .debug_str	00000000 
0001a0cb l       .debug_str	00000000 
00020614 l       .debug_str	00000000 
00020697 l       .debug_str	00000000 
000206c6 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00020713 l       .debug_str	00000000 
00020743 l       .debug_str	00000000 
00020791 l       .debug_str	00000000 
000207c1 l       .debug_str	00000000 
0002080f l       .debug_str	00000000 
0002083f l       .debug_str	00000000 
0002088d l       .debug_str	00000000 
000208be l       .debug_str	00000000 
0002090d l       .debug_str	00000000 
0002093e l       .debug_str	00000000 
0002098d l       .debug_str	00000000 
000209bd l       .debug_str	00000000 
000209c5 l       .debug_str	00000000 
000209f5 l       .debug_str	00000000 
000209fd l       .debug_str	00000000 
00020a3b l       .debug_str	00000000 
00020a50 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000528f0 l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0001913d l       .debug_str	00000000 
00013eef l       .debug_str	00000000 
00020a7c l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00020ad2 l       .debug_str	00000000 
00013b3a l       .debug_str	00000000 
00020ad1 l       .debug_str	00000000 
00020ad5 l       .debug_str	00000000 
00020adf l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00020ae5 l       .debug_str	00000000 
00020ae9 l       .debug_str	00000000 
0001fdb2 l       .debug_str	00000000 
00020aee l       .debug_str	00000000 
00020aed l       .debug_str	00000000 
00020af1 l       .debug_str	00000000 
00020af5 l       .debug_str	00000000 
00020afa l       .debug_str	00000000 
00020af9 l       .debug_str	00000000 
00020afd l       .debug_str	00000000 
00020b01 l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001fc1c l       .debug_str	00000000 
0001fc71 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002d26b l       .debug_str	00000000 
000138fc l       .debug_str	00000000 
00013901 l       .debug_str	00000000 
00013907 l       .debug_str	00000000 
00016b5b l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013915 l       .debug_str	00000000 
0003015c l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0000e9ed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013a59 l       .debug_str	00000000 
00011e52 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001f8ef l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00019159 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00020b05 l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00020b66 l       .debug_str	00000000 
00013117 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00028f73 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
000211ca l       .debug_str	00000000 
00021235 l       .debug_str	00000000 
0002127b l       .debug_str	00000000 
000212ed l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00021532 l       .debug_str	00000000 
000215a4 l       .debug_str	00000000 
000215ee l       .debug_str	00000000 
00021638 l       .debug_str	00000000 
00021885 l       .debug_str	00000000 
000218c1 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00021906 l       .debug_str	00000000 
00021943 l       .debug_str	00000000 
00021989 l       .debug_str	00000000 
000219c6 l       .debug_str	00000000 
00021c07 l       .debug_str	00000000 
00021c47 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00021e8b l       .debug_str	00000000 
000220df l       .debug_str	00000000 
00022138 l       .debug_str	00000000 
00022388 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
00012be3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00028fe7 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021e9f l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
000220f3 l       .debug_str	00000000 
00020bc9 l       .debug_str	00000000 
00020c31 l       .debug_str	00000000 
00020e71 l       .debug_str	00000000 
00020ed9 l       .debug_str	00000000 
00020f1e l       .debug_str	00000000 
00020f89 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0002242e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000223dd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00019145 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00019159 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00022450 l       .debug_str	00000000 
000224ac l       .debug_str	00000000 
00022509 l       .debug_str	00000000 
00022566 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001f9a4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00022730 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002d26b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000225c3 l       .debug_str	00000000 
00022634 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00022640 l       .debug_str	00000000 
0001503c l       .debug_str	00000000 
000226b1 l       .debug_str	00000000 
00022722 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022abb l       .debug_str	00000000 
00022b26 l       .debug_str	00000000 
00022bee l       .debug_str	00000000 
00022b5c l       .debug_str	00000000 
00022b93 l       .debug_str	00000000 
00022ba6 l       .debug_str	00000000 
00022be5 l       .debug_str	00000000 
00022c00 l       .debug_str	00000000 
00022c38 l       .debug_str	00000000 
00022c4c l       .debug_str	00000000 
00022c78 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00019145 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
00057add l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00019159 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
00057adc l       .debug_str	00000000 
00022c81 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00016ef9 l       .debug_str	00000000 
00022c85 l       .debug_str	00000000 
0005700a l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
000560e8 l       .debug_str	00000000 
00044735 l       .debug_str	00000000 
0002382c l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
000538fa l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00022c8d l       .debug_str	00000000 
0005713e l       .debug_str	00000000 
0005547e l       .debug_str	00000000 
00053370 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000550a1 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00022f76 l       .debug_str	00000000 
00022737 l       .debug_str	00000000 
00022768 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00028f73 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000220f3 l       .debug_str	00000000 
00022774 l       .debug_str	00000000 
000227a4 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00028fe7 l       .debug_str	00000000 
00021e9f l       .debug_str	00000000 
000227b1 l       .debug_str	00000000 
000227e2 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00056f81 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000519c6 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00047069 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
000227ea l       .debug_str	00000000 
00022815 l       .debug_str	00000000 
00022826 l       .debug_str	00000000 
0002285b l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
0002286a l       .debug_str	00000000 
0002289d l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000228ad l       .debug_str	00000000 
000228e1 l       .debug_str	00000000 
000228ea l       .debug_str	00000000 
00022916 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00022925 l       .debug_str	00000000 
00022958 l       .debug_str	00000000 
00022965 l       .debug_str	00000000 
00022971 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000229a2 l       .debug_str	00000000 
000229d7 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000229e8 l       .debug_str	00000000 
00022a1a l       .debug_str	00000000 
00022a28 l       .debug_str	00000000 
00022a66 l       .debug_str	00000000 
00022a80 l       .debug_str	00000000 
00022ad2 l       .debug_str	00000000 
00022b0e l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00012bde l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00012ef6 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
000130e0 l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
000136fe l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000133c8 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00013826 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001dbe0 l     O .text	0000001c str.0
0001dc40 l     O .text	00000021 str.1
0001dca0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00022f87 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00022f8d l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0005547e l       .debug_str	00000000 
00053370 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
00022f5c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000524d3 l       .debug_str	00000000 
00022f9f l       .debug_str	00000000 
0000e7ad l       .debug_str	00000000 
00022c98 l       .debug_str	00000000 
000373ca l       .debug_str	00000000 
00022cc3 l       .debug_str	00000000 
00057b16 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022cef l       .debug_str	00000000 
00058e12 l       .debug_str	00000000 
00022d60 l       .debug_str	00000000 
00022d8c l       .debug_str	00000000 
00022db9 l       .debug_str	00000000 
00022e25 l       .debug_str	00000000 
00022e2d l       .debug_str	00000000 
00022e9a l       .debug_str	00000000 
00022ea3 l       .debug_str	00000000 
00022ed0 l       .debug_str	00000000 
00022c78 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00022f4a l       .debug_str	00000000 
00022f7a l       .debug_str	00000000 
000526b3 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00022f76 l       .debug_str	00000000 
00022f60 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00019145 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001dea0 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00022fa4 l       .debug_str	00000000 
00022ff6 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013a51 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003a0c4 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00024346 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
00014736 l       .debug_str	00000000 
000235aa l       .debug_str	00000000 
0001479d l       .debug_str	00000000 
00023606 l       .debug_str	00000000 
0001480d l       .debug_str	00000000 
00023665 l       .debug_str	00000000 
000147a6 l       .debug_str	00000000 
000236b7 l       .debug_str	00000000 
0002370c l       .debug_str	00000000 
00023762 l       .debug_str	00000000 
00023790 l       .debug_str	00000000 
0002379c l       .debug_str	00000000 
000237ce l       .debug_str	00000000 
000237f5 l       .debug_str	00000000 
00023827 l       .debug_str	00000000 
00023837 l       .debug_str	00000000 
0002386c l       .debug_str	00000000 
0002387f l       .debug_str	00000000 
000238b5 l       .debug_str	00000000 
000238c9 l       .debug_str	00000000 
00023913 l       .debug_str	00000000 
00023924 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00023960 l       .debug_str	00000000 
000519f2 l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
0002399e l       .debug_str	00000000 
000239dc l       .debug_str	00000000 
00013bcc l       .debug_str	00000000 
000239e9 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
000239f7 l       .debug_str	00000000 
00023a1f l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00023a5e l       .debug_str	00000000 
00023a8c l       .debug_str	00000000 
00023a93 l       .debug_str	00000000 
00023b36 l       .debug_str	00000000 
00023b44 l       .debug_str	00000000 
000388d3 l       .debug_str	00000000 
00023bdc l       .debug_str	00000000 
00023c76 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00023d2e l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
000204d5 l       .debug_str	00000000 
00023d91 l       .debug_str	00000000 
00023e03 l       .debug_str	00000000 
00023e2d l       .debug_str	00000000 
00023e6b l       .debug_str	00000000 
00023e7e l       .debug_str	00000000 
00023ec9 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00023ed2 l       .debug_str	00000000 
00023f14 l       .debug_str	00000000 
000251d5 l       .debug_str	00000000 
00023f4e l       .debug_str	00000000 
00023f93 l       .debug_str	00000000 
00023faf l       .debug_str	00000000 
00023ff2 l       .debug_str	00000000 
00024008 l       .debug_str	00000000 
0002406d l       .debug_str	00000000 
000240d2 l       .debug_str	00000000 
0002410d l       .debug_str	00000000 
0002411a l       .debug_str	00000000 
0002034d l       .debug_str	00000000 
0002414d l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00024193 l       .debug_str	00000000 
00019dab l       .debug_str	00000000 
000241d9 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00024220 l       .debug_str	00000000 
00024269 l       .debug_str	00000000 
0001503c l       .debug_str	00000000 
0001f9a4 l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
000242e2 l       .debug_str	00000000 
00024327 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0002437f l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00024397 l       .debug_str	00000000 
000243d2 l       .debug_str	00000000 
000243f6 l       .debug_str	00000000 
0002441c l       .debug_str	00000000 
00024457 l       .debug_str	00000000 
0002447a l       .debug_str	00000000 
0002449f l       .debug_str	00000000 
000244dc l       .debug_str	00000000 
000244f3 l       .debug_str	00000000 
00024530 l       .debug_str	00000000 
00024547 l       .debug_str	00000000 
00015477 l       .debug_str	00000000 
00024598 l       .debug_str	00000000 
00017245 l       .debug_str	00000000 
000245f3 l       .debug_str	00000000 
00024656 l       .debug_str	00000000 
00024698 l       .debug_str	00000000 
00015730 l       .debug_str	00000000 
000246fc l       .debug_str	00000000 
0001a0cb l       .debug_str	00000000 
00024769 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
000247cb l       .debug_str	00000000 
000247d9 l       .debug_str	00000000 
00024844 l       .debug_str	00000000 
0002485e l       .debug_str	00000000 
00024874 l       .debug_str	00000000 
000248df l       .debug_str	00000000 
000248ef l       .debug_str	00000000 
0002495b l       .debug_str	00000000 
0002496d l       .debug_str	00000000 
000249d9 l       .debug_str	00000000 
000249ea l       .debug_str	00000000 
00024a51 l       .debug_str	00000000 
00024a89 l       .debug_str	00000000 
00024af3 l       .debug_str	00000000 
00024b7b l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
00024bef l       .debug_str	00000000 
00024c71 l       .debug_str	00000000 
00024c88 l       .debug_str	00000000 
00024cc6 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
0002b9eb l       .debug_str	00000000 
0002d26b l       .debug_str	00000000 
00024cd9 l       .debug_str	00000000 
00024ce8 l       .debug_str	00000000 
00024d26 l       .debug_str	00000000 
00024d39 l       .debug_str	00000000 
00024d65 l       .debug_str	00000000 
00024d6e l       .debug_str	00000000 
00024d9a l       .debug_str	00000000 
00024da3 l       .debug_str	00000000 
00024e03 l       .debug_str	00000000 
0002b42c l       .debug_str	00000000 
00024e54 l       .debug_str	00000000 
00024ea5 l       .debug_str	00000000 
00024f02 l       .debug_str	00000000 
00024f60 l       .debug_str	00000000 
00025245 l       .debug_str	00000000 
00024fb1 l       .debug_str	00000000 
00024fda l       .debug_str	00000000 
0002503d l       .debug_str	00000000 
0002504e l       .debug_str	00000000 
0002505b l       .debug_str	00000000 
00025070 l       .debug_str	00000000 
000250c1 l       .debug_str	00000000 
000250ea l       .debug_str	00000000 
0002514d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
00022730 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0002516a l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00030d66 l       .debug_str	00000000 
0001fdb2 l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
000516c6 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00057b16 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0002518b l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0002518f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000231fc l       .debug_str	00000000 
000251a1 l       .debug_str	00000000 
000251a6 l       .debug_str	00000000 
000251ab l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016637 l       .debug_str	00000000 
000251d0 l       .debug_str	00000000 
0002520c l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
00035792 l       .debug_str	00000000 
00025222 l       .debug_str	00000000 
0002522b l       .debug_str	00000000 
0002ed97 l       .debug_str	00000000 
00052762 l       .debug_str	00000000 
000449a9 l       .debug_str	00000000 
00025234 l       .debug_str	00000000 
00025238 l       .debug_str	00000000 
0002f05d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00011c14 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00011c10 l       .debug_str	00000000 
00011c1b l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0002525a l       .debug_str	00000000 
00025255 l       .debug_str	00000000 
000524e3 l       .debug_str	00000000 
0002525e l       .debug_str	00000000 
00030b34 l       .debug_str	00000000 
00025267 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000335ee l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0002301b l       .debug_str	00000000 
00023075 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002b696 l       .debug_str	00000000 
000230c4 l       .debug_str	00000000 
0002517c l       .debug_str	00000000 
0002516f l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
000230cc l       .debug_str	00000000 
000230d9 l       .debug_str	00000000 
000230e2 l       .debug_str	00000000 
000515e0 l       .debug_str	00000000 
0002ba62 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001390f l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013a51 l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d245 l       .debug_str	00000000 
00013a59 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013baa l       .debug_str	00000000 
0002521c l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
0005470b l       .debug_str	00000000 
000123a3 l       .debug_str	00000000 
0002e0bf l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
000251f0 l       .debug_str	00000000 
00013a69 l       .debug_str	00000000 
000230ec l       .debug_str	00000000 
0002312a l       .debug_str	00000000 
0001a8ac l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
0003e2ea l       .debug_str	00000000 
00057b90 l       .debug_str	00000000 
00023139 l       .debug_str	00000000 
00013a98 l       .debug_str	00000000 
00023162 l       .debug_str	00000000 
0001a91e l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001aad7 l       .debug_str	00000000 
0001fa5a l       .debug_str	00000000 
0000e7d8 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00023194 l       .debug_str	00000000 
000251ba l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
000231a2 l       .debug_str	00000000 
00013b85 l       .debug_str	00000000 
00013b98 l       .debug_str	00000000 
0005710c l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00042999 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005177b l       .debug_str	00000000 
000231e4 l       .debug_str	00000000 
000231e8 l       .debug_str	00000000 
000231f3 l       .debug_str	00000000 
00023202 l       .debug_str	00000000 
0002324a l       .debug_str	00000000 
0002326a l       .debug_str	00000000 
00031880 l       .debug_str	00000000 
000251a2 l       .debug_str	00000000 
000232b5 l       .debug_str	00000000 
000251a7 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
00023300 l       .debug_str	00000000 
00022722 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00023371 l       .debug_str	00000000 
0001421f l       .debug_str	00000000 
0002339f l       .debug_str	00000000 
0001b843 l       .debug_str	00000000 
000233e7 l       .debug_str	00000000 
00023417 l       .debug_str	00000000 
00023442 l       .debug_str	00000000 
00020347 l       .debug_str	00000000 
00020360 l       .debug_str	00000000 
00023479 l       .debug_str	00000000 
00014816 l       .debug_str	00000000 
000234ca l       .debug_str	00000000 
0001468a l       .debug_str	00000000 
0002351c l       .debug_str	00000000 
000146e1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000e9f4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025273 l       .debug_str	00000000 
0002529c l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
0002532d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000252a9 l       .debug_str	00000000 
00013a98 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00056914 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000252d2 l       .debug_str	00000000 
00025327 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
000256a2 l       .debug_str	00000000 
0002550a l       .debug_str	00000000 
00025546 l       .debug_str	00000000 
00025562 l       .debug_str	00000000 
0002559e l       .debug_str	00000000 
000255d4 l       .debug_str	00000000 
00025610 l       .debug_str	00000000 
0002561b l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
00025665 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
000256d9 l       .debug_str	00000000 
00025716 l       .debug_str	00000000 
00025725 l       .debug_str	00000000 
00025762 l       .debug_str	00000000 
000257a5 l       .debug_str	00000000 
000257e2 l       .debug_str	00000000 
0000e9f9 l       .debug_str	00000000 
00025819 l       .debug_str	00000000 
00025857 l       .debug_str	00000000 
0002588e l       .debug_str	00000000 
000258cd l       .debug_str	00000000 
00025906 l       .debug_str	00000000 
0002596a l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002599f l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000259ba l       .debug_str	00000000 
000259ff l       .debug_str	00000000 
00025a1c l       .debug_str	00000000 
00013bba l       .debug_str	00000000 
000191e1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
00025331 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025a2b l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
000259ae l       .debug_str	00000000 
0000f46a l       .debug_str	00000000 
00056557 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000251a7 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
0002536b l       .debug_str	00000000 
000259c9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
00025a0e l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
00025387 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e85c l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001926f l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0000e88b l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
00025394 l       .debug_str	00000000 
000253cd l       .debug_str	00000000 
00025468 l       .debug_str	00000000 
000254c2 l       .debug_str	00000000 
000254fe l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
00025a6d l       .debug_str	00000000 
00025ab8 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f99b l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001c955 l       .debug_str	00000000 
00026727 l       .debug_str	00000000 
00026734 l       .debug_str	00000000 
00026774 l       .debug_str	00000000 
00026871 l       .debug_str	00000000 
000268b1 l       .debug_str	00000000 
000268c0 l       .debug_str	00000000 
00026900 l       .debug_str	00000000 
0002691f l       .debug_str	00000000 
0002695f l       .debug_str	00000000 
0002697b l       .debug_str	00000000 
000269bb l       .debug_str	00000000 
000269c9 l       .debug_str	00000000 
00026a09 l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0001d467 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
00026a17 l       .debug_str	00000000 
00026a58 l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
00026a8d l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00026a97 l       .debug_str	00000000 
00026ad8 l       .debug_str	00000000 
0001f978 l       .debug_str	00000000 
00026b25 l       .debug_str	00000000 
00026b66 l       .debug_str	00000000 
00026b9b l       .debug_str	00000000 
00026ba6 l       .debug_str	00000000 
00026be7 l       .debug_str	00000000 
00026c34 l       .debug_str	00000000 
00026c75 l       .debug_str	00000000 
00026caa l       .debug_str	00000000 
00026d19 l       .debug_str	00000000 
00026e1a l       .debug_str	00000000 
0001dd3e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00026e89 l       .debug_str	00000000 
00026ea8 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016ef9 l       .debug_str	00000000 
0005254e l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0000f46a l       .debug_str	00000000 
00056557 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000251a7 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
000138da l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00026e98 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
000585b9 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00025aea l       .debug_str	00000000 
00025b57 l       .debug_str	00000000 
00025bed l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f6f2 l       .debug_str	00000000 
0000f769 l       .debug_str	00000000 
0000f7ed l       .debug_str	00000000 
0000f868 l       .debug_str	00000000 
0000f906 l       .debug_str	00000000 
0000f9b1 l       .debug_str	00000000 
00025cac l       .debug_str	00000000 
00025d71 l       .debug_str	00000000 
00025e43 l       .debug_str	00000000 
00025f0c l       .debug_str	00000000 
00025ff6 l       .debug_str	00000000 
000260fd l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00026203 l       .debug_str	00000000 
00026301 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00026402 l       .debug_str	00000000 
000264e2 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
000265e0 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
00026600 l       .debug_str	00000000 
00026607 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002660f l       .debug_str	00000000 
00026623 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00026655 l       .debug_str	00000000 
00026669 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002669b l       .debug_str	00000000 
000266da l       .debug_str	00000000 
000266e8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002743f l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000e85c l       .debug_str	00000000 
0000e865 l       .debug_str	00000000 
0000e873 l       .debug_str	00000000 
0001926f l       .debug_str	00000000 
0000e88b l       .debug_str	00000000 
00025468 l       .debug_str	00000000 
000272bb l       .debug_str	00000000 
00027378 l       .debug_str	00000000 
000273b3 l       .debug_str	00000000 
0002740c l       .debug_str	00000000 
0002596a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000274c2 l       .debug_str	00000000 
00027526 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00027529 l       .debug_str	00000000 
0000f26c l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
00025331 l       .debug_str	00000000 
00025a2b l       .debug_str	00000000 
000518f1 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00027599 l       .debug_str	00000000 
0002759c l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
0001915e l       .debug_str	00000000 
00011c27 l       .debug_str	00000000 
00011c32 l       .debug_str	00000000 
000275a9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f246 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000e885 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000191be l       .debug_str	00000000 
0000f259 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000259c9 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
000275c4 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
000274ed l       .debug_str	00000000 
00026ec6 l       .debug_str	00000000 
00026f63 l       .debug_str	00000000 
00026f9c l       .debug_str	00000000 
0002703b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00027558 l       .debug_str	00000000 
00027074 l       .debug_str	00000000 
00027111 l       .debug_str	00000000 
00027145 l       .debug_str	00000000 
000271e8 l       .debug_str	00000000 
00027287 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
000275a9 l       .debug_str	00000000 
000275c4 l       .debug_str	00000000 
00027668 l       .debug_str	00000000 
000276dd l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011099 l       .debug_str	00000000 
000259ba l       .debug_str	00000000 
00011c27 l       .debug_str	00000000 
00011c32 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00019209 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
000275f9 l       .debug_str	00000000 
0002596a l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000259c9 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bb41 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010b56 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00027714 l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00011d1e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
000277d9 l       .debug_str	00000000 
00027816 l       .debug_str	00000000 
00027827 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
00027a1e l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
0002789d l       .debug_str	00000000 
0001981c l       .debug_str	00000000 
000278e2 l       .debug_str	00000000 
00027927 l       .debug_str	00000000 
00027934 l       .debug_str	00000000 
00027979 l       .debug_str	00000000 
00027986 l       .debug_str	00000000 
0001b843 l       .debug_str	00000000 
000279cb l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
00027a13 l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
00027a66 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00027aac l       .debug_str	00000000 
00027af2 l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027859 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
0001f8ef l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000515ec l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
000124e8 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0001fb80 l       .debug_str	00000000 
0002beb8 l       .debug_str	00000000 
000124ed l       .debug_str	00000000 
0001f9db l       .debug_str	00000000 
000124e4 l       .debug_str	00000000 
0001fb86 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027b38 l       .debug_str	00000000 
000198bd l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f9d5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
0002d7de l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027ba1 l       .debug_str	00000000 
00053b33 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
00019d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00027c10 l       .debug_str	00000000 
00027c36 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016797 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00027c3f l       .debug_str	00000000 
00027cbb l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
00027ce8 l       .debug_str	00000000 
00013117 l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
000165d2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00027d4a l       .debug_str	00000000 
000165c4 l       .debug_str	00000000 
0001405c l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
000282a0 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
000285f4 l       .debug_str	00000000 
00021943 l       .debug_str	00000000 
00028673 l       .debug_str	00000000 
000219c6 l       .debug_str	00000000 
000286f2 l       .debug_str	00000000 
00028774 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
000289b8 l       .debug_str	00000000 
00028a3a l       .debug_str	00000000 
00028a83 l       .debug_str	00000000 
00028b05 l       .debug_str	00000000 
00028b4e l       .debug_str	00000000 
00021c47 l       .debug_str	00000000 
00028bd0 l       .debug_str	00000000 
00028c52 l       .debug_str	00000000 
00028e96 l       .debug_str	00000000 
00028f18 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00028f61 l       .debug_str	00000000 
00028fd5 l       .debug_str	00000000 
00012be3 l       .debug_str	00000000 
0001f8ef l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d245 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013baa l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00029244 l       .debug_str	00000000 
00029249 l       .debug_str	00000000 
000294b4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00057c07 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
00028f73 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00028fe7 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027d9c l       .debug_str	00000000 
00027e23 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00027e70 l       .debug_str	00000000 
00027ef7 l       .debug_str	00000000 
0002813f l       .debug_str	00000000 
000281c8 l       .debug_str	00000000 
00028217 l       .debug_str	00000000 
000284ea l       .debug_str	00000000 
00021638 l       .debug_str	00000000 
00028576 l       .debug_str	00000000 
000218c1 l       .debug_str	00000000 
0001df70 l     O .text	0000001c str.0
0001dfb0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013a51 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00058cba l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00029524 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00013a69 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00029574 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
00029839 l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000298b1 l       .debug_str	00000000 
00029adc l       .debug_str	00000000 
00029b54 l       .debug_str	00000000 
00029ce3 l       .debug_str	00000000 
00029d5b l       .debug_str	00000000 
00029ec3 l       .debug_str	00000000 
00029f3b l       .debug_str	00000000 
00029fb9 l       .debug_str	00000000 
0002a031 l       .debug_str	00000000 
0002a124 l       .debug_str	00000000 
0002a19c l       .debug_str	00000000 
0002a379 l       .debug_str	00000000 
0002a3f1 l       .debug_str	00000000 
0002a4bd l       .debug_str	00000000 
0002a535 l       .debug_str	00000000 
0002a565 l       .debug_str	00000000 
0002a5dd l       .debug_str	00000000 
0002a682 l       .debug_str	00000000 
0002a6fa l       .debug_str	00000000 
0002a83b l       .debug_str	00000000 
0002a8b3 l       .debug_str	00000000 
0002aa69 l       .debug_str	00000000 
0002aae1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
000295d8 l       .debug_str	00000000 
00029650 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
000296a7 l       .debug_str	00000000 
0002971f l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
00052696 l       .debug_str	00000000 
0002ae0e l       .debug_str	00000000 
0002ae2a l       .debug_str	00000000 
0002ae50 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000555e6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002ace5 l       .debug_str	00000000 
00013a98 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0002ad0e l       .debug_str	00000000 
0002ad1f l       .debug_str	00000000 
0002ad2f l       .debug_str	00000000 
0002ad7b l       .debug_str	00000000 
0002ad86 l       .debug_str	00000000 
0002adbc l       .debug_str	00000000 
0002add4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
00016679 l       .debug_str	00000000 
000166b3 l       .debug_str	00000000 
000166ec l       .debug_str	00000000 
000166fb l       .debug_str	00000000 
0001673e l       .debug_str	00000000 
00053bc1 l       .debug_str	00000000 
0003054c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013958 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
000116c4 l       .debug_str	00000000 
000166f5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002ae59 l       .debug_str	00000000 
0001399b l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
0002ae82 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
00053de2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
0002aebe l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002aed1 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
0002af5d l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
0002af66 l       .debug_str	00000000 
000360da l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0002af76 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00025327 l       .debug_str	00000000 
0002af9d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002affd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002b0c9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002b05d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
0002d7de l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002b0d2 l       .debug_str	00000000 
00053b33 l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0002b143 l       .debug_str	00000000 
0002b156 l       .debug_str	00000000 
000138da l       .debug_str	00000000 
00056493 l       .debug_str	00000000 
0002b187 l       .debug_str	00000000 
0002b18f l       .debug_str	00000000 
0002b198 l       .debug_str	00000000 
0002b1e1 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002b19f l       .debug_str	00000000 
0002b1de l       .debug_str	00000000 
0002b1e7 l       .debug_str	00000000 
0002b229 l       .debug_str	00000000 
0002b233 l       .debug_str	00000000 
0002b276 l       .debug_str	00000000 
0002b280 l       .debug_str	00000000 
0002b2c3 l       .debug_str	00000000 
0002b2cd l       .debug_str	00000000 
0002b310 l       .debug_str	00000000 
0002b31b l       .debug_str	00000000 
0002b360 l       .debug_str	00000000 
0002b36b l       .debug_str	00000000 
0002b3b0 l       .debug_str	00000000 
0002b3b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e9f5 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0002b9eb l       .debug_str	00000000 
000116c0 l       .debug_str	00000000 
0002b3c3 l       .debug_str	00000000 
0002b3d3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00012bbb l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00012ba5 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d245 l       .debug_str	00000000 
00058daf l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013baa l       .debug_str	00000000 
0002521c l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0002b419 l       .debug_str	00000000 
00022f5e l       .debug_str	00000000 
00057202 l       .debug_str	00000000 
0002bdef l       .debug_str	00000000 
00012bad l       .debug_str	00000000 
00056e14 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005266a l       .debug_str	00000000 
0002b42b l       .debug_str	00000000 
0002b430 l       .debug_str	00000000 
0005878a l       .debug_str	00000000 
0002b43b l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0002b445 l       .debug_str	00000000 
0002bab9 l       .debug_str	00000000 
0002b44f l       .debug_str	00000000 
000165d2 l       .debug_str	00000000 
0002baf9 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002be32 l       .debug_str	00000000 
00012bb7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0002b45d l       .debug_str	00000000 
0002b4d1 l       .debug_str	00000000 
0002bd13 l       .debug_str	00000000 
0002b4e3 l       .debug_str	00000000 
0002baff l       .debug_str	00000000 
0002bad9 l       .debug_str	00000000 
0001505e l       .debug_str	00000000 
0002bd56 l       .debug_str	00000000 
0002b4e8 l       .debug_str	00000000 
0002b55c l       .debug_str	00000000 
0002be6b l       .debug_str	00000000 
0002beb2 l       .debug_str	00000000 
0002bdb8 l       .debug_str	00000000 
0002b574 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
00030d66 l       .debug_str	00000000 
00052619 l       .debug_str	00000000 
0002becd l       .debug_str	00000000 
0002bd87 l       .debug_str	00000000 
0002b5ec l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056420 l       .debug_str	00000000 
00022731 l       .debug_str	00000000 
0002b644 l       .debug_str	00000000 
0002b649 l       .debug_str	00000000 
0002b65b l       .debug_str	00000000 
0001c955 l       .debug_str	00000000 
0002c54b l       .debug_str	00000000 
0002b664 l       .debug_str	00000000 
0001aa8d l       .debug_str	00000000 
0002b68c l       .debug_str	00000000 
0002b69c l       .debug_str	00000000 
00054abc l       .debug_str	00000000 
0002b6f5 l       .debug_str	00000000 
0002b6fd l       .debug_str	00000000 
00013b3a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00011144 l       .debug_str	00000000 
0002b705 l       .debug_str	00000000 
000167ff l       .debug_str	00000000 
0002b711 l       .debug_str	00000000 
0002b71b l       .debug_str	00000000 
0002b728 l       .debug_str	00000000 
0002b735 l       .debug_str	00000000 
0002b74a l       .debug_str	00000000 
0002b75e l       .debug_str	00000000 
0002b774 l       .debug_str	00000000 
0002b77c l       .debug_str	00000000 
0002b789 l       .debug_str	00000000 
0002b796 l       .debug_str	00000000 
0002c09f l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002b7a3 l       .debug_str	00000000 
0002b7d0 l       .debug_str	00000000 
0002b7ff l       .debug_str	00000000 
0002b826 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002b845 l       .debug_str	00000000 
0002b85a l       .debug_str	00000000 
0001a4af l       .debug_str	00000000 
000464eb l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
00052278 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
0002b864 l       .debug_str	00000000 
0002b889 l       .debug_str	00000000 
0002b86f l       .debug_str	00000000 
0002b908 l       .debug_str	00000000 
0002b899 l       .debug_str	00000000 
0002b89f l       .debug_str	00000000 
0002b8ae l       .debug_str	00000000 
0002b8b9 l       .debug_str	00000000 
0002b8ee l       .debug_str	00000000 
0002b913 l       .debug_str	00000000 
0002b923 l       .debug_str	00000000 
00052e82 l       .debug_str	00000000 
0002b955 l       .debug_str	00000000 
0002b95a l       .debug_str	00000000 
00053d25 l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
0002d1b8 l       .debug_str	00000000 
00013a69 l       .debug_str	00000000 
0002d1e6 l       .debug_str	00000000 
0002d21a l       .debug_str	00000000 
0002b960 l       .debug_str	00000000 
0000581f l       .debug_str	00000000 
0002b99e l       .debug_str	00000000 
0002d1c3 l       .debug_str	00000000 
0002d210 l       .debug_str	00000000 
0002b97f l       .debug_str	00000000 
0002b96c l       .debug_str	00000000 
0002b985 l       .debug_str	00000000 
00022730 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0002b9ad l       .debug_str	00000000 
0002b9b5 l       .debug_str	00000000 
00036e7e l       .debug_str	00000000 
0002b9bb l       .debug_str	00000000 
000449a9 l       .debug_str	00000000 
0002b9e2 l       .debug_str	00000000 
0002b9c6 l       .debug_str	00000000 
0000e9f4 l       .debug_str	00000000 
0002b9ea l       .debug_str	00000000 
0002b696 l       .debug_str	00000000 
000230c4 l       .debug_str	00000000 
0002517c l       .debug_str	00000000 
0002b9ef l       .debug_str	00000000 
0002ba13 l       .debug_str	00000000 
0002ba19 l       .debug_str	00000000 
0002ba21 l       .debug_str	00000000 
00047014 l       .debug_str	00000000 
00036a7a l       .debug_str	00000000 
0002ba26 l       .debug_str	00000000 
0002ba4e l       .debug_str	00000000 
0002ba30 l       .debug_str	00000000 
00010384 l       .debug_str	00000000 
0001914f l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
0001f99b l       .debug_str	00000000 
000230cc l       .debug_str	00000000 
000230d9 l       .debug_str	00000000 
000230e2 l       .debug_str	00000000 
000515e0 l       .debug_str	00000000 
0002ba62 l       .debug_str	00000000 
0002ba56 l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
0002ba6f l       .debug_str	00000000 
0002ba7b l       .debug_str	00000000 
0002ba9e l       .debug_str	00000000 
0002ba88 l       .debug_str	00000000 
0002baac l       .debug_str	00000000 
0002bacc l       .debug_str	00000000 
0002baec l       .debug_str	00000000 
0002bb07 l       .debug_str	00000000 
0002bb22 l       .debug_str	00000000 
0002bb28 l       .debug_str	00000000 
0002bb2c l       .debug_str	00000000 
0002bb3d l       .debug_str	00000000 
0002bb30 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
0002bb52 l       .debug_str	00000000 
0002bb4d l       .debug_str	00000000 
0002bb65 l       .debug_str	00000000 
0002bbb1 l       .debug_str	00000000 
0002bb8a l       .debug_str	00000000 
0002bba1 l       .debug_str	00000000 
0002bbcb l       .debug_str	00000000 
0002bbbc l       .debug_str	00000000 
0002bc13 l       .debug_str	00000000 
0002bbf3 l       .debug_str	00000000 
0002bc6c l       .debug_str	00000000 
0002bc4c l       .debug_str	00000000 
000515d2 l       .debug_str	00000000 
0002bcc3 l       .debug_str	00000000 
0002bcc8 l       .debug_str	00000000 
0002bcce l       .debug_str	00000000 
0002bcf1 l       .debug_str	00000000 
0002bcd3 l       .debug_str	00000000 
0002bcfc l       .debug_str	00000000 
0002bd47 l       .debug_str	00000000 
0002bd78 l       .debug_str	00000000 
0002bda9 l       .debug_str	00000000 
0002bdd8 l       .debug_str	00000000 
0002be23 l       .debug_str	00000000 
0002be54 l       .debug_str	00000000 
0001a8ac l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031490 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00030fa6 l       .debug_str	00000000 
0005468f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00058cc9 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
00052202 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005284a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f8bf l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fa3c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0001f86d l       .debug_str	00000000 
0002bea5 l       .debug_str	00000000 
0002bebe l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0002beec l       .debug_str	00000000 
0002beeb l       .debug_str	00000000 
0002bf00 l       .debug_str	00000000 
0002bef1 l       .debug_str	00000000 
000522f3 l       .debug_str	00000000 
000515c0 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002bf2d l       .debug_str	00000000 
0002bf1f l       .debug_str	00000000 
0002bf1e l       .debug_str	00000000 
0001f9a4 l       .debug_str	00000000 
00019159 l       .debug_str	00000000 
000590ff l       .debug_str	00000000 
0002bf36 l       .debug_str	00000000 
0002bf3a l       .debug_str	00000000 
0002bf3d l       .debug_str	00000000 
00057bef l       .debug_str	00000000 
0001913d l       .debug_str	00000000 
0002bf40 l       .debug_str	00000000 
0001a427 l       .debug_str	00000000 
0002bf44 l       .debug_str	00000000 
0002bf43 l       .debug_str	00000000 
0002bf49 l       .debug_str	00000000 
0002c01b l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0002bf67 l       .debug_str	00000000 
0002bf55 l       .debug_str	00000000 
0002bf8c l       .debug_str	00000000 
0002c054 l       .debug_str	00000000 
0002bfaa l       .debug_str	00000000 
0002bf98 l       .debug_str	00000000 
0002bfcf l       .debug_str	00000000 
0002bfe8 l       .debug_str	00000000 
0002bfd6 l       .debug_str	00000000 
0002bff4 l       .debug_str	00000000 
0002c00c l       .debug_str	00000000 
0002c045 l       .debug_str	00000000 
0001a42d l       .debug_str	00000000 
0002c07e l       .debug_str	00000000 
0002c08b l       .debug_str	00000000 
0002c08a l       .debug_str	00000000 
0002c093 l       .debug_str	00000000 
0002c0c0 l       .debug_str	00000000 
0002c0ab l       .debug_str	00000000 
0002c0dd l       .debug_str	00000000 
0002c0e9 l       .debug_str	00000000 
0002c193 l       .debug_str	00000000 
0002c0f5 l       .debug_str	00000000 
0002c0fc l       .debug_str	00000000 
0002c105 l       .debug_str	00000000 
0002c113 l       .debug_str	00000000 
0002c11a l       .debug_str	00000000 
0002c122 l       .debug_str	00000000 
0002c129 l       .debug_str	00000000 
0002c16f l       .debug_str	00000000 
0002c14a l       .debug_str	00000000 
0002c135 l       .debug_str	00000000 
0002c15a l       .debug_str	00000000 
0002c17e l       .debug_str	00000000 
0000ea13 l       .debug_str	00000000 
0002c19f l       .debug_str	00000000 
0002518f l       .debug_str	00000000 
00055ad9 l       .debug_str	00000000 
0001f7e0 l       .debug_str	00000000 
0001f7c9 l       .debug_str	00000000 
0002c1b9 l       .debug_str	00000000 
0002c1dc l       .debug_str	00000000 
0002c1c5 l       .debug_str	00000000 
0002c226 l       .debug_str	00000000 
0002c21a l       .debug_str	00000000 
0002b691 l       .debug_str	00000000 
0002c243 l       .debug_str	00000000 
0002c22c l       .debug_str	00000000 
0002c28c l       .debug_str	00000000 
0002c2b4 l       .debug_str	00000000 
0002c29d l       .debug_str	00000000 
0005467d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00052708 l       .debug_str	00000000 
0002c363 l       .debug_str	00000000 
0002c345 l       .debug_str	00000000 
0002c459 l       .debug_str	00000000 
0002c439 l       .debug_str	00000000 
0002c4cc l       .debug_str	00000000 
0002c4ac l       .debug_str	00000000 
00042ad2 l       .debug_str	00000000 
0002c51f l       .debug_str	00000000 
0002c52c l       .debug_str	00000000 
0002c537 l       .debug_str	00000000 
0002c54d l       .debug_str	00000000 
0002c557 l       .debug_str	00000000 
0002c5ad l       .debug_str	00000000 
0002c5bf l       .debug_str	00000000 
0002c611 l       .debug_str	00000000 
0002c625 l       .debug_str	00000000 
0002c679 l       .debug_str	00000000 
0002c680 l       .debug_str	00000000 
0002c6c6 l       .debug_str	00000000 
0002c6d5 l       .debug_str	00000000 
0002c72f l       .debug_str	00000000 
0002c785 l       .debug_str	00000000 
0002c7dd l       .debug_str	00000000 
0002c827 l       .debug_str	00000000 
0002c82d l       .debug_str	00000000 
0002c87d l       .debug_str	00000000 
0002c8c9 l       .debug_str	00000000 
0002c917 l       .debug_str	00000000 
00025235 l       .debug_str	00000000 
0002c957 l       .debug_str	00000000 
0002c9a4 l       .debug_str	00000000 
0002c9ed l       .debug_str	00000000 
0002ca38 l       .debug_str	00000000 
0002ca75 l       .debug_str	00000000 
0002ca85 l       .debug_str	00000000 
0002cae0 l       .debug_str	00000000 
0002cb37 l       .debug_str	00000000 
0002cb90 l       .debug_str	00000000 
00039e66 l       .debug_str	00000000 
0002cbdb l       .debug_str	00000000 
0002cc2f l       .debug_str	00000000 
0002cc7f l       .debug_str	00000000 
0002ccd1 l       .debug_str	00000000 
00052174 l       .debug_str	00000000 
0002cd15 l       .debug_str	00000000 
0002cd61 l       .debug_str	00000000 
0002cda9 l       .debug_str	00000000 
0002cdf3 l       .debug_str	00000000 
00039c9c l       .debug_str	00000000 
0002ce2f l       .debug_str	00000000 
0002ce83 l       .debug_str	00000000 
0002ced3 l       .debug_str	00000000 
0002cf25 l       .debug_str	00000000 
0002cf69 l       .debug_str	00000000 
0002cf75 l       .debug_str	00000000 
0002cfcc l       .debug_str	00000000 
0002d01f l       .debug_str	00000000 
0002d074 l       .debug_str	00000000 
0002d0bb l       .debug_str	00000000 
0002d0c7 l       .debug_str	00000000 
0002d0de l       .debug_str	00000000 
0002d0d7 l       .debug_str	00000000 
0002d0f0 l       .debug_str	00000000 
0002d105 l       .debug_str	00000000 
0002d156 l       .debug_str	00000000 
0002d166 l       .debug_str	00000000 
0002d1b7 l       .debug_str	00000000 
0002d1c2 l       .debug_str	00000000 
0002d1e5 l       .debug_str	00000000 
0002d219 l       .debug_str	00000000 
0002d22f l       .debug_str	00000000 
0002d25d l       .debug_str	00000000 
0002d251 l       .debug_str	00000000 
0002d26b l       .debug_str	00000000 
0002d26a l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00019145 l       .debug_str	00000000 
000251a2 l       .debug_str	00000000 
000251a1 l       .debug_str	00000000 
000251a7 l       .debug_str	00000000 
000251a6 l       .debug_str	00000000 
0002d26e l       .debug_str	00000000 
0002d2ae l       .debug_str	00000000 
0002d2b6 l       .debug_str	00000000 
0002d2f6 l       .debug_str	00000000 
0002d300 l       .debug_str	00000000 
0005170c l       .debug_str	00000000 
00056277 l       .debug_str	00000000 
0002d33c l       .debug_str	00000000 
0001b61b l       .debug_str	00000000 
0003015c l       .debug_str	00000000 
0002d364 l       .debug_str	00000000 
0001b4d3 l       .debug_str	00000000 
0002d38d l       .debug_str	00000000 
0002d3b2 l       .debug_str	00000000 
0003e2ea l       .debug_str	00000000 
00052762 l       .debug_str	00000000 
0002d3b9 l       .debug_str	00000000 
0002d3c2 l       .debug_str	00000000 
0002d3fb l       .debug_str	00000000 
00011437 l       .debug_str	00000000 
0002d403 l       .debug_str	00000000 
0001490c l       .debug_str	00000000 
0002d498 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0002d4e3 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0002d52a l       .debug_str	00000000 
0001405c l       .debug_str	00000000 
0002d57f l       .debug_str	00000000 
0002d5bc l       .debug_str	00000000 
00013a59 l       .debug_str	00000000 
0002d5c7 l       .debug_str	00000000 
00014816 l       .debug_str	00000000 
0002d61c l       .debug_str	00000000 
000147a6 l       .debug_str	00000000 
0002d66e l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0002d6b5 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
000123a3 l       .debug_str	00000000 
0002e0bf l       .debug_str	00000000 
0002d73b l       .debug_str	00000000 
0002d77c l       .debug_str	00000000 
0002d79f l       .debug_str	00000000 
0002d7da l       .debug_str	00000000 
0002d7e4 l       .debug_str	00000000 
0002d86e l       .debug_str	00000000 
0002d8a0 l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
00013a51 l       .debug_str	00000000 
0002d914 l       .debug_str	00000000 
0002d965 l       .debug_str	00000000 
00013b85 l       .debug_str	00000000 
0002d9a7 l       .debug_str	00000000 
0002da2e l       .debug_str	00000000 
0002da3d l       .debug_str	00000000 
0002dac7 l       .debug_str	00000000 
0002db43 l       .debug_str	00000000 
0002db73 l       .debug_str	00000000 
0002dbae l       .debug_str	00000000 
0002dbb8 l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
0002dc2f l       .debug_str	00000000 
0002dc84 l       .debug_str	00000000 
0002dc8d l       .debug_str	00000000 
0002dcde l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0002dcea l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0002dcf7 l       .debug_str	00000000 
0002dd00 l       .debug_str	00000000 
0002dd16 l       .debug_str	00000000 
0002dd23 l       .debug_str	00000000 
0002dd68 l       .debug_str	00000000 
0002dd7c l       .debug_str	00000000 
0002ddd1 l       .debug_str	00000000 
0002ddda l       .debug_str	00000000 
00044f89 l       .debug_str	00000000 
0002de12 l       .debug_str	00000000 
0002de4f l       .debug_str	00000000 
0002de5a l       .debug_str	00000000 
0002dedd l       .debug_str	00000000 
0002dee8 l       .debug_str	00000000 
0002df6e l       .debug_str	00000000 
0002dfe3 l       .debug_str	00000000 
0002e00f l       .debug_str	00000000 
0002e098 l       .debug_str	00000000 
0002e0a7 l       .debug_str	00000000 
0002e0b4 l       .debug_str	00000000 
0002e0c8 l       .debug_str	00000000 
0002e11e l       .debug_str	00000000 
0002e18d l       .debug_str	00000000 
0002e20d l       .debug_str	00000000 
0002e27b l       .debug_str	00000000 
0002e306 l       .debug_str	00000000 
0002e37b l       .debug_str	00000000 
0002e3bb l       .debug_str	00000000 
0002e43e l       .debug_str	00000000 
0002e47f l       .debug_str	00000000 
00042994 l       .debug_str	00000000 
000464ae l       .debug_str	00000000 
0002e4e4 l       .debug_str	00000000 
0002e593 l       .debug_str	00000000 
0002e5de l       .debug_str	00000000 
00014a91 l       .debug_str	00000000 
0002e687 l       .debug_str	00000000 
0002e703 l       .debug_str	00000000 
0001390f l       .debug_str	00000000 
0002e728 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
0002e775 l       .debug_str	00000000 
00013fff l       .debug_str	00000000 
0002e7c8 l       .debug_str	00000000 
0002e803 l       .debug_str	00000000 
0002e80e l       .debug_str	00000000 
0001a0cb l       .debug_str	00000000 
0002e89a l       .debug_str	00000000 
00013c57 l       .debug_str	00000000 
0002e91d l       .debug_str	00000000 
0002e9a5 l       .debug_str	00000000 
0002055b l       .debug_str	00000000 
0002ea1a l       .debug_str	00000000 
0002eaa0 l       .debug_str	00000000 
00014f98 l       .debug_str	00000000 
0002eb15 l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
0002eb78 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
0002ebda l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
0002ec20 l       .debug_str	00000000 
0002ec68 l       .debug_str	00000000 
0002ec72 l       .debug_str	00000000 
0002ecb3 l       .debug_str	00000000 
0002eccd l       .debug_str	00000000 
0002525a l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0002ecd3 l       .debug_str	00000000 
0002ecdc l       .debug_str	00000000 
0002ed41 l       .debug_str	00000000 
0002ed50 l       .debug_str	00000000 
0002ed92 l       .debug_str	00000000 
0002ed9c l       .debug_str	00000000 
0002ee01 l       .debug_str	00000000 
0002ee43 l       .debug_str	00000000 
0002ee8d l       .debug_str	00000000 
0002ee9c l       .debug_str	00000000 
0002eed2 l       .debug_str	00000000 
0002eedb l       .debug_str	00000000 
00016ef9 l       .debug_str	00000000 
0002eee5 l       .debug_str	00000000 
0002eee8 l       .debug_str	00000000 
0002ef20 l       .debug_str	00000000 
0002ef2a l       .debug_str	00000000 
0002ef6e l       .debug_str	00000000 
0002ef84 l       .debug_str	00000000 
0002efcd l       .debug_str	00000000 
00013bcc l       .debug_str	00000000 
00025245 l       .debug_str	00000000 
0002f012 l       .debug_str	00000000 
0002f05b l       .debug_str	00000000 
0002f069 l       .debug_str	00000000 
0002f0b1 l       .debug_str	00000000 
00023913 l       .debug_str	00000000 
0002f0fb l       .debug_str	00000000 
000388d3 l       .debug_str	00000000 
0002f193 l       .debug_str	00000000 
00052145 l       .debug_str	00000000 
0002f22d l       .debug_str	00000000 
00023e03 l       .debug_str	00000000 
0002f29f l       .debug_str	00000000 
00023b36 l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0002f374 l       .debug_str	00000000 
0002f3bb l       .debug_str	00000000 
0002f3c9 l       .debug_str	00000000 
0002f3d3 l       .debug_str	00000000 
0002f421 l       .debug_str	00000000 
0002f431 l       .debug_str	00000000 
0002f47c l       .debug_str	00000000 
0002f48a l       .debug_str	00000000 
0002f518 l       .debug_str	00000000 
0002f527 l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
0002f570 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
0002f5b5 l       .debug_str	00000000 
0002f5ef l       .debug_str	00000000 
0002f5f8 l       .debug_str	00000000 
0002f644 l       .debug_str	00000000 
0002f65c l       .debug_str	00000000 
0002f6be l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
0002f6f3 l       .debug_str	00000000 
0002f71b l       .debug_str	00000000 
0002f753 l       .debug_str	00000000 
0002f77c l       .debug_str	00000000 
0002f787 l       .debug_str	00000000 
0001a82a l       .debug_str	00000000 
0002f7ac l       .debug_str	00000000 
0002f83b l       .debug_str	00000000 
0002f872 l       .debug_str	00000000 
0002f8f8 l       .debug_str	00000000 
0002f946 l       .debug_str	00000000 
0002f94f l       .debug_str	00000000 
0002f9d5 l       .debug_str	00000000 
0002f9e8 l       .debug_str	00000000 
0002fa71 l       .debug_str	00000000 
0002facd l       .debug_str	00000000 
0002fb0f l       .debug_str	00000000 
0002fbc1 l       .debug_str	00000000 
0002fc00 l       .debug_str	00000000 
0002fca5 l       .debug_str	00000000 
0002fd39 l       .debug_str	00000000 
0002fd5f l       .debug_str	00000000 
0002fddb l       .debug_str	00000000 
0002fe16 l       .debug_str	00000000 
0002fe23 l       .debug_str	00000000 
0002fe5c l       .debug_str	00000000 
0002fe74 l       .debug_str	00000000 
0002feb4 l       .debug_str	00000000 
0002aecb l       .debug_str	00000000 
0002fec0 l       .debug_str	00000000 
0002ff1d l       .debug_str	00000000 
0002ff7a l       .debug_str	00000000 
00030027 l       .debug_str	00000000 
00030084 l       .debug_str	00000000 
00016378 l       .debug_str	00000000 
000300f1 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
00030160 l       .debug_str	00000000 
00030190 l       .debug_str	00000000 
000301bc l       .debug_str	00000000 
00030228 l       .debug_str	00000000 
00030258 l       .debug_str	00000000 
00030294 l       .debug_str	00000000 
000302de l       .debug_str	00000000 
000302ee l       .debug_str	00000000 
00030323 l       .debug_str	00000000 
00030368 l       .debug_str	00000000 
00030373 l       .debug_str	00000000 
000303b3 l       .debug_str	00000000 
000303c1 l       .debug_str	00000000 
0003044d l       .debug_str	00000000 
000304c9 l       .debug_str	00000000 
000304e9 l       .debug_str	00000000 
00030543 l       .debug_str	00000000 
00030550 l       .debug_str	00000000 
00030589 l       .debug_str	00000000 
00030591 l       .debug_str	00000000 
000305e6 l       .debug_str	00000000 
00030638 l       .debug_str	00000000 
0002f51d l       .debug_str	00000000 
0003067f l       .debug_str	00000000 
000306f3 l       .debug_str	00000000 
00030737 l       .debug_str	00000000 
00030783 l       .debug_str	00000000 
000307c2 l       .debug_str	00000000 
000307e8 l       .debug_str	00000000 
000307fa l       .debug_str	00000000 
00030804 l       .debug_str	00000000 
00030846 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
000308cd l       .debug_str	00000000 
00027cbb l       .debug_str	00000000 
00030949 l       .debug_str	00000000 
000309c0 l       .debug_str	00000000 
00030a0e l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00030a9e l       .debug_str	00000000 
00030ada l       .debug_str	00000000 
00030ae7 l       .debug_str	00000000 
00030b2d l       .debug_str	00000000 
00030b3a l       .debug_str	00000000 
00031880 l       .debug_str	00000000 
00030b6c l       .debug_str	00000000 
00030bbc l       .debug_str	00000000 
00030bd3 l       .debug_str	00000000 
00030c5d l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
00030cd9 l       .debug_str	00000000 
00030ced l       .debug_str	00000000 
00030d4a l       .debug_str	00000000 
00030d59 l       .debug_str	00000000 
00030d6a l       .debug_str	00000000 
00030dc4 l       .debug_str	00000000 
00030dd3 l       .debug_str	00000000 
00030e5c l       .debug_str	00000000 
00030e6a l       .debug_str	00000000 
00030ec0 l       .debug_str	00000000 
00030f14 l       .debug_str	00000000 
00030f8d l       .debug_str	00000000 
00030fa5 l       .debug_str	00000000 
00030faf l       .debug_str	00000000 
00031046 l       .debug_str	00000000 
00031060 l       .debug_str	00000000 
0001d447 l       .debug_str	00000000 
00031099 l       .debug_str	00000000 
00013117 l       .debug_str	00000000 
000310fe l       .debug_str	00000000 
00031195 l       .debug_str	00000000 
00031199 l       .debug_str	00000000 
0003148e l       .debug_str	00000000 
0003119e l       .debug_str	00000000 
0005713f l       .debug_str	00000000 
00013915 l       .debug_str	00000000 
000311d0 l       .debug_str	00000000 
0001964d l       .debug_str	00000000 
0003120e l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
00031261 l       .debug_str	00000000 
000312ed l       .debug_str	00000000 
00031369 l       .debug_str	00000000 
00031388 l       .debug_str	00000000 
000313d3 l       .debug_str	00000000 
000313e0 l       .debug_str	00000000 
00031454 l       .debug_str	00000000 
00035792 l       .debug_str	00000000 
00046ecd l       .debug_str	00000000 
00031473 l       .debug_str	00000000 
00031493 l       .debug_str	00000000 
000314af l       .debug_str	00000000 
000314b9 l       .debug_str	00000000 
00031545 l       .debug_str	00000000 
000315c1 l       .debug_str	00000000 
000315f2 l       .debug_str	00000000 
00031675 l       .debug_str	00000000 
00031695 l       .debug_str	00000000 
0003171b l       .debug_str	00000000 
00031790 l       .debug_str	00000000 
0002af66 l       .debug_str	00000000 
0005470b l       .debug_str	00000000 
000317d1 l       .debug_str	00000000 
00023ec9 l       .debug_str	00000000 
0003181c l       .debug_str	00000000 
00031878 l       .debug_str	00000000 
00031884 l       .debug_str	00000000 
000318cd l       .debug_str	00000000 
000318dd l       .debug_str	00000000 
00031922 l       .debug_str	00000000 
0003196b l       .debug_str	00000000 
000319b0 l       .debug_str	00000000 
00031a0c l       .debug_str	00000000 
00031a57 l       .debug_str	00000000 
00031a9e l       .debug_str	00000000 
00031afc l       .debug_str	00000000 
00031b47 l       .debug_str	00000000 
00031b8e l       .debug_str	00000000 
00031bec l       .debug_str	00000000 
00031c37 l       .debug_str	00000000 
00031c7e l       .debug_str	00000000 
00031cdc l       .debug_str	00000000 
00031d25 l       .debug_str	00000000 
00031d6a l       .debug_str	00000000 
00031dc6 l       .debug_str	00000000 
00031e0f l       .debug_str	00000000 
00031e54 l       .debug_str	00000000 
00031eb0 l       .debug_str	00000000 
00031efa l       .debug_str	00000000 
00031f40 l       .debug_str	00000000 
00031f9d l       .debug_str	00000000 
00031fe7 l       .debug_str	00000000 
0003202d l       .debug_str	00000000 
0003208a l       .debug_str	00000000 
000320e5 l       .debug_str	00000000 
0003212d l       .debug_str	00000000 
00032171 l       .debug_str	00000000 
000321b9 l       .debug_str	00000000 
000321fd l       .debug_str	00000000 
00032258 l       .debug_str	00000000 
000322a1 l       .debug_str	00000000 
000322e6 l       .debug_str	00000000 
00032342 l       .debug_str	00000000 
0003238b l       .debug_str	00000000 
000323d0 l       .debug_str	00000000 
0003242c l       .debug_str	00000000 
00032475 l       .debug_str	00000000 
000324ba l       .debug_str	00000000 
00032516 l       .debug_str	00000000 
00032560 l       .debug_str	00000000 
000325a6 l       .debug_str	00000000 
00032603 l       .debug_str	00000000 
0003264d l       .debug_str	00000000 
00032693 l       .debug_str	00000000 
000326f0 l       .debug_str	00000000 
0003273a l       .debug_str	00000000 
00032780 l       .debug_str	00000000 
000327dd l       .debug_str	00000000 
00032838 l       .debug_str	00000000 
00032880 l       .debug_str	00000000 
000328c4 l       .debug_str	00000000 
0003290c l       .debug_str	00000000 
00032950 l       .debug_str	00000000 
000329ab l       .debug_str	00000000 
00032a06 l       .debug_str	00000000 
00032a4e l       .debug_str	00000000 
00032a92 l       .debug_str	00000000 
00032adb l       .debug_str	00000000 
00032b20 l       .debug_str	00000000 
00032b7c l       .debug_str	00000000 
00032bd8 l       .debug_str	00000000 
00032c21 l       .debug_str	00000000 
00032c66 l       .debug_str	00000000 
00032cc2 l       .debug_str	00000000 
00032d0b l       .debug_str	00000000 
00032d50 l       .debug_str	00000000 
00032dac l       .debug_str	00000000 
00032df5 l       .debug_str	00000000 
00032e3a l       .debug_str	00000000 
000239e9 l       .debug_str	00000000 
00032e96 l       .debug_str	00000000 
00032ed5 l       .debug_str	00000000 
00032f0a l       .debug_str	00000000 
0000582c l       .debug_str	00000000 
00013a63 l       .debug_str	00000000 
00013bb3 l       .debug_str	00000000 
00032f14 l       .debug_str	00000000 
00015b79 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00032f4e l       .debug_str	00000000 
00011018 l       .debug_str	00000000 
00032fe0 l       .debug_str	00000000 
000150a5 l       .debug_str	00000000 
00033019 l       .debug_str	00000000 
0001458c l       .debug_str	00000000 
00033040 l       .debug_str	00000000 
000144d8 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0003307a l       .debug_str	00000000 
00014257 l       .debug_str	00000000 
000330a0 l       .debug_str	00000000 
00013f9e l       .debug_str	00000000 
000330fa l       .debug_str	00000000 
000149b2 l       .debug_str	00000000 
00033194 l       .debug_str	00000000 
00013bc2 l       .debug_str	00000000 
0003321d l       .debug_str	00000000 
000332c4 l       .debug_str	00000000 
000332fd l       .debug_str	00000000 
00033372 l       .debug_str	00000000 
0003339b l       .debug_str	00000000 
00026a8d l       .debug_str	00000000 
000333d0 l       .debug_str	00000000 
0003340c l       .debug_str	00000000 
0003341d l       .debug_str	00000000 
00033456 l       .debug_str	00000000 
000131b2 l       .debug_str	00000000 
00033463 l       .debug_str	00000000 
00033472 l       .debug_str	00000000 
0002ed49 l       .debug_str	00000000 
000334bb l       .debug_str	00000000 
000334ee l       .debug_str	00000000 
000334fb l       .debug_str	00000000 
000583fe l       .debug_str	00000000 
00033546 l       .debug_str	00000000 
0003359e l       .debug_str	00000000 
000335b3 l       .debug_str	00000000 
000335e9 l       .debug_str	00000000 
000335f4 l       .debug_str	00000000 
00026b9b l       .debug_str	00000000 
00033653 l       .debug_str	00000000 
000336c6 l       .debug_str	00000000 
0003372d l       .debug_str	00000000 
0003374d l       .debug_str	00000000 
0003378c l       .debug_str	00000000 
000337ab l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003381e l       .debug_str	00000000 
0003389b l       .debug_str	00000000 
00033900 l       .debug_str	00000000 
00033960 l       .debug_str	00000000 
000339d3 l       .debug_str	00000000 
00033a50 l       .debug_str	00000000 
00015d0e l       .debug_str	00000000 
00033ac8 l       .debug_str	00000000 
00033b3d l       .debug_str	00000000 
00033bb7 l       .debug_str	00000000 
00011c10 l       .debug_str	00000000 
00011c1b l       .debug_str	00000000 
00033c17 l       .debug_str	00000000 
000563ec l       .debug_str	00000000 
00033c55 l       .debug_str	00000000 
00033c97 l       .debug_str	00000000 
00033cc2 l       .debug_str	00000000 
00033d03 l       .debug_str	00000000 
00033d0d l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
000572a6 l       .debug_str	00000000 
00051b8c l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00033d69 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
00033da5 l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
00033dec l       .debug_str	00000000 
00033e4a l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
00033ea1 l       .debug_str	00000000 
00033efb l       .debug_str	00000000 
00033f05 l       .debug_str	00000000 
00013180 l       .debug_str	00000000 
00013185 l       .debug_str	00000000 
00033f48 l       .debug_str	00000000 
00033f7e l       .debug_str	00000000 
00033f8e l       .debug_str	00000000 
00033f9d l       .debug_str	00000000 
00033fa8 l       .debug_str	00000000 
0002b85f l       .debug_str	00000000 
00033fe2 l       .debug_str	00000000 
0003402b l       .debug_str	00000000 
00025a0e l       .debug_str	00000000 
00034072 l       .debug_str	00000000 
000340ad l       .debug_str	00000000 
000340d2 l       .debug_str	00000000 
0003413e l       .debug_str	00000000 
00034151 l       .debug_str	00000000 
000341c8 l       .debug_str	00000000 
000341d3 l       .debug_str	00000000 
00034210 l       .debug_str	00000000 
0003421b l       .debug_str	00000000 
0003429c l       .debug_str	00000000 
000342e2 l       .debug_str	00000000 
00034309 l       .debug_str	00000000 
00034338 l       .debug_str	00000000 
00034349 l       .debug_str	00000000 
00013b05 l       .debug_str	00000000 
000343a5 l       .debug_str	00000000 
000343d6 l       .debug_str	00000000 
0001b843 l       .debug_str	00000000 
0003441e l       .debug_str	00000000 
0001fda4 l       .debug_str	00000000 
0003445c l       .debug_str	00000000 
000344a0 l       .debug_str	00000000 
000344f3 l       .debug_str	00000000 
00030f8e l       .debug_str	00000000 
0003456b l       .debug_str	00000000 
000345ba l       .debug_str	00000000 
00034650 l       .debug_str	00000000 
00034694 l       .debug_str	00000000 
000383d2 l       .debug_str	00000000 
0003470c l       .debug_str	00000000 
0003475b l       .debug_str	00000000 
000347f1 l       .debug_str	00000000 
0003480b l       .debug_str	00000000 
0003485a l       .debug_str	00000000 
00034893 l       .debug_str	00000000 
000348ae l       .debug_str	00000000 
00015730 l       .debug_str	00000000 
00034912 l       .debug_str	00000000 
0001503c l       .debug_str	00000000 
0003498b l       .debug_str	00000000 
00022722 l       .debug_str	00000000 
000349fc l       .debug_str	00000000 
00034a92 l       .debug_str	00000000 
00034b2a l       .debug_str	00000000 
00034b9c l       .debug_str	00000000 
00034bc4 l       .debug_str	00000000 
0001aad7 l       .debug_str	00000000 
00034c7c l       .debug_str	00000000 
00024327 l       .debug_str	00000000 
00034cc1 l       .debug_str	00000000 
00034d77 l       .debug_str	00000000 
00034dbc l       .debug_str	00000000 
00002b77 l       .debug_str	00000000 
00034dfe l       .debug_str	00000000 
00034e59 l       .debug_str	00000000 
00034e5e l       .debug_str	00000000 
00034eb7 l       .debug_str	00000000 
00034eeb l       .debug_str	00000000 
00034eff l       .debug_str	00000000 
00034f3a l       .debug_str	00000000 
00034f7c l       .debug_str	00000000 
00034f92 l       .debug_str	00000000 
00034ffe l       .debug_str	00000000 
00011c14 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00035040 l       .debug_str	00000000 
00035080 l       .debug_str	00000000 
000350da l       .debug_str	00000000 
0003511c l       .debug_str	00000000 
00035177 l       .debug_str	00000000 
000351b9 l       .debug_str	00000000 
000351c4 l       .debug_str	00000000 
00035204 l       .debug_str	00000000 
0003520a l       .debug_str	00000000 
00035264 l       .debug_str	00000000 
0003526d l       .debug_str	00000000 
000352af l       .debug_str	00000000 
00035307 l       .debug_str	00000000 
00035349 l       .debug_str	00000000 
000353a2 l       .debug_str	00000000 
000353ac l       .debug_str	00000000 
000353b4 l       .debug_str	00000000 
000353bd l       .debug_str	00000000 
000353b0 l       .debug_str	00000000 
000353ff l       .debug_str	00000000 
00035454 l       .debug_str	00000000 
00035491 l       .debug_str	00000000 
000354d3 l       .debug_str	00000000 
0003552a l       .debug_str	00000000 
0003556c l       .debug_str	00000000 
000355c4 l       .debug_str	00000000 
000355fc l       .debug_str	00000000 
00035608 l       .debug_str	00000000 
00035645 l       .debug_str	00000000 
000356a7 l       .debug_str	00000000 
000356e8 l       .debug_str	00000000 
000356f1 l       .debug_str	00000000 
0003574f l       .debug_str	00000000 
00035788 l       .debug_str	00000000 
00035797 l       .debug_str	00000000 
000357d6 l       .debug_str	00000000 
000357eb l       .debug_str	00000000 
00035831 l       .debug_str	00000000 
0003583e l       .debug_str	00000000 
00035844 l       .debug_str	00000000 
0003587d l       .debug_str	00000000 
00035909 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0005177b l       .debug_str	00000000 
00035957 l       .debug_str	00000000 
0003598f l       .debug_str	00000000 
0003599b l       .debug_str	00000000 
000359d8 l       .debug_str	00000000 
00035a3a l       .debug_str	00000000 
00035a7b l       .debug_str	00000000 
00035ad9 l       .debug_str	00000000 
00035b13 l       .debug_str	00000000 
00035b6d l       .debug_str	00000000 
00035bb6 l       .debug_str	00000000 
00035bc6 l       .debug_str	00000000 
00035bff l       .debug_str	00000000 
00035c81 l       .debug_str	00000000 
00035cbb l       .debug_str	00000000 
00035d15 l       .debug_str	00000000 
00035d50 l       .debug_str	00000000 
00035db0 l       .debug_str	00000000 
00035deb l       .debug_str	00000000 
00035e4b l       .debug_str	00000000 
00035e89 l       .debug_str	00000000 
00035ee7 l       .debug_str	00000000 
00035f25 l       .debug_str	00000000 
00035f83 l       .debug_str	00000000 
00035fce l       .debug_str	00000000 
00035fd7 l       .debug_str	00000000 
00036026 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00036032 l       .debug_str	00000000 
00036063 l       .debug_str	00000000 
0003608e l       .debug_str	00000000 
000360dc l       .debug_str	00000000 
00013b36 l       .debug_str	00000000 
000360e3 l       .debug_str	00000000 
00036148 l       .debug_str	00000000 
00036179 l       .debug_str	00000000 
00036181 l       .debug_str	00000000 
000141b4 l       .debug_str	00000000 
000361b2 l       .debug_str	00000000 
0003620b l       .debug_str	00000000 
00036299 l       .debug_str	00000000 
000362e5 l       .debug_str	00000000 
0003630a l       .debug_str	00000000 
00036327 l       .debug_str	00000000 
00036351 l       .debug_str	00000000 
0001aa6a l       .debug_str	00000000 
0001ab25 l       .debug_str	00000000 
0001aba1 l       .debug_str	00000000 
00036373 l       .debug_str	00000000 
000363c0 l       .debug_str	00000000 
00036405 l       .debug_str	00000000 
00036444 l       .debug_str	00000000 
00036490 l       .debug_str	00000000 
0003651f l       .debug_str	00000000 
0003656c l       .debug_str	00000000 
000365f2 l       .debug_str	00000000 
0005367d l       .debug_str	00000000 
00036617 l       .debug_str	00000000 
00036641 l       .debug_str	00000000 
0003664a l       .debug_str	00000000 
00036680 l       .debug_str	00000000 
00036689 l       .debug_str	00000000 
00036717 l       .debug_str	00000000 
0003675d l       .debug_str	00000000 
0003677c l       .debug_str	00000000 
00036793 l       .debug_str	00000000 
000367b7 l       .debug_str	00000000 
000367d3 l       .debug_str	00000000 
0003681a l       .debug_str	00000000 
0003685f l       .debug_str	00000000 
0003689e l       .debug_str	00000000 
000368e4 l       .debug_str	00000000 
00036973 l       .debug_str	00000000 
000369ba l       .debug_str	00000000 
00036a40 l       .debug_str	00000000 
00036a75 l       .debug_str	00000000 
00036a7f l       .debug_str	00000000 
00052696 l       .debug_str	00000000 
00036aea l       .debug_str	00000000 
00036b1f l       .debug_str	00000000 
00036b29 l       .debug_str	00000000 
00036b5c l       .debug_str	00000000 
00036b64 l       .debug_str	00000000 
00036b98 l       .debug_str	00000000 
00036baa l       .debug_str	00000000 
00036be4 l       .debug_str	00000000 
00036c02 l       .debug_str	00000000 
00036c28 l       .debug_str	00000000 
00036c33 l       .debug_str	00000000 
00036c5c l       .debug_str	00000000 
00036c6a l       .debug_str	00000000 
00036ca4 l       .debug_str	00000000 
00036cda l       .debug_str	00000000 
00036d00 l       .debug_str	00000000 
00036d23 l       .debug_str	00000000 
00036d4c l       .debug_str	00000000 
00036d72 l       .debug_str	00000000 
00036db0 l       .debug_str	00000000 
00036dca l       .debug_str	00000000 
00036e08 l       .debug_str	00000000 
00036e3a l       .debug_str	00000000 
00036e46 l       .debug_str	00000000 
00058e12 l       .debug_str	00000000 
00036e7a l       .debug_str	00000000 
00036e87 l       .debug_str	00000000 
000237ce l       .debug_str	00000000 
00036eb9 l       .debug_str	00000000 
00036f23 l       .debug_str	00000000 
00036f93 l       .debug_str	00000000 
00036ffa l       .debug_str	00000000 
00037017 l       .debug_str	00000000 
00037056 l       .debug_str	00000000 
00037072 l       .debug_str	00000000 
00023790 l       .debug_str	00000000 
000370a0 l       .debug_str	00000000 
0002386c l       .debug_str	00000000 
000370d5 l       .debug_str	00000000 
00037111 l       .debug_str	00000000 
00037137 l       .debug_str	00000000 
00037176 l       .debug_str	00000000 
00037186 l       .debug_str	00000000 
000371ea l       .debug_str	00000000 
00037221 l       .debug_str	00000000 
00037237 l       .debug_str	00000000 
00037286 l       .debug_str	00000000 
00037292 l       .debug_str	00000000 
00037364 l       .debug_str	00000000 
000372d9 l       .debug_str	00000000 
0003735f l       .debug_str	00000000 
00037383 l       .debug_str	00000000 
000373be l       .debug_str	00000000 
000373ce l       .debug_str	00000000 
00058d3a l       .debug_str	00000000 
0003740f l       .debug_str	00000000 
00037449 l       .debug_str	00000000 
00037458 l       .debug_str	00000000 
00037491 l       .debug_str	00000000 
0003749f l       .debug_str	00000000 
000374d8 l       .debug_str	00000000 
000374e6 l       .debug_str	00000000 
00037536 l       .debug_str	00000000 
00037543 l       .debug_str	00000000 
000375b9 l       .debug_str	00000000 
000375c4 l       .debug_str	00000000 
000375d6 l       .debug_str	00000000 
00037622 l       .debug_str	00000000 
0003763f l       .debug_str	00000000 
000376d3 l       .debug_str	00000000 
00037769 l       .debug_str	00000000 
000377db l       .debug_str	00000000 
00037801 l       .debug_str	00000000 
000378a0 l       .debug_str	00000000 
00037911 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00037956 l       .debug_str	00000000 
000379b9 l       .debug_str	00000000 
000379dc l       .debug_str	00000000 
00037a30 l       .debug_str	00000000 
00037a47 l       .debug_str	00000000 
00025327 l       .debug_str	00000000 
00037a94 l       .debug_str	00000000 
00037aa1 l       .debug_str	00000000 
00037adc l       .debug_str	00000000 
00037b04 l       .debug_str	00000000 
00037b66 l       .debug_str	00000000 
000335ee l       .debug_str	00000000 
00037bcf l       .debug_str	00000000 
0003a3fd l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0002ad0e l       .debug_str	00000000 
0002ad1f l       .debug_str	00000000 
00037c1c l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
00037c67 l       .debug_str	00000000 
00037cea l       .debug_str	00000000 
00037d1a l       .debug_str	00000000 
00037da2 l       .debug_str	00000000 
00037e17 l       .debug_str	00000000 
00037e6a l       .debug_str	00000000 
00037ef6 l       .debug_str	00000000 
00037f2e l       .debug_str	00000000 
00037f83 l       .debug_str	00000000 
00037fb4 l       .debug_str	00000000 
00038006 l       .debug_str	00000000 
00038034 l       .debug_str	00000000 
00038088 l       .debug_str	00000000 
000380ae l       .debug_str	00000000 
0001fcf0 l       .debug_str	00000000 
000380e5 l       .debug_str	00000000 
00038130 l       .debug_str	00000000 
0003814c l       .debug_str	00000000 
000381a2 l       .debug_str	00000000 
0001fe37 l       .debug_str	00000000 
0003821b l       .debug_str	00000000 
0003826b l       .debug_str	00000000 
00038302 l       .debug_str	00000000 
00038358 l       .debug_str	00000000 
000383d1 l       .debug_str	00000000 
000383e9 l       .debug_str	00000000 
00038480 l       .debug_str	00000000 
000384b9 l       .debug_str	00000000 
000386e9 l       .debug_str	00000000 
00038502 l       .debug_str	00000000 
000373ca l       .debug_str	00000000 
0003853f l       .debug_str	00000000 
00038583 l       .debug_str	00000000 
000385ce l       .debug_str	00000000 
0003860e l       .debug_str	00000000 
00038638 l       .debug_str	00000000 
00038681 l       .debug_str	00000000 
00038690 l       .debug_str	00000000 
000386e1 l       .debug_str	00000000 
000386f8 l       .debug_str	00000000 
00042998 l       .debug_str	00000000 
00053f37 l       .debug_str	00000000 
0003875f l       .debug_str	00000000 
000387c0 l       .debug_str	00000000 
000387df l       .debug_str	00000000 
000387e8 l       .debug_str	00000000 
000387f4 l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
000387fa l       .debug_str	00000000 
00038804 l       .debug_str	00000000 
00038836 l       .debug_str	00000000 
00038846 l       .debug_str	00000000 
000388ce l       .debug_str	00000000 
000388d7 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00038944 l       .debug_str	00000000 
00038983 l       .debug_str	00000000 
00016280 l       .debug_str	00000000 
0001628c l       .debug_str	00000000 
00016296 l       .debug_str	00000000 
00038992 l       .debug_str	00000000 
00038a02 l       .debug_str	00000000 
00038a27 l       .debug_str	00000000 
00038a96 l       .debug_str	00000000 
00038abc l       .debug_str	00000000 
00038b2b l       .debug_str	00000000 
00038b55 l       .debug_str	00000000 
00038b8c l       .debug_str	00000000 
00038b97 l       .debug_str	00000000 
00038bd3 l       .debug_str	00000000 
00038bf2 l       .debug_str	00000000 
00038c2c l       .debug_str	00000000 
00038c67 l       .debug_str	00000000 
00038ca3 l       .debug_str	00000000 
0000e7d8 l       .debug_str	00000000 
00038cbd l       .debug_str	00000000 
00038cf9 l       .debug_str	00000000 
00038d06 l       .debug_str	00000000 
000519f2 l       .debug_str	00000000 
00038d44 l       .debug_str	00000000 
00038d8a l       .debug_str	00000000 
00038e12 l       .debug_str	00000000 
00038e2b l       .debug_str	00000000 
00038e85 l       .debug_str	00000000 
00038ecb l       .debug_str	00000000 
00038ee3 l       .debug_str	00000000 
00038f63 l       .debug_str	00000000 
00039437 l       .debug_str	00000000 
00038f73 l       .debug_str	00000000 
00038fb2 l       .debug_str	00000000 
00038ff2 l       .debug_str	00000000 
0003907c l       .debug_str	00000000 
00039093 l       .debug_str	00000000 
000390e4 l       .debug_str	00000000 
000390f2 l       .debug_str	00000000 
000390f7 l       .debug_str	00000000 
00039152 l       .debug_str	00000000 
00039b0c l       .debug_str	00000000 
000391a9 l       .debug_str	00000000 
000391dc l       .debug_str	00000000 
00039223 l       .debug_str	00000000 
0003925d l       .debug_str	00000000 
0003928c l       .debug_str	00000000 
0003930a l       .debug_str	00000000 
0003938e l       .debug_str	00000000 
0003941b l       .debug_str	00000000 
00039430 l       .debug_str	00000000 
00039440 l       .debug_str	00000000 
0003948c l       .debug_str	00000000 
000394d1 l       .debug_str	00000000 
00039568 l       .debug_str	00000000 
00039584 l       .debug_str	00000000 
000395cb l       .debug_str	00000000 
000395f9 l       .debug_str	00000000 
00039632 l       .debug_str	00000000 
00039654 l       .debug_str	00000000 
00019dab l       .debug_str	00000000 
000396d2 l       .debug_str	00000000 
00039752 l       .debug_str	00000000 
00039791 l       .debug_str	00000000 
0003981b l       .debug_str	00000000 
00039867 l       .debug_str	00000000 
00039885 l       .debug_str	00000000 
00039890 l       .debug_str	00000000 
000398f2 l       .debug_str	00000000 
00039949 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00039a22 l       .debug_str	00000000 
00039ab9 l       .debug_str	00000000 
00039b03 l       .debug_str	00000000 
00039b1f l       .debug_str	00000000 
00039b79 l       .debug_str	00000000 
00039b82 l       .debug_str	00000000 
00039be1 l       .debug_str	00000000 
00039c38 l       .debug_str	00000000 
00039c91 l       .debug_str	00000000 
00039ca6 l       .debug_str	00000000 
00039cf3 l       .debug_str	00000000 
00039d3e l       .debug_str	00000000 
00039d51 l       .debug_str	00000000 
0001e89e l       .debug_str	00000000 
00019d5d l       .debug_str	00000000 
00039d9c l       .debug_str	00000000 
00039db1 l       .debug_str	00000000 
00039dbd l       .debug_str	00000000 
00039e02 l       .debug_str	00000000 
00039e5b l       .debug_str	00000000 
00039e70 l       .debug_str	00000000 
00039ebd l       .debug_str	00000000 
00039f08 l       .debug_str	00000000 
00039f1b l       .debug_str	00000000 
00039f66 l       .debug_str	00000000 
00039f79 l       .debug_str	00000000 
00039fdd l       .debug_str	00000000 
0003a016 l       .debug_str	00000000 
0003a042 l       .debug_str	00000000 
00057a67 l       .debug_str	00000000 
00052e2c l       .debug_str	00000000 
0003a0c1 l       .debug_str	00000000 
0003a0c7 l       .debug_str	00000000 
0003a0d0 l       .debug_str	00000000 
0003a108 l       .debug_str	00000000 
0003a125 l       .debug_str	00000000 
0003a161 l       .debug_str	00000000 
0003a17e l       .debug_str	00000000 
0003a1da l       .debug_str	00000000 
0003a212 l       .debug_str	00000000 
0003a26e l       .debug_str	00000000 
000259ae l       .debug_str	00000000 
0003a2a6 l       .debug_str	00000000 
0003a2e4 l       .debug_str	00000000 
0003a300 l       .debug_str	00000000 
0003a356 l       .debug_str	00000000 
0003a3bd l       .debug_str	00000000 
0003a3f5 l       .debug_str	00000000 
0003a401 l       .debug_str	00000000 
0003a468 l       .debug_str	00000000 
0003a4a7 l       .debug_str	00000000 
0003a4b8 l       .debug_str	00000000 
0003a4f1 l       .debug_str	00000000 
00048499 l       .debug_str	00000000 
0003a50c l       .debug_str	00000000 
0003a548 l       .debug_str	00000000 
0003a541 l       .debug_str	00000000 
0003a551 l       .debug_str	00000000 
0003a563 l       .debug_str	00000000 
0003a5ae l       .debug_str	00000000 
0003a5c6 l       .debug_str	00000000 
0003a5d0 l       .debug_str	00000000 
0003a5e7 l       .debug_str	00000000 
0003a5f6 l       .debug_str	00000000 
0003a638 l       .debug_str	00000000 
0003a651 l       .debug_str	00000000 
0003a6c5 l       .debug_str	00000000 
0003a6d4 l       .debug_str	00000000 
0003a70d l       .debug_str	00000000 
0003a723 l       .debug_str	00000000 
0003a763 l       .debug_str	00000000 
0003a76e l       .debug_str	00000000 
0003a7ed l       .debug_str	00000000 
000525a5 l       .debug_str	00000000 
0003a80c l       .debug_str	00000000 
0003a821 l       .debug_str	00000000 
0003a82b l       .debug_str	00000000 
0001a3d8 l       .debug_str	00000000 
0003a830 l       .debug_str	00000000 
0003a861 l       .debug_str	00000000 
0003a874 l       .debug_str	00000000 
0003a87e l       .debug_str	00000000 
0003a89b l       .debug_str	00000000 
0003a8d6 l       .debug_str	00000000 
0003a90b l       .debug_str	00000000 
0003a93c l       .debug_str	00000000 
0003a950 l       .debug_str	00000000 
0003a95b l       .debug_str	00000000 
0003a979 l       .debug_str	00000000 
0003a9b4 l       .debug_str	00000000 
0003a9ea l       .debug_str	00000000 
0003aa1b l       .debug_str	00000000 
0003aa2f l       .debug_str	00000000 
0003aa3a l       .debug_str	00000000 
0003aa58 l       .debug_str	00000000 
0003aa93 l       .debug_str	00000000 
0003aac9 l       .debug_str	00000000 
0003aafa l       .debug_str	00000000 
0003ab0e l       .debug_str	00000000 
0003ab19 l       .debug_str	00000000 
0003ab37 l       .debug_str	00000000 
0003ab72 l       .debug_str	00000000 
0003aba8 l       .debug_str	00000000 
0003abd9 l       .debug_str	00000000 
0003f426 l       .debug_str	00000000 
0003abee l       .debug_str	00000000 
0003abfa l       .debug_str	00000000 
0003ac19 l       .debug_str	00000000 
0003ac54 l       .debug_str	00000000 
0003ac8b l       .debug_str	00000000 
0003acbc l       .debug_str	00000000 
0003accf l       .debug_str	00000000 
0003acd9 l       .debug_str	00000000 
0003acf6 l       .debug_str	00000000 
0003ad31 l       .debug_str	00000000 
0003ad66 l       .debug_str	00000000 
0003ad97 l       .debug_str	00000000 
0003adab l       .debug_str	00000000 
0003adb6 l       .debug_str	00000000 
0003add4 l       .debug_str	00000000 
0003ae0f l       .debug_str	00000000 
0003ae45 l       .debug_str	00000000 
0003ae76 l       .debug_str	00000000 
0003ae8a l       .debug_str	00000000 
0003aef9 l       .debug_str	00000000 
0003af34 l       .debug_str	00000000 
0003af7d l       .debug_str	00000000 
0003afc2 l       .debug_str	00000000 
0003b01e l       .debug_str	00000000 
0003b067 l       .debug_str	00000000 
0003b0ac l       .debug_str	00000000 
0003b108 l       .debug_str	00000000 
0003b151 l       .debug_str	00000000 
0003b196 l       .debug_str	00000000 
0003b1f2 l       .debug_str	00000000 
0003b1fd l       .debug_str	00000000 
0003b21b l       .debug_str	00000000 
0003b256 l       .debug_str	00000000 
0003b28c l       .debug_str	00000000 
0003b2bd l       .debug_str	00000000 
0003b2d1 l       .debug_str	00000000 
0003b2dc l       .debug_str	00000000 
0003b2fa l       .debug_str	00000000 
0003b335 l       .debug_str	00000000 
0003b36b l       .debug_str	00000000 
0003b3da l       .debug_str	00000000 
0003b415 l       .debug_str	00000000 
0003b446 l       .debug_str	00000000 
0003b45b l       .debug_str	00000000 
0003b460 l       .debug_str	00000000 
0003b46c l       .debug_str	00000000 
0003b48b l       .debug_str	00000000 
0003b4c6 l       .debug_str	00000000 
0003b4fd l       .debug_str	00000000 
0003b56c l       .debug_str	00000000 
0003b5a8 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0003b5f1 l       .debug_str	00000000 
0003b5fc l       .debug_str	00000000 
0003b643 l       .debug_str	00000000 
0003b64d l       .debug_str	00000000 
0003b6cf l       .debug_str	00000000 
0003b6ec l       .debug_str	00000000 
00017245 l       .debug_str	00000000 
0003b747 l       .debug_str	00000000 
0003b7a1 l       .debug_str	00000000 
0003b7ae l       .debug_str	00000000 
0003b820 l       .debug_str	00000000 
0003b884 l       .debug_str	00000000 
0003b88f l       .debug_str	00000000 
0003b908 l       .debug_str	00000000 
0003b914 l       .debug_str	00000000 
0003b990 l       .debug_str	00000000 
0003b996 l       .debug_str	00000000 
0003b99d l       .debug_str	00000000 
0003b9d9 l       .debug_str	00000000 
00014736 l       .debug_str	00000000 
0003ba22 l       .debug_str	00000000 
0003ba66 l       .debug_str	00000000 
0003bab1 l       .debug_str	00000000 
0003baf0 l       .debug_str	00000000 
0003bb15 l       .debug_str	00000000 
0003bb6b l       .debug_str	00000000 
0003bbd9 l       .debug_str	00000000 
0003bc59 l       .debug_str	00000000 
0003bcc6 l       .debug_str	00000000 
0003bd51 l       .debug_str	00000000 
0003bdc5 l       .debug_str	00000000 
0003be05 l       .debug_str	00000000 
0003be86 l       .debug_str	00000000 
0003bec7 l       .debug_str	00000000 
0003bf2b l       .debug_str	00000000 
0003bfda l       .debug_str	00000000 
0003c024 l       .debug_str	00000000 
0003c071 l       .debug_str	00000000 
0003c0b7 l       .debug_str	00000000 
0003c0c1 l       .debug_str	00000000 
0003c0fa l       .debug_str	00000000 
0003c129 l       .debug_str	00000000 
0003c18a l       .debug_str	00000000 
0003c1b9 l       .debug_str	00000000 
0003c1f6 l       .debug_str	00000000 
0003c285 l       .debug_str	00000000 
0003c2ba l       .debug_str	00000000 
0003c340 l       .debug_str	00000000 
0003c3c6 l       .debug_str	00000000 
0003c41a l       .debug_str	00000000 
0003c4a3 l       .debug_str	00000000 
00019c74 l       .debug_str	00000000 
0003c4f1 l       .debug_str	00000000 
0003c57f l       .debug_str	00000000 
0003c5d3 l       .debug_str	00000000 
0003c612 l       .debug_str	00000000 
0003c65d l       .debug_str	00000000 
0003c6df l       .debug_str	00000000 
0003c6fb l       .debug_str	00000000 
0003c754 l       .debug_str	00000000 
0003c7ad l       .debug_str	00000000 
0003c7ea l       .debug_str	00000000 
0003c82b l       .debug_str	00000000 
0003c88c l       .debug_str	00000000 
0003c8fd l       .debug_str	00000000 
0003c92d l       .debug_str	00000000 
0003c973 l       .debug_str	00000000 
0003c9e5 l       .debug_str	00000000 
0003ca79 l       .debug_str	00000000 
0003ca9d l       .debug_str	00000000 
0003cb19 l       .debug_str	00000000 
0003cb53 l       .debug_str	00000000 
0003cb95 l       .debug_str	00000000 
0003cc45 l       .debug_str	00000000 
0003cc84 l       .debug_str	00000000 
0003cd27 l       .debug_str	00000000 
0003cd83 l       .debug_str	00000000 
0003cde0 l       .debug_str	00000000 
0003ce8b l       .debug_str	00000000 
0003cec4 l       .debug_str	00000000 
0003cf40 l       .debug_str	00000000 
0003cf78 l       .debug_str	00000000 
0003cf84 l       .debug_str	00000000 
0003cfc1 l       .debug_str	00000000 
0003d019 l       .debug_str	00000000 
0003d039 l       .debug_str	00000000 
0003d092 l       .debug_str	00000000 
0003d0eb l       .debug_str	00000000 
0003d144 l       .debug_str	00000000 
0003d19e l       .debug_str	00000000 
0003d1d4 l       .debug_str	00000000 
0003d1e4 l       .debug_str	00000000 
0003d1f3 l       .debug_str	00000000 
0003d1fc l       .debug_str	00000000 
0003d233 l       .debug_str	00000000 
0003d26f l       .debug_str	00000000 
0003d27f l       .debug_str	00000000 
0003d2db l       .debug_str	00000000 
0003d33d l       .debug_str	00000000 
0003054c l       .debug_str	00000000 
0003d387 l       .debug_str	00000000 
0003d3c2 l       .debug_str	00000000 
0003d3e7 l       .debug_str	00000000 
0003d446 l       .debug_str	00000000 
0003d490 l       .debug_str	00000000 
0003d4cb l       .debug_str	00000000 
0003d4f0 l       .debug_str	00000000 
0003d54f l       .debug_str	00000000 
0003d5b8 l       .debug_str	00000000 
0003d5c1 l       .debug_str	00000000 
0003d5f8 l       .debug_str	00000000 
0003d654 l       .debug_str	00000000 
0003d6b6 l       .debug_str	00000000 
0003d715 l       .debug_str	00000000 
0003d774 l       .debug_str	00000000 
0003d7aa l       .debug_str	00000000 
0003d7bb l       .debug_str	00000000 
0003d7cb l       .debug_str	00000000 
0003d7d5 l       .debug_str	00000000 
0003d80d l       .debug_str	00000000 
0003d86a l       .debug_str	00000000 
0003d8cd l       .debug_str	00000000 
0003d918 l       .debug_str	00000000 
0003d953 l       .debug_str	00000000 
0003d979 l       .debug_str	00000000 
0003d9d9 l       .debug_str	00000000 
0003da24 l       .debug_str	00000000 
0003da5f l       .debug_str	00000000 
0003da85 l       .debug_str	00000000 
0003dae5 l       .debug_str	00000000 
0003db1b l       .debug_str	00000000 
0003db2c l       .debug_str	00000000 
0003db3c l       .debug_str	00000000 
0003db46 l       .debug_str	00000000 
0003db7e l       .debug_str	00000000 
0003dbdb l       .debug_str	00000000 
0003dc3e l       .debug_str	00000000 
0003dc9e l       .debug_str	00000000 
0003dcfe l       .debug_str	00000000 
0003dd34 l       .debug_str	00000000 
0003dd45 l       .debug_str	00000000 
0003dd55 l       .debug_str	00000000 
0003dd5f l       .debug_str	00000000 
0003dd97 l       .debug_str	00000000 
0003ddf4 l       .debug_str	00000000 
0003de57 l       .debug_str	00000000 
0003dea2 l       .debug_str	00000000 
0003dedd l       .debug_str	00000000 
0003df03 l       .debug_str	00000000 
0003df63 l       .debug_str	00000000 
0003dfae l       .debug_str	00000000 
0003dfe9 l       .debug_str	00000000 
0003e00f l       .debug_str	00000000 
0003e06f l       .debug_str	00000000 
0003e0a5 l       .debug_str	00000000 
0003e0b6 l       .debug_str	00000000 
0003e0c6 l       .debug_str	00000000 
0003e0d0 l       .debug_str	00000000 
0003e108 l       .debug_str	00000000 
0003e165 l       .debug_str	00000000 
0003e1c8 l       .debug_str	00000000 
0003e228 l       .debug_str	00000000 
0003e288 l       .debug_str	00000000 
0003e2be l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0003e2d1 l       .debug_str	00000000 
0003e2e3 l       .debug_str	00000000 
0003e2ef l       .debug_str	00000000 
0003e32a l       .debug_str	00000000 
0003e389 l       .debug_str	00000000 
0003e3ee l       .debug_str	00000000 
0003e450 l       .debug_str	00000000 
0003e48b l       .debug_str	00000000 
0003e4b3 l       .debug_str	00000000 
0003e515 l       .debug_str	00000000 
0001d057 l       .debug_str	00000000 
0001fa73 l       .debug_str	00000000 
00013207 l       .debug_str	00000000 
0003e54b l       .debug_str	00000000 
0003e586 l       .debug_str	00000000 
0003e5c6 l       .debug_str	00000000 
0003e5e3 l       .debug_str	00000000 
0003e627 l       .debug_str	00000000 
0003e648 l       .debug_str	00000000 
0003e688 l       .debug_str	00000000 
0003e6a5 l       .debug_str	00000000 
0003e6e9 l       .debug_str	00000000 
0003e70a l       .debug_str	00000000 
0003e76c l       .debug_str	00000000 
0003e7d3 l       .debug_str	00000000 
0003e80e l       .debug_str	00000000 
0003e831 l       .debug_str	00000000 
0003e897 l       .debug_str	00000000 
0003e8d2 l       .debug_str	00000000 
0003e8f4 l       .debug_str	00000000 
0003e92f l       .debug_str	00000000 
0003e953 l       .debug_str	00000000 
0003e98e l       .debug_str	00000000 
0003e9b1 l       .debug_str	00000000 
0003e9ec l       .debug_str	00000000 
0003ea10 l       .debug_str	00000000 
0003ea4b l       .debug_str	00000000 
0003ea6e l       .debug_str	00000000 
0003eaa9 l       .debug_str	00000000 
0003eacd l       .debug_str	00000000 
0003eb18 l       .debug_str	00000000 
0003eb7a l       .debug_str	00000000 
0003ebb5 l       .debug_str	00000000 
0003ebd8 l       .debug_str	00000000 
0003ec23 l       .debug_str	00000000 
0003ec5e l       .debug_str	00000000 
0003ec84 l       .debug_str	00000000 
0003ecbf l       .debug_str	00000000 
0003ece5 l       .debug_str	00000000 
0003ed36 l       .debug_str	00000000 
0003ed84 l       .debug_str	00000000 
0003edcf l       .debug_str	00000000 
0003ee02 l       .debug_str	00000000 
0003ee3d l       .debug_str	00000000 
0003ee62 l       .debug_str	00000000 
0003eeee l       .debug_str	00000000 
0003ef22 l       .debug_str	00000000 
0003ef9e l       .debug_str	00000000 
0003efe3 l       .debug_str	00000000 
0003f02f l       .debug_str	00000000 
0003f092 l       .debug_str	00000000 
0003f0cd l       .debug_str	00000000 
0003f0f1 l       .debug_str	00000000 
0003f12c l       .debug_str	00000000 
0003f153 l       .debug_str	00000000 
0003f19f l       .debug_str	00000000 
0003f1da l       .debug_str	00000000 
0003f201 l       .debug_str	00000000 
0003f24c l       .debug_str	00000000 
0003f298 l       .debug_str	00000000 
0003f2e4 l       .debug_str	00000000 
0003f315 l       .debug_str	00000000 
0003f31d l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
0003f369 l       .debug_str	00000000 
0003f39e l       .debug_str	00000000 
0003f3cc l       .debug_str	00000000 
0003f3d5 l       .debug_str	00000000 
0003f423 l       .debug_str	00000000 
0003f42b l       .debug_str	00000000 
0003f490 l       .debug_str	00000000 
0003f4e3 l       .debug_str	00000000 
0003f543 l       .debug_str	00000000 
0003f562 l       .debug_str	00000000 
0003f5c5 l       .debug_str	00000000 
0003f5e7 l       .debug_str	00000000 
0003f632 l       .debug_str	00000000 
0003f697 l       .debug_str	00000000 
0003f6b9 l       .debug_str	00000000 
0003f722 l       .debug_str	00000000 
0003f75f l       .debug_str	00000000 
0003f7c8 l       .debug_str	00000000 
0003f858 l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0003f8b8 l       .debug_str	00000000 
0003f91b l       .debug_str	00000000 
0003f984 l       .debug_str	00000000 
0003f9b7 l       .debug_str	00000000 
0003f9ff l       .debug_str	00000000 
0003fa79 l       .debug_str	00000000 
0003faca l       .debug_str	00000000 
0003fb21 l       .debug_str	00000000 
0001b1f9 l       .debug_str	00000000 
0003fb69 l       .debug_str	00000000 
0003fbc7 l       .debug_str	00000000 
0003fbe4 l       .debug_str	00000000 
0003fc50 l       .debug_str	00000000 
0003fc95 l       .debug_str	00000000 
0003fce3 l       .debug_str	00000000 
0003fd2b l       .debug_str	00000000 
0003fd35 l       .debug_str	00000000 
0003fda3 l       .debug_str	00000000 
0003fddf l       .debug_str	00000000 
0003fe02 l       .debug_str	00000000 
0003fe72 l       .debug_str	00000000 
0003feba l       .debug_str	00000000 
0003fec3 l       .debug_str	00000000 
0003ff20 l       .debug_str	00000000 
0003ff83 l       .debug_str	00000000 
0003ffe3 l       .debug_str	00000000 
00040043 l       .debug_str	00000000 
0004009f l       .debug_str	00000000 
000400fe l       .debug_str	00000000 
0004015e l       .debug_str	00000000 
00040179 l       .debug_str	00000000 
0001b157 l       .debug_str	00000000 
000401cd l       .debug_str	00000000 
0004024b l       .debug_str	00000000 
00040275 l       .debug_str	00000000 
000402d7 l       .debug_str	00000000 
00040338 l       .debug_str	00000000 
00040392 l       .debug_str	00000000 
000403f7 l       .debug_str	00000000 
00040449 l       .debug_str	00000000 
00040491 l       .debug_str	00000000 
000404ac l       .debug_str	00000000 
00040526 l       .debug_str	00000000 
00040573 l       .debug_str	00000000 
000405ed l       .debug_str	00000000 
0004063a l       .debug_str	00000000 
0004068e l       .debug_str	00000000 
000406e0 l       .debug_str	00000000 
00040748 l       .debug_str	00000000 
000407a8 l       .debug_str	00000000 
00040802 l       .debug_str	00000000 
00040861 l       .debug_str	00000000 
000408bb l       .debug_str	00000000 
00040918 l       .debug_str	00000000 
0002312a l       .debug_str	00000000 
00040956 l       .debug_str	00000000 
0002410d l       .debug_str	00000000 
00040991 l       .debug_str	00000000 
00040a03 l       .debug_str	00000000 
00040ad6 l       .debug_str	00000000 
0001b317 l       .debug_str	00000000 
00040b1e l       .debug_str	00000000 
00040b6c l       .debug_str	00000000 
00040b76 l       .debug_str	00000000 
00040bbe l       .debug_str	00000000 
00040bca l       .debug_str	00000000 
00040c3e l       .debug_str	00000000 
00040c49 l       .debug_str	00000000 
00040c85 l       .debug_str	00000000 
00040cac l       .debug_str	00000000 
00040cfd l       .debug_str	00000000 
00040d0a l       .debug_str	00000000 
00040d18 l       .debug_str	00000000 
00040d2b l       .debug_str	00000000 
00040d36 l       .debug_str	00000000 
00040d78 l       .debug_str	00000000 
00040d8d l       .debug_str	00000000 
00040df7 l       .debug_str	00000000 
00040e54 l       .debug_str	00000000 
00040eb4 l       .debug_str	00000000 
00040f14 l       .debug_str	00000000 
00040f86 l       .debug_str	00000000 
00040fd3 l       .debug_str	00000000 
00041032 l       .debug_str	00000000 
0004108c l       .debug_str	00000000 
000410ff l       .debug_str	00000000 
0004110c l       .debug_str	00000000 
0004116c l       .debug_str	00000000 
0004118b l       .debug_str	00000000 
000411f3 l       .debug_str	00000000 
0004120e l       .debug_str	00000000 
00041266 l       .debug_str	00000000 
000412b0 l       .debug_str	00000000 
00041314 l       .debug_str	00000000 
00041333 l       .debug_str	00000000 
00041395 l       .debug_str	00000000 
000413fb l       .debug_str	00000000 
0004147b l       .debug_str	00000000 
000414ca l       .debug_str	00000000 
00041540 l       .debug_str	00000000 
000415b6 l       .debug_str	00000000 
0004168b l       .debug_str	00000000 
000416e8 l       .debug_str	00000000 
00041746 l       .debug_str	00000000 
000417c6 l       .debug_str	00000000 
00041835 l       .debug_str	00000000 
000418b3 l       .debug_str	00000000 
00041906 l       .debug_str	00000000 
0004196b l       .debug_str	00000000 
000419cb l       .debug_str	00000000 
00041a39 l       .debug_str	00000000 
00041ad1 l       .debug_str	00000000 
00041b60 l       .debug_str	00000000 
00041bee l       .debug_str	00000000 
00041c7c l       .debug_str	00000000 
00041d8c l       .debug_str	00000000 
00041e00 l       .debug_str	00000000 
00041e42 l       .debug_str	00000000 
00041e8b l       .debug_str	00000000 
00041ee5 l       .debug_str	00000000 
00041f5e l       .debug_str	00000000 
00041f6b l       .debug_str	00000000 
00041f70 l       .debug_str	00000000 
00041fdc l       .debug_str	00000000 
00042023 l       .debug_str	00000000 
000420ad l       .debug_str	00000000 
000420cc l       .debug_str	00000000 
00042156 l       .debug_str	00000000 
0004217a l       .debug_str	00000000 
000421be l       .debug_str	00000000 
00042222 l       .debug_str	00000000 
00042266 l       .debug_str	00000000 
000422d8 l       .debug_str	00000000 
00042396 l       .debug_str	00000000 
000423f8 l       .debug_str	00000000 
00042490 l       .debug_str	00000000 
0004253f l       .debug_str	00000000 
000425d5 l       .debug_str	00000000 
00042668 l       .debug_str	00000000 
000426ac l       .debug_str	00000000 
000426ff l       .debug_str	00000000 
00042783 l       .debug_str	00000000 
00042811 l       .debug_str	00000000 
00042865 l       .debug_str	00000000 
00042876 l       .debug_str	00000000 
000428fb l       .debug_str	00000000 
00042987 l       .debug_str	00000000 
00042990 l       .debug_str	00000000 
0004299d l       .debug_str	00000000 
000429f4 l       .debug_str	00000000 
00042a79 l       .debug_str	00000000 
00042acb l       .debug_str	00000000 
00042ada l       .debug_str	00000000 
00042b21 l       .debug_str	00000000 
00042b85 l       .debug_str	00000000 
00042ba6 l       .debug_str	00000000 
00042c26 l       .debug_str	00000000 
00042c91 l       .debug_str	00000000 
00042d0f l       .debug_str	00000000 
00042d5e l       .debug_str	00000000 
00042dbd l       .debug_str	00000000 
00042e55 l       .debug_str	00000000 
00042efb l       .debug_str	00000000 
00042f91 l       .debug_str	00000000 
0004301b l       .debug_str	00000000 
00043091 l       .debug_str	00000000 
000430da l       .debug_str	00000000 
00043136 l       .debug_str	00000000 
000431b1 l       .debug_str	00000000 
0004321d l       .debug_str	00000000 
000432a7 l       .debug_str	00000000 
000432eb l       .debug_str	00000000 
0004334c l       .debug_str	00000000 
00043390 l       .debug_str	00000000 
00043414 l       .debug_str	00000000 
0004349e l       .debug_str	00000000 
000434f0 l       .debug_str	00000000 
0004356e l       .debug_str	00000000 
000435f3 l       .debug_str	00000000 
0004364a l       .debug_str	00000000 
000436cb l       .debug_str	00000000 
00043789 l       .debug_str	00000000 
000437e8 l       .debug_str	00000000 
0004384b l       .debug_str	00000000 
00043870 l       .debug_str	00000000 
000438d4 l       .debug_str	00000000 
000438f5 l       .debug_str	00000000 
00043975 l       .debug_str	00000000 
000439e0 l       .debug_str	00000000 
00043a5e l       .debug_str	00000000 
00043aad l       .debug_str	00000000 
00043b0c l       .debug_str	00000000 
00043ba4 l       .debug_str	00000000 
00043c4a l       .debug_str	00000000 
00043ce0 l       .debug_str	00000000 
00043d6a l       .debug_str	00000000 
00043de0 l       .debug_str	00000000 
00043e29 l       .debug_str	00000000 
00043e85 l       .debug_str	00000000 
00043f00 l       .debug_str	00000000 
00043f6c l       .debug_str	00000000 
00043ff6 l       .debug_str	00000000 
0004403a l       .debug_str	00000000 
0004409b l       .debug_str	00000000 
000440df l       .debug_str	00000000 
00044163 l       .debug_str	00000000 
000441ed l       .debug_str	00000000 
0004426b l       .debug_str	00000000 
000442f0 l       .debug_str	00000000 
00044347 l       .debug_str	00000000 
000443c8 l       .debug_str	00000000 
00044486 l       .debug_str	00000000 
000444e5 l       .debug_str	00000000 
00044518 l       .debug_str	00000000 
0004454b l       .debug_str	00000000 
0004457e l       .debug_str	00000000 
000445b1 l       .debug_str	00000000 
000445e4 l       .debug_str	00000000 
00044617 l       .debug_str	00000000 
0004464a l       .debug_str	00000000 
0004469e l       .debug_str	00000000 
000446cc l       .debug_str	00000000 
00044720 l       .debug_str	00000000 
000570fd l       .debug_str	00000000 
00011499 l       .debug_str	00000000 
00044733 l       .debug_str	00000000 
00044737 l       .debug_str	00000000 
0004473b l       .debug_str	00000000 
0004473f l       .debug_str	00000000 
00044746 l       .debug_str	00000000 
0004474b l       .debug_str	00000000 
0004477b l       .debug_str	00000000 
000447cd l       .debug_str	00000000 
0004480e l       .debug_str	00000000 
0004481b l       .debug_str	00000000 
0004485a l       .debug_str	00000000 
00044865 l       .debug_str	00000000 
000448a1 l       .debug_str	00000000 
000448af l       .debug_str	00000000 
000448e3 l       .debug_str	00000000 
0004491e l       .debug_str	00000000 
0004495c l       .debug_str	00000000 
0004496a l       .debug_str	00000000 
000449a3 l       .debug_str	00000000 
000449ad l       .debug_str	00000000 
000449e9 l       .debug_str	00000000 
00044a45 l       .debug_str	00000000 
00044a4c l       .debug_str	00000000 
00044aaa l       .debug_str	00000000 
00044ab3 l       .debug_str	00000000 
00044b1a l       .debug_str	00000000 
00044b2b l       .debug_str	00000000 
00044b88 l       .debug_str	00000000 
00044be7 l       .debug_str	00000000 
00044c43 l       .debug_str	00000000 
00044ca1 l       .debug_str	00000000 
00044d08 l       .debug_str	00000000 
00044d65 l       .debug_str	00000000 
00044dc4 l       .debug_str	00000000 
00044dfd l       .debug_str	00000000 
00044e07 l       .debug_str	00000000 
00044e6f l       .debug_str	00000000 
00044ea2 l       .debug_str	00000000 
00044eac l       .debug_str	00000000 
00044ee2 l       .debug_str	00000000 
00044eee l       .debug_str	00000000 
00044f25 l       .debug_str	00000000 
00044f32 l       .debug_str	00000000 
00044f76 l       .debug_str	00000000 
00044f90 l       .debug_str	00000000 
00045001 l       .debug_str	00000000 
00045014 l       .debug_str	00000000 
00045085 l       .debug_str	00000000 
000450c8 l       .debug_str	00000000 
000450d2 l       .debug_str	00000000 
0004511c l       .debug_str	00000000 
00045163 l       .debug_str	00000000 
000451b0 l       .debug_str	00000000 
000451fa l       .debug_str	00000000 
0004522c l       .debug_str	00000000 
00045235 l       .debug_str	00000000 
00045269 l       .debug_str	00000000 
000452a2 l       .debug_str	00000000 
000452de l       .debug_str	00000000 
000452f0 l       .debug_str	00000000 
00045331 l       .debug_str	00000000 
00045390 l       .debug_str	00000000 
000453c1 l       .debug_str	00000000 
000453d7 l       .debug_str	00000000 
0004540c l       .debug_str	00000000 
00045469 l       .debug_str	00000000 
000454cd l       .debug_str	00000000 
0004552c l       .debug_str	00000000 
0004558c l       .debug_str	00000000 
000455ea l       .debug_str	00000000 
0001ffe3 l       .debug_str	00000000 
0004564f l       .debug_str	00000000 
00045695 l       .debug_str	00000000 
000456d5 l       .debug_str	00000000 
0004575d l       .debug_str	00000000 
00053b33 l       .debug_str	00000000 
000457e4 l       .debug_str	00000000 
00045817 l       .debug_str	00000000 
0004588b l       .debug_str	00000000 
00045904 l       .debug_str	00000000 
00045978 l       .debug_str	00000000 
000459d7 l       .debug_str	00000000 
00045a34 l       .debug_str	00000000 
00045a8e l       .debug_str	00000000 
00045aea l       .debug_str	00000000 
00045b47 l       .debug_str	00000000 
00045ba6 l       .debug_str	00000000 
00045c0e l       .debug_str	00000000 
00045c78 l       .debug_str	00000000 
00045ce1 l       .debug_str	00000000 
00045d3f l       .debug_str	00000000 
00045db1 l       .debug_str	00000000 
00045db5 l       .debug_str	00000000 
00045e28 l       .debug_str	00000000 
00045e86 l       .debug_str	00000000 
00045ee2 l       .debug_str	00000000 
00045f53 l       .debug_str	00000000 
00045fc9 l       .debug_str	00000000 
00046000 l       .debug_str	00000000 
0004605c l       .debug_str	00000000 
000460b0 l       .debug_str	00000000 
0004610e l       .debug_str	00000000 
0004617a l       .debug_str	00000000 
000461cf l       .debug_str	00000000 
00046202 l       .debug_str	00000000 
00046210 l       .debug_str	00000000 
00046248 l       .debug_str	00000000 
0004625b l       .debug_str	00000000 
00046290 l       .debug_str	00000000 
000462c6 l       .debug_str	00000000 
00046321 l       .debug_str	00000000 
00046354 l       .debug_str	00000000 
0004635b l       .debug_str	00000000 
0004639d l       .debug_str	00000000 
000463ce l       .debug_str	00000000 
000463ff l       .debug_str	00000000 
00046432 l       .debug_str	00000000 
00046439 l       .debug_str	00000000 
00046466 l       .debug_str	00000000 
000464a1 l       .debug_str	00000000 
000464b4 l       .debug_str	00000000 
000464e5 l       .debug_str	00000000 
000464ef l       .debug_str	00000000 
00046550 l       .debug_str	00000000 
000465b8 l       .debug_str	00000000 
000465f5 l       .debug_str	00000000 
00046643 l       .debug_str	00000000 
0004667f l       .debug_str	00000000 
000466bb l       .debug_str	00000000 
000466f4 l       .debug_str	00000000 
0004672e l       .debug_str	00000000 
00046767 l       .debug_str	00000000 
0004679e l       .debug_str	00000000 
000467d7 l       .debug_str	00000000 
00046811 l       .debug_str	00000000 
00046857 l       .debug_str	00000000 
0004687a l       .debug_str	00000000 
000468c0 l       .debug_str	00000000 
000468e3 l       .debug_str	00000000 
0004692c l       .debug_str	00000000 
00046952 l       .debug_str	00000000 
0004699b l       .debug_str	00000000 
000469c1 l       .debug_str	00000000 
00046a0b l       .debug_str	00000000 
00046a32 l       .debug_str	00000000 
00046a7c l       .debug_str	00000000 
00046aa3 l       .debug_str	00000000 
00046af0 l       .debug_str	00000000 
00046b1a l       .debug_str	00000000 
00046b67 l       .debug_str	00000000 
00046b91 l       .debug_str	00000000 
00046bc4 l       .debug_str	00000000 
00046bf0 l       .debug_str	00000000 
00046c46 l       .debug_str	00000000 
00046c71 l       .debug_str	00000000 
00046cc9 l       .debug_str	00000000 
00046d1f l       .debug_str	00000000 
00046d58 l       .debug_str	00000000 
00046d63 l       .debug_str	00000000 
0001ead8 l       .debug_str	00000000 
00046d9c l       .debug_str	00000000 
00046dc3 l       .debug_str	00000000 
00046dfc l       .debug_str	00000000 
00046e43 l       .debug_str	00000000 
00046e50 l       .debug_str	00000000 
0004706a l       .debug_str	00000000 
00046e7f l       .debug_str	00000000 
00046ebf l       .debug_str	00000000 
00046ed3 l       .debug_str	00000000 
00046f15 l       .debug_str	00000000 
00046f46 l       .debug_str	00000000 
00046f76 l       .debug_str	00000000 
00046fa7 l       .debug_str	00000000 
00046fd8 l       .debug_str	00000000 
0004700f l       .debug_str	00000000 
0004701a l       .debug_str	00000000 
0004705a l       .debug_str	00000000 
0004706e l       .debug_str	00000000 
000470aa l       .debug_str	00000000 
000470ba l       .debug_str	00000000 
000470ef l       .debug_str	00000000 
000470f9 l       .debug_str	00000000 
0004712e l       .debug_str	00000000 
00047138 l       .debug_str	00000000 
0004718d l       .debug_str	00000000 
000471d5 l       .debug_str	00000000 
0004721b l       .debug_str	00000000 
00047262 l       .debug_str	00000000 
000472ab l       .debug_str	00000000 
000472fd l       .debug_str	00000000 
0004734f l       .debug_str	00000000 
000473ed l       .debug_str	00000000 
0004741f l       .debug_str	00000000 
00047458 l       .debug_str	00000000 
0004746d l       .debug_str	00000000 
000474a8 l       .debug_str	00000000 
000474bf l       .debug_str	00000000 
000474fd l       .debug_str	00000000 
00047517 l       .debug_str	00000000 
00047579 l       .debug_str	00000000 
0004759e l       .debug_str	00000000 
000475f9 l       .debug_str	00000000 
00047608 l       .debug_str	00000000 
0004767d l       .debug_str	00000000 
0004769a l       .debug_str	00000000 
000476d4 l       .debug_str	00000000 
00047711 l       .debug_str	00000000 
0004771c l       .debug_str	00000000 
00047754 l       .debug_str	00000000 
0004775b l       .debug_str	00000000 
000477da l       .debug_str	00000000 
0004783a l       .debug_str	00000000 
00047898 l       .debug_str	00000000 
000478f6 l       .debug_str	00000000 
0004792e l       .debug_str	00000000 
00047963 l       .debug_str	00000000 
0004798e l       .debug_str	00000000 
00047998 l       .debug_str	00000000 
000479c8 l       .debug_str	00000000 
000479d6 l       .debug_str	00000000 
00047a2f l       .debug_str	00000000 
00047a82 l       .debug_str	00000000 
00047afe l       .debug_str	00000000 
00047b62 l       .debug_str	00000000 
00047bc6 l       .debug_str	00000000 
00047bfc l       .debug_str	00000000 
00047c10 l       .debug_str	00000000 
00047c51 l       .debug_str	00000000 
00047c69 l       .debug_str	00000000 
00047d1d l       .debug_str	00000000 
00047d50 l       .debug_str	00000000 
00047d61 l       .debug_str	00000000 
00047da7 l       .debug_str	00000000 
00047db4 l       .debug_str	00000000 
00047df1 l       .debug_str	00000000 
00047e35 l       .debug_str	00000000 
00047e76 l       .debug_str	00000000 
00047eb8 l       .debug_str	00000000 
00047ec2 l       .debug_str	00000000 
00047f06 l       .debug_str	00000000 
00047f11 l       .debug_str	00000000 
00047f5f l       .debug_str	00000000 
00047fad l       .debug_str	00000000 
00047ff3 l       .debug_str	00000000 
0004803b l       .debug_str	00000000 
00048083 l       .debug_str	00000000 
00013bba l       .debug_str	00000000 
000480ea l       .debug_str	00000000 
00048143 l       .debug_str	00000000 
000481ad l       .debug_str	00000000 
0001734c l       .debug_str	00000000 
00048217 l       .debug_str	00000000 
00048292 l       .debug_str	00000000 
00048307 l       .debug_str	00000000 
00048312 l       .debug_str	00000000 
00048387 l       .debug_str	00000000 
00048392 l       .debug_str	00000000 
000483e9 l       .debug_str	00000000 
0004844d l       .debug_str	00000000 
00048459 l       .debug_str	00000000 
00048496 l       .debug_str	00000000 
000484a3 l       .debug_str	00000000 
000484d7 l       .debug_str	00000000 
00048512 l       .debug_str	00000000 
0004856e l       .debug_str	00000000 
000485c9 l       .debug_str	00000000 
00048623 l       .debug_str	00000000 
0002f05d l       .debug_str	00000000 
00048669 l       .debug_str	00000000 
000486cf l       .debug_str	00000000 
00048706 l       .debug_str	00000000 
0004870e l       .debug_str	00000000 
00048746 l       .debug_str	00000000 
0004874f l       .debug_str	00000000 
00048787 l       .debug_str	00000000 
00048790 l       .debug_str	00000000 
000487c7 l       .debug_str	00000000 
000487cf l       .debug_str	00000000 
00048807 l       .debug_str	00000000 
00048810 l       .debug_str	00000000 
00048848 l       .debug_str	00000000 
00048851 l       .debug_str	00000000 
00048888 l       .debug_str	00000000 
00048890 l       .debug_str	00000000 
0004890a l       .debug_str	00000000 
00048984 l       .debug_str	00000000 
000489fe l       .debug_str	00000000 
00048a7a l       .debug_str	00000000 
0001aa97 l       .debug_str	00000000 
00048ad8 l       .debug_str	00000000 
00048b37 l       .debug_str	00000000 
00048b96 l       .debug_str	00000000 
00048bf5 l       .debug_str	00000000 
00048c55 l       .debug_str	00000000 
00048cb3 l       .debug_str	00000000 
00048d12 l       .debug_str	00000000 
00048d71 l       .debug_str	00000000 
00048dd0 l       .debug_str	00000000 
00048e30 l       .debug_str	00000000 
00048e85 l       .debug_str	00000000 
00048eda l       .debug_str	00000000 
00048f34 l       .debug_str	00000000 
00048f8e l       .debug_str	00000000 
00048fc8 l       .debug_str	00000000 
00048fd1 l       .debug_str	00000000 
0004900b l       .debug_str	00000000 
00049014 l       .debug_str	00000000 
00049051 l       .debug_str	00000000 
00030548 l       .debug_str	00000000 
0004908a l       .debug_str	00000000 
000490eb l       .debug_str	00000000 
00049149 l       .debug_str	00000000 
0004918a l       .debug_str	00000000 
000491c8 l       .debug_str	00000000 
00049201 l       .debug_str	00000000 
00049240 l       .debug_str	00000000 
0004927e l       .debug_str	00000000 
000492bc l       .debug_str	00000000 
000492fd l       .debug_str	00000000 
00049341 l       .debug_str	00000000 
0004937e l       .debug_str	00000000 
000493e4 l       .debug_str	00000000 
0004944b l       .debug_str	00000000 
000494ae l       .debug_str	00000000 
00049510 l       .debug_str	00000000 
00049575 l       .debug_str	00000000 
000495de l       .debug_str	00000000 
00049644 l       .debug_str	00000000 
000496aa l       .debug_str	00000000 
00049705 l       .debug_str	00000000 
0004976c l       .debug_str	00000000 
000497d7 l       .debug_str	00000000 
00049832 l       .debug_str	00000000 
0004988d l       .debug_str	00000000 
000231f3 l       .debug_str	00000000 
000498d4 l       .debug_str	00000000 
0004991c l       .debug_str	00000000 
00049964 l       .debug_str	00000000 
000499ac l       .debug_str	00000000 
000499f5 l       .debug_str	00000000 
00049a3f l       .debug_str	00000000 
00049a86 l       .debug_str	00000000 
00049ad9 l       .debug_str	00000000 
00049af4 l       .debug_str	00000000 
00049b3c l       .debug_str	00000000 
00049b90 l       .debug_str	00000000 
00049bd8 l       .debug_str	00000000 
00049c2c l       .debug_str	00000000 
00049c74 l       .debug_str	00000000 
00049cc8 l       .debug_str	00000000 
00049d11 l       .debug_str	00000000 
00049d66 l       .debug_str	00000000 
00049db0 l       .debug_str	00000000 
00049e08 l       .debug_str	00000000 
00049e6a l       .debug_str	00000000 
00049ec9 l       .debug_str	00000000 
00049f29 l       .debug_str	00000000 
00049f89 l       .debug_str	00000000 
00049fe9 l       .debug_str	00000000 
0004a04a l       .debug_str	00000000 
0004a0a9 l       .debug_str	00000000 
0004a109 l       .debug_str	00000000 
0004a169 l       .debug_str	00000000 
0004a1c9 l       .debug_str	00000000 
0004a22a l       .debug_str	00000000 
0004a287 l       .debug_str	00000000 
0004a2e2 l       .debug_str	00000000 
0004a338 l       .debug_str	00000000 
0004a396 l       .debug_str	00000000 
0004a3ea l       .debug_str	00000000 
0004a44b l       .debug_str	00000000 
0004a4b1 l       .debug_str	00000000 
0004a519 l       .debug_str	00000000 
0004a580 l       .debug_str	00000000 
0004a5dc l       .debug_str	00000000 
0004a63d l       .debug_str	00000000 
0004a697 l       .debug_str	00000000 
0004a6f1 l       .debug_str	00000000 
0004a74f l       .debug_str	00000000 
0004a7a3 l       .debug_str	00000000 
0004a81f l       .debug_str	00000000 
0004a888 l       .debug_str	00000000 
0004a904 l       .debug_str	00000000 
0004a980 l       .debug_str	00000000 
0004a9e9 l       .debug_str	00000000 
0004aa65 l       .debug_str	00000000 
0004aad2 l       .debug_str	00000000 
0004ab2c l       .debug_str	00000000 
0004ab85 l       .debug_str	00000000 
0004abdd l       .debug_str	00000000 
0004ac3c l       .debug_str	00000000 
0004ac9b l       .debug_str	00000000 
0004acfa l       .debug_str	00000000 
0004ad5a l       .debug_str	00000000 
0004adba l       .debug_str	00000000 
0004ae1a l       .debug_str	00000000 
0004ae7a l       .debug_str	00000000 
0004aedc l       .debug_str	00000000 
0004af3e l       .debug_str	00000000 
0004af9f l       .debug_str	00000000 
0004b001 l       .debug_str	00000000 
0004b063 l       .debug_str	00000000 
0004b0c4 l       .debug_str	00000000 
0004b126 l       .debug_str	00000000 
0004b188 l       .debug_str	00000000 
0003058c l       .debug_str	00000000 
0004b1d1 l       .debug_str	00000000 
0004b21d l       .debug_str	00000000 
0004b225 l       .debug_str	00000000 
0004b26f l       .debug_str	00000000 
0004b2ba l       .debug_str	00000000 
0004b2c1 l       .debug_str	00000000 
0004b30c l       .debug_str	00000000 
0004b357 l       .debug_str	00000000 
0004b3a3 l       .debug_str	00000000 
0004b3ed l       .debug_str	00000000 
0004b43a l       .debug_str	00000000 
0004b485 l       .debug_str	00000000 
0004b4d1 l       .debug_str	00000000 
0004b51d l       .debug_str	00000000 
0004b569 l       .debug_str	00000000 
0004b5b6 l       .debug_str	00000000 
0004b600 l       .debug_str	00000000 
0004b64d l       .debug_str	00000000 
0004b698 l       .debug_str	00000000 
0004b6e4 l       .debug_str	00000000 
0004b730 l       .debug_str	00000000 
0004b77c l       .debug_str	00000000 
0004b7c9 l       .debug_str	00000000 
0004b813 l       .debug_str	00000000 
0004b860 l       .debug_str	00000000 
0004b8ab l       .debug_str	00000000 
0004b8f7 l       .debug_str	00000000 
0004b943 l       .debug_str	00000000 
0004b98f l       .debug_str	00000000 
0004b9dc l       .debug_str	00000000 
0004ba27 l       .debug_str	00000000 
0004ba75 l       .debug_str	00000000 
0004bac1 l       .debug_str	00000000 
0004bb0e l       .debug_str	00000000 
0004bb5b l       .debug_str	00000000 
0004bba8 l       .debug_str	00000000 
0004bbf6 l       .debug_str	00000000 
0004bc41 l       .debug_str	00000000 
0004bc8c l       .debug_str	00000000 
0004bcd8 l       .debug_str	00000000 
0004bd24 l       .debug_str	00000000 
0004bd71 l       .debug_str	00000000 
0004bdbd l       .debug_str	00000000 
0004be0a l       .debug_str	00000000 
0004be57 l       .debug_str	00000000 
0004beb6 l       .debug_str	00000000 
0004bf13 l       .debug_str	00000000 
0004bf6f l       .debug_str	00000000 
0004bfcd l       .debug_str	00000000 
0004c02a l       .debug_str	00000000 
0004c088 l       .debug_str	00000000 
0004c0e5 l       .debug_str	00000000 
0004c143 l       .debug_str	00000000 
0004c1a0 l       .debug_str	00000000 
0004c1ff l       .debug_str	00000000 
0004c25d l       .debug_str	00000000 
0004c2be l       .debug_str	00000000 
0004c31f l       .debug_str	00000000 
0004c382 l       .debug_str	00000000 
0004c3b3 l       .debug_str	00000000 
0004c3bb l       .debug_str	00000000 
0004c41e l       .debug_str	00000000 
0004c481 l       .debug_str	00000000 
0004c4e5 l       .debug_str	00000000 
0004c549 l       .debug_str	00000000 
0004c5ad l       .debug_str	00000000 
0004c611 l       .debug_str	00000000 
0004c674 l       .debug_str	00000000 
0004c6d7 l       .debug_str	00000000 
0004c73b l       .debug_str	00000000 
0004c79f l       .debug_str	00000000 
0004c803 l       .debug_str	00000000 
0004c867 l       .debug_str	00000000 
0004c898 l       .debug_str	00000000 
0004c8a0 l       .debug_str	00000000 
0004c904 l       .debug_str	00000000 
0004c968 l       .debug_str	00000000 
0004c9cc l       .debug_str	00000000 
0004ca30 l       .debug_str	00000000 
0004ca90 l       .debug_str	00000000 
0004caf0 l       .debug_str	00000000 
0004cb1e l       .debug_str	00000000 
0004cb27 l       .debug_str	00000000 
0004cb88 l       .debug_str	00000000 
0004cbe9 l       .debug_str	00000000 
0004cc4a l       .debug_str	00000000 
0004ccab l       .debug_str	00000000 
0004cd02 l       .debug_str	00000000 
0004cd55 l       .debug_str	00000000 
0004cd9d l       .debug_str	00000000 
0004cdc5 l       .debug_str	00000000 
0004ce0d l       .debug_str	00000000 
0004ce23 l       .debug_str	00000000 
0004ce6b l       .debug_str	00000000 
0004cea0 l       .debug_str	00000000 
0004cee8 l       .debug_str	00000000 
0004cf23 l       .debug_str	00000000 
0004cf6b l       .debug_str	00000000 
0004cfb3 l       .debug_str	00000000 
0004cfd4 l       .debug_str	00000000 
0004d01c l       .debug_str	00000000 
0004d027 l       .debug_str	00000000 
0004d06f l       .debug_str	00000000 
0004d0ac l       .debug_str	00000000 
0004d0f4 l       .debug_str	00000000 
0004d14d l       .debug_str	00000000 
0004d195 l       .debug_str	00000000 
0004d1b1 l       .debug_str	00000000 
0004d1f9 l       .debug_str	00000000 
0004d2a5 l       .debug_str	00000000 
0004d2ed l       .debug_str	00000000 
0004d30b l       .debug_str	00000000 
0004d353 l       .debug_str	00000000 
0004d35d l       .debug_str	00000000 
0004d3a5 l       .debug_str	00000000 
0004d3e0 l       .debug_str	00000000 
0004d428 l       .debug_str	00000000 
0004d477 l       .debug_str	00000000 
0004d4bf l       .debug_str	00000000 
0004d4e6 l       .debug_str	00000000 
0004d52e l       .debug_str	00000000 
0004d558 l       .debug_str	00000000 
0004d5a0 l       .debug_str	00000000 
0004d61b l       .debug_str	00000000 
0004d663 l       .debug_str	00000000 
0004d6ab l       .debug_str	00000000 
0004d6c1 l       .debug_str	00000000 
00016aa6 l       .debug_str	00000000 
0004d709 l       .debug_str	00000000 
0004d751 l       .debug_str	00000000 
0004d799 l       .debug_str	00000000 
0004d7ca l       .debug_str	00000000 
0004d812 l       .debug_str	00000000 
0004d876 l       .debug_str	00000000 
0004d8be l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0004d906 l       .debug_str	00000000 
0004d94e l       .debug_str	00000000 
0004d95b l       .debug_str	00000000 
0004d9a3 l       .debug_str	00000000 
0004d9ad l       .debug_str	00000000 
0004d9f5 l       .debug_str	00000000 
0004d9fe l       .debug_str	00000000 
0004da46 l       .debug_str	00000000 
0004da6e l       .debug_str	00000000 
0004dab6 l       .debug_str	00000000 
0004dafe l       .debug_str	00000000 
0004db20 l       .debug_str	00000000 
0004db68 l       .debug_str	00000000 
0004db99 l       .debug_str	00000000 
0004dbe1 l       .debug_str	00000000 
0004dc29 l       .debug_str	00000000 
0004dc61 l       .debug_str	00000000 
0004dca9 l       .debug_str	00000000 
0004dcde l       .debug_str	00000000 
0004dd26 l       .debug_str	00000000 
0004dd4f l       .debug_str	00000000 
0004dd97 l       .debug_str	00000000 
0004ddbb l       .debug_str	00000000 
0004de03 l       .debug_str	00000000 
0004de28 l       .debug_str	00000000 
0004de70 l       .debug_str	00000000 
0004de8d l       .debug_str	00000000 
0004ded5 l       .debug_str	00000000 
0004dee0 l       .debug_str	00000000 
0004df28 l       .debug_str	00000000 
0004df50 l       .debug_str	00000000 
0004df98 l       .debug_str	00000000 
0004dfa7 l       .debug_str	00000000 
0004dfef l       .debug_str	00000000 
0004e037 l       .debug_str	00000000 
0004e053 l       .debug_str	00000000 
0004e09b l       .debug_str	00000000 
0004e112 l       .debug_str	00000000 
0004e15a l       .debug_str	00000000 
0004e1d1 l       .debug_str	00000000 
0004e219 l       .debug_str	00000000 
0004e222 l       .debug_str	00000000 
0004e26a l       .debug_str	00000000 
0004e290 l       .debug_str	00000000 
0004e2d8 l       .debug_str	00000000 
0004e30b l       .debug_str	00000000 
0004e353 l       .debug_str	00000000 
0004e370 l       .debug_str	00000000 
0004e3b8 l       .debug_str	00000000 
0004e3c1 l       .debug_str	00000000 
0004e409 l       .debug_str	00000000 
0004e451 l       .debug_str	00000000 
0004e475 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0004e4bd l       .debug_str	00000000 
0004e505 l       .debug_str	00000000 
0004e54d l       .debug_str	00000000 
0004e645 l       .debug_str	00000000 
0001b1a7 l       .debug_str	00000000 
0004e68d l       .debug_str	00000000 
0004e6d5 l       .debug_str	00000000 
0004e71d l       .debug_str	00000000 
0004e74a l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0004e792 l       .debug_str	00000000 
0004e7da l       .debug_str	00000000 
0004e837 l       .debug_str	00000000 
0004e87f l       .debug_str	00000000 
0004e888 l       .debug_str	00000000 
0004e8d0 l       .debug_str	00000000 
0004e8ed l       .debug_str	00000000 
0004e935 l       .debug_str	00000000 
0004e96b l       .debug_str	00000000 
0004e9b3 l       .debug_str	00000000 
0004e9e8 l       .debug_str	00000000 
0004ea30 l       .debug_str	00000000 
0004ea69 l       .debug_str	00000000 
0004eab1 l       .debug_str	00000000 
0004eacd l       .debug_str	00000000 
0004eb15 l       .debug_str	00000000 
0004eb1d l       .debug_str	00000000 
0004eb65 l       .debug_str	00000000 
0004eb80 l       .debug_str	00000000 
0004ebc8 l       .debug_str	00000000 
0004ebf0 l       .debug_str	00000000 
0004ec3a l       .debug_str	00000000 
0004ec84 l       .debug_str	00000000 
0004ece3 l       .debug_str	00000000 
0004ed40 l       .debug_str	00000000 
0004ed99 l       .debug_str	00000000 
0004edf8 l       .debug_str	00000000 
0004ee57 l       .debug_str	00000000 
0004eeb8 l       .debug_str	00000000 
0004ef1b l       .debug_str	00000000 
0004ef83 l       .debug_str	00000000 
0004efe5 l       .debug_str	00000000 
0004f04b l       .debug_str	00000000 
0004f0ad l       .debug_str	00000000 
0004f112 l       .debug_str	00000000 
0004f175 l       .debug_str	00000000 
0004f1d1 l       .debug_str	00000000 
0004f228 l       .debug_str	00000000 
0004f281 l       .debug_str	00000000 
0004f2d4 l       .debug_str	00000000 
0004f330 l       .debug_str	00000000 
0004f396 l       .debug_str	00000000 
0004f3ec l       .debug_str	00000000 
0004f449 l       .debug_str	00000000 
0004f4ab l       .debug_str	00000000 
0004f504 l       .debug_str	00000000 
0004f55f l       .debug_str	00000000 
0004f5ba l       .debug_str	00000000 
0004f615 l       .debug_str	00000000 
0004f672 l       .debug_str	00000000 
0004f6cf l       .debug_str	00000000 
0004f715 l       .debug_str	00000000 
0004f75f l       .debug_str	00000000 
0004f79f l       .debug_str	00000000 
0004f7dc l       .debug_str	00000000 
0004f820 l       .debug_str	00000000 
0004f85c l       .debug_str	00000000 
0004f8a0 l       .debug_str	00000000 
0004f8e9 l       .debug_str	00000000 
0004f8f2 l       .debug_str	00000000 
0004f93b l       .debug_str	00000000 
0004f944 l       .debug_str	00000000 
0004f9ad l       .debug_str	00000000 
0004fa0a l       .debug_str	00000000 
0004fa6d l       .debug_str	00000000 
0004fac3 l       .debug_str	00000000 
0004fb19 l       .debug_str	00000000 
0004fb72 l       .debug_str	00000000 
0004fbca l       .debug_str	00000000 
0004fc2e l       .debug_str	00000000 
0004fcb4 l       .debug_str	00000000 
0004fcba l       .debug_str	00000000 
0004fd40 l       .debug_str	00000000 
0004fd46 l       .debug_str	00000000 
0004fdc8 l       .debug_str	00000000 
0004fe4a l       .debug_str	00000000 
0004fecd l       .debug_str	00000000 
0004fed4 l       .debug_str	00000000 
0004ff57 l       .debug_str	00000000 
0004ff5e l       .debug_str	00000000 
0004ffe4 l       .debug_str	00000000 
0005006a l       .debug_str	00000000 
000500ed l       .debug_str	00000000 
00050170 l       .debug_str	00000000 
000501f2 l       .debug_str	00000000 
00050278 l       .debug_str	00000000 
000502fe l       .debug_str	00000000 
00050388 l       .debug_str	00000000 
00050410 l       .debug_str	00000000 
00050498 l       .debug_str	00000000 
00050500 l       .debug_str	00000000 
00050569 l       .debug_str	00000000 
000505d3 l       .debug_str	00000000 
0005063e l       .debug_str	00000000 
0005069c l       .debug_str	00000000 
000506fa l       .debug_str	00000000 
00050758 l       .debug_str	00000000 
000507b7 l       .debug_str	00000000 
00050815 l       .debug_str	00000000 
00050874 l       .debug_str	00000000 
000508d2 l       .debug_str	00000000 
00050931 l       .debug_str	00000000 
00050990 l       .debug_str	00000000 
000509ef l       .debug_str	00000000 
00050a4d l       .debug_str	00000000 
00050aac l       .debug_str	00000000 
00050b0b l       .debug_str	00000000 
00050b6a l       .debug_str	00000000 
00050bc9 l       .debug_str	00000000 
00050c28 l       .debug_str	00000000 
00050c87 l       .debug_str	00000000 
00050ce6 l       .debug_str	00000000 
00050d45 l       .debug_str	00000000 
00050da4 l       .debug_str	00000000 
00050e03 l       .debug_str	00000000 
00050e62 l       .debug_str	00000000 
00050ec1 l       .debug_str	00000000 
00050f20 l       .debug_str	00000000 
00050f7f l       .debug_str	00000000 
00050fde l       .debug_str	00000000 
0005103d l       .debug_str	00000000 
0005109c l       .debug_str	00000000 
000510fb l       .debug_str	00000000 
0005115a l       .debug_str	00000000 
000511ba l       .debug_str	00000000 
00051219 l       .debug_str	00000000 
00051278 l       .debug_str	00000000 
000512d7 l       .debug_str	00000000 
00051337 l       .debug_str	00000000 
00051396 l       .debug_str	00000000 
000513f5 l       .debug_str	00000000 
00051454 l       .debug_str	00000000 
000514b4 l       .debug_str	00000000 
00014f4e l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00016da6 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00016db0 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
000155ba l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
000165e2 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
000154b4 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00015564 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00015adc l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00014efe l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00014f60 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0001eb04 l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
0001eb7f l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
0001ed70 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001e0e0 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
0001558e l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00015594 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00015588 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00014f00 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00016dbc l     F .text	00000024 __semihost
00016de0 l     F .text	00000010 debugger_connected
00016df0 l     F .text	0000002e semihost_write
00016ec4 l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00017094 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
000170e8 l     F .text	00000050 hal_gpio_irq_handler
00017138 l     F .text	0000002c hal_gpio_irq_setup
00017164 l     F .text	0000001c hal_gpio_find_empty_slot
00017180 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00017314 l     F .text	0000007a hal_i2c_delay_us
00017390 l     F .text	00000024 hal_i2c_resolve
000173b4 l     F .text	0000001c hal_i2c_convert_status
000173d0 l     F .text	00000012 read_gpio_inbuffer
000173e2 l     F .text	000000a2 hal_i2c_clear_bus
0001f1d8 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00017780 l     F .text	0000006e nrf52_irqm_handler
00017808 l     F .text	00000014 hal_spi_stop_transfer
0001781c l     F .text	0000004c hal_spi_config_slave
00017868 l     F .text	000000b8 hal_spi_init_master
00017920 l     F .text	000000e0 hal_spi_config_master
0001f1e0 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00017d04 l     F .text	0000000e nrf52_hal_wdt_default_handler
00017d14 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00017f2c l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001823c l     F .text	0000005c os_dev_add
00018298 l     F .text	00000026 os_dev_initialize
000182be l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
000187e8 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
000188fc l     F .text	00000010 os_msys_find_biggest_pool
0001890c l     F .text	0000002c os_msys_find_pool
00018984 l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00018be0 l     F .text	00000020 os_sanity_check_list_lock
00018c00 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00019074 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00019164 l     F .text	0000004c os_deltatime
000191b0 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
000194cc l       .text	00000000 SVC_User
000194ea l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001958c l       .text	00000000 test1
00019580 l       .text	00000000 loop1
00019592 l       .text	00000000 res1
000195ae l       .text	00000000 test2
000195b6 l       .text	00000000 done
000195a2 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
000195c2 l       .text	00000000 test1
000195be l       .text	00000000 loop1
000195d0 l       .text	00000000 test2
000195cc l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001963a l     F .text	000000c0 ui2a
000196fa l     F .text	00000020 i2a
0001971a l     F .text	00000030 a2d
0001974a l     F .text	00000036 a2i
00019780 l     F .text	0000002a putf
000197ac l     F .text	0000011c putchw
000198c8 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
00019c4c l     F .text	00000004 stdin_read
00019c50 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00019d00 l     F .text	00000028 nrf52k_flash_wait_ready
00019d28 l     F .text	00000054 nrf52k_flash_erase_sector
00019d7c l     F .text	00000004 nrf52k_flash_init
00019d80 l     F .text	00000020 nrf52k_flash_sector_info
00019da0 l     F .text	000000d0 nrf52k_flash_write
00019e70 l     F .text	0000000e nrf52k_flash_read
0001f398 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00019e80 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001a08c l     F .text	0000000a nrf_read_timer_cntr
0001a098 l     F .text	000000b4 nrf_timer_set_ocmp
0001a14c l     F .text	0000000a nrf_timer_disable_ocmp
0001a156 l     F .text	0000000a nrf_rtc_disable_ocmp
0001a160 l     F .text	00000054 hal_timer_read_bsptimer
0001a1b4 l     F .text	00000076 hal_timer_chk_queue
0001a22a l     F .text	0000002c hal_timer_irq_handler
0001f3b4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001a3f0 l     F .text	00000034 nrf52_periph_create_timers
0001a424 l     F .text	00000020 nrf52_periph_create_i2c
0001a444 l     F .text	00000020 nrf52_periph_create_spi
0001f3cc l     O .text	0000000c hal_i2c1_cfg
0001f3d8 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001a478 l     F .text	00000028 sensor_mgr_remove
0001a4a0 l     F .text	00000060 sensor_mgr_insert
0001a500 l     F .text	0000000a sensor_type_traits_empty
0001a50c l     F .text	0000000c sensor_mgr_evq_set
0001a546 l     F .text	0000005c sensor_read_data_func
0001a5a4 l     F .text	00000048 sensor_base_ts_update_event
0001a5ec l     F .text	00000050 sensor_up_timestamp
0001a674 l     F .text	000000a0 sensor_mgr_init
0001a8e0 l     F .text	0000007c sensor_mgr_wakeup_event
0001a73e l     F .text	00000032 sensor_update_nextrun
0001a770 l     F .text	0000001e sensor_calc_nextrun_delta
0001a790 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001a868 l     F .text	0000004a sensor_mgr_poll_bytype
0001a8b2 l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
0001f3f0 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0001f3fc l     O .text	0000003c SENSOR_NODE_HW_IDS
0001f498 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001ab04 l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001abb0 l     F .text	00000004 temp_stub_close
0001abb4 l     F .text	0000001c temp_stub_sensor_get_config
0001abd0 l     F .text	00000026 temp_stub_open
0001acac l     F .text	0000007c temp_stub_sensor_read
0001f4dc l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001ad50 l     F .text	00000030 oc_buffer_tx
0001ad80 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001aed4 l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001b028 l     F .text	00000094 mfg_seek_next_aux
0001b0bc l     F .text	00000070 mfg_read_mmr
0001b12c l     F .text	00000054 mfg_read_next_mmr
0001b180 l     F .text	0000003c mfg_open_flash_area
0001b1bc l     F .text	00000044 mfg_read_tlv_body
0001b288 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b2ee l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001a50a l       .debug_str	00000000 
0001a561 l       .debug_str	00000000 
00011bb8 l       .debug_str	00000000 
0001a5ad l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a5b5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000150cc g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00008616 g     F .text	000000ba main
00010c26 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h045ae3f7c372d833E
00009cf4 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001850c g     F .text	00000040 os_eventq_remove
00019358 g     F .text	00000018 os_arch_init
00019574 g     F .text	00000048 memcmp
0001189e g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00014254 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00010fcc g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00011c14 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00014a04 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
0001488c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00013d58 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
000150fc g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a46c g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000090a0 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00016bce g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
00009086 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0001a734 g     F .text	0000000a sensor_unlock
0000a852 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00011020 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00008ef2 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00018c2c g     F .text	00000024 os_sanity_check_register
0001ac04 g     F .text	0000007c temp_stub_init
00018ccc g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
00011f30 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00014682 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001b38c g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00014eec g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00014344 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
00010ae8 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE
00008c5e g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
0001419a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00008a9c g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001ae10 g     F .text	00000020 oc_send_buffer
00019400 g     F .text	00000030 os_arch_start
0001aa28 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
000183f8 g     F .text	00000010 os_eventq_init
00015fba g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
00011fc0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
0001569e g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
0001100a g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
000109e2 g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E
00008d54 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00014c06 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001a95c g     F .text	00000028 init_sensor_coap
00014918 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001ae30 g     F .text	0000004c oc_send_multicast_message
0000c4c2 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE
000115c0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00015f76 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0000c884 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E
00016f60 g     F .text	0000002c console_dump
00018df8 g     F .text	00000078 os_sched_wakeup
00014d96 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
00011ec0 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00016a7e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008ad4 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001b2ec g     F .text	00000002 _fini
00018230 g     F .text	0000000a os_cputime_get32
000110d0 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00013bfa g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
000192e8 g     F .text	00000014 os_arch_ctx_sw
00010e0a g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
00011f06 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00019536 g     F .text	0000000c SysTick_Handler
0001a99c g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
000119c0 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00011036 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000093d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008a74 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001960e g     F .text	0000001c strcmp
0000b798 g     F .text	00000118 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
2000dde8 g     O .bss	00000050 g_idle_task
000183e8 g     F .text	00000010 os_dev_reset
00009484 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
00018f48 g     F .text	00000010 os_sem_init
0001445e g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
00016ee0 g     F .text	00000070 console_printhex
0000aab6 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
0000885c g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
00013dc4 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0001f59c g       .text	00000000 __exidx_start
0001aa0c g     F .text	0000001c is_collector_node
00014cc6 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
000195d6 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
0001688c g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00016e70 g     F .text	00000054 console_buffer
00018408 g     F .text	0000000a os_eventq_inited
000170a8 g     F .text	0000000c sysinit_end
0001483a g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00014c96 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00015074 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
00009384 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000882e g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000c4d6 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E
00013d2c g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00013f34 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001af8c g     F .text	00000026 flash_area_read
00011ef0 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001aea2 g     F .text	00000002 oc_register_ip4
00008faa g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001aea4 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00014710 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001b30c g     F .text	00000028 hal_flash_init
000183b0 g     F .text	00000036 os_dev_close
0001f534 g     O .text	00000048 sysflash_map_dflt
00010e32 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE
00019cf4 g     F .text	0000000c hal_bsp_init
00008b80 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
000116bc g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000991e g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011582 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001b6e8 g     F .text	00000004 __aeabi_memcpy4
00017b4c g     F .text	0000002c hal_spi_set_txrx_cb
0001b6e0 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001b6e0 g     F .text	00000006 __aeabi_memclr4
000080f8 g       .text	00000000 __isr_vector_end
00017644 g     F .text	0000013c hal_i2c_master_read
0001992c g     F .text	0000025c tfp_format
00014bd6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001a800 g     F .text	00000068 sensor_read
000144b4 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
0000906c g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001b6e8 g     F .text	00000004 __aeabi_memcpy
0001b6e8 g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
00019430 g     F .text	0000005c os_arch_os_start
0001a7e2 g     F .text	0000001e sensor_init
00014eb2 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
20000000 g       .bss	00000000 _ram_start
00019258 g     F .text	00000026 os_time_delay
0001aea0 g     F .text	00000002 oc_register_gatt
00010838 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001b388 g     F .text	00000004 hal_bsp_hw_id_len
000181f0 g     F .text	00000034 os_callout_wakeup_ticks
00018566 g     F .text	00000026 os_mqueue_get
00017484 g     F .text	00000098 hal_i2c_init
00015e48 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
0001688c g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001d8ac g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
00010eac g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE
00014ba6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0000c59a g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h82c48d5866118aadE
00018ef8 g     F .text	00000022 os_sched
00008c70 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00010df0 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
00011702 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001a518 g     F .text	0000002e sensor_mgr_match_bytype
000115d6 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000a9d4 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
00018a34 g     F .text	00000014 os_mutex_init
00008f5e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009cb0 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00008164  w    F .text	00000002 RTC1_IRQHandler
000117e8 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00014b16 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
00009214 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000935a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008b78 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
000120d8 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
000189d8 g     F .text	00000028 os_msys_get_pkthdr
0001ac80 g     F .text	0000002c temp_stub_get_raw_temperature
00018e70 g     F .text	0000003c os_sched_os_timer_exp
000182e0 g     F .text	00000040 os_dev_create
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00018c1c g     F .text	00000010 os_sanity_check_init
0001515e g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00018224 g     F .text	0000000c os_cputime_init
000184f4 g     F .text	00000018 os_eventq_run
00011ba0 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
00018a00 g     F .text	00000034 os_msys_init
000142fc g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
000146ac g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
000192de g     F .text	0000000a timer_handler
0001119a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00014ef0 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000092ea g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008bb2 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014ee8 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
0001513c g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000c5bc g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
000142d0 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00016a7e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00013fca g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
00019b88 g     F .text	00000008 vfprintf
00013db0 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
0001172e g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
0001178c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
00018606 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00014b76 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00010e4e g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h437121d4373158a5E
0001634a g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
000150d0 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001930e g     F .text	0000000a os_arch_in_critical
00018cbc g     F .text	00000010 os_sanity_init
00010ed8 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
00016a7e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
000145e2 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00017dd0 g     F .text	0000004c __assert_func
00014904 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
000140f0 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
000188a6 g     F .text	0000001e os_memblock_put_from_cb
00019490 g     F .text	00000014 os_set_env
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00008a86 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00017040 g     F .text	00000048 console_printf
00011f3a g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000a924 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011602 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00011e0c g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00014ab6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
000194a4 g     F .text	00000006 os_arch_init_task_stack
0001b278 g     F .text	00000010 mfg_open
00016a7e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
000145fa g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001add4 g     F .text	00000030 oc_ri_mem_init
00010848 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE
000096e6 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
00019ce4 g     F .text	00000010 hal_bsp_flash_dev
0001afb4 g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
0000c806 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00019542 g     F .text	0000001e os_default_irq_asm
00017e1c g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00017a84 g     F .text	00000068 hal_spi_disable
00011f80 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
0000903e g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001aea6 g     F .text	00000002 oc_register_lora
00018688 g     F .text	000000a8 os_mbuf_append
0001ab54 g     F .text	0000005c temp_stub_create
0001b334 g     F .text	00000054 hal_flash_read
00016e20 g     F .text	00000048 console_flush
00018070 g     F .text	0000001a os_start
0001a268 g     F .text	00000060 hal_timer_init
0001104a g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
00019c60 g     F .text	00000010 rust_sysinit
0000c5ea g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE
00008164  w    F .text	00000002 I2S_IRQHandler
00016f50 g     F .text	00000010 console_printint
00018f1c g     F .text	0000002c os_sched_resort
0001f374 g     O .text	00000008 MemFile_methods
00019c34 g     F .text	00000018 fmemopen_w
00012dd0 g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00017a00 g     F .text	00000038 hal_spi_config
0001b6dc  w    F .text	00000002 .hidden __aeabi_ldiv0
000188ec g     F .text	00000010 os_mempool_module_init
00018eec g     F .text	0000000c os_sched_next_task
0001723e g     F .text	00000034 hal_gpio_read
000180c4 g     F .text	0000001a os_callout_init
000189c8 g     F .text	00000010 os_msys_reset
00019b90 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001b3e0 g     F .text	00000000 .hidden __aeabi_uldivmod
00010fa6 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE
00019280 g     F .text	00000038 os_gettimeofday
00016fcc g     F .text	0000001e console_write
00014c66 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00015e12 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000097e2 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00017f50 g     F .text	00000070 os_init_idle_task
00019370 g     F .text	0000008c os_arch_os_init
0000ccc0 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE
00009322 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00017fc0 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000097d8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011618 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
00016fc8 g     F .text	00000004 semihosting_console_init
0001b212 g     F .text	0000001a mfg_seek_next_with_type
00018b00 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000c5a2 g     F .text	0000001a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E
00014416 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
0001721c g     F .text	00000022 hal_gpio_write
00010c36 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E
00010c46 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE
00008600 g     F .text	00000014 _start
000116fa g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011762 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001b2d8 g     F .text	00000014 __wrap_coap_receive
00014ae6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
000145a6 g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
00011ffc g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
0000cb18 g     F .text	00000100 _ZN8libchip814Chip8$LT$T$GT$3new17h365c56fd6f683110E
00013e48 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
00019c04 g     F .text	0000002e memfile_write
0001b6dc  w    F .text	00000002 .hidden __aeabi_idiv0
00014550 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
00017f44 g     F .text	0000000c os_started
0001adac g     F .text	00000028 oc_buffer_init
00013d5a g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
00009306 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000090b0 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
0001452e g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001b6e0 g     F .text	00000006 __aeabi_memclr
0001b6ec g     F .text	0000009a __aeabi_memset4
00012164 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00015e1a g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00011f50 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
00019218 g     F .text	00000040 os_time_advance
00017a38 g     F .text	0000004c hal_spi_enable
0001b240 g     F .text	00000038 mfg_init
0001387a g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000de38 g     O .bss	00000050 g_os_main_task
0001b6ec g     F .text	0000009a __aeabi_memset8
000168ea g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008b6c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0000c686 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE
0001f5b4 g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
0001545c g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008afa g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00016cc2 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
000170b4 g     F .text	00000034 NVIC_Relocate
0001709c g     F .text	0000000c sysinit_start
0001f380 g     O .text	00000018 nrf52k_flash_dev
0001a2c8 g     F .text	000000f8 hal_timer_config
000108be g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE
00013ec4 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
00019bf0 g     F .text	00000014 vprintf
00008f90 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00016e68 g     F .text	00000008 disable_buffer
0001492c g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
000150c4 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
20000144 g       .bssnz	00000000 __bssnz_end__
0001834c g     F .text	00000020 os_dev_lookup
00009208 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
00017dac g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
0001489e g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
00019308 g     F .text	00000006 os_arch_restore_sr
0001811c g     F .text	00000078 os_callout_reset
000097ec g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001b22c g     F .text	0000000a mfg_read_tlv_flash_area
00011f9c g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00018554 g     F .text	00000012 os_mqueue_init
00014b46 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00013ff4 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001093a g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E
0001abf6 g     F .text	0000000e temp_stub_default_cfg
00011fd0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
00008020 g       .imghdr	00000000 __text
000180e0 g     F .text	0000003c os_callout_stop
000081c0 g     F .text	0000004c hal_system_clock_start
00018650 g     F .text	00000024 os_mbuf_free_chain
000090dc g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
00019c70 g     F .text	00000030 mem_init_mbuf_pool
00011ff4 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00008a90 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
000148b0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
0001751c g     F .text	00000128 hal_i2c_master_write
00008164  w    F .text	00000002 QDEC_IRQHandler
0000cc18 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
000143f4 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
00012146 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
000113d6 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0001854c g     F .text	00000008 os_eventq_dflt_get
0001a71c g     F .text	00000018 sensor_lock
00010fe2 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000088c6 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
00016ff4 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
00018674 g     F .text	00000014 os_mbuf_len
0001863c g     F .text	00000014 os_mbuf_free
000115ec g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00011bac g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00016fea g     F .text	00000008 console_blocking_mode
0000a492 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009a4a g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00010ff6 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001a464 g     F .text	00000010 nrf52_periph_create
00018c50 g     F .text	0000006c os_sanity_run
0001430a g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00014598 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00013dca g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00013f10 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
00008896 g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
00018860 g     F .text	00000014 os_mempool_init
0001f37c g     O .text	00000004 stdout
0000aa84 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000c7c4 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
00018320 g     F .text	0000002c os_dev_initialize_all
00008c90 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000c79c g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE
000148da g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00017eb4 g     F .text	00000078 os_idle_task
00010b66 g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E
00008d44 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00014a1c g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00010ddc g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had19db2520282693E
00009868 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
00015b10 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001af4c g     F .text	00000040 flash_area_open
00008164 g     F .text	00000002 Default_Handler
000150c2 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000922e g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
00018938 g     F .text	0000004c os_msys_register
000090e6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000a888 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011738 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00010e80 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE
00011312 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00017aec g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001a658 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
0001682e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00014a26 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0001aea8 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00014244 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a4bc g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00010d90 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h956bec499bd3b07aE
00008164  w    F .text	00000002 GPIOTE_IRQHandler
000118b0 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001b200 g     F .text	00000012 mfg_seek_next
00011bb6 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
2000011c g     O .data	00000008 g_os_sleep_list
00015880 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0000c98a g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E
00014cfc g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
000185ca g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
00018d5c g     F .text	0000000c os_sched_set_current_task
00018194 g     F .text	0000005c os_callout_tick
0000c810 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE
00014d54 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
00009102 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00011818 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
00017d34 g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
00016b54 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a48a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000aa92 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
0000c720 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E
0001836c g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
0000c0b4 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h884056a56ab77b84E
00014ee4 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00014998 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008b60 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
000177f0 g     F .text	00000018 nrf52_spi0_irq_handler
0001a714 g     F .text	00000008 sensor_pkg_init
000145b8 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001ad28 g     F .text	00000028 temp_stub_config
0001858c g     F .text	0000003e os_mqueue_put
00016cc2 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00017b78 g     F .text	000000ac hal_spi_txrx
00010e72 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc7e73cb793d71c2aE
00008164  w    F .text	00000002 RTC2_IRQHandler
00018d50 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00011e28 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001b024 g     F .text	00000002 modlog_init
00017c24 g     F .text	000000e0 hal_spi_txrx_noblock
00015e22 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000907c g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
0000cae8 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008ece g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
00018d20 g     F .text	00000030 os_sched_ctx_sw_hook
0001a7b4 g     F .text	0000002e sensor_mgr_register
00015074 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
000156c0 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
0000cac6 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE
00008154  w    F .text	00000002 NMI_Handler
00013d42 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000917e g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00008d4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
000115b4 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001443c g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
000185d4 g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008928 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
0001538a g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
00019bb4 g     F .text	0000003a vsnprintf
00012c18 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000c824 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E
00018a48 g     F .text	000000b8 os_mutex_release
00011bbe g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00011972 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001a668 g     F .text	0000000c sensor_mgr_evq_get
00014278 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011716 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
2000de8c g     O .bss	00000004 g_os_idle_ctr
00010f92 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE
000171b8 g     F .text	0000002c hal_gpio_init_in
0000bda0 g     F .text	00000234 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E
000116b2 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
000097f6 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001a474 g     F .text	00000002 sensor_dev_create
00011236 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
000088dc g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
000171e4 g     F .text	00000038 hal_gpio_init_out
00008d6e g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011346 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
0001437c g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
00009402 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001920c g     F .text	0000000c os_time_get
000150c4 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000c468 g     F .text	0000005a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E
0000a3fe g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
000188c4 g     F .text	00000026 os_memblock_put
00012ca8 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
00018d68 g     F .text	00000090 os_sched_sleep
000116f0 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001a63c g     F .text	0000001c sensor_mgr_lock
0001b410 g     F .text	000002cc .hidden __udivmoddi4
00011002 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
00019fec g     F .text	000000a0 os_tick_init
00013e72 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000150be g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008ff0 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
00010e60 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6d2e3c3113406242E
00018eac g     F .text	00000040 os_sched_wakeup_ticks
0000933e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001a3c0 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
000172ec g     F .text	00000028 hal_gpio_irq_enable
0001ae04 g     F .text	0000000c oc_evq_set
0001a984 g     F .text	00000018 is_sensor_node
00010800 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE
0001682e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001ae7c g     F .text	00000024 oc_init
000169a8 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
000169a8 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
0000c0ce g     F .text	000002ca _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE
0000971c g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
0000cb04 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E
00015ffe g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00014a86 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
00016bce g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00014774 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
0001f5b4 g       .ARM.exidx	00000000 __etext
00010fba g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
000168ea g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00017088 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00009034 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
0001908c g     F .text	000000d8 os_task_init
00008f68 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
000112f8 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
000116e0 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00014c36 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00018f58 g     F .text	00000064 os_sem_release
0001b6ec g     F .text	0000009a __aeabi_memset
00018730 g     F .text	000000b8 os_mbuf_dup
000194f0 g     F .text	00000046 PendSV_Handler
0000cc6e g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E
00011fe0 g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
000194aa g     F .text	00000046 SVC_Handler
0000c398 g     F .text	000000d0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE
00008826 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
000192fc g     F .text	0000000c os_arch_save_sr
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001a258 g     F .text	00000010 nrf52_timer0_irq_handler
00019318 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
0001450c g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
00018874 g     F .text	00000032 os_memblock_get
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00011410 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
000110d6 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00017dbc g     F .text	00000014 hal_watchdog_tickle
0001847a g     F .text	0000007a os_eventq_get
0001b3c0 g     F .text	00000020 sprintf
0000cace g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE
000108e4 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E
000192b8 g     F .text	00000026 os_time_ms_to_ticks
000088ec g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000a8ee g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001aeac g     F .text	00000028 oc_rep_init
000195bc g     F .text	0000001a memcpy
00019ca0 g     F .text	00000044 sysinit_app
0001195a g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00014a56 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
0001388a g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
0000c0be g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E
00011eda g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00016f8c g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00017274 g     F .text	00000078 hal_gpio_irq_init
0001962a g     F .text	00000010 strlen
00018fbc g     F .text	000000b8 os_sem_pend
00019f54 g     F .text	00000098 os_tick_idle
00011f20 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
000143d2 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00010d58 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
0001206a g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
2000fe50 g       *ABS*	00000000 __HeapLimit
0001808c g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000093ae g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000a452 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00010824 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h21f208ed1261e104E
00014046 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00013bf6 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00014580 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
000169a8 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00018412 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
0000982c g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
00011224 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001b236 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008b48 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001aa44 g     F .text	000000c0 sensor_network_init
000169a8 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00014658 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008bf4 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00011f68 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	000194ab 	.word	0x000194ab
	...
    8058:	000194f1 	.word	0x000194f1
    805c:	00019537 	.word	0x00019537
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	0001f5b4 	.word	0x0001f5b4
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00e fda1 	bl	170b4 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f00f fcdc 	bl	17fc0 <os_init>
    os_start();
    8608:	f00f fd32 	bl	18070 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f960 	bl	88dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ff31 	bl	9484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24b 7186 	movw	r1, #46982	; 0xb786
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24b 73bc 	movw	r3, #47036	; 0xb7bc
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fa5e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fa39 	bl	aab6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24b 718e 	movw	r1, #46990	; 0xb78e
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24b 73cc 	movw	r3, #47052	; 0xb7cc
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fa4d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 f899 	bl	b798 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24b 71dc 	movw	r1, #47068	; 0xb7dc
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24b 73e8 	movw	r3, #47080	; 0xb7e8
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fa3c 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 faf2 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24b 7196 	movw	r1, #46998	; 0xb796
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24b 73f8 	movw	r3, #47096	; 0xb7f8
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fad7 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24b 719e 	movw	r1, #47006	; 0xb79e
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64b 0308 	movw	r3, #47112	; 0xb808
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa17 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64b 0118 	movw	r1, #47128	; 0xb818
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fc84 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00c fce7 	bl	150be <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64b 001e 	movw	r0, #47134	; 0xb81e
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fc73 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00c fcd7 	bl	150c4 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00c fcd5 	bl	150cc <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64b 0025 	movw	r0, #47141	; 0xb825
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fc5c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fc7e 	bl	903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64b 0028 	movw	r0, #47144	; 0xb828
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fc4f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fc89 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64b 002e 	movw	r0, #47150	; 0xb82e
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fc43 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fc86 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fc82 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00c fc9f 	bl	150c4 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f899 	bl	88c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64b 0130 	movw	r1, #47152	; 0xb830
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f004 f80f 	bl	c7c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fc1d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64b 002e 	movw	r0, #47150	; 0xb82e
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc15 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fc58 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f64b 0340 	movw	r3, #47168	; 0xb840
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00c fc35 	bl	15074 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8826:	b081      	sub	sp, #4
    8828:	9000      	str	r0, [sp, #0]
    882a:	b001      	add	sp, #4
    882c:	4770      	bx	lr

0000882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    882e:	b580      	push	{r7, lr}
    8830:	b086      	sub	sp, #24
    8832:	9004      	str	r0, [sp, #16]
    8834:	9105      	str	r1, [sp, #20]
    8836:	9002      	str	r0, [sp, #8]
    8838:	f000 f810 	bl	885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    883c:	9001      	str	r0, [sp, #4]
    883e:	e7ff      	b.n	8840 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8840:	9801      	ldr	r0, [sp, #4]
    8842:	07c1      	lsls	r1, r0, #31
    8844:	2900      	cmp	r1, #0
    8846:	d103      	bne.n	8850 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8848:	e7ff      	b.n	884a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    884a:	2000      	movs	r0, #0
    884c:	9003      	str	r0, [sp, #12]
    884e:	e002      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8850:	9802      	ldr	r0, [sp, #8]
    8852:	9003      	str	r0, [sp, #12]
    8854:	e7ff      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8856:	9803      	ldr	r0, [sp, #12]
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}

0000885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    885c:	b580      	push	{r7, lr}
    885e:	b08a      	sub	sp, #40	; 0x28
    8860:	9008      	str	r0, [sp, #32]
    8862:	9109      	str	r1, [sp, #36]	; 0x24
    8864:	9103      	str	r1, [sp, #12]
    8866:	9002      	str	r0, [sp, #8]
    8868:	f000 f815 	bl	8896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    886c:	9105      	str	r1, [sp, #20]
    886e:	9004      	str	r0, [sp, #16]
    8870:	e7ff      	b.n	8872 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8872:	9803      	ldr	r0, [sp, #12]
    8874:	68c1      	ldr	r1, [r0, #12]
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	4788      	blx	r1
    887a:	9107      	str	r1, [sp, #28]
    887c:	9006      	str	r0, [sp, #24]
    887e:	e7ff      	b.n	8880 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8880:	a804      	add	r0, sp, #16
    8882:	a906      	add	r1, sp, #24
    8884:	f002 f905 	bl	aa92 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8888:	9001      	str	r0, [sp, #4]
    888a:	e7ff      	b.n	888c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    888c:	9801      	ldr	r0, [sp, #4]
    888e:	f000 0001 	and.w	r0, r0, #1
    8892:	b00a      	add	sp, #40	; 0x28
    8894:	bd80      	pop	{r7, pc}

00008896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8896:	b086      	sub	sp, #24
    8898:	f249 40d9 	movw	r0, #38105	; 0x94d9
    889c:	f2c1 1010 	movt	r0, #4368	; 0x1110
    88a0:	9005      	str	r0, [sp, #20]
    88a2:	f249 7064 	movw	r0, #38756	; 0x9764
    88a6:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    88aa:	9004      	str	r0, [sp, #16]
    88ac:	9804      	ldr	r0, [sp, #16]
    88ae:	9905      	ldr	r1, [sp, #20]
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	e7ff      	b.n	88b6 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    88b6:	9801      	ldr	r0, [sp, #4]
    88b8:	9002      	str	r0, [sp, #8]
    88ba:	9900      	ldr	r1, [sp, #0]
    88bc:	9103      	str	r1, [sp, #12]
    88be:	9802      	ldr	r0, [sp, #8]
    88c0:	9903      	ldr	r1, [sp, #12]
    88c2:	b006      	add	sp, #24
    88c4:	4770      	bx	lr

000088c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    88c6:	b580      	push	{r7, lr}
    88c8:	b084      	sub	sp, #16
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9103      	str	r1, [sp, #12]
    88ce:	f7ff ffae 	bl	882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	b004      	add	sp, #16
    88da:	bd80      	pop	{r7, pc}

000088dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    88dc:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    88de:	f011 f9bf 	bl	19c60 <rust_sysinit>
    88e2:	e7ff      	b.n	88e4 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    88e4:	f000 fbca 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    88e8:	e7ff      	b.n	88ea <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    88ea:	bd80      	pop	{r7, pc}

000088ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    88ec:	b580      	push	{r7, lr}
    88ee:	b086      	sub	sp, #24
    88f0:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    88f2:	7801      	ldrb	r1, [r0, #0]
    88f4:	07ca      	lsls	r2, r1, #31
    88f6:	2a00      	cmp	r2, #0
    88f8:	9000      	str	r0, [sp, #0]
    88fa:	d006      	beq.n	890a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    88fc:	e7ff      	b.n	88fe <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	9103      	str	r1, [sp, #12]
    8904:	9101      	str	r1, [sp, #4]
        match self.rep {
    8906:	e00c      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8908:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	6841      	ldr	r1, [r0, #4]
    890e:	6882      	ldr	r2, [r0, #8]
    8910:	9104      	str	r1, [sp, #16]
    8912:	9205      	str	r2, [sp, #20]
    8914:	4608      	mov	r0, r1
    8916:	4611      	mov	r1, r2
    8918:	f008 feea 	bl	116f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    891c:	9001      	str	r0, [sp, #4]
    891e:	e7ff      	b.n	8920 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8920:	e7ff      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8922:	9801      	ldr	r0, [sp, #4]
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}

00008928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8928:	b5b0      	push	{r4, r5, r7, lr}
    892a:	b0b2      	sub	sp, #200	; 0xc8
    892c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    892e:	7801      	ldrb	r1, [r0, #0]
    8930:	07ca      	lsls	r2, r1, #31
    8932:	2a00      	cmp	r2, #0
    8934:	900e      	str	r0, [sp, #56]	; 0x38
    8936:	d005      	beq.n	8944 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8938:	e7ff      	b.n	893a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    893a:	980e      	ldr	r0, [sp, #56]	; 0x38
    893c:	6841      	ldr	r1, [r0, #4]
    893e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8940:	e096      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8942:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8944:	980e      	ldr	r0, [sp, #56]	; 0x38
    8946:	6841      	ldr	r1, [r0, #4]
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	912b      	str	r1, [sp, #172]	; 0xac
    894c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    894e:	4608      	mov	r0, r1
    8950:	4611      	mov	r1, r2
    8952:	f000 face 	bl	8ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8956:	9011      	str	r0, [sp, #68]	; 0x44
    8958:	e7ff      	b.n	895a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    895a:	f64b 0058 	movw	r0, #47192	; 0xb858
    895e:	f2c0 0001 	movt	r0, #1
    8962:	6800      	ldr	r0, [r0, #0]
    8964:	a911      	add	r1, sp, #68	; 0x44
    8966:	910f      	str	r1, [sp, #60]	; 0x3c
    8968:	9010      	str	r0, [sp, #64]	; 0x40
    896a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    896c:	902d      	str	r0, [sp, #180]	; 0xb4
    896e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8970:	912e      	str	r1, [sp, #184]	; 0xb8
    8972:	900d      	str	r0, [sp, #52]	; 0x34
    8974:	910c      	str	r1, [sp, #48]	; 0x30
    8976:	f000 fc5a 	bl	922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    897a:	900b      	str	r0, [sp, #44]	; 0x2c
    897c:	e7ff      	b.n	897e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    897e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8980:	07c1      	lsls	r1, r0, #31
    8982:	2900      	cmp	r1, #0
    8984:	d001      	beq.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8986:	e7ff      	b.n	8988 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8988:	e072      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    898a:	f64b 00b0 	movw	r0, #47280	; 0xb8b0
    898e:	f2c0 0001 	movt	r0, #1
    8992:	6801      	ldr	r1, [r0, #0]
    8994:	980d      	ldr	r0, [sp, #52]	; 0x34
    8996:	9021      	str	r0, [sp, #132]	; 0x84
    8998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899a:	9222      	str	r2, [sp, #136]	; 0x88
    899c:	f64b 03c4 	movw	r3, #47300	; 0xb8c4
    89a0:	f2c0 0301 	movt	r3, #1
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	f64b 0cc8 	movw	ip, #47304	; 0xb8c8
    89aa:	f2c0 0c01 	movt	ip, #1
    89ae:	f8dc c000 	ldr.w	ip, [ip]
    89b2:	46ee      	mov	lr, sp
    89b4:	2400      	movs	r4, #0
    89b6:	f8ce 4000 	str.w	r4, [lr]
    89ba:	a823      	add	r0, sp, #140	; 0x8c
    89bc:	2201      	movs	r2, #1
    89be:	910a      	str	r1, [sp, #40]	; 0x28
    89c0:	4619      	mov	r1, r3
    89c2:	4663      	mov	r3, ip
    89c4:	f000 f86a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    89c8:	e7ff      	b.n	89ca <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    89ca:	a821      	add	r0, sp, #132	; 0x84
    89cc:	901e      	str	r0, [sp, #120]	; 0x78
    89ce:	a822      	add	r0, sp, #136	; 0x88
    89d0:	901f      	str	r0, [sp, #124]	; 0x7c
    89d2:	a823      	add	r0, sp, #140	; 0x8c
    89d4:	9020      	str	r0, [sp, #128]	; 0x80
    89d6:	981e      	ldr	r0, [sp, #120]	; 0x78
    89d8:	902f      	str	r0, [sp, #188]	; 0xbc
    89da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    89dc:	9130      	str	r1, [sp, #192]	; 0xc0
    89de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    89e0:	9231      	str	r2, [sp, #196]	; 0xc4
    89e2:	f249 03e7 	movw	r3, #37095	; 0x90e7
    89e6:	f2c0 0300 	movt	r3, #0
    89ea:	9109      	str	r1, [sp, #36]	; 0x24
    89ec:	4619      	mov	r1, r3
    89ee:	9208      	str	r2, [sp, #32]
    89f0:	f000 fcc8 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    89f4:	9007      	str	r0, [sp, #28]
    89f6:	9106      	str	r1, [sp, #24]
    89f8:	e7ff      	b.n	89fa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    89fa:	f249 01e7 	movw	r1, #37095	; 0x90e7
    89fe:	f2c0 0100 	movt	r1, #0
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f000 fcbe 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8a08:	9005      	str	r0, [sp, #20]
    8a0a:	9104      	str	r1, [sp, #16]
    8a0c:	e7ff      	b.n	8a0e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8a0e:	f245 619f 	movw	r1, #22175	; 0x569f
    8a12:	f2c0 0101 	movt	r1, #1
    8a16:	9808      	ldr	r0, [sp, #32]
    8a18:	f000 fcde 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8a1c:	9003      	str	r0, [sp, #12]
    8a1e:	9102      	str	r1, [sp, #8]
    8a20:	e7ff      	b.n	8a22 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8a22:	9807      	ldr	r0, [sp, #28]
    8a24:	9018      	str	r0, [sp, #96]	; 0x60
    8a26:	9906      	ldr	r1, [sp, #24]
    8a28:	9119      	str	r1, [sp, #100]	; 0x64
    8a2a:	9a05      	ldr	r2, [sp, #20]
    8a2c:	921a      	str	r2, [sp, #104]	; 0x68
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	931b      	str	r3, [sp, #108]	; 0x6c
    8a32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8a36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8a3a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a3e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8a42:	466c      	mov	r4, sp
    8a44:	2503      	movs	r5, #3
    8a46:	6025      	str	r5, [r4, #0]
    8a48:	a812      	add	r0, sp, #72	; 0x48
    8a4a:	ab18      	add	r3, sp, #96	; 0x60
    8a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a4e:	462a      	mov	r2, r5
    8a50:	f000 f824 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8a54:	e7ff      	b.n	8a56 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8a56:	f64b 00e4 	movw	r0, #47332	; 0xb8e4
    8a5a:	f2c0 0001 	movt	r0, #1
    8a5e:	f00c fb30 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a62:	9001      	str	r0, [sp, #4]
    8a64:	e7ff      	b.n	8a66 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8a66:	a812      	add	r0, sp, #72	; 0x48
    8a68:	9901      	ldr	r1, [sp, #4]
    8a6a:	f00c fb67 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a6e:	defe      	udf	#254	; 0xfe
    }
    8a70:	b032      	add	sp, #200	; 0xc8
    8a72:	bdb0      	pop	{r4, r5, r7, pc}

00008a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8a74:	b083      	sub	sp, #12
    8a76:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8a78:	9002      	str	r0, [sp, #8]
    8a7a:	9802      	ldr	r0, [sp, #8]
    8a7c:	9000      	str	r0, [sp, #0]
    8a7e:	e7ff      	b.n	8a80 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8a80:	9800      	ldr	r0, [sp, #0]
    8a82:	b003      	add	sp, #12
    8a84:	4770      	bx	lr

00008a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8a86:	b081      	sub	sp, #4
    8a88:	f06f 000c 	mvn.w	r0, #12
        }
    8a8c:	b001      	add	sp, #4
    8a8e:	4770      	bx	lr

00008a90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8a90:	b082      	sub	sp, #8
    8a92:	9000      	str	r0, [sp, #0]
    8a94:	9101      	str	r1, [sp, #4]
    8a96:	2000      	movs	r0, #0
        }
    8a98:	b002      	add	sp, #8
    8a9a:	4770      	bx	lr

00008a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	f8dd c020 	ldr.w	ip, [sp, #32]
    8aa4:	9102      	str	r1, [sp, #8]
    8aa6:	9203      	str	r2, [sp, #12]
    8aa8:	9304      	str	r3, [sp, #16]
    8aaa:	f8cd c014 	str.w	ip, [sp, #20]
    8aae:	f04f 0e00 	mov.w	lr, #0
    8ab2:	f8cd e004 	str.w	lr, [sp, #4]
    8ab6:	f8cd e000 	str.w	lr, [sp]
    8aba:	f8cd e000 	str.w	lr, [sp]
    8abe:	6001      	str	r1, [r0, #0]
    8ac0:	6042      	str	r2, [r0, #4]
    8ac2:	9900      	ldr	r1, [sp, #0]
    8ac4:	9a01      	ldr	r2, [sp, #4]
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	60c2      	str	r2, [r0, #12]
    8aca:	6103      	str	r3, [r0, #16]
    8acc:	f8c0 c014 	str.w	ip, [r0, #20]
    8ad0:	b006      	add	sp, #24
    8ad2:	bd80      	pop	{r7, pc}

00008ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8ad4:	b082      	sub	sp, #8
    8ad6:	9001      	str	r0, [sp, #4]
    8ad8:	7800      	ldrb	r0, [r0, #0]
    8ada:	07c0      	lsls	r0, r0, #31
    8adc:	2800      	cmp	r0, #0
    8ade:	d004      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ae0:	e7ff      	b.n	8ae2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ae2:	2000      	movs	r0, #0
    8ae4:	f88d 0003 	strb.w	r0, [sp, #3]
    8ae8:	e003      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8aea:	2001      	movs	r0, #1
    8aec:	f88d 0003 	strb.w	r0, [sp, #3]
    8af0:	e7ff      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8af2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8af6:	b002      	add	sp, #8
    8af8:	4770      	bx	lr

00008afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	9005      	str	r0, [sp, #20]
    8afe:	9107      	str	r1, [sp, #28]
    8b00:	9208      	str	r2, [sp, #32]
    8b02:	9805      	ldr	r0, [sp, #20]
    8b04:	f1b0 0c01 	subs.w	ip, r0, #1
    8b08:	bf18      	it	ne
    8b0a:	f04f 0c01 	movne.w	ip, #1
    8b0e:	2801      	cmp	r0, #1
    8b10:	9304      	str	r3, [sp, #16]
    8b12:	9203      	str	r2, [sp, #12]
    8b14:	9102      	str	r1, [sp, #8]
    8b16:	d010      	beq.n	8b3a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8b18:	e7ff      	b.n	8b1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8b1a:	9805      	ldr	r0, [sp, #20]
    8b1c:	9006      	str	r0, [sp, #24]
    8b1e:	4668      	mov	r0, sp
    8b20:	9904      	ldr	r1, [sp, #16]
    8b22:	6001      	str	r1, [r0, #0]
    8b24:	f64b 03f4 	movw	r3, #47348	; 0xb8f4
    8b28:	f2c0 0301 	movt	r3, #1
    8b2c:	aa06      	add	r2, sp, #24
    8b2e:	9802      	ldr	r0, [sp, #8]
    8b30:	9903      	ldr	r1, [sp, #12]
    8b32:	f00c fa9f 	bl	15074 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8b36:	defe      	udf	#254	; 0xfe
    8b38:	defe      	udf	#254	; 0xfe
    8b3a:	9805      	ldr	r0, [sp, #20]
    8b3c:	2801      	cmp	r0, #1
    8b3e:	d102      	bne.n	8b46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8b40:	e7ff      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8b42:	b00a      	add	sp, #40	; 0x28
    8b44:	4770      	bx	lr
    8b46:	e7fc      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	f7ff ffc1 	bl	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8b52:	9000      	str	r0, [sp, #0]
    8b54:	e7ff      	b.n	8b56 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8b56:	2001      	movs	r0, #1
    8b58:	9900      	ldr	r1, [sp, #0]
    8b5a:	4388      	bics	r0, r1
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	b002      	add	sp, #8
    8b6a:	4770      	bx	lr

00008b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8b6c:	b081      	sub	sp, #4
    8b6e:	4601      	mov	r1, r0
    8b70:	f88d 0003 	strb.w	r0, [sp, #3]
    8b74:	b001      	add	sp, #4
    8b76:	4770      	bx	lr

00008b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8b78:	b081      	sub	sp, #4
    8b7a:	9000      	str	r0, [sp, #0]
    8b7c:	b001      	add	sp, #4
    8b7e:	4770      	bx	lr

00008b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8b80:	b580      	push	{r7, lr}
    8b82:	b08a      	sub	sp, #40	; 0x28
    8b84:	9007      	str	r0, [sp, #28]
    8b86:	9108      	str	r1, [sp, #32]
    8b88:	9209      	str	r2, [sp, #36]	; 0x24
    8b8a:	2300      	movs	r3, #0
    8b8c:	9305      	str	r3, [sp, #20]
    8b8e:	9006      	str	r0, [sp, #24]
    8b90:	9805      	ldr	r0, [sp, #20]
    8b92:	9b06      	ldr	r3, [sp, #24]
    8b94:	9104      	str	r1, [sp, #16]
    8b96:	4619      	mov	r1, r3
    8b98:	9b04      	ldr	r3, [sp, #16]
    8b9a:	9203      	str	r2, [sp, #12]
    8b9c:	461a      	mov	r2, r3
    8b9e:	9b03      	ldr	r3, [sp, #12]
    8ba0:	f000 f828 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8ba4:	9002      	str	r0, [sp, #8]
    8ba6:	9101      	str	r1, [sp, #4]
    8ba8:	e7ff      	b.n	8baa <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8baa:	9802      	ldr	r0, [sp, #8]
    8bac:	9901      	ldr	r1, [sp, #4]
    8bae:	b00a      	add	sp, #40	; 0x28
    8bb0:	bd80      	pop	{r7, pc}

00008bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8bb2:	b580      	push	{r7, lr}
    8bb4:	b08a      	sub	sp, #40	; 0x28
    8bb6:	9006      	str	r0, [sp, #24]
    8bb8:	9107      	str	r1, [sp, #28]
    8bba:	9208      	str	r2, [sp, #32]
    8bbc:	9309      	str	r3, [sp, #36]	; 0x24
    8bbe:	9005      	str	r0, [sp, #20]
    8bc0:	4610      	mov	r0, r2
    8bc2:	9104      	str	r1, [sp, #16]
    8bc4:	4619      	mov	r1, r3
    8bc6:	f008 fd74 	bl	116b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8bca:	9003      	str	r0, [sp, #12]
    8bcc:	e7ff      	b.n	8bce <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8bce:	9803      	ldr	r0, [sp, #12]
    8bd0:	9905      	ldr	r1, [sp, #20]
    8bd2:	f008 fcf5 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8bd6:	9002      	str	r0, [sp, #8]
    8bd8:	e7ff      	b.n	8bda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8bda:	9804      	ldr	r0, [sp, #16]
    8bdc:	9905      	ldr	r1, [sp, #20]
    8bde:	1a41      	subs	r1, r0, r1
    8be0:	9802      	ldr	r0, [sp, #8]
    8be2:	f000 f8b7 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8be6:	9001      	str	r0, [sp, #4]
    8be8:	9100      	str	r1, [sp, #0]
    8bea:	e7ff      	b.n	8bec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8bec:	9801      	ldr	r0, [sp, #4]
    8bee:	9900      	ldr	r1, [sp, #0]
    8bf0:	b00a      	add	sp, #40	; 0x28
    8bf2:	bd80      	pop	{r7, pc}

00008bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b08c      	sub	sp, #48	; 0x30
    8bf8:	9008      	str	r0, [sp, #32]
    8bfa:	9109      	str	r1, [sp, #36]	; 0x24
    8bfc:	920a      	str	r2, [sp, #40]	; 0x28
    8bfe:	930b      	str	r3, [sp, #44]	; 0x2c
    8c00:	4288      	cmp	r0, r1
    8c02:	9307      	str	r3, [sp, #28]
    8c04:	9206      	str	r2, [sp, #24]
    8c06:	9105      	str	r1, [sp, #20]
    8c08:	9004      	str	r0, [sp, #16]
    8c0a:	d806      	bhi.n	8c1a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8c0c:	e7ff      	b.n	8c0e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8c0e:	9806      	ldr	r0, [sp, #24]
    8c10:	9907      	ldr	r1, [sp, #28]
    8c12:	f008 fd65 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c16:	9003      	str	r0, [sp, #12]
    8c18:	e004      	b.n	8c24 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8c1a:	9804      	ldr	r0, [sp, #16]
    8c1c:	9905      	ldr	r1, [sp, #20]
    8c1e:	f00d f9cc 	bl	15fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8c22:	defe      	udf	#254	; 0xfe
    8c24:	9805      	ldr	r0, [sp, #20]
    8c26:	9903      	ldr	r1, [sp, #12]
    8c28:	4288      	cmp	r0, r1
    8c2a:	d809      	bhi.n	8c40 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8c2c:	e7ff      	b.n	8c2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8c2e:	9804      	ldr	r0, [sp, #16]
    8c30:	9905      	ldr	r1, [sp, #20]
    8c32:	9a06      	ldr	r2, [sp, #24]
    8c34:	9b07      	ldr	r3, [sp, #28]
    8c36:	f7ff ffbc 	bl	8bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8c3a:	9002      	str	r0, [sp, #8]
    8c3c:	9101      	str	r1, [sp, #4]
    8c3e:	e00a      	b.n	8c56 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8c40:	9806      	ldr	r0, [sp, #24]
    8c42:	9907      	ldr	r1, [sp, #28]
    8c44:	f008 fd4c 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c48:	9000      	str	r0, [sp, #0]
    8c4a:	e7ff      	b.n	8c4c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8c4c:	9805      	ldr	r0, [sp, #20]
    8c4e:	9900      	ldr	r1, [sp, #0]
    8c50:	f00d f991 	bl	15f76 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8c54:	defe      	udf	#254	; 0xfe
    8c56:	9802      	ldr	r0, [sp, #8]
    8c58:	9901      	ldr	r1, [sp, #4]
    8c5a:	b00c      	add	sp, #48	; 0x30
    8c5c:	bd80      	pop	{r7, pc}

00008c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c5e:	b580      	push	{r7, lr}
    8c60:	b082      	sub	sp, #8
    8c62:	9001      	str	r0, [sp, #4]
    8c64:	f00f fc46 	bl	184f4 <os_eventq_run>
    8c68:	e7ff      	b.n	8c6a <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8c6a:	2001      	movs	r0, #1
    8c6c:	b002      	add	sp, #8
    8c6e:	bd80      	pop	{r7, pc}

00008c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c70:	b580      	push	{r7, lr}
    8c72:	b084      	sub	sp, #16
    8c74:	9002      	str	r0, [sp, #8]
    8c76:	f00f fc69 	bl	1854c <os_eventq_dflt_get>
    8c7a:	4601      	mov	r1, r0
    8c7c:	9003      	str	r0, [sp, #12]
    8c7e:	9101      	str	r1, [sp, #4]
    8c80:	e7ff      	b.n	8c82 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	9902      	ldr	r1, [sp, #8]
    8c86:	6048      	str	r0, [r1, #4]
    8c88:	2200      	movs	r2, #0
    8c8a:	600a      	str	r2, [r1, #0]
    8c8c:	b004      	add	sp, #16
    8c8e:	bd80      	pop	{r7, pc}

00008c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c90:	b570      	push	{r4, r5, r6, lr}
    8c92:	b09c      	sub	sp, #112	; 0x70
    8c94:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8c98:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8c9c:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8c9e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8ca0:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8ca2:	9013      	str	r0, [sp, #76]	; 0x4c
    8ca4:	9114      	str	r1, [sp, #80]	; 0x50
    8ca6:	9215      	str	r2, [sp, #84]	; 0x54
    8ca8:	9316      	str	r3, [sp, #88]	; 0x58
    8caa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8cae:	9418      	str	r4, [sp, #96]	; 0x60
    8cb0:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8cb4:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8cb8:	9011      	str	r0, [sp, #68]	; 0x44
    8cba:	4608      	mov	r0, r1
    8cbc:	9310      	str	r3, [sp, #64]	; 0x40
    8cbe:	920f      	str	r2, [sp, #60]	; 0x3c
    8cc0:	910e      	str	r1, [sp, #56]	; 0x38
    8cc2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8cc6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8cca:	940b      	str	r4, [sp, #44]	; 0x2c
    8ccc:	950a      	str	r5, [sp, #40]	; 0x28
    8cce:	9609      	str	r6, [sp, #36]	; 0x24
    8cd0:	f7ff fe2a 	bl	8928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8cd4:	e7ff      	b.n	8cd6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8cd6:	980e      	ldr	r0, [sp, #56]	; 0x38
    8cd8:	f7ff fe08 	bl	88ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8cdc:	9008      	str	r0, [sp, #32]
    8cde:	e7ff      	b.n	8ce0 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
    8ce4:	f000 f93b 	bl	8f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8ce8:	9007      	str	r0, [sp, #28]
    8cea:	e7ff      	b.n	8cec <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8cec:	980d      	ldr	r0, [sp, #52]	; 0x34
    8cee:	b281      	uxth	r1, r0
    8cf0:	466a      	mov	r2, sp
    8cf2:	60d1      	str	r1, [r2, #12]
    8cf4:	9907      	ldr	r1, [sp, #28]
    8cf6:	6091      	str	r1, [r2, #8]
    8cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cfa:	6053      	str	r3, [r2, #4]
    8cfc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8d00:	fa5f fe8c 	uxtb.w	lr, ip
    8d04:	f8c2 e000 	str.w	lr, [r2]
    8d08:	9811      	ldr	r0, [sp, #68]	; 0x44
    8d0a:	9908      	ldr	r1, [sp, #32]
    8d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d10:	f010 f9bc 	bl	1908c <os_task_init>
    8d14:	4601      	mov	r1, r0
    8d16:	901b      	str	r0, [sp, #108]	; 0x6c
    8d18:	9106      	str	r1, [sp, #24]
    8d1a:	e7ff      	b.n	8d1c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8d1c:	9806      	ldr	r0, [sp, #24]
    8d1e:	2800      	cmp	r0, #0
    8d20:	d005      	beq.n	8d2e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8d22:	e7ff      	b.n	8d24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8d24:	9806      	ldr	r0, [sp, #24]
    8d26:	f7ff fea5 	bl	8a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8d2a:	9005      	str	r0, [sp, #20]
    8d2c:	e004      	b.n	8d38 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8d2e:	2000      	movs	r0, #0
    8d30:	9012      	str	r0, [sp, #72]	; 0x48
    8d32:	2001      	movs	r0, #1
    8d34:	9012      	str	r0, [sp, #72]	; 0x48
    8d36:	e002      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d38:	9805      	ldr	r0, [sp, #20]
    8d3a:	9012      	str	r0, [sp, #72]	; 0x48
    8d3c:	e7ff      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d40:	b01c      	add	sp, #112	; 0x70
    8d42:	bd70      	pop	{r4, r5, r6, pc}

00008d44 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8d44:	b081      	sub	sp, #4
    8d46:	9000      	str	r0, [sp, #0]
    8d48:	b001      	add	sp, #4
    8d4a:	4770      	bx	lr

00008d4c <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8d4c:	b081      	sub	sp, #4
    8d4e:	9000      	str	r0, [sp, #0]
    8d50:	b001      	add	sp, #4
    8d52:	4770      	bx	lr

00008d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8d54:	b580      	push	{r7, lr}
    8d56:	b084      	sub	sp, #16
    8d58:	9002      	str	r0, [sp, #8]
    8d5a:	9103      	str	r1, [sp, #12]
    8d5c:	f000 f993 	bl	9086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8d60:	9001      	str	r0, [sp, #4]
    8d62:	9100      	str	r1, [sp, #0]
    8d64:	e7ff      	b.n	8d66 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8d66:	9801      	ldr	r0, [sp, #4]
    8d68:	9900      	ldr	r1, [sp, #0]
    8d6a:	b004      	add	sp, #16
    8d6c:	bd80      	pop	{r7, pc}

00008d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8d6e:	b5b0      	push	{r4, r5, r7, lr}
    8d70:	b0b8      	sub	sp, #224	; 0xe0
    8d72:	902f      	str	r0, [sp, #188]	; 0xbc
    8d74:	9130      	str	r1, [sp, #192]	; 0xc0
    8d76:	9231      	str	r2, [sp, #196]	; 0xc4
    8d78:	9332      	str	r3, [sp, #200]	; 0xc8
    8d7a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d7c:	9112      	str	r1, [sp, #72]	; 0x48
    8d7e:	9311      	str	r3, [sp, #68]	; 0x44
    8d80:	9210      	str	r2, [sp, #64]	; 0x40
    8d82:	f008 fcad 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d86:	9016      	str	r0, [sp, #88]	; 0x58
    8d88:	e7ff      	b.n	8d8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8d8a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8d8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8e:	f008 fca7 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d92:	9017      	str	r0, [sp, #92]	; 0x5c
    8d94:	e7ff      	b.n	8d96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8d96:	a816      	add	r0, sp, #88	; 0x58
    8d98:	9014      	str	r0, [sp, #80]	; 0x50
    8d9a:	a817      	add	r0, sp, #92	; 0x5c
    8d9c:	9015      	str	r0, [sp, #84]	; 0x54
    8d9e:	9814      	ldr	r0, [sp, #80]	; 0x50
    8da0:	9033      	str	r0, [sp, #204]	; 0xcc
    8da2:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da4:	9134      	str	r1, [sp, #208]	; 0xd0
    8da6:	6802      	ldr	r2, [r0, #0]
    8da8:	680b      	ldr	r3, [r1, #0]
    8daa:	429a      	cmp	r2, r3
    8dac:	900f      	str	r0, [sp, #60]	; 0x3c
    8dae:	910e      	str	r1, [sp, #56]	; 0x38
    8db0:	d106      	bne.n	8dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8db2:	e7ff      	b.n	8db4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8db4:	9810      	ldr	r0, [sp, #64]	; 0x40
    8db6:	9911      	ldr	r1, [sp, #68]	; 0x44
    8db8:	f008 fc9a 	bl	116f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8dbc:	900d      	str	r0, [sp, #52]	; 0x34
    8dbe:	e072      	b.n	8ea6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8dc0:	f64b 1058 	movw	r0, #47448	; 0xb958
    8dc4:	f2c0 0001 	movt	r0, #1
    8dc8:	6801      	ldr	r1, [r0, #0]
    8dca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dcc:	9027      	str	r0, [sp, #156]	; 0x9c
    8dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8dd0:	9228      	str	r2, [sp, #160]	; 0xa0
    8dd2:	f64b 1398 	movw	r3, #47512	; 0xb998
    8dd6:	f2c0 0301 	movt	r3, #1
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	f64b 1c9c 	movw	ip, #47516	; 0xb99c
    8de0:	f2c0 0c01 	movt	ip, #1
    8de4:	f8dc c000 	ldr.w	ip, [ip]
    8de8:	46ee      	mov	lr, sp
    8dea:	2400      	movs	r4, #0
    8dec:	f8ce 4000 	str.w	r4, [lr]
    8df0:	a829      	add	r0, sp, #164	; 0xa4
    8df2:	2201      	movs	r2, #1
    8df4:	910c      	str	r1, [sp, #48]	; 0x30
    8df6:	4619      	mov	r1, r3
    8df8:	4663      	mov	r3, ip
    8dfa:	f7ff fe4f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8dfe:	e7ff      	b.n	8e00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8e00:	a827      	add	r0, sp, #156	; 0x9c
    8e02:	9024      	str	r0, [sp, #144]	; 0x90
    8e04:	a828      	add	r0, sp, #160	; 0xa0
    8e06:	9025      	str	r0, [sp, #148]	; 0x94
    8e08:	a829      	add	r0, sp, #164	; 0xa4
    8e0a:	9026      	str	r0, [sp, #152]	; 0x98
    8e0c:	9824      	ldr	r0, [sp, #144]	; 0x90
    8e0e:	9035      	str	r0, [sp, #212]	; 0xd4
    8e10:	9925      	ldr	r1, [sp, #148]	; 0x94
    8e12:	9136      	str	r1, [sp, #216]	; 0xd8
    8e14:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e16:	9237      	str	r2, [sp, #220]	; 0xdc
    8e18:	f641 630d 	movw	r3, #7693	; 0x1e0d
    8e1c:	f2c0 0301 	movt	r3, #1
    8e20:	910b      	str	r1, [sp, #44]	; 0x2c
    8e22:	4619      	mov	r1, r3
    8e24:	920a      	str	r2, [sp, #40]	; 0x28
    8e26:	f008 ffff 	bl	11e28 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e2a:	9009      	str	r0, [sp, #36]	; 0x24
    8e2c:	9108      	str	r1, [sp, #32]
    8e2e:	e7ff      	b.n	8e30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8e30:	f641 610d 	movw	r1, #7693	; 0x1e0d
    8e34:	f2c0 0101 	movt	r1, #1
    8e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e3a:	f008 fff5 	bl	11e28 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e3e:	9007      	str	r0, [sp, #28]
    8e40:	9106      	str	r1, [sp, #24]
    8e42:	e7ff      	b.n	8e44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8e44:	f245 619f 	movw	r1, #22175	; 0x569f
    8e48:	f2c0 0101 	movt	r1, #1
    8e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e4e:	f000 fac3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8e52:	9005      	str	r0, [sp, #20]
    8e54:	9104      	str	r1, [sp, #16]
    8e56:	e7ff      	b.n	8e58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8e58:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e5a:	901e      	str	r0, [sp, #120]	; 0x78
    8e5c:	9908      	ldr	r1, [sp, #32]
    8e5e:	911f      	str	r1, [sp, #124]	; 0x7c
    8e60:	9a07      	ldr	r2, [sp, #28]
    8e62:	9220      	str	r2, [sp, #128]	; 0x80
    8e64:	9b06      	ldr	r3, [sp, #24]
    8e66:	9321      	str	r3, [sp, #132]	; 0x84
    8e68:	f8dd c014 	ldr.w	ip, [sp, #20]
    8e6c:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8e70:	f8dd e010 	ldr.w	lr, [sp, #16]
    8e74:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8e78:	466c      	mov	r4, sp
    8e7a:	2503      	movs	r5, #3
    8e7c:	6025      	str	r5, [r4, #0]
    8e7e:	a818      	add	r0, sp, #96	; 0x60
    8e80:	ab1e      	add	r3, sp, #120	; 0x78
    8e82:	990c      	ldr	r1, [sp, #48]	; 0x30
    8e84:	462a      	mov	r2, r5
    8e86:	f7ff fe09 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8e8a:	e7ff      	b.n	8e8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8e8c:	f64b 10ec 	movw	r0, #47596	; 0xb9ec
    8e90:	f2c0 0001 	movt	r0, #1
    8e94:	f00c f915 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8e98:	9003      	str	r0, [sp, #12]
    8e9a:	e7ff      	b.n	8e9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8e9c:	a818      	add	r0, sp, #96	; 0x60
    8e9e:	9903      	ldr	r1, [sp, #12]
    8ea0:	f00c f94c 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8ea4:	defe      	udf	#254	; 0xfe
    8ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8ea8:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eaa:	f008 fc02 	bl	116b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8eae:	9002      	str	r0, [sp, #8]
    8eb0:	e7ff      	b.n	8eb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8eb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eb6:	f008 fc13 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8eba:	9001      	str	r0, [sp, #4]
    8ebc:	e7ff      	b.n	8ebe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ec0:	9902      	ldr	r1, [sp, #8]
    8ec2:	9a01      	ldr	r2, [sp, #4]
    8ec4:	f008 fa18 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8ec8:	e7ff      	b.n	8eca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8eca:	b038      	add	sp, #224	; 0xe0
    8ecc:	bdb0      	pop	{r4, r5, r7, pc}

00008ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8ece:	b580      	push	{r7, lr}
    8ed0:	b086      	sub	sp, #24
    8ed2:	9003      	str	r0, [sp, #12]
    8ed4:	9104      	str	r1, [sp, #16]
    8ed6:	9205      	str	r2, [sp, #20]
    8ed8:	9002      	str	r0, [sp, #8]
    8eda:	4610      	mov	r0, r2
    8edc:	9a02      	ldr	r2, [sp, #8]
    8ede:	9101      	str	r1, [sp, #4]
    8ee0:	4611      	mov	r1, r2
    8ee2:	9a01      	ldr	r2, [sp, #4]
    8ee4:	f000 f861 	bl	8faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ee8:	9000      	str	r0, [sp, #0]
    8eea:	e7ff      	b.n	8eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8eec:	9800      	ldr	r0, [sp, #0]
    8eee:	b006      	add	sp, #24
    8ef0:	bd80      	pop	{r7, pc}

00008ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ef2:	b580      	push	{r7, lr}
    8ef4:	b08e      	sub	sp, #56	; 0x38
    8ef6:	9009      	str	r0, [sp, #36]	; 0x24
    8ef8:	910a      	str	r1, [sp, #40]	; 0x28
    8efa:	9005      	str	r0, [sp, #20]
    8efc:	9104      	str	r1, [sp, #16]
    8efe:	f008 fbef 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f02:	9003      	str	r0, [sp, #12]
    8f04:	e7ff      	b.n	8f06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8f06:	2101      	movs	r1, #1
    8f08:	9803      	ldr	r0, [sp, #12]
    8f0a:	f000 fa7a 	bl	9402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8f0e:	9002      	str	r0, [sp, #8]
    8f10:	9101      	str	r1, [sp, #4]
    8f12:	e7ff      	b.n	8f14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8f14:	9802      	ldr	r0, [sp, #8]
    8f16:	9901      	ldr	r1, [sp, #4]
    8f18:	f000 f97c 	bl	9214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8f1c:	9108      	str	r1, [sp, #32]
    8f1e:	9007      	str	r0, [sp, #28]
    8f20:	e7ff      	b.n	8f22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8f22:	9807      	ldr	r0, [sp, #28]
    8f24:	2800      	cmp	r0, #0
    8f26:	d001      	beq.n	8f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8f28:	e7ff      	b.n	8f2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8f2a:	e00c      	b.n	8f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8f2c:	9808      	ldr	r0, [sp, #32]
    8f2e:	900c      	str	r0, [sp, #48]	; 0x30
    8f30:	900d      	str	r0, [sp, #52]	; 0x34
    8f32:	9905      	ldr	r1, [sp, #20]
    8f34:	9000      	str	r0, [sp, #0]
    8f36:	4608      	mov	r0, r1
    8f38:	9904      	ldr	r1, [sp, #16]
    8f3a:	9a00      	ldr	r2, [sp, #0]
    8f3c:	f7ff ffc7 	bl	8ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8f40:	9006      	str	r0, [sp, #24]
    8f42:	e00b      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8f44:	defe      	udf	#254	; 0xfe
    8f46:	f008 f8c3 	bl	110d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8f4a:	e002      	b.n	8f52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8f4c:	9806      	ldr	r0, [sp, #24]
    8f4e:	b00e      	add	sp, #56	; 0x38
    8f50:	bd80      	pop	{r7, pc}
    8f52:	f000 f959 	bl	9208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8f56:	9006      	str	r0, [sp, #24]
    8f58:	e7ff      	b.n	8f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8f5a:	e7f7      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8f5c:	e7f6      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    8f5e:	b082      	sub	sp, #8
    8f60:	9000      	str	r0, [sp, #0]
    8f62:	9101      	str	r1, [sp, #4]
    8f64:	b002      	add	sp, #8
    8f66:	4770      	bx	lr

00008f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    8f68:	b580      	push	{r7, lr}
    8f6a:	b088      	sub	sp, #32
    8f6c:	9005      	str	r0, [sp, #20]
    8f6e:	9106      	str	r1, [sp, #24]
    8f70:	9207      	str	r2, [sp, #28]
    8f72:	9004      	str	r0, [sp, #16]
    8f74:	4610      	mov	r0, r2
    8f76:	9a04      	ldr	r2, [sp, #16]
    8f78:	9103      	str	r1, [sp, #12]
    8f7a:	4611      	mov	r1, r2
    8f7c:	9a03      	ldr	r2, [sp, #12]
    8f7e:	f7ff fdff 	bl	8b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    8f82:	9002      	str	r0, [sp, #8]
    8f84:	9101      	str	r1, [sp, #4]
    8f86:	e7ff      	b.n	8f88 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    8f88:	9802      	ldr	r0, [sp, #8]
    8f8a:	9901      	ldr	r1, [sp, #4]
    8f8c:	b008      	add	sp, #32
    8f8e:	bd80      	pop	{r7, pc}

00008f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8f90:	b580      	push	{r7, lr}
    8f92:	b084      	sub	sp, #16
    8f94:	9002      	str	r0, [sp, #8]
    8f96:	9103      	str	r1, [sp, #12]
    8f98:	f008 f857 	bl	1104a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8f9c:	9001      	str	r0, [sp, #4]
    8f9e:	9100      	str	r1, [sp, #0]
    8fa0:	e7ff      	b.n	8fa2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8fa2:	9801      	ldr	r0, [sp, #4]
    8fa4:	9900      	ldr	r1, [sp, #0]
    8fa6:	b004      	add	sp, #16
    8fa8:	bd80      	pop	{r7, pc}

00008faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8faa:	b580      	push	{r7, lr}
    8fac:	b08a      	sub	sp, #40	; 0x28
    8fae:	9007      	str	r0, [sp, #28]
    8fb0:	9108      	str	r1, [sp, #32]
    8fb2:	9209      	str	r2, [sp, #36]	; 0x24
    8fb4:	9005      	str	r0, [sp, #20]
    8fb6:	4608      	mov	r0, r1
    8fb8:	9104      	str	r1, [sp, #16]
    8fba:	4611      	mov	r1, r2
    8fbc:	9203      	str	r2, [sp, #12]
    8fbe:	f008 fb8f 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9002      	str	r0, [sp, #8]
    8fc4:	e7ff      	b.n	8fc6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8fc6:	9805      	ldr	r0, [sp, #20]
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	4288      	cmp	r0, r1
    8fcc:	d303      	bcc.n	8fd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8fce:	e7ff      	b.n	8fd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8fd0:	2000      	movs	r0, #0
    8fd2:	9006      	str	r0, [sp, #24]
    8fd4:	e009      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fd6:	9805      	ldr	r0, [sp, #20]
    8fd8:	9904      	ldr	r1, [sp, #16]
    8fda:	9a03      	ldr	r2, [sp, #12]
    8fdc:	f008 fbac 	bl	11738 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8fe0:	9001      	str	r0, [sp, #4]
    8fe2:	e7ff      	b.n	8fe4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8fe4:	9801      	ldr	r0, [sp, #4]
    8fe6:	9006      	str	r0, [sp, #24]
    8fe8:	e7ff      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fea:	9806      	ldr	r0, [sp, #24]
    8fec:	b00a      	add	sp, #40	; 0x28
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b08a      	sub	sp, #40	; 0x28
    8ff4:	9004      	str	r0, [sp, #16]
    8ff6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8ff8:	9003      	str	r0, [sp, #12]
    8ffa:	9102      	str	r1, [sp, #8]
    8ffc:	f000 f86e 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9000:	4601      	mov	r1, r0
    9002:	9006      	str	r0, [sp, #24]
    9004:	9101      	str	r1, [sp, #4]
    9006:	e7ff      	b.n	9008 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9008:	9803      	ldr	r0, [sp, #12]
    900a:	9902      	ldr	r1, [sp, #8]
    900c:	f000 f850 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9010:	9000      	str	r0, [sp, #0]
    9012:	e7ff      	b.n	9014 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    9014:	9800      	ldr	r0, [sp, #0]
    9016:	9007      	str	r0, [sp, #28]
    9018:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    901a:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    901c:	4608      	mov	r0, r1
    901e:	f000 f809 	bl	9034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    9022:	9009      	str	r0, [sp, #36]	; 0x24
    9024:	e7ff      	b.n	9026 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    9026:	9801      	ldr	r0, [sp, #4]
    9028:	9900      	ldr	r1, [sp, #0]
    902a:	f00d ff21 	bl	16e70 <console_buffer>
    902e:	e7ff      	b.n	9030 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9030:	b00a      	add	sp, #40	; 0x28
    9032:	bd80      	pop	{r7, pc}

00009034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    9034:	b081      	sub	sp, #4
    9036:	9000      	str	r0, [sp, #0]
    9038:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    903a:	b001      	add	sp, #4
    903c:	4770      	bx	lr

0000903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    903e:	b580      	push	{r7, lr}
    9040:	b086      	sub	sp, #24
    9042:	9004      	str	r0, [sp, #16]
    9044:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    9046:	9003      	str	r0, [sp, #12]
    9048:	9102      	str	r1, [sp, #8]
    904a:	f000 f847 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    904e:	9001      	str	r0, [sp, #4]
    9050:	e7ff      	b.n	9052 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9052:	9803      	ldr	r0, [sp, #12]
    9054:	9902      	ldr	r1, [sp, #8]
    9056:	f000 f82b 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    905a:	9000      	str	r0, [sp, #0]
    905c:	e7ff      	b.n	905e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    905e:	9801      	ldr	r0, [sp, #4]
    9060:	9900      	ldr	r1, [sp, #0]
    9062:	f00d ff05 	bl	16e70 <console_buffer>
    9066:	e7ff      	b.n	9068 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9068:	b006      	add	sp, #24
    906a:	bd80      	pop	{r7, pc}

0000906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9072:	f00d ff6d 	bl	16f50 <console_printint>
    9076:	e7ff      	b.n	9078 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9078:	b002      	add	sp, #8
    907a:	bd80      	pop	{r7, pc}

0000907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    907c:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    907e:	f00d fecf 	bl	16e20 <console_flush>
    9082:	e7ff      	b.n	9084 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    9084:	bd80      	pop	{r7, pc}

00009086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    9086:	b086      	sub	sp, #24
    9088:	9004      	str	r0, [sp, #16]
    908a:	9105      	str	r1, [sp, #20]
    908c:	9002      	str	r0, [sp, #8]
    908e:	9103      	str	r1, [sp, #12]
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9903      	ldr	r1, [sp, #12]
    9094:	9000      	str	r0, [sp, #0]
    9096:	9101      	str	r1, [sp, #4]
    9098:	9800      	ldr	r0, [sp, #0]
    909a:	9901      	ldr	r1, [sp, #4]
    909c:	b006      	add	sp, #24
    909e:	4770      	bx	lr

000090a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    90a0:	b082      	sub	sp, #8
    90a2:	460a      	mov	r2, r1
    90a4:	9000      	str	r0, [sp, #0]
    90a6:	f88d 1007 	strb.w	r1, [sp, #7]
    90aa:	7001      	strb	r1, [r0, #0]
    90ac:	b002      	add	sp, #8
    90ae:	4770      	bx	lr

000090b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    90b0:	b580      	push	{r7, lr}
    90b2:	b08a      	sub	sp, #40	; 0x28
    90b4:	9004      	str	r0, [sp, #16]
    90b6:	9105      	str	r1, [sp, #20]
    90b8:	9008      	str	r0, [sp, #32]
    90ba:	9109      	str	r1, [sp, #36]	; 0x24
    90bc:	9006      	str	r0, [sp, #24]
    90be:	9107      	str	r1, [sp, #28]
    90c0:	9806      	ldr	r0, [sp, #24]
    90c2:	9907      	ldr	r1, [sp, #28]
    90c4:	9003      	str	r0, [sp, #12]
    90c6:	9102      	str	r1, [sp, #8]
    90c8:	e7ff      	b.n	90ca <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    90ca:	9803      	ldr	r0, [sp, #12]
    90cc:	9902      	ldr	r1, [sp, #8]
    90ce:	f008 fb07 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90d2:	9001      	str	r0, [sp, #4]
    90d4:	e7ff      	b.n	90d6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    90d6:	9801      	ldr	r0, [sp, #4]
    90d8:	b00a      	add	sp, #40	; 0x28
    90da:	bd80      	pop	{r7, pc}

000090dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    90dc:	b082      	sub	sp, #8
    90de:	9000      	str	r0, [sp, #0]
    90e0:	9101      	str	r1, [sp, #4]
    90e2:	b002      	add	sp, #8
    90e4:	4770      	bx	lr

000090e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    90e6:	b580      	push	{r7, lr}
    90e8:	b084      	sub	sp, #16
    90ea:	9002      	str	r0, [sp, #8]
    90ec:	9103      	str	r1, [sp, #12]
    90ee:	6800      	ldr	r0, [r0, #0]
    90f0:	f000 f845 	bl	917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    90f4:	9001      	str	r0, [sp, #4]
    90f6:	e7ff      	b.n	90f8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    90f8:	9801      	ldr	r0, [sp, #4]
    90fa:	f000 0001 	and.w	r0, r0, #1
    90fe:	b004      	add	sp, #16
    9100:	bd80      	pop	{r7, pc}

00009102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    9102:	b087      	sub	sp, #28
    9104:	9000      	str	r0, [sp, #0]
    9106:	9101      	str	r1, [sp, #4]
    9108:	2000      	movs	r0, #0
    910a:	f88d 0013 	strb.w	r0, [sp, #19]
    910e:	f88d 0012 	strb.w	r0, [sp, #18]
    9112:	2001      	movs	r0, #1
    9114:	f88d 0013 	strb.w	r0, [sp, #19]
    9118:	f88d 0012 	strb.w	r0, [sp, #18]
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	2800      	cmp	r0, #0
    9120:	d001      	beq.n	9126 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    9122:	e7ff      	b.n	9124 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    9124:	e006      	b.n	9134 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    9126:	2000      	movs	r0, #0
    9128:	f88d 0012 	strb.w	r0, [sp, #18]
    912c:	2001      	movs	r0, #1
    912e:	9002      	str	r0, [sp, #8]
    9130:	e008      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9132:	defe      	udf	#254	; 0xfe
    9134:	2000      	movs	r0, #0
    9136:	f88d 0013 	strb.w	r0, [sp, #19]
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	9106      	str	r1, [sp, #24]
    913e:	9103      	str	r1, [sp, #12]
    9140:	9002      	str	r0, [sp, #8]
    9142:	e7ff      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9144:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9148:	07c0      	lsls	r0, r0, #31
    914a:	2800      	cmp	r0, #0
    914c:	d104      	bne.n	9158 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    914e:	e7ff      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9150:	9800      	ldr	r0, [sp, #0]
    9152:	2801      	cmp	r0, #1
    9154:	d008      	beq.n	9168 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    9156:	e011      	b.n	917c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9158:	2000      	movs	r0, #0
    915a:	f88d 0012 	strb.w	r0, [sp, #18]
    915e:	e7f7      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9160:	9802      	ldr	r0, [sp, #8]
    9162:	9903      	ldr	r1, [sp, #12]
    9164:	b007      	add	sp, #28
    9166:	4770      	bx	lr
    9168:	f89d 0013 	ldrb.w	r0, [sp, #19]
    916c:	07c0      	lsls	r0, r0, #31
    916e:	2800      	cmp	r0, #0
    9170:	d0f6      	beq.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9172:	e7ff      	b.n	9174 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    9174:	2000      	movs	r0, #0
    9176:	f88d 0013 	strb.w	r0, [sp, #19]
    917a:	e7f1      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    917c:	e7f0      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    917e:	b580      	push	{r7, lr}
    9180:	b08e      	sub	sp, #56	; 0x38
    9182:	900b      	str	r0, [sp, #44]	; 0x2c
    9184:	910c      	str	r1, [sp, #48]	; 0x30
    9186:	9003      	str	r0, [sp, #12]
    9188:	9803      	ldr	r0, [sp, #12]
    918a:	6800      	ldr	r0, [r0, #0]
    918c:	2800      	cmp	r0, #0
    918e:	4602      	mov	r2, r0
    9190:	bf18      	it	ne
    9192:	2201      	movne	r2, #1
    9194:	2800      	cmp	r0, #0
    9196:	9101      	str	r1, [sp, #4]
    9198:	d00f      	beq.n	91ba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    919a:	e7ff      	b.n	919c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    919c:	9803      	ldr	r0, [sp, #12]
    919e:	900d      	str	r0, [sp, #52]	; 0x34
    91a0:	f64b 12fc 	movw	r2, #47612	; 0xb9fc
    91a4:	f2c0 0201 	movt	r2, #1
    91a8:	a907      	add	r1, sp, #28
    91aa:	2304      	movs	r3, #4
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	4608      	mov	r0, r1
    91b0:	9901      	ldr	r1, [sp, #4]
    91b2:	f00c fe36 	bl	15e22 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91b6:	e011      	b.n	91dc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    91b8:	defe      	udf	#254	; 0xfe
    91ba:	f64b 2200 	movw	r2, #47616	; 0xba00
    91be:	f2c0 0201 	movt	r2, #1
    91c2:	a804      	add	r0, sp, #16
    91c4:	2304      	movs	r3, #4
    91c6:	9901      	ldr	r1, [sp, #4]
    91c8:	f00c fe2b 	bl	15e22 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91cc:	e7ff      	b.n	91ce <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    91ce:	a804      	add	r0, sp, #16
    91d0:	f00c f944 	bl	1545c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91d4:	f88d 000b 	strb.w	r0, [sp, #11]
    91d8:	e7ff      	b.n	91da <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    91da:	e011      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	900a      	str	r0, [sp, #40]	; 0x28
    91e0:	f64b 2204 	movw	r2, #47620	; 0xba04
    91e4:	f2c0 0201 	movt	r2, #1
    91e8:	a807      	add	r0, sp, #28
    91ea:	a90a      	add	r1, sp, #40	; 0x28
    91ec:	f00c f8cd 	bl	1538a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    91f0:	e7ff      	b.n	91f2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    91f2:	a807      	add	r0, sp, #28
    91f4:	f00c f932 	bl	1545c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91f8:	f88d 000b 	strb.w	r0, [sp, #11]
    91fc:	e7ff      	b.n	91fe <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    91fe:	e7ff      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9200:	f89d 000b 	ldrb.w	r0, [sp, #11]
    9204:	b00e      	add	sp, #56	; 0x38
    9206:	bd80      	pop	{r7, pc}

00009208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9208:	b082      	sub	sp, #8
    920a:	2000      	movs	r0, #0
    920c:	9000      	str	r0, [sp, #0]
    920e:	9800      	ldr	r0, [sp, #0]
    9210:	b002      	add	sp, #8
    9212:	4770      	bx	lr

00009214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	9002      	str	r0, [sp, #8]
    921a:	9103      	str	r1, [sp, #12]
    921c:	f7ff ff71 	bl	9102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9220:	9001      	str	r0, [sp, #4]
    9222:	9100      	str	r1, [sp, #0]
    9224:	e7ff      	b.n	9226 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    9226:	9801      	ldr	r0, [sp, #4]
    9228:	9900      	ldr	r1, [sp, #0]
    922a:	b004      	add	sp, #16
    922c:	bd80      	pop	{r7, pc}

0000922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    922e:	b580      	push	{r7, lr}
    9230:	b094      	sub	sp, #80	; 0x50
    9232:	9008      	str	r0, [sp, #32]
    9234:	9109      	str	r1, [sp, #36]	; 0x24
    9236:	6802      	ldr	r2, [r0, #0]
    9238:	2a00      	cmp	r2, #0
    923a:	bf18      	it	ne
    923c:	2201      	movne	r2, #1
    923e:	f04f 0300 	mov.w	r3, #0
    9242:	930b      	str	r3, [sp, #44]	; 0x2c
    9244:	920a      	str	r2, [sp, #40]	; 0x28
    9246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    924a:	9104      	str	r1, [sp, #16]
    924c:	9003      	str	r0, [sp, #12]
    924e:	9202      	str	r2, [sp, #8]
    9250:	e7ff      	b.n	9252 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9252:	9802      	ldr	r0, [sp, #8]
    9254:	9902      	ldr	r1, [sp, #8]
    9256:	910d      	str	r1, [sp, #52]	; 0x34
    9258:	9a04      	ldr	r2, [sp, #16]
    925a:	6813      	ldr	r3, [r2, #0]
    925c:	2b00      	cmp	r3, #0
    925e:	bf18      	it	ne
    9260:	2301      	movne	r3, #1
    9262:	f04f 0c00 	mov.w	ip, #0
    9266:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    926a:	930e      	str	r3, [sp, #56]	; 0x38
    926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    926e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9272:	9001      	str	r0, [sp, #4]
    9274:	9300      	str	r3, [sp, #0]
    9276:	e7ff      	b.n	9278 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9278:	9800      	ldr	r0, [sp, #0]
    927a:	9011      	str	r0, [sp, #68]	; 0x44
    927c:	9901      	ldr	r1, [sp, #4]
    927e:	4281      	cmp	r1, r0
    9280:	d104      	bne.n	928c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9282:	e7ff      	b.n	9284 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    9284:	2001      	movs	r0, #1
    9286:	f88d 0017 	strb.w	r0, [sp, #23]
    928a:	e003      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    928c:	2000      	movs	r0, #0
    928e:	f88d 0017 	strb.w	r0, [sp, #23]
    9292:	e7ff      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9294:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9298:	07c0      	lsls	r0, r0, #31
    929a:	2800      	cmp	r0, #0
    929c:	d104      	bne.n	92a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    929e:	e7ff      	b.n	92a0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    92a0:	2000      	movs	r0, #0
    92a2:	f88d 0016 	strb.w	r0, [sp, #22]
    92a6:	e01c      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92a8:	9803      	ldr	r0, [sp, #12]
    92aa:	9006      	str	r0, [sp, #24]
    92ac:	9904      	ldr	r1, [sp, #16]
    92ae:	9107      	str	r1, [sp, #28]
    92b0:	9a06      	ldr	r2, [sp, #24]
    92b2:	6812      	ldr	r2, [r2, #0]
    92b4:	2a00      	cmp	r2, #0
    92b6:	d104      	bne.n	92c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    92b8:	e7ff      	b.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ba:	2001      	movs	r0, #1
    92bc:	f88d 0016 	strb.w	r0, [sp, #22]
    92c0:	e00e      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92c2:	9807      	ldr	r0, [sp, #28]
    92c4:	6800      	ldr	r0, [r0, #0]
    92c6:	2800      	cmp	r0, #0
    92c8:	d0f7      	beq.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ca:	e7ff      	b.n	92cc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    92cc:	9806      	ldr	r0, [sp, #24]
    92ce:	9012      	str	r0, [sp, #72]	; 0x48
    92d0:	9907      	ldr	r1, [sp, #28]
    92d2:	9113      	str	r1, [sp, #76]	; 0x4c
    92d4:	f008 ff37 	bl	12146 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    92d8:	f88d 0016 	strb.w	r0, [sp, #22]
    92dc:	e7ff      	b.n	92de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    92de:	e7ff      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92e0:	e7ff      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    92e6:	b014      	add	sp, #80	; 0x50
    92e8:	bd80      	pop	{r7, pc}

000092ea <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	9002      	str	r0, [sp, #8]
    92f0:	9103      	str	r1, [sp, #12]
    92f2:	6800      	ldr	r0, [r0, #0]
    92f4:	f008 feb9 	bl	1206a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    92f8:	9001      	str	r0, [sp, #4]
    92fa:	e7ff      	b.n	92fc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    92fc:	9801      	ldr	r0, [sp, #4]
    92fe:	f000 0001 	and.w	r0, r0, #1
    9302:	b004      	add	sp, #16
    9304:	bd80      	pop	{r7, pc}

00009306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    9306:	b580      	push	{r7, lr}
    9308:	b084      	sub	sp, #16
    930a:	9002      	str	r0, [sp, #8]
    930c:	9103      	str	r1, [sp, #12]
    930e:	6800      	ldr	r0, [r0, #0]
    9310:	f008 fe74 	bl	11ffc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    9314:	9001      	str	r0, [sp, #4]
    9316:	e7ff      	b.n	9318 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9318:	9801      	ldr	r0, [sp, #4]
    931a:	f000 0001 	and.w	r0, r0, #1
    931e:	b004      	add	sp, #16
    9320:	bd80      	pop	{r7, pc}

00009322 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    9322:	b580      	push	{r7, lr}
    9324:	b084      	sub	sp, #16
    9326:	9002      	str	r0, [sp, #8]
    9328:	9103      	str	r1, [sp, #12]
    932a:	6800      	ldr	r0, [r0, #0]
    932c:	f7ff ffeb 	bl	9306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9330:	9001      	str	r0, [sp, #4]
    9332:	e7ff      	b.n	9334 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    9334:	9801      	ldr	r0, [sp, #4]
    9336:	f000 0001 	and.w	r0, r0, #1
    933a:	b004      	add	sp, #16
    933c:	bd80      	pop	{r7, pc}

0000933e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    933e:	b580      	push	{r7, lr}
    9340:	b084      	sub	sp, #16
    9342:	9002      	str	r0, [sp, #8]
    9344:	9103      	str	r1, [sp, #12]
    9346:	6800      	ldr	r0, [r0, #0]
    9348:	f008 fec6 	bl	120d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    934c:	9001      	str	r0, [sp, #4]
    934e:	e7ff      	b.n	9350 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9350:	9801      	ldr	r0, [sp, #4]
    9352:	f000 0001 	and.w	r0, r0, #1
    9356:	b004      	add	sp, #16
    9358:	bd80      	pop	{r7, pc}

0000935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    935a:	b089      	sub	sp, #36	; 0x24
    935c:	9005      	str	r0, [sp, #20]
    935e:	9106      	str	r1, [sp, #24]
    9360:	9107      	str	r1, [sp, #28]
    9362:	9907      	ldr	r1, [sp, #28]
    9364:	9002      	str	r0, [sp, #8]
    9366:	9101      	str	r1, [sp, #4]
    9368:	e7ff      	b.n	936a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    936a:	9802      	ldr	r0, [sp, #8]
    936c:	9008      	str	r0, [sp, #32]
    936e:	9908      	ldr	r1, [sp, #32]
    9370:	9100      	str	r1, [sp, #0]
    9372:	e7ff      	b.n	9374 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    9374:	9800      	ldr	r0, [sp, #0]
    9376:	9003      	str	r0, [sp, #12]
    9378:	9901      	ldr	r1, [sp, #4]
    937a:	9104      	str	r1, [sp, #16]
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	9904      	ldr	r1, [sp, #16]
    9380:	b009      	add	sp, #36	; 0x24
    9382:	4770      	bx	lr

00009384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    9384:	b089      	sub	sp, #36	; 0x24
    9386:	9005      	str	r0, [sp, #20]
    9388:	9106      	str	r1, [sp, #24]
    938a:	9107      	str	r1, [sp, #28]
    938c:	9907      	ldr	r1, [sp, #28]
    938e:	9002      	str	r0, [sp, #8]
    9390:	9101      	str	r1, [sp, #4]
    9392:	e7ff      	b.n	9394 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    9394:	9802      	ldr	r0, [sp, #8]
    9396:	9008      	str	r0, [sp, #32]
    9398:	9908      	ldr	r1, [sp, #32]
    939a:	9100      	str	r1, [sp, #0]
    939c:	e7ff      	b.n	939e <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    939e:	9800      	ldr	r0, [sp, #0]
    93a0:	9003      	str	r0, [sp, #12]
    93a2:	9901      	ldr	r1, [sp, #4]
    93a4:	9104      	str	r1, [sp, #16]
    93a6:	9803      	ldr	r0, [sp, #12]
    93a8:	9904      	ldr	r1, [sp, #16]
    93aa:	b009      	add	sp, #36	; 0x24
    93ac:	4770      	bx	lr

000093ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    93ae:	b089      	sub	sp, #36	; 0x24
    93b0:	9005      	str	r0, [sp, #20]
    93b2:	9106      	str	r1, [sp, #24]
    93b4:	9107      	str	r1, [sp, #28]
    93b6:	9907      	ldr	r1, [sp, #28]
    93b8:	9002      	str	r0, [sp, #8]
    93ba:	9101      	str	r1, [sp, #4]
    93bc:	e7ff      	b.n	93be <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    93be:	9802      	ldr	r0, [sp, #8]
    93c0:	9008      	str	r0, [sp, #32]
    93c2:	9908      	ldr	r1, [sp, #32]
    93c4:	9100      	str	r1, [sp, #0]
    93c6:	e7ff      	b.n	93c8 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    93c8:	9800      	ldr	r0, [sp, #0]
    93ca:	9003      	str	r0, [sp, #12]
    93cc:	9901      	ldr	r1, [sp, #4]
    93ce:	9104      	str	r1, [sp, #16]
    93d0:	9803      	ldr	r0, [sp, #12]
    93d2:	9904      	ldr	r1, [sp, #16]
    93d4:	b009      	add	sp, #36	; 0x24
    93d6:	4770      	bx	lr

000093d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    93d8:	b089      	sub	sp, #36	; 0x24
    93da:	9005      	str	r0, [sp, #20]
    93dc:	9106      	str	r1, [sp, #24]
    93de:	9107      	str	r1, [sp, #28]
    93e0:	9907      	ldr	r1, [sp, #28]
    93e2:	9002      	str	r0, [sp, #8]
    93e4:	9101      	str	r1, [sp, #4]
    93e6:	e7ff      	b.n	93e8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    93e8:	9802      	ldr	r0, [sp, #8]
    93ea:	9008      	str	r0, [sp, #32]
    93ec:	9908      	ldr	r1, [sp, #32]
    93ee:	9100      	str	r1, [sp, #0]
    93f0:	e7ff      	b.n	93f2 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    93f2:	9800      	ldr	r0, [sp, #0]
    93f4:	9003      	str	r0, [sp, #12]
    93f6:	9901      	ldr	r1, [sp, #4]
    93f8:	9104      	str	r1, [sp, #16]
    93fa:	9803      	ldr	r0, [sp, #12]
    93fc:	9904      	ldr	r1, [sp, #16]
    93fe:	b009      	add	sp, #36	; 0x24
    9400:	4770      	bx	lr

00009402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9402:	b580      	push	{r7, lr}
    9404:	b088      	sub	sp, #32
    9406:	9004      	str	r0, [sp, #16]
    9408:	9105      	str	r1, [sp, #20]
    940a:	f000 f819 	bl	9440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    940e:	9001      	str	r0, [sp, #4]
    9410:	9100      	str	r1, [sp, #0]
    9412:	e7ff      	b.n	9414 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    9414:	9801      	ldr	r0, [sp, #4]
    9416:	9006      	str	r0, [sp, #24]
    9418:	9900      	ldr	r1, [sp, #0]
    941a:	f001 0201 	and.w	r2, r1, #1
    941e:	f88d 201f 	strb.w	r2, [sp, #31]
    9422:	2a00      	cmp	r2, #0
    9424:	d105      	bne.n	9432 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    9426:	e7ff      	b.n	9428 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9428:	9801      	ldr	r0, [sp, #4]
    942a:	9003      	str	r0, [sp, #12]
    942c:	2101      	movs	r1, #1
    942e:	9102      	str	r1, [sp, #8]
    9430:	e002      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9432:	2000      	movs	r0, #0
    9434:	9002      	str	r0, [sp, #8]
    9436:	e7ff      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9438:	9802      	ldr	r0, [sp, #8]
    943a:	9903      	ldr	r1, [sp, #12]
    943c:	b008      	add	sp, #32
    943e:	bd80      	pop	{r7, pc}

00009440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9440:	b08a      	sub	sp, #40	; 0x28
    9442:	9004      	str	r0, [sp, #16]
    9444:	9105      	str	r1, [sp, #20]
    9446:	1a40      	subs	r0, r0, r1
    9448:	f04f 0100 	mov.w	r1, #0
    944c:	f141 0100 	adc.w	r1, r1, #0
    9450:	f1c1 0101 	rsb	r1, r1, #1
    9454:	9006      	str	r0, [sp, #24]
    9456:	f88d 101c 	strb.w	r1, [sp, #28]
    945a:	9806      	ldr	r0, [sp, #24]
    945c:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9460:	9001      	str	r0, [sp, #4]
    9462:	9100      	str	r1, [sp, #0]
    9464:	e7ff      	b.n	9466 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    9466:	9801      	ldr	r0, [sp, #4]
    9468:	9008      	str	r0, [sp, #32]
    946a:	9900      	ldr	r1, [sp, #0]
    946c:	f001 0201 	and.w	r2, r1, #1
    9470:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    9474:	9002      	str	r0, [sp, #8]
    9476:	f88d 200c 	strb.w	r2, [sp, #12]
    947a:	9802      	ldr	r0, [sp, #8]
    947c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9480:	b00a      	add	sp, #40	; 0x28
    9482:	4770      	bx	lr

00009484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    9484:	b5b0      	push	{r4, r5, r7, lr}
    9486:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9488:	f00a f9f7 	bl	1387a <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    948c:	9115      	str	r1, [sp, #84]	; 0x54
    948e:	9014      	str	r0, [sp, #80]	; 0x50
    9490:	e7ff      	b.n	9492 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9492:	f00a fbb0 	bl	13bf6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9496:	9016      	str	r0, [sp, #88]	; 0x58
    9498:	e7ff      	b.n	949a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    949a:	f00a fbac 	bl	13bf6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    949e:	9017      	str	r0, [sp, #92]	; 0x5c
    94a0:	e7ff      	b.n	94a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    94a2:	f240 03e8 	movw	r3, #232	; 0xe8
    94a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94aa:	a814      	add	r0, sp, #80	; 0x50
    94ac:	2100      	movs	r1, #0
    94ae:	2219      	movs	r2, #25
    94b0:	f00a f9eb 	bl	1388a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    94b4:	9012      	str	r0, [sp, #72]	; 0x48
    94b6:	e7ff      	b.n	94b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    94b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    94ba:	f7ff fb5d 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    94be:	9018      	str	r0, [sp, #96]	; 0x60
    94c0:	e7ff      	b.n	94c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    94c2:	9818      	ldr	r0, [sp, #96]	; 0x60
    94c4:	1e41      	subs	r1, r0, #1
    94c6:	bf18      	it	ne
    94c8:	2101      	movne	r1, #1
    94ca:	2801      	cmp	r0, #1
    94cc:	d001      	beq.n	94d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    94ce:	e7ff      	b.n	94d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    94d0:	e006      	b.n	94e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    94d2:	a816      	add	r0, sp, #88	; 0x58
    94d4:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    94d6:	f00a fb90 	bl	13bfa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    94da:	9011      	str	r0, [sp, #68]	; 0x44
    94dc:	e010      	b.n	9500 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    94de:	defe      	udf	#254	; 0xfe
    ) ? ;
    94e0:	9818      	ldr	r0, [sp, #96]	; 0x60
    94e2:	902d      	str	r0, [sp, #180]	; 0xb4
    94e4:	f008 fd86 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    94e8:	9010      	str	r0, [sp, #64]	; 0x40
    94ea:	e002      	b.n	94f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    94ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    94ee:	b032      	add	sp, #200	; 0xc8
    94f0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    94f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    94f4:	f7ff fb34 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    94f8:	9013      	str	r0, [sp, #76]	; 0x4c
    94fa:	e7ff      	b.n	94fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    94fc:	e7ff      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    94fe:	e7f5      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9500:	9811      	ldr	r0, [sp, #68]	; 0x44
    9502:	f7ff fb39 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9506:	9019      	str	r0, [sp, #100]	; 0x64
    9508:	e7ff      	b.n	950a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    950a:	9819      	ldr	r0, [sp, #100]	; 0x64
    950c:	1e41      	subs	r1, r0, #1
    950e:	bf18      	it	ne
    9510:	2101      	movne	r1, #1
    9512:	2801      	cmp	r0, #1
    9514:	d001      	beq.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9516:	e7ff      	b.n	9518 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9518:	e006      	b.n	9528 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    951a:	a817      	add	r0, sp, #92	; 0x5c
    951c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    951e:	f00a fb6c 	bl	13bfa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9522:	900f      	str	r0, [sp, #60]	; 0x3c
    9524:	e00c      	b.n	9540 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9526:	defe      	udf	#254	; 0xfe
    9528:	9819      	ldr	r0, [sp, #100]	; 0x64
    952a:	902e      	str	r0, [sp, #184]	; 0xb8
    952c:	f008 fd62 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9530:	900e      	str	r0, [sp, #56]	; 0x38
    9532:	e7ff      	b.n	9534 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9534:	980e      	ldr	r0, [sp, #56]	; 0x38
    9536:	f7ff fb13 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    953a:	9013      	str	r0, [sp, #76]	; 0x4c
    953c:	e7ff      	b.n	953e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    953e:	e7de      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9540:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9542:	f7ff fb19 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9546:	901a      	str	r0, [sp, #104]	; 0x68
    9548:	e7ff      	b.n	954a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    954a:	981a      	ldr	r0, [sp, #104]	; 0x68
    954c:	1e41      	subs	r1, r0, #1
    954e:	bf18      	it	ne
    9550:	2101      	movne	r1, #1
    9552:	2801      	cmp	r0, #1
    9554:	d001      	beq.n	955a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9556:	e7ff      	b.n	9558 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9558:	e004      	b.n	9564 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    955a:	f00a fb4c 	bl	13bf6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    955e:	900d      	str	r0, [sp, #52]	; 0x34
    9560:	e00c      	b.n	957c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9562:	defe      	udf	#254	; 0xfe
    9564:	981a      	ldr	r0, [sp, #104]	; 0x68
    9566:	902f      	str	r0, [sp, #188]	; 0xbc
    9568:	f008 fd44 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    956c:	900c      	str	r0, [sp, #48]	; 0x30
    956e:	e7ff      	b.n	9570 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9570:	980c      	ldr	r0, [sp, #48]	; 0x30
    9572:	f7ff faf5 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9576:	9013      	str	r0, [sp, #76]	; 0x4c
    9578:	e7ff      	b.n	957a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    957a:	e7c0      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    957c:	f240 1060 	movw	r0, #352	; 0x160
    9580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9584:	990d      	ldr	r1, [sp, #52]	; 0x34
    9586:	6001      	str	r1, [r0, #0]
    9588:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    958a:	f00a fb36 	bl	13bfa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    958e:	900b      	str	r0, [sp, #44]	; 0x2c
    9590:	e7ff      	b.n	9592 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9592:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9594:	f7ff faf0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9598:	901b      	str	r0, [sp, #108]	; 0x6c
    959a:	e7ff      	b.n	959c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    959c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    959e:	1e41      	subs	r1, r0, #1
    95a0:	bf18      	it	ne
    95a2:	2101      	movne	r1, #1
    95a4:	2801      	cmp	r0, #1
    95a6:	d001      	beq.n	95ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    95aa:	e008      	b.n	95be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95ac:	f240 1060 	movw	r0, #352	; 0x160
    95b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    95b4:	f00a fbba 	bl	13d2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    95b8:	900a      	str	r0, [sp, #40]	; 0x28
    95ba:	e00d      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    95bc:	defe      	udf	#254	; 0xfe
    95be:	981b      	ldr	r0, [sp, #108]	; 0x6c
    95c0:	9030      	str	r0, [sp, #192]	; 0xc0
    95c2:	f008 fd17 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95c6:	9009      	str	r0, [sp, #36]	; 0x24
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    95ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    95cc:	f7ff fac8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95d0:	9013      	str	r0, [sp, #76]	; 0x4c
    95d2:	e7ff      	b.n	95d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    95d4:	e7ff      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    95d6:	e792      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95da:	f7ff facd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95de:	901c      	str	r0, [sp, #112]	; 0x70
    95e0:	e7ff      	b.n	95e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    95e2:	981c      	ldr	r0, [sp, #112]	; 0x70
    95e4:	1e41      	subs	r1, r0, #1
    95e6:	bf18      	it	ne
    95e8:	2101      	movne	r1, #1
    95ea:	2801      	cmp	r0, #1
    95ec:	d001      	beq.n	95f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    95ee:	e7ff      	b.n	95f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    95f0:	e011      	b.n	9616 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    95f2:	9914      	ldr	r1, [sp, #80]	; 0x50
    95f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    95f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    95f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    95fa:	46ec      	mov	ip, sp
    95fc:	f04f 0e01 	mov.w	lr, #1
    9600:	f8cc e008 	str.w	lr, [ip, #8]
    9604:	f8cc e004 	str.w	lr, [ip, #4]
    9608:	f8cc 0000 	str.w	r0, [ip]
    960c:	a81d      	add	r0, sp, #116	; 0x74
    960e:	f000 fb4f 	bl	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    9612:	e00c      	b.n	962e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9614:	defe      	udf	#254	; 0xfe
    9616:	981c      	ldr	r0, [sp, #112]	; 0x70
    9618:	9031      	str	r0, [sp, #196]	; 0xc4
    961a:	f008 fceb 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    961e:	9008      	str	r0, [sp, #32]
    9620:	e7ff      	b.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    9622:	9808      	ldr	r0, [sp, #32]
    9624:	f7ff fa9c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9628:	9013      	str	r0, [sp, #76]	; 0x4c
    962a:	e7ff      	b.n	962c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    962c:	e7d3      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    962e:	f240 1048 	movw	r0, #328	; 0x148
    9632:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9636:	a91d      	add	r1, sp, #116	; 0x74
    9638:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    963c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9640:	f00a fb8a 	bl	13d58 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9646:	f240 1048 	movw	r0, #328	; 0x148
    964a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    964e:	a923      	add	r1, sp, #140	; 0x8c
    9650:	f000 fb50 	bl	9cf4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9654:	9007      	str	r0, [sp, #28]
    9656:	e7ff      	b.n	9658 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9658:	9807      	ldr	r0, [sp, #28]
    965a:	f000 0001 	and.w	r0, r0, #1
    965e:	f7ff fa85 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9662:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9666:	e7ff      	b.n	9668 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9668:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    966c:	07c1      	lsls	r1, r0, #31
    966e:	2900      	cmp	r1, #0
    9670:	d001      	beq.n	9676 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    9672:	e7ff      	b.n	9674 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9674:	e00d      	b.n	9692 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9676:	f64b 2018 	movw	r0, #47640	; 0xba18
    967a:	f2c0 0001 	movt	r0, #1
    967e:	6801      	ldr	r1, [r0, #0]
    9680:	f240 1048 	movw	r0, #328	; 0x148
    9684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9688:	f000 f949 	bl	991e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    968c:	9006      	str	r0, [sp, #24]
    968e:	e00b      	b.n	96a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9690:	defe      	udf	#254	; 0xfe
    9692:	f7ff f9f8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    9696:	9005      	str	r0, [sp, #20]
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    969a:	9805      	ldr	r0, [sp, #20]
    969c:	f7ff fa60 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96a0:	9013      	str	r0, [sp, #76]	; 0x4c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    96a4:	e7ff      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    96a6:	e72a      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96a8:	9806      	ldr	r0, [sp, #24]
    96aa:	f000 0001 	and.w	r0, r0, #1
    96ae:	f7ff fa5d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    96b2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    96b6:	e7ff      	b.n	96b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    96b8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    96bc:	07c1      	lsls	r1, r0, #31
    96be:	2900      	cmp	r1, #0
    96c0:	d001      	beq.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    96c2:	e7ff      	b.n	96c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    96c4:	e005      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    96c6:	2000      	movs	r0, #0
    Ok(())
    96c8:	9013      	str	r0, [sp, #76]	; 0x4c
    96ca:	2001      	movs	r0, #1
    96cc:	9013      	str	r0, [sp, #76]	; 0x4c
}
    96ce:	e70d      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96d0:	defe      	udf	#254	; 0xfe
    96d2:	f7ff f9d8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    96d6:	9004      	str	r0, [sp, #16]
    96d8:	e7ff      	b.n	96da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    96da:	9804      	ldr	r0, [sp, #16]
    96dc:	f7ff fa40 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96e0:	9013      	str	r0, [sp, #76]	; 0x4c
    96e2:	e7ff      	b.n	96e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    96e4:	e7df      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000096e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    96e6:	b580      	push	{r7, lr}
    96e8:	b08a      	sub	sp, #40	; 0x28
    96ea:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    96ec:	f001 f8ff 	bl	a8ee <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    96f0:	9307      	str	r3, [sp, #28]
    96f2:	9206      	str	r2, [sp, #24]
    96f4:	9105      	str	r1, [sp, #20]
    96f6:	9004      	str	r0, [sp, #16]
    96f8:	e7ff      	b.n	96fa <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    96fa:	a804      	add	r0, sp, #16
    96fc:	f00a fba4 	bl	13e48 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9700:	9003      	str	r0, [sp, #12]
    9702:	e7ff      	b.n	9704 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    9704:	9803      	ldr	r0, [sp, #12]
    9706:	f00a fc15 	bl	13f34 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    970a:	9002      	str	r0, [sp, #8]
    970c:	9101      	str	r1, [sp, #4]
    970e:	e7ff      	b.n	9710 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9710:	9802      	ldr	r0, [sp, #8]
    9712:	f000 0001 	and.w	r0, r0, #1
    9716:	9901      	ldr	r1, [sp, #4]
    9718:	b00a      	add	sp, #40	; 0x28
    971a:	bd80      	pop	{r7, pc}

0000971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    971c:	b580      	push	{r7, lr}
    971e:	b090      	sub	sp, #64	; 0x40
    9720:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    9722:	f100 010c 	add.w	r1, r0, #12
    9726:	9006      	str	r0, [sp, #24]
    9728:	4608      	mov	r0, r1
    972a:	f00a fb0a 	bl	13d42 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    972e:	9005      	str	r0, [sp, #20]
    9730:	e7ff      	b.n	9732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    9732:	9805      	ldr	r0, [sp, #20]
    9734:	f00a fd31 	bl	1419a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9738:	9004      	str	r0, [sp, #16]
    973a:	e7ff      	b.n	973c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    973c:	9804      	ldr	r0, [sp, #16]
    973e:	f000 0001 	and.w	r0, r0, #1
    9742:	f7ff fa13 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9746:	f88d 001f 	strb.w	r0, [sp, #31]
    974a:	e7ff      	b.n	974c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    974c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9750:	07c1      	lsls	r1, r0, #31
    9752:	2900      	cmp	r1, #0
    9754:	d001      	beq.n	975a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    9756:	e7ff      	b.n	9758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9758:	e006      	b.n	9768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    975a:	9806      	ldr	r0, [sp, #24]
    975c:	300c      	adds	r0, #12
    975e:	f00a fae5 	bl	13d2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9762:	9003      	str	r0, [sp, #12]
    9764:	e00d      	b.n	9782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9766:	defe      	udf	#254	; 0xfe
    9768:	f008 f810 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    976c:	e003      	b.n	9776 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    976e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9772:	b010      	add	sp, #64	; 0x40
    9774:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9776:	f00a fd65 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    977a:	f88d 001e 	strb.w	r0, [sp, #30]
    977e:	e7ff      	b.n	9780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9780:	e7f5      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9782:	9803      	ldr	r0, [sp, #12]
    9784:	f00a fcb4 	bl	140f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9788:	9002      	str	r0, [sp, #8]
    978a:	e7ff      	b.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    978c:	9802      	ldr	r0, [sp, #8]
    978e:	f000 0001 	and.w	r0, r0, #1
    9792:	f7ff f9eb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9796:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    979a:	e7ff      	b.n	979c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    979c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    97a0:	07c1      	lsls	r1, r0, #31
    97a2:	2900      	cmp	r1, #0
    97a4:	d001      	beq.n	97aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    97a6:	e7ff      	b.n	97a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    97a8:	e006      	b.n	97b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    97aa:	9806      	ldr	r0, [sp, #24]
    97ac:	300c      	adds	r0, #12
    97ae:	f00a fac8 	bl	13d42 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    97b2:	9001      	str	r0, [sp, #4]
    97b4:	e009      	b.n	97ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    97b6:	defe      	udf	#254	; 0xfe
    97b8:	f007 ffe8 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    97bc:	e7ff      	b.n	97be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    97be:	f00a fd41 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    97c2:	f88d 001e 	strb.w	r0, [sp, #30]
    97c6:	e7ff      	b.n	97c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    97c8:	e7d1      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    97ca:	9801      	ldr	r0, [sp, #4]
    97cc:	f00a fc3b 	bl	14046 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    97d0:	f88d 001e 	strb.w	r0, [sp, #30]
    97d4:	e7ff      	b.n	97d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    97d6:	e7ca      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000097d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    97d8:	b082      	sub	sp, #8
    97da:	9001      	str	r0, [sp, #4]
    97dc:	e7ff      	b.n	97de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    97de:	b002      	add	sp, #8
    97e0:	4770      	bx	lr

000097e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    97e2:	b082      	sub	sp, #8
    97e4:	9001      	str	r0, [sp, #4]
    97e6:	e7ff      	b.n	97e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    97e8:	b002      	add	sp, #8
    97ea:	4770      	bx	lr

000097ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    97ec:	b082      	sub	sp, #8
    97ee:	9001      	str	r0, [sp, #4]
    97f0:	e7ff      	b.n	97f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    97f2:	b002      	add	sp, #8
    97f4:	4770      	bx	lr

000097f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
        }
        Ok(())
    }

    #[cfg(feature = "noblock_spi")]  //  If non-blocking SPI is enabled...
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    97f6:	b580      	push	{r7, lr}
    97f8:	b084      	sub	sp, #16
    97fa:	9001      	str	r0, [sp, #4]
    97fc:	9102      	str	r1, [sp, #8]
    97fe:	9203      	str	r2, [sp, #12]
        //  Write the data bytes,
        mynewt::spi::spi_noblock_write_data(
    9800:	4608      	mov	r0, r1
    9802:	4611      	mov	r1, r2
    9804:	f009 fa50 	bl	12ca8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9808:	9000      	str	r0, [sp, #0]
    980a:	e7ff      	b.n	980c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    980c:	f64b 2178 	movw	r1, #47736	; 0xba78
    9810:	f2c0 0101 	movt	r1, #1
    9814:	f64b 2388 	movw	r3, #47752	; 0xba88
    9818:	f2c0 0301 	movt	r3, #1
    981c:	220d      	movs	r2, #13
    981e:	9800      	ldr	r0, [sp, #0]
    9820:	f7ff f96b 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9824:	e7ff      	b.n	9826 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    9826:	2000      	movs	r0, #0
            data
        ).expect("spi data fail");
        Ok(())
    }
    9828:	b004      	add	sp, #16
    982a:	bd80      	pop	{r7, pc}

0000982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
        self.dc.set_high().map_err(|_| ())?;
        self.spi.write(data).map_err(|_| ())
    }

    /// Writes a data word to the display.
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    982c:	b580      	push	{r7, lr}
    982e:	b088      	sub	sp, #32
    9830:	460a      	mov	r2, r1
    9832:	9006      	str	r0, [sp, #24]
    9834:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9838:	9004      	str	r0, [sp, #16]
    983a:	4608      	mov	r0, r1
    983c:	9203      	str	r2, [sp, #12]
    983e:	f000 fe08 	bl	a452 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    9842:	9002      	str	r0, [sp, #8]
    9844:	e7ff      	b.n	9846 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    9846:	9802      	ldr	r0, [sp, #8]
    9848:	f8ad 0016 	strh.w	r0, [sp, #22]
    984c:	e7ff      	b.n	984e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    984e:	f10d 0116 	add.w	r1, sp, #22
    9852:	2202      	movs	r2, #2
        self.write_data(&bytes)
    9854:	9804      	ldr	r0, [sp, #16]
    9856:	f7ff ffce 	bl	97f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    985a:	9001      	str	r0, [sp, #4]
    985c:	e7ff      	b.n	985e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    985e:	9801      	ldr	r0, [sp, #4]
    9860:	f000 0001 	and.w	r0, r0, #1
    9864:	b008      	add	sp, #32
    9866:	bd80      	pop	{r7, pc}

00009868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9868:	b580      	push	{r7, lr}
    986a:	b08e      	sub	sp, #56	; 0x38
    986c:	468c      	mov	ip, r1
    986e:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9872:	920b      	str	r2, [sp, #44]	; 0x2c
    9874:	930c      	str	r3, [sp, #48]	; 0x30
    9876:	900d      	str	r0, [sp, #52]	; 0x34
    9878:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    987c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9880:	f000 fdbd 	bl	a3fe <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9884:	9008      	str	r0, [sp, #32]
    9886:	9107      	str	r1, [sp, #28]
    9888:	e7ff      	b.n	988a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    988a:	9808      	ldr	r0, [sp, #32]
    988c:	f000 0001 	and.w	r0, r0, #1
    9890:	f64b 2298 	movw	r2, #47768	; 0xba98
    9894:	f2c0 0201 	movt	r2, #1
    9898:	9907      	ldr	r1, [sp, #28]
    989a:	f00a faea 	bl	13e72 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    989e:	9006      	str	r0, [sp, #24]
    98a0:	e7ff      	b.n	98a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    98a2:	9806      	ldr	r0, [sp, #24]
    98a4:	f009 f9b8 	bl	12c18 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    98a8:	9005      	str	r0, [sp, #20]
    98aa:	e7ff      	b.n	98ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    98ac:	f64b 21a8 	movw	r1, #47784	; 0xbaa8
    98b0:	f2c0 0101 	movt	r1, #1
    98b4:	f64b 23b4 	movw	r3, #47796	; 0xbab4
    98b8:	f2c0 0301 	movt	r3, #1
    98bc:	220c      	movs	r2, #12
    98be:	9805      	ldr	r0, [sp, #20]
    98c0:	f7ff f91b 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    98c6:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    98c8:	f00a fb22 	bl	13f10 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    98cc:	9004      	str	r0, [sp, #16]
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    98d0:	9804      	ldr	r0, [sp, #16]
    98d2:	07c1      	lsls	r1, r0, #31
    98d4:	2900      	cmp	r1, #0
    98d6:	d01f      	beq.n	9918 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    98d8:	e7ff      	b.n	98da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    98da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    98dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    98de:	f64b 22c4 	movw	r2, #47812	; 0xbac4
    98e2:	f2c0 0201 	movt	r2, #1
    98e6:	f00a faed 	bl	13ec4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    98ea:	9003      	str	r0, [sp, #12]
    98ec:	9102      	str	r1, [sp, #8]
    98ee:	e7ff      	b.n	98f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    98f0:	9803      	ldr	r0, [sp, #12]
    98f2:	9902      	ldr	r1, [sp, #8]
    98f4:	f009 f9d8 	bl	12ca8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    98f8:	9001      	str	r0, [sp, #4]
    98fa:	e7ff      	b.n	98fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    98fc:	f64b 2178 	movw	r1, #47736	; 0xba78
    9900:	f2c0 0101 	movt	r1, #1
    9904:	f64b 23d4 	movw	r3, #47828	; 0xbad4
    9908:	f2c0 0301 	movt	r3, #1
    990c:	220d      	movs	r2, #13
    990e:	9801      	ldr	r0, [sp, #4]
    9910:	f7ff f8f3 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9914:	e7ff      	b.n	9916 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9916:	e7ff      	b.n	9918 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9918:	2000      	movs	r0, #0
    }
    991a:	b00e      	add	sp, #56	; 0x38
    991c:	bd80      	pop	{r7, pc}

0000991e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:

    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    991e:	b580      	push	{r7, lr}
    9920:	b098      	sub	sp, #96	; 0x60
    9922:	9012      	str	r0, [sp, #72]	; 0x48
    9924:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9926:	7d02      	ldrb	r2, [r0, #20]
    9928:	07d2      	lsls	r2, r2, #31
    992a:	2a00      	cmp	r2, #0
    992c:	910a      	str	r1, [sp, #40]	; 0x28
    992e:	9009      	str	r0, [sp, #36]	; 0x24
    9930:	d109      	bne.n	9946 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9932:	e7ff      	b.n	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9934:	2036      	movs	r0, #54	; 0x36
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
            ))?;
        } else {
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9936:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    993a:	980a      	ldr	r0, [sp, #40]	; 0x28
    993c:	f7ff fed3 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9940:	9008      	str	r0, [sp, #32]
    9942:	9107      	str	r1, [sp, #28]
    9944:	e044      	b.n	99d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9946:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9948:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    994c:	980a      	ldr	r0, [sp, #40]	; 0x28
    994e:	f7ff feca 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9952:	9006      	str	r0, [sp, #24]
    9954:	9105      	str	r1, [sp, #20]
    9956:	e7ff      	b.n	9958 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9958:	9806      	ldr	r0, [sp, #24]
    995a:	f000 0001 	and.w	r0, r0, #1
    995e:	f64b 22e4 	movw	r2, #47844	; 0xbae4
    9962:	f2c0 0201 	movt	r2, #1
    9966:	9905      	ldr	r1, [sp, #20]
    9968:	f00a fa83 	bl	13e72 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    996c:	9004      	str	r0, [sp, #16]
    996e:	e7ff      	b.n	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9970:	9804      	ldr	r0, [sp, #16]
    9972:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9976:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    997a:	910c      	str	r1, [sp, #48]	; 0x30
    997c:	2101      	movs	r1, #1
    997e:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9984:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9988:	9809      	ldr	r0, [sp, #36]	; 0x24
    998a:	f7ff ff6d 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    998e:	9003      	str	r0, [sp, #12]
    9990:	e7ff      	b.n	9992 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9992:	9803      	ldr	r0, [sp, #12]
    9994:	f000 0001 	and.w	r0, r0, #1
    9998:	f7ff f8e8 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    999c:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    99a0:	e7ff      	b.n	99a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    99a2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    99a6:	07c1      	lsls	r1, r0, #31
    99a8:	2900      	cmp	r1, #0
    99aa:	d001      	beq.n	99b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    99ac:	e7ff      	b.n	99ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    99ae:	e001      	b.n	99b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    99b0:	e047      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    99b2:	defe      	udf	#254	; 0xfe
            ))?;
    99b4:	f007 feea 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99b8:	e003      	b.n	99c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
            ))?;
        }
        Ok(())
    }
    99ba:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    99be:	b018      	add	sp, #96	; 0x60
    99c0:	bd80      	pop	{r7, pc}
            ))?;
    99c2:	f00a fc3f 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    99c6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    99ca:	e7ff      	b.n	99cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    99cc:	e7ff      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    99ce:	e7f4      	b.n	99ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    99d0:	9808      	ldr	r0, [sp, #32]
    99d2:	f000 0001 	and.w	r0, r0, #1
    99d6:	f64b 22f4 	movw	r2, #47860	; 0xbaf4
    99da:	f2c0 0201 	movt	r2, #1
    99de:	9907      	ldr	r1, [sp, #28]
    99e0:	f00a fa47 	bl	13e72 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    99e4:	9002      	str	r0, [sp, #8]
    99e6:	e7ff      	b.n	99e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    99e8:	9802      	ldr	r0, [sp, #8]
    99ea:	f040 0108 	orr.w	r1, r0, #8
    99ee:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    99f2:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    99f6:	910f      	str	r1, [sp, #60]	; 0x3c
    99f8:	2101      	movs	r1, #1
    99fa:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    99fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    99fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a00:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9a04:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a06:	f7ff ff2f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a0a:	9001      	str	r0, [sp, #4]
    9a0c:	e7ff      	b.n	9a0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9a0e:	9801      	ldr	r0, [sp, #4]
    9a10:	f000 0001 	and.w	r0, r0, #1
    9a14:	f7ff f8aa 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a18:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9a1c:	e7ff      	b.n	9a1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9a1e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9a22:	07c1      	lsls	r1, r0, #31
    9a24:	2900      	cmp	r1, #0
    9a26:	d001      	beq.n	9a2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9a28:	e7ff      	b.n	9a2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9a2a:	e001      	b.n	9a30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9a2c:	e009      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9a2e:	defe      	udf	#254	; 0xfe
            ))?;
    9a30:	f007 feac 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a34:	e7ff      	b.n	9a36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9a36:	f00a fc05 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a3a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9a3e:	e7ff      	b.n	9a40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9a40:	e7c5      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9a42:	2000      	movs	r0, #0
        Ok(())
    9a44:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9a48:	e7b7      	b.n	99ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
        self.dx = dx;
        self.dy = dy;
    }

    /// Sets the address window for the display.
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9a4a:	b5b0      	push	{r4, r5, r7, lr}
    9a4c:	b0a2      	sub	sp, #136	; 0x88
    9a4e:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9a52:	469e      	mov	lr, r3
    9a54:	4614      	mov	r4, r2
    9a56:	460d      	mov	r5, r1
    9a58:	9015      	str	r0, [sp, #84]	; 0x54
    9a5a:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9a5e:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9a62:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9a66:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9a6a:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9a6c:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9a70:	2100      	movs	r1, #0
    9a72:	9110      	str	r1, [sp, #64]	; 0x40
    9a74:	910f      	str	r1, [sp, #60]	; 0x3c
    9a76:	910f      	str	r1, [sp, #60]	; 0x3c
    9a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a7c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9a80:	900d      	str	r0, [sp, #52]	; 0x34
    9a82:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9a86:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9a8a:	940a      	str	r4, [sp, #40]	; 0x28
    9a8c:	9509      	str	r5, [sp, #36]	; 0x24
    9a8e:	f7ff feeb 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a92:	9008      	str	r0, [sp, #32]
    9a94:	e7ff      	b.n	9a96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9a96:	9808      	ldr	r0, [sp, #32]
    9a98:	f000 0001 	and.w	r0, r0, #1
    9a9c:	f7ff f866 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9aa0:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9aa4:	e7ff      	b.n	9aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9aa6:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9aaa:	07c1      	lsls	r1, r0, #31
    9aac:	2900      	cmp	r1, #0
    9aae:	d001      	beq.n	9ab4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9ab0:	e7ff      	b.n	9ab2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9ab2:	e00d      	b.n	9ad0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ab6:	8a01      	ldrh	r1, [r0, #16]
    9ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9aba:	fa11 f182 	uxtah	r1, r1, r2
    9abe:	b28b      	uxth	r3, r1
    9ac0:	468c      	mov	ip, r1
    9ac2:	428b      	cmp	r3, r1
    9ac4:	f8cd c01c 	str.w	ip, [sp, #28]
    9ac8:	f040 80c2 	bne.w	9c50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9acc:	e00d      	b.n	9aea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9ace:	defe      	udf	#254	; 0xfe
    9ad0:	f007 fe5c 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ad4:	e003      	b.n	9ade <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
        self.write_word(ex + self.dx)?;
        self.write_command(Instruction::RASET, None)?;
        self.write_word(sy + self.dy)?;
        self.write_word(ey + self.dy)
    }
    9ad6:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9ada:	b022      	add	sp, #136	; 0x88
    9adc:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9ade:	f00a fbb1 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ae2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ae6:	e7ff      	b.n	9ae8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9ae8:	e7f5      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9aea:	980d      	ldr	r0, [sp, #52]	; 0x34
    9aec:	9907      	ldr	r1, [sp, #28]
    9aee:	f7ff fe9d 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9af2:	9006      	str	r0, [sp, #24]
    9af4:	e7ff      	b.n	9af6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9af6:	9806      	ldr	r0, [sp, #24]
    9af8:	f000 0001 	and.w	r0, r0, #1
    9afc:	f7ff f836 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b00:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9b04:	e7ff      	b.n	9b06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9b06:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9b0a:	07c1      	lsls	r1, r0, #31
    9b0c:	2900      	cmp	r1, #0
    9b0e:	d001      	beq.n	9b14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9b10:	e7ff      	b.n	9b12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9b12:	e00d      	b.n	9b30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9b14:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b16:	8a01      	ldrh	r1, [r0, #16]
    9b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9b1a:	fa11 f182 	uxtah	r1, r1, r2
    9b1e:	b28b      	uxth	r3, r1
    9b20:	468c      	mov	ip, r1
    9b22:	428b      	cmp	r3, r1
    9b24:	f8cd c014 	str.w	ip, [sp, #20]
    9b28:	f040 809e 	bne.w	9c68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9b2c:	e009      	b.n	9b42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9b2e:	defe      	udf	#254	; 0xfe
    9b30:	f007 fe2c 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b34:	e7ff      	b.n	9b36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9b36:	f00a fb85 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b3a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9b3e:	e7ff      	b.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9b40:	e7c9      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9b42:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b44:	9905      	ldr	r1, [sp, #20]
    9b46:	f7ff fe71 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9b4a:	9004      	str	r0, [sp, #16]
    9b4c:	e7ff      	b.n	9b4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9b4e:	9804      	ldr	r0, [sp, #16]
    9b50:	f000 0001 	and.w	r0, r0, #1
    9b54:	f7ff f80a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b58:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9b5c:	e7ff      	b.n	9b5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9b5e:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9b62:	07c1      	lsls	r1, r0, #31
    9b64:	2900      	cmp	r1, #0
    9b66:	d001      	beq.n	9b6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9b6a:	e010      	b.n	9b8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9b6c:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9b6e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9b72:	2000      	movs	r0, #0
    9b74:	9013      	str	r0, [sp, #76]	; 0x4c
    9b76:	9012      	str	r0, [sp, #72]	; 0x48
    9b78:	9012      	str	r0, [sp, #72]	; 0x48
    9b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9b7e:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9b82:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b84:	f7ff fe70 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b88:	9003      	str	r0, [sp, #12]
    9b8a:	e009      	b.n	9ba0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9b8c:	defe      	udf	#254	; 0xfe
    9b8e:	f007 fdfd 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b92:	e7ff      	b.n	9b94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9b94:	f00a fb56 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b98:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9b9c:	e7ff      	b.n	9b9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9b9e:	e79a      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9ba0:	9803      	ldr	r0, [sp, #12]
    9ba2:	f000 0001 	and.w	r0, r0, #1
    9ba6:	f7fe ffe1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9baa:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9bae:	e7ff      	b.n	9bb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9bb0:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9bb4:	07c1      	lsls	r1, r0, #31
    9bb6:	2900      	cmp	r1, #0
    9bb8:	d001      	beq.n	9bbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9bba:	e7ff      	b.n	9bbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9bbc:	e00c      	b.n	9bd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9bbe:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bc0:	8a41      	ldrh	r1, [r0, #18]
    9bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9bc4:	fa11 f182 	uxtah	r1, r1, r2
    9bc8:	b28b      	uxth	r3, r1
    9bca:	468c      	mov	ip, r1
    9bcc:	428b      	cmp	r3, r1
    9bce:	f8cd c008 	str.w	ip, [sp, #8]
    9bd2:	d155      	bne.n	9c80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9bd4:	e009      	b.n	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9bd6:	defe      	udf	#254	; 0xfe
    9bd8:	f007 fdd8 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9bdc:	e7ff      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9bde:	f00a fb31 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9be2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9be6:	e7ff      	b.n	9be8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9be8:	e775      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9bea:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bec:	9902      	ldr	r1, [sp, #8]
    9bee:	f7ff fe1d 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9bf2:	9001      	str	r0, [sp, #4]
    9bf4:	e7ff      	b.n	9bf6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9bf6:	9801      	ldr	r0, [sp, #4]
    9bf8:	f000 0001 	and.w	r0, r0, #1
    9bfc:	f7fe ffb6 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c00:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9c04:	e7ff      	b.n	9c06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9c06:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9c0a:	07c1      	lsls	r1, r0, #31
    9c0c:	2900      	cmp	r1, #0
    9c0e:	d001      	beq.n	9c14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9c10:	e7ff      	b.n	9c12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9c12:	e00c      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9c14:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c16:	8a41      	ldrh	r1, [r0, #18]
    9c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9c1a:	fa11 f182 	uxtah	r1, r1, r2
    9c1e:	b28b      	uxth	r3, r1
    9c20:	468c      	mov	ip, r1
    9c22:	428b      	cmp	r3, r1
    9c24:	f8cd c000 	str.w	ip, [sp]
    9c28:	d136      	bne.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9c2a:	e009      	b.n	9c40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9c2c:	defe      	udf	#254	; 0xfe
    9c2e:	f007 fdad 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c32:	e7ff      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9c34:	f00a fb06 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c38:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c3c:	e7ff      	b.n	9c3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9c3e:	e74a      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9c40:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c42:	9900      	ldr	r1, [sp, #0]
    9c44:	f7ff fdf2 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9c48:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c4c:	e7ff      	b.n	9c4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9c4e:	e742      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9c50:	f64b 3020 	movw	r0, #47904	; 0xbb20
    9c54:	f2c0 0001 	movt	r0, #1
    9c58:	f64b 3204 	movw	r2, #47876	; 0xbb04
    9c5c:	f2c0 0201 	movt	r2, #1
    9c60:	211c      	movs	r1, #28
    9c62:	f00b fa35 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9c66:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9c68:	f64b 3020 	movw	r0, #47904	; 0xbb20
    9c6c:	f2c0 0001 	movt	r0, #1
    9c70:	f64b 323c 	movw	r2, #47932	; 0xbb3c
    9c74:	f2c0 0201 	movt	r2, #1
    9c78:	211c      	movs	r1, #28
    9c7a:	f00b fa29 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9c7e:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9c80:	f64b 3020 	movw	r0, #47904	; 0xbb20
    9c84:	f2c0 0001 	movt	r0, #1
    9c88:	f64b 324c 	movw	r2, #47948	; 0xbb4c
    9c8c:	f2c0 0201 	movt	r2, #1
    9c90:	211c      	movs	r1, #28
    9c92:	f00b fa1d 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9c96:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9c98:	f64b 3020 	movw	r0, #47904	; 0xbb20
    9c9c:	f2c0 0001 	movt	r0, #1
    9ca0:	f64b 325c 	movw	r2, #47964	; 0xbb5c
    9ca4:	f2c0 0201 	movt	r2, #1
    9ca8:	211c      	movs	r1, #28
    9caa:	f00b fa11 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9cae:	defe      	udf	#254	; 0xfe

00009cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9cb0:	b5b0      	push	{r4, r5, r7, lr}
    9cb2:	b08a      	sub	sp, #40	; 0x28
    9cb4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9cb8:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9cbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9cbe:	9106      	str	r1, [sp, #24]
    9cc0:	9207      	str	r2, [sp, #28]
    9cc2:	9308      	str	r3, [sp, #32]
    9cc4:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9cc8:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9ccc:	9100      	str	r1, [sp, #0]
    9cce:	9201      	str	r2, [sp, #4]
    9cd0:	9302      	str	r3, [sp, #8]
    9cd2:	9403      	str	r4, [sp, #12]
    9cd4:	f88d e014 	strb.w	lr, [sp, #20]
    9cd8:	f88d c015 	strb.w	ip, [sp, #21]
    9cdc:	2100      	movs	r1, #0
    9cde:	f8ad 1010 	strh.w	r1, [sp, #16]
    9ce2:	f8ad 1012 	strh.w	r1, [sp, #18]
    9ce6:	4669      	mov	r1, sp
        display
    9ce8:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9cec:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9cf0:	b00a      	add	sp, #40	; 0x28
    9cf2:	bdb0      	pop	{r4, r5, r7, pc}

00009cf4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9cf4:	b580      	push	{r7, lr}
    9cf6:	b0f6      	sub	sp, #472	; 0x1d8
    9cf8:	904e      	str	r0, [sp, #312]	; 0x138
    9cfa:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9cfc:	9117      	str	r1, [sp, #92]	; 0x5c
    9cfe:	9016      	str	r0, [sp, #88]	; 0x58
    9d00:	f008 fa30 	bl	12164 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9d04:	9015      	str	r0, [sp, #84]	; 0x54
    9d06:	e7ff      	b.n	9d08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9d08:	f64b 316c 	movw	r1, #47980	; 0xbb6c
    9d0c:	f2c0 0101 	movt	r1, #1
    9d10:	f64b 337c 	movw	r3, #47996	; 0xbb7c
    9d14:	f2c0 0301 	movt	r3, #1
    9d18:	220d      	movs	r2, #13
    9d1a:	9815      	ldr	r0, [sp, #84]	; 0x54
    9d1c:	f7fe feed 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9d20:	e7ff      	b.n	9d22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9d22:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d24:	f7ff fcfa 	bl	971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9d28:	9014      	str	r0, [sp, #80]	; 0x50
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9d2c:	9814      	ldr	r0, [sp, #80]	; 0x50
    9d2e:	f000 0001 	and.w	r0, r0, #1
    9d32:	f7fe ff1b 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d36:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9d3a:	e7ff      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9d3c:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9d40:	07c1      	lsls	r1, r0, #31
    9d42:	2900      	cmp	r1, #0
    9d44:	d001      	beq.n	9d4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9d46:	e7ff      	b.n	9d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9d48:	e010      	b.n	9d6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9d4a:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9d4c:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9d50:	2000      	movs	r0, #0
    9d52:	901a      	str	r0, [sp, #104]	; 0x68
    9d54:	9019      	str	r0, [sp, #100]	; 0x64
    9d56:	9019      	str	r0, [sp, #100]	; 0x64
    9d58:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9d5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9d5c:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9d60:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d62:	f7ff fd81 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d66:	9013      	str	r0, [sp, #76]	; 0x4c
    9d68:	e00d      	b.n	9d86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9d6a:	defe      	udf	#254	; 0xfe
    9d6c:	f007 fd0e 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d70:	e003      	b.n	9d7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9d72:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9d76:	b076      	add	sp, #472	; 0x1d8
    9d78:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9d7a:	f00a fa63 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d7e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9d82:	e7ff      	b.n	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9d84:	e7f5      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    9d86:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9d88:	f000 0001 	and.w	r0, r0, #1
    9d8c:	f7fe feee 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d90:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9d94:	e7ff      	b.n	9d96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    9d96:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9d9a:	07c1      	lsls	r1, r0, #31
    9d9c:	2900      	cmp	r1, #0
    9d9e:	d001      	beq.n	9da4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    9da0:	e7ff      	b.n	9da2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    9da2:	e005      	b.n	9db0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    9da4:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9da6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9da8:	f009 ffd7 	bl	13d5a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9dac:	e009      	b.n	9dc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    9dae:	defe      	udf	#254	; 0xfe
    9db0:	f007 fcec 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9db4:	e7ff      	b.n	9db6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    9db6:	f00a fa45 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9dba:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9dbe:	e7ff      	b.n	9dc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    9dc0:	e7d7      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9dc2:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    9dc4:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    9dc8:	2000      	movs	r0, #0
    9dca:	901d      	str	r0, [sp, #116]	; 0x74
    9dcc:	901c      	str	r0, [sp, #112]	; 0x70
    9dce:	901c      	str	r0, [sp, #112]	; 0x70
    9dd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9dd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9dd4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    9dd8:	9816      	ldr	r0, [sp, #88]	; 0x58
    9dda:	f7ff fd45 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9dde:	9012      	str	r0, [sp, #72]	; 0x48
    9de0:	e7ff      	b.n	9de2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    9de2:	9812      	ldr	r0, [sp, #72]	; 0x48
    9de4:	f000 0001 	and.w	r0, r0, #1
    9de8:	f7fe fec0 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dec:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    9df0:	e7ff      	b.n	9df2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    9df2:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    9df6:	07c1      	lsls	r1, r0, #31
    9df8:	2900      	cmp	r1, #0
    9dfa:	d001      	beq.n	9e00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    9dfc:	e7ff      	b.n	9dfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    9dfe:	e005      	b.n	9e0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    9e00:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9e02:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9e04:	f009 ffa9 	bl	13d5a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9e08:	e009      	b.n	9e1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    9e0a:	defe      	udf	#254	; 0xfe
    9e0c:	f007 fcbe 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e10:	e7ff      	b.n	9e12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    9e12:	f00a fa17 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e16:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e1a:	e7ff      	b.n	9e1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    9e1c:	e7a9      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9e1e:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9e20:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    9e24:	f64b 3090 	movw	r0, #48016	; 0xbb90
    9e28:	f2c0 0001 	movt	r0, #1
    9e2c:	6800      	ldr	r0, [r0, #0]
    9e2e:	901f      	str	r0, [sp, #124]	; 0x7c
    9e30:	2003      	movs	r0, #3
    9e32:	9020      	str	r0, [sp, #128]	; 0x80
    9e34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e38:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    9e3c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e3e:	f7ff fd13 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e42:	9011      	str	r0, [sp, #68]	; 0x44
    9e44:	e7ff      	b.n	9e46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    9e46:	9811      	ldr	r0, [sp, #68]	; 0x44
    9e48:	f000 0001 	and.w	r0, r0, #1
    9e4c:	f7fe fe8e 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e50:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    9e54:	e7ff      	b.n	9e56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    9e56:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    9e5a:	07c1      	lsls	r1, r0, #31
    9e5c:	2900      	cmp	r1, #0
    9e5e:	d001      	beq.n	9e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    9e60:	e7ff      	b.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    9e62:	e014      	b.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    9e64:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9e66:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    9e6a:	f64b 3090 	movw	r0, #48016	; 0xbb90
    9e6e:	f2c0 0001 	movt	r0, #1
    9e72:	6800      	ldr	r0, [r0, #0]
    9e74:	9022      	str	r0, [sp, #136]	; 0x88
    9e76:	2003      	movs	r0, #3
    9e78:	9023      	str	r0, [sp, #140]	; 0x8c
    9e7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9e7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9e7e:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    9e82:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e84:	f7ff fcf0 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e88:	9010      	str	r0, [sp, #64]	; 0x40
    9e8a:	e009      	b.n	9ea0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9e8c:	defe      	udf	#254	; 0xfe
    9e8e:	f007 fc7d 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e92:	e7ff      	b.n	9e94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    9e94:	f00a f9d6 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e98:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e9c:	e7ff      	b.n	9e9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    9e9e:	e768      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9ea0:	9810      	ldr	r0, [sp, #64]	; 0x40
    9ea2:	f000 0001 	and.w	r0, r0, #1
    9ea6:	f7fe fe61 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9eaa:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    9eae:	e7ff      	b.n	9eb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    9eb0:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    9eb4:	07c1      	lsls	r1, r0, #31
    9eb6:	2900      	cmp	r1, #0
    9eb8:	d001      	beq.n	9ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    9eba:	e7ff      	b.n	9ebc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    9ebc:	e014      	b.n	9ee8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    9ebe:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    9ec0:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9ec4:	f64b 309c 	movw	r0, #48028	; 0xbb9c
    9ec8:	f2c0 0001 	movt	r0, #1
    9ecc:	6800      	ldr	r0, [r0, #0]
    9ece:	9025      	str	r0, [sp, #148]	; 0x94
    9ed0:	2006      	movs	r0, #6
    9ed2:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    9ed4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9ed6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9ed8:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    9edc:	9816      	ldr	r0, [sp, #88]	; 0x58
    9ede:	f7ff fcc3 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ee2:	900f      	str	r0, [sp, #60]	; 0x3c
    9ee4:	e009      	b.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9ee6:	defe      	udf	#254	; 0xfe
    9ee8:	f007 fc50 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eec:	e7ff      	b.n	9eee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    9eee:	f00a f9a9 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ef2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ef6:	e7ff      	b.n	9ef8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    9ef8:	e73b      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    9efa:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9efc:	f000 0001 	and.w	r0, r0, #1
    9f00:	f7fe fe34 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f04:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    9f08:	e7ff      	b.n	9f0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9f0a:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    9f0e:	07c1      	lsls	r1, r0, #31
    9f10:	2900      	cmp	r1, #0
    9f12:	d001      	beq.n	9f18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    9f14:	e7ff      	b.n	9f16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    9f16:	e014      	b.n	9f42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    9f18:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9f1a:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    9f1e:	f64b 30a4 	movw	r0, #48036	; 0xbba4
    9f22:	f2c0 0001 	movt	r0, #1
    9f26:	6800      	ldr	r0, [r0, #0]
    9f28:	9028      	str	r0, [sp, #160]	; 0xa0
    9f2a:	2001      	movs	r0, #1
    9f2c:	9029      	str	r0, [sp, #164]	; 0xa4
    9f2e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    9f30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    9f32:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    9f36:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f38:	f7ff fc96 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f3c:	900e      	str	r0, [sp, #56]	; 0x38
    9f3e:	e009      	b.n	9f54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    9f40:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9f42:	f007 fc23 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f46:	e7ff      	b.n	9f48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    9f48:	f00a f97c 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f4c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f50:	e7ff      	b.n	9f52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    9f52:	e70e      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9f54:	980e      	ldr	r0, [sp, #56]	; 0x38
    9f56:	f000 0001 	and.w	r0, r0, #1
    9f5a:	f7fe fe07 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f5e:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    9f62:	e7ff      	b.n	9f64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    9f64:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    9f68:	07c1      	lsls	r1, r0, #31
    9f6a:	2900      	cmp	r1, #0
    9f6c:	d001      	beq.n	9f72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    9f6e:	e7ff      	b.n	9f70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    9f70:	e014      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    9f72:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9f74:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    9f78:	f64b 30ac 	movw	r0, #48044	; 0xbbac
    9f7c:	f2c0 0001 	movt	r0, #1
    9f80:	6800      	ldr	r0, [r0, #0]
    9f82:	902b      	str	r0, [sp, #172]	; 0xac
    9f84:	2003      	movs	r0, #3
    9f86:	902c      	str	r0, [sp, #176]	; 0xb0
    9f88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    9f8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    9f8c:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    9f90:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f92:	f7ff fc69 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f96:	900d      	str	r0, [sp, #52]	; 0x34
    9f98:	e009      	b.n	9fae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9f9a:	defe      	udf	#254	; 0xfe
    9f9c:	f007 fbf6 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fa0:	e7ff      	b.n	9fa2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    9fa2:	f00a f94f 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fa6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9faa:	e7ff      	b.n	9fac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    9fac:	e6e1      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9fae:	980d      	ldr	r0, [sp, #52]	; 0x34
    9fb0:	f000 0001 	and.w	r0, r0, #1
    9fb4:	f7fe fdda 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb8:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    9fbc:	e7ff      	b.n	9fbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    9fbe:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    9fc2:	07c1      	lsls	r1, r0, #31
    9fc4:	2900      	cmp	r1, #0
    9fc6:	d001      	beq.n	9fcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    9fc8:	e7ff      	b.n	9fca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    9fca:	e014      	b.n	9ff6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    9fcc:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9fce:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    9fd2:	f64b 30b4 	movw	r0, #48052	; 0xbbb4
    9fd6:	f2c0 0001 	movt	r0, #1
    9fda:	6800      	ldr	r0, [r0, #0]
    9fdc:	902e      	str	r0, [sp, #184]	; 0xb8
    9fde:	2001      	movs	r0, #1
    9fe0:	902f      	str	r0, [sp, #188]	; 0xbc
    9fe2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    9fe4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    9fe6:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    9fea:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fec:	f7ff fc3c 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ff0:	900c      	str	r0, [sp, #48]	; 0x30
    9ff2:	e009      	b.n	a008 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9ff4:	defe      	udf	#254	; 0xfe
    9ff6:	f007 fbc9 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ffa:	e7ff      	b.n	9ffc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    9ffc:	f00a f922 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a000:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a004:	e7ff      	b.n	a006 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a006:	e6b4      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a008:	980c      	ldr	r0, [sp, #48]	; 0x30
    a00a:	f000 0001 	and.w	r0, r0, #1
    a00e:	f7fe fdad 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a012:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a016:	e7ff      	b.n	a018 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a018:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a01c:	07c1      	lsls	r1, r0, #31
    a01e:	2900      	cmp	r1, #0
    a020:	d001      	beq.n	a026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a022:	e7ff      	b.n	a024 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a024:	e014      	b.n	a050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a026:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a028:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a02c:	f64b 30bc 	movw	r0, #48060	; 0xbbbc
    a030:	f2c0 0001 	movt	r0, #1
    a034:	6800      	ldr	r0, [r0, #0]
    a036:	9031      	str	r0, [sp, #196]	; 0xc4
    a038:	2002      	movs	r0, #2
    a03a:	9032      	str	r0, [sp, #200]	; 0xc8
    a03c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a03e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a040:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a044:	9816      	ldr	r0, [sp, #88]	; 0x58
    a046:	f7ff fc0f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a04a:	900b      	str	r0, [sp, #44]	; 0x2c
    a04c:	e009      	b.n	a062 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a04e:	defe      	udf	#254	; 0xfe
    a050:	f007 fb9c 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a054:	e7ff      	b.n	a056 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a056:	f00a f8f5 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a05a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a05e:	e7ff      	b.n	a060 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a060:	e687      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a062:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a064:	f000 0001 	and.w	r0, r0, #1
    a068:	f7fe fd80 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a06c:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a070:	e7ff      	b.n	a072 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a072:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a076:	07c1      	lsls	r1, r0, #31
    a078:	2900      	cmp	r1, #0
    a07a:	d001      	beq.n	a080 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a07c:	e7ff      	b.n	a07e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a07e:	e014      	b.n	a0aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a080:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a082:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a086:	f64b 30c4 	movw	r0, #48068	; 0xbbc4
    a08a:	f2c0 0001 	movt	r0, #1
    a08e:	6800      	ldr	r0, [r0, #0]
    a090:	9034      	str	r0, [sp, #208]	; 0xd0
    a092:	2002      	movs	r0, #2
    a094:	9035      	str	r0, [sp, #212]	; 0xd4
    a096:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a098:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a09a:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a09e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0a0:	f7ff fbe2 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0a4:	900a      	str	r0, [sp, #40]	; 0x28
    a0a6:	e009      	b.n	a0bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a0a8:	defe      	udf	#254	; 0xfe
    a0aa:	f007 fb6f 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0ae:	e7ff      	b.n	a0b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a0b0:	f00a f8c8 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0b4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0b8:	e7ff      	b.n	a0ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a0ba:	e65a      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a0bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    a0be:	f000 0001 	and.w	r0, r0, #1
    a0c2:	f7fe fd53 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0c6:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a0ca:	e7ff      	b.n	a0cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a0cc:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a0d0:	07c1      	lsls	r1, r0, #31
    a0d2:	2900      	cmp	r1, #0
    a0d4:	d001      	beq.n	a0da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a0d6:	e7ff      	b.n	a0d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a0d8:	e014      	b.n	a104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a0da:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a0dc:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a0e0:	f64b 30cc 	movw	r0, #48076	; 0xbbcc
    a0e4:	f2c0 0001 	movt	r0, #1
    a0e8:	6800      	ldr	r0, [r0, #0]
    a0ea:	9037      	str	r0, [sp, #220]	; 0xdc
    a0ec:	2002      	movs	r0, #2
    a0ee:	9038      	str	r0, [sp, #224]	; 0xe0
    a0f0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a0f2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a0f4:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a0f8:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0fa:	f7ff fbb5 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0fe:	9009      	str	r0, [sp, #36]	; 0x24
    a100:	e009      	b.n	a116 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a102:	defe      	udf	#254	; 0xfe
    a104:	f007 fb42 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a108:	e7ff      	b.n	a10a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a10a:	f00a f89b 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a10e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a112:	e7ff      	b.n	a114 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a114:	e62d      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a116:	9809      	ldr	r0, [sp, #36]	; 0x24
    a118:	f000 0001 	and.w	r0, r0, #1
    a11c:	f7fe fd26 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a120:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a124:	e7ff      	b.n	a126 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a126:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a12a:	07c1      	lsls	r1, r0, #31
    a12c:	2900      	cmp	r1, #0
    a12e:	d001      	beq.n	a134 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a130:	e7ff      	b.n	a132 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a132:	e014      	b.n	a15e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a134:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a136:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a13a:	f64b 30d4 	movw	r0, #48084	; 0xbbd4
    a13e:	f2c0 0001 	movt	r0, #1
    a142:	6800      	ldr	r0, [r0, #0]
    a144:	903a      	str	r0, [sp, #232]	; 0xe8
    a146:	2001      	movs	r0, #1
    a148:	903b      	str	r0, [sp, #236]	; 0xec
    a14a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a14c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a14e:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a152:	9816      	ldr	r0, [sp, #88]	; 0x58
    a154:	f7ff fb88 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a158:	9008      	str	r0, [sp, #32]
    a15a:	e009      	b.n	a170 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a15c:	defe      	udf	#254	; 0xfe
    a15e:	f007 fb15 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a162:	e7ff      	b.n	a164 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a164:	f00a f86e 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a168:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a16c:	e7ff      	b.n	a16e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a16e:	e600      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a170:	9808      	ldr	r0, [sp, #32]
    a172:	f000 0001 	and.w	r0, r0, #1
    a176:	f7fe fcf9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a17a:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a17e:	e7ff      	b.n	a180 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a180:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a184:	07c1      	lsls	r1, r0, #31
    a186:	2900      	cmp	r1, #0
    a188:	d001      	beq.n	a18e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a18a:	e7ff      	b.n	a18c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a18c:	e006      	b.n	a19c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a18e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a190:	7d41      	ldrb	r1, [r0, #21]
    a192:	07c9      	lsls	r1, r1, #31
    a194:	2900      	cmp	r1, #0
    a196:	d11a      	bne.n	a1ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a198:	e009      	b.n	a1ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a19a:	defe      	udf	#254	; 0xfe
    a19c:	f007 faf6 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1a0:	e7ff      	b.n	a1a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a1a2:	f00a f84f 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1a6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1aa:	e7ff      	b.n	a1ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a1ac:	e5e1      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a1ae:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a1b0:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a1b4:	2000      	movs	r0, #0
    a1b6:	9041      	str	r0, [sp, #260]	; 0x104
    a1b8:	9040      	str	r0, [sp, #256]	; 0x100
    a1ba:	9040      	str	r0, [sp, #256]	; 0x100
    a1bc:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a1be:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a1c0:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a1c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1c6:	f7ff fb4f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1ca:	9007      	str	r0, [sp, #28]
    a1cc:	e02a      	b.n	a224 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a1ce:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a1d0:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a1d4:	2000      	movs	r0, #0
    a1d6:	903e      	str	r0, [sp, #248]	; 0xf8
    a1d8:	903d      	str	r0, [sp, #244]	; 0xf4
    a1da:	903d      	str	r0, [sp, #244]	; 0xf4
    a1dc:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a1de:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a1e0:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a1e4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1e6:	f7ff fb3f 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1ea:	9006      	str	r0, [sp, #24]
    a1ec:	e7ff      	b.n	a1ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a1ee:	9806      	ldr	r0, [sp, #24]
    a1f0:	f000 0001 	and.w	r0, r0, #1
    a1f4:	f7fe fcba 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1f8:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a1fc:	e7ff      	b.n	a1fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a1fe:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a202:	07c1      	lsls	r1, r0, #31
    a204:	2900      	cmp	r1, #0
    a206:	d001      	beq.n	a20c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a208:	e7ff      	b.n	a20a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a20a:	e001      	b.n	a210 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a20c:	e024      	b.n	a258 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a20e:	defe      	udf	#254	; 0xfe
    a210:	f007 fabc 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a214:	e7ff      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a216:	f00a f815 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a21a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a21e:	e7ff      	b.n	a220 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a220:	e7ff      	b.n	a222 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a222:	e5a6      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a224:	9807      	ldr	r0, [sp, #28]
    a226:	f000 0001 	and.w	r0, r0, #1
    a22a:	f7fe fc9f 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a22e:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a232:	e7ff      	b.n	a234 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a234:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a238:	07c1      	lsls	r1, r0, #31
    a23a:	2900      	cmp	r1, #0
    a23c:	d001      	beq.n	a242 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a23e:	e7ff      	b.n	a240 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a240:	e001      	b.n	a246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a242:	e009      	b.n	a258 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a244:	defe      	udf	#254	; 0xfe
    a246:	f007 faa1 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a24a:	e7ff      	b.n	a24c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a24c:	f009 fffa 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a250:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a254:	e7ff      	b.n	a256 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a256:	e7e4      	b.n	a222 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a258:	9816      	ldr	r0, [sp, #88]	; 0x58
    a25a:	7d01      	ldrb	r1, [r0, #20]
    a25c:	07c9      	lsls	r1, r1, #31
    a25e:	2900      	cmp	r1, #0
    a260:	d114      	bne.n	a28c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a262:	e7ff      	b.n	a264 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a264:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a266:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a26a:	f64b 30e4 	movw	r0, #48100	; 0xbbe4
    a26e:	f2c0 0001 	movt	r0, #1
    a272:	6800      	ldr	r0, [r0, #0]
    a274:	9046      	str	r0, [sp, #280]	; 0x118
    a276:	2001      	movs	r0, #1
    a278:	9047      	str	r0, [sp, #284]	; 0x11c
    a27a:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a27c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a27e:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a282:	9816      	ldr	r0, [sp, #88]	; 0x58
    a284:	f7ff faf0 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a288:	9005      	str	r0, [sp, #20]
    a28a:	e02e      	b.n	a2ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a28c:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a28e:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a292:	f64b 30dc 	movw	r0, #48092	; 0xbbdc
    a296:	f2c0 0001 	movt	r0, #1
    a29a:	6800      	ldr	r0, [r0, #0]
    a29c:	9043      	str	r0, [sp, #268]	; 0x10c
    a29e:	2001      	movs	r0, #1
    a2a0:	9044      	str	r0, [sp, #272]	; 0x110
    a2a2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a2a4:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a2a6:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a2aa:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ac:	f7ff fadc 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2b0:	9004      	str	r0, [sp, #16]
    a2b2:	e7ff      	b.n	a2b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a2b4:	9804      	ldr	r0, [sp, #16]
    a2b6:	f000 0001 	and.w	r0, r0, #1
    a2ba:	f7fe fc57 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2be:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a2c2:	e7ff      	b.n	a2c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a2c4:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a2c8:	07c1      	lsls	r1, r0, #31
    a2ca:	2900      	cmp	r1, #0
    a2cc:	d001      	beq.n	a2d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a2ce:	e7ff      	b.n	a2d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a2d0:	e001      	b.n	a2d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a2d2:	e024      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a2d4:	defe      	udf	#254	; 0xfe
    a2d6:	f007 fa59 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2da:	e7ff      	b.n	a2dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a2dc:	f009 ffb2 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2e0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2e4:	e7ff      	b.n	a2e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a2e6:	e7ff      	b.n	a2e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a2e8:	e543      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a2ea:	9805      	ldr	r0, [sp, #20]
    a2ec:	f000 0001 	and.w	r0, r0, #1
    a2f0:	f7fe fc3c 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2f4:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a2f8:	e7ff      	b.n	a2fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a2fa:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a2fe:	07c1      	lsls	r1, r0, #31
    a300:	2900      	cmp	r1, #0
    a302:	d001      	beq.n	a308 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a304:	e7ff      	b.n	a306 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a306:	e001      	b.n	a30c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a308:	e009      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a30a:	defe      	udf	#254	; 0xfe
    a30c:	f007 fa3e 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a310:	e7ff      	b.n	a312 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a312:	f009 ff97 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a316:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a31a:	e7ff      	b.n	a31c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a31c:	e7e4      	b.n	a2e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a31e:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a320:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a324:	f64b 30ec 	movw	r0, #48108	; 0xbbec
    a328:	f2c0 0001 	movt	r0, #1
    a32c:	6800      	ldr	r0, [r0, #0]
    a32e:	9049      	str	r0, [sp, #292]	; 0x124
    a330:	2001      	movs	r0, #1
    a332:	904a      	str	r0, [sp, #296]	; 0x128
    a334:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a336:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a338:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a33c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a33e:	f7ff fa93 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a342:	9003      	str	r0, [sp, #12]
    a344:	e7ff      	b.n	a346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a346:	9803      	ldr	r0, [sp, #12]
    a348:	f000 0001 	and.w	r0, r0, #1
    a34c:	f7fe fc0e 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a350:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a354:	e7ff      	b.n	a356 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a356:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a35a:	07c1      	lsls	r1, r0, #31
    a35c:	2900      	cmp	r1, #0
    a35e:	d001      	beq.n	a364 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a360:	e7ff      	b.n	a362 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a362:	e010      	b.n	a386 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a364:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a366:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a36a:	2000      	movs	r0, #0
    a36c:	904d      	str	r0, [sp, #308]	; 0x134
    a36e:	904c      	str	r0, [sp, #304]	; 0x130
    a370:	904c      	str	r0, [sp, #304]	; 0x130
    a372:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a374:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a376:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a37a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a37c:	f7ff fa74 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a380:	9002      	str	r0, [sp, #8]
    a382:	e009      	b.n	a398 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a384:	defe      	udf	#254	; 0xfe
    a386:	f007 fa01 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a38a:	e7ff      	b.n	a38c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a38c:	f009 ff5a 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a390:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a394:	e7ff      	b.n	a396 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a396:	e4ec      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a398:	9802      	ldr	r0, [sp, #8]
    a39a:	f000 0001 	and.w	r0, r0, #1
    a39e:	f7fe fbe5 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3a2:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a3a6:	e7ff      	b.n	a3a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a3a8:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a3ac:	07c1      	lsls	r1, r0, #31
    a3ae:	2900      	cmp	r1, #0
    a3b0:	d001      	beq.n	a3b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a3b2:	e7ff      	b.n	a3b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a3b4:	e005      	b.n	a3c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a3b6:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a3b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a3ba:	f009 fcce 	bl	13d5a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a3be:	e009      	b.n	a3d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a3c0:	defe      	udf	#254	; 0xfe
    a3c2:	f007 f9e3 	bl	1178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3c6:	e7ff      	b.n	a3c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a3c8:	f009 ff3c 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3cc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3d0:	e7ff      	b.n	a3d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a3d2:	e4ce      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a3d4:	f008 fcfc 	bl	12dd0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a3d8:	9001      	str	r0, [sp, #4]
    a3da:	e7ff      	b.n	a3dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a3dc:	f64b 211c 	movw	r1, #47644	; 0xba1c
    a3e0:	f2c0 0101 	movt	r1, #1
    a3e4:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    a3e8:	f2c0 0301 	movt	r3, #1
    a3ec:	220e      	movs	r2, #14
    a3ee:	9801      	ldr	r0, [sp, #4]
    a3f0:	f7fe fb83 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a3f4:	e7ff      	b.n	a3f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a3f6:	2000      	movs	r0, #0
        Ok(())
    a3f8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a3fc:	e4b9      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a3fe <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a3fe:	b580      	push	{r7, lr}
    a400:	b08a      	sub	sp, #40	; 0x28
    a402:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a404:	f000 fa25 	bl	a852 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a408:	9307      	str	r3, [sp, #28]
    a40a:	9206      	str	r2, [sp, #24]
    a40c:	9105      	str	r1, [sp, #20]
    a40e:	9004      	str	r0, [sp, #16]
    a410:	e7ff      	b.n	a412 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a412:	a804      	add	r0, sp, #16
    a414:	f009 fd18 	bl	13e48 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a418:	9003      	str	r0, [sp, #12]
    a41a:	e7ff      	b.n	a41c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a41c:	9803      	ldr	r0, [sp, #12]
    a41e:	f009 fd89 	bl	13f34 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a422:	9002      	str	r0, [sp, #8]
    a424:	9101      	str	r1, [sp, #4]
    a426:	e7ff      	b.n	a428 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a428:	9802      	ldr	r0, [sp, #8]
    a42a:	f000 0001 	and.w	r0, r0, #1
    a42e:	9901      	ldr	r1, [sp, #4]
    a430:	b00a      	add	sp, #40	; 0x28
    a432:	bd80      	pop	{r7, pc}

0000a434 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a434:	b082      	sub	sp, #8
    a436:	4601      	mov	r1, r0
    a438:	f8ad 0004 	strh.w	r0, [sp, #4]
    a43c:	ba00      	rev	r0, r0
    a43e:	0c00      	lsrs	r0, r0, #16
    a440:	f8ad 0006 	strh.w	r0, [sp, #6]
    a444:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a448:	9000      	str	r0, [sp, #0]
    a44a:	e7ff      	b.n	a44c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a44c:	9800      	ldr	r0, [sp, #0]
    a44e:	b002      	add	sp, #8
    a450:	4770      	bx	lr

0000a452 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a452:	b580      	push	{r7, lr}
    a454:	b084      	sub	sp, #16
    a456:	4601      	mov	r1, r0
    a458:	f8ad 000e 	strh.w	r0, [sp, #14]
    a45c:	9102      	str	r1, [sp, #8]
    a45e:	f7ff ffe9 	bl	a434 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a462:	9001      	str	r0, [sp, #4]
    a464:	e7ff      	b.n	a466 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a466:	9801      	ldr	r0, [sp, #4]
    a468:	b004      	add	sp, #16
    a46a:	bd80      	pop	{r7, pc}

0000a46c <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a46c:	b580      	push	{r7, lr}
    a46e:	b084      	sub	sp, #16
    a470:	9002      	str	r0, [sp, #8]
    a472:	9802      	ldr	r0, [sp, #8]
    a474:	f009 fca9 	bl	13dca <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a478:	9001      	str	r0, [sp, #4]
    a47a:	9100      	str	r1, [sp, #0]
    a47c:	e7ff      	b.n	a47e <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a47e:	9801      	ldr	r0, [sp, #4]
    a480:	f000 0001 	and.w	r0, r0, #1
    a484:	9900      	ldr	r1, [sp, #0]
    a486:	b004      	add	sp, #16
    a488:	bd80      	pop	{r7, pc}

0000a48a <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a48a:	b081      	sub	sp, #4
    a48c:	9000      	str	r0, [sp, #0]
    a48e:	b001      	add	sp, #4
    a490:	4770      	bx	lr

0000a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a492:	b089      	sub	sp, #36	; 0x24
    a494:	9005      	str	r0, [sp, #20]
    a496:	9106      	str	r1, [sp, #24]
    a498:	9107      	str	r1, [sp, #28]
    a49a:	9907      	ldr	r1, [sp, #28]
    a49c:	9002      	str	r0, [sp, #8]
    a49e:	9101      	str	r1, [sp, #4]
    a4a0:	e7ff      	b.n	a4a2 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a4a2:	9802      	ldr	r0, [sp, #8]
    a4a4:	9008      	str	r0, [sp, #32]
    a4a6:	9908      	ldr	r1, [sp, #32]
    a4a8:	9100      	str	r1, [sp, #0]
    a4aa:	e7ff      	b.n	a4ac <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a4ac:	9800      	ldr	r0, [sp, #0]
    a4ae:	9003      	str	r0, [sp, #12]
    a4b0:	9901      	ldr	r1, [sp, #4]
    a4b2:	9104      	str	r1, [sp, #16]
    a4b4:	9803      	ldr	r0, [sp, #12]
    a4b6:	9904      	ldr	r1, [sp, #16]
    a4b8:	b009      	add	sp, #36	; 0x24
    a4ba:	4770      	bx	lr

0000a4bc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a4bc:	b08a      	sub	sp, #40	; 0x28
    a4be:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a4c0:	7800      	ldrb	r0, [r0, #0]
    a4c2:	9001      	str	r0, [sp, #4]
    a4c4:	9901      	ldr	r1, [sp, #4]
    a4c6:	e8df f011 	tbh	[pc, r1, lsl #1]
    a4ca:	0103      	.short	0x0103
    a4cc:	01020107 	.word	0x01020107
    a4d0:	010c0102 	.word	0x010c0102
    a4d4:	01020102 	.word	0x01020102
    a4d8:	01020102 	.word	0x01020102
    a4dc:	01020111 	.word	0x01020111
    a4e0:	01020102 	.word	0x01020102
    a4e4:	01020102 	.word	0x01020102
    a4e8:	01160102 	.word	0x01160102
    a4ec:	0120011b 	.word	0x0120011b
    a4f0:	01020125 	.word	0x01020125
    a4f4:	01020102 	.word	0x01020102
    a4f8:	01020102 	.word	0x01020102
    a4fc:	01020102 	.word	0x01020102
    a500:	01020102 	.word	0x01020102
    a504:	01020102 	.word	0x01020102
    a508:	012a0102 	.word	0x012a0102
    a50c:	0102012f 	.word	0x0102012f
    a510:	01020102 	.word	0x01020102
    a514:	01020102 	.word	0x01020102
    a518:	01340102 	.word	0x01340102
    a51c:	013e0139 	.word	0x013e0139
    a520:	01480143 	.word	0x01480143
    a524:	014d0102 	.word	0x014d0102
    a528:	01520102 	.word	0x01520102
    a52c:	01020102 	.word	0x01020102
    a530:	01020102 	.word	0x01020102
    a534:	015c0102 	.word	0x015c0102
    a538:	01020102 	.word	0x01020102
    a53c:	01570102 	.word	0x01570102
    a540:	01020102 	.word	0x01020102
    a544:	01020102 	.word	0x01020102
    a548:	01020102 	.word	0x01020102
    a54c:	01020102 	.word	0x01020102
    a550:	01020102 	.word	0x01020102
    a554:	01020102 	.word	0x01020102
    a558:	01020102 	.word	0x01020102
    a55c:	01020102 	.word	0x01020102
    a560:	01020102 	.word	0x01020102
    a564:	01020102 	.word	0x01020102
    a568:	01020102 	.word	0x01020102
    a56c:	01020102 	.word	0x01020102
    a570:	01020102 	.word	0x01020102
    a574:	01020102 	.word	0x01020102
    a578:	01020102 	.word	0x01020102
    a57c:	01020102 	.word	0x01020102
    a580:	01020102 	.word	0x01020102
    a584:	01020102 	.word	0x01020102
    a588:	01020102 	.word	0x01020102
    a58c:	01020102 	.word	0x01020102
    a590:	01020102 	.word	0x01020102
    a594:	01020102 	.word	0x01020102
    a598:	01020102 	.word	0x01020102
    a59c:	01020102 	.word	0x01020102
    a5a0:	01020102 	.word	0x01020102
    a5a4:	01020102 	.word	0x01020102
    a5a8:	01020102 	.word	0x01020102
    a5ac:	01020102 	.word	0x01020102
    a5b0:	01020102 	.word	0x01020102
    a5b4:	01020102 	.word	0x01020102
    a5b8:	01020102 	.word	0x01020102
    a5bc:	01020102 	.word	0x01020102
    a5c0:	01020102 	.word	0x01020102
    a5c4:	01020102 	.word	0x01020102
    a5c8:	01020102 	.word	0x01020102
    a5cc:	01020102 	.word	0x01020102
    a5d0:	01020102 	.word	0x01020102
    a5d4:	01020102 	.word	0x01020102
    a5d8:	01020102 	.word	0x01020102
    a5dc:	01020102 	.word	0x01020102
    a5e0:	01020102 	.word	0x01020102
    a5e4:	01020102 	.word	0x01020102
    a5e8:	01020102 	.word	0x01020102
    a5ec:	01020102 	.word	0x01020102
    a5f0:	01020102 	.word	0x01020102
    a5f4:	01020102 	.word	0x01020102
    a5f8:	01020102 	.word	0x01020102
    a5fc:	01020102 	.word	0x01020102
    a600:	01020102 	.word	0x01020102
    a604:	01020102 	.word	0x01020102
    a608:	01020102 	.word	0x01020102
    a60c:	01020102 	.word	0x01020102
    a610:	01020102 	.word	0x01020102
    a614:	01020102 	.word	0x01020102
    a618:	01020102 	.word	0x01020102
    a61c:	01020102 	.word	0x01020102
    a620:	01020102 	.word	0x01020102
    a624:	01020102 	.word	0x01020102
    a628:	01020102 	.word	0x01020102
    a62c:	01660161 	.word	0x01660161
    a630:	0170016b 	.word	0x0170016b
    a634:	01750102 	.word	0x01750102
    a638:	01020102 	.word	0x01020102
    a63c:	01020102 	.word	0x01020102
    a640:	01020102 	.word	0x01020102
    a644:	01020102 	.word	0x01020102
    a648:	017a0102 	.word	0x017a0102
    a64c:	0184017f 	.word	0x0184017f
    a650:	018e0189 	.word	0x018e0189
    a654:	01020193 	.word	0x01020193
    a658:	01020102 	.word	0x01020102
    a65c:	01020102 	.word	0x01020102
    a660:	01020102 	.word	0x01020102
    a664:	01020102 	.word	0x01020102
    a668:	01020102 	.word	0x01020102
    a66c:	01020102 	.word	0x01020102
    a670:	01020102 	.word	0x01020102
    a674:	01020102 	.word	0x01020102
    a678:	01020102 	.word	0x01020102
    a67c:	01980102 	.word	0x01980102
    a680:	01a2019d 	.word	0x01a2019d
    a684:	010201a7 	.word	0x010201a7
    a688:	01b10102 	.word	0x01b10102
    a68c:	010200fd 	.word	0x010200fd
    a690:	01020102 	.word	0x01020102
    a694:	01020102 	.word	0x01020102
    a698:	01020102 	.word	0x01020102
    a69c:	01020102 	.word	0x01020102
    a6a0:	01020102 	.word	0x01020102
    a6a4:	01020102 	.word	0x01020102
    a6a8:	01020102 	.word	0x01020102
    a6ac:	01020102 	.word	0x01020102
    a6b0:	01020102 	.word	0x01020102
    a6b4:	01020102 	.word	0x01020102
    a6b8:	01020102 	.word	0x01020102
    a6bc:	01020102 	.word	0x01020102
    a6c0:	01ac0102 	.word	0x01ac0102
    a6c4:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a6c6:	9007      	str	r0, [sp, #28]
    a6c8:	20e1      	movs	r0, #225	; 0xe1
    a6ca:	9006      	str	r0, [sp, #24]
    a6cc:	e0b3      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6ce:	defe      	udf	#254	; 0xfe
    a6d0:	2000      	movs	r0, #0
    a6d2:	9007      	str	r0, [sp, #28]
    a6d4:	9006      	str	r0, [sp, #24]
    a6d6:	e0ae      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6d8:	2000      	movs	r0, #0
    a6da:	9007      	str	r0, [sp, #28]
    a6dc:	2001      	movs	r0, #1
    a6de:	9006      	str	r0, [sp, #24]
    a6e0:	e0a9      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6e2:	2000      	movs	r0, #0
    a6e4:	9007      	str	r0, [sp, #28]
    a6e6:	2004      	movs	r0, #4
    a6e8:	9006      	str	r0, [sp, #24]
    a6ea:	e0a4      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6ec:	2000      	movs	r0, #0
    a6ee:	9007      	str	r0, [sp, #28]
    a6f0:	2009      	movs	r0, #9
    a6f2:	9006      	str	r0, [sp, #24]
    a6f4:	e09f      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6f6:	2000      	movs	r0, #0
    a6f8:	9007      	str	r0, [sp, #28]
    a6fa:	2010      	movs	r0, #16
    a6fc:	9006      	str	r0, [sp, #24]
    a6fe:	e09a      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a700:	2000      	movs	r0, #0
    a702:	9007      	str	r0, [sp, #28]
    a704:	2011      	movs	r0, #17
    a706:	9006      	str	r0, [sp, #24]
    a708:	e095      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a70a:	2000      	movs	r0, #0
    a70c:	9007      	str	r0, [sp, #28]
    a70e:	2012      	movs	r0, #18
    a710:	9006      	str	r0, [sp, #24]
    a712:	e090      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a714:	2000      	movs	r0, #0
    a716:	9007      	str	r0, [sp, #28]
    a718:	2013      	movs	r0, #19
    a71a:	9006      	str	r0, [sp, #24]
    a71c:	e08b      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a71e:	2000      	movs	r0, #0
    a720:	9007      	str	r0, [sp, #28]
    a722:	2020      	movs	r0, #32
    a724:	9006      	str	r0, [sp, #24]
    a726:	e086      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a728:	2000      	movs	r0, #0
    a72a:	9007      	str	r0, [sp, #28]
    a72c:	2021      	movs	r0, #33	; 0x21
    a72e:	9006      	str	r0, [sp, #24]
    a730:	e081      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a732:	2000      	movs	r0, #0
    a734:	9007      	str	r0, [sp, #28]
    a736:	2028      	movs	r0, #40	; 0x28
    a738:	9006      	str	r0, [sp, #24]
    a73a:	e07c      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a73c:	2000      	movs	r0, #0
    a73e:	9007      	str	r0, [sp, #28]
    a740:	2029      	movs	r0, #41	; 0x29
    a742:	9006      	str	r0, [sp, #24]
    a744:	e077      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a746:	2000      	movs	r0, #0
    a748:	9007      	str	r0, [sp, #28]
    a74a:	202a      	movs	r0, #42	; 0x2a
    a74c:	9006      	str	r0, [sp, #24]
    a74e:	e072      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a750:	2000      	movs	r0, #0
    a752:	9007      	str	r0, [sp, #28]
    a754:	202b      	movs	r0, #43	; 0x2b
    a756:	9006      	str	r0, [sp, #24]
    a758:	e06d      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a75a:	2000      	movs	r0, #0
    a75c:	9007      	str	r0, [sp, #28]
    a75e:	202c      	movs	r0, #44	; 0x2c
    a760:	9006      	str	r0, [sp, #24]
    a762:	e068      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a764:	2000      	movs	r0, #0
    a766:	9007      	str	r0, [sp, #28]
    a768:	202e      	movs	r0, #46	; 0x2e
    a76a:	9006      	str	r0, [sp, #24]
    a76c:	e063      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a76e:	2000      	movs	r0, #0
    a770:	9007      	str	r0, [sp, #28]
    a772:	2030      	movs	r0, #48	; 0x30
    a774:	9006      	str	r0, [sp, #24]
    a776:	e05e      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a778:	2000      	movs	r0, #0
    a77a:	9007      	str	r0, [sp, #28]
    a77c:	203a      	movs	r0, #58	; 0x3a
    a77e:	9006      	str	r0, [sp, #24]
    a780:	e059      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a782:	2000      	movs	r0, #0
    a784:	9007      	str	r0, [sp, #28]
    a786:	2036      	movs	r0, #54	; 0x36
    a788:	9006      	str	r0, [sp, #24]
    a78a:	e054      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a78c:	2000      	movs	r0, #0
    a78e:	9007      	str	r0, [sp, #28]
    a790:	20b1      	movs	r0, #177	; 0xb1
    a792:	9006      	str	r0, [sp, #24]
    a794:	e04f      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a796:	2000      	movs	r0, #0
    a798:	9007      	str	r0, [sp, #28]
    a79a:	20b2      	movs	r0, #178	; 0xb2
    a79c:	9006      	str	r0, [sp, #24]
    a79e:	e04a      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7a0:	2000      	movs	r0, #0
    a7a2:	9007      	str	r0, [sp, #28]
    a7a4:	20b3      	movs	r0, #179	; 0xb3
    a7a6:	9006      	str	r0, [sp, #24]
    a7a8:	e045      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7aa:	2000      	movs	r0, #0
    a7ac:	9007      	str	r0, [sp, #28]
    a7ae:	20b4      	movs	r0, #180	; 0xb4
    a7b0:	9006      	str	r0, [sp, #24]
    a7b2:	e040      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7b4:	2000      	movs	r0, #0
    a7b6:	9007      	str	r0, [sp, #28]
    a7b8:	20b6      	movs	r0, #182	; 0xb6
    a7ba:	9006      	str	r0, [sp, #24]
    a7bc:	e03b      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7be:	2000      	movs	r0, #0
    a7c0:	9007      	str	r0, [sp, #28]
    a7c2:	20c0      	movs	r0, #192	; 0xc0
    a7c4:	9006      	str	r0, [sp, #24]
    a7c6:	e036      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7c8:	2000      	movs	r0, #0
    a7ca:	9007      	str	r0, [sp, #28]
    a7cc:	20c1      	movs	r0, #193	; 0xc1
    a7ce:	9006      	str	r0, [sp, #24]
    a7d0:	e031      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7d2:	2000      	movs	r0, #0
    a7d4:	9007      	str	r0, [sp, #28]
    a7d6:	20c2      	movs	r0, #194	; 0xc2
    a7d8:	9006      	str	r0, [sp, #24]
    a7da:	e02c      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7dc:	2000      	movs	r0, #0
    a7de:	9007      	str	r0, [sp, #28]
    a7e0:	20c3      	movs	r0, #195	; 0xc3
    a7e2:	9006      	str	r0, [sp, #24]
    a7e4:	e027      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7e6:	2000      	movs	r0, #0
    a7e8:	9007      	str	r0, [sp, #28]
    a7ea:	20c4      	movs	r0, #196	; 0xc4
    a7ec:	9006      	str	r0, [sp, #24]
    a7ee:	e022      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7f0:	2000      	movs	r0, #0
    a7f2:	9007      	str	r0, [sp, #28]
    a7f4:	20c5      	movs	r0, #197	; 0xc5
    a7f6:	9006      	str	r0, [sp, #24]
    a7f8:	e01d      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7fa:	2000      	movs	r0, #0
    a7fc:	9007      	str	r0, [sp, #28]
    a7fe:	20da      	movs	r0, #218	; 0xda
    a800:	9006      	str	r0, [sp, #24]
    a802:	e018      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a804:	2000      	movs	r0, #0
    a806:	9007      	str	r0, [sp, #28]
    a808:	20db      	movs	r0, #219	; 0xdb
    a80a:	9006      	str	r0, [sp, #24]
    a80c:	e013      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a80e:	2000      	movs	r0, #0
    a810:	9007      	str	r0, [sp, #28]
    a812:	20dc      	movs	r0, #220	; 0xdc
    a814:	9006      	str	r0, [sp, #24]
    a816:	e00e      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a818:	2000      	movs	r0, #0
    a81a:	9007      	str	r0, [sp, #28]
    a81c:	20dd      	movs	r0, #221	; 0xdd
    a81e:	9006      	str	r0, [sp, #24]
    a820:	e009      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a822:	2000      	movs	r0, #0
    a824:	9007      	str	r0, [sp, #28]
    a826:	20fc      	movs	r0, #252	; 0xfc
    a828:	9006      	str	r0, [sp, #24]
    a82a:	e004      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a82c:	2000      	movs	r0, #0
    a82e:	9007      	str	r0, [sp, #28]
    a830:	20e0      	movs	r0, #224	; 0xe0
    a832:	9006      	str	r0, [sp, #24]
    a834:	e7ff      	b.n	a836 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a836:	9806      	ldr	r0, [sp, #24]
    a838:	9907      	ldr	r1, [sp, #28]
    a83a:	9105      	str	r1, [sp, #20]
    a83c:	9004      	str	r0, [sp, #16]
    a83e:	2000      	movs	r0, #0
    a840:	9003      	str	r0, [sp, #12]
    a842:	2001      	movs	r0, #1
    a844:	9002      	str	r0, [sp, #8]
    a846:	9802      	ldr	r0, [sp, #8]
    a848:	9903      	ldr	r1, [sp, #12]
    a84a:	9a04      	ldr	r2, [sp, #16]
    a84c:	9b05      	ldr	r3, [sp, #20]
    a84e:	b00a      	add	sp, #40	; 0x28
    a850:	4770      	bx	lr

0000a852 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    a852:	b580      	push	{r7, lr}
    a854:	b08a      	sub	sp, #40	; 0x28
    a856:	9009      	str	r0, [sp, #36]	; 0x24
    a858:	f7ff fe30 	bl	a4bc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    a85c:	9108      	str	r1, [sp, #32]
    a85e:	9007      	str	r0, [sp, #28]
    a860:	9306      	str	r3, [sp, #24]
    a862:	9205      	str	r2, [sp, #20]
    a864:	e7ff      	b.n	a866 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    a866:	9807      	ldr	r0, [sp, #28]
    a868:	9908      	ldr	r1, [sp, #32]
    a86a:	9a05      	ldr	r2, [sp, #20]
    a86c:	9b06      	ldr	r3, [sp, #24]
    a86e:	f000 f859 	bl	a924 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    a872:	9104      	str	r1, [sp, #16]
    a874:	9003      	str	r0, [sp, #12]
    a876:	9302      	str	r3, [sp, #8]
    a878:	9201      	str	r2, [sp, #4]
    a87a:	e7ff      	b.n	a87c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    a87c:	9803      	ldr	r0, [sp, #12]
    a87e:	9904      	ldr	r1, [sp, #16]
    a880:	9a01      	ldr	r2, [sp, #4]
    a882:	9b02      	ldr	r3, [sp, #8]
    a884:	b00a      	add	sp, #40	; 0x28
    a886:	bd80      	pop	{r7, pc}

0000a888 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    a888:	b08a      	sub	sp, #40	; 0x28
    a88a:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    a88c:	7800      	ldrb	r0, [r0, #0]
    a88e:	4601      	mov	r1, r0
    a890:	2800      	cmp	r0, #0
    a892:	9101      	str	r1, [sp, #4]
    a894:	d00f      	beq.n	a8b6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    a896:	e7ff      	b.n	a898 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    a898:	9801      	ldr	r0, [sp, #4]
    a89a:	2860      	cmp	r0, #96	; 0x60
    a89c:	d00f      	beq.n	a8be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    a89e:	e7ff      	b.n	a8a0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    a8a0:	9801      	ldr	r0, [sp, #4]
    a8a2:	28a0      	cmp	r0, #160	; 0xa0
    a8a4:	d001      	beq.n	a8aa <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    a8a6:	e7ff      	b.n	a8a8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    a8a8:	e00e      	b.n	a8c8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    a8aa:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a8ac:	9007      	str	r0, [sp, #28]
    a8ae:	20a0      	movs	r0, #160	; 0xa0
    a8b0:	9006      	str	r0, [sp, #24]
    a8b2:	e00e      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8b4:	defe      	udf	#254	; 0xfe
    a8b6:	2000      	movs	r0, #0
    a8b8:	9007      	str	r0, [sp, #28]
    a8ba:	9006      	str	r0, [sp, #24]
    a8bc:	e009      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8be:	2000      	movs	r0, #0
    a8c0:	9007      	str	r0, [sp, #28]
    a8c2:	2060      	movs	r0, #96	; 0x60
    a8c4:	9006      	str	r0, [sp, #24]
    a8c6:	e004      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8c8:	2000      	movs	r0, #0
    a8ca:	9007      	str	r0, [sp, #28]
    a8cc:	20c0      	movs	r0, #192	; 0xc0
    a8ce:	9006      	str	r0, [sp, #24]
    a8d0:	e7ff      	b.n	a8d2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8d2:	9806      	ldr	r0, [sp, #24]
    a8d4:	9907      	ldr	r1, [sp, #28]
    a8d6:	9105      	str	r1, [sp, #20]
    a8d8:	9004      	str	r0, [sp, #16]
    a8da:	2000      	movs	r0, #0
    a8dc:	9003      	str	r0, [sp, #12]
    a8de:	2001      	movs	r0, #1
    a8e0:	9002      	str	r0, [sp, #8]
    a8e2:	9802      	ldr	r0, [sp, #8]
    a8e4:	9903      	ldr	r1, [sp, #12]
    a8e6:	9a04      	ldr	r2, [sp, #16]
    a8e8:	9b05      	ldr	r3, [sp, #20]
    a8ea:	b00a      	add	sp, #40	; 0x28
    a8ec:	4770      	bx	lr

0000a8ee <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    a8ee:	b580      	push	{r7, lr}
    a8f0:	b08a      	sub	sp, #40	; 0x28
    a8f2:	9009      	str	r0, [sp, #36]	; 0x24
    a8f4:	f7ff ffc8 	bl	a888 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    a8f8:	9108      	str	r1, [sp, #32]
    a8fa:	9007      	str	r0, [sp, #28]
    a8fc:	9306      	str	r3, [sp, #24]
    a8fe:	9205      	str	r2, [sp, #20]
    a900:	e7ff      	b.n	a902 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    a902:	9807      	ldr	r0, [sp, #28]
    a904:	9908      	ldr	r1, [sp, #32]
    a906:	9a05      	ldr	r2, [sp, #20]
    a908:	9b06      	ldr	r3, [sp, #24]
    a90a:	f000 f863 	bl	a9d4 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    a90e:	9104      	str	r1, [sp, #16]
    a910:	9003      	str	r0, [sp, #12]
    a912:	9302      	str	r3, [sp, #8]
    a914:	9201      	str	r2, [sp, #4]
    a916:	e7ff      	b.n	a918 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    a918:	9803      	ldr	r0, [sp, #12]
    a91a:	9904      	ldr	r1, [sp, #16]
    a91c:	9a01      	ldr	r2, [sp, #4]
    a91e:	9b02      	ldr	r3, [sp, #8]
    a920:	b00a      	add	sp, #40	; 0x28
    a922:	bd80      	pop	{r7, pc}

0000a924 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    a924:	b5b0      	push	{r4, r5, r7, lr}
    a926:	b090      	sub	sp, #64	; 0x40
    a928:	469c      	mov	ip, r3
    a92a:	4696      	mov	lr, r2
    a92c:	460c      	mov	r4, r1
    a92e:	4605      	mov	r5, r0
    a930:	9103      	str	r1, [sp, #12]
    a932:	9002      	str	r0, [sp, #8]
    a934:	9305      	str	r3, [sp, #20]
    a936:	9204      	str	r2, [sp, #16]
    a938:	2000      	movs	r0, #0
    a93a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a93e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a942:	2001      	movs	r0, #1
    a944:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a948:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a94c:	9802      	ldr	r0, [sp, #8]
    a94e:	2800      	cmp	r0, #0
    a950:	d001      	beq.n	a956 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    a952:	e7ff      	b.n	a954 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    a954:	e004      	b.n	a960 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    a956:	2000      	movs	r0, #0
    a958:	9007      	str	r0, [sp, #28]
    a95a:	9006      	str	r0, [sp, #24]
    a95c:	e023      	b.n	a9a6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a95e:	defe      	udf	#254	; 0xfe
    a960:	2000      	movs	r0, #0
    a962:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a966:	9904      	ldr	r1, [sp, #16]
    a968:	9a05      	ldr	r2, [sp, #20]
    a96a:	920f      	str	r2, [sp, #60]	; 0x3c
    a96c:	910e      	str	r1, [sp, #56]	; 0x38
    a96e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a972:	920b      	str	r2, [sp, #44]	; 0x2c
    a974:	910a      	str	r1, [sp, #40]	; 0x28
    a976:	980a      	ldr	r0, [sp, #40]	; 0x28
    a978:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a97a:	f000 f883 	bl	aa84 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    a97e:	9101      	str	r1, [sp, #4]
    a980:	9000      	str	r0, [sp, #0]
    a982:	e7ff      	b.n	a984 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    a984:	9800      	ldr	r0, [sp, #0]
    a986:	9008      	str	r0, [sp, #32]
    a988:	9901      	ldr	r1, [sp, #4]
    a98a:	9109      	str	r1, [sp, #36]	; 0x24
    a98c:	2200      	movs	r2, #0
    a98e:	9207      	str	r2, [sp, #28]
    a990:	2201      	movs	r2, #1
    a992:	9206      	str	r2, [sp, #24]
    a994:	e007      	b.n	a9a6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a996:	9802      	ldr	r0, [sp, #8]
    a998:	2801      	cmp	r0, #1
    a99a:	d010      	beq.n	a9be <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    a99c:	e019      	b.n	a9d2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    a99e:	2000      	movs	r0, #0
    a9a0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9a4:	e7f7      	b.n	a996 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a9a6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    a9aa:	07c0      	lsls	r0, r0, #31
    a9ac:	2800      	cmp	r0, #0
    a9ae:	d1f6      	bne.n	a99e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    a9b0:	e7f1      	b.n	a996 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a9b2:	9806      	ldr	r0, [sp, #24]
    a9b4:	9907      	ldr	r1, [sp, #28]
    a9b6:	9a08      	ldr	r2, [sp, #32]
    a9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9ba:	b010      	add	sp, #64	; 0x40
    a9bc:	bdb0      	pop	{r4, r5, r7, pc}
    a9be:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a9c2:	07c0      	lsls	r0, r0, #31
    a9c4:	2800      	cmp	r0, #0
    a9c6:	d0f4      	beq.n	a9b2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    a9c8:	e7ff      	b.n	a9ca <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    a9ca:	2000      	movs	r0, #0
    a9cc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a9d0:	e7ef      	b.n	a9b2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    a9d2:	e7ee      	b.n	a9b2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000a9d4 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    a9d4:	b5b0      	push	{r4, r5, r7, lr}
    a9d6:	b090      	sub	sp, #64	; 0x40
    a9d8:	469c      	mov	ip, r3
    a9da:	4696      	mov	lr, r2
    a9dc:	460c      	mov	r4, r1
    a9de:	4605      	mov	r5, r0
    a9e0:	9103      	str	r1, [sp, #12]
    a9e2:	9002      	str	r0, [sp, #8]
    a9e4:	9305      	str	r3, [sp, #20]
    a9e6:	9204      	str	r2, [sp, #16]
    a9e8:	2000      	movs	r0, #0
    a9ea:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9ee:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a9f2:	2001      	movs	r0, #1
    a9f4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a9f8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9fc:	9802      	ldr	r0, [sp, #8]
    a9fe:	2800      	cmp	r0, #0
    aa00:	d001      	beq.n	aa06 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    aa02:	e7ff      	b.n	aa04 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    aa04:	e004      	b.n	aa10 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    aa06:	2000      	movs	r0, #0
    aa08:	9007      	str	r0, [sp, #28]
    aa0a:	9006      	str	r0, [sp, #24]
    aa0c:	e023      	b.n	aa56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    aa0e:	defe      	udf	#254	; 0xfe
    aa10:	2000      	movs	r0, #0
    aa12:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa16:	9904      	ldr	r1, [sp, #16]
    aa18:	9a05      	ldr	r2, [sp, #20]
    aa1a:	920f      	str	r2, [sp, #60]	; 0x3c
    aa1c:	910e      	str	r1, [sp, #56]	; 0x38
    aa1e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa22:	920b      	str	r2, [sp, #44]	; 0x2c
    aa24:	910a      	str	r1, [sp, #40]	; 0x28
    aa26:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa2a:	f009 fc67 	bl	142fc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    aa2e:	9101      	str	r1, [sp, #4]
    aa30:	9000      	str	r0, [sp, #0]
    aa32:	e7ff      	b.n	aa34 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    aa34:	9800      	ldr	r0, [sp, #0]
    aa36:	9008      	str	r0, [sp, #32]
    aa38:	9901      	ldr	r1, [sp, #4]
    aa3a:	9109      	str	r1, [sp, #36]	; 0x24
    aa3c:	2200      	movs	r2, #0
    aa3e:	9207      	str	r2, [sp, #28]
    aa40:	2201      	movs	r2, #1
    aa42:	9206      	str	r2, [sp, #24]
    aa44:	e007      	b.n	aa56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    aa46:	9802      	ldr	r0, [sp, #8]
    aa48:	2801      	cmp	r0, #1
    aa4a:	d010      	beq.n	aa6e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    aa4c:	e019      	b.n	aa82 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    aa4e:	2000      	movs	r0, #0
    aa50:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa54:	e7f7      	b.n	aa46 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aa56:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aa5a:	07c0      	lsls	r0, r0, #31
    aa5c:	2800      	cmp	r0, #0
    aa5e:	d1f6      	bne.n	aa4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    aa60:	e7f1      	b.n	aa46 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aa62:	9806      	ldr	r0, [sp, #24]
    aa64:	9907      	ldr	r1, [sp, #28]
    aa66:	9a08      	ldr	r2, [sp, #32]
    aa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa6a:	b010      	add	sp, #64	; 0x40
    aa6c:	bdb0      	pop	{r4, r5, r7, pc}
    aa6e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aa72:	07c0      	lsls	r0, r0, #31
    aa74:	2800      	cmp	r0, #0
    aa76:	d0f4      	beq.n	aa62 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aa78:	e7ff      	b.n	aa7a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    aa7a:	2000      	movs	r0, #0
    aa7c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa80:	e7ef      	b.n	aa62 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aa82:	e7ee      	b.n	aa62 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000aa84 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    aa84:	b084      	sub	sp, #16
    aa86:	460a      	mov	r2, r1
    aa88:	4603      	mov	r3, r0
    aa8a:	9103      	str	r1, [sp, #12]
    aa8c:	9002      	str	r0, [sp, #8]
    aa8e:	b004      	add	sp, #16
    aa90:	4770      	bx	lr

0000aa92 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    aa92:	b084      	sub	sp, #16
    aa94:	9000      	str	r0, [sp, #0]
    aa96:	9101      	str	r1, [sp, #4]
    aa98:	9102      	str	r1, [sp, #8]
    aa9a:	9003      	str	r0, [sp, #12]
    aa9c:	6802      	ldr	r2, [r0, #0]
    aa9e:	6840      	ldr	r0, [r0, #4]
    aaa0:	680b      	ldr	r3, [r1, #0]
    aaa2:	6849      	ldr	r1, [r1, #4]
    aaa4:	4048      	eors	r0, r1
    aaa6:	ea82 0103 	eor.w	r1, r2, r3
    aaaa:	4308      	orrs	r0, r1
    aaac:	fab0 f080 	clz	r0, r0
    aab0:	0940      	lsrs	r0, r0, #5
    aab2:	b004      	add	sp, #16
    aab4:	4770      	bx	lr

0000aab6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    aab6:	b5b0      	push	{r4, r5, r7, lr}
    aab8:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    aaba:	f64b 4000 	movw	r0, #48128	; 0xbc00
    aabe:	f2c0 0001 	movt	r0, #1
    aac2:	2112      	movs	r1, #18
    aac4:	f7fe fa94 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    aac8:	e7ff      	b.n	aaca <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    aaca:	f240 1064 	movw	r0, #356	; 0x164
    aace:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aad2:	210a      	movs	r1, #10
    aad4:	f009 f891 	bl	13bfa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    aad8:	9012      	str	r0, [sp, #72]	; 0x48
    aada:	e7ff      	b.n	aadc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    aadc:	9812      	ldr	r0, [sp, #72]	; 0x48
    aade:	f7fe f84b 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    aae2:	9014      	str	r0, [sp, #80]	; 0x50
    aae4:	e7ff      	b.n	aae6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    aae6:	9814      	ldr	r0, [sp, #80]	; 0x50
    aae8:	1e41      	subs	r1, r0, #1
    aaea:	bf18      	it	ne
    aaec:	2101      	movne	r1, #1
    aaee:	2801      	cmp	r0, #1
    aaf0:	d001      	beq.n	aaf6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    aaf2:	e7ff      	b.n	aaf4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    aaf4:	e008      	b.n	ab08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    aaf6:	f240 1064 	movw	r0, #356	; 0x164
    aafa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aafe:	f009 f915 	bl	13d2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    ab02:	9011      	str	r0, [sp, #68]	; 0x44
    ab04:	e00f      	b.n	ab26 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ab06:	defe      	udf	#254	; 0xfe
    ab08:	9814      	ldr	r0, [sp, #80]	; 0x50
    ab0a:	9036      	str	r0, [sp, #216]	; 0xd8
    ab0c:	f007 fa72 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ab10:	9010      	str	r0, [sp, #64]	; 0x40
    ab12:	e002      	b.n	ab1a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    ab14:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ab16:	b03e      	add	sp, #248	; 0xf8
    ab18:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ab1a:	9810      	ldr	r0, [sp, #64]	; 0x40
    ab1c:	f7fe f820 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ab20:	9013      	str	r0, [sp, #76]	; 0x4c
    ab22:	e7ff      	b.n	ab24 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    ab24:	e7f6      	b.n	ab14 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    ab26:	9811      	ldr	r0, [sp, #68]	; 0x44
    ab28:	f7fe f826 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ab2c:	9015      	str	r0, [sp, #84]	; 0x54
    ab2e:	e7ff      	b.n	ab30 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    ab30:	9815      	ldr	r0, [sp, #84]	; 0x54
    ab32:	1e41      	subs	r1, r0, #1
    ab34:	bf18      	it	ne
    ab36:	2101      	movne	r1, #1
    ab38:	2801      	cmp	r0, #1
    ab3a:	d001      	beq.n	ab40 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    ab3c:	e7ff      	b.n	ab3e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    ab3e:	e008      	b.n	ab52 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    ab40:	f240 1068 	movw	r0, #360	; 0x168
    ab44:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab48:	2114      	movs	r1, #20
    ab4a:	f009 f906 	bl	13d5a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ab4e:	e00d      	b.n	ab6c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    ab50:	defe      	udf	#254	; 0xfe
    ab52:	9815      	ldr	r0, [sp, #84]	; 0x54
    ab54:	9037      	str	r0, [sp, #220]	; 0xdc
    ab56:	f007 fa4d 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ab5a:	900f      	str	r0, [sp, #60]	; 0x3c
    ab5c:	e7ff      	b.n	ab5e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    ab5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ab60:	f7fd fffe 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ab64:	9013      	str	r0, [sp, #76]	; 0x4c
    ab66:	e7ff      	b.n	ab68 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    ab68:	e7ff      	b.n	ab6a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    ab6a:	e7d3      	b.n	ab14 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    ab6c:	f240 1064 	movw	r0, #356	; 0x164
    ab70:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab74:	f009 f8e5 	bl	13d42 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    ab78:	900e      	str	r0, [sp, #56]	; 0x38
    ab7a:	e7ff      	b.n	ab7c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    ab7c:	980e      	ldr	r0, [sp, #56]	; 0x38
    ab7e:	f7fd fffb 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ab82:	9016      	str	r0, [sp, #88]	; 0x58
    ab84:	e7ff      	b.n	ab86 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    ab86:	9816      	ldr	r0, [sp, #88]	; 0x58
    ab88:	1e41      	subs	r1, r0, #1
    ab8a:	bf18      	it	ne
    ab8c:	2101      	movne	r1, #1
    ab8e:	2801      	cmp	r0, #1
    ab90:	d001      	beq.n	ab96 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    ab92:	e7ff      	b.n	ab94 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    ab94:	e008      	b.n	aba8 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    ab96:	f240 1068 	movw	r0, #360	; 0x168
    ab9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab9e:	21c8      	movs	r1, #200	; 0xc8
    aba0:	f009 f8db 	bl	13d5a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aba4:	e00c      	b.n	abc0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    aba6:	defe      	udf	#254	; 0xfe
    aba8:	9816      	ldr	r0, [sp, #88]	; 0x58
    abaa:	9038      	str	r0, [sp, #224]	; 0xe0
    abac:	f007 fa22 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    abb0:	900d      	str	r0, [sp, #52]	; 0x34
    abb2:	e7ff      	b.n	abb4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    abb4:	980d      	ldr	r0, [sp, #52]	; 0x34
    abb6:	f7fd ffd3 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    abba:	9013      	str	r0, [sp, #76]	; 0x4c
    abbc:	e7ff      	b.n	abbe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    abbe:	e7d4      	b.n	ab6a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    abc0:	f240 1068 	movw	r0, #360	; 0x168
    abc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    abc8:	21c8      	movs	r1, #200	; 0xc8
    abca:	f009 f8c6 	bl	13d5a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    abce:	e7ff      	b.n	abd0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    abd0:	f64a 5073 	movw	r0, #44403	; 0xad73
    abd4:	f2c0 0000 	movt	r0, #0
    abd8:	9017      	str	r0, [sp, #92]	; 0x5c
    abda:	9817      	ldr	r0, [sp, #92]	; 0x5c
    abdc:	f240 11fc 	movw	r1, #508	; 0x1fc
    abe0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    abe4:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    abe6:	f64a 5027 	movw	r0, #44327	; 0xad27
    abea:	f2c0 0000 	movt	r0, #0
    abee:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    abf0:	e7ff      	b.n	abf2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    abf2:	9919      	ldr	r1, [sp, #100]	; 0x64
    abf4:	4668      	mov	r0, sp
    abf6:	2201      	movs	r2, #1
    abf8:	6002      	str	r2, [r0, #0]
    abfa:	201c      	movs	r0, #28
    abfc:	2200      	movs	r2, #0
    abfe:	2302      	movs	r3, #2
    ac00:	f00c fb38 	bl	17274 <hal_gpio_irq_init>
    ac04:	9018      	str	r0, [sp, #96]	; 0x60
    ac06:	e7ff      	b.n	ac08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    ac08:	f64b 4018 	movw	r0, #48152	; 0xbc18
    ac0c:	f2c0 0001 	movt	r0, #1
    ac10:	6800      	ldr	r0, [r0, #0]
    ac12:	a918      	add	r1, sp, #96	; 0x60
    ac14:	911a      	str	r1, [sp, #104]	; 0x68
    ac16:	901b      	str	r0, [sp, #108]	; 0x6c
    ac18:	981a      	ldr	r0, [sp, #104]	; 0x68
    ac1a:	9039      	str	r0, [sp, #228]	; 0xe4
    ac1c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ac1e:	913a      	str	r1, [sp, #232]	; 0xe8
    ac20:	6802      	ldr	r2, [r0, #0]
    ac22:	680b      	ldr	r3, [r1, #0]
    ac24:	429a      	cmp	r2, r3
    ac26:	900c      	str	r0, [sp, #48]	; 0x30
    ac28:	910b      	str	r1, [sp, #44]	; 0x2c
    ac2a:	d104      	bne.n	ac36 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    ac2c:	e7ff      	b.n	ac2e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    ac2e:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    ac30:	f00c fb5c 	bl	172ec <hal_gpio_irq_enable>
    ac34:	e072      	b.n	ad1c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    ac36:	f64b 4070 	movw	r0, #48240	; 0xbc70
    ac3a:	f2c0 0001 	movt	r0, #1
    ac3e:	6801      	ldr	r1, [r0, #0]
    ac40:	980c      	ldr	r0, [sp, #48]	; 0x30
    ac42:	902b      	str	r0, [sp, #172]	; 0xac
    ac44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ac46:	922c      	str	r2, [sp, #176]	; 0xb0
    ac48:	f64b 438c 	movw	r3, #48268	; 0xbc8c
    ac4c:	f2c0 0301 	movt	r3, #1
    ac50:	681b      	ldr	r3, [r3, #0]
    ac52:	f64b 4c90 	movw	ip, #48272	; 0xbc90
    ac56:	f2c0 0c01 	movt	ip, #1
    ac5a:	f8dc c000 	ldr.w	ip, [ip]
    ac5e:	46ee      	mov	lr, sp
    ac60:	2400      	movs	r4, #0
    ac62:	f8ce 4000 	str.w	r4, [lr]
    ac66:	a82d      	add	r0, sp, #180	; 0xb4
    ac68:	2201      	movs	r2, #1
    ac6a:	910a      	str	r1, [sp, #40]	; 0x28
    ac6c:	4619      	mov	r1, r3
    ac6e:	4663      	mov	r3, ip
    ac70:	f009 fb68 	bl	14344 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    ac74:	e7ff      	b.n	ac76 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    ac76:	a82b      	add	r0, sp, #172	; 0xac
    ac78:	9028      	str	r0, [sp, #160]	; 0xa0
    ac7a:	a82c      	add	r0, sp, #176	; 0xb0
    ac7c:	9029      	str	r0, [sp, #164]	; 0xa4
    ac7e:	a82d      	add	r0, sp, #180	; 0xb4
    ac80:	902a      	str	r0, [sp, #168]	; 0xa8
    ac82:	9828      	ldr	r0, [sp, #160]	; 0xa0
    ac84:	903b      	str	r0, [sp, #236]	; 0xec
    ac86:	9929      	ldr	r1, [sp, #164]	; 0xa4
    ac88:	913c      	str	r1, [sp, #240]	; 0xf0
    ac8a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    ac8c:	923d      	str	r2, [sp, #244]	; 0xf4
    ac8e:	f241 139b 	movw	r3, #4507	; 0x119b
    ac92:	f2c0 0301 	movt	r3, #1
    ac96:	9109      	str	r1, [sp, #36]	; 0x24
    ac98:	4619      	mov	r1, r3
    ac9a:	9208      	str	r2, [sp, #32]
    ac9c:	f7fe fb5d 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    aca0:	9007      	str	r0, [sp, #28]
    aca2:	9106      	str	r1, [sp, #24]
    aca4:	e7ff      	b.n	aca6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    aca6:	f241 119b 	movw	r1, #4507	; 0x119b
    acaa:	f2c0 0101 	movt	r1, #1
    acae:	9809      	ldr	r0, [sp, #36]	; 0x24
    acb0:	f7fe fb53 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    acb4:	9005      	str	r0, [sp, #20]
    acb6:	9104      	str	r1, [sp, #16]
    acb8:	e7ff      	b.n	acba <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    acba:	f245 619f 	movw	r1, #22175	; 0x569f
    acbe:	f2c0 0101 	movt	r1, #1
    acc2:	9808      	ldr	r0, [sp, #32]
    acc4:	f7fe fb88 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    acc8:	9003      	str	r0, [sp, #12]
    acca:	9102      	str	r1, [sp, #8]
    accc:	e7ff      	b.n	acce <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    acce:	9807      	ldr	r0, [sp, #28]
    acd0:	9022      	str	r0, [sp, #136]	; 0x88
    acd2:	9906      	ldr	r1, [sp, #24]
    acd4:	9123      	str	r1, [sp, #140]	; 0x8c
    acd6:	9a05      	ldr	r2, [sp, #20]
    acd8:	9224      	str	r2, [sp, #144]	; 0x90
    acda:	9b04      	ldr	r3, [sp, #16]
    acdc:	9325      	str	r3, [sp, #148]	; 0x94
    acde:	f8dd c00c 	ldr.w	ip, [sp, #12]
    ace2:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    ace6:	f8dd e008 	ldr.w	lr, [sp, #8]
    acea:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    acee:	466c      	mov	r4, sp
    acf0:	2503      	movs	r5, #3
    acf2:	6025      	str	r5, [r4, #0]
    acf4:	a81c      	add	r0, sp, #112	; 0x70
    acf6:	ab22      	add	r3, sp, #136	; 0x88
    acf8:	990a      	ldr	r1, [sp, #40]	; 0x28
    acfa:	462a      	mov	r2, r5
    acfc:	f009 fb22 	bl	14344 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    ad00:	e7ff      	b.n	ad02 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    ad02:	f64b 40b0 	movw	r0, #48304	; 0xbcb0
    ad06:	f2c0 0001 	movt	r0, #1
    ad0a:	f00a f9da 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    ad0e:	9001      	str	r0, [sp, #4]
    ad10:	e7ff      	b.n	ad12 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    ad12:	a81c      	add	r0, sp, #112	; 0x70
    ad14:	9901      	ldr	r1, [sp, #4]
    ad16:	f00a fa11 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    ad1a:	defe      	udf	#254	; 0xfe
    ad1c:	2000      	movs	r0, #0
    Ok(())
    ad1e:	9013      	str	r0, [sp, #76]	; 0x4c
    ad20:	2001      	movs	r0, #1
    ad22:	9013      	str	r0, [sp, #76]	; 0x4c
}
    ad24:	e6f6      	b.n	ab14 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000ad26 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    ad26:	b580      	push	{r7, lr}
    ad28:	b086      	sub	sp, #24
    ad2a:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    ad2c:	f240 11fc 	movw	r1, #508	; 0x1fc
    ad30:	f2c2 0100 	movt	r1, #8192	; 0x2000
    ad34:	6088      	str	r0, [r1, #8]
    ad36:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    ad38:	f7fd ff9a 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    ad3c:	e7ff      	b.n	ad3e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    ad3e:	f24b 7196 	movw	r1, #46998	; 0xb796
    ad42:	f2c0 0101 	movt	r1, #1
    ad46:	f64b 43c8 	movw	r3, #48328	; 0xbcc8
    ad4a:	f2c0 0301 	movt	r3, #1
    ad4e:	a802      	add	r0, sp, #8
    ad50:	2208      	movs	r2, #8
    ad52:	f7fd fd3e 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    ad56:	4601      	mov	r1, r0
    ad58:	9005      	str	r0, [sp, #20]
    ad5a:	9101      	str	r1, [sp, #4]
    ad5c:	e7ff      	b.n	ad5e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    ad5e:	f240 11fc 	movw	r1, #508	; 0x1fc
    ad62:	f2c2 0100 	movt	r1, #8192	; 0x2000
    ad66:	9801      	ldr	r0, [sp, #4]
    ad68:	f00d fb53 	bl	18412 <os_eventq_put>
    ad6c:	e7ff      	b.n	ad6e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    ad6e:	b006      	add	sp, #24
    ad70:	bd80      	pop	{r7, pc}

0000ad72 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    ad72:	b580      	push	{r7, lr}
    ad74:	b094      	sub	sp, #80	; 0x50
    ad76:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    ad78:	f240 1068 	movw	r0, #360	; 0x168
    ad7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ad80:	f000 f894 	bl	aeac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    ad84:	9006      	str	r0, [sp, #24]
    ad86:	e7ff      	b.n	ad88 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    ad88:	f64b 41d8 	movw	r1, #48344	; 0xbcd8
    ad8c:	f2c0 0101 	movt	r1, #1
    ad90:	f64b 43e8 	movw	r3, #48360	; 0xbce8
    ad94:	f2c0 0301 	movt	r3, #1
    ad98:	220e      	movs	r2, #14
    ad9a:	9806      	ldr	r0, [sp, #24]
    ad9c:	f7fd fead 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    ada0:	e7ff      	b.n	ada2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    ada2:	f240 1068 	movw	r0, #360	; 0x168
    ada6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    adaa:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    adae:	2100      	movs	r1, #0
    adb0:	9107      	str	r1, [sp, #28]
    adb2:	9008      	str	r0, [sp, #32]
    adb4:	9807      	ldr	r0, [sp, #28]
    adb6:	9908      	ldr	r1, [sp, #32]
    adb8:	f006 fcb9 	bl	1172e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    adbc:	9005      	str	r0, [sp, #20]
    adbe:	9104      	str	r1, [sp, #16]
    adc0:	e7ff      	b.n	adc2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    adc2:	9805      	ldr	r0, [sp, #20]
    adc4:	9009      	str	r0, [sp, #36]	; 0x24
    adc6:	9904      	ldr	r1, [sp, #16]
    adc8:	910a      	str	r1, [sp, #40]	; 0x28
    adca:	e7ff      	b.n	adcc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    adcc:	a809      	add	r0, sp, #36	; 0x24
    adce:	f006 fc23 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    add2:	910c      	str	r1, [sp, #48]	; 0x30
    add4:	900b      	str	r0, [sp, #44]	; 0x2c
    add6:	e7ff      	b.n	add8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    add8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    adda:	2800      	cmp	r0, #0
    addc:	d001      	beq.n	ade2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    adde:	e7ff      	b.n	ade0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    ade0:	e002      	b.n	ade8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    ade2:	b014      	add	sp, #80	; 0x50
    ade4:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    ade6:	defe      	udf	#254	; 0xfe
    ade8:	980c      	ldr	r0, [sp, #48]	; 0x30
    adea:	900f      	str	r0, [sp, #60]	; 0x3c
    adec:	9010      	str	r0, [sp, #64]	; 0x40
    adee:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    adf0:	2809      	cmp	r0, #9
    adf2:	9003      	str	r0, [sp, #12]
    adf4:	d851      	bhi.n	ae9a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    adf6:	e7ff      	b.n	adf8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    adf8:	f240 1068 	movw	r0, #360	; 0x168
    adfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae00:	9903      	ldr	r1, [sp, #12]
    ae02:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    ae06:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    ae0a:	4603      	mov	r3, r0
    ae0c:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    ae10:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    ae14:	46e6      	mov	lr, ip
    ae16:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    ae1a:	7912      	ldrb	r2, [r2, #4]
    ae1c:	4694      	mov	ip, r2
    ae1e:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    ae22:	2800      	cmp	r0, #0
    ae24:	9302      	str	r3, [sp, #8]
    ae26:	f8cd e004 	str.w	lr, [sp, #4]
    ae2a:	f8cd c000 	str.w	ip, [sp]
    ae2e:	d008      	beq.n	ae42 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    ae30:	e003      	b.n	ae3a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    ae32:	2001      	movs	r0, #1
    ae34:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    ae38:	e008      	b.n	ae4c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    ae3a:	2000      	movs	r0, #0
    ae3c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    ae40:	e004      	b.n	ae4c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    ae42:	9801      	ldr	r0, [sp, #4]
    ae44:	0401      	lsls	r1, r0, #16
    ae46:	2900      	cmp	r1, #0
    ae48:	d0f3      	beq.n	ae32 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    ae4a:	e7f6      	b.n	ae3a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    ae4c:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    ae50:	07c0      	lsls	r0, r0, #31
    ae52:	2800      	cmp	r0, #0
    ae54:	d105      	bne.n	ae62 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    ae56:	e7ff      	b.n	ae58 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    ae58:	9800      	ldr	r0, [sp, #0]
    ae5a:	0601      	lsls	r1, r0, #24
    ae5c:	2900      	cmp	r1, #0
    ae5e:	d10a      	bne.n	ae76 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    ae60:	e005      	b.n	ae6e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    ae62:	e7ff      	b.n	ae64 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    ae64:	e7b2      	b.n	adcc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    ae66:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    ae68:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    ae6c:	e008      	b.n	ae80 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    ae6e:	2000      	movs	r0, #0
    ae70:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    ae74:	e004      	b.n	ae80 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    ae76:	9800      	ldr	r0, [sp, #0]
    ae78:	b2c1      	uxtb	r1, r0
    ae7a:	2902      	cmp	r1, #2
    ae7c:	d1f3      	bne.n	ae66 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    ae7e:	e7f6      	b.n	ae6e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    ae80:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    ae84:	07c0      	lsls	r0, r0, #31
    ae86:	2800      	cmp	r0, #0
    ae88:	d105      	bne.n	ae96 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    ae8a:	e7ff      	b.n	ae8c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    ae8c:	9802      	ldr	r0, [sp, #8]
    ae8e:	9901      	ldr	r1, [sp, #4]
    ae90:	f001 fb94 	bl	c5bc <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    ae94:	e000      	b.n	ae98 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    ae96:	e7e5      	b.n	ae64 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    ae98:	e798      	b.n	adcc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    ae9a:	f64b 40f8 	movw	r0, #48376	; 0xbcf8
    ae9e:	f2c0 0001 	movt	r0, #1
    aea2:	220a      	movs	r2, #10
    aea4:	9903      	ldr	r1, [sp, #12]
    aea6:	f00a f929 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    aeaa:	defe      	udf	#254	; 0xfe

0000aeac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    aeac:	b580      	push	{r7, lr}
    aeae:	b0de      	sub	sp, #376	; 0x178
    aeb0:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    aeb2:	4669      	mov	r1, sp
    aeb4:	223f      	movs	r2, #63	; 0x3f
    aeb6:	600a      	str	r2, [r1, #0]
    aeb8:	f240 13ba 	movw	r3, #442	; 0x1ba
    aebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec0:	2115      	movs	r1, #21
    aec2:	f04f 0c00 	mov.w	ip, #0
    aec6:	9026      	str	r0, [sp, #152]	; 0x98
    aec8:	4608      	mov	r0, r1
    aeca:	4661      	mov	r1, ip
    aecc:	f000 fb97 	bl	b5fe <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    aed0:	9025      	str	r0, [sp, #148]	; 0x94
    aed2:	e7ff      	b.n	aed4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    aed4:	f64b 5108 	movw	r1, #48392	; 0xbd08
    aed8:	f2c0 0101 	movt	r1, #1
    aedc:	f64b 531c 	movw	r3, #48412	; 0xbd1c
    aee0:	f2c0 0301 	movt	r3, #1
    aee4:	2213      	movs	r2, #19
    aee6:	9825      	ldr	r0, [sp, #148]	; 0x94
    aee8:	f7fd fe07 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    aeec:	e7ff      	b.n	aeee <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    aeee:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    aef2:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    aef4:	9024      	str	r0, [sp, #144]	; 0x90
    aef6:	9123      	str	r1, [sp, #140]	; 0x8c
    aef8:	f010 fbf2 	bl	1b6e0 <__aeabi_memclr>
    aefc:	a827      	add	r0, sp, #156	; 0x9c
    aefe:	9924      	ldr	r1, [sp, #144]	; 0x90
    af00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    af02:	f010 fbf1 	bl	1b6e8 <__aeabi_memcpy>
    af06:	e7ff      	b.n	af08 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    af08:	a927      	add	r1, sp, #156	; 0x9c
    af0a:	2252      	movs	r2, #82	; 0x52
    af0c:	9826      	ldr	r0, [sp, #152]	; 0x98
    af0e:	f010 fbeb 	bl	1b6e8 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    af12:	f240 11ba 	movw	r1, #442	; 0x1ba
    af16:	f2c2 0100 	movt	r1, #8192	; 0x2000
    af1a:	7889      	ldrb	r1, [r1, #2]
    af1c:	f001 010f 	and.w	r1, r1, #15
    af20:	9a26      	ldr	r2, [sp, #152]	; 0x98
    af22:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    af26:	2100      	movs	r1, #0
    data.count     = 0;
    af28:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    af2c:	9150      	str	r1, [sp, #320]	; 0x140
    af2e:	2105      	movs	r1, #5
    af30:	9151      	str	r1, [sp, #324]	; 0x144
    af32:	9950      	ldr	r1, [sp, #320]	; 0x140
    af34:	9b51      	ldr	r3, [sp, #324]	; 0x144
    af36:	9022      	str	r0, [sp, #136]	; 0x88
    af38:	4608      	mov	r0, r1
    af3a:	4619      	mov	r1, r3
    af3c:	f006 fbf7 	bl	1172e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    af40:	9021      	str	r0, [sp, #132]	; 0x84
    af42:	9120      	str	r1, [sp, #128]	; 0x80
    af44:	e7ff      	b.n	af46 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    af46:	9821      	ldr	r0, [sp, #132]	; 0x84
    af48:	9052      	str	r0, [sp, #328]	; 0x148
    af4a:	9920      	ldr	r1, [sp, #128]	; 0x80
    af4c:	9153      	str	r1, [sp, #332]	; 0x14c
    af4e:	e7ff      	b.n	af50 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    af50:	a852      	add	r0, sp, #328	; 0x148
    af52:	f006 fb61 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    af56:	9155      	str	r1, [sp, #340]	; 0x154
    af58:	9054      	str	r0, [sp, #336]	; 0x150
    af5a:	e7ff      	b.n	af5c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    af5c:	9854      	ldr	r0, [sp, #336]	; 0x150
    af5e:	2800      	cmp	r0, #0
    af60:	d001      	beq.n	af66 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    af62:	e7ff      	b.n	af64 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    af64:	e001      	b.n	af6a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    af66:	e00d      	b.n	af84 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    af68:	defe      	udf	#254	; 0xfe
    af6a:	9855      	ldr	r0, [sp, #340]	; 0x154
    af6c:	9058      	str	r0, [sp, #352]	; 0x160
    af6e:	9059      	str	r0, [sp, #356]	; 0x164
    af70:	905a      	str	r0, [sp, #360]	; 0x168
    af72:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    af74:	fba1 1200 	umull	r1, r2, r1, r0
    af78:	2a00      	cmp	r2, #0
    af7a:	901f      	str	r0, [sp, #124]	; 0x7c
    af7c:	911e      	str	r1, [sp, #120]	; 0x78
    af7e:	f040 81c1 	bne.w	b304 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    af82:	e002      	b.n	af8a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    af84:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    af86:	b05e      	add	sp, #376	; 0x178
    af88:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    af8a:	981e      	ldr	r0, [sp, #120]	; 0x78
    af8c:	1d41      	adds	r1, r0, #5
    af8e:	460a      	mov	r2, r1
    af90:	4281      	cmp	r1, r0
    af92:	921d      	str	r2, [sp, #116]	; 0x74
    af94:	f0c0 81c2 	bcc.w	b31c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    af98:	e7ff      	b.n	af9a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    af9a:	981d      	ldr	r0, [sp, #116]	; 0x74
    af9c:	283e      	cmp	r0, #62	; 0x3e
    af9e:	f200 81c9 	bhi.w	b334 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    afa2:	e7ff      	b.n	afa4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    afa4:	f240 10ba 	movw	r0, #442	; 0x1ba
    afa8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    afac:	991d      	ldr	r1, [sp, #116]	; 0x74
    afae:	5c40      	ldrb	r0, [r0, r1]
    afb0:	0900      	lsrs	r0, r0, #4
    afb2:	901c      	str	r0, [sp, #112]	; 0x70
    afb4:	e7ff      	b.n	afb6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    afb6:	981c      	ldr	r0, [sp, #112]	; 0x70
    afb8:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    afbc:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    afbe:	290e      	cmp	r1, #14
    afc0:	d80b      	bhi.n	afda <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    afc2:	e7ff      	b.n	afc4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    afc4:	9826      	ldr	r0, [sp, #152]	; 0x98
    afc6:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    afca:	3101      	adds	r1, #1
    afcc:	b2ca      	uxtb	r2, r1
    afce:	460b      	mov	r3, r1
    afd0:	428a      	cmp	r2, r1
    afd2:	931b      	str	r3, [sp, #108]	; 0x6c
    afd4:	f040 81b7 	bne.w	b346 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    afd8:	e001      	b.n	afde <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    afda:	e7ff      	b.n	afdc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    afdc:	e7d2      	b.n	af84 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    afde:	981b      	ldr	r0, [sp, #108]	; 0x6c
    afe0:	9926      	ldr	r1, [sp, #152]	; 0x98
    afe2:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    afe6:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    afe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    afea:	fba2 2c03 	umull	r2, ip, r2, r3
    afee:	f1bc 0f00 	cmp.w	ip, #0
    aff2:	921a      	str	r2, [sp, #104]	; 0x68
    aff4:	f040 81b3 	bne.w	b35e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    aff8:	e7ff      	b.n	affa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    affa:	981a      	ldr	r0, [sp, #104]	; 0x68
    affc:	1cc1      	adds	r1, r0, #3
    affe:	460a      	mov	r2, r1
    b000:	4281      	cmp	r1, r0
    b002:	9219      	str	r2, [sp, #100]	; 0x64
    b004:	f0c0 81b7 	bcc.w	b376 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b008:	e7ff      	b.n	b00a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b00a:	9819      	ldr	r0, [sp, #100]	; 0x64
    b00c:	283e      	cmp	r0, #62	; 0x3e
    b00e:	f200 81be 	bhi.w	b38e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b012:	e7ff      	b.n	b014 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b014:	f240 10ba 	movw	r0, #442	; 0x1ba
    b018:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b01c:	9919      	ldr	r1, [sp, #100]	; 0x64
    b01e:	5c40      	ldrb	r0, [r0, r1]
    b020:	f000 000f 	and.w	r0, r0, #15
    b024:	4602      	mov	r2, r0
    b026:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b02a:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b02c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b02e:	fba0 0c03 	umull	r0, ip, r0, r3
    b032:	f1bc 0f00 	cmp.w	ip, #0
    b036:	9218      	str	r2, [sp, #96]	; 0x60
    b038:	9017      	str	r0, [sp, #92]	; 0x5c
    b03a:	f040 81b1 	bne.w	b3a0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b03e:	e7ff      	b.n	b040 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b040:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b042:	1d01      	adds	r1, r0, #4
    b044:	460a      	mov	r2, r1
    b046:	4281      	cmp	r1, r0
    b048:	9216      	str	r2, [sp, #88]	; 0x58
    b04a:	f0c0 81b5 	bcc.w	b3b8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b04e:	e7ff      	b.n	b050 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b050:	9816      	ldr	r0, [sp, #88]	; 0x58
    b052:	283e      	cmp	r0, #62	; 0x3e
    b054:	f200 81bc 	bhi.w	b3d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b058:	e7ff      	b.n	b05a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b05a:	f240 10ba 	movw	r0, #442	; 0x1ba
    b05e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b062:	9916      	ldr	r1, [sp, #88]	; 0x58
    b064:	5c40      	ldrb	r0, [r0, r1]
    b066:	4602      	mov	r2, r0
    b068:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b06c:	9818      	ldr	r0, [sp, #96]	; 0x60
    b06e:	0203      	lsls	r3, r0, #8
    b070:	9215      	str	r2, [sp, #84]	; 0x54
    b072:	9314      	str	r3, [sp, #80]	; 0x50
    b074:	e7ff      	b.n	b076 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b076:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b078:	2809      	cmp	r0, #9
    b07a:	f200 81b2 	bhi.w	b3e2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b07e:	e7ff      	b.n	b080 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b080:	9814      	ldr	r0, [sp, #80]	; 0x50
    b082:	9915      	ldr	r1, [sp, #84]	; 0x54
    b084:	ea40 0201 	orr.w	r2, r0, r1
    b088:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b08a:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b08e:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b092:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b094:	fba2 2e0c 	umull	r2, lr, r2, ip
    b098:	f1be 0f00 	cmp.w	lr, #0
    b09c:	9213      	str	r2, [sp, #76]	; 0x4c
    b09e:	f040 81a9 	bne.w	b3f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b0a2:	e7ff      	b.n	b0a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b0a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b0a6:	1d41      	adds	r1, r0, #5
    b0a8:	460a      	mov	r2, r1
    b0aa:	4281      	cmp	r1, r0
    b0ac:	9212      	str	r2, [sp, #72]	; 0x48
    b0ae:	f0c0 81ad 	bcc.w	b40c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b0b2:	e7ff      	b.n	b0b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b0b4:	9812      	ldr	r0, [sp, #72]	; 0x48
    b0b6:	283e      	cmp	r0, #62	; 0x3e
    b0b8:	f200 81b4 	bhi.w	b424 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b0bc:	e7ff      	b.n	b0be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b0be:	f240 10ba 	movw	r0, #442	; 0x1ba
    b0c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0c6:	9912      	ldr	r1, [sp, #72]	; 0x48
    b0c8:	5c40      	ldrb	r0, [r0, r1]
    b0ca:	f000 000f 	and.w	r0, r0, #15
    b0ce:	4602      	mov	r2, r0
    b0d0:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b0d4:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b0d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b0d8:	fba0 0c03 	umull	r0, ip, r0, r3
    b0dc:	f1bc 0f00 	cmp.w	ip, #0
    b0e0:	9211      	str	r2, [sp, #68]	; 0x44
    b0e2:	9010      	str	r0, [sp, #64]	; 0x40
    b0e4:	f040 81a7 	bne.w	b436 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b0e8:	e7ff      	b.n	b0ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b0ea:	9810      	ldr	r0, [sp, #64]	; 0x40
    b0ec:	1d81      	adds	r1, r0, #6
    b0ee:	460a      	mov	r2, r1
    b0f0:	4281      	cmp	r1, r0
    b0f2:	920f      	str	r2, [sp, #60]	; 0x3c
    b0f4:	f0c0 81ab 	bcc.w	b44e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b0f8:	e7ff      	b.n	b0fa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b0fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b0fc:	283e      	cmp	r0, #62	; 0x3e
    b0fe:	f200 81b2 	bhi.w	b466 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b102:	e7ff      	b.n	b104 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b104:	f240 10ba 	movw	r0, #442	; 0x1ba
    b108:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b10c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b10e:	5c40      	ldrb	r0, [r0, r1]
    b110:	4602      	mov	r2, r0
    b112:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b116:	9811      	ldr	r0, [sp, #68]	; 0x44
    b118:	0203      	lsls	r3, r0, #8
    b11a:	920e      	str	r2, [sp, #56]	; 0x38
    b11c:	930d      	str	r3, [sp, #52]	; 0x34
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b120:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b122:	2809      	cmp	r0, #9
    b124:	f200 81a8 	bhi.w	b478 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b128:	e7ff      	b.n	b12a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b12a:	9826      	ldr	r0, [sp, #152]	; 0x98
    b12c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b12e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b134:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b138:	ea43 0e0c 	orr.w	lr, r3, ip
    b13c:	f8a2 e002 	strh.w	lr, [r2, #2]
    b140:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b142:	fba2 2e01 	umull	r2, lr, r2, r1
    b146:	f1be 0f00 	cmp.w	lr, #0
    b14a:	920c      	str	r2, [sp, #48]	; 0x30
    b14c:	f040 819d 	bne.w	b48a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b150:	e7ff      	b.n	b152 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b152:	980c      	ldr	r0, [sp, #48]	; 0x30
    b154:	1cc1      	adds	r1, r0, #3
    b156:	460a      	mov	r2, r1
    b158:	4281      	cmp	r1, r0
    b15a:	920b      	str	r2, [sp, #44]	; 0x2c
    b15c:	f0c0 81a1 	bcc.w	b4a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    b160:	e7ff      	b.n	b162 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    b162:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b164:	283e      	cmp	r0, #62	; 0x3e
    b166:	f200 81a8 	bhi.w	b4ba <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    b16a:	e7ff      	b.n	b16c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    b16c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b170:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b174:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b176:	5c40      	ldrb	r0, [r0, r1]
    b178:	0980      	lsrs	r0, r0, #6
    b17a:	900a      	str	r0, [sp, #40]	; 0x28
    b17c:	e7ff      	b.n	b17e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    b17e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b180:	2809      	cmp	r0, #9
    b182:	f200 81a3 	bhi.w	b4cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    b186:	e7ff      	b.n	b188 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    b188:	9826      	ldr	r0, [sp, #152]	; 0x98
    b18a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b18c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b192:	7113      	strb	r3, [r2, #4]
    b194:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b196:	fba2 2c01 	umull	r2, ip, r2, r1
    b19a:	f1bc 0f00 	cmp.w	ip, #0
    b19e:	9209      	str	r2, [sp, #36]	; 0x24
    b1a0:	f040 819d 	bne.w	b4de <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b1a4:	e7ff      	b.n	b1a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    b1a8:	1d41      	adds	r1, r0, #5
    b1aa:	460a      	mov	r2, r1
    b1ac:	4281      	cmp	r1, r0
    b1ae:	9208      	str	r2, [sp, #32]
    b1b0:	f0c0 81a1 	bcc.w	b4f6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b1b4:	e7ff      	b.n	b1b6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b1b6:	9808      	ldr	r0, [sp, #32]
    b1b8:	283e      	cmp	r0, #62	; 0x3e
    b1ba:	f200 81a8 	bhi.w	b50e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b1be:	e7ff      	b.n	b1c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b1c0:	f240 10ba 	movw	r0, #442	; 0x1ba
    b1c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1c8:	9908      	ldr	r1, [sp, #32]
    b1ca:	5c40      	ldrb	r0, [r0, r1]
    b1cc:	0900      	lsrs	r0, r0, #4
    b1ce:	9007      	str	r0, [sp, #28]
    b1d0:	e7ff      	b.n	b1d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b1d2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b1d4:	2809      	cmp	r0, #9
    b1d6:	f200 81a3 	bhi.w	b520 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b1da:	e7ff      	b.n	b1dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b1dc:	9826      	ldr	r0, [sp, #152]	; 0x98
    b1de:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b1e0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b1e4:	9b07      	ldr	r3, [sp, #28]
    b1e6:	7153      	strb	r3, [r2, #5]
    b1e8:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b1ea:	fba2 2c01 	umull	r2, ip, r2, r1
    b1ee:	f1bc 0f00 	cmp.w	ip, #0
    b1f2:	9206      	str	r2, [sp, #24]
    b1f4:	f040 819d 	bne.w	b532 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b1f8:	e7ff      	b.n	b1fa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b1fa:	9806      	ldr	r0, [sp, #24]
    b1fc:	1dc1      	adds	r1, r0, #7
    b1fe:	460a      	mov	r2, r1
    b200:	4281      	cmp	r1, r0
    b202:	9205      	str	r2, [sp, #20]
    b204:	f0c0 81a1 	bcc.w	b54a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b208:	e7ff      	b.n	b20a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b20a:	9805      	ldr	r0, [sp, #20]
    b20c:	283e      	cmp	r0, #62	; 0x3e
    b20e:	f200 81a8 	bhi.w	b562 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b212:	e7ff      	b.n	b214 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b214:	f240 10ba 	movw	r0, #442	; 0x1ba
    b218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b21c:	9905      	ldr	r1, [sp, #20]
    b21e:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b220:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b222:	2a09      	cmp	r2, #9
    b224:	9004      	str	r0, [sp, #16]
    b226:	f200 81a5 	bhi.w	b574 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b22a:	e7ff      	b.n	b22c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b22c:	9826      	ldr	r0, [sp, #152]	; 0x98
    b22e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b230:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b234:	9b04      	ldr	r3, [sp, #16]
    b236:	7193      	strb	r3, [r2, #6]
    b238:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b23a:	fba2 2c01 	umull	r2, ip, r2, r1
    b23e:	f1bc 0f00 	cmp.w	ip, #0
    b242:	9203      	str	r2, [sp, #12]
    b244:	f040 819f 	bne.w	b586 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b248:	e7ff      	b.n	b24a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b24a:	9803      	ldr	r0, [sp, #12]
    b24c:	f100 0108 	add.w	r1, r0, #8
    b250:	460a      	mov	r2, r1
    b252:	4281      	cmp	r1, r0
    b254:	9202      	str	r2, [sp, #8]
    b256:	f0c0 81a2 	bcc.w	b59e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b25a:	e7ff      	b.n	b25c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b25c:	9802      	ldr	r0, [sp, #8]
    b25e:	283e      	cmp	r0, #62	; 0x3e
    b260:	f200 81a9 	bhi.w	b5b6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b264:	e7ff      	b.n	b266 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b266:	f240 10ba 	movw	r0, #442	; 0x1ba
    b26a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b26e:	9902      	ldr	r1, [sp, #8]
    b270:	5c40      	ldrb	r0, [r0, r1]
    b272:	0900      	lsrs	r0, r0, #4
    b274:	9001      	str	r0, [sp, #4]
    b276:	e7ff      	b.n	b278 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b278:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b27a:	2809      	cmp	r0, #9
    b27c:	f200 81a4 	bhi.w	b5c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b280:	e7ff      	b.n	b282 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b282:	9826      	ldr	r0, [sp, #152]	; 0x98
    b284:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b286:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b28a:	9b01      	ldr	r3, [sp, #4]
    b28c:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b28e:	290a      	cmp	r1, #10
    b290:	d326      	bcc.n	b2e0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b292:	e1a2      	b.n	b5da <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b294:	2001      	movs	r0, #1
    b296:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b29a:	e009      	b.n	b2b0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b29c:	2000      	movs	r0, #0
    b29e:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b2a2:	e005      	b.n	b2b0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b2a4:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2a6:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b2aa:	2900      	cmp	r1, #0
    b2ac:	d0f2      	beq.n	b294 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b2ae:	e7f5      	b.n	b29c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b2b0:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b2b4:	07c0      	lsls	r0, r0, #31
    b2b6:	2800      	cmp	r0, #0
    b2b8:	d123      	bne.n	b302 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b2ba:	e021      	b.n	b300 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b2bc:	2001      	movs	r0, #1
    b2be:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b2c2:	e007      	b.n	b2d4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b2c4:	2000      	movs	r0, #0
    b2c6:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b2ca:	e003      	b.n	b2d4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b2cc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b2ce:	280a      	cmp	r0, #10
    b2d0:	d30e      	bcc.n	b2f0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b2d2:	e18b      	b.n	b5ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b2d4:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b2d8:	07c0      	lsls	r0, r0, #31
    b2da:	2800      	cmp	r0, #0
    b2dc:	d1e2      	bne.n	b2a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b2de:	e7dd      	b.n	b29c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b2e0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b2e4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b2e8:	7912      	ldrb	r2, [r2, #4]
    b2ea:	2a00      	cmp	r2, #0
    b2ec:	d0e6      	beq.n	b2bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b2ee:	e7ed      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b2f0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b2f4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b2f8:	7912      	ldrb	r2, [r2, #4]
    b2fa:	2a02      	cmp	r2, #2
    b2fc:	d0de      	beq.n	b2bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b2fe:	e7e1      	b.n	b2c4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b300:	e626      	b.n	af50 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b302:	e66b      	b.n	afdc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b304:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b308:	f2c0 0001 	movt	r0, #1
    b30c:	f64b 522c 	movw	r2, #48428	; 0xbd2c
    b310:	f2c0 0201 	movt	r2, #1
    b314:	2121      	movs	r1, #33	; 0x21
    b316:	f009 fedb 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b31a:	defe      	udf	#254	; 0xfe
    b31c:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b320:	f2c0 0001 	movt	r0, #1
    b324:	f64b 5264 	movw	r2, #48484	; 0xbd64
    b328:	f2c0 0201 	movt	r2, #1
    b32c:	211c      	movs	r1, #28
    b32e:	f009 fecf 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b332:	defe      	udf	#254	; 0xfe
    b334:	f64b 509c 	movw	r0, #48540	; 0xbd9c
    b338:	f2c0 0001 	movt	r0, #1
    b33c:	223f      	movs	r2, #63	; 0x3f
    b33e:	991d      	ldr	r1, [sp, #116]	; 0x74
    b340:	f009 fedc 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b344:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b346:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b34a:	f2c0 0001 	movt	r0, #1
    b34e:	f64b 52ac 	movw	r2, #48556	; 0xbdac
    b352:	f2c0 0201 	movt	r2, #1
    b356:	211c      	movs	r1, #28
    b358:	f009 feba 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b35c:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b35e:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b362:	f2c0 0001 	movt	r0, #1
    b366:	f64b 52bc 	movw	r2, #48572	; 0xbdbc
    b36a:	f2c0 0201 	movt	r2, #1
    b36e:	2121      	movs	r1, #33	; 0x21
    b370:	f009 feae 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b374:	defe      	udf	#254	; 0xfe
    b376:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b37a:	f2c0 0001 	movt	r0, #1
    b37e:	f64b 52cc 	movw	r2, #48588	; 0xbdcc
    b382:	f2c0 0201 	movt	r2, #1
    b386:	211c      	movs	r1, #28
    b388:	f009 fea2 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b38c:	defe      	udf	#254	; 0xfe
    b38e:	f64b 50dc 	movw	r0, #48604	; 0xbddc
    b392:	f2c0 0001 	movt	r0, #1
    b396:	223f      	movs	r2, #63	; 0x3f
    b398:	9919      	ldr	r1, [sp, #100]	; 0x64
    b39a:	f009 feaf 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b39e:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b3a0:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b3a4:	f2c0 0001 	movt	r0, #1
    b3a8:	f64b 52ec 	movw	r2, #48620	; 0xbdec
    b3ac:	f2c0 0201 	movt	r2, #1
    b3b0:	2121      	movs	r1, #33	; 0x21
    b3b2:	f009 fe8d 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b3b6:	defe      	udf	#254	; 0xfe
    b3b8:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b3bc:	f2c0 0001 	movt	r0, #1
    b3c0:	f64b 52fc 	movw	r2, #48636	; 0xbdfc
    b3c4:	f2c0 0201 	movt	r2, #1
    b3c8:	211c      	movs	r1, #28
    b3ca:	f009 fe81 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b3ce:	defe      	udf	#254	; 0xfe
    b3d0:	f64b 600c 	movw	r0, #48652	; 0xbe0c
    b3d4:	f2c0 0001 	movt	r0, #1
    b3d8:	223f      	movs	r2, #63	; 0x3f
    b3da:	9916      	ldr	r1, [sp, #88]	; 0x58
    b3dc:	f009 fe8e 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3e0:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b3e2:	f64b 601c 	movw	r0, #48668	; 0xbe1c
    b3e6:	f2c0 0001 	movt	r0, #1
    b3ea:	220a      	movs	r2, #10
    b3ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b3ee:	f009 fe85 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3f2:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b3f4:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b3f8:	f2c0 0001 	movt	r0, #1
    b3fc:	f64b 622c 	movw	r2, #48684	; 0xbe2c
    b400:	f2c0 0201 	movt	r2, #1
    b404:	2121      	movs	r1, #33	; 0x21
    b406:	f009 fe63 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b40a:	defe      	udf	#254	; 0xfe
    b40c:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b410:	f2c0 0001 	movt	r0, #1
    b414:	f64b 623c 	movw	r2, #48700	; 0xbe3c
    b418:	f2c0 0201 	movt	r2, #1
    b41c:	211c      	movs	r1, #28
    b41e:	f009 fe57 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b422:	defe      	udf	#254	; 0xfe
    b424:	f64b 604c 	movw	r0, #48716	; 0xbe4c
    b428:	f2c0 0001 	movt	r0, #1
    b42c:	223f      	movs	r2, #63	; 0x3f
    b42e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b430:	f009 fe64 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b434:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b436:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b43a:	f2c0 0001 	movt	r0, #1
    b43e:	f64b 625c 	movw	r2, #48732	; 0xbe5c
    b442:	f2c0 0201 	movt	r2, #1
    b446:	2121      	movs	r1, #33	; 0x21
    b448:	f009 fe42 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b44c:	defe      	udf	#254	; 0xfe
    b44e:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b452:	f2c0 0001 	movt	r0, #1
    b456:	f64b 626c 	movw	r2, #48748	; 0xbe6c
    b45a:	f2c0 0201 	movt	r2, #1
    b45e:	211c      	movs	r1, #28
    b460:	f009 fe36 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b464:	defe      	udf	#254	; 0xfe
    b466:	f64b 607c 	movw	r0, #48764	; 0xbe7c
    b46a:	f2c0 0001 	movt	r0, #1
    b46e:	223f      	movs	r2, #63	; 0x3f
    b470:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b472:	f009 fe43 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b476:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b478:	f64b 608c 	movw	r0, #48780	; 0xbe8c
    b47c:	f2c0 0001 	movt	r0, #1
    b480:	220a      	movs	r2, #10
    b482:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b484:	f009 fe3a 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b488:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b48a:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b48e:	f2c0 0001 	movt	r0, #1
    b492:	f64b 629c 	movw	r2, #48796	; 0xbe9c
    b496:	f2c0 0201 	movt	r2, #1
    b49a:	2121      	movs	r1, #33	; 0x21
    b49c:	f009 fe18 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4a0:	defe      	udf	#254	; 0xfe
    b4a2:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b4a6:	f2c0 0001 	movt	r0, #1
    b4aa:	f64b 62ac 	movw	r2, #48812	; 0xbeac
    b4ae:	f2c0 0201 	movt	r2, #1
    b4b2:	211c      	movs	r1, #28
    b4b4:	f009 fe0c 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4b8:	defe      	udf	#254	; 0xfe
    b4ba:	f64b 60bc 	movw	r0, #48828	; 0xbebc
    b4be:	f2c0 0001 	movt	r0, #1
    b4c2:	223f      	movs	r2, #63	; 0x3f
    b4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b4c6:	f009 fe19 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b4ca:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b4cc:	f64b 60cc 	movw	r0, #48844	; 0xbecc
    b4d0:	f2c0 0001 	movt	r0, #1
    b4d4:	220a      	movs	r2, #10
    b4d6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b4d8:	f009 fe10 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b4dc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b4de:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b4e2:	f2c0 0001 	movt	r0, #1
    b4e6:	f64b 62dc 	movw	r2, #48860	; 0xbedc
    b4ea:	f2c0 0201 	movt	r2, #1
    b4ee:	2121      	movs	r1, #33	; 0x21
    b4f0:	f009 fdee 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4f4:	defe      	udf	#254	; 0xfe
    b4f6:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b4fa:	f2c0 0001 	movt	r0, #1
    b4fe:	f64b 62ec 	movw	r2, #48876	; 0xbeec
    b502:	f2c0 0201 	movt	r2, #1
    b506:	211c      	movs	r1, #28
    b508:	f009 fde2 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b50c:	defe      	udf	#254	; 0xfe
    b50e:	f64b 60fc 	movw	r0, #48892	; 0xbefc
    b512:	f2c0 0001 	movt	r0, #1
    b516:	223f      	movs	r2, #63	; 0x3f
    b518:	9908      	ldr	r1, [sp, #32]
    b51a:	f009 fdef 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b51e:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b520:	f64b 700c 	movw	r0, #48908	; 0xbf0c
    b524:	f2c0 0001 	movt	r0, #1
    b528:	220a      	movs	r2, #10
    b52a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b52c:	f009 fde6 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b530:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b532:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b536:	f2c0 0001 	movt	r0, #1
    b53a:	f64b 721c 	movw	r2, #48924	; 0xbf1c
    b53e:	f2c0 0201 	movt	r2, #1
    b542:	2121      	movs	r1, #33	; 0x21
    b544:	f009 fdc4 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b548:	defe      	udf	#254	; 0xfe
    b54a:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b54e:	f2c0 0001 	movt	r0, #1
    b552:	f64b 722c 	movw	r2, #48940	; 0xbf2c
    b556:	f2c0 0201 	movt	r2, #1
    b55a:	211c      	movs	r1, #28
    b55c:	f009 fdb8 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b560:	defe      	udf	#254	; 0xfe
    b562:	f64b 703c 	movw	r0, #48956	; 0xbf3c
    b566:	f2c0 0001 	movt	r0, #1
    b56a:	223f      	movs	r2, #63	; 0x3f
    b56c:	9905      	ldr	r1, [sp, #20]
    b56e:	f009 fdc5 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b572:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b574:	f64b 704c 	movw	r0, #48972	; 0xbf4c
    b578:	f2c0 0001 	movt	r0, #1
    b57c:	220a      	movs	r2, #10
    b57e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b580:	f009 fdbc 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b584:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b586:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b58a:	f2c0 0001 	movt	r0, #1
    b58e:	f64b 725c 	movw	r2, #48988	; 0xbf5c
    b592:	f2c0 0201 	movt	r2, #1
    b596:	2121      	movs	r1, #33	; 0x21
    b598:	f009 fd9a 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b59c:	defe      	udf	#254	; 0xfe
    b59e:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b5a2:	f2c0 0001 	movt	r0, #1
    b5a6:	f64b 726c 	movw	r2, #49004	; 0xbf6c
    b5aa:	f2c0 0201 	movt	r2, #1
    b5ae:	211c      	movs	r1, #28
    b5b0:	f009 fd8e 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b5b4:	defe      	udf	#254	; 0xfe
    b5b6:	f64b 707c 	movw	r0, #49020	; 0xbf7c
    b5ba:	f2c0 0001 	movt	r0, #1
    b5be:	223f      	movs	r2, #63	; 0x3f
    b5c0:	9902      	ldr	r1, [sp, #8]
    b5c2:	f009 fd9b 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5c6:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b5c8:	f64b 708c 	movw	r0, #49036	; 0xbf8c
    b5cc:	f2c0 0001 	movt	r0, #1
    b5d0:	220a      	movs	r2, #10
    b5d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5d4:	f009 fd92 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5d8:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5da:	f64b 709c 	movw	r0, #49052	; 0xbf9c
    b5de:	f2c0 0001 	movt	r0, #1
    b5e2:	220a      	movs	r2, #10
    b5e4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5e6:	f009 fd89 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5ea:	defe      	udf	#254	; 0xfe
    b5ec:	f64b 70ac 	movw	r0, #49068	; 0xbfac
    b5f0:	f2c0 0001 	movt	r0, #1
    b5f4:	220a      	movs	r2, #10
    b5f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5f8:	f009 fd80 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5fc:	defe      	udf	#254	; 0xfe

0000b5fe <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b5fe:	b5b0      	push	{r4, r5, r7, lr}
    b600:	b094      	sub	sp, #80	; 0x50
    b602:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b606:	4696      	mov	lr, r2
    b608:	460c      	mov	r4, r1
    b60a:	4605      	mov	r5, r0
    b60c:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b610:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b614:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b618:	9310      	str	r3, [sp, #64]	; 0x40
    b61a:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b61e:	4618      	mov	r0, r3
    b620:	4661      	mov	r1, ip
    b622:	930d      	str	r3, [sp, #52]	; 0x34
    b624:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b628:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b62c:	940a      	str	r4, [sp, #40]	; 0x28
    b62e:	9509      	str	r5, [sp, #36]	; 0x24
    b630:	f006 f856 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b634:	9008      	str	r0, [sp, #32]
    b636:	e7ff      	b.n	b638 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    b638:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b63a:	b2c1      	uxtb	r1, r0
    b63c:	9a08      	ldr	r2, [sp, #32]
    b63e:	428a      	cmp	r2, r1
    b640:	d30d      	bcc.n	b65e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    b642:	e7ff      	b.n	b644 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b644:	980a      	ldr	r0, [sp, #40]	; 0x28
    b646:	b2c1      	uxtb	r1, r0
    b648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b64a:	fa51 f182 	uxtab	r1, r1, r2
    b64e:	b2cb      	uxtb	r3, r1
    b650:	468c      	mov	ip, r1
    b652:	428b      	cmp	r3, r1
    b654:	f8cd c01c 	str.w	ip, [sp, #28]
    b658:	f040 8092 	bne.w	b780 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    b65c:	e00b      	b.n	b676 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b65e:	f64b 70bc 	movw	r0, #49084	; 0xbfbc
    b662:	f2c0 0001 	movt	r0, #1
    b666:	f64b 72c4 	movw	r2, #49092	; 0xbfc4
    b66a:	f2c0 0201 	movt	r2, #1
    b66e:	2107      	movs	r1, #7
    b670:	f009 fd2e 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b674:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b676:	9807      	ldr	r0, [sp, #28]
    b678:	b241      	sxtb	r1, r0
    b67a:	2900      	cmp	r1, #0
    b67c:	d411      	bmi.n	b6a2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    b67e:	e7ff      	b.n	b680 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b680:	f240 2014 	movw	r0, #532	; 0x214
    b684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b688:	990a      	ldr	r1, [sp, #40]	; 0x28
    b68a:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b68c:	f240 220c 	movw	r2, #524	; 0x20c
    b690:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b694:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b696:	7013      	strb	r3, [r2, #0]
    b698:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b69a:	f006 f821 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b69e:	9006      	str	r0, [sp, #24]
    b6a0:	e00b      	b.n	b6ba <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b6a2:	f64b 40c0 	movw	r0, #48320	; 0xbcc0
    b6a6:	f2c0 0001 	movt	r0, #1
    b6aa:	f64b 72e4 	movw	r2, #49124	; 0xbfe4
    b6ae:	f2c0 0201 	movt	r2, #1
    b6b2:	2108      	movs	r1, #8
    b6b4:	f009 fd0c 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6b8:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b6ba:	f240 200c 	movw	r0, #524	; 0x20c
    b6be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6c2:	9906      	ldr	r1, [sp, #24]
    b6c4:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b6c6:	f240 2014 	movw	r0, #532	; 0x214
    b6ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6ce:	2101      	movs	r1, #1
    b6d0:	f005 ffef 	bl	116b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b6d4:	9005      	str	r0, [sp, #20]
    b6d6:	e7ff      	b.n	b6d8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    b6d8:	f240 200c 	movw	r0, #524	; 0x20c
    b6dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6e0:	9905      	ldr	r1, [sp, #20]
    b6e2:	6041      	str	r1, [r0, #4]
    b6e4:	2201      	movs	r2, #1
    b6e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b6ea:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    b6ee:	9004      	str	r0, [sp, #16]
    b6f0:	4610      	mov	r0, r2
    b6f2:	9904      	ldr	r1, [sp, #16]
    b6f4:	461a      	mov	r2, r3
    b6f6:	4663      	mov	r3, ip
    b6f8:	f00b ff10 	bl	1751c <hal_i2c_master_write>
    b6fc:	9012      	str	r0, [sp, #72]	; 0x48
    b6fe:	e7ff      	b.n	b700 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    b700:	f240 2014 	movw	r0, #532	; 0x214
    b704:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b708:	2100      	movs	r1, #0
    b70a:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    b70c:	f240 200c 	movw	r0, #524	; 0x20c
    b710:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b714:	9909      	ldr	r1, [sp, #36]	; 0x24
    b716:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    b718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b71a:	b2d3      	uxtb	r3, r2
    b71c:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b71e:	980d      	ldr	r0, [sp, #52]	; 0x34
    b720:	990c      	ldr	r1, [sp, #48]	; 0x30
    b722:	f005 ffc6 	bl	116b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b726:	9003      	str	r0, [sp, #12]
    b728:	e7ff      	b.n	b72a <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    b72a:	f240 200c 	movw	r0, #524	; 0x20c
    b72e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b732:	9903      	ldr	r1, [sp, #12]
    b734:	6041      	str	r1, [r0, #4]
    b736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b73a:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    b73c:	9002      	str	r0, [sp, #8]
    b73e:	4618      	mov	r0, r3
    b740:	9902      	ldr	r1, [sp, #8]
    b742:	f00b ff7f 	bl	17644 <hal_i2c_master_read>
    b746:	4601      	mov	r1, r0
    b748:	9013      	str	r0, [sp, #76]	; 0x4c
    b74a:	9101      	str	r1, [sp, #4]
    b74c:	e7ff      	b.n	b74e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    b74e:	9801      	ldr	r0, [sp, #4]
    b750:	2804      	cmp	r0, #4
    b752:	d005      	beq.n	b760 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    b754:	e7ff      	b.n	b756 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    b756:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    b758:	900e      	str	r0, [sp, #56]	; 0x38
    b75a:	2001      	movs	r0, #1
    b75c:	900e      	str	r0, [sp, #56]	; 0x38
}
    b75e:	e00c      	b.n	b77a <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    b760:	f64b 70f4 	movw	r0, #49140	; 0xbff4
    b764:	f2c0 0001 	movt	r0, #1
    b768:	2109      	movs	r1, #9
    b76a:	f7fd fc41 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b76e:	e7ff      	b.n	b770 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    b770:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    b772:	900e      	str	r0, [sp, #56]	; 0x38
    b774:	2001      	movs	r0, #1
    b776:	900e      	str	r0, [sp, #56]	; 0x38
    b778:	e7ff      	b.n	b77a <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    b77a:	980e      	ldr	r0, [sp, #56]	; 0x38
    b77c:	b014      	add	sp, #80	; 0x50
    b77e:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b780:	f64b 5080 	movw	r0, #48512	; 0xbd80
    b784:	f2c0 0001 	movt	r0, #1
    b788:	f64b 72d4 	movw	r2, #49108	; 0xbfd4
    b78c:	f2c0 0201 	movt	r2, #1
    b790:	211c      	movs	r1, #28
    b792:	f009 fc9d 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b796:	defe      	udf	#254	; 0xfe

0000b798 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    b798:	b580      	push	{r7, lr}
    b79a:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    b79c:	f64b 70fd 	movw	r0, #49149	; 0xbffd
    b7a0:	f2c0 0001 	movt	r0, #1
    b7a4:	210b      	movs	r1, #11
    b7a6:	f7fd fc23 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b7aa:	e7ff      	b.n	b7ac <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    b7ac:	f7fd fc66 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b7b0:	e7ff      	b.n	b7b2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    b7b2:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    b7b4:	900e      	str	r0, [sp, #56]	; 0x38
    b7b6:	990e      	ldr	r1, [sp, #56]	; 0x38
    b7b8:	f005 fd34 	bl	11224 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b7bc:	900d      	str	r0, [sp, #52]	; 0x34
    b7be:	910c      	str	r1, [sp, #48]	; 0x30
    b7c0:	e7ff      	b.n	b7c2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    b7c2:	20ef      	movs	r0, #239	; 0xef
    b7c4:	900b      	str	r0, [sp, #44]	; 0x2c
    b7c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b7c8:	f005 fd2c 	bl	11224 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b7cc:	900a      	str	r0, [sp, #40]	; 0x28
    b7ce:	9109      	str	r1, [sp, #36]	; 0x24
    b7d0:	e7ff      	b.n	b7d2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    b7d2:	4668      	mov	r0, sp
    b7d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    b7d6:	6001      	str	r1, [r0, #0]
    b7d8:	a817      	add	r0, sp, #92	; 0x5c
    b7da:	990d      	ldr	r1, [sp, #52]	; 0x34
    b7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7e0:	f008 fd4a 	bl	14278 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    b7e4:	e7ff      	b.n	b7e6 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    b7e6:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    b7e8:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    b7ec:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    b7f0:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    b7f4:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    b7f8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    b7fc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    b800:	f005 fd19 	bl	11236 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    b804:	9008      	str	r0, [sp, #32]
    b806:	e7ff      	b.n	b808 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    b808:	9808      	ldr	r0, [sp, #32]
    b80a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    b80e:	2101      	movs	r1, #1
    b810:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    b814:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    b818:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    b81c:	a810      	add	r0, sp, #64	; 0x40
    b81e:	a917      	add	r1, sp, #92	; 0x5c
    b820:	f008 fd18 	bl	14254 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    b824:	e7ff      	b.n	b826 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    //  druid::draw_to_display(background);

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    b826:	f24c 001c 	movw	r0, #49180	; 0xc01c
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    b830:	f64b 00b1 	movw	r0, #47281	; 0xb8b1
    b834:	f2c0 0000 	movt	r0, #0
    b838:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    b83a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b83c:	4668      	mov	r0, sp
    b83e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    b842:	6103      	str	r3, [r0, #16]
    b844:	60c3      	str	r3, [r0, #12]
    b846:	f240 2368 	movw	r3, #616	; 0x268
    b84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b84e:	6083      	str	r3, [r0, #8]
    b850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b854:	6043      	str	r3, [r0, #4]
    b856:	2314      	movs	r3, #20
    b858:	6003      	str	r3, [r0, #0]
    b85a:	f240 2018 	movw	r0, #536	; 0x218
    b85e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b862:	2300      	movs	r3, #0
    b864:	f7fd fa14 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    b868:	9007      	str	r0, [sp, #28]
    b86a:	e7ff      	b.n	b86c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xd4>
    b86c:	9807      	ldr	r0, [sp, #28]
    b86e:	f7fd f983 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b872:	9020      	str	r0, [sp, #128]	; 0x80
    b874:	e7ff      	b.n	b876 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xde>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    b876:	9820      	ldr	r0, [sp, #128]	; 0x80
    b878:	1e41      	subs	r1, r0, #1
    b87a:	bf18      	it	ne
    b87c:	2101      	movne	r1, #1
    b87e:	2801      	cmp	r0, #1
    b880:	d001      	beq.n	b886 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xee>
    b882:	e7ff      	b.n	b884 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xec>
    b884:	e005      	b.n	b892 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfa>
    b886:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    b888:	900f      	str	r0, [sp, #60]	; 0x3c
    b88a:	2001      	movs	r0, #1
    b88c:	900f      	str	r0, [sp, #60]	; 0x3c
}
    b88e:	e006      	b.n	b89e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x106>
    os::task_init(                  //  Create a new task and start it...
    b890:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    b892:	9820      	ldr	r0, [sp, #128]	; 0x80
    b894:	9023      	str	r0, [sp, #140]	; 0x8c
    b896:	f006 fbad 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b89a:	9006      	str	r0, [sp, #24]
    b89c:	e002      	b.n	b8a4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
}
    b89e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b8a0:	b024      	add	sp, #144	; 0x90
    b8a2:	bd80      	pop	{r7, pc}
    ) ? ;                                 //  `?` means check for error
    b8a4:	9806      	ldr	r0, [sp, #24]
    b8a6:	f7fd f95b 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b8aa:	900f      	str	r0, [sp, #60]	; 0x3c
    b8ac:	e7ff      	b.n	b8ae <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x116>
    b8ae:	e7f6      	b.n	b89e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x106>

0000b8b0 <_ZN3app5chip89task_func17h385831a0096277b5E>:

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    b8b0:	b580      	push	{r7, lr}
    b8b2:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    b8b6:	b082      	sub	sp, #8
    b8b8:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    b8bc:	f10d 0e0c 	add.w	lr, sp, #12
    b8c0:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    b8c4:	6008      	str	r0, [r1, #0]
    b8c6:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    b8c8:	9103      	str	r1, [sp, #12]
    b8ca:	9202      	str	r2, [sp, #8]
    b8cc:	f000 fb82 	bl	bfd4 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E>
    b8d0:	e7ff      	b.n	b8d2 <_ZN3app5chip89task_func17h385831a0096277b5E+0x22>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    b8d2:	9804      	ldr	r0, [sp, #16]
    b8d4:	9905      	ldr	r1, [sp, #20]
    b8d6:	9a02      	ldr	r2, [sp, #8]
    b8d8:	6011      	str	r1, [r2, #0]
    b8da:	f842 0c04 	str.w	r0, [r2, #-4]
    b8de:	a806      	add	r0, sp, #24
    b8e0:	f10d 0e08 	add.w	lr, sp, #8
    b8e4:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    b8e8:	f001 f916 	bl	cb18 <_ZN8libchip814Chip8$LT$T$GT$3new17h365c56fd6f683110E>
    b8ec:	e7ff      	b.n	b8ee <_ZN3app5chip89task_func17h385831a0096277b5E+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    b8ee:	f24c 0020 	movw	r0, #49184	; 0xc020
    b8f2:	f2c0 0001 	movt	r0, #1
    b8f6:	210e      	movs	r1, #14
    b8f8:	f7fd fb7a 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b8fc:	e7ff      	b.n	b8fe <_ZN3app5chip89task_func17h385831a0096277b5E+0x4e>
    b8fe:	f7fd fbbd 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b902:	e7ff      	b.n	b904 <_ZN3app5chip89task_func17h385831a0096277b5E+0x54>

    //  Load the emulator ROM
    let rom = include_bytes!("../roms/invaders.ch8");
    b904:	f24c 002e 	movw	r0, #49198	; 0xc02e
    b908:	f2c0 0001 	movt	r0, #1
    b90c:	9903      	ldr	r1, [sp, #12]
    b90e:	6048      	str	r0, [r1, #4]
    b910:	f10d 0e10 	add.w	lr, sp, #16
    b914:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    b918:	a906      	add	r1, sp, #24
    b91a:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/pong.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    b91e:	9001      	str	r0, [sp, #4]
    b920:	4610      	mov	r0, r2
    b922:	9200      	str	r2, [sp, #0]
    b924:	461a      	mov	r2, r3
    b926:	f00f fedf 	bl	1b6e8 <__aeabi_memcpy>
    b92a:	f240 5215 	movw	r2, #1301	; 0x515
    b92e:	9800      	ldr	r0, [sp, #0]
    b930:	9901      	ldr	r1, [sp, #4]
    b932:	f001 f99c 	bl	cc6e <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E>
    b936:	e7ff      	b.n	b938 <_ZN3app5chip89task_func17h385831a0096277b5E+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    b938:	f24c 5043 	movw	r0, #50499	; 0xc543
    b93c:	f2c0 0001 	movt	r0, #1
    b940:	210b      	movs	r1, #11
    b942:	f7fd fb55 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b946:	e7ff      	b.n	b948 <_ZN3app5chip89task_func17h385831a0096277b5E+0x98>
    b948:	f7fd fb98 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b94c:	e7ff      	b.n	b94e <_ZN3app5chip89task_func17h385831a0096277b5E+0x9e>
    assert!(false, "CHIP8 should not end");
    b94e:	f24c 504e 	movw	r0, #50510	; 0xc54e
    b952:	f2c0 0001 	movt	r0, #1
    b956:	f24c 5278 	movw	r2, #50552	; 0xc578
    b95a:	f2c0 0201 	movt	r2, #1
    b95e:	2114      	movs	r1, #20
    b960:	f009 fbb6 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b964:	defe      	udf	#254	; 0xfe

0000b966 <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>:
    block_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    b966:	b570      	push	{r4, r5, r6, lr}
    b968:	b081      	sub	sp, #4
    b96a:	f8dd c014 	ldr.w	ip, [sp, #20]
    b96e:	469e      	mov	lr, r3
    b970:	4614      	mov	r4, r2
    b972:	460d      	mov	r5, r1
    b974:	f88d 1000 	strb.w	r1, [sp]
    b978:	f88d 2001 	strb.w	r2, [sp, #1]
    b97c:	f88d 3002 	strb.w	r3, [sp, #2]
    b980:	f88d c003 	strb.w	ip, [sp, #3]
        //  End column number for block
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        PixelIterator {
    b984:	7001      	strb	r1, [r0, #0]
    b986:	7042      	strb	r2, [r0, #1]
    b988:	2600      	movs	r6, #0
    b98a:	7086      	strb	r6, [r0, #2]
    b98c:	70c6      	strb	r6, [r0, #3]
    b98e:	7101      	strb	r1, [r0, #4]
    b990:	7143      	strb	r3, [r0, #5]
    b992:	7182      	strb	r2, [r0, #6]
    b994:	f880 c007 	strb.w	ip, [r0, #7]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right,
            block_top, block_bottom,
        }
    }
    b998:	b001      	add	sp, #4
    b99a:	bd70      	pop	{r4, r5, r6, pc}

0000b99c <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E>:
        self.x == self.block_left && self.y == self.block_top &&
            self.x_offset == 0 && self.y_offset == 0
    }
    */
    /// Return true if the Virtual Pixel is in the block
    pub fn contains(&self, x: u8, y: u8) -> bool {
    b99c:	b580      	push	{r7, lr}
    b99e:	b086      	sub	sp, #24
    b9a0:	b2cb      	uxtb	r3, r1
    b9a2:	4694      	mov	ip, r2
    b9a4:	468e      	mov	lr, r1
    b9a6:	9004      	str	r0, [sp, #16]
    b9a8:	f88d 1016 	strb.w	r1, [sp, #22]
    b9ac:	f88d 2017 	strb.w	r2, [sp, #23]
        x >= self.block_left && x <= self.block_right &&
    b9b0:	7901      	ldrb	r1, [r0, #4]
    b9b2:	428b      	cmp	r3, r1
    b9b4:	9002      	str	r0, [sp, #8]
    b9b6:	f8cd c004 	str.w	ip, [sp, #4]
    b9ba:	f8cd e000 	str.w	lr, [sp]
    b9be:	d230      	bcs.n	ba22 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x86>
    b9c0:	e02b      	b.n	ba1a <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x7e>
    b9c2:	2001      	movs	r0, #1
    b9c4:	f88d 000d 	strb.w	r0, [sp, #13]
    b9c8:	e00a      	b.n	b9e0 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x44>
    b9ca:	2000      	movs	r0, #0
    b9cc:	f88d 000d 	strb.w	r0, [sp, #13]
    b9d0:	e006      	b.n	b9e0 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x44>
            y >= self.block_top && y <= self.block_bottom
    b9d2:	9802      	ldr	r0, [sp, #8]
    b9d4:	79c1      	ldrb	r1, [r0, #7]
    b9d6:	9a01      	ldr	r2, [sp, #4]
    b9d8:	b2d3      	uxtb	r3, r2
        x >= self.block_left && x <= self.block_right &&
    b9da:	428b      	cmp	r3, r1
    b9dc:	d9f1      	bls.n	b9c2 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x26>
    b9de:	e7f4      	b.n	b9ca <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x2e>
    }
    b9e0:	f89d 000d 	ldrb.w	r0, [sp, #13]
    b9e4:	b006      	add	sp, #24
    b9e6:	bd80      	pop	{r7, pc}
    b9e8:	2001      	movs	r0, #1
        x >= self.block_left && x <= self.block_right &&
    b9ea:	f88d 000e 	strb.w	r0, [sp, #14]
    b9ee:	e00a      	b.n	ba06 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x6a>
    b9f0:	2000      	movs	r0, #0
    b9f2:	f88d 000e 	strb.w	r0, [sp, #14]
    b9f6:	e006      	b.n	ba06 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x6a>
            y >= self.block_top && y <= self.block_bottom
    b9f8:	9802      	ldr	r0, [sp, #8]
    b9fa:	7981      	ldrb	r1, [r0, #6]
    b9fc:	9a01      	ldr	r2, [sp, #4]
    b9fe:	b2d3      	uxtb	r3, r2
        x >= self.block_left && x <= self.block_right &&
    ba00:	428b      	cmp	r3, r1
    ba02:	d2f1      	bcs.n	b9e8 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x4c>
    ba04:	e7f4      	b.n	b9f0 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x54>
    ba06:	f89d 000e 	ldrb.w	r0, [sp, #14]
    ba0a:	07c0      	lsls	r0, r0, #31
    ba0c:	2800      	cmp	r0, #0
    ba0e:	d1e0      	bne.n	b9d2 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x36>
    ba10:	e7db      	b.n	b9ca <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x2e>
    ba12:	2001      	movs	r0, #1
    ba14:	f88d 000f 	strb.w	r0, [sp, #15]
    ba18:	e00a      	b.n	ba30 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x94>
    ba1a:	2000      	movs	r0, #0
    ba1c:	f88d 000f 	strb.w	r0, [sp, #15]
    ba20:	e006      	b.n	ba30 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x94>
    ba22:	9802      	ldr	r0, [sp, #8]
    ba24:	7941      	ldrb	r1, [r0, #5]
    ba26:	9a00      	ldr	r2, [sp, #0]
    ba28:	b2d3      	uxtb	r3, r2
    ba2a:	428b      	cmp	r3, r1
    ba2c:	d9f1      	bls.n	ba12 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x76>
    ba2e:	e7f4      	b.n	ba1a <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x7e>
    ba30:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ba34:	07c0      	lsls	r0, r0, #31
    ba36:	2800      	cmp	r0, #0
    ba38:	d1de      	bne.n	b9f8 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x5c>
    ba3a:	e7d9      	b.n	b9f0 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x54>

0000ba3c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E>:
    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    ba3c:	b580      	push	{r7, lr}
    ba3e:	b092      	sub	sp, #72	; 0x48
    ba40:	9010      	str	r0, [sp, #64]	; 0x40
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    ba42:	7901      	ldrb	r1, [r0, #4]
    ba44:	2203      	movs	r2, #3
    ba46:	fba1 1202 	umull	r1, r2, r1, r2
    ba4a:	0a0b      	lsrs	r3, r1, #8
    ba4c:	f04f 0c00 	mov.w	ip, #0
    ba50:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    ba54:	bf18      	it	ne
    ba56:	2301      	movne	r3, #1
    ba58:	2a00      	cmp	r2, #0
    ba5a:	bf18      	it	ne
    ba5c:	2201      	movne	r2, #1
    ba5e:	ea42 0203 	orr.w	r2, r2, r3
    ba62:	2a00      	cmp	r2, #0
    ba64:	900d      	str	r0, [sp, #52]	; 0x34
    ba66:	910c      	str	r1, [sp, #48]	; 0x30
    ba68:	f040 810a 	bne.w	bc80 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x244>
    ba6c:	e7ff      	b.n	ba6e <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x32>
    ba6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    ba70:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    ba74:	990d      	ldr	r1, [sp, #52]	; 0x34
    ba76:	798a      	ldrb	r2, [r1, #6]
    ba78:	2305      	movs	r3, #5
    ba7a:	fba2 2303 	umull	r2, r3, r2, r3
    ba7e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    ba82:	f04f 0e00 	mov.w	lr, #0
    ba86:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    ba8a:	bf18      	it	ne
    ba8c:	f04f 0c01 	movne.w	ip, #1
    ba90:	2b00      	cmp	r3, #0
    ba92:	bf18      	it	ne
    ba94:	2301      	movne	r3, #1
    ba96:	ea43 030c 	orr.w	r3, r3, ip
    ba9a:	2b00      	cmp	r3, #0
    ba9c:	920b      	str	r2, [sp, #44]	; 0x2c
    ba9e:	f040 80fb 	bne.w	bc98 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x25c>
    baa2:	e7ff      	b.n	baa4 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x68>
    baa4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    baa6:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    baaa:	990d      	ldr	r1, [sp, #52]	; 0x34
    baac:	790a      	ldrb	r2, [r1, #4]
    baae:	794b      	ldrb	r3, [r1, #5]
    bab0:	1a9a      	subs	r2, r3, r2
    bab2:	b2d3      	uxtb	r3, r2
    bab4:	4694      	mov	ip, r2
    bab6:	4293      	cmp	r3, r2
    bab8:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    babc:	f040 80f8 	bne.w	bcb0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x274>
    bac0:	e7ff      	b.n	bac2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x86>
    bac2:	2001      	movs	r0, #1
    bac4:	990a      	ldr	r1, [sp, #40]	; 0x28
    bac6:	fa50 f081 	uxtab	r0, r0, r1
    baca:	b2c2      	uxtb	r2, r0
    bacc:	4603      	mov	r3, r0
    bace:	4282      	cmp	r2, r0
    bad0:	9309      	str	r3, [sp, #36]	; 0x24
    bad2:	f040 80f9 	bne.w	bcc8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x28c>
    bad6:	e7ff      	b.n	bad8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x9c>
    bad8:	9809      	ldr	r0, [sp, #36]	; 0x24
    bada:	b2c1      	uxtb	r1, r0
    badc:	2203      	movs	r2, #3
    bade:	fba1 1202 	umull	r1, r2, r1, r2
    bae2:	0a0b      	lsrs	r3, r1, #8
    bae4:	f04f 0c00 	mov.w	ip, #0
    bae8:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    baec:	bf18      	it	ne
    baee:	2301      	movne	r3, #1
    baf0:	2a00      	cmp	r2, #0
    baf2:	bf18      	it	ne
    baf4:	2201      	movne	r2, #1
    baf6:	ea42 0203 	orr.w	r2, r2, r3
    bafa:	2a00      	cmp	r2, #0
    bafc:	9108      	str	r1, [sp, #32]
    bafe:	f040 80ef 	bne.w	bce0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2a4>
    bb02:	e7ff      	b.n	bb04 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xc8>
    bb04:	980c      	ldr	r0, [sp, #48]	; 0x30
    bb06:	b2c1      	uxtb	r1, r0
    bb08:	9a08      	ldr	r2, [sp, #32]
    bb0a:	fa51 f182 	uxtab	r1, r1, r2
    bb0e:	b2cb      	uxtb	r3, r1
    bb10:	468c      	mov	ip, r1
    bb12:	428b      	cmp	r3, r1
    bb14:	f8cd c01c 	str.w	ip, [sp, #28]
    bb18:	f040 80ee 	bne.w	bcf8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2bc>
    bb1c:	e7ff      	b.n	bb1e <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xe2>
    bb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bb22:	9907      	ldr	r1, [sp, #28]
    bb24:	fa50 f081 	uxtab	r0, r0, r1
    bb28:	b2c2      	uxtb	r2, r0
    bb2a:	4603      	mov	r3, r0
    bb2c:	4282      	cmp	r2, r0
    bb2e:	9306      	str	r3, [sp, #24]
    bb30:	f040 80ee 	bne.w	bd10 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2d4>
    bb34:	e7ff      	b.n	bb36 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xfa>
    bb36:	9806      	ldr	r0, [sp, #24]
    bb38:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    bb3c:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb3e:	798a      	ldrb	r2, [r1, #6]
    bb40:	79cb      	ldrb	r3, [r1, #7]
    bb42:	1a9a      	subs	r2, r3, r2
    bb44:	b2d3      	uxtb	r3, r2
    bb46:	4694      	mov	ip, r2
    bb48:	4293      	cmp	r3, r2
    bb4a:	f8cd c014 	str.w	ip, [sp, #20]
    bb4e:	f040 80eb 	bne.w	bd28 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2ec>
    bb52:	e7ff      	b.n	bb54 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x118>
    bb54:	2001      	movs	r0, #1
    bb56:	9905      	ldr	r1, [sp, #20]
    bb58:	fa50 f081 	uxtab	r0, r0, r1
    bb5c:	b2c2      	uxtb	r2, r0
    bb5e:	4603      	mov	r3, r0
    bb60:	4282      	cmp	r2, r0
    bb62:	9304      	str	r3, [sp, #16]
    bb64:	f040 80ec 	bne.w	bd40 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x304>
    bb68:	e7ff      	b.n	bb6a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x12e>
    bb6a:	9804      	ldr	r0, [sp, #16]
    bb6c:	b2c1      	uxtb	r1, r0
    bb6e:	2205      	movs	r2, #5
    bb70:	fba1 1202 	umull	r1, r2, r1, r2
    bb74:	0a0b      	lsrs	r3, r1, #8
    bb76:	f04f 0c00 	mov.w	ip, #0
    bb7a:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    bb7e:	bf18      	it	ne
    bb80:	2301      	movne	r3, #1
    bb82:	2a00      	cmp	r2, #0
    bb84:	bf18      	it	ne
    bb86:	2201      	movne	r2, #1
    bb88:	ea42 0203 	orr.w	r2, r2, r3
    bb8c:	2a00      	cmp	r2, #0
    bb8e:	9103      	str	r1, [sp, #12]
    bb90:	f040 80e2 	bne.w	bd58 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x31c>
    bb94:	e7ff      	b.n	bb96 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x15a>
    bb96:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bb98:	b2c1      	uxtb	r1, r0
    bb9a:	9a03      	ldr	r2, [sp, #12]
    bb9c:	fa51 f182 	uxtab	r1, r1, r2
    bba0:	b2cb      	uxtb	r3, r1
    bba2:	468c      	mov	ip, r1
    bba4:	428b      	cmp	r3, r1
    bba6:	f8cd c008 	str.w	ip, [sp, #8]
    bbaa:	f040 80e1 	bne.w	bd70 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x334>
    bbae:	e7ff      	b.n	bbb0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x174>
    bbb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bbb4:	9902      	ldr	r1, [sp, #8]
    bbb6:	fa50 f081 	uxtab	r0, r0, r1
    bbba:	b2c2      	uxtb	r2, r0
    bbbc:	4603      	mov	r3, r0
    bbbe:	4282      	cmp	r2, r0
    bbc0:	9301      	str	r3, [sp, #4]
    bbc2:	f040 80e1 	bne.w	bd88 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x34c>
    bbc6:	e7ff      	b.n	bbc8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x18c>
    bbc8:	9801      	ldr	r0, [sp, #4]
    bbca:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    bbce:	990c      	ldr	r1, [sp, #48]	; 0x30
    bbd0:	b2ca      	uxtb	r2, r1
    bbd2:	2af0      	cmp	r2, #240	; 0xf0
    bbd4:	d32e      	bcc.n	bc34 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f8>
    bbd6:	e029      	b.n	bc2c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f0>
    bbd8:	2001      	movs	r0, #1
    bbda:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    bbde:	e008      	b.n	bbf2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1b6>
    bbe0:	2000      	movs	r0, #0
    bbe2:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    bbe6:	e004      	b.n	bbf2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1b6>
    bbe8:	9801      	ldr	r0, [sp, #4]
    bbea:	b2c1      	uxtb	r1, r0
    bbec:	29f0      	cmp	r1, #240	; 0xf0
    bbee:	d3f3      	bcc.n	bbd8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x19c>
    bbf0:	e7f6      	b.n	bbe0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1a4>
    bbf2:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    bbf6:	07c0      	lsls	r0, r0, #31
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d035      	beq.n	bc68 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x22c>
    bbfc:	e025      	b.n	bc4a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x20e>
    bbfe:	2001      	movs	r0, #1
    bc00:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    bc04:	e008      	b.n	bc18 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1dc>
    bc06:	2000      	movs	r0, #0
    bc08:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    bc0c:	e004      	b.n	bc18 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1dc>
    bc0e:	9806      	ldr	r0, [sp, #24]
    bc10:	b2c1      	uxtb	r1, r0
    bc12:	29f0      	cmp	r1, #240	; 0xf0
    bc14:	d3f3      	bcc.n	bbfe <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1c2>
    bc16:	e7f6      	b.n	bc06 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ca>
    bc18:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    bc1c:	07c0      	lsls	r0, r0, #31
    bc1e:	2800      	cmp	r0, #0
    bc20:	d1e2      	bne.n	bbe8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ac>
    bc22:	e7dd      	b.n	bbe0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1a4>
    bc24:	2001      	movs	r0, #1
    bc26:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    bc2a:	e008      	b.n	bc3e <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x202>
    bc2c:	2000      	movs	r0, #0
    bc2e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    bc32:	e004      	b.n	bc3e <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x202>
    bc34:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bc36:	b2c1      	uxtb	r1, r0
    bc38:	29f0      	cmp	r1, #240	; 0xf0
    bc3a:	d3f3      	bcc.n	bc24 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1e8>
    bc3c:	e7f6      	b.n	bc2c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f0>
    bc3e:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    bc42:	07c0      	lsls	r0, r0, #31
    bc44:	2800      	cmp	r0, #0
    bc46:	d1e2      	bne.n	bc0e <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1d2>
    bc48:	e7dd      	b.n	bc06 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ca>
        ( left, top, right, bottom )
    bc4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    bc4c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    bc50:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bc52:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    bc56:	9a06      	ldr	r2, [sp, #24]
    bc58:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    bc5c:	9b01      	ldr	r3, [sp, #4]
    bc5e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    }
    bc62:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc64:	b012      	add	sp, #72	; 0x48
    bc66:	bd80      	pop	{r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    bc68:	f24c 608c 	movw	r0, #50828	; 0xc68c
    bc6c:	f2c0 0001 	movt	r0, #1
    bc70:	f24c 62ac 	movw	r2, #50860	; 0xc6ac
    bc74:	f2c0 0201 	movt	r2, #1
    bc78:	2108      	movs	r1, #8
    bc7a:	f009 fa29 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc7e:	defe      	udf	#254	; 0xfe
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    bc80:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    bc84:	f2c0 0001 	movt	r0, #1
    bc88:	f24c 5288 	movw	r2, #50568	; 0xc588
    bc8c:	f2c0 0201 	movt	r2, #1
    bc90:	2121      	movs	r1, #33	; 0x21
    bc92:	f009 fa1d 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc96:	defe      	udf	#254	; 0xfe
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    bc98:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    bc9c:	f2c0 0001 	movt	r0, #1
    bca0:	f24c 52c4 	movw	r2, #50628	; 0xc5c4
    bca4:	f2c0 0201 	movt	r2, #1
    bca8:	2121      	movs	r1, #33	; 0x21
    bcaa:	f009 fa11 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcae:	defe      	udf	#254	; 0xfe
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    bcb0:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    bcb4:	f2c0 0001 	movt	r0, #1
    bcb8:	f24c 52d4 	movw	r2, #50644	; 0xc5d4
    bcbc:	f2c0 0201 	movt	r2, #1
    bcc0:	2121      	movs	r1, #33	; 0x21
    bcc2:	f009 fa05 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcc6:	defe      	udf	#254	; 0xfe
    bcc8:	f24c 6030 	movw	r0, #50736	; 0xc630
    bccc:	f2c0 0001 	movt	r0, #1
    bcd0:	f24c 6214 	movw	r2, #50708	; 0xc614
    bcd4:	f2c0 0201 	movt	r2, #1
    bcd8:	211c      	movs	r1, #28
    bcda:	f009 f9f9 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcde:	defe      	udf	#254	; 0xfe
    bce0:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    bce4:	f2c0 0001 	movt	r0, #1
    bce8:	f24c 6214 	movw	r2, #50708	; 0xc614
    bcec:	f2c0 0201 	movt	r2, #1
    bcf0:	2121      	movs	r1, #33	; 0x21
    bcf2:	f009 f9ed 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcf6:	defe      	udf	#254	; 0xfe
    bcf8:	f24c 6030 	movw	r0, #50736	; 0xc630
    bcfc:	f2c0 0001 	movt	r0, #1
    bd00:	f24c 624c 	movw	r2, #50764	; 0xc64c
    bd04:	f2c0 0201 	movt	r2, #1
    bd08:	211c      	movs	r1, #28
    bd0a:	f009 f9e1 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd0e:	defe      	udf	#254	; 0xfe
    bd10:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    bd14:	f2c0 0001 	movt	r0, #1
    bd18:	f24c 624c 	movw	r2, #50764	; 0xc64c
    bd1c:	f2c0 0201 	movt	r2, #1
    bd20:	2121      	movs	r1, #33	; 0x21
    bd22:	f009 f9d5 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd26:	defe      	udf	#254	; 0xfe
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    bd28:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    bd2c:	f2c0 0001 	movt	r0, #1
    bd30:	f24c 625c 	movw	r2, #50780	; 0xc65c
    bd34:	f2c0 0201 	movt	r2, #1
    bd38:	2121      	movs	r1, #33	; 0x21
    bd3a:	f009 f9c9 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd3e:	defe      	udf	#254	; 0xfe
    bd40:	f24c 6030 	movw	r0, #50736	; 0xc630
    bd44:	f2c0 0001 	movt	r0, #1
    bd48:	f24c 626c 	movw	r2, #50796	; 0xc66c
    bd4c:	f2c0 0201 	movt	r2, #1
    bd50:	211c      	movs	r1, #28
    bd52:	f009 f9bd 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd56:	defe      	udf	#254	; 0xfe
    bd58:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    bd5c:	f2c0 0001 	movt	r0, #1
    bd60:	f24c 626c 	movw	r2, #50796	; 0xc66c
    bd64:	f2c0 0201 	movt	r2, #1
    bd68:	2121      	movs	r1, #33	; 0x21
    bd6a:	f009 f9b1 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd6e:	defe      	udf	#254	; 0xfe
    bd70:	f24c 6030 	movw	r0, #50736	; 0xc630
    bd74:	f2c0 0001 	movt	r0, #1
    bd78:	f24c 627c 	movw	r2, #50812	; 0xc67c
    bd7c:	f2c0 0201 	movt	r2, #1
    bd80:	211c      	movs	r1, #28
    bd82:	f009 f9a5 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd86:	defe      	udf	#254	; 0xfe
    bd88:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    bd8c:	f2c0 0001 	movt	r0, #1
    bd90:	f24c 627c 	movw	r2, #50812	; 0xc67c
    bd94:	f2c0 0201 	movt	r2, #1
    bd98:	2121      	movs	r1, #33	; 0x21
    bd9a:	f009 f999 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd9e:	defe      	udf	#254	; 0xfe

0000bda0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    bda0:	b08c      	sub	sp, #48	; 0x30
    bda2:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    bda4:	7841      	ldrb	r1, [r0, #1]
    bda6:	79c2      	ldrb	r2, [r0, #7]
    bda8:	4291      	cmp	r1, r2
    bdaa:	9007      	str	r0, [sp, #28]
    bdac:	d805      	bhi.n	bdba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1a>
    bdae:	e7ff      	b.n	bdb0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x10>

        if self.x >= SCREEN_WIDTH as u8 ||
    bdb0:	9807      	ldr	r0, [sp, #28]
    bdb2:	7801      	ldrb	r1, [r0, #0]
    bdb4:	293f      	cmp	r1, #63	; 0x3f
    bdb6:	d80a      	bhi.n	bdce <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x2e>
    bdb8:	e011      	b.n	bdde <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x3e>
    bdba:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    bdbc:	f8ad 0020 	strh.w	r0, [sp, #32]
    bdc0:	e7ff      	b.n	bdc2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x22>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    bdc2:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    bdc6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    bdca:	b00c      	add	sp, #48	; 0x30
    bdcc:	4770      	bx	lr
    bdce:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
    bdd0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    bdd4:	e008      	b.n	bde8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x48>
    bdd6:	2000      	movs	r0, #0
    bdd8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    bddc:	e004      	b.n	bde8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x48>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    bdde:	9807      	ldr	r0, [sp, #28]
    bde0:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
    bde2:	291f      	cmp	r1, #31
    bde4:	d8f3      	bhi.n	bdce <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x2e>
    bde6:	e7f6      	b.n	bdd6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x36>
    bde8:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    bdec:	07c0      	lsls	r0, r0, #31
    bdee:	2800      	cmp	r0, #0
    bdf0:	d003      	beq.n	bdfa <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x5a>
    bdf2:	e7ff      	b.n	bdf4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x54>
    bdf4:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    bdf6:	e7ff      	b.n	bdf8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x58>
        if self.x >= SCREEN_WIDTH as u8 ||
    bdf8:	e7ff      	b.n	bdfa <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x5a>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    bdfa:	9807      	ldr	r0, [sp, #28]
    bdfc:	7801      	ldrb	r1, [r0, #0]
    bdfe:	293f      	cmp	r1, #63	; 0x3f
    be00:	d805      	bhi.n	be0e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x6e>
    be02:	e7ff      	b.n	be04 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x64>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    be04:	9807      	ldr	r0, [sp, #28]
    be06:	7841      	ldrb	r1, [r0, #1]
    be08:	291f      	cmp	r1, #31
    be0a:	d816      	bhi.n	be3a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x9a>
    be0c:	e00b      	b.n	be26 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x86>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    be0e:	f24c 60bc 	movw	r0, #50876	; 0xc6bc
    be12:	f2c0 0001 	movt	r0, #1
    be16:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
    be1a:	f2c0 0201 	movt	r2, #1
    be1e:	210a      	movs	r1, #10
    be20:	f009 f956 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be24:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    be26:	9807      	ldr	r0, [sp, #28]
    be28:	7801      	ldrb	r1, [r0, #0]
    be2a:	7842      	ldrb	r2, [r0, #1]
    be2c:	0192      	lsls	r2, r2, #6
    be2e:	2300      	movs	r3, #0
    be30:	2b00      	cmp	r3, #0
    be32:	9106      	str	r1, [sp, #24]
    be34:	9205      	str	r2, [sp, #20]
    be36:	d17b      	bne.n	bf30 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x190>
    be38:	e00b      	b.n	be52 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xb2>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    be3a:	f24c 60d8 	movw	r0, #50904	; 0xc6d8
    be3e:	f2c0 0001 	movt	r0, #1
    be42:	f24c 62e4 	movw	r2, #50916	; 0xc6e4
    be46:	f2c0 0201 	movt	r2, #1
    be4a:	210a      	movs	r1, #10
    be4c:	f009 f940 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be50:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    be52:	9806      	ldr	r0, [sp, #24]
    be54:	9905      	ldr	r1, [sp, #20]
    be56:	1842      	adds	r2, r0, r1
    be58:	4613      	mov	r3, r2
    be5a:	4282      	cmp	r2, r0
    be5c:	9304      	str	r3, [sp, #16]
    be5e:	d373      	bcc.n	bf48 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1a8>
    be60:	e7ff      	b.n	be62 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xc2>
    be62:	9804      	ldr	r0, [sp, #16]
    be64:	900b      	str	r0, [sp, #44]	; 0x2c
    be66:	2100      	movs	r1, #0
            if SCREEN_BUFFER[i] != 0 { 0xffff } else { 0x0 }
    be68:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    be6c:	d178      	bne.n	bf60 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1c0>
    be6e:	e7ff      	b.n	be70 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xd0>
    be70:	f244 2068 	movw	r0, #17000	; 0x4268
    be74:	f2c2 0000 	movt	r0, #8192	; 0x2000
    be78:	9904      	ldr	r1, [sp, #16]
    be7a:	5c40      	ldrb	r0, [r0, r1]
    be7c:	2800      	cmp	r0, #0
    be7e:	d104      	bne.n	be8a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xea>
    be80:	e7ff      	b.n	be82 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xe2>
    be82:	2000      	movs	r0, #0
    be84:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    be88:	e004      	b.n	be94 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xf4>
    be8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    be8e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    be92:	e7ff      	b.n	be94 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xf4>
        self.x_offset += 1;
    be94:	9807      	ldr	r0, [sp, #28]
    be96:	7881      	ldrb	r1, [r0, #2]
    be98:	3101      	adds	r1, #1
    be9a:	b2ca      	uxtb	r2, r1
    be9c:	460b      	mov	r3, r1
    be9e:	428a      	cmp	r2, r1
    bea0:	9303      	str	r3, [sp, #12]
    bea2:	d167      	bne.n	bf74 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1d4>
    bea4:	e7ff      	b.n	bea6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x106>
    bea6:	9803      	ldr	r0, [sp, #12]
    bea8:	9907      	ldr	r1, [sp, #28]
    beaa:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
    beac:	788a      	ldrb	r2, [r1, #2]
    beae:	2a03      	cmp	r2, #3
    beb0:	d336      	bcc.n	bf20 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x180>
    beb2:	e7ff      	b.n	beb4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x114>
    beb4:	2000      	movs	r0, #0
            self.x_offset = 0;
    beb6:	9907      	ldr	r1, [sp, #28]
    beb8:	7088      	strb	r0, [r1, #2]
            self.x += 1;
    beba:	7808      	ldrb	r0, [r1, #0]
    bebc:	3001      	adds	r0, #1
    bebe:	b2c2      	uxtb	r2, r0
    bec0:	4603      	mov	r3, r0
    bec2:	4282      	cmp	r2, r0
    bec4:	9302      	str	r3, [sp, #8]
    bec6:	d161      	bne.n	bf8c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1ec>
    bec8:	e7ff      	b.n	beca <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x12a>
    beca:	9802      	ldr	r0, [sp, #8]
    becc:	9907      	ldr	r1, [sp, #28]
    bece:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
    bed0:	780a      	ldrb	r2, [r1, #0]
    bed2:	794b      	ldrb	r3, [r1, #5]
    bed4:	429a      	cmp	r2, r3
    bed6:	d922      	bls.n	bf1e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17e>
    bed8:	e7ff      	b.n	beda <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x13a>
                self.x = self.block_left;
    beda:	9807      	ldr	r0, [sp, #28]
    bedc:	7901      	ldrb	r1, [r0, #4]
    bede:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
    bee0:	78c1      	ldrb	r1, [r0, #3]
    bee2:	3101      	adds	r1, #1
    bee4:	b2ca      	uxtb	r2, r1
    bee6:	460b      	mov	r3, r1
    bee8:	428a      	cmp	r2, r1
    beea:	9301      	str	r3, [sp, #4]
    beec:	d15a      	bne.n	bfa4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x204>
    beee:	e7ff      	b.n	bef0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x150>
    bef0:	9801      	ldr	r0, [sp, #4]
    bef2:	9907      	ldr	r1, [sp, #28]
    bef4:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    bef6:	78ca      	ldrb	r2, [r1, #3]
    bef8:	2a05      	cmp	r2, #5
    befa:	d30f      	bcc.n	bf1c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17c>
    befc:	e7ff      	b.n	befe <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x15e>
    befe:	2000      	movs	r0, #0
                    self.y_offset = 0;
    bf00:	9907      	ldr	r1, [sp, #28]
    bf02:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
    bf04:	7848      	ldrb	r0, [r1, #1]
    bf06:	3001      	adds	r0, #1
    bf08:	b2c2      	uxtb	r2, r0
    bf0a:	4603      	mov	r3, r0
    bf0c:	4282      	cmp	r2, r0
    bf0e:	9300      	str	r3, [sp, #0]
    bf10:	d154      	bne.n	bfbc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x21c>
    bf12:	e7ff      	b.n	bf14 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x174>
    bf14:	9800      	ldr	r0, [sp, #0]
    bf16:	9907      	ldr	r1, [sp, #28]
    bf18:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    bf1a:	e7ff      	b.n	bf1c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17c>
            if self.x > self.block_right {
    bf1c:	e7ff      	b.n	bf1e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17e>
        if self.x_offset >= PIXEL_WIDTH as u8 {
    bf1e:	e7ff      	b.n	bf20 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x180>
        return Some(color);
    bf20:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    bf24:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    bf28:	2001      	movs	r0, #1
    bf2a:	f8ad 0020 	strh.w	r0, [sp, #32]
    bf2e:	e748      	b.n	bdc2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x22>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    bf30:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    bf34:	f2c0 0001 	movt	r0, #1
    bf38:	f24c 62f4 	movw	r2, #50932	; 0xc6f4
    bf3c:	f2c0 0201 	movt	r2, #1
    bf40:	2121      	movs	r1, #33	; 0x21
    bf42:	f009 f8c5 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf46:	defe      	udf	#254	; 0xfe
    bf48:	f24c 6030 	movw	r0, #50736	; 0xc630
    bf4c:	f2c0 0001 	movt	r0, #1
    bf50:	f24c 7204 	movw	r2, #50948	; 0xc704
    bf54:	f2c0 0201 	movt	r2, #1
    bf58:	211c      	movs	r1, #28
    bf5a:	f009 f8b9 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf5e:	defe      	udf	#254	; 0xfe
            if SCREEN_BUFFER[i] != 0 { 0xffff } else { 0x0 }
    bf60:	f24c 7014 	movw	r0, #50964	; 0xc714
    bf64:	f2c0 0001 	movt	r0, #1
    bf68:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bf6c:	9904      	ldr	r1, [sp, #16]
    bf6e:	f009 f8c5 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bf72:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
    bf74:	f24c 6030 	movw	r0, #50736	; 0xc630
    bf78:	f2c0 0001 	movt	r0, #1
    bf7c:	f24c 7224 	movw	r2, #50980	; 0xc724
    bf80:	f2c0 0201 	movt	r2, #1
    bf84:	211c      	movs	r1, #28
    bf86:	f009 f8a3 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf8a:	defe      	udf	#254	; 0xfe
            self.x += 1;
    bf8c:	f24c 6030 	movw	r0, #50736	; 0xc630
    bf90:	f2c0 0001 	movt	r0, #1
    bf94:	f24c 7234 	movw	r2, #50996	; 0xc734
    bf98:	f2c0 0201 	movt	r2, #1
    bf9c:	211c      	movs	r1, #28
    bf9e:	f009 f897 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfa2:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
    bfa4:	f24c 6030 	movw	r0, #50736	; 0xc630
    bfa8:	f2c0 0001 	movt	r0, #1
    bfac:	f24c 7244 	movw	r2, #51012	; 0xc744
    bfb0:	f2c0 0201 	movt	r2, #1
    bfb4:	211c      	movs	r1, #28
    bfb6:	f009 f88b 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfba:	defe      	udf	#254	; 0xfe
                    self.y += 1;
    bfbc:	f24c 6030 	movw	r0, #50736	; 0xc630
    bfc0:	f2c0 0001 	movt	r0, #1
    bfc4:	f24c 7254 	movw	r2, #51028	; 0xc754
    bfc8:	f2c0 0201 	movt	r2, #1
    bfcc:	211c      	movs	r1, #28
    bfce:	f009 f87f 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfd2:	defe      	udf	#254	; 0xfe

0000bfd4 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E>:
    block: PixelIterator,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b08a      	sub	sp, #40	; 0x28
    bfd8:	2100      	movs	r1, #0
        let left = 0 as u8;
    bfda:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
        let top = 0 as u8;
    bfde:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    bfe2:	2220      	movs	r2, #32
        let right = left + BLOCK_WIDTH as u8  - 1;
    bfe4:	2900      	cmp	r1, #0
    bfe6:	9006      	str	r0, [sp, #24]
    bfe8:	9205      	str	r2, [sp, #20]
    bfea:	d133      	bne.n	c054 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x80>
    bfec:	e7ff      	b.n	bfee <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x1a>
    bfee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bff2:	9905      	ldr	r1, [sp, #20]
    bff4:	fa50 f081 	uxtab	r0, r0, r1
    bff8:	b2c2      	uxtb	r2, r0
    bffa:	4603      	mov	r3, r0
    bffc:	4282      	cmp	r2, r0
    bffe:	9304      	str	r3, [sp, #16]
    c000:	d134      	bne.n	c06c <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x98>
    c002:	e7ff      	b.n	c004 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x30>
    c004:	9804      	ldr	r0, [sp, #16]
    c006:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c00a:	2106      	movs	r1, #6
    c00c:	2200      	movs	r2, #0
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    c00e:	2a00      	cmp	r2, #0
    c010:	9103      	str	r1, [sp, #12]
    c012:	d137      	bne.n	c084 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0xb0>
    c014:	e7ff      	b.n	c016 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x42>
    c016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c01a:	9903      	ldr	r1, [sp, #12]
    c01c:	fa50 f081 	uxtab	r0, r0, r1
    c020:	b2c2      	uxtb	r2, r0
    c022:	4603      	mov	r3, r0
    c024:	4282      	cmp	r2, r0
    c026:	9302      	str	r3, [sp, #8]
    c028:	d138      	bne.n	c09c <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0xc8>
    c02a:	e7ff      	b.n	c02c <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x58>
    c02c:	9802      	ldr	r0, [sp, #8]
    c02e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
        Hardware {
            block: PixelIterator::new(
    c032:	4669      	mov	r1, sp
    c034:	6008      	str	r0, [r1, #0]
    c036:	a807      	add	r0, sp, #28
    c038:	2100      	movs	r1, #0
    c03a:	9101      	str	r1, [sp, #4]
    c03c:	9a01      	ldr	r2, [sp, #4]
    c03e:	9b04      	ldr	r3, [sp, #16]
    c040:	f7ff fc91 	bl	b966 <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>
    c044:	e7ff      	b.n	c046 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x72>
        Hardware {
    c046:	9807      	ldr	r0, [sp, #28]
    c048:	9908      	ldr	r1, [sp, #32]
    c04a:	9a06      	ldr	r2, [sp, #24]
    c04c:	6051      	str	r1, [r2, #4]
    c04e:	6010      	str	r0, [r2, #0]
                left, top, 
                right, bottom
            ),
        }
    }
    c050:	b00a      	add	sp, #40	; 0x28
    c052:	bd80      	pop	{r7, pc}
        let right = left + BLOCK_WIDTH as u8  - 1;
    c054:	f24c 6030 	movw	r0, #50736	; 0xc630
    c058:	f2c0 0001 	movt	r0, #1
    c05c:	f24c 7264 	movw	r2, #51044	; 0xc764
    c060:	f2c0 0201 	movt	r2, #1
    c064:	211c      	movs	r1, #28
    c066:	f009 f833 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c06a:	defe      	udf	#254	; 0xfe
    c06c:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    c070:	f2c0 0001 	movt	r0, #1
    c074:	f24c 7264 	movw	r2, #51044	; 0xc764
    c078:	f2c0 0201 	movt	r2, #1
    c07c:	2121      	movs	r1, #33	; 0x21
    c07e:	f009 f827 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c082:	defe      	udf	#254	; 0xfe
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    c084:	f24c 6030 	movw	r0, #50736	; 0xc630
    c088:	f2c0 0001 	movt	r0, #1
    c08c:	f24c 7274 	movw	r2, #51060	; 0xc774
    c090:	f2c0 0201 	movt	r2, #1
    c094:	211c      	movs	r1, #28
    c096:	f009 f81b 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c09a:	defe      	udf	#254	; 0xfe
    c09c:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    c0a0:	f2c0 0001 	movt	r0, #1
    c0a4:	f24c 7274 	movw	r2, #51060	; 0xc774
    c0a8:	f2c0 0201 	movt	r2, #1
    c0ac:	2121      	movs	r1, #33	; 0x21
    c0ae:	f009 f80f 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c0b2:	defe      	udf	#254	; 0xfe

0000c0b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h884056a56ab77b84E>:
}

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    c0b4:	b081      	sub	sp, #4
    c0b6:	9000      	str	r0, [sp, #0]
    c0b8:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    c0ba:	b001      	add	sp, #4
    c0bc:	4770      	bx	lr

0000c0be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>:

    fn key(&mut self, _key: u8) -> bool {
    c0be:	b082      	sub	sp, #8
    c0c0:	460a      	mov	r2, r1
    c0c2:	9000      	str	r0, [sp, #0]
    c0c4:	f88d 1007 	strb.w	r1, [sp, #7]
    c0c8:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    c0ca:	b002      	add	sp, #8
    c0cc:	4770      	bx	lr

0000c0ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    c0ce:	b510      	push	{r4, lr}
    c0d0:	b09e      	sub	sp, #120	; 0x78
    c0d2:	469c      	mov	ip, r3
    c0d4:	9016      	str	r0, [sp, #88]	; 0x58
    c0d6:	9117      	str	r1, [sp, #92]	; 0x5c
    c0d8:	9218      	str	r2, [sp, #96]	; 0x60
    c0da:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c0de:	293f      	cmp	r1, #63	; 0x3f
    c0e0:	920e      	str	r2, [sp, #56]	; 0x38
    c0e2:	910d      	str	r1, [sp, #52]	; 0x34
    c0e4:	900c      	str	r0, [sp, #48]	; 0x30
    c0e6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    c0ea:	d804      	bhi.n	c0f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x28>
    c0ec:	e7ff      	b.n	c0ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x20>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c0ee:	980e      	ldr	r0, [sp, #56]	; 0x38
    c0f0:	281f      	cmp	r0, #31
    c0f2:	d814      	bhi.n	c11e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x50>
    c0f4:	e00b      	b.n	c10e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x40>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c0f6:	f24c 60bc 	movw	r0, #50876	; 0xc6bc
    c0fa:	f2c0 0001 	movt	r0, #1
    c0fe:	f24c 7284 	movw	r2, #51076	; 0xc784
    c102:	f2c0 0201 	movt	r2, #1
    c106:	210a      	movs	r1, #10
    c108:	f008 ffe2 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c10c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c10e:	980e      	ldr	r0, [sp, #56]	; 0x38
    c110:	0181      	lsls	r1, r0, #6
    c112:	0e82      	lsrs	r2, r0, #26
    c114:	2a00      	cmp	r2, #0
    c116:	910a      	str	r1, [sp, #40]	; 0x28
    c118:	f040 80ec 	bne.w	c2f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x226>
    c11c:	e00b      	b.n	c136 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x68>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c11e:	f24c 60d8 	movw	r0, #50904	; 0xc6d8
    c122:	f2c0 0001 	movt	r0, #1
    c126:	f24c 7294 	movw	r2, #51092	; 0xc794
    c12a:	f2c0 0201 	movt	r2, #1
    c12e:	210a      	movs	r1, #10
    c130:	f008 ffce 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c134:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c136:	980d      	ldr	r0, [sp, #52]	; 0x34
    c138:	990a      	ldr	r1, [sp, #40]	; 0x28
    c13a:	1842      	adds	r2, r0, r1
    c13c:	4613      	mov	r3, r2
    c13e:	4282      	cmp	r2, r0
    c140:	9309      	str	r3, [sp, #36]	; 0x24
    c142:	f0c0 80e3 	bcc.w	c30c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x23e>
    c146:	e7ff      	b.n	c148 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x7a>
    c148:	9809      	ldr	r0, [sp, #36]	; 0x24
    c14a:	901a      	str	r0, [sp, #104]	; 0x68
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c14c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c14e:	07ca      	lsls	r2, r1, #31
    c150:	2a00      	cmp	r2, #0
    c152:	d104      	bne.n	c15e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x90>
    c154:	e7ff      	b.n	c156 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x88>
    c156:	2000      	movs	r0, #0
    c158:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c15c:	e003      	b.n	c166 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x98>
    c15e:	2001      	movs	r0, #1
    c160:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c164:	e7ff      	b.n	c166 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x98>
    c166:	2000      	movs	r0, #0
    c168:	9909      	ldr	r1, [sp, #36]	; 0x24
    c16a:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    c16e:	f040 80d9 	bne.w	c324 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x256>
    c172:	e7ff      	b.n	c174 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xa6>
    c174:	f244 2068 	movw	r0, #17000	; 0x4268
    c178:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c17c:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
    c180:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c182:	5481      	strb	r1, [r0, r2]

        //  If (x,y) are inside the current block, do nothing.
        if self.block.contains(x as u8, y as u8) { return; }
    c184:	980c      	ldr	r0, [sp, #48]	; 0x30
    c186:	990d      	ldr	r1, [sp, #52]	; 0x34
    c188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c18a:	f7ff fc07 	bl	b99c <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E>
    c18e:	9008      	str	r0, [sp, #32]
    c190:	e7ff      	b.n	c192 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xc4>
    c192:	9808      	ldr	r0, [sp, #32]
    c194:	07c1      	lsls	r1, r0, #31
    c196:	2900      	cmp	r1, #0
    c198:	d107      	bne.n	c1aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xdc>
    c19a:	e7ff      	b.n	c19c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xce>

        //  If (x,y) are outside the current block, render the previous block (if any).
        //  if !self.block.is_empty() {
            let (left, top, right, bottom) = self.block.get_window();
    c19c:	980c      	ldr	r0, [sp, #48]	; 0x30
    c19e:	f7ff fc4d 	bl	ba3c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E>
    c1a2:	901b      	str	r0, [sp, #108]	; 0x6c
    c1a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    c1a6:	9010      	str	r0, [sp, #64]	; 0x40
    c1a8:	e002      	b.n	c1b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xe2>
        if self.block.contains(x as u8, y as u8) { return; }
    c1aa:	e7ff      	b.n	c1ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xde>
            .fill( Some( color ) );
        druid::draw_to_display(pixel);
        */
        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    c1ac:	b01e      	add	sp, #120	; 0x78
    c1ae:	bd10      	pop	{r4, pc}
            let (left, top, right, bottom) = self.block.get_window();
    c1b0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c1b4:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
    c1b8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
    c1bc:	f88d 1071 	strb.w	r1, [sp, #113]	; 0x71
    c1c0:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    c1c4:	f88d 2072 	strb.w	r2, [sp, #114]	; 0x72
    c1c8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    c1cc:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
            druid::set_display_pixels(left as u16, top as u16, right as u16, bottom as u16,
    c1d0:	46ec      	mov	ip, sp
    c1d2:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    c1d6:	f8cc e000 	str.w	lr, [ip]
    c1da:	f000 fb23 	bl	c824 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>
    c1de:	9007      	str	r0, [sp, #28]
    c1e0:	e7ff      	b.n	c1e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x114>
    c1e2:	9807      	ldr	r0, [sp, #28]
    c1e4:	f000 0001 	and.w	r0, r0, #1
    c1e8:	f24c 71d4 	movw	r1, #51156	; 0xc7d4
    c1ec:	f2c0 0101 	movt	r1, #1
    c1f0:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    c1f4:	f2c0 0301 	movt	r3, #1
    c1f8:	2211      	movs	r2, #17
    c1fa:	f007 fefb 	bl	13ff4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c1fe:	e7ff      	b.n	c200 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x132>
        let left = x as u8;
    c200:	980d      	ldr	r0, [sp, #52]	; 0x34
    c202:	990d      	ldr	r1, [sp, #52]	; 0x34
    c204:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
        let top = y as u8;
    c208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c20a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c20c:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    c210:	f04f 0c20 	mov.w	ip, #32
        let right = left + BLOCK_WIDTH as u8  - 1;
    c214:	fa5c fc81 	uxtab	ip, ip, r1
    c218:	fa5f fe8c 	uxtb.w	lr, ip
    c21c:	4664      	mov	r4, ip
    c21e:	45e6      	cmp	lr, ip
    c220:	9006      	str	r0, [sp, #24]
    c222:	9205      	str	r2, [sp, #20]
    c224:	9404      	str	r4, [sp, #16]
    c226:	f040 8087 	bne.w	c338 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x26a>
    c22a:	e7ff      	b.n	c22c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x15e>
    c22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c230:	9904      	ldr	r1, [sp, #16]
    c232:	fa50 f081 	uxtab	r0, r0, r1
    c236:	b2c2      	uxtb	r2, r0
    c238:	4603      	mov	r3, r0
    c23a:	4282      	cmp	r2, r0
    c23c:	9303      	str	r3, [sp, #12]
    c23e:	f040 8087 	bne.w	c350 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x282>
    c242:	e7ff      	b.n	c244 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x176>
    c244:	9803      	ldr	r0, [sp, #12]
    c246:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
    c24a:	2106      	movs	r1, #6
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    c24c:	9a05      	ldr	r2, [sp, #20]
    c24e:	fa51 f182 	uxtab	r1, r1, r2
    c252:	b2cb      	uxtb	r3, r1
    c254:	468c      	mov	ip, r1
    c256:	428b      	cmp	r3, r1
    c258:	f8cd c008 	str.w	ip, [sp, #8]
    c25c:	f040 8084 	bne.w	c368 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x29a>
    c260:	e7ff      	b.n	c262 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x194>
    c262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c266:	9902      	ldr	r1, [sp, #8]
    c268:	fa50 f081 	uxtab	r0, r0, r1
    c26c:	b2c2      	uxtb	r2, r0
    c26e:	4603      	mov	r3, r0
    c270:	4282      	cmp	r2, r0
    c272:	9301      	str	r3, [sp, #4]
    c274:	f040 8084 	bne.w	c380 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x2b2>
    c278:	e7ff      	b.n	c27a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1ac>
    c27a:	9801      	ldr	r0, [sp, #4]
    c27c:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
            if right < SCREEN_WIDTH as u8 { right } else { SCREEN_WIDTH as u8 - 1 }, 
    c280:	9903      	ldr	r1, [sp, #12]
    c282:	b2ca      	uxtb	r2, r1
    c284:	2a40      	cmp	r2, #64	; 0x40
    c286:	d30b      	bcc.n	c2a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1d2>
    c288:	e7ff      	b.n	c28a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1bc>
    c28a:	203f      	movs	r0, #63	; 0x3f
    c28c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    c290:	2000      	movs	r0, #0
    c292:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    c296:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    c29a:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
    c29e:	e003      	b.n	c2a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1da>
    c2a0:	9803      	ldr	r0, [sp, #12]
    c2a2:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
    c2a6:	e7ff      	b.n	c2a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1da>
            if bottom < SCREEN_HEIGHT as u8 { bottom } else { SCREEN_HEIGHT as u8 - 1 }
    c2a8:	9801      	ldr	r0, [sp, #4]
    c2aa:	b2c1      	uxtb	r1, r0
    c2ac:	2920      	cmp	r1, #32
    c2ae:	d30b      	bcc.n	c2c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1fa>
    c2b0:	e7ff      	b.n	c2b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1e4>
    c2b2:	201f      	movs	r0, #31
    c2b4:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    c2b8:	2000      	movs	r0, #0
    c2ba:	f88d 0055 	strb.w	r0, [sp, #85]	; 0x55
    c2be:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    c2c2:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    c2c6:	e003      	b.n	c2d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x202>
    c2c8:	9801      	ldr	r0, [sp, #4]
    c2ca:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    c2ce:	e7ff      	b.n	c2d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x202>
        self.block = PixelIterator::new(
    c2d0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    c2d4:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    c2d8:	4669      	mov	r1, sp
    c2da:	6008      	str	r0, [r1, #0]
    c2dc:	a811      	add	r0, sp, #68	; 0x44
    c2de:	9906      	ldr	r1, [sp, #24]
    c2e0:	9a05      	ldr	r2, [sp, #20]
    c2e2:	f7ff fb40 	bl	b966 <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>
    c2e6:	e7ff      	b.n	c2e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x21a>
    c2e8:	9811      	ldr	r0, [sp, #68]	; 0x44
    c2ea:	9912      	ldr	r1, [sp, #72]	; 0x48
    c2ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c2ee:	6051      	str	r1, [r2, #4]
    c2f0:	6010      	str	r0, [r2, #0]
    }
    c2f2:	e75b      	b.n	c1ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xde>
        let i = x + y * SCREEN_WIDTH;
    c2f4:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    c2f8:	f2c0 0001 	movt	r0, #1
    c2fc:	f24c 72a4 	movw	r2, #51108	; 0xc7a4
    c300:	f2c0 0201 	movt	r2, #1
    c304:	2121      	movs	r1, #33	; 0x21
    c306:	f008 fee3 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c30a:	defe      	udf	#254	; 0xfe
    c30c:	f24c 6030 	movw	r0, #50736	; 0xc630
    c310:	f2c0 0001 	movt	r0, #1
    c314:	f24c 72b4 	movw	r2, #51124	; 0xc7b4
    c318:	f2c0 0201 	movt	r2, #1
    c31c:	211c      	movs	r1, #28
    c31e:	f008 fed7 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c322:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c324:	f24c 70c4 	movw	r0, #51140	; 0xc7c4
    c328:	f2c0 0001 	movt	r0, #1
    c32c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c330:	9909      	ldr	r1, [sp, #36]	; 0x24
    c332:	f008 fee3 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c336:	defe      	udf	#254	; 0xfe
        let right = left + BLOCK_WIDTH as u8  - 1;
    c338:	f24c 6030 	movw	r0, #50736	; 0xc630
    c33c:	f2c0 0001 	movt	r0, #1
    c340:	f24c 72f8 	movw	r2, #51192	; 0xc7f8
    c344:	f2c0 0201 	movt	r2, #1
    c348:	211c      	movs	r1, #28
    c34a:	f008 fec1 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c34e:	defe      	udf	#254	; 0xfe
    c350:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    c354:	f2c0 0001 	movt	r0, #1
    c358:	f24c 72f8 	movw	r2, #51192	; 0xc7f8
    c35c:	f2c0 0201 	movt	r2, #1
    c360:	2121      	movs	r1, #33	; 0x21
    c362:	f008 feb5 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c366:	defe      	udf	#254	; 0xfe
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    c368:	f24c 6030 	movw	r0, #50736	; 0xc630
    c36c:	f2c0 0001 	movt	r0, #1
    c370:	f64c 0208 	movw	r2, #51208	; 0xc808
    c374:	f2c0 0201 	movt	r2, #1
    c378:	211c      	movs	r1, #28
    c37a:	f008 fea9 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c37e:	defe      	udf	#254	; 0xfe
    c380:	f24c 50f0 	movw	r0, #50672	; 0xc5f0
    c384:	f2c0 0001 	movt	r0, #1
    c388:	f64c 0208 	movw	r2, #51208	; 0xc808
    c38c:	f2c0 0201 	movt	r2, #1
    c390:	2121      	movs	r1, #33	; 0x21
    c392:	f008 fe9d 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c396:	defe      	udf	#254	; 0xfe

0000c398 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    c398:	b088      	sub	sp, #32
    c39a:	9004      	str	r0, [sp, #16]
    c39c:	9105      	str	r1, [sp, #20]
    c39e:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c3a0:	293f      	cmp	r1, #63	; 0x3f
    c3a2:	9203      	str	r2, [sp, #12]
    c3a4:	9102      	str	r1, [sp, #8]
    c3a6:	d804      	bhi.n	c3b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x1a>
    c3a8:	e7ff      	b.n	c3aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c3aa:	9803      	ldr	r0, [sp, #12]
    c3ac:	281f      	cmp	r0, #31
    c3ae:	d813      	bhi.n	c3d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x40>
    c3b0:	e00b      	b.n	c3ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c3b2:	f24c 60bc 	movw	r0, #50876	; 0xc6bc
    c3b6:	f2c0 0001 	movt	r0, #1
    c3ba:	f64c 0218 	movw	r2, #51224	; 0xc818
    c3be:	f2c0 0201 	movt	r2, #1
    c3c2:	210a      	movs	r1, #10
    c3c4:	f008 fe84 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c3c8:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c3ca:	9803      	ldr	r0, [sp, #12]
    c3cc:	0181      	lsls	r1, r0, #6
    c3ce:	0e82      	lsrs	r2, r0, #26
    c3d0:	2a00      	cmp	r2, #0
    c3d2:	9101      	str	r1, [sp, #4]
    c3d4:	d126      	bne.n	c424 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x8c>
    c3d6:	e00b      	b.n	c3f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c3d8:	f24c 60d8 	movw	r0, #50904	; 0xc6d8
    c3dc:	f2c0 0001 	movt	r0, #1
    c3e0:	f64c 0228 	movw	r2, #51240	; 0xc828
    c3e4:	f2c0 0201 	movt	r2, #1
    c3e8:	210a      	movs	r1, #10
    c3ea:	f008 fe71 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c3ee:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c3f0:	9802      	ldr	r0, [sp, #8]
    c3f2:	9901      	ldr	r1, [sp, #4]
    c3f4:	1842      	adds	r2, r0, r1
    c3f6:	4613      	mov	r3, r2
    c3f8:	4282      	cmp	r2, r0
    c3fa:	9300      	str	r3, [sp, #0]
    c3fc:	d31e      	bcc.n	c43c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0xa4>
    c3fe:	e7ff      	b.n	c400 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x68>
    c400:	9800      	ldr	r0, [sp, #0]
    c402:	9007      	str	r0, [sp, #28]
    c404:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    c406:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    c40a:	d123      	bne.n	c454 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0xbc>
    c40c:	e7ff      	b.n	c40e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x76>
    c40e:	f244 2068 	movw	r0, #17000	; 0x4268
    c412:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c416:	9900      	ldr	r1, [sp, #0]
    c418:	5c40      	ldrb	r0, [r0, r1]
    c41a:	2800      	cmp	r0, #0
    c41c:	bf18      	it	ne
    c41e:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    c420:	b008      	add	sp, #32
    c422:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    c424:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    c428:	f2c0 0001 	movt	r0, #1
    c42c:	f64c 0238 	movw	r2, #51256	; 0xc838
    c430:	f2c0 0201 	movt	r2, #1
    c434:	2121      	movs	r1, #33	; 0x21
    c436:	f008 fe4b 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c43a:	defe      	udf	#254	; 0xfe
    c43c:	f24c 6030 	movw	r0, #50736	; 0xc630
    c440:	f2c0 0001 	movt	r0, #1
    c444:	f64c 0248 	movw	r2, #51272	; 0xc848
    c448:	f2c0 0201 	movt	r2, #1
    c44c:	211c      	movs	r1, #28
    c44e:	f008 fe3f 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c452:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    c454:	f64c 0058 	movw	r0, #51288	; 0xc858
    c458:	f2c0 0001 	movt	r0, #1
    c45c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c460:	9900      	ldr	r1, [sp, #0]
    c462:	f008 fe4b 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c466:	defe      	udf	#254	; 0xfe

0000c468 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E>:

    fn vram_setsize(&mut self, size: (usize, usize)) {
    c468:	b580      	push	{r7, lr}
    c46a:	b086      	sub	sp, #24
    c46c:	9003      	str	r0, [sp, #12]
    c46e:	9104      	str	r1, [sp, #16]
    c470:	9205      	str	r2, [sp, #20]
        //  Set the size of the screen.
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c472:	f24c 6094 	movw	r0, #50836	; 0xc694
    c476:	f2c0 0001 	movt	r0, #1
    c47a:	2308      	movs	r3, #8
    c47c:	9102      	str	r1, [sp, #8]
    c47e:	4619      	mov	r1, r3
    c480:	9201      	str	r2, [sp, #4]
    c482:	f7fc fdb5 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c486:	e7ff      	b.n	c488 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x20>
    c488:	9802      	ldr	r0, [sp, #8]
    c48a:	f7fc fdef 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c48e:	e7ff      	b.n	c490 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x28>
    c490:	f64c 0068 	movw	r0, #51304	; 0xc868
    c494:	f2c0 0001 	movt	r0, #1
    c498:	2102      	movs	r1, #2
    c49a:	f7fc fda9 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c49e:	e7ff      	b.n	c4a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x38>
    c4a0:	9801      	ldr	r0, [sp, #4]
    c4a2:	f7fc fde3 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c4a6:	e7ff      	b.n	c4a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x40>
    c4a8:	f64c 006a 	movw	r0, #51306	; 0xc86a
    c4ac:	f2c0 0001 	movt	r0, #1
    c4b0:	2101      	movs	r1, #1
    c4b2:	f7fc fd9d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c4b6:	e7ff      	b.n	c4b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x50>
    c4b8:	f7fc fde0 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c4bc:	e7ff      	b.n	c4be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x56>
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    c4be:	b006      	add	sp, #24
    c4c0:	bd80      	pop	{r7, pc}

0000c4c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE>:

    fn vram_size(&mut self) -> (usize, usize) {
    c4c2:	b083      	sub	sp, #12
    c4c4:	9002      	str	r0, [sp, #8]
    c4c6:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c4c8:	9000      	str	r0, [sp, #0]
    c4ca:	2020      	movs	r0, #32
    c4cc:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    c4ce:	9800      	ldr	r0, [sp, #0]
    c4d0:	9901      	ldr	r1, [sp, #4]
    c4d2:	b003      	add	sp, #12
    c4d4:	4770      	bx	lr

0000c4d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>:

    fn clock(&mut self) -> u64 {
    c4d6:	b5b0      	push	{r4, r5, r7, lr}
    c4d8:	b086      	sub	sp, #24
    c4da:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c4dc:	f00c fe96 	bl	1920c <os_time_get>
    c4e0:	9004      	str	r0, [sp, #16]
    c4e2:	e7ff      	b.n	c4e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0xe>
    c4e4:	2000      	movs	r0, #0
    c4e6:	9904      	ldr	r1, [sp, #16]
    c4e8:	fba0 2301 	umull	r2, r3, r0, r1
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	bf18      	it	ne
    c4f0:	2301      	movne	r3, #1
    c4f2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c4f6:	fba0 e40c 	umull	lr, r4, r0, ip
    c4fa:	2c00      	cmp	r4, #0
    c4fc:	bf18      	it	ne
    c4fe:	2401      	movne	r4, #1
    c500:	ea43 0304 	orr.w	r3, r3, r4
    c504:	4472      	add	r2, lr
    c506:	fba1 ce0c 	umull	ip, lr, r1, ip
    c50a:	eb12 020e 	adds.w	r2, r2, lr
    c50e:	f140 0000 	adc.w	r0, r0, #0
    c512:	ea40 0003 	orr.w	r0, r0, r3
    c516:	2800      	cmp	r0, #0
    c518:	f8cd c00c 	str.w	ip, [sp, #12]
    c51c:	9202      	str	r2, [sp, #8]
    c51e:	d124      	bne.n	c56a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0x94>
    c520:	e7ff      	b.n	c522 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0x4c>
    c522:	2000      	movs	r0, #0
    c524:	9903      	ldr	r1, [sp, #12]
    c526:	fba0 2301 	umull	r2, r3, r0, r1
    c52a:	2b00      	cmp	r3, #0
    c52c:	bf18      	it	ne
    c52e:	2301      	movne	r3, #1
    c530:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c534:	f8dd e008 	ldr.w	lr, [sp, #8]
    c538:	fbae 450c 	umull	r4, r5, lr, ip
    c53c:	2d00      	cmp	r5, #0
    c53e:	bf18      	it	ne
    c540:	2501      	movne	r5, #1
    c542:	ea43 0305 	orr.w	r3, r3, r5
    c546:	4422      	add	r2, r4
    c548:	fba1 c40c 	umull	ip, r4, r1, ip
    c54c:	1912      	adds	r2, r2, r4
    c54e:	f140 0000 	adc.w	r0, r0, #0
    c552:	ea40 0003 	orr.w	r0, r0, r3
    c556:	2800      	cmp	r0, #0
    c558:	f8cd c004 	str.w	ip, [sp, #4]
    c55c:	9200      	str	r2, [sp, #0]
    c55e:	d110      	bne.n	c582 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0xac>
    c560:	e7ff      	b.n	c562 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0x8c>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    c562:	9801      	ldr	r0, [sp, #4]
    c564:	9900      	ldr	r1, [sp, #0]
    c566:	b006      	add	sp, #24
    c568:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c56a:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    c56e:	f2c0 0001 	movt	r0, #1
    c572:	f64c 026c 	movw	r2, #51308	; 0xc86c
    c576:	f2c0 0201 	movt	r2, #1
    c57a:	2121      	movs	r1, #33	; 0x21
    c57c:	f008 fda8 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c580:	defe      	udf	#254	; 0xfe
    c582:	f24c 50a0 	movw	r0, #50592	; 0xc5a0
    c586:	f2c0 0001 	movt	r0, #1
    c58a:	f64c 026c 	movw	r2, #51308	; 0xc86c
    c58e:	f2c0 0201 	movt	r2, #1
    c592:	2121      	movs	r1, #33	; 0x21
    c594:	f008 fd9c 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c598:	defe      	udf	#254	; 0xfe

0000c59a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h82c48d5866118aadE>:

    fn beep(&mut self) {
    c59a:	b081      	sub	sp, #4
    c59c:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    c59e:	b001      	add	sp, #4
    c5a0:	4770      	bx	lr

0000c5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E>:

    fn sched(&mut self) -> bool {
    c5a2:	b580      	push	{r7, lr}
    c5a4:	b082      	sub	sp, #8
    c5a6:	9001      	str	r0, [sp, #4]
        //  Called in every step; return true for shutdown.
        //  console::print("sched\n"); console::flush(); ////
        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    c5a8:	f00b fc08 	bl	17dbc <hal_watchdog_tickle>
    c5ac:	e7ff      	b.n	c5ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E+0xc>
    c5ae:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    c5b0:	f00c fe52 	bl	19258 <os_time_delay>
    c5b4:	e7ff      	b.n	c5b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E+0x14>
    c5b6:	2000      	movs	r0, #0
                .map(|b| if b { 0xffffff } else { 0 })
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
    }
    c5b8:	b002      	add	sp, #8
    c5ba:	bd80      	pop	{r7, pc}

0000c5bc <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    c5bc:	b580      	push	{r7, lr}
    c5be:	b084      	sub	sp, #16
    c5c0:	460a      	mov	r2, r1
    c5c2:	4603      	mov	r3, r0
    c5c4:	f8ad 000c 	strh.w	r0, [sp, #12]
    c5c8:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    c5cc:	f64c 007c 	movw	r0, #51324	; 0xc87c
    c5d0:	f2c0 0001 	movt	r0, #1
    c5d4:	2118      	movs	r1, #24
    c5d6:	9202      	str	r2, [sp, #8]
    c5d8:	9301      	str	r3, [sp, #4]
    c5da:	f7fc fd09 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c5de:	e7ff      	b.n	c5e0 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    c5e0:	f7fc fd4c 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c5e4:	e7ff      	b.n	c5e6 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    c5e6:	b004      	add	sp, #16
    c5e8:	bd80      	pop	{r7, pc}

0000c5ea <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE>:
    c5ea:	b580      	push	{r7, lr}
    c5ec:	b08c      	sub	sp, #48	; 0x30
    c5ee:	9103      	str	r1, [sp, #12]
    c5f0:	9204      	str	r2, [sp, #16]
    c5f2:	930a      	str	r3, [sp, #40]	; 0x28
    c5f4:	2100      	movs	r1, #0
    c5f6:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c5fa:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c5fe:	2101      	movs	r1, #1
    c600:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c604:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c608:	9903      	ldr	r1, [sp, #12]
    c60a:	2900      	cmp	r1, #0
    c60c:	9302      	str	r3, [sp, #8]
    c60e:	9001      	str	r0, [sp, #4]
    c610:	d001      	beq.n	c616 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x2c>
    c612:	e7ff      	b.n	c614 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x2a>
    c614:	e004      	b.n	c620 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x36>
    c616:	2000      	movs	r0, #0
    c618:	9901      	ldr	r1, [sp, #4]
    c61a:	6008      	str	r0, [r1, #0]
    c61c:	e020      	b.n	c660 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x76>
    c61e:	defe      	udf	#254	; 0xfe
    c620:	2000      	movs	r0, #0
    c622:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c626:	9904      	ldr	r1, [sp, #16]
    c628:	910b      	str	r1, [sp, #44]	; 0x2c
    c62a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c62e:	9108      	str	r1, [sp, #32]
    c630:	9a08      	ldr	r2, [sp, #32]
    c632:	a805      	add	r0, sp, #20
    c634:	9902      	ldr	r1, [sp, #8]
    c636:	f000 fa65 	bl	cb04 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E>
    c63a:	e7ff      	b.n	c63c <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x52>
    c63c:	9805      	ldr	r0, [sp, #20]
    c63e:	9906      	ldr	r1, [sp, #24]
    c640:	9a07      	ldr	r2, [sp, #28]
    c642:	9b01      	ldr	r3, [sp, #4]
    c644:	60da      	str	r2, [r3, #12]
    c646:	6099      	str	r1, [r3, #8]
    c648:	6058      	str	r0, [r3, #4]
    c64a:	2001      	movs	r0, #1
    c64c:	6018      	str	r0, [r3, #0]
    c64e:	e007      	b.n	c660 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x76>
    c650:	9803      	ldr	r0, [sp, #12]
    c652:	2801      	cmp	r0, #1
    c654:	d00c      	beq.n	c670 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x86>
    c656:	e015      	b.n	c684 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x9a>
    c658:	2000      	movs	r0, #0
    c65a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c65e:	e7f7      	b.n	c650 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x66>
    c660:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    c664:	07c0      	lsls	r0, r0, #31
    c666:	2800      	cmp	r0, #0
    c668:	d1f6      	bne.n	c658 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x6e>
    c66a:	e7f1      	b.n	c650 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x66>
    c66c:	b00c      	add	sp, #48	; 0x30
    c66e:	bd80      	pop	{r7, pc}
    c670:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c674:	07c0      	lsls	r0, r0, #31
    c676:	2800      	cmp	r0, #0
    c678:	d0f8      	beq.n	c66c <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x82>
    c67a:	e7ff      	b.n	c67c <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x92>
    c67c:	2000      	movs	r0, #0
    c67e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c682:	e7f3      	b.n	c66c <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x82>
    c684:	e7f2      	b.n	c66c <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x82>

0000c686 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE>:
    c686:	b580      	push	{r7, lr}
    c688:	b08a      	sub	sp, #40	; 0x28
    c68a:	9104      	str	r1, [sp, #16]
    c68c:	9205      	str	r2, [sp, #20]
    c68e:	9308      	str	r3, [sp, #32]
    c690:	2100      	movs	r1, #0
    c692:	f88d 101e 	strb.w	r1, [sp, #30]
    c696:	f88d 101f 	strb.w	r1, [sp, #31]
    c69a:	2101      	movs	r1, #1
    c69c:	f88d 101f 	strb.w	r1, [sp, #31]
    c6a0:	f88d 101e 	strb.w	r1, [sp, #30]
    c6a4:	9904      	ldr	r1, [sp, #16]
    c6a6:	2900      	cmp	r1, #0
    c6a8:	9303      	str	r3, [sp, #12]
    c6aa:	9002      	str	r0, [sp, #8]
    c6ac:	d001      	beq.n	c6b2 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x2c>
    c6ae:	e7ff      	b.n	c6b0 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x2a>
    c6b0:	e004      	b.n	c6bc <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x36>
    c6b2:	2000      	movs	r0, #0
    c6b4:	9902      	ldr	r1, [sp, #8]
    c6b6:	6008      	str	r0, [r1, #0]
    c6b8:	e01f      	b.n	c6fa <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x74>
    c6ba:	defe      	udf	#254	; 0xfe
    c6bc:	2000      	movs	r0, #0
    c6be:	f88d 001f 	strb.w	r0, [sp, #31]
    c6c2:	9905      	ldr	r1, [sp, #20]
    c6c4:	9109      	str	r1, [sp, #36]	; 0x24
    c6c6:	f88d 001e 	strb.w	r0, [sp, #30]
    c6ca:	9106      	str	r1, [sp, #24]
    c6cc:	9906      	ldr	r1, [sp, #24]
    c6ce:	9803      	ldr	r0, [sp, #12]
    c6d0:	f000 fa0a 	bl	cae8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E>
    c6d4:	9001      	str	r0, [sp, #4]
    c6d6:	9100      	str	r1, [sp, #0]
    c6d8:	e7ff      	b.n	c6da <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x54>
    c6da:	9801      	ldr	r0, [sp, #4]
    c6dc:	9902      	ldr	r1, [sp, #8]
    c6de:	6048      	str	r0, [r1, #4]
    c6e0:	9a00      	ldr	r2, [sp, #0]
    c6e2:	608a      	str	r2, [r1, #8]
    c6e4:	2301      	movs	r3, #1
    c6e6:	600b      	str	r3, [r1, #0]
    c6e8:	e007      	b.n	c6fa <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x74>
    c6ea:	9804      	ldr	r0, [sp, #16]
    c6ec:	2801      	cmp	r0, #1
    c6ee:	d00c      	beq.n	c70a <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x84>
    c6f0:	e015      	b.n	c71e <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x98>
    c6f2:	2000      	movs	r0, #0
    c6f4:	f88d 001e 	strb.w	r0, [sp, #30]
    c6f8:	e7f7      	b.n	c6ea <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x64>
    c6fa:	f89d 001e 	ldrb.w	r0, [sp, #30]
    c6fe:	07c0      	lsls	r0, r0, #31
    c700:	2800      	cmp	r0, #0
    c702:	d1f6      	bne.n	c6f2 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x6c>
    c704:	e7f1      	b.n	c6ea <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x64>
    c706:	b00a      	add	sp, #40	; 0x28
    c708:	bd80      	pop	{r7, pc}
    c70a:	f89d 001f 	ldrb.w	r0, [sp, #31]
    c70e:	07c0      	lsls	r0, r0, #31
    c710:	2800      	cmp	r0, #0
    c712:	d0f8      	beq.n	c706 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x80>
    c714:	e7ff      	b.n	c716 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x90>
    c716:	2000      	movs	r0, #0
    c718:	f88d 001f 	strb.w	r0, [sp, #31]
    c71c:	e7f3      	b.n	c706 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x80>
    c71e:	e7f2      	b.n	c706 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x80>

0000c720 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E>:
    c720:	b085      	sub	sp, #20
    c722:	9000      	str	r0, [sp, #0]
    c724:	2000      	movs	r0, #0
    c726:	f88d 000b 	strb.w	r0, [sp, #11]
    c72a:	f88d 000a 	strb.w	r0, [sp, #10]
    c72e:	2001      	movs	r0, #1
    c730:	f88d 000b 	strb.w	r0, [sp, #11]
    c734:	f88d 000a 	strb.w	r0, [sp, #10]
    c738:	9800      	ldr	r0, [sp, #0]
    c73a:	2800      	cmp	r0, #0
    c73c:	4601      	mov	r1, r0
    c73e:	bf18      	it	ne
    c740:	2101      	movne	r1, #1
    c742:	2800      	cmp	r0, #0
    c744:	d001      	beq.n	c74a <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x2a>
    c746:	e7ff      	b.n	c748 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x28>
    c748:	e005      	b.n	c756 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x36>
    c74a:	2000      	movs	r0, #0
    c74c:	f88d 000a 	strb.w	r0, [sp, #10]
    c750:	9001      	str	r0, [sp, #4]
    c752:	e007      	b.n	c764 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x44>
    c754:	defe      	udf	#254	; 0xfe
    c756:	2000      	movs	r0, #0
    c758:	f88d 000b 	strb.w	r0, [sp, #11]
    c75c:	9800      	ldr	r0, [sp, #0]
    c75e:	9004      	str	r0, [sp, #16]
    c760:	9001      	str	r0, [sp, #4]
    c762:	e7ff      	b.n	c764 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x44>
    c764:	f89d 000a 	ldrb.w	r0, [sp, #10]
    c768:	07c0      	lsls	r0, r0, #31
    c76a:	2800      	cmp	r0, #0
    c76c:	d104      	bne.n	c778 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x58>
    c76e:	e7ff      	b.n	c770 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x50>
    c770:	9800      	ldr	r0, [sp, #0]
    c772:	2800      	cmp	r0, #0
    c774:	d107      	bne.n	c786 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x66>
    c776:	e010      	b.n	c79a <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x7a>
    c778:	2000      	movs	r0, #0
    c77a:	f88d 000a 	strb.w	r0, [sp, #10]
    c77e:	e7f7      	b.n	c770 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x50>
    c780:	9801      	ldr	r0, [sp, #4]
    c782:	b005      	add	sp, #20
    c784:	4770      	bx	lr
    c786:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c78a:	07c0      	lsls	r0, r0, #31
    c78c:	2800      	cmp	r0, #0
    c78e:	d0f7      	beq.n	c780 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x60>
    c790:	e7ff      	b.n	c792 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x72>
    c792:	2000      	movs	r0, #0
    c794:	f88d 000b 	strb.w	r0, [sp, #11]
    c798:	e7f2      	b.n	c780 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x60>
    c79a:	e7f1      	b.n	c780 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x60>

0000c79c <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE>:
    c79c:	b084      	sub	sp, #16
    c79e:	9002      	str	r0, [sp, #8]
    c7a0:	6801      	ldr	r1, [r0, #0]
    c7a2:	2900      	cmp	r1, #0
    c7a4:	9000      	str	r0, [sp, #0]
    c7a6:	d001      	beq.n	c7ac <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x10>
    c7a8:	e7ff      	b.n	c7aa <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0xe>
    c7aa:	e003      	b.n	c7b4 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x18>
    c7ac:	2000      	movs	r0, #0
    c7ae:	9001      	str	r0, [sp, #4]
    c7b0:	e005      	b.n	c7be <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x22>
    c7b2:	defe      	udf	#254	; 0xfe
    c7b4:	9800      	ldr	r0, [sp, #0]
    c7b6:	1d01      	adds	r1, r0, #4
    c7b8:	9103      	str	r1, [sp, #12]
    c7ba:	9101      	str	r1, [sp, #4]
    c7bc:	e7ff      	b.n	c7be <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x22>
    c7be:	9801      	ldr	r0, [sp, #4]
    c7c0:	b004      	add	sp, #16
    c7c2:	4770      	bx	lr

0000c7c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    c7c4:	b084      	sub	sp, #16
    c7c6:	9002      	str	r0, [sp, #8]
    c7c8:	9802      	ldr	r0, [sp, #8]
    c7ca:	2800      	cmp	r0, #0
    c7cc:	4602      	mov	r2, r0
    c7ce:	bf18      	it	ne
    c7d0:	2201      	movne	r2, #1
    c7d2:	2800      	cmp	r0, #0
    c7d4:	9101      	str	r1, [sp, #4]
    c7d6:	d001      	beq.n	c7dc <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    c7d8:	e7ff      	b.n	c7da <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    c7da:	e009      	b.n	c7f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    c7dc:	f64c 0094 	movw	r0, #51348	; 0xc894
    c7e0:	f2c0 0001 	movt	r0, #1
    c7e4:	212b      	movs	r1, #43	; 0x2b
    c7e6:	9a01      	ldr	r2, [sp, #4]
    c7e8:	f008 fc72 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c7ec:	defe      	udf	#254	; 0xfe
    c7ee:	defe      	udf	#254	; 0xfe
    c7f0:	9802      	ldr	r0, [sp, #8]
    c7f2:	9003      	str	r0, [sp, #12]
    c7f4:	9902      	ldr	r1, [sp, #8]
    c7f6:	2900      	cmp	r1, #0
    c7f8:	9000      	str	r0, [sp, #0]
    c7fa:	d003      	beq.n	c804 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    c7fc:	e7ff      	b.n	c7fe <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    c7fe:	9800      	ldr	r0, [sp, #0]
    c800:	b004      	add	sp, #16
    c802:	4770      	bx	lr
    c804:	e7fb      	b.n	c7fe <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000c806 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    c806:	b081      	sub	sp, #4
    c808:	2100      	movs	r1, #0
    c80a:	6001      	str	r1, [r0, #0]
    c80c:	b001      	add	sp, #4
    c80e:	4770      	bx	lr

0000c810 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE>:
    c810:	b580      	push	{r7, lr}
    c812:	b082      	sub	sp, #8
    c814:	9001      	str	r0, [sp, #4]
    c816:	f7ff ff83 	bl	c720 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E>
    c81a:	9000      	str	r0, [sp, #0]
    c81c:	e7ff      	b.n	c81e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE+0xe>
    c81e:	9800      	ldr	r0, [sp, #0]
    c820:	b002      	add	sp, #8
    c822:	bd80      	pop	{r7, pc}

0000c824 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    c824:	b5f0      	push	{r4, r5, r6, r7, lr}
    c826:	b08d      	sub	sp, #52	; 0x34
    c828:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    c82c:	469e      	mov	lr, r3
    c82e:	4614      	mov	r4, r2
    c830:	460d      	mov	r5, r1
    c832:	4606      	mov	r6, r0
    c834:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    c838:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    c83c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    c840:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    c844:	466f      	mov	r7, sp
    c846:	f8c7 c004 	str.w	ip, [r7, #4]
    c84a:	603b      	str	r3, [r7, #0]
    c84c:	f240 1348 	movw	r3, #328	; 0x148
    c850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c854:	900a      	str	r0, [sp, #40]	; 0x28
    c856:	4618      	mov	r0, r3
    c858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c85a:	9109      	str	r1, [sp, #36]	; 0x24
    c85c:	4619      	mov	r1, r3
    c85e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    c862:	9208      	str	r2, [sp, #32]
    c864:	4662      	mov	r2, ip
    c866:	9b08      	ldr	r3, [sp, #32]
    c868:	f8cd e01c 	str.w	lr, [sp, #28]
    c86c:	9406      	str	r4, [sp, #24]
    c86e:	9505      	str	r5, [sp, #20]
    c870:	9604      	str	r6, [sp, #16]
    c872:	f000 f807 	bl	c884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>
    c876:	9003      	str	r0, [sp, #12]
    c878:	e7ff      	b.n	c87a <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E+0x56>
}
    c87a:	9803      	ldr	r0, [sp, #12]
    c87c:	f000 0001 	and.w	r0, r0, #1
    c880:	b00d      	add	sp, #52	; 0x34
    c882:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    c884:	b5f0      	push	{r4, r5, r6, r7, lr}
    c886:	b091      	sub	sp, #68	; 0x44
    c888:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    c88c:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
    c890:	461c      	mov	r4, r3
    c892:	4615      	mov	r5, r2
    c894:	460e      	mov	r6, r1
    c896:	900a      	str	r0, [sp, #40]	; 0x28
    c898:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    c89c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    c8a0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    c8a4:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
    c8a8:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    c8aa:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    c8ae:	2701      	movs	r7, #1
    c8b0:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    c8b4:	466f      	mov	r7, sp
    c8b6:	f8c7 e000 	str.w	lr, [r7]
    c8ba:	9008      	str	r0, [sp, #32]
    c8bc:	f8cd c01c 	str.w	ip, [sp, #28]
    c8c0:	9406      	str	r4, [sp, #24]
    c8c2:	9505      	str	r5, [sp, #20]
    c8c4:	9604      	str	r6, [sp, #16]
    c8c6:	f7fd f8c0 	bl	9a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    c8ca:	9003      	str	r0, [sp, #12]
    c8cc:	e7ff      	b.n	c8ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x4a>
    c8ce:	9803      	ldr	r0, [sp, #12]
    c8d0:	f000 0001 	and.w	r0, r0, #1
    c8d4:	f7fc f94a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c8d8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c8dc:	e7ff      	b.n	c8de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x5a>
    c8de:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    c8e2:	07c1      	lsls	r1, r0, #31
    c8e4:	2900      	cmp	r1, #0
    c8e6:	d001      	beq.n	c8ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x68>
    c8e8:	e7ff      	b.n	c8ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x66>
    c8ea:	e009      	b.n	c900 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x7c>
    c8ec:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    c8ee:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c8f2:	9808      	ldr	r0, [sp, #32]
    c8f4:	9907      	ldr	r1, [sp, #28]
    c8f6:	f000 f848 	bl	c98a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>
    c8fa:	9002      	str	r0, [sp, #8]
    c8fc:	e00d      	b.n	c91a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
    c8fe:	defe      	udf	#254	; 0xfe
    c900:	f005 f82b 	bl	1195a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c904:	e003      	b.n	c90e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x8a>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    c906:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    c90a:	b011      	add	sp, #68	; 0x44
    c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    c90e:	f007 fc99 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c912:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    c916:	e7ff      	b.n	c918 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x94>
    c918:	e031      	b.n	c97e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        self.write_pixels(colors) ? ;
    c91a:	9802      	ldr	r0, [sp, #8]
    c91c:	f000 0001 	and.w	r0, r0, #1
    c920:	f7fc f924 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c924:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c928:	e7ff      	b.n	c92a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xa6>
    c92a:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    c92e:	07c1      	lsls	r1, r0, #31
    c930:	2900      	cmp	r1, #0
    c932:	d001      	beq.n	c938 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb4>
    c934:	e7ff      	b.n	c936 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb2>
    c936:	e004      	b.n	c942 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    c938:	f006 fa4a 	bl	12dd0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    c93c:	9001      	str	r0, [sp, #4]
    c93e:	e009      	b.n	c954 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xd0>
        self.write_pixels(colors) ? ;
    c940:	defe      	udf	#254	; 0xfe
    c942:	f005 f80a 	bl	1195a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c946:	e7ff      	b.n	c948 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xc4>
    c948:	f007 fc7c 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c94c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    c950:	e7ff      	b.n	c952 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xce>
    c952:	e014      	b.n	c97e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    c954:	f64c 01bf 	movw	r1, #51391	; 0xc8bf
    c958:	f2c0 0101 	movt	r1, #1
    c95c:	f64c 131c 	movw	r3, #51484	; 0xc91c
    c960:	f2c0 0301 	movt	r3, #1
    c964:	220e      	movs	r2, #14
    c966:	9801      	ldr	r0, [sp, #4]
    c968:	f7fc f8c7 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    c96c:	e7ff      	b.n	c96e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xea>
    c96e:	2000      	movs	r0, #0
        Ok(())
    c970:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
    c974:	e7c7      	b.n	c906 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    c976:	2000      	movs	r0, #0
    c978:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c97c:	e7c3      	b.n	c906 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    c97e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c982:	07c0      	lsls	r0, r0, #31
    c984:	2800      	cmp	r0, #0
    c986:	d1f6      	bne.n	c976 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xf2>
    c988:	e7bd      	b.n	c906 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>

0000c98a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    c98a:	b580      	push	{r7, lr}
    c98c:	b094      	sub	sp, #80	; 0x50
    c98e:	900d      	str	r0, [sp, #52]	; 0x34
    c990:	910e      	str	r1, [sp, #56]	; 0x38
    c992:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    c994:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    c998:	2301      	movs	r3, #1
    c99a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    c99e:	232c      	movs	r3, #44	; 0x2c
    c9a0:	f88d 301f 	strb.w	r3, [sp, #31]
    c9a4:	9209      	str	r2, [sp, #36]	; 0x24
    c9a6:	9208      	str	r2, [sp, #32]
    c9a8:	9208      	str	r2, [sp, #32]
    c9aa:	9a08      	ldr	r2, [sp, #32]
    c9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9ae:	f89d c01f 	ldrb.w	ip, [sp, #31]
    c9b2:	9006      	str	r0, [sp, #24]
    c9b4:	9105      	str	r1, [sp, #20]
    c9b6:	4661      	mov	r1, ip
    c9b8:	f7fc ff56 	bl	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    c9bc:	9004      	str	r0, [sp, #16]
    c9be:	e7ff      	b.n	c9c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x36>
    c9c0:	9804      	ldr	r0, [sp, #16]
    c9c2:	f000 0001 	and.w	r0, r0, #1
    c9c6:	f7fc f8d1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c9ca:	f88d 001e 	strb.w	r0, [sp, #30]
    c9ce:	e7ff      	b.n	c9d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x46>
    c9d0:	f89d 001e 	ldrb.w	r0, [sp, #30]
    c9d4:	07c1      	lsls	r1, r0, #31
    c9d6:	2900      	cmp	r1, #0
    c9d8:	d001      	beq.n	c9de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x54>
    c9da:	e7ff      	b.n	c9dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x52>
    c9dc:	e008      	b.n	c9f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x66>
    c9de:	2000      	movs	r0, #0
        for color in colors {
    c9e0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    c9e4:	9805      	ldr	r0, [sp, #20]
    c9e6:	f000 f86e 	bl	cac6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>
    c9ea:	9003      	str	r0, [sp, #12]
    c9ec:	e00d      	b.n	ca0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
    c9ee:	defe      	udf	#254	; 0xfe
    c9f0:	f004 ffb3 	bl	1195a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c9f4:	e003      	b.n	c9fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x74>
    }
    c9f6:	f89d 001d 	ldrb.w	r0, [sp, #29]
    c9fa:	b014      	add	sp, #80	; 0x50
    c9fc:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    c9fe:	f007 fc21 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ca02:	f88d 001d 	strb.w	r0, [sp, #29]
    ca06:	e7ff      	b.n	ca08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x7e>
    ca08:	e057      	b.n	caba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        for color in colors {
    ca0a:	9803      	ldr	r0, [sp, #12]
    ca0c:	900a      	str	r0, [sp, #40]	; 0x28
    ca0e:	e7ff      	b.n	ca10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
    ca10:	a80a      	add	r0, sp, #40	; 0x28
    ca12:	f000 f85c 	bl	cace <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>
    ca16:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    ca1a:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    ca1e:	e7ff      	b.n	ca20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x96>
    ca20:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    ca24:	4601      	mov	r1, r0
    ca26:	2800      	cmp	r0, #0
    ca28:	d001      	beq.n	ca2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa4>
    ca2a:	e7ff      	b.n	ca2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa2>
    ca2c:	e001      	b.n	ca32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa8>
        }
    ca2e:	e02b      	b.n	ca88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfe>
        for color in colors {
    ca30:	defe      	udf	#254	; 0xfe
    ca32:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    ca36:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    ca3a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    ca3e:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
    ca42:	9906      	ldr	r1, [sp, #24]
    ca44:	9002      	str	r0, [sp, #8]
    ca46:	4608      	mov	r0, r1
    ca48:	9902      	ldr	r1, [sp, #8]
    ca4a:	f7fc feef 	bl	982c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    ca4e:	9001      	str	r0, [sp, #4]
    ca50:	e7ff      	b.n	ca52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xc8>
    ca52:	9801      	ldr	r0, [sp, #4]
    ca54:	f000 0001 	and.w	r0, r0, #1
    ca58:	f7fc f888 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ca5c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ca60:	e7ff      	b.n	ca62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xd8>
    ca62:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ca66:	07c1      	lsls	r1, r0, #31
    ca68:	2900      	cmp	r1, #0
    ca6a:	d001      	beq.n	ca70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe6>
    ca6c:	e7ff      	b.n	ca6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe4>
    ca6e:	e001      	b.n	ca74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xea>
        for color in colors {
    ca70:	e7ce      	b.n	ca10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
            self.write_word(color)?;
    ca72:	defe      	udf	#254	; 0xfe
    ca74:	f004 ff71 	bl	1195a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ca78:	e7ff      	b.n	ca7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xf0>
    ca7a:	f007 fbe3 	bl	14244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ca7e:	f88d 001d 	strb.w	r0, [sp, #29]
    ca82:	e7ff      	b.n	ca84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfa>
        }
    ca84:	e7ff      	b.n	ca86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfc>
    }
    ca86:	e018      	b.n	caba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    ca88:	f006 f9a2 	bl	12dd0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    ca8c:	9000      	str	r0, [sp, #0]
    ca8e:	e7ff      	b.n	ca90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x106>
    ca90:	f64c 01bf 	movw	r1, #51391	; 0xc8bf
    ca94:	f2c0 0101 	movt	r1, #1
    ca98:	f64c 132c 	movw	r3, #51500	; 0xc92c
    ca9c:	f2c0 0301 	movt	r3, #1
    caa0:	220e      	movs	r2, #14
    caa2:	9800      	ldr	r0, [sp, #0]
    caa4:	f7fc f829 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    caa8:	e7ff      	b.n	caaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x120>
    caaa:	2000      	movs	r0, #0
        Ok(())
    caac:	f88d 001d 	strb.w	r0, [sp, #29]
    }
    cab0:	e7a1      	b.n	c9f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    cab2:	2000      	movs	r0, #0
    cab4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    cab8:	e79d      	b.n	c9f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    caba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cabe:	07c0      	lsls	r0, r0, #31
    cac0:	2800      	cmp	r0, #0
    cac2:	d1f6      	bne.n	cab2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x128>
    cac4:	e797      	b.n	c9f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>

0000cac6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>:
    cac6:	b081      	sub	sp, #4
    cac8:	9000      	str	r0, [sp, #0]
    caca:	b001      	add	sp, #4
    cacc:	4770      	bx	lr

0000cace <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>:
    cace:	b580      	push	{r7, lr}
    cad0:	b084      	sub	sp, #16
    cad2:	9003      	str	r0, [sp, #12]
    cad4:	6800      	ldr	r0, [r0, #0]
    cad6:	f7ff f963 	bl	bda0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E>
    cada:	9002      	str	r0, [sp, #8]
    cadc:	9101      	str	r1, [sp, #4]
    cade:	e7ff      	b.n	cae0 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE+0x12>
    cae0:	9802      	ldr	r0, [sp, #8]
    cae2:	9901      	ldr	r1, [sp, #4]
    cae4:	b004      	add	sp, #16
    cae6:	bd80      	pop	{r7, pc}

0000cae8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E>:
    cae8:	b580      	push	{r7, lr}
    caea:	b084      	sub	sp, #16
    caec:	9102      	str	r1, [sp, #8]
    caee:	9003      	str	r0, [sp, #12]
    caf0:	9902      	ldr	r1, [sp, #8]
    caf2:	f003 fe97 	bl	10824 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h21f208ed1261e104E>
    caf6:	9001      	str	r0, [sp, #4]
    caf8:	9100      	str	r1, [sp, #0]
    cafa:	e7ff      	b.n	cafc <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E+0x14>
    cafc:	9801      	ldr	r0, [sp, #4]
    cafe:	9900      	ldr	r1, [sp, #0]
    cb00:	b004      	add	sp, #16
    cb02:	bd80      	pop	{r7, pc}

0000cb04 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E>:
    cb04:	b580      	push	{r7, lr}
    cb06:	b082      	sub	sp, #8
    cb08:	9200      	str	r2, [sp, #0]
    cb0a:	9101      	str	r1, [sp, #4]
    cb0c:	9a00      	ldr	r2, [sp, #0]
    cb0e:	f003 fe77 	bl	10800 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE>
    cb12:	e7ff      	b.n	cb14 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E+0x10>
    cb14:	b002      	add	sp, #8
    cb16:	bd80      	pop	{r7, pc}

0000cb18 <_ZN8libchip814Chip8$LT$T$GT$3new17h365c56fd6f683110E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    cb18:	b5b0      	push	{r4, r5, r7, lr}
    cb1a:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    cb1e:	b082      	sub	sp, #8
    cb20:	f10d 0e0c 	add.w	lr, sp, #12
    cb24:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    cb28:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    cb2a:	930b      	str	r3, [sp, #44]	; 0x2c
    cb2c:	930a      	str	r3, [sp, #40]	; 0x28
    cb2e:	9309      	str	r3, [sp, #36]	; 0x24
    cb30:	9308      	str	r3, [sp, #32]
    cb32:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    cb36:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    cb3a:	9007      	str	r0, [sp, #28]
    cb3c:	4660      	mov	r0, ip
    cb3e:	9106      	str	r1, [sp, #24]
    cb40:	4671      	mov	r1, lr
    cb42:	9205      	str	r2, [sp, #20]
    cb44:	9304      	str	r3, [sp, #16]
    cb46:	f8cd c00c 	str.w	ip, [sp, #12]
    cb4a:	f8cd e008 	str.w	lr, [sp, #8]
    cb4e:	f00e fdc7 	bl	1b6e0 <__aeabi_memclr>
            stack: [0; STACKS],
    cb52:	9804      	ldr	r0, [sp, #16]
    cb54:	9905      	ldr	r1, [sp, #20]
    cb56:	6008      	str	r0, [r1, #0]
    cb58:	f841 0c04 	str.w	r0, [r1, #-4]
    cb5c:	f841 0c08 	str.w	r0, [r1, #-8]
    cb60:	f841 0c0c 	str.w	r0, [r1, #-12]
    cb64:	f841 0c10 	str.w	r0, [r1, #-16]
    cb68:	f841 0c14 	str.w	r0, [r1, #-20]
    cb6c:	f841 0c18 	str.w	r0, [r1, #-24]
    cb70:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    cb74:	6088      	str	r0, [r1, #8]
    cb76:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    cb78:	9a06      	ldr	r2, [sp, #24]
    cb7a:	6813      	ldr	r3, [r2, #0]
    cb7c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    cb80:	f8c1 c018 	str.w	ip, [r1, #24]
    cb84:	614b      	str	r3, [r1, #20]
        Self {
    cb86:	9b08      	ldr	r3, [sp, #32]
    cb88:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    cb8c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    cb90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cb92:	9d07      	ldr	r5, [sp, #28]
    cb94:	642c      	str	r4, [r5, #64]	; 0x40
    cb96:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    cb9a:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    cb9e:	636b      	str	r3, [r5, #52]	; 0x34
    cba0:	8228      	strh	r0, [r5, #16]
    cba2:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    cba6:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    cbaa:	8268      	strh	r0, [r5, #18]
    cbac:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    cbb0:	f105 0047 	add.w	r0, r5, #71	; 0x47
    cbb4:	9903      	ldr	r1, [sp, #12]
    cbb6:	9a02      	ldr	r2, [sp, #8]
    cbb8:	f00e fd96 	bl	1b6e8 <__aeabi_memcpy>
    cbbc:	9907      	ldr	r1, [sp, #28]
    cbbe:	f101 0214 	add.w	r2, r1, #20
    cbc2:	f10d 0e10 	add.w	lr, sp, #16
    cbc6:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    cbca:	2320      	movs	r3, #32
    cbcc:	9001      	str	r0, [sp, #4]
    cbce:	4610      	mov	r0, r2
    cbd0:	461a      	mov	r2, r3
    cbd2:	f00e fd89 	bl	1b6e8 <__aeabi_memcpy>
    cbd6:	9905      	ldr	r1, [sp, #20]
    cbd8:	684a      	ldr	r2, [r1, #4]
    cbda:	688b      	ldr	r3, [r1, #8]
    cbdc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    cbe0:	f8d1 e010 	ldr.w	lr, [r1, #16]
    cbe4:	9c07      	ldr	r4, [sp, #28]
    cbe6:	6063      	str	r3, [r4, #4]
    cbe8:	6022      	str	r2, [r4, #0]
    cbea:	f8c4 e00c 	str.w	lr, [r4, #12]
    cbee:	f8c4 c008 	str.w	ip, [r4, #8]
    cbf2:	f241 0247 	movw	r2, #4167	; 0x1047
    cbf6:	9b04      	ldr	r3, [sp, #16]
    cbf8:	54a3      	strb	r3, [r4, r2]
    cbfa:	f241 0248 	movw	r2, #4168	; 0x1048
    cbfe:	eb04 0c02 	add.w	ip, r4, r2
    cc02:	f8d1 e014 	ldr.w	lr, [r1, #20]
    cc06:	698d      	ldr	r5, [r1, #24]
    cc08:	f844 e002 	str.w	lr, [r4, r2]
    cc0c:	f8cc 5004 	str.w	r5, [ip, #4]
        }
    }
    cc10:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    cc14:	b002      	add	sp, #8
    cc16:	bdb0      	pop	{r4, r5, r7, pc}

0000cc18 <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    cc18:	b580      	push	{r7, lr}
    cc1a:	b086      	sub	sp, #24
    cc1c:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    cc1e:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    cc22:	2201      	movs	r2, #1
    cc24:	9003      	str	r0, [sp, #12]
    cc26:	4608      	mov	r0, r1
    cc28:	4611      	mov	r1, r2
    cc2a:	f007 fc07 	bl	1443c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    cc2e:	9002      	str	r0, [sp, #8]
    cc30:	e7ff      	b.n	cc32 <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E+0x1a>
    cc32:	9802      	ldr	r0, [sp, #8]
    cc34:	9903      	ldr	r1, [sp, #12]
    cc36:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    cc3a:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    cc3e:	4613      	mov	r3, r2
    cc40:	2a0f      	cmp	r2, #15
    cc42:	9301      	str	r3, [sp, #4]
    cc44:	d80a      	bhi.n	cc5c <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E+0x44>
    cc46:	e7ff      	b.n	cc48 <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E+0x30>
    cc48:	9803      	ldr	r0, [sp, #12]
    cc4a:	9901      	ldr	r1, [sp, #4]
    cc4c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    cc50:	8a92      	ldrh	r2, [r2, #20]
    cc52:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    cc56:	4610      	mov	r0, r2
    cc58:	b006      	add	sp, #24
    cc5a:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    cc5c:	f64c 1094 	movw	r0, #51604	; 0xc994
    cc60:	f2c0 0001 	movt	r0, #1
    cc64:	2210      	movs	r2, #16
    cc66:	9901      	ldr	r1, [sp, #4]
    cc68:	f008 fa48 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    cc6c:	defe      	udf	#254	; 0xfe

0000cc6e <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E>:
    pub fn run(mut self, rom: &[u8]) {
    cc6e:	b580      	push	{r7, lr}
    cc70:	b086      	sub	sp, #24
    cc72:	9104      	str	r1, [sp, #16]
    cc74:	9205      	str	r2, [sp, #20]
        self.setup();
    cc76:	9003      	str	r0, [sp, #12]
    cc78:	9202      	str	r2, [sp, #8]
    cc7a:	9101      	str	r1, [sp, #4]
    cc7c:	f003 ff34 	bl	10ae8 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE>
    cc80:	e7ff      	b.n	cc82 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x14>
        self.load(rom);
    cc82:	9803      	ldr	r0, [sp, #12]
    cc84:	9901      	ldr	r1, [sp, #4]
    cc86:	9a02      	ldr	r2, [sp, #8]
    cc88:	f003 fdde 	bl	10848 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE>
    cc8c:	e7ff      	b.n	cc8e <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x20>
        while self.running {
    cc8e:	e7ff      	b.n	cc90 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x22>
    cc90:	f241 0047 	movw	r0, #4167	; 0x1047
    cc94:	9903      	ldr	r1, [sp, #12]
    cc96:	5c08      	ldrb	r0, [r1, r0]
    cc98:	07c0      	lsls	r0, r0, #31
    cc9a:	2800      	cmp	r0, #0
    cc9c:	d101      	bne.n	cca2 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x34>
    cc9e:	e7ff      	b.n	cca0 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x32>
    }
    cca0:	e00c      	b.n	ccbc <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x4e>
            self.sched();
    cca2:	9803      	ldr	r0, [sp, #12]
    cca4:	f003 fe9d 	bl	109e2 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E>
    cca8:	e7ff      	b.n	ccaa <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x3c>
            self.eval();
    ccaa:	9803      	ldr	r0, [sp, #12]
    ccac:	f000 f808 	bl	ccc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE>
    ccb0:	e7ff      	b.n	ccb2 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x44>
            self.next();
    ccb2:	9803      	ldr	r0, [sp, #12]
    ccb4:	f003 fe03 	bl	108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    ccb8:	e7ff      	b.n	ccba <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x4c>
        while self.running {
    ccba:	e7e9      	b.n	cc90 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x22>
    }
    ccbc:	b006      	add	sp, #24
    ccbe:	bd80      	pop	{r7, pc}

0000ccc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    ccc0:	b570      	push	{r4, r5, r6, lr}
    ccc2:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    ccc6:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    ccca:	8a41      	ldrh	r1, [r0, #18]
    cccc:	460a      	mov	r2, r1
    ccce:	2300      	movs	r3, #0
    ccd0:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ccd4:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    ccd8:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    ccdc:	f043 82c0 	bne.w	10260 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35a0>
    cce0:	e7ff      	b.n	cce2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22>
    cce2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cce6:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    ccea:	1842      	adds	r2, r0, r1
    ccec:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ccf0:	4613      	mov	r3, r2
    ccf2:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    ccf6:	8a42      	ldrh	r2, [r0, #18]
    ccf8:	3201      	adds	r2, #1
    ccfa:	fa1f fc82 	uxth.w	ip, r2
    ccfe:	4696      	mov	lr, r2
    cd00:	4594      	cmp	ip, r2
    cd02:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    cd06:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    cd0a:	f043 82b4 	bne.w	10276 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35b6>
    cd0e:	e7ff      	b.n	cd10 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x50>
    cd10:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    cd14:	b281      	uxth	r1, r0
    cd16:	460a      	mov	r2, r1
    cd18:	2300      	movs	r3, #0
    cd1a:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    cd1e:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    cd22:	f043 82b4 	bne.w	1028e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35ce>
    cd26:	e7ff      	b.n	cd28 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x68>
    cd28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd2c:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    cd30:	1842      	adds	r2, r0, r1
    cd32:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    cd36:	4613      	mov	r3, r2
    cd38:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    cd3c:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    cd40:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    cd44:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    cd48:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    cd4c:	e7ff      	b.n	cd4e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8e>
    cd4e:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    cd52:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    cd56:	ea40 0201 	orr.w	r2, r0, r1
    cd5a:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    cd5e:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cd62:	f36f 321f 	bfc	r2, #12, #20
    cd66:	4613      	mov	r3, r2
    cd68:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    cd6c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cd70:	f002 020f 	and.w	r2, r2, #15
    cd74:	4694      	mov	ip, r2
    cd76:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    cd7a:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    cd7e:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    cd82:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    cd86:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    cd8a:	e7ff      	b.n	cd8c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcc>
    cd8c:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    cd90:	f000 010f 	and.w	r1, r0, #15
    cd94:	460a      	mov	r2, r1
    cd96:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    cd9a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cd9e:	0909      	lsrs	r1, r1, #4
    cda0:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    cda4:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    cda8:	e7ff      	b.n	cdaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xea>
    cdaa:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    cdae:	f000 010f 	and.w	r1, r0, #15
    cdb2:	460a      	mov	r2, r1
    cdb4:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    cdb8:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cdbc:	b2cb      	uxtb	r3, r1
    cdbe:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    cdc2:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cdc6:	0b09      	lsrs	r1, r1, #12
    cdc8:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    cdcc:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    cdd0:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    cdd4:	e7ff      	b.n	cdd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x116>
    cdd6:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    cdda:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    cdde:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    cde2:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    cde6:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    cdea:	e7ff      	b.n	cdec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12c>
    cdec:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    cdf0:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    cdf4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cdf8:	0912      	lsrs	r2, r2, #4
    cdfa:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    cdfe:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    ce02:	e7ff      	b.n	ce04 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x144>
    ce04:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    ce08:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    ce0c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    ce10:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    ce14:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    ce18:	e7ff      	b.n	ce1a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15a>
    ce1a:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    ce1e:	f000 010f 	and.w	r1, r0, #15
        match (
    ce22:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    ce26:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    ce2a:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    ce2e:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    ce32:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    ce36:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    ce3a:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    ce3e:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    ce42:	468e      	mov	lr, r1
    ce44:	290f      	cmp	r1, #15
    ce46:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    ce4a:	d84f      	bhi.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    ce4c:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    ce50:	e8df f011 	tbh	[pc, r1, lsl #1]
    ce54:	03060010 	.word	0x03060010
    ce58:	04320399 	.word	0x04320399
    ce5c:	002c04d2 	.word	0x002c04d2
    ce60:	06b4061f 	.word	0x06b4061f
    ce64:	00750032 	.word	0x00750032
    ce68:	0ee40e59 	.word	0x0ee40e59
    ce6c:	10260f85 	.word	0x10260f85
    ce70:	0095007b 	.word	0x0095007b
    ce74:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    ce78:	2800      	cmp	r0, #0
    ce7a:	f040 8261 	bne.w	d340 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x680>
    ce7e:	e7ff      	b.n	ce80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c0>
    ce80:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    ce84:	280e      	cmp	r0, #14
    ce86:	f040 825b 	bne.w	d340 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x680>
    ce8a:	e7ff      	b.n	ce8c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cc>
    ce8c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce90:	4601      	mov	r1, r0
    ce92:	2800      	cmp	r0, #0
    ce94:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    ce98:	f000 80c0 	beq.w	d01c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35c>
    ce9c:	e7ff      	b.n	ce9e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1de>
    ce9e:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    cea2:	b281      	uxth	r1, r0
    cea4:	290e      	cmp	r1, #14
    cea6:	f000 81b6 	beq.w	d216 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x556>
    ceaa:	e249      	b.n	d340 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    ceac:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ceb0:	2800      	cmp	r0, #0
    ceb2:	f000 8541 	beq.w	d938 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc78>
    ceb6:	e019      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    ceb8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cebc:	4601      	mov	r1, r0
    cebe:	280e      	cmp	r0, #14
    cec0:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    cec4:	d812      	bhi.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    cec6:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    ceca:	e8df f011 	tbh	[pc, r1, lsl #1]
    cece:	071e      	.short	0x071e
    ced0:	086707c0 	.word	0x086707c0
    ced4:	09b5090e 	.word	0x09b5090e
    ced8:	0b3b0a77 	.word	0x0b3b0a77
    cedc:	000f0bf0 	.word	0x000f0bf0
    cee0:	000f000f 	.word	0x000f000f
    cee4:	000f000f 	.word	0x000f000f
    cee8:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    ceec:	f24d 50a8 	movw	r0, #54696	; 0xd5a8
    cef0:	f2c0 0001 	movt	r0, #1
    cef4:	6801      	ldr	r1, [r0, #0]
    cef6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cefa:	f100 0212 	add.w	r2, r0, #18
    cefe:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    cf02:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    cf06:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    cf0a:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    cf0e:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    cf12:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    cf16:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    cf1a:	f646 0ceb 	movw	ip, #26859	; 0x68eb
    cf1e:	f2c0 0c01 	movt	ip, #1
    cf22:	4610      	mov	r0, r2
    cf24:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    cf28:	4661      	mov	r1, ip
    cf2a:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    cf2e:	f7fd fab0 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf32:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    cf36:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    cf3a:	f003 b94f 	b.w	101dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x351c>
            (9, _, _, 0) => {
    cf3e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf42:	2800      	cmp	r0, #0
    cf44:	f001 8532 	beq.w	e9ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cec>
    cf48:	e7d0      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xe, _, 9, 0xe) => {
    cf4a:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    cf4e:	4601      	mov	r1, r0
    cf50:	2809      	cmp	r0, #9
    cf52:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    cf56:	d006      	beq.n	cf66 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a6>
    cf58:	e7ff      	b.n	cf5a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29a>
    cf5a:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    cf5e:	b281      	uxth	r1, r0
    cf60:	290a      	cmp	r1, #10
    cf62:	d006      	beq.n	cf72 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b2>
    cf64:	e7c2      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    cf66:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf6a:	280e      	cmp	r0, #14
    cf6c:	f002 815b 	beq.w	f226 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2566>
    cf70:	e7bc      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xe, _, 0xa, 0x1) => {
    cf72:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf76:	2801      	cmp	r0, #1
    cf78:	f002 81fe 	beq.w	f378 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b8>
    cf7c:	e7b6      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 0, 7) => {
    cf7e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    cf82:	4601      	mov	r1, r0
    cf84:	2806      	cmp	r0, #6
    cf86:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    cf8a:	d8af      	bhi.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    cf8c:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    cf90:	e8df f001 	tbb	[pc, r1]
    cf94:	322c1505 	.word	0x322c1505
    cf98:	003e3804 	.word	0x003e3804
    cf9c:	e7a6      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    cf9e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cfa2:	4601      	mov	r1, r0
    cfa4:	2807      	cmp	r0, #7
    cfa6:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    cfaa:	f002 828e 	beq.w	f4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x280a>
    cfae:	e7ff      	b.n	cfb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f0>
    cfb0:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    cfb4:	b281      	uxth	r1, r0
    cfb6:	290a      	cmp	r1, #10
    cfb8:	f002 8320 	beq.w	f5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x293c>
    cfbc:	e796      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 1, 5) => {
    cfbe:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cfc2:	4601      	mov	r1, r0
    cfc4:	2805      	cmp	r0, #5
    cfc6:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    cfca:	f002 83b1 	beq.w	f730 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a70>
    cfce:	e7ff      	b.n	cfd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x310>
    cfd0:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    cfd4:	b281      	uxth	r1, r0
    cfd6:	2908      	cmp	r1, #8
    cfd8:	f002 843f 	beq.w	f85a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b9a>
    cfdc:	e7ff      	b.n	cfde <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31e>
    cfde:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    cfe2:	b281      	uxth	r1, r0
    cfe4:	290e      	cmp	r1, #14
    cfe6:	f002 84cd 	beq.w	f984 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2cc4>
    cfea:	e77f      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 2, 9) => {
    cfec:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cff0:	2809      	cmp	r0, #9
    cff2:	f002 856b 	beq.w	facc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e0c>
    cff6:	e779      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 3, 3) => {
    cff8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cffc:	2803      	cmp	r0, #3
    cffe:	f002 8616 	beq.w	fc2e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f6e>
    d002:	e773      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 5, 5) => {
    d004:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d008:	2805      	cmp	r0, #5
    d00a:	f002 871f 	beq.w	fe4c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x318c>
    d00e:	e76d      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 6, 5) => {
    d010:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d014:	2805      	cmp	r0, #5
    d016:	f002 87fc 	beq.w	10012 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3352>
    d01a:	e767      	b.n	ceec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    d01c:	2005      	movs	r0, #5
    d01e:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    d022:	f64c 2000 	movw	r0, #51712	; 0xca00
    d026:	f2c0 0001 	movt	r0, #1
    d02a:	6801      	ldr	r1, [r0, #0]
    d02c:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d030:	f007 faa6 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d034:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d038:	e01f      	b.n	d07a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ba>
    d03a:	2001      	movs	r0, #1
    d03c:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d040:	e015      	b.n	d06e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ae>
    d042:	2000      	movs	r0, #0
    d044:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d048:	e011      	b.n	d06e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ae>
    d04a:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d04c:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d050:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d054:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d058:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d05c:	f003 fed5 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d060:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d064:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d068:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d06c:	e00b      	b.n	d086 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3c6>
    d06e:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d072:	07c0      	lsls	r0, r0, #31
    d074:	2800      	cmp	r0, #0
    d076:	d115      	bne.n	d0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3e4>
    d078:	e05e      	b.n	d138 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x478>
    d07a:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d07e:	07c1      	lsls	r1, r0, #31
    d080:	2900      	cmp	r1, #0
    d082:	d1e2      	bne.n	d04a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38a>
    d084:	e7dd      	b.n	d042 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x382>
    d086:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d08a:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d08e:	f007 fa77 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d092:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d096:	e7ff      	b.n	d098 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3d8>
    d098:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d09c:	07c1      	lsls	r1, r0, #31
    d09e:	2900      	cmp	r1, #0
    d0a0:	d1cb      	bne.n	d03a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37a>
    d0a2:	e7ce      	b.n	d042 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d0a4:	f64d 0048 	movw	r0, #55368	; 0xd848
    d0a8:	f2c0 0001 	movt	r0, #1
    d0ac:	6801      	ldr	r1, [r0, #0]
    d0ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d0b2:	f100 0212 	add.w	r2, r0, #18
    d0b6:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d0ba:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d0be:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d0c2:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d0c6:	f2c0 0301 	movt	r3, #1
    d0ca:	4610      	mov	r0, r2
    d0cc:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d0d0:	4619      	mov	r1, r3
    d0d2:	f7fd f9de 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d0d6:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d0da:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d0de:	e7ff      	b.n	d0e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x420>
    d0e0:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d0e4:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d0e8:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d0ec:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d0f0:	f64c 2248 	movw	r2, #51784	; 0xca48
    d0f4:	f2c0 0201 	movt	r2, #1
    d0f8:	6812      	ldr	r2, [r2, #0]
    d0fa:	466b      	mov	r3, sp
    d0fc:	f04f 0c01 	mov.w	ip, #1
    d100:	f8c3 c008 	str.w	ip, [r3, #8]
    d104:	605a      	str	r2, [r3, #4]
    d106:	f8c3 c000 	str.w	ip, [r3]
    d10a:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d10e:	2202      	movs	r2, #2
    d110:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d114:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d118:	f007 f8f7 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d11c:	e7ff      	b.n	d11e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x45e>
    d11e:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d122:	f64d 0068 	movw	r0, #55400	; 0xd868
    d126:	f2c0 0001 	movt	r0, #1
    d12a:	6802      	ldr	r2, [r0, #0]
    d12c:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d130:	f004 fd70 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d134:	e7ff      	b.n	d136 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x476>
    d136:	e7ff      	b.n	d138 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x478>
    d138:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d13c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d140:	4408      	add	r0, r1
    d142:	f7ff f9be 	bl	c4c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE>
    d146:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d148:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d14a:	e7ff      	b.n	d14c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x48c>
    d14c:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d14e:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d152:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d154:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d158:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d15a:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d15e:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d162:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d166:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d16a:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d16e:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d172:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d176:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d17a:	f003 ff0a 	bl	10f92 <_ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE>
    d17e:	e7ff      	b.n	d180 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4c0>
    d180:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d184:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d188:	f003 fe53 	bl	10e32 <_ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE>
    d18c:	e7ff      	b.n	d18e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4ce>
    d18e:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d192:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d196:	f003 fe21 	bl	10ddc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had19db2520282693E>
    d19a:	e7ff      	b.n	d19c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4dc>
    d19c:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d1a0:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d1a4:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d1a8:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d1ac:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d1b0:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d1b4:	e7ff      	b.n	d1b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4f6>
    d1b6:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d1ba:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d1be:	f003 fd3a 	bl	10c36 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E>
    d1c2:	e7ff      	b.n	d1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x504>
    d1c4:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d1c8:	2800      	cmp	r0, #0
    d1ca:	d001      	beq.n	d1d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x510>
    d1cc:	e7ff      	b.n	d1ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x50e>
    d1ce:	e002      	b.n	d1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x516>
        match (
    d1d0:	f003 b843 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d1d4:	defe      	udf	#254	; 0xfe
    d1d6:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d1da:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d1de:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d1e2:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d1e6:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d1ea:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d1ee:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d1f2:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d1f6:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    d1fa:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d1fe:	441a      	add	r2, r3
    d200:	2300      	movs	r3, #0
    d202:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d204:	4610      	mov	r0, r2
    d206:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    d208:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d20a:	4611      	mov	r1, r2
    d20c:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d20e:	f7fe ff5e 	bl	c0ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE>
    d212:	e7ff      	b.n	d214 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d214:	e7cf      	b.n	d1b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4f6>
    d216:	2005      	movs	r0, #5
    d218:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d21c:	f64c 2000 	movw	r0, #51712	; 0xca00
    d220:	f2c0 0001 	movt	r0, #1
    d224:	6801      	ldr	r1, [r0, #0]
    d226:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d22a:	f007 f9a9 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d22e:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d230:	e01f      	b.n	d272 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5b2>
    d232:	2001      	movs	r0, #1
    d234:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d238:	e015      	b.n	d266 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5a6>
    d23a:	2000      	movs	r0, #0
    d23c:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d240:	e011      	b.n	d266 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5a6>
    d242:	2000      	movs	r0, #0
    d244:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d248:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d24c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d250:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d254:	f003 fdd9 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d258:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d25c:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d260:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d264:	e00a      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5bc>
    d266:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d26a:	07c0      	lsls	r0, r0, #31
    d26c:	2800      	cmp	r0, #0
    d26e:	d112      	bne.n	d296 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5d6>
    d270:	e055      	b.n	d31e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x65e>
    d272:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d274:	07c1      	lsls	r1, r0, #31
    d276:	2900      	cmp	r1, #0
    d278:	d1e3      	bne.n	d242 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x582>
    d27a:	e7de      	b.n	d23a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x57a>
    d27c:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d280:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d284:	f007 f97c 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d288:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d28a:	e7ff      	b.n	d28c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5cc>
    d28c:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d28e:	07c1      	lsls	r1, r0, #31
    d290:	2900      	cmp	r1, #0
    d292:	d1ce      	bne.n	d232 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x572>
    d294:	e7d1      	b.n	d23a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x57a>
                trace!("[{:04x}] RET", self.pc);
    d296:	f64d 000c 	movw	r0, #55308	; 0xd80c
    d29a:	f2c0 0001 	movt	r0, #1
    d29e:	6801      	ldr	r1, [r0, #0]
    d2a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d2a4:	f100 0212 	add.w	r2, r0, #18
    d2a8:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d2ac:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d2b0:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d2b4:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d2b8:	f2c0 0301 	movt	r3, #1
    d2bc:	4610      	mov	r0, r2
    d2be:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d2c0:	4619      	mov	r1, r3
    d2c2:	f7fd f8e6 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d2c6:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d2c8:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d2ca:	e7ff      	b.n	d2cc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x60c>
    d2cc:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d2ce:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d2d2:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d2d4:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d2d8:	f64c 2248 	movw	r2, #51784	; 0xca48
    d2dc:	f2c0 0201 	movt	r2, #1
    d2e0:	6812      	ldr	r2, [r2, #0]
    d2e2:	466b      	mov	r3, sp
    d2e4:	f04f 0c01 	mov.w	ip, #1
    d2e8:	f8c3 c008 	str.w	ip, [r3, #8]
    d2ec:	605a      	str	r2, [r3, #4]
    d2ee:	f8c3 c000 	str.w	ip, [r3]
    d2f2:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d2f6:	2202      	movs	r2, #2
    d2f8:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d2fc:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d2fe:	f007 f804 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d302:	e7ff      	b.n	d304 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x644>
    d304:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d308:	f64d 002c 	movw	r0, #55340	; 0xd82c
    d30c:	f2c0 0001 	movt	r0, #1
    d310:	6802      	ldr	r2, [r0, #0]
    d312:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d316:	f004 fc7d 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d31a:	e7ff      	b.n	d31c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x65c>
    d31c:	e7ff      	b.n	d31e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x65e>
                let addr = self.pop();
    d31e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d322:	f7ff fc79 	bl	cc18 <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E>
    d326:	4601      	mov	r1, r0
    d328:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d32c:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d32e:	e7ff      	b.n	d330 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x670>
                self.jump(addr);
    d330:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d334:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d336:	f003 fa7f 	bl	10838 <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    d33a:	e7ff      	b.n	d33c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x67c>
        match (
    d33c:	f002 bf8d 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d340:	2005      	movs	r0, #5
    d342:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d346:	f64c 2000 	movw	r0, #51712	; 0xca00
    d34a:	f2c0 0001 	movt	r0, #1
    d34e:	6801      	ldr	r1, [r0, #0]
    d350:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d354:	f007 f914 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d358:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d35a:	e01f      	b.n	d39c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6dc>
    d35c:	2001      	movs	r0, #1
    d35e:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d362:	e015      	b.n	d390 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6d0>
    d364:	2000      	movs	r0, #0
    d366:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d36a:	e011      	b.n	d390 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6d0>
    d36c:	2000      	movs	r0, #0
    d36e:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d372:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d376:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d37a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d37e:	f003 fd44 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d382:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d386:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d38a:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d38e:	e00a      	b.n	d3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6e6>
    d390:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d394:	07c0      	lsls	r0, r0, #31
    d396:	2800      	cmp	r0, #0
    d398:	d112      	bne.n	d3c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x700>
    d39a:	e055      	b.n	d448 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x788>
    d39c:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d39e:	07c1      	lsls	r1, r0, #31
    d3a0:	2900      	cmp	r1, #0
    d3a2:	d1e3      	bne.n	d36c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6ac>
    d3a4:	e7de      	b.n	d364 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6a4>
    d3a6:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d3aa:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d3ae:	f007 f8e7 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d3b2:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d3b4:	e7ff      	b.n	d3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6f6>
    d3b6:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d3b8:	07c1      	lsls	r1, r0, #31
    d3ba:	2900      	cmp	r1, #0
    d3bc:	d1ce      	bne.n	d35c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x69c>
    d3be:	e7d1      	b.n	d364 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    d3c0:	f24d 70b0 	movw	r0, #55216	; 0xd7b0
    d3c4:	f2c0 0001 	movt	r0, #1
    d3c8:	6801      	ldr	r1, [r0, #0]
    d3ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d3ce:	f100 0212 	add.w	r2, r0, #18
    d3d2:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d3d6:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d3da:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d3de:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d3e2:	f2c0 0301 	movt	r3, #1
    d3e6:	4610      	mov	r0, r2
    d3e8:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d3ea:	4619      	mov	r1, r3
    d3ec:	f7fd f851 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d3f0:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d3f2:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d3f4:	e7ff      	b.n	d3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x736>
    d3f6:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d3f8:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    d3fc:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    d3fe:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    d402:	f64c 2248 	movw	r2, #51784	; 0xca48
    d406:	f2c0 0201 	movt	r2, #1
    d40a:	6812      	ldr	r2, [r2, #0]
    d40c:	466b      	mov	r3, sp
    d40e:	f04f 0c01 	mov.w	ip, #1
    d412:	f8c3 c008 	str.w	ip, [r3, #8]
    d416:	605a      	str	r2, [r3, #4]
    d418:	f8c3 c000 	str.w	ip, [r3]
    d41c:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d420:	2202      	movs	r2, #2
    d422:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    d426:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    d428:	f006 ff6f 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d42c:	e7ff      	b.n	d42e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x76e>
    d42e:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    d432:	f24d 70d0 	movw	r0, #55248	; 0xd7d0
    d436:	f2c0 0001 	movt	r0, #1
    d43a:	6802      	ldr	r2, [r0, #0]
    d43c:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d440:	f004 fbe8 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d444:	e7ff      	b.n	d446 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x786>
    d446:	e7ff      	b.n	d448 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x788>
    d448:	f24d 70d4 	movw	r0, #55252	; 0xd7d4
    d44c:	f2c0 0001 	movt	r0, #1
    d450:	f24d 72e4 	movw	r2, #55268	; 0xd7e4
    d454:	f2c0 0201 	movt	r2, #1
    d458:	210f      	movs	r1, #15
    d45a:	f007 fe39 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d45e:	defe      	udf	#254	; 0xfe
    d460:	2005      	movs	r0, #5
    d462:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    d466:	f64c 2000 	movw	r0, #51712	; 0xca00
    d46a:	f2c0 0001 	movt	r0, #1
    d46e:	6801      	ldr	r1, [r0, #0]
    d470:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d474:	f007 f884 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d478:	90f0      	str	r0, [sp, #960]	; 0x3c0
    d47a:	e01f      	b.n	d4bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7fc>
    d47c:	2001      	movs	r0, #1
    d47e:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d482:	e015      	b.n	d4b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7f0>
    d484:	2000      	movs	r0, #0
    d486:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d48a:	e011      	b.n	d4b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7f0>
    d48c:	2000      	movs	r0, #0
    d48e:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    d492:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    d496:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d49a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d49e:	f003 fcb4 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d4a2:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    d4a6:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    d4aa:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    d4ae:	e00a      	b.n	d4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x806>
    d4b0:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    d4b4:	07c0      	lsls	r0, r0, #31
    d4b6:	2800      	cmp	r0, #0
    d4b8:	d112      	bne.n	d4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x820>
    d4ba:	e055      	b.n	d568 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8a8>
    d4bc:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    d4be:	07c1      	lsls	r1, r0, #31
    d4c0:	2900      	cmp	r1, #0
    d4c2:	d1e3      	bne.n	d48c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7cc>
    d4c4:	e7de      	b.n	d484 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7c4>
    d4c6:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d4ca:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    d4ce:	f007 f857 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d4d2:	90ef      	str	r0, [sp, #956]	; 0x3bc
    d4d4:	e7ff      	b.n	d4d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x816>
    d4d6:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    d4d8:	07c1      	lsls	r1, r0, #31
    d4da:	2900      	cmp	r1, #0
    d4dc:	d1ce      	bne.n	d47c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7bc>
    d4de:	e7d1      	b.n	d484 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    d4e0:	f24d 7070 	movw	r0, #55152	; 0xd770
    d4e4:	f2c0 0001 	movt	r0, #1
    d4e8:	6801      	ldr	r1, [r0, #0]
    d4ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4ee:	f100 0212 	add.w	r2, r0, #18
    d4f2:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    d4f6:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    d4fa:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    d4fe:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d502:	f2c0 0301 	movt	r3, #1
    d506:	4610      	mov	r0, r2
    d508:	91ee      	str	r1, [sp, #952]	; 0x3b8
    d50a:	4619      	mov	r1, r3
    d50c:	f7fc ffc1 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d510:	90ed      	str	r0, [sp, #948]	; 0x3b4
    d512:	91ec      	str	r1, [sp, #944]	; 0x3b0
    d514:	e7ff      	b.n	d516 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x856>
    d516:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    d518:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    d51c:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    d51e:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    d522:	f64c 2248 	movw	r2, #51784	; 0xca48
    d526:	f2c0 0201 	movt	r2, #1
    d52a:	6812      	ldr	r2, [r2, #0]
    d52c:	466b      	mov	r3, sp
    d52e:	f04f 0c01 	mov.w	ip, #1
    d532:	f8c3 c008 	str.w	ip, [r3, #8]
    d536:	605a      	str	r2, [r3, #4]
    d538:	f8c3 c000 	str.w	ip, [r3]
    d53c:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d540:	2202      	movs	r2, #2
    d542:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    d546:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    d548:	f006 fedf 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d54c:	e7ff      	b.n	d54e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x88e>
    d54e:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    d552:	f24d 7090 	movw	r0, #55184	; 0xd790
    d556:	f2c0 0001 	movt	r0, #1
    d55a:	6802      	ldr	r2, [r0, #0]
    d55c:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d560:	f004 fb58 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d564:	e7ff      	b.n	d566 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8a6>
    d566:	e7ff      	b.n	d568 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8a8>
    d568:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    d56a:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d56e:	f006 ffde 	bl	1452e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    d572:	90eb      	str	r0, [sp, #940]	; 0x3ac
    d574:	e7ff      	b.n	d576 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8b6>
    d576:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d57a:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    d57c:	f003 f95c 	bl	10838 <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    d580:	e7ff      	b.n	d582 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8c2>
        match (
    d582:	f002 be6a 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d586:	2005      	movs	r0, #5
    d588:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    d58c:	f64c 2000 	movw	r0, #51712	; 0xca00
    d590:	f2c0 0001 	movt	r0, #1
    d594:	6801      	ldr	r1, [r0, #0]
    d596:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d59a:	f006 fff1 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d59e:	90ea      	str	r0, [sp, #936]	; 0x3a8
    d5a0:	e01f      	b.n	d5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x922>
    d5a2:	2001      	movs	r0, #1
    d5a4:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d5a8:	e015      	b.n	d5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x916>
    d5aa:	2000      	movs	r0, #0
    d5ac:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d5b0:	e011      	b.n	d5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x916>
    d5b2:	2000      	movs	r0, #0
    d5b4:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    d5b8:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    d5bc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d5c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d5c4:	f003 fc21 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d5c8:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    d5cc:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    d5d0:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    d5d4:	e00a      	b.n	d5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x92c>
    d5d6:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    d5da:	07c0      	lsls	r0, r0, #31
    d5dc:	2800      	cmp	r0, #0
    d5de:	d112      	bne.n	d606 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x946>
    d5e0:	e055      	b.n	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9ce>
    d5e2:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    d5e4:	07c1      	lsls	r1, r0, #31
    d5e6:	2900      	cmp	r1, #0
    d5e8:	d1e3      	bne.n	d5b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8f2>
    d5ea:	e7de      	b.n	d5aa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8ea>
    d5ec:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d5f0:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    d5f4:	f006 ffc4 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d5f8:	90e9      	str	r0, [sp, #932]	; 0x3a4
    d5fa:	e7ff      	b.n	d5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x93c>
    d5fc:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    d5fe:	07c1      	lsls	r1, r0, #31
    d600:	2900      	cmp	r1, #0
    d602:	d1ce      	bne.n	d5a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8e2>
    d604:	e7d1      	b.n	d5aa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    d606:	f24d 703c 	movw	r0, #55100	; 0xd73c
    d60a:	f2c0 0001 	movt	r0, #1
    d60e:	6801      	ldr	r1, [r0, #0]
    d610:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d614:	f100 0212 	add.w	r2, r0, #18
    d618:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    d61c:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    d620:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    d624:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d628:	f2c0 0301 	movt	r3, #1
    d62c:	4610      	mov	r0, r2
    d62e:	91e8      	str	r1, [sp, #928]	; 0x3a0
    d630:	4619      	mov	r1, r3
    d632:	f7fc ff2e 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d636:	90e7      	str	r0, [sp, #924]	; 0x39c
    d638:	91e6      	str	r1, [sp, #920]	; 0x398
    d63a:	e7ff      	b.n	d63c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x97c>
    d63c:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    d63e:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    d642:	99e6      	ldr	r1, [sp, #920]	; 0x398
    d644:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    d648:	f64c 2248 	movw	r2, #51784	; 0xca48
    d64c:	f2c0 0201 	movt	r2, #1
    d650:	6812      	ldr	r2, [r2, #0]
    d652:	466b      	mov	r3, sp
    d654:	f04f 0c01 	mov.w	ip, #1
    d658:	f8c3 c008 	str.w	ip, [r3, #8]
    d65c:	605a      	str	r2, [r3, #4]
    d65e:	f8c3 c000 	str.w	ip, [r3]
    d662:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    d666:	2202      	movs	r2, #2
    d668:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    d66c:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    d66e:	f006 fe4c 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d672:	e7ff      	b.n	d674 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9b4>
    d674:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    d678:	f24d 705c 	movw	r0, #55132	; 0xd75c
    d67c:	f2c0 0001 	movt	r0, #1
    d680:	6802      	ldr	r2, [r0, #0]
    d682:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    d686:	f004 fac5 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d68a:	e7ff      	b.n	d68c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9cc>
    d68c:	e7ff      	b.n	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9ce>
                self.push(self.pc);
    d68e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d692:	8a41      	ldrh	r1, [r0, #18]
    d694:	f003 f926 	bl	108e4 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E>
    d698:	e7ff      	b.n	d69a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9da>
    d69a:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    d69c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d6a0:	f006 ff45 	bl	1452e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    d6a4:	90e5      	str	r0, [sp, #916]	; 0x394
    d6a6:	e7ff      	b.n	d6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9e8>
    d6a8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6ac:	99e5      	ldr	r1, [sp, #916]	; 0x394
    d6ae:	f003 f8c3 	bl	10838 <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    d6b2:	e7ff      	b.n	d6b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9f4>
        match (
    d6b4:	f002 bdd1 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d6b8:	2005      	movs	r0, #5
    d6ba:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    d6be:	f64c 2000 	movw	r0, #51712	; 0xca00
    d6c2:	f2c0 0001 	movt	r0, #1
    d6c6:	6801      	ldr	r1, [r0, #0]
    d6c8:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    d6cc:	f006 ff58 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d6d0:	90e4      	str	r0, [sp, #912]	; 0x390
    d6d2:	e01f      	b.n	d714 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa54>
    d6d4:	2001      	movs	r0, #1
    d6d6:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    d6da:	e015      	b.n	d708 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa48>
    d6dc:	2000      	movs	r0, #0
    d6de:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    d6e2:	e011      	b.n	d708 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa48>
    d6e4:	2000      	movs	r0, #0
    d6e6:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    d6ea:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    d6ee:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d6f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d6f6:	f003 fb88 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d6fa:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    d6fe:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    d702:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    d706:	e00a      	b.n	d71e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa5e>
    d708:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    d70c:	07c0      	lsls	r0, r0, #31
    d70e:	2800      	cmp	r0, #0
    d710:	d112      	bne.n	d738 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa78>
    d712:	e055      	b.n	d7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb00>
    d714:	98e4      	ldr	r0, [sp, #912]	; 0x390
    d716:	07c1      	lsls	r1, r0, #31
    d718:	2900      	cmp	r1, #0
    d71a:	d1e3      	bne.n	d6e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa24>
    d71c:	e7de      	b.n	d6dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa1c>
    d71e:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    d722:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    d726:	f006 ff2b 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d72a:	90e3      	str	r0, [sp, #908]	; 0x38c
    d72c:	e7ff      	b.n	d72e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa6e>
    d72e:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    d730:	07c1      	lsls	r1, r0, #31
    d732:	2900      	cmp	r1, #0
    d734:	d1ce      	bne.n	d6d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa14>
    d736:	e7d1      	b.n	d6dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    d738:	f24d 60ec 	movw	r0, #55020	; 0xd6ec
    d73c:	f2c0 0001 	movt	r0, #1
    d740:	6801      	ldr	r1, [r0, #0]
    d742:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d746:	f100 0212 	add.w	r2, r0, #18
    d74a:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    d74e:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    d752:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    d756:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d75a:	f2c0 0301 	movt	r3, #1
    d75e:	4610      	mov	r0, r2
    d760:	91e2      	str	r1, [sp, #904]	; 0x388
    d762:	4619      	mov	r1, r3
    d764:	f7fc fe95 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d768:	90e1      	str	r0, [sp, #900]	; 0x384
    d76a:	91e0      	str	r1, [sp, #896]	; 0x380
    d76c:	e7ff      	b.n	d76e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xaae>
    d76e:	98e1      	ldr	r0, [sp, #900]	; 0x384
    d770:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    d774:	99e0      	ldr	r1, [sp, #896]	; 0x380
    d776:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    d77a:	f64c 2248 	movw	r2, #51784	; 0xca48
    d77e:	f2c0 0201 	movt	r2, #1
    d782:	6812      	ldr	r2, [r2, #0]
    d784:	466b      	mov	r3, sp
    d786:	f04f 0c01 	mov.w	ip, #1
    d78a:	f8c3 c008 	str.w	ip, [r3, #8]
    d78e:	605a      	str	r2, [r3, #4]
    d790:	f8c3 c000 	str.w	ip, [r3]
    d794:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    d798:	2202      	movs	r2, #2
    d79a:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    d79e:	99e2      	ldr	r1, [sp, #904]	; 0x388
    d7a0:	f006 fdb3 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d7a4:	e7ff      	b.n	d7a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xae6>
    d7a6:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    d7aa:	f24d 700c 	movw	r0, #55052	; 0xd70c
    d7ae:	f2c0 0001 	movt	r0, #1
    d7b2:	6802      	ldr	r2, [r0, #0]
    d7b4:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    d7b8:	f004 fa2c 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d7bc:	e7ff      	b.n	d7be <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xafe>
    d7be:	e7ff      	b.n	d7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb00>
                if self.v[x] == kk {
    d7c0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d7c4:	280f      	cmp	r0, #15
    d7c6:	f203 8011 	bhi.w	107ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3b2c>
    d7ca:	e7ff      	b.n	d7cc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb0c>
    d7cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d7d4:	1842      	adds	r2, r0, r1
    d7d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d7da:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    d7de:	fa5f fc83 	uxtb.w	ip, r3
    d7e2:	4562      	cmp	r2, ip
    d7e4:	d106      	bne.n	d7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb34>
    d7e6:	e7ff      	b.n	d7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb28>
                    self.next();
    d7e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7ec:	f003 f867 	bl	108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    d7f0:	e7ff      	b.n	d7f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb32>
                if self.v[x] == kk {
    d7f2:	e7ff      	b.n	d7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb34>
        match (
    d7f4:	f002 bd31 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d7f8:	2005      	movs	r0, #5
    d7fa:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    d7fe:	f64c 2000 	movw	r0, #51712	; 0xca00
    d802:	f2c0 0001 	movt	r0, #1
    d806:	6801      	ldr	r1, [r0, #0]
    d808:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    d80c:	f006 feb8 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d810:	90df      	str	r0, [sp, #892]	; 0x37c
    d812:	e01f      	b.n	d854 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb94>
    d814:	2001      	movs	r0, #1
    d816:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    d81a:	e015      	b.n	d848 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb88>
    d81c:	2000      	movs	r0, #0
    d81e:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    d822:	e011      	b.n	d848 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb88>
    d824:	2000      	movs	r0, #0
    d826:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    d82a:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    d82e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d832:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d836:	f003 fae8 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d83a:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    d83e:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    d842:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    d846:	e00a      	b.n	d85e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb9e>
    d848:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    d84c:	07c0      	lsls	r0, r0, #31
    d84e:	2800      	cmp	r0, #0
    d850:	d112      	bne.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xbb8>
    d852:	e055      	b.n	d900 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc40>
    d854:	98df      	ldr	r0, [sp, #892]	; 0x37c
    d856:	07c1      	lsls	r1, r0, #31
    d858:	2900      	cmp	r1, #0
    d85a:	d1e3      	bne.n	d824 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb64>
    d85c:	e7de      	b.n	d81c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb5c>
    d85e:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    d862:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    d866:	f006 fe8b 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d86a:	90de      	str	r0, [sp, #888]	; 0x378
    d86c:	e7ff      	b.n	d86e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xbae>
    d86e:	98de      	ldr	r0, [sp, #888]	; 0x378
    d870:	07c1      	lsls	r1, r0, #31
    d872:	2900      	cmp	r1, #0
    d874:	d1ce      	bne.n	d814 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb54>
    d876:	e7d1      	b.n	d81c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    d878:	f24d 609c 	movw	r0, #54940	; 0xd69c
    d87c:	f2c0 0001 	movt	r0, #1
    d880:	6801      	ldr	r1, [r0, #0]
    d882:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d886:	f100 0212 	add.w	r2, r0, #18
    d88a:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    d88e:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    d892:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    d896:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d89a:	f2c0 0301 	movt	r3, #1
    d89e:	4610      	mov	r0, r2
    d8a0:	91dd      	str	r1, [sp, #884]	; 0x374
    d8a2:	4619      	mov	r1, r3
    d8a4:	f7fc fdf5 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d8a8:	90dc      	str	r0, [sp, #880]	; 0x370
    d8aa:	91db      	str	r1, [sp, #876]	; 0x36c
    d8ac:	e7ff      	b.n	d8ae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xbee>
    d8ae:	98dc      	ldr	r0, [sp, #880]	; 0x370
    d8b0:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    d8b4:	99db      	ldr	r1, [sp, #876]	; 0x36c
    d8b6:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    d8ba:	f64c 2248 	movw	r2, #51784	; 0xca48
    d8be:	f2c0 0201 	movt	r2, #1
    d8c2:	6812      	ldr	r2, [r2, #0]
    d8c4:	466b      	mov	r3, sp
    d8c6:	f04f 0c01 	mov.w	ip, #1
    d8ca:	f8c3 c008 	str.w	ip, [r3, #8]
    d8ce:	605a      	str	r2, [r3, #4]
    d8d0:	f8c3 c000 	str.w	ip, [r3]
    d8d4:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    d8d8:	2202      	movs	r2, #2
    d8da:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    d8de:	99dd      	ldr	r1, [sp, #884]	; 0x374
    d8e0:	f006 fd13 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d8e4:	e7ff      	b.n	d8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc26>
    d8e6:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    d8ea:	f24d 60bc 	movw	r0, #54972	; 0xd6bc
    d8ee:	f2c0 0001 	movt	r0, #1
    d8f2:	6802      	ldr	r2, [r0, #0]
    d8f4:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    d8f8:	f004 f98c 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d8fc:	e7ff      	b.n	d8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc3e>
    d8fe:	e7ff      	b.n	d900 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc40>
                if self.v[x] != kk {
    d900:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d904:	280f      	cmp	r0, #15
    d906:	f202 8767 	bhi.w	107d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3b18>
    d90a:	e7ff      	b.n	d90c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc4c>
    d90c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d910:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d914:	1842      	adds	r2, r0, r1
    d916:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d91a:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    d91e:	fa5f fc83 	uxtb.w	ip, r3
    d922:	4562      	cmp	r2, ip
    d924:	d006      	beq.n	d934 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc74>
    d926:	e7ff      	b.n	d928 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc68>
                    self.next();
    d928:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d92c:	f002 ffc7 	bl	108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    d930:	e7ff      	b.n	d932 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc72>
                if self.v[x] != kk {
    d932:	e7ff      	b.n	d934 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc74>
        match (
    d934:	f002 bc91 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d938:	2005      	movs	r0, #5
    d93a:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    d93e:	f64c 2000 	movw	r0, #51712	; 0xca00
    d942:	f2c0 0001 	movt	r0, #1
    d946:	6801      	ldr	r1, [r0, #0]
    d948:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    d94c:	f006 fe18 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d950:	90da      	str	r0, [sp, #872]	; 0x368
    d952:	e01f      	b.n	d994 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcd4>
    d954:	2001      	movs	r0, #1
    d956:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    d95a:	e015      	b.n	d988 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcc8>
    d95c:	2000      	movs	r0, #0
    d95e:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    d962:	e011      	b.n	d988 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcc8>
    d964:	2000      	movs	r0, #0
    d966:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    d96a:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    d96e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d972:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d976:	f003 fa48 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d97a:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    d97e:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    d982:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    d986:	e00a      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcde>
    d988:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    d98c:	07c0      	lsls	r0, r0, #31
    d98e:	2800      	cmp	r0, #0
    d990:	d112      	bne.n	d9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcf8>
    d992:	e055      	b.n	da40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd80>
    d994:	98da      	ldr	r0, [sp, #872]	; 0x368
    d996:	07c1      	lsls	r1, r0, #31
    d998:	2900      	cmp	r1, #0
    d99a:	d1e3      	bne.n	d964 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xca4>
    d99c:	e7de      	b.n	d95c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc9c>
    d99e:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    d9a2:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    d9a6:	f006 fdeb 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d9aa:	90d9      	str	r0, [sp, #868]	; 0x364
    d9ac:	e7ff      	b.n	d9ae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcee>
    d9ae:	98d9      	ldr	r0, [sp, #868]	; 0x364
    d9b0:	07c1      	lsls	r1, r0, #31
    d9b2:	2900      	cmp	r1, #0
    d9b4:	d1ce      	bne.n	d954 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc94>
    d9b6:	e7d1      	b.n	d95c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    d9b8:	f24d 603c 	movw	r0, #54844	; 0xd63c
    d9bc:	f2c0 0001 	movt	r0, #1
    d9c0:	6801      	ldr	r1, [r0, #0]
    d9c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d9c6:	f100 0212 	add.w	r2, r0, #18
    d9ca:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    d9ce:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    d9d2:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    d9d6:	f646 03eb 	movw	r3, #26859	; 0x68eb
    d9da:	f2c0 0301 	movt	r3, #1
    d9de:	4610      	mov	r0, r2
    d9e0:	91d8      	str	r1, [sp, #864]	; 0x360
    d9e2:	4619      	mov	r1, r3
    d9e4:	f7fc fd55 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d9e8:	90d7      	str	r0, [sp, #860]	; 0x35c
    d9ea:	91d6      	str	r1, [sp, #856]	; 0x358
    d9ec:	e7ff      	b.n	d9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd2e>
    d9ee:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    d9f0:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    d9f4:	99d6      	ldr	r1, [sp, #856]	; 0x358
    d9f6:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    d9fa:	f64c 2248 	movw	r2, #51784	; 0xca48
    d9fe:	f2c0 0201 	movt	r2, #1
    da02:	6812      	ldr	r2, [r2, #0]
    da04:	466b      	mov	r3, sp
    da06:	f04f 0c01 	mov.w	ip, #1
    da0a:	f8c3 c008 	str.w	ip, [r3, #8]
    da0e:	605a      	str	r2, [r3, #4]
    da10:	f8c3 c000 	str.w	ip, [r3]
    da14:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    da18:	2202      	movs	r2, #2
    da1a:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    da1e:	99d8      	ldr	r1, [sp, #864]	; 0x360
    da20:	f006 fc73 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    da24:	e7ff      	b.n	da26 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd66>
    da26:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    da2a:	f24d 605c 	movw	r0, #54876	; 0xd65c
    da2e:	f2c0 0001 	movt	r0, #1
    da32:	6802      	ldr	r2, [r0, #0]
    da34:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    da38:	f004 f8ec 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da3c:	e7ff      	b.n	da3e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd7e>
    da3e:	e7ff      	b.n	da40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd80>
                if self.v[x] == self.v[y] {
    da40:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    da44:	280f      	cmp	r0, #15
    da46:	f202 86b3 	bhi.w	107b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3af0>
    da4a:	e7ff      	b.n	da4c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd8c>
    da4c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da50:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    da54:	1842      	adds	r2, r0, r1
    da56:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    da5a:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    da5e:	2b0f      	cmp	r3, #15
    da60:	92d5      	str	r2, [sp, #852]	; 0x354
    da62:	f202 86af 	bhi.w	107c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3b04>
    da66:	e7ff      	b.n	da68 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xda8>
    da68:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da6c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    da70:	1842      	adds	r2, r0, r1
    da72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    da76:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    da78:	fa5f fc83 	uxtb.w	ip, r3
    da7c:	4594      	cmp	ip, r2
    da7e:	d106      	bne.n	da8e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdce>
    da80:	e7ff      	b.n	da82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdc2>
                    self.next();
    da82:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da86:	f002 ff1a 	bl	108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    da8a:	e7ff      	b.n	da8c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdcc>
                if self.v[x] == self.v[y] {
    da8c:	e7ff      	b.n	da8e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdce>
        match (
    da8e:	f002 bbe4 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    da92:	2005      	movs	r0, #5
    da94:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    da98:	f64c 2000 	movw	r0, #51712	; 0xca00
    da9c:	f2c0 0001 	movt	r0, #1
    daa0:	6801      	ldr	r1, [r0, #0]
    daa2:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    daa6:	f006 fd6b 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    daaa:	90d4      	str	r0, [sp, #848]	; 0x350
    daac:	e01f      	b.n	daee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe2e>
    daae:	2001      	movs	r0, #1
    dab0:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    dab4:	e015      	b.n	dae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe22>
    dab6:	2000      	movs	r0, #0
    dab8:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    dabc:	e011      	b.n	dae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe22>
    dabe:	2000      	movs	r0, #0
    dac0:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    dac4:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    dac8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dacc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dad0:	f003 f99b 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dad4:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    dad8:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    dadc:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    dae0:	e00a      	b.n	daf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe38>
    dae2:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    dae6:	07c0      	lsls	r0, r0, #31
    dae8:	2800      	cmp	r0, #0
    daea:	d112      	bne.n	db12 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe52>
    daec:	e055      	b.n	db9a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xeda>
    daee:	98d4      	ldr	r0, [sp, #848]	; 0x350
    daf0:	07c1      	lsls	r1, r0, #31
    daf2:	2900      	cmp	r1, #0
    daf4:	d1e3      	bne.n	dabe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdfe>
    daf6:	e7de      	b.n	dab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdf6>
    daf8:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    dafc:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    db00:	f006 fd3e 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    db04:	90d3      	str	r0, [sp, #844]	; 0x34c
    db06:	e7ff      	b.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe48>
    db08:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    db0a:	07c1      	lsls	r1, r0, #31
    db0c:	2900      	cmp	r1, #0
    db0e:	d1ce      	bne.n	daae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdee>
    db10:	e7d1      	b.n	dab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    db12:	f24d 5054 	movw	r0, #54612	; 0xd554
    db16:	f2c0 0001 	movt	r0, #1
    db1a:	6801      	ldr	r1, [r0, #0]
    db1c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db20:	f100 0212 	add.w	r2, r0, #18
    db24:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    db28:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    db2c:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    db30:	f646 03eb 	movw	r3, #26859	; 0x68eb
    db34:	f2c0 0301 	movt	r3, #1
    db38:	4610      	mov	r0, r2
    db3a:	91d2      	str	r1, [sp, #840]	; 0x348
    db3c:	4619      	mov	r1, r3
    db3e:	f7fc fca8 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db42:	90d1      	str	r0, [sp, #836]	; 0x344
    db44:	91d0      	str	r1, [sp, #832]	; 0x340
    db46:	e7ff      	b.n	db48 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe88>
    db48:	98d1      	ldr	r0, [sp, #836]	; 0x344
    db4a:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    db4e:	99d0      	ldr	r1, [sp, #832]	; 0x340
    db50:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    db54:	f64c 2248 	movw	r2, #51784	; 0xca48
    db58:	f2c0 0201 	movt	r2, #1
    db5c:	6812      	ldr	r2, [r2, #0]
    db5e:	466b      	mov	r3, sp
    db60:	f04f 0c01 	mov.w	ip, #1
    db64:	f8c3 c008 	str.w	ip, [r3, #8]
    db68:	605a      	str	r2, [r3, #4]
    db6a:	f8c3 c000 	str.w	ip, [r3]
    db6e:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    db72:	2202      	movs	r2, #2
    db74:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    db78:	99d2      	ldr	r1, [sp, #840]	; 0x348
    db7a:	f006 fbc6 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db7e:	e7ff      	b.n	db80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xec0>
    db80:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    db84:	f24d 5074 	movw	r0, #54644	; 0xd574
    db88:	f2c0 0001 	movt	r0, #1
    db8c:	6802      	ldr	r2, [r0, #0]
    db8e:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    db92:	f004 f83f 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    db96:	e7ff      	b.n	db98 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xed8>
    db98:	e7ff      	b.n	db9a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xeda>
                self.v[x] = kk;
    db9a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    db9e:	280f      	cmp	r0, #15
    dba0:	f202 85fc 	bhi.w	1079c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3adc>
    dba4:	e7ff      	b.n	dba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xee6>
    dba6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbaa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dbae:	1842      	adds	r2, r0, r1
    dbb0:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    dbb4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    dbb8:	f002 bb4f 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    dbbc:	2005      	movs	r0, #5
    dbbe:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    dbc2:	f64c 2000 	movw	r0, #51712	; 0xca00
    dbc6:	f2c0 0001 	movt	r0, #1
    dbca:	6801      	ldr	r1, [r0, #0]
    dbcc:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    dbd0:	f006 fcd6 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbd4:	90cf      	str	r0, [sp, #828]	; 0x33c
    dbd6:	e01f      	b.n	dc18 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf58>
    dbd8:	2001      	movs	r0, #1
    dbda:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    dbde:	e015      	b.n	dc0c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf4c>
    dbe0:	2000      	movs	r0, #0
    dbe2:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    dbe6:	e011      	b.n	dc0c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf4c>
    dbe8:	2000      	movs	r0, #0
    dbea:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    dbee:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    dbf2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dbf6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dbfa:	f003 f906 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dbfe:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    dc02:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    dc06:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    dc0a:	e00a      	b.n	dc22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf62>
    dc0c:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    dc10:	07c0      	lsls	r0, r0, #31
    dc12:	2800      	cmp	r0, #0
    dc14:	d112      	bne.n	dc3c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf7c>
    dc16:	e055      	b.n	dcc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1004>
    dc18:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    dc1a:	07c1      	lsls	r1, r0, #31
    dc1c:	2900      	cmp	r1, #0
    dc1e:	d1e3      	bne.n	dbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf28>
    dc20:	e7de      	b.n	dbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf20>
    dc22:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    dc26:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    dc2a:	f006 fca9 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dc2e:	90ce      	str	r0, [sp, #824]	; 0x338
    dc30:	e7ff      	b.n	dc32 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf72>
    dc32:	98ce      	ldr	r0, [sp, #824]	; 0x338
    dc34:	07c1      	lsls	r1, r0, #31
    dc36:	2900      	cmp	r1, #0
    dc38:	d1ce      	bne.n	dbd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf18>
    dc3a:	e7d1      	b.n	dbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    dc3c:	f24d 40f4 	movw	r0, #54516	; 0xd4f4
    dc40:	f2c0 0001 	movt	r0, #1
    dc44:	6801      	ldr	r1, [r0, #0]
    dc46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc4a:	f100 0212 	add.w	r2, r0, #18
    dc4e:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    dc52:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    dc56:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    dc5a:	f646 03eb 	movw	r3, #26859	; 0x68eb
    dc5e:	f2c0 0301 	movt	r3, #1
    dc62:	4610      	mov	r0, r2
    dc64:	91cd      	str	r1, [sp, #820]	; 0x334
    dc66:	4619      	mov	r1, r3
    dc68:	f7fc fc13 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc6c:	90cc      	str	r0, [sp, #816]	; 0x330
    dc6e:	91cb      	str	r1, [sp, #812]	; 0x32c
    dc70:	e7ff      	b.n	dc72 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xfb2>
    dc72:	98cc      	ldr	r0, [sp, #816]	; 0x330
    dc74:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    dc78:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    dc7a:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    dc7e:	f64c 2248 	movw	r2, #51784	; 0xca48
    dc82:	f2c0 0201 	movt	r2, #1
    dc86:	6812      	ldr	r2, [r2, #0]
    dc88:	466b      	mov	r3, sp
    dc8a:	f04f 0c01 	mov.w	ip, #1
    dc8e:	f8c3 c008 	str.w	ip, [r3, #8]
    dc92:	605a      	str	r2, [r3, #4]
    dc94:	f8c3 c000 	str.w	ip, [r3]
    dc98:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    dc9c:	2202      	movs	r2, #2
    dc9e:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    dca2:	99cd      	ldr	r1, [sp, #820]	; 0x334
    dca4:	f006 fb31 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dca8:	e7ff      	b.n	dcaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xfea>
    dcaa:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    dcae:	f24d 5014 	movw	r0, #54548	; 0xd514
    dcb2:	f2c0 0001 	movt	r0, #1
    dcb6:	6802      	ldr	r2, [r0, #0]
    dcb8:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    dcbc:	f003 ffaa 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dcc0:	e7ff      	b.n	dcc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1002>
    dcc2:	e7ff      	b.n	dcc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    dcc4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dcc8:	280f      	cmp	r0, #15
    dcca:	f202 8553 	bhi.w	10774 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ab4>
    dcce:	e7ff      	b.n	dcd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1010>
    dcd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcd4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dcd8:	1842      	adds	r2, r0, r1
    dcda:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    dcde:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    dce2:	f006 fb76 	bl	143d2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    dce6:	90ca      	str	r0, [sp, #808]	; 0x328
    dce8:	e7ff      	b.n	dcea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x102a>
    dcea:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dcee:	280f      	cmp	r0, #15
    dcf0:	f202 854a 	bhi.w	10788 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ac8>
    dcf4:	e7ff      	b.n	dcf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1036>
    dcf6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcfa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dcfe:	1842      	adds	r2, r0, r1
    dd00:	9bca      	ldr	r3, [sp, #808]	; 0x328
    dd02:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    dd06:	f002 baa8 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    dd0a:	2005      	movs	r0, #5
    dd0c:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    dd10:	f64c 2000 	movw	r0, #51712	; 0xca00
    dd14:	f2c0 0001 	movt	r0, #1
    dd18:	6801      	ldr	r1, [r0, #0]
    dd1a:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    dd1e:	f006 fc2f 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd22:	90c9      	str	r0, [sp, #804]	; 0x324
    dd24:	e01f      	b.n	dd66 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10a6>
    dd26:	2001      	movs	r0, #1
    dd28:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    dd2c:	e015      	b.n	dd5a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x109a>
    dd2e:	2000      	movs	r0, #0
    dd30:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    dd34:	e011      	b.n	dd5a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x109a>
    dd36:	2000      	movs	r0, #0
    dd38:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    dd3c:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    dd40:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dd44:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd48:	f003 f85f 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dd4c:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    dd50:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    dd54:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    dd58:	e00a      	b.n	dd70 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10b0>
    dd5a:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    dd5e:	07c0      	lsls	r0, r0, #31
    dd60:	2800      	cmp	r0, #0
    dd62:	d112      	bne.n	dd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10ca>
    dd64:	e055      	b.n	de12 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1152>
    dd66:	98c9      	ldr	r0, [sp, #804]	; 0x324
    dd68:	07c1      	lsls	r1, r0, #31
    dd6a:	2900      	cmp	r1, #0
    dd6c:	d1e3      	bne.n	dd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1076>
    dd6e:	e7de      	b.n	dd2e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x106e>
    dd70:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    dd74:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    dd78:	f006 fc02 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd7c:	90c8      	str	r0, [sp, #800]	; 0x320
    dd7e:	e7ff      	b.n	dd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10c0>
    dd80:	98c8      	ldr	r0, [sp, #800]	; 0x320
    dd82:	07c1      	lsls	r1, r0, #31
    dd84:	2900      	cmp	r1, #0
    dd86:	d1ce      	bne.n	dd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1066>
    dd88:	e7d1      	b.n	dd2e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    dd8a:	f24d 4094 	movw	r0, #54420	; 0xd494
    dd8e:	f2c0 0001 	movt	r0, #1
    dd92:	6801      	ldr	r1, [r0, #0]
    dd94:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd98:	f100 0212 	add.w	r2, r0, #18
    dd9c:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    dda0:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    dda4:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    dda8:	f646 03eb 	movw	r3, #26859	; 0x68eb
    ddac:	f2c0 0301 	movt	r3, #1
    ddb0:	4610      	mov	r0, r2
    ddb2:	91c7      	str	r1, [sp, #796]	; 0x31c
    ddb4:	4619      	mov	r1, r3
    ddb6:	f7fc fb6c 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ddba:	90c6      	str	r0, [sp, #792]	; 0x318
    ddbc:	91c5      	str	r1, [sp, #788]	; 0x314
    ddbe:	e7ff      	b.n	ddc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1100>
    ddc0:	98c6      	ldr	r0, [sp, #792]	; 0x318
    ddc2:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    ddc6:	99c5      	ldr	r1, [sp, #788]	; 0x314
    ddc8:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    ddcc:	f64c 2248 	movw	r2, #51784	; 0xca48
    ddd0:	f2c0 0201 	movt	r2, #1
    ddd4:	6812      	ldr	r2, [r2, #0]
    ddd6:	466b      	mov	r3, sp
    ddd8:	f04f 0c01 	mov.w	ip, #1
    dddc:	f8c3 c008 	str.w	ip, [r3, #8]
    dde0:	605a      	str	r2, [r3, #4]
    dde2:	f8c3 c000 	str.w	ip, [r3]
    dde6:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ddea:	2202      	movs	r2, #2
    ddec:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    ddf0:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    ddf2:	f006 fa8a 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ddf6:	e7ff      	b.n	ddf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1138>
    ddf8:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    ddfc:	f24d 40b4 	movw	r0, #54452	; 0xd4b4
    de00:	f2c0 0001 	movt	r0, #1
    de04:	6802      	ldr	r2, [r0, #0]
    de06:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    de0a:	f003 ff03 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de0e:	e7ff      	b.n	de10 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1150>
    de10:	e7ff      	b.n	de12 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1152>
                self.v[x] = self.v[y];
    de12:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    de16:	280f      	cmp	r0, #15
    de18:	f202 8498 	bhi.w	1074c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a8c>
    de1c:	e7ff      	b.n	de1e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x115e>
    de1e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de22:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    de26:	1842      	adds	r2, r0, r1
    de28:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    de2c:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    de30:	2b0f      	cmp	r3, #15
    de32:	92c4      	str	r2, [sp, #784]	; 0x310
    de34:	f202 8494 	bhi.w	10760 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3aa0>
    de38:	e7ff      	b.n	de3a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x117a>
    de3a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de3e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    de42:	1842      	adds	r2, r0, r1
    de44:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    de46:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    de4a:	f002 ba06 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    de4e:	2005      	movs	r0, #5
    de50:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    de54:	f64c 2000 	movw	r0, #51712	; 0xca00
    de58:	f2c0 0001 	movt	r0, #1
    de5c:	6801      	ldr	r1, [r0, #0]
    de5e:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    de62:	f006 fb8d 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de66:	90c3      	str	r0, [sp, #780]	; 0x30c
    de68:	e01f      	b.n	deaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11ea>
    de6a:	2001      	movs	r0, #1
    de6c:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    de70:	e015      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11de>
    de72:	2000      	movs	r0, #0
    de74:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    de78:	e011      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11de>
    de7a:	2000      	movs	r0, #0
    de7c:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    de80:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    de84:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de88:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de8c:	f002 ffbd 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    de90:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    de94:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    de98:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    de9c:	e00a      	b.n	deb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11f4>
    de9e:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    dea2:	07c0      	lsls	r0, r0, #31
    dea4:	2800      	cmp	r0, #0
    dea6:	d112      	bne.n	dece <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x120e>
    dea8:	e055      	b.n	df56 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1296>
    deaa:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    deac:	07c1      	lsls	r1, r0, #31
    deae:	2900      	cmp	r1, #0
    deb0:	d1e3      	bne.n	de7a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11ba>
    deb2:	e7de      	b.n	de72 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11b2>
    deb4:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    deb8:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    debc:	f006 fb60 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dec0:	90c2      	str	r0, [sp, #776]	; 0x308
    dec2:	e7ff      	b.n	dec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1204>
    dec4:	98c2      	ldr	r0, [sp, #776]	; 0x308
    dec6:	07c1      	lsls	r1, r0, #31
    dec8:	2900      	cmp	r1, #0
    deca:	d1ce      	bne.n	de6a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11aa>
    decc:	e7d1      	b.n	de72 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    dece:	f24d 4034 	movw	r0, #54324	; 0xd434
    ded2:	f2c0 0001 	movt	r0, #1
    ded6:	6801      	ldr	r1, [r0, #0]
    ded8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dedc:	f100 0212 	add.w	r2, r0, #18
    dee0:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    dee4:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    dee8:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    deec:	f646 03eb 	movw	r3, #26859	; 0x68eb
    def0:	f2c0 0301 	movt	r3, #1
    def4:	4610      	mov	r0, r2
    def6:	91c1      	str	r1, [sp, #772]	; 0x304
    def8:	4619      	mov	r1, r3
    defa:	f7fc faca 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    defe:	90c0      	str	r0, [sp, #768]	; 0x300
    df00:	91bf      	str	r1, [sp, #764]	; 0x2fc
    df02:	e7ff      	b.n	df04 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1244>
    df04:	98c0      	ldr	r0, [sp, #768]	; 0x300
    df06:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    df0a:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    df0c:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    df10:	f64c 2248 	movw	r2, #51784	; 0xca48
    df14:	f2c0 0201 	movt	r2, #1
    df18:	6812      	ldr	r2, [r2, #0]
    df1a:	466b      	mov	r3, sp
    df1c:	f04f 0c01 	mov.w	ip, #1
    df20:	f8c3 c008 	str.w	ip, [r3, #8]
    df24:	605a      	str	r2, [r3, #4]
    df26:	f8c3 c000 	str.w	ip, [r3]
    df2a:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    df2e:	2202      	movs	r2, #2
    df30:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    df34:	99c1      	ldr	r1, [sp, #772]	; 0x304
    df36:	f006 f9e8 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    df3a:	e7ff      	b.n	df3c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x127c>
    df3c:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    df40:	f24d 4054 	movw	r0, #54356	; 0xd454
    df44:	f2c0 0001 	movt	r0, #1
    df48:	6802      	ldr	r2, [r0, #0]
    df4a:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    df4e:	f003 fe61 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df52:	e7ff      	b.n	df54 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1294>
    df54:	e7ff      	b.n	df56 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1296>
                self.v[x] |= self.v[y];
    df56:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    df5a:	280f      	cmp	r0, #15
    df5c:	f202 83e2 	bhi.w	10724 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a64>
    df60:	e7ff      	b.n	df62 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12a2>
    df62:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df66:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    df6a:	1842      	adds	r2, r0, r1
    df6c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    df70:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    df74:	2b0f      	cmp	r3, #15
    df76:	92be      	str	r2, [sp, #760]	; 0x2f8
    df78:	f202 83de 	bhi.w	10738 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a78>
    df7c:	e7ff      	b.n	df7e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12be>
    df7e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df82:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df86:	1842      	adds	r2, r0, r1
    df88:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    df8c:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    df90:	ea43 030c 	orr.w	r3, r3, ip
    df94:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    df98:	f002 b95f 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    df9c:	2005      	movs	r0, #5
    df9e:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    dfa2:	f64c 2000 	movw	r0, #51712	; 0xca00
    dfa6:	f2c0 0001 	movt	r0, #1
    dfaa:	6801      	ldr	r1, [r0, #0]
    dfac:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    dfb0:	f006 fae6 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dfb4:	90bd      	str	r0, [sp, #756]	; 0x2f4
    dfb6:	e01f      	b.n	dff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1338>
    dfb8:	2001      	movs	r0, #1
    dfba:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    dfbe:	e015      	b.n	dfec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x132c>
    dfc0:	2000      	movs	r0, #0
    dfc2:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    dfc6:	e011      	b.n	dfec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x132c>
    dfc8:	2000      	movs	r0, #0
    dfca:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    dfce:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    dfd2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dfd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dfda:	f002 ff16 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dfde:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    dfe2:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    dfe6:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    dfea:	e00a      	b.n	e002 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1342>
    dfec:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    dff0:	07c0      	lsls	r0, r0, #31
    dff2:	2800      	cmp	r0, #0
    dff4:	d112      	bne.n	e01c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x135c>
    dff6:	e055      	b.n	e0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13e4>
    dff8:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    dffa:	07c1      	lsls	r1, r0, #31
    dffc:	2900      	cmp	r1, #0
    dffe:	d1e3      	bne.n	dfc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1308>
    e000:	e7de      	b.n	dfc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1300>
    e002:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e006:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    e00a:	f006 fab9 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e00e:	90bc      	str	r0, [sp, #752]	; 0x2f0
    e010:	e7ff      	b.n	e012 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1352>
    e012:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    e014:	07c1      	lsls	r1, r0, #31
    e016:	2900      	cmp	r1, #0
    e018:	d1ce      	bne.n	dfb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12f8>
    e01a:	e7d1      	b.n	dfc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    e01c:	f24d 30d4 	movw	r0, #54228	; 0xd3d4
    e020:	f2c0 0001 	movt	r0, #1
    e024:	6801      	ldr	r1, [r0, #0]
    e026:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e02a:	f100 0212 	add.w	r2, r0, #18
    e02e:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    e032:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    e036:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e03a:	f646 03eb 	movw	r3, #26859	; 0x68eb
    e03e:	f2c0 0301 	movt	r3, #1
    e042:	4610      	mov	r0, r2
    e044:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e046:	4619      	mov	r1, r3
    e048:	f7fc fa23 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e04c:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e04e:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e050:	e7ff      	b.n	e052 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1392>
    e052:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e054:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e058:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e05a:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e05e:	f64c 2248 	movw	r2, #51784	; 0xca48
    e062:	f2c0 0201 	movt	r2, #1
    e066:	6812      	ldr	r2, [r2, #0]
    e068:	466b      	mov	r3, sp
    e06a:	f04f 0c01 	mov.w	ip, #1
    e06e:	f8c3 c008 	str.w	ip, [r3, #8]
    e072:	605a      	str	r2, [r3, #4]
    e074:	f8c3 c000 	str.w	ip, [r3]
    e078:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e07c:	2202      	movs	r2, #2
    e07e:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e082:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e084:	f006 f941 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e088:	e7ff      	b.n	e08a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13ca>
    e08a:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e08e:	f24d 30f4 	movw	r0, #54260	; 0xd3f4
    e092:	f2c0 0001 	movt	r0, #1
    e096:	6802      	ldr	r2, [r0, #0]
    e098:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e09c:	f003 fdba 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e0a0:	e7ff      	b.n	e0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13e2>
    e0a2:	e7ff      	b.n	e0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13e4>
                self.v[x] &= self.v[y];
    e0a4:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e0a8:	280f      	cmp	r0, #15
    e0aa:	f202 8327 	bhi.w	106fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a3c>
    e0ae:	e7ff      	b.n	e0b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13f0>
    e0b0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e0b4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e0b8:	1842      	adds	r2, r0, r1
    e0ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e0be:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e0c2:	2b0f      	cmp	r3, #15
    e0c4:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e0c6:	f202 8323 	bhi.w	10710 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a50>
    e0ca:	e7ff      	b.n	e0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x140c>
    e0cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e0d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e0d4:	1842      	adds	r2, r0, r1
    e0d6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e0da:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e0de:	ea03 030c 	and.w	r3, r3, ip
    e0e2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e0e6:	f002 b8b8 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e0ea:	2005      	movs	r0, #5
    e0ec:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e0f0:	f64c 2000 	movw	r0, #51712	; 0xca00
    e0f4:	f2c0 0001 	movt	r0, #1
    e0f8:	6801      	ldr	r1, [r0, #0]
    e0fa:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e0fe:	f006 fa3f 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e102:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e104:	e01f      	b.n	e146 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1486>
    e106:	2001      	movs	r0, #1
    e108:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e10c:	e015      	b.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x147a>
    e10e:	2000      	movs	r0, #0
    e110:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e114:	e011      	b.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x147a>
    e116:	2000      	movs	r0, #0
    e118:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e11c:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e120:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e124:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e128:	f002 fe6f 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e12c:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e130:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e134:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e138:	e00a      	b.n	e150 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1490>
    e13a:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e13e:	07c0      	lsls	r0, r0, #31
    e140:	2800      	cmp	r0, #0
    e142:	d112      	bne.n	e16a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x14aa>
    e144:	e055      	b.n	e1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1532>
    e146:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e148:	07c1      	lsls	r1, r0, #31
    e14a:	2900      	cmp	r1, #0
    e14c:	d1e3      	bne.n	e116 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1456>
    e14e:	e7de      	b.n	e10e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x144e>
    e150:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e154:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e158:	f006 fa12 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e15c:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e15e:	e7ff      	b.n	e160 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x14a0>
    e160:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e162:	07c1      	lsls	r1, r0, #31
    e164:	2900      	cmp	r1, #0
    e166:	d1ce      	bne.n	e106 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1446>
    e168:	e7d1      	b.n	e10e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e16a:	f24d 3074 	movw	r0, #54132	; 0xd374
    e16e:	f2c0 0001 	movt	r0, #1
    e172:	6801      	ldr	r1, [r0, #0]
    e174:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e178:	f100 0212 	add.w	r2, r0, #18
    e17c:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e180:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e184:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e188:	f646 03eb 	movw	r3, #26859	; 0x68eb
    e18c:	f2c0 0301 	movt	r3, #1
    e190:	4610      	mov	r0, r2
    e192:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e194:	4619      	mov	r1, r3
    e196:	f7fc f97c 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e19a:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e19c:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e19e:	e7ff      	b.n	e1a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x14e0>
    e1a0:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e1a2:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e1a6:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e1a8:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e1ac:	f64c 2248 	movw	r2, #51784	; 0xca48
    e1b0:	f2c0 0201 	movt	r2, #1
    e1b4:	6812      	ldr	r2, [r2, #0]
    e1b6:	466b      	mov	r3, sp
    e1b8:	f04f 0c01 	mov.w	ip, #1
    e1bc:	f8c3 c008 	str.w	ip, [r3, #8]
    e1c0:	605a      	str	r2, [r3, #4]
    e1c2:	f8c3 c000 	str.w	ip, [r3]
    e1c6:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e1ca:	2202      	movs	r2, #2
    e1cc:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e1d0:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e1d2:	f006 f89a 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e1d6:	e7ff      	b.n	e1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1518>
    e1d8:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e1dc:	f24d 3094 	movw	r0, #54164	; 0xd394
    e1e0:	f2c0 0001 	movt	r0, #1
    e1e4:	6802      	ldr	r2, [r0, #0]
    e1e6:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e1ea:	f003 fd13 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e1ee:	e7ff      	b.n	e1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1530>
    e1f0:	e7ff      	b.n	e1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1532>
                self.v[x] ^= self.v[y];
    e1f2:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e1f6:	280f      	cmp	r0, #15
    e1f8:	f202 826c 	bhi.w	106d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a14>
    e1fc:	e7ff      	b.n	e1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x153e>
    e1fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e202:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e206:	1842      	adds	r2, r0, r1
    e208:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e20c:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e210:	2b0f      	cmp	r3, #15
    e212:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e214:	f202 8268 	bhi.w	106e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a28>
    e218:	e7ff      	b.n	e21a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x155a>
    e21a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e21e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e222:	1842      	adds	r2, r0, r1
    e224:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e228:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e22c:	ea83 030c 	eor.w	r3, r3, ip
    e230:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e234:	f002 b811 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e238:	2005      	movs	r0, #5
    e23a:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e23e:	f64c 2000 	movw	r0, #51712	; 0xca00
    e242:	f2c0 0001 	movt	r0, #1
    e246:	6801      	ldr	r1, [r0, #0]
    e248:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e24c:	f006 f998 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e250:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e252:	e01f      	b.n	e294 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15d4>
    e254:	2001      	movs	r0, #1
    e256:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e25a:	e015      	b.n	e288 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15c8>
    e25c:	2000      	movs	r0, #0
    e25e:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e262:	e011      	b.n	e288 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15c8>
    e264:	2000      	movs	r0, #0
    e266:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e26a:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e26e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e272:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e276:	f002 fdc8 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e27a:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e27e:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e282:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e286:	e00a      	b.n	e29e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15de>
    e288:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e28c:	07c0      	lsls	r0, r0, #31
    e28e:	2800      	cmp	r0, #0
    e290:	d112      	bne.n	e2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15f8>
    e292:	e055      	b.n	e340 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1680>
    e294:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e296:	07c1      	lsls	r1, r0, #31
    e298:	2900      	cmp	r1, #0
    e29a:	d1e3      	bne.n	e264 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15a4>
    e29c:	e7de      	b.n	e25c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x159c>
    e29e:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e2a2:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e2a6:	f006 f96b 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e2aa:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e2ac:	e7ff      	b.n	e2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15ee>
    e2ae:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e2b0:	07c1      	lsls	r1, r0, #31
    e2b2:	2900      	cmp	r1, #0
    e2b4:	d1ce      	bne.n	e254 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1594>
    e2b6:	e7d1      	b.n	e25c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e2b8:	f24d 3004 	movw	r0, #54020	; 0xd304
    e2bc:	f2c0 0001 	movt	r0, #1
    e2c0:	6801      	ldr	r1, [r0, #0]
    e2c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2c6:	f100 0212 	add.w	r2, r0, #18
    e2ca:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e2ce:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e2d2:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e2d6:	f646 03eb 	movw	r3, #26859	; 0x68eb
    e2da:	f2c0 0301 	movt	r3, #1
    e2de:	4610      	mov	r0, r2
    e2e0:	91af      	str	r1, [sp, #700]	; 0x2bc
    e2e2:	4619      	mov	r1, r3
    e2e4:	f7fc f8d5 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e2e8:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e2ea:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e2ec:	e7ff      	b.n	e2ee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x162e>
    e2ee:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e2f0:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e2f4:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e2f6:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e2fa:	f64c 2248 	movw	r2, #51784	; 0xca48
    e2fe:	f2c0 0201 	movt	r2, #1
    e302:	6812      	ldr	r2, [r2, #0]
    e304:	466b      	mov	r3, sp
    e306:	f04f 0c01 	mov.w	ip, #1
    e30a:	f8c3 c008 	str.w	ip, [r3, #8]
    e30e:	605a      	str	r2, [r3, #4]
    e310:	f8c3 c000 	str.w	ip, [r3]
    e314:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e318:	2202      	movs	r2, #2
    e31a:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e31e:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e320:	f005 fff3 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e324:	e7ff      	b.n	e326 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1666>
    e326:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e32a:	f24d 3024 	movw	r0, #54052	; 0xd324
    e32e:	f2c0 0001 	movt	r0, #1
    e332:	6802      	ldr	r2, [r0, #0]
    e334:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e338:	f003 fc6c 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e33c:	e7ff      	b.n	e33e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x167e>
    e33e:	e7ff      	b.n	e340 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e340:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e344:	280f      	cmp	r0, #15
    e346:	f202 81a7 	bhi.w	10698 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39d8>
    e34a:	e7ff      	b.n	e34c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x168c>
    e34c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e350:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e354:	1842      	adds	r2, r0, r1
    e356:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e35a:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e35e:	2b0f      	cmp	r3, #15
    e360:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e362:	f202 81a3 	bhi.w	106ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39ec>
    e366:	e7ff      	b.n	e368 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x16a8>
    e368:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e36c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e370:	1842      	adds	r2, r0, r1
    e372:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e376:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e378:	f006 f871 	bl	1445e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e37c:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e37e:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e380:	e7ff      	b.n	e382 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x16c2>
    e382:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e384:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e388:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e38a:	f001 0201 	and.w	r2, r1, #1
    e38e:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e392:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e396:	2a0f      	cmp	r2, #15
    e398:	f202 8192 	bhi.w	106c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a00>
    e39c:	e7ff      	b.n	e39e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x16de>
    e39e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e3a2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e3a6:	1842      	adds	r2, r0, r1
    e3a8:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e3aa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e3ae:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e3b0:	f002 0c01 	and.w	ip, r2, #1
    e3b4:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e3b8:	f001 bf4f 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e3bc:	2005      	movs	r0, #5
    e3be:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e3c2:	f64c 2000 	movw	r0, #51712	; 0xca00
    e3c6:	f2c0 0001 	movt	r0, #1
    e3ca:	6801      	ldr	r1, [r0, #0]
    e3cc:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e3d0:	f006 f8d6 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e3d4:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e3d6:	e01f      	b.n	e418 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1758>
    e3d8:	2001      	movs	r0, #1
    e3da:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e3de:	e015      	b.n	e40c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x174c>
    e3e0:	2000      	movs	r0, #0
    e3e2:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e3e6:	e011      	b.n	e40c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x174c>
    e3e8:	2000      	movs	r0, #0
    e3ea:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e3ee:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e3f2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e3f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e3fa:	f002 fd06 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e3fe:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    e402:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    e406:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    e40a:	e00a      	b.n	e422 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1762>
    e40c:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    e410:	07c0      	lsls	r0, r0, #31
    e412:	2800      	cmp	r0, #0
    e414:	d112      	bne.n	e43c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x177c>
    e416:	e055      	b.n	e4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1804>
    e418:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    e41a:	07c1      	lsls	r1, r0, #31
    e41c:	2900      	cmp	r1, #0
    e41e:	d1e3      	bne.n	e3e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1728>
    e420:	e7de      	b.n	e3e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1720>
    e422:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e426:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    e42a:	f006 f8a9 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e42e:	90a8      	str	r0, [sp, #672]	; 0x2a0
    e430:	e7ff      	b.n	e432 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1772>
    e432:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    e434:	07c1      	lsls	r1, r0, #31
    e436:	2900      	cmp	r1, #0
    e438:	d1ce      	bne.n	e3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1718>
    e43a:	e7d1      	b.n	e3e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    e43c:	f24d 2094 	movw	r0, #53908	; 0xd294
    e440:	f2c0 0001 	movt	r0, #1
    e444:	6801      	ldr	r1, [r0, #0]
    e446:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e44a:	f100 0212 	add.w	r2, r0, #18
    e44e:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    e452:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    e456:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    e45a:	f646 03eb 	movw	r3, #26859	; 0x68eb
    e45e:	f2c0 0301 	movt	r3, #1
    e462:	4610      	mov	r0, r2
    e464:	91a7      	str	r1, [sp, #668]	; 0x29c
    e466:	4619      	mov	r1, r3
    e468:	f7fc f813 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e46c:	90a6      	str	r0, [sp, #664]	; 0x298
    e46e:	91a5      	str	r1, [sp, #660]	; 0x294
    e470:	e7ff      	b.n	e472 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x17b2>
    e472:	98a6      	ldr	r0, [sp, #664]	; 0x298
    e474:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    e478:	99a5      	ldr	r1, [sp, #660]	; 0x294
    e47a:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    e47e:	f64c 2248 	movw	r2, #51784	; 0xca48
    e482:	f2c0 0201 	movt	r2, #1
    e486:	6812      	ldr	r2, [r2, #0]
    e488:	466b      	mov	r3, sp
    e48a:	f04f 0c01 	mov.w	ip, #1
    e48e:	f8c3 c008 	str.w	ip, [r3, #8]
    e492:	605a      	str	r2, [r3, #4]
    e494:	f8c3 c000 	str.w	ip, [r3]
    e498:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e49c:	2202      	movs	r2, #2
    e49e:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    e4a2:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    e4a4:	f005 ff31 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e4a8:	e7ff      	b.n	e4aa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x17ea>
    e4aa:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    e4ae:	f24d 20b4 	movw	r0, #53940	; 0xd2b4
    e4b2:	f2c0 0001 	movt	r0, #1
    e4b6:	6802      	ldr	r2, [r0, #0]
    e4b8:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e4bc:	f003 fbaa 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e4c0:	e7ff      	b.n	e4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1802>
    e4c2:	e7ff      	b.n	e4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e4c4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e4c8:	280f      	cmp	r0, #15
    e4ca:	f202 80c7 	bhi.w	1065c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x399c>
    e4ce:	e7ff      	b.n	e4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1810>
    e4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4d4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4d8:	1842      	adds	r2, r0, r1
    e4da:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e4de:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e4e2:	2b0f      	cmp	r3, #15
    e4e4:	92a4      	str	r2, [sp, #656]	; 0x290
    e4e6:	f202 80c3 	bhi.w	10670 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39b0>
    e4ea:	e7ff      	b.n	e4ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x182c>
    e4ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4f0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e4f4:	1842      	adds	r2, r0, r1
    e4f6:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e4fa:	98a4      	ldr	r0, [sp, #656]	; 0x290
    e4fc:	f005 ffda 	bl	144b4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    e500:	90a3      	str	r0, [sp, #652]	; 0x28c
    e502:	91a2      	str	r1, [sp, #648]	; 0x288
    e504:	e7ff      	b.n	e506 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1846>
    e506:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    e508:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    e50c:	99a2      	ldr	r1, [sp, #648]	; 0x288
    e50e:	f001 0201 	and.w	r2, r1, #1
    e512:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    e516:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e51a:	2a0f      	cmp	r2, #15
    e51c:	f202 80b2 	bhi.w	10684 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39c4>
    e520:	e7ff      	b.n	e522 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1862>
    e522:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e526:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e52a:	1842      	adds	r2, r0, r1
    e52c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    e52e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    e532:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    e534:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    e538:	ea22 020c 	bic.w	r2, r2, ip
    e53c:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    e540:	f001 be8b 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e544:	2005      	movs	r0, #5
    e546:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    e54a:	f64c 2000 	movw	r0, #51712	; 0xca00
    e54e:	f2c0 0001 	movt	r0, #1
    e552:	6801      	ldr	r1, [r0, #0]
    e554:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e558:	f006 f812 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e55c:	90a1      	str	r0, [sp, #644]	; 0x284
    e55e:	e01f      	b.n	e5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18e0>
    e560:	2001      	movs	r0, #1
    e562:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e566:	e015      	b.n	e594 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18d4>
    e568:	2000      	movs	r0, #0
    e56a:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e56e:	e011      	b.n	e594 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18d4>
    e570:	2000      	movs	r0, #0
    e572:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    e576:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    e57a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e57e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e582:	f002 fc42 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e586:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    e58a:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    e58e:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    e592:	e00a      	b.n	e5aa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18ea>
    e594:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    e598:	07c0      	lsls	r0, r0, #31
    e59a:	2800      	cmp	r0, #0
    e59c:	d112      	bne.n	e5c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1904>
    e59e:	e055      	b.n	e64c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x198c>
    e5a0:	98a1      	ldr	r0, [sp, #644]	; 0x284
    e5a2:	07c1      	lsls	r1, r0, #31
    e5a4:	2900      	cmp	r1, #0
    e5a6:	d1e3      	bne.n	e570 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18b0>
    e5a8:	e7de      	b.n	e568 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18a8>
    e5aa:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e5ae:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    e5b2:	f005 ffe5 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e5b6:	90a0      	str	r0, [sp, #640]	; 0x280
    e5b8:	e7ff      	b.n	e5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18fa>
    e5ba:	98a0      	ldr	r0, [sp, #640]	; 0x280
    e5bc:	07c1      	lsls	r1, r0, #31
    e5be:	2900      	cmp	r1, #0
    e5c0:	d1ce      	bne.n	e560 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18a0>
    e5c2:	e7d1      	b.n	e568 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    e5c4:	f24d 2024 	movw	r0, #53796	; 0xd224
    e5c8:	f2c0 0001 	movt	r0, #1
    e5cc:	6801      	ldr	r1, [r0, #0]
    e5ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e5d2:	f100 0212 	add.w	r2, r0, #18
    e5d6:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    e5da:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    e5de:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    e5e2:	f646 03eb 	movw	r3, #26859	; 0x68eb
    e5e6:	f2c0 0301 	movt	r3, #1
    e5ea:	4610      	mov	r0, r2
    e5ec:	919f      	str	r1, [sp, #636]	; 0x27c
    e5ee:	4619      	mov	r1, r3
    e5f0:	f7fb ff4f 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e5f4:	909e      	str	r0, [sp, #632]	; 0x278
    e5f6:	919d      	str	r1, [sp, #628]	; 0x274
    e5f8:	e7ff      	b.n	e5fa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x193a>
    e5fa:	989e      	ldr	r0, [sp, #632]	; 0x278
    e5fc:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    e600:	999d      	ldr	r1, [sp, #628]	; 0x274
    e602:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    e606:	f64c 2248 	movw	r2, #51784	; 0xca48
    e60a:	f2c0 0201 	movt	r2, #1
    e60e:	6812      	ldr	r2, [r2, #0]
    e610:	466b      	mov	r3, sp
    e612:	f04f 0c01 	mov.w	ip, #1
    e616:	f8c3 c008 	str.w	ip, [r3, #8]
    e61a:	605a      	str	r2, [r3, #4]
    e61c:	f8c3 c000 	str.w	ip, [r3]
    e620:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e624:	2202      	movs	r2, #2
    e626:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    e62a:	999f      	ldr	r1, [sp, #636]	; 0x27c
    e62c:	f005 fe6d 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e630:	e7ff      	b.n	e632 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1972>
    e632:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    e636:	f24d 2044 	movw	r0, #53828	; 0xd244
    e63a:	f2c0 0001 	movt	r0, #1
    e63e:	6802      	ldr	r2, [r0, #0]
    e640:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e644:	f003 fae6 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e648:	e7ff      	b.n	e64a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x198a>
    e64a:	e7ff      	b.n	e64c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x198c>
                self.v[0xf] = self.v[x] & 1;
    e64c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e650:	280f      	cmp	r0, #15
    e652:	f201 87e5 	bhi.w	10620 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3960>
    e656:	e7ff      	b.n	e658 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1998>
    e658:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e65c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e660:	1842      	adds	r2, r0, r1
    e662:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e666:	f002 0201 	and.w	r2, r2, #1
    e66a:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    e66e:	290f      	cmp	r1, #15
    e670:	f201 87e0 	bhi.w	10634 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3974>
    e674:	e7ff      	b.n	e676 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x19b6>
    e676:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e67a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e67e:	1842      	adds	r2, r0, r1
    e680:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e684:	2101      	movs	r1, #1
    e686:	f005 fec6 	bl	14416 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    e68a:	909c      	str	r0, [sp, #624]	; 0x270
    e68c:	e7ff      	b.n	e68e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x19ce>
    e68e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e692:	280f      	cmp	r0, #15
    e694:	f201 87d8 	bhi.w	10648 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3988>
    e698:	e7ff      	b.n	e69a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x19da>
    e69a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e69e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6a2:	1842      	adds	r2, r0, r1
    e6a4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    e6a6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e6aa:	f001 bdd6 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e6ae:	2005      	movs	r0, #5
    e6b0:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    e6b4:	f64c 2000 	movw	r0, #51712	; 0xca00
    e6b8:	f2c0 0001 	movt	r0, #1
    e6bc:	6801      	ldr	r1, [r0, #0]
    e6be:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    e6c2:	f005 ff5d 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e6c6:	909b      	str	r0, [sp, #620]	; 0x26c
    e6c8:	e01f      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a4a>
    e6ca:	2001      	movs	r0, #1
    e6cc:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    e6d0:	e015      	b.n	e6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a3e>
    e6d2:	2000      	movs	r0, #0
    e6d4:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    e6d8:	e011      	b.n	e6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a3e>
    e6da:	2000      	movs	r0, #0
    e6dc:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    e6e0:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    e6e4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e6e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e6ec:	f002 fb8d 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e6f0:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    e6f4:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    e6f8:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    e6fc:	e00a      	b.n	e714 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a54>
    e6fe:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    e702:	07c0      	lsls	r0, r0, #31
    e704:	2800      	cmp	r0, #0
    e706:	d112      	bne.n	e72e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a6e>
    e708:	e055      	b.n	e7b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1af6>
    e70a:	989b      	ldr	r0, [sp, #620]	; 0x26c
    e70c:	07c1      	lsls	r1, r0, #31
    e70e:	2900      	cmp	r1, #0
    e710:	d1e3      	bne.n	e6da <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a1a>
    e712:	e7de      	b.n	e6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a12>
    e714:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    e718:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    e71c:	f005 ff30 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e720:	909a      	str	r0, [sp, #616]	; 0x268
    e722:	e7ff      	b.n	e724 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a64>
    e724:	989a      	ldr	r0, [sp, #616]	; 0x268
    e726:	07c1      	lsls	r1, r0, #31
    e728:	2900      	cmp	r1, #0
    e72a:	d1ce      	bne.n	e6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a0a>
    e72c:	e7d1      	b.n	e6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    e72e:	f24d 10b4 	movw	r0, #53684	; 0xd1b4
    e732:	f2c0 0001 	movt	r0, #1
    e736:	6801      	ldr	r1, [r0, #0]
    e738:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e73c:	f100 0212 	add.w	r2, r0, #18
    e740:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    e744:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    e748:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    e74c:	f646 03eb 	movw	r3, #26859	; 0x68eb
    e750:	f2c0 0301 	movt	r3, #1
    e754:	4610      	mov	r0, r2
    e756:	9199      	str	r1, [sp, #612]	; 0x264
    e758:	4619      	mov	r1, r3
    e75a:	f7fb fe9a 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e75e:	9098      	str	r0, [sp, #608]	; 0x260
    e760:	9197      	str	r1, [sp, #604]	; 0x25c
    e762:	e7ff      	b.n	e764 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1aa4>
    e764:	9898      	ldr	r0, [sp, #608]	; 0x260
    e766:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    e76a:	9997      	ldr	r1, [sp, #604]	; 0x25c
    e76c:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    e770:	f64c 2248 	movw	r2, #51784	; 0xca48
    e774:	f2c0 0201 	movt	r2, #1
    e778:	6812      	ldr	r2, [r2, #0]
    e77a:	466b      	mov	r3, sp
    e77c:	f04f 0c01 	mov.w	ip, #1
    e780:	f8c3 c008 	str.w	ip, [r3, #8]
    e784:	605a      	str	r2, [r3, #4]
    e786:	f8c3 c000 	str.w	ip, [r3]
    e78a:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    e78e:	2202      	movs	r2, #2
    e790:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    e794:	9999      	ldr	r1, [sp, #612]	; 0x264
    e796:	f005 fdb8 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e79a:	e7ff      	b.n	e79c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1adc>
    e79c:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    e7a0:	f24d 10d4 	movw	r0, #53716	; 0xd1d4
    e7a4:	f2c0 0001 	movt	r0, #1
    e7a8:	6802      	ldr	r2, [r0, #0]
    e7aa:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    e7ae:	f003 fa31 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e7b2:	e7ff      	b.n	e7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1af4>
    e7b4:	e7ff      	b.n	e7b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    e7b6:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e7ba:	280f      	cmp	r0, #15
    e7bc:	f201 8712 	bhi.w	105e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3924>
    e7c0:	e7ff      	b.n	e7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b02>
    e7c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7c6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e7ca:	1842      	adds	r2, r0, r1
    e7cc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e7d0:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e7d4:	2b0f      	cmp	r3, #15
    e7d6:	9296      	str	r2, [sp, #600]	; 0x258
    e7d8:	f201 870e 	bhi.w	105f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3938>
    e7dc:	e7ff      	b.n	e7de <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b1e>
    e7de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7e2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7e6:	1842      	adds	r2, r0, r1
    e7e8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e7ec:	9896      	ldr	r0, [sp, #600]	; 0x258
    e7ee:	f005 fe61 	bl	144b4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    e7f2:	9095      	str	r0, [sp, #596]	; 0x254
    e7f4:	9194      	str	r1, [sp, #592]	; 0x250
    e7f6:	e7ff      	b.n	e7f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b38>
    e7f8:	9895      	ldr	r0, [sp, #596]	; 0x254
    e7fa:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    e7fe:	9994      	ldr	r1, [sp, #592]	; 0x250
    e800:	f001 0201 	and.w	r2, r1, #1
    e804:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    e808:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e80c:	2a0f      	cmp	r2, #15
    e80e:	f201 86fd 	bhi.w	1060c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x394c>
    e812:	e7ff      	b.n	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b54>
    e814:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e818:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e81c:	1842      	adds	r2, r0, r1
    e81e:	9b95      	ldr	r3, [sp, #596]	; 0x254
    e820:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    e824:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    e826:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    e82a:	ea22 020c 	bic.w	r2, r2, ip
    e82e:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    e832:	f001 bd12 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e836:	2005      	movs	r0, #5
    e838:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    e83c:	f64c 2000 	movw	r0, #51712	; 0xca00
    e840:	f2c0 0001 	movt	r0, #1
    e844:	6801      	ldr	r1, [r0, #0]
    e846:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    e84a:	f005 fe99 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e84e:	9093      	str	r0, [sp, #588]	; 0x24c
    e850:	e01f      	b.n	e892 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bd2>
    e852:	2001      	movs	r0, #1
    e854:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    e858:	e015      	b.n	e886 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bc6>
    e85a:	2000      	movs	r0, #0
    e85c:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    e860:	e011      	b.n	e886 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bc6>
    e862:	2000      	movs	r0, #0
    e864:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    e868:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    e86c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e870:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e874:	f002 fac9 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e878:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    e87c:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    e880:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    e884:	e00a      	b.n	e89c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bdc>
    e886:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    e88a:	07c0      	lsls	r0, r0, #31
    e88c:	2800      	cmp	r0, #0
    e88e:	d112      	bne.n	e8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bf6>
    e890:	e055      	b.n	e93e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c7e>
    e892:	9893      	ldr	r0, [sp, #588]	; 0x24c
    e894:	07c1      	lsls	r1, r0, #31
    e896:	2900      	cmp	r1, #0
    e898:	d1e3      	bne.n	e862 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ba2>
    e89a:	e7de      	b.n	e85a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b9a>
    e89c:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    e8a0:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    e8a4:	f005 fe6c 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e8a8:	9092      	str	r0, [sp, #584]	; 0x248
    e8aa:	e7ff      	b.n	e8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bec>
    e8ac:	9892      	ldr	r0, [sp, #584]	; 0x248
    e8ae:	07c1      	lsls	r1, r0, #31
    e8b0:	2900      	cmp	r1, #0
    e8b2:	d1ce      	bne.n	e852 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b92>
    e8b4:	e7d1      	b.n	e85a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    e8b6:	f24d 1040 	movw	r0, #53568	; 0xd140
    e8ba:	f2c0 0001 	movt	r0, #1
    e8be:	6801      	ldr	r1, [r0, #0]
    e8c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8c4:	f100 0212 	add.w	r2, r0, #18
    e8c8:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    e8cc:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    e8d0:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    e8d4:	f646 03eb 	movw	r3, #26859	; 0x68eb
    e8d8:	f2c0 0301 	movt	r3, #1
    e8dc:	4610      	mov	r0, r2
    e8de:	9191      	str	r1, [sp, #580]	; 0x244
    e8e0:	4619      	mov	r1, r3
    e8e2:	f7fb fdd6 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e8e6:	9090      	str	r0, [sp, #576]	; 0x240
    e8e8:	918f      	str	r1, [sp, #572]	; 0x23c
    e8ea:	e7ff      	b.n	e8ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c2c>
    e8ec:	9890      	ldr	r0, [sp, #576]	; 0x240
    e8ee:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    e8f2:	998f      	ldr	r1, [sp, #572]	; 0x23c
    e8f4:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    e8f8:	f64c 2248 	movw	r2, #51784	; 0xca48
    e8fc:	f2c0 0201 	movt	r2, #1
    e900:	6812      	ldr	r2, [r2, #0]
    e902:	466b      	mov	r3, sp
    e904:	f04f 0c01 	mov.w	ip, #1
    e908:	f8c3 c008 	str.w	ip, [r3, #8]
    e90c:	605a      	str	r2, [r3, #4]
    e90e:	f8c3 c000 	str.w	ip, [r3]
    e912:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    e916:	2202      	movs	r2, #2
    e918:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    e91c:	9991      	ldr	r1, [sp, #580]	; 0x244
    e91e:	f005 fcf4 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e922:	e7ff      	b.n	e924 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c64>
    e924:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    e928:	f24d 1060 	movw	r0, #53600	; 0xd160
    e92c:	f2c0 0001 	movt	r0, #1
    e930:	6802      	ldr	r2, [r0, #0]
    e932:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    e936:	f003 f96d 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e93a:	e7ff      	b.n	e93c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c7c>
    e93c:	e7ff      	b.n	e93e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    e93e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e942:	280f      	cmp	r0, #15
    e944:	f201 8630 	bhi.w	105a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38e8>
    e948:	e7ff      	b.n	e94a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c8a>
    e94a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e94e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e952:	1842      	adds	r2, r0, r1
    e954:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e958:	09d2      	lsrs	r2, r2, #7
    e95a:	928e      	str	r2, [sp, #568]	; 0x238
    e95c:	e7ff      	b.n	e95e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c9e>
    e95e:	988e      	ldr	r0, [sp, #568]	; 0x238
    e960:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e964:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    e968:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e96c:	2a0f      	cmp	r2, #15
    e96e:	f201 8625 	bhi.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38fc>
    e972:	e7ff      	b.n	e974 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cb4>
    e974:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e978:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e97c:	1842      	adds	r2, r0, r1
    e97e:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e982:	2101      	movs	r1, #1
    e984:	f005 fd36 	bl	143f4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    e988:	908d      	str	r0, [sp, #564]	; 0x234
    e98a:	e7ff      	b.n	e98c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ccc>
    e98c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e990:	280f      	cmp	r0, #15
    e992:	f201 861d 	bhi.w	105d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3910>
    e996:	e7ff      	b.n	e998 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cd8>
    e998:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e99c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e9a0:	1842      	adds	r2, r0, r1
    e9a2:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    e9a4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e9a8:	f001 bc57 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e9ac:	2005      	movs	r0, #5
    e9ae:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    e9b2:	f64c 2000 	movw	r0, #51712	; 0xca00
    e9b6:	f2c0 0001 	movt	r0, #1
    e9ba:	6801      	ldr	r1, [r0, #0]
    e9bc:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    e9c0:	f005 fdde 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e9c4:	908c      	str	r0, [sp, #560]	; 0x230
    e9c6:	e01f      	b.n	ea08 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d48>
    e9c8:	2001      	movs	r0, #1
    e9ca:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    e9ce:	e015      	b.n	e9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d3c>
    e9d0:	2000      	movs	r0, #0
    e9d2:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    e9d6:	e011      	b.n	e9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d3c>
    e9d8:	2000      	movs	r0, #0
    e9da:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    e9de:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    e9e2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e9e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e9ea:	f002 fa0e 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e9ee:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    e9f2:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    e9f6:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    e9fa:	e00a      	b.n	ea12 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d52>
    e9fc:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    ea00:	07c0      	lsls	r0, r0, #31
    ea02:	2800      	cmp	r0, #0
    ea04:	d112      	bne.n	ea2c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d6c>
    ea06:	e055      	b.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1df4>
    ea08:	988c      	ldr	r0, [sp, #560]	; 0x230
    ea0a:	07c1      	lsls	r1, r0, #31
    ea0c:	2900      	cmp	r1, #0
    ea0e:	d1e3      	bne.n	e9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d18>
    ea10:	e7de      	b.n	e9d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d10>
    ea12:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ea16:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    ea1a:	f005 fdb1 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ea1e:	908b      	str	r0, [sp, #556]	; 0x22c
    ea20:	e7ff      	b.n	ea22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d62>
    ea22:	988b      	ldr	r0, [sp, #556]	; 0x22c
    ea24:	07c1      	lsls	r1, r0, #31
    ea26:	2900      	cmp	r1, #0
    ea28:	d1ce      	bne.n	e9c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d08>
    ea2a:	e7d1      	b.n	e9d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    ea2c:	f24d 00e0 	movw	r0, #53472	; 0xd0e0
    ea30:	f2c0 0001 	movt	r0, #1
    ea34:	6801      	ldr	r1, [r0, #0]
    ea36:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea3a:	f100 0212 	add.w	r2, r0, #18
    ea3e:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    ea42:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    ea46:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    ea4a:	f646 03eb 	movw	r3, #26859	; 0x68eb
    ea4e:	f2c0 0301 	movt	r3, #1
    ea52:	4610      	mov	r0, r2
    ea54:	918a      	str	r1, [sp, #552]	; 0x228
    ea56:	4619      	mov	r1, r3
    ea58:	f7fb fd1b 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ea5c:	9089      	str	r0, [sp, #548]	; 0x224
    ea5e:	9188      	str	r1, [sp, #544]	; 0x220
    ea60:	e7ff      	b.n	ea62 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1da2>
    ea62:	9889      	ldr	r0, [sp, #548]	; 0x224
    ea64:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    ea68:	9988      	ldr	r1, [sp, #544]	; 0x220
    ea6a:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    ea6e:	f64c 2248 	movw	r2, #51784	; 0xca48
    ea72:	f2c0 0201 	movt	r2, #1
    ea76:	6812      	ldr	r2, [r2, #0]
    ea78:	466b      	mov	r3, sp
    ea7a:	f04f 0c01 	mov.w	ip, #1
    ea7e:	f8c3 c008 	str.w	ip, [r3, #8]
    ea82:	605a      	str	r2, [r3, #4]
    ea84:	f8c3 c000 	str.w	ip, [r3]
    ea88:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ea8c:	2202      	movs	r2, #2
    ea8e:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    ea92:	998a      	ldr	r1, [sp, #552]	; 0x228
    ea94:	f005 fc39 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ea98:	e7ff      	b.n	ea9a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1dda>
    ea9a:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    ea9e:	f24d 1000 	movw	r0, #53504	; 0xd100
    eaa2:	f2c0 0001 	movt	r0, #1
    eaa6:	6802      	ldr	r2, [r0, #0]
    eaa8:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    eaac:	f003 f8b2 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eab0:	e7ff      	b.n	eab2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1df2>
    eab2:	e7ff      	b.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1df4>
                if self.v[x] != self.v[y] {
    eab4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eab8:	280f      	cmp	r0, #15
    eaba:	f201 8561 	bhi.w	10580 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38c0>
    eabe:	e7ff      	b.n	eac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e00>
    eac0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eac4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eac8:	1842      	adds	r2, r0, r1
    eaca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eace:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    ead2:	2b0f      	cmp	r3, #15
    ead4:	9287      	str	r2, [sp, #540]	; 0x21c
    ead6:	f201 855d 	bhi.w	10594 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38d4>
    eada:	e7ff      	b.n	eadc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e1c>
    eadc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eae0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eae4:	1842      	adds	r2, r0, r1
    eae6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eaea:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    eaec:	fa5f fc83 	uxtb.w	ip, r3
    eaf0:	4594      	cmp	ip, r2
    eaf2:	d006      	beq.n	eb02 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e42>
    eaf4:	e7ff      	b.n	eaf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e36>
                    self.next();
    eaf6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eafa:	f001 fee0 	bl	108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    eafe:	e7ff      	b.n	eb00 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e40>
                if self.v[x] != self.v[y] {
    eb00:	e7ff      	b.n	eb02 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e42>
        match (
    eb02:	f001 bbaa 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    eb06:	2005      	movs	r0, #5
    eb08:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    eb0c:	f64c 2000 	movw	r0, #51712	; 0xca00
    eb10:	f2c0 0001 	movt	r0, #1
    eb14:	6801      	ldr	r1, [r0, #0]
    eb16:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    eb1a:	f005 fd31 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb1e:	9086      	str	r0, [sp, #536]	; 0x218
    eb20:	e01f      	b.n	eb62 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ea2>
    eb22:	2001      	movs	r0, #1
    eb24:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    eb28:	e015      	b.n	eb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e96>
    eb2a:	2000      	movs	r0, #0
    eb2c:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    eb30:	e011      	b.n	eb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e96>
    eb32:	2000      	movs	r0, #0
    eb34:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    eb38:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    eb3c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eb40:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eb44:	f002 f961 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eb48:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    eb4c:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    eb50:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    eb54:	e00a      	b.n	eb6c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1eac>
    eb56:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    eb5a:	07c0      	lsls	r0, r0, #31
    eb5c:	2800      	cmp	r0, #0
    eb5e:	d112      	bne.n	eb86 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ec6>
    eb60:	e055      	b.n	ec0e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f4e>
    eb62:	9886      	ldr	r0, [sp, #536]	; 0x218
    eb64:	07c1      	lsls	r1, r0, #31
    eb66:	2900      	cmp	r1, #0
    eb68:	d1e3      	bne.n	eb32 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e72>
    eb6a:	e7de      	b.n	eb2a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e6a>
    eb6c:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    eb70:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    eb74:	f005 fd04 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb78:	9085      	str	r0, [sp, #532]	; 0x214
    eb7a:	e7ff      	b.n	eb7c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ebc>
    eb7c:	9885      	ldr	r0, [sp, #532]	; 0x214
    eb7e:	07c1      	lsls	r1, r0, #31
    eb80:	2900      	cmp	r1, #0
    eb82:	d1ce      	bne.n	eb22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e62>
    eb84:	e7d1      	b.n	eb2a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    eb86:	f24d 00a0 	movw	r0, #53408	; 0xd0a0
    eb8a:	f2c0 0001 	movt	r0, #1
    eb8e:	6801      	ldr	r1, [r0, #0]
    eb90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb94:	f100 0212 	add.w	r2, r0, #18
    eb98:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    eb9c:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    eba0:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    eba4:	f646 03eb 	movw	r3, #26859	; 0x68eb
    eba8:	f2c0 0301 	movt	r3, #1
    ebac:	4610      	mov	r0, r2
    ebae:	9184      	str	r1, [sp, #528]	; 0x210
    ebb0:	4619      	mov	r1, r3
    ebb2:	f7fb fc6e 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ebb6:	9083      	str	r0, [sp, #524]	; 0x20c
    ebb8:	9182      	str	r1, [sp, #520]	; 0x208
    ebba:	e7ff      	b.n	ebbc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1efc>
    ebbc:	9883      	ldr	r0, [sp, #524]	; 0x20c
    ebbe:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    ebc2:	9982      	ldr	r1, [sp, #520]	; 0x208
    ebc4:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    ebc8:	f64c 2248 	movw	r2, #51784	; 0xca48
    ebcc:	f2c0 0201 	movt	r2, #1
    ebd0:	6812      	ldr	r2, [r2, #0]
    ebd2:	466b      	mov	r3, sp
    ebd4:	f04f 0c01 	mov.w	ip, #1
    ebd8:	f8c3 c008 	str.w	ip, [r3, #8]
    ebdc:	605a      	str	r2, [r3, #4]
    ebde:	f8c3 c000 	str.w	ip, [r3]
    ebe2:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ebe6:	2202      	movs	r2, #2
    ebe8:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    ebec:	9984      	ldr	r1, [sp, #528]	; 0x210
    ebee:	f005 fb8c 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ebf2:	e7ff      	b.n	ebf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f34>
    ebf4:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    ebf8:	f24d 00c0 	movw	r0, #53440	; 0xd0c0
    ebfc:	f2c0 0001 	movt	r0, #1
    ec00:	6802      	ldr	r2, [r0, #0]
    ec02:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ec06:	f003 f805 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ec0a:	e7ff      	b.n	ec0c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f4c>
    ec0c:	e7ff      	b.n	ec0e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f4e>
                self.i = nnn;
    ec0e:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ec12:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ec16:	8208      	strh	r0, [r1, #16]
        match (
    ec18:	f001 bb1f 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    ec1c:	2005      	movs	r0, #5
    ec1e:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    ec22:	f64c 2000 	movw	r0, #51712	; 0xca00
    ec26:	f2c0 0001 	movt	r0, #1
    ec2a:	6801      	ldr	r1, [r0, #0]
    ec2c:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    ec30:	f005 fca6 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec34:	9081      	str	r0, [sp, #516]	; 0x204
    ec36:	e01f      	b.n	ec78 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fb8>
    ec38:	2001      	movs	r0, #1
    ec3a:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    ec3e:	e015      	b.n	ec6c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fac>
    ec40:	2000      	movs	r0, #0
    ec42:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    ec46:	e011      	b.n	ec6c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fac>
    ec48:	2000      	movs	r0, #0
    ec4a:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    ec4e:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    ec52:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ec56:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ec5a:	f002 f8d6 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ec5e:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    ec62:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    ec66:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    ec6a:	e00a      	b.n	ec82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fc2>
    ec6c:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    ec70:	07c0      	lsls	r0, r0, #31
    ec72:	2800      	cmp	r0, #0
    ec74:	d112      	bne.n	ec9c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fdc>
    ec76:	e055      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2064>
    ec78:	9881      	ldr	r0, [sp, #516]	; 0x204
    ec7a:	07c1      	lsls	r1, r0, #31
    ec7c:	2900      	cmp	r1, #0
    ec7e:	d1e3      	bne.n	ec48 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f88>
    ec80:	e7de      	b.n	ec40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f80>
    ec82:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    ec86:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    ec8a:	f005 fc79 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec8e:	9080      	str	r0, [sp, #512]	; 0x200
    ec90:	e7ff      	b.n	ec92 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fd2>
    ec92:	9880      	ldr	r0, [sp, #512]	; 0x200
    ec94:	07c1      	lsls	r1, r0, #31
    ec96:	2900      	cmp	r1, #0
    ec98:	d1ce      	bne.n	ec38 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f78>
    ec9a:	e7d1      	b.n	ec40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    ec9c:	f24d 0060 	movw	r0, #53344	; 0xd060
    eca0:	f2c0 0001 	movt	r0, #1
    eca4:	6801      	ldr	r1, [r0, #0]
    eca6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecaa:	f100 0212 	add.w	r2, r0, #18
    ecae:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    ecb2:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    ecb6:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    ecba:	f646 03eb 	movw	r3, #26859	; 0x68eb
    ecbe:	f2c0 0301 	movt	r3, #1
    ecc2:	4610      	mov	r0, r2
    ecc4:	917f      	str	r1, [sp, #508]	; 0x1fc
    ecc6:	4619      	mov	r1, r3
    ecc8:	f7fb fbe3 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    eccc:	907e      	str	r0, [sp, #504]	; 0x1f8
    ecce:	917d      	str	r1, [sp, #500]	; 0x1f4
    ecd0:	e7ff      	b.n	ecd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2012>
    ecd2:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    ecd4:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    ecd8:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    ecda:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    ecde:	f64c 2248 	movw	r2, #51784	; 0xca48
    ece2:	f2c0 0201 	movt	r2, #1
    ece6:	6812      	ldr	r2, [r2, #0]
    ece8:	466b      	mov	r3, sp
    ecea:	f04f 0c01 	mov.w	ip, #1
    ecee:	f8c3 c008 	str.w	ip, [r3, #8]
    ecf2:	605a      	str	r2, [r3, #4]
    ecf4:	f8c3 c000 	str.w	ip, [r3]
    ecf8:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ecfc:	2202      	movs	r2, #2
    ecfe:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    ed02:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    ed04:	f005 fb01 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ed08:	e7ff      	b.n	ed0a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x204a>
    ed0a:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    ed0e:	f24d 0080 	movw	r0, #53376	; 0xd080
    ed12:	f2c0 0001 	movt	r0, #1
    ed16:	6802      	ldr	r2, [r0, #0]
    ed18:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ed1c:	f002 ff7a 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ed20:	e7ff      	b.n	ed22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2062>
    ed22:	e7ff      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    ed24:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed28:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    ed2c:	f002 f860 	bl	10df0 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    ed30:	907c      	str	r0, [sp, #496]	; 0x1f0
    ed32:	e7ff      	b.n	ed34 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2074>
    ed34:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ed38:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    ed3a:	f005 fbe7 	bl	1450c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    ed3e:	907b      	str	r0, [sp, #492]	; 0x1ec
    ed40:	e7ff      	b.n	ed42 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2082>
    ed42:	2102      	movs	r1, #2
    ed44:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    ed46:	f005 fbf2 	bl	1452e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    ed4a:	907a      	str	r0, [sp, #488]	; 0x1e8
    ed4c:	e7ff      	b.n	ed4e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x208e>
    ed4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed52:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    ed54:	f001 fd70 	bl	10838 <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    ed58:	e7ff      	b.n	ed5a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x209a>
        match (
    ed5a:	f001 ba7e 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    ed5e:	2005      	movs	r0, #5
    ed60:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    ed64:	f64c 2000 	movw	r0, #51712	; 0xca00
    ed68:	f2c0 0001 	movt	r0, #1
    ed6c:	6801      	ldr	r1, [r0, #0]
    ed6e:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ed72:	f005 fc05 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed76:	9079      	str	r0, [sp, #484]	; 0x1e4
    ed78:	e01f      	b.n	edba <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20fa>
    ed7a:	2001      	movs	r0, #1
    ed7c:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    ed80:	e015      	b.n	edae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ee>
    ed82:	2000      	movs	r0, #0
    ed84:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    ed88:	e011      	b.n	edae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ee>
    ed8a:	2000      	movs	r0, #0
    ed8c:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    ed90:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    ed94:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ed98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed9c:	f002 f835 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eda0:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    eda4:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    eda8:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    edac:	e00a      	b.n	edc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2104>
    edae:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    edb2:	07c0      	lsls	r0, r0, #31
    edb4:	2800      	cmp	r0, #0
    edb6:	d112      	bne.n	edde <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x211e>
    edb8:	e055      	b.n	ee66 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21a6>
    edba:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    edbc:	07c1      	lsls	r1, r0, #31
    edbe:	2900      	cmp	r1, #0
    edc0:	d1e3      	bne.n	ed8a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ca>
    edc2:	e7de      	b.n	ed82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20c2>
    edc4:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    edc8:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    edcc:	f005 fbd8 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    edd0:	9078      	str	r0, [sp, #480]	; 0x1e0
    edd2:	e7ff      	b.n	edd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2114>
    edd4:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    edd6:	07c1      	lsls	r1, r0, #31
    edd8:	2900      	cmp	r1, #0
    edda:	d1ce      	bne.n	ed7a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ba>
    eddc:	e7d1      	b.n	ed82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    edde:	f24d 0010 	movw	r0, #53264	; 0xd010
    ede2:	f2c0 0001 	movt	r0, #1
    ede6:	6801      	ldr	r1, [r0, #0]
    ede8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    edec:	f100 0212 	add.w	r2, r0, #18
    edf0:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    edf4:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    edf8:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    edfc:	f646 03eb 	movw	r3, #26859	; 0x68eb
    ee00:	f2c0 0301 	movt	r3, #1
    ee04:	4610      	mov	r0, r2
    ee06:	9177      	str	r1, [sp, #476]	; 0x1dc
    ee08:	4619      	mov	r1, r3
    ee0a:	f7fb fb42 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ee0e:	9076      	str	r0, [sp, #472]	; 0x1d8
    ee10:	9175      	str	r1, [sp, #468]	; 0x1d4
    ee12:	e7ff      	b.n	ee14 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2154>
    ee14:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    ee16:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    ee1a:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    ee1c:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    ee20:	f64c 2248 	movw	r2, #51784	; 0xca48
    ee24:	f2c0 0201 	movt	r2, #1
    ee28:	6812      	ldr	r2, [r2, #0]
    ee2a:	466b      	mov	r3, sp
    ee2c:	f04f 0c01 	mov.w	ip, #1
    ee30:	f8c3 c008 	str.w	ip, [r3, #8]
    ee34:	605a      	str	r2, [r3, #4]
    ee36:	f8c3 c000 	str.w	ip, [r3]
    ee3a:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    ee3e:	2202      	movs	r2, #2
    ee40:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    ee44:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    ee46:	f005 fa60 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ee4a:	e7ff      	b.n	ee4c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x218c>
    ee4c:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    ee50:	f24d 0030 	movw	r0, #53296	; 0xd030
    ee54:	f2c0 0001 	movt	r0, #1
    ee58:	6802      	ldr	r2, [r0, #0]
    ee5a:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    ee5e:	f002 fed9 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ee62:	e7ff      	b.n	ee64 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21a4>
    ee64:	e7ff      	b.n	ee66 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21a6>
    ee66:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    ee6a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ee6e:	4408      	add	r0, r1
    ee70:	f7fd f920 	bl	c0b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h884056a56ab77b84E>
    ee74:	9074      	str	r0, [sp, #464]	; 0x1d0
    ee76:	e7ff      	b.n	ee78 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21b8>
    ee78:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ee7c:	280f      	cmp	r0, #15
    ee7e:	f201 8375 	bhi.w	1056c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38ac>
    ee82:	e7ff      	b.n	ee84 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21c4>
    ee84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee88:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee8c:	1842      	adds	r2, r0, r1
    ee8e:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    ee90:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    ee94:	ea03 0e0c 	and.w	lr, r3, ip
    ee98:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    ee9c:	f001 b9dd 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    eea0:	2005      	movs	r0, #5
    eea2:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    eea6:	f64c 2000 	movw	r0, #51712	; 0xca00
    eeaa:	f2c0 0001 	movt	r0, #1
    eeae:	6801      	ldr	r1, [r0, #0]
    eeb0:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    eeb4:	f005 fb64 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eeb8:	9073      	str	r0, [sp, #460]	; 0x1cc
    eeba:	e01f      	b.n	eefc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x223c>
    eebc:	2001      	movs	r0, #1
    eebe:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    eec2:	e015      	b.n	eef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2230>
    eec4:	2000      	movs	r0, #0
    eec6:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    eeca:	e011      	b.n	eef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2230>
    eecc:	2000      	movs	r0, #0
    eece:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    eed2:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    eed6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eeda:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eede:	f001 ff94 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eee2:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    eee6:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    eeea:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    eeee:	e00a      	b.n	ef06 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2246>
    eef0:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    eef4:	07c0      	lsls	r0, r0, #31
    eef6:	2800      	cmp	r0, #0
    eef8:	d112      	bne.n	ef20 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2260>
    eefa:	e055      	b.n	efa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22e8>
    eefc:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    eefe:	07c1      	lsls	r1, r0, #31
    ef00:	2900      	cmp	r1, #0
    ef02:	d1e3      	bne.n	eecc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x220c>
    ef04:	e7de      	b.n	eec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2204>
    ef06:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    ef0a:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    ef0e:	f005 fb37 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ef12:	9072      	str	r0, [sp, #456]	; 0x1c8
    ef14:	e7ff      	b.n	ef16 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2256>
    ef16:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    ef18:	07c1      	lsls	r1, r0, #31
    ef1a:	2900      	cmp	r1, #0
    ef1c:	d1ce      	bne.n	eebc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21fc>
    ef1e:	e7d1      	b.n	eec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    ef20:	f64c 60b4 	movw	r0, #52916	; 0xceb4
    ef24:	f2c0 0001 	movt	r0, #1
    ef28:	6801      	ldr	r1, [r0, #0]
    ef2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef2e:	f100 0212 	add.w	r2, r0, #18
    ef32:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    ef36:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    ef3a:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    ef3e:	f646 03eb 	movw	r3, #26859	; 0x68eb
    ef42:	f2c0 0301 	movt	r3, #1
    ef46:	4610      	mov	r0, r2
    ef48:	9171      	str	r1, [sp, #452]	; 0x1c4
    ef4a:	4619      	mov	r1, r3
    ef4c:	f7fb faa1 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ef50:	9070      	str	r0, [sp, #448]	; 0x1c0
    ef52:	916f      	str	r1, [sp, #444]	; 0x1bc
    ef54:	e7ff      	b.n	ef56 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2296>
    ef56:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    ef58:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    ef5c:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    ef5e:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    ef62:	f64c 2248 	movw	r2, #51784	; 0xca48
    ef66:	f2c0 0201 	movt	r2, #1
    ef6a:	6812      	ldr	r2, [r2, #0]
    ef6c:	466b      	mov	r3, sp
    ef6e:	f04f 0c01 	mov.w	ip, #1
    ef72:	f8c3 c008 	str.w	ip, [r3, #8]
    ef76:	605a      	str	r2, [r3, #4]
    ef78:	f8c3 c000 	str.w	ip, [r3]
    ef7c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    ef80:	2202      	movs	r2, #2
    ef82:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    ef86:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    ef88:	f005 f9bf 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ef8c:	e7ff      	b.n	ef8e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22ce>
    ef8e:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    ef92:	f64c 60d4 	movw	r0, #52948	; 0xced4
    ef96:	f2c0 0001 	movt	r0, #1
    ef9a:	6802      	ldr	r2, [r0, #0]
    ef9c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    efa0:	f002 fe38 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    efa4:	e7ff      	b.n	efa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22e6>
    efa6:	e7ff      	b.n	efa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22e8>
                let basex = self.v[x] as usize;
    efa8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    efac:	280f      	cmp	r0, #15
    efae:	f201 826b 	bhi.w	10488 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37c8>
    efb2:	e7ff      	b.n	efb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22f4>
    efb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    efb8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    efbc:	1842      	adds	r2, r0, r1
    efbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    efc2:	4613      	mov	r3, r2
    efc4:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    efc8:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    efcc:	2a0f      	cmp	r2, #15
    efce:	936e      	str	r3, [sp, #440]	; 0x1b8
    efd0:	f201 8264 	bhi.w	1049c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37dc>
    efd4:	e7ff      	b.n	efd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2316>
    efd6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    efda:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    efde:	1842      	adds	r2, r0, r1
    efe0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    efe4:	4613      	mov	r3, r2
    efe6:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    efea:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    efee:	4410      	add	r0, r2
    eff0:	936d      	str	r3, [sp, #436]	; 0x1b4
    eff2:	f7fd fa66 	bl	c4c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE>
    eff6:	906c      	str	r0, [sp, #432]	; 0x1b0
    eff8:	916b      	str	r1, [sp, #428]	; 0x1ac
    effa:	e7ff      	b.n	effc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x233c>
    effc:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    effe:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    f002:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f004:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    f008:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    f00a:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    f00e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    f012:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    f016:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    f01a:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    f01e:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    f022:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    f026:	f002 fb82 	bl	1172e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f02a:	906a      	str	r0, [sp, #424]	; 0x1a8
    f02c:	9169      	str	r1, [sp, #420]	; 0x1a4
    f02e:	e7ff      	b.n	f030 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2370>
    f030:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    f032:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    f036:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    f038:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    f03c:	e7ff      	b.n	f03e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x237e>
    f03e:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    f042:	f002 fae9 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f046:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f04a:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f04e:	e7ff      	b.n	f050 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2390>
    f050:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f054:	2800      	cmp	r0, #0
    f056:	d001      	beq.n	f05c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x239c>
    f058:	e7ff      	b.n	f05a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x239a>
    f05a:	e002      	b.n	f062 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x23a2>
        match (
    f05c:	f001 b8fd 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for y in 0..n {
    f060:	defe      	udf	#254	; 0xfe
    f062:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f066:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f06a:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f06e:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f072:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f076:	8a0a      	ldrh	r2, [r1, #16]
    f078:	1813      	adds	r3, r2, r0
    f07a:	469c      	mov	ip, r3
    f07c:	4293      	cmp	r3, r2
    f07e:	9068      	str	r0, [sp, #416]	; 0x1a0
    f080:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f084:	f0c1 8214 	bcc.w	104b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37f0>
    f088:	e7ff      	b.n	f08a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x23ca>
    f08a:	2000      	movs	r0, #0
    f08c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f08e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f092:	f041 8219 	bne.w	104c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3808>
    f096:	e7ff      	b.n	f098 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x23d8>
    f098:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f09c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f09e:	1842      	adds	r2, r0, r1
    f0a0:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f0a4:	4613      	mov	r3, r2
    f0a6:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f0aa:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f0ac:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f0b0:	eb02 0e0c 	add.w	lr, r2, ip
    f0b4:	4674      	mov	r4, lr
    f0b6:	4596      	cmp	lr, r2
    f0b8:	9366      	str	r3, [sp, #408]	; 0x198
    f0ba:	9465      	str	r4, [sp, #404]	; 0x194
    f0bc:	f0c1 820e 	bcc.w	104dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x381c>
    f0c0:	e7ff      	b.n	f0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2402>
    f0c2:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f0c4:	2800      	cmp	r0, #0
    f0c6:	f001 8215 	beq.w	104f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3834>
    f0ca:	e7ff      	b.n	f0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x240c>
    f0cc:	9865      	ldr	r0, [sp, #404]	; 0x194
    f0ce:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f0d0:	fbb0 f2f1 	udiv	r2, r0, r1
    f0d4:	fb02 0211 	mls	r2, r2, r1, r0
    f0d8:	4613      	mov	r3, r2
    f0da:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f0de:	2200      	movs	r2, #0
                    for x in 0..8 {
    f0e0:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f0e4:	2208      	movs	r2, #8
    f0e6:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f0ea:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f0ee:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f0f2:	9364      	str	r3, [sp, #400]	; 0x190
    f0f4:	f002 fb1b 	bl	1172e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f0f8:	9063      	str	r0, [sp, #396]	; 0x18c
    f0fa:	9162      	str	r1, [sp, #392]	; 0x188
    f0fc:	e7ff      	b.n	f0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x243e>
    f0fe:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f100:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f104:	9962      	ldr	r1, [sp, #392]	; 0x188
    f106:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f10a:	e7ff      	b.n	f10c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x244c>
    f10c:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f110:	f002 fa82 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f114:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f118:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f11c:	e7ff      	b.n	f11e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x245e>
    f11e:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f122:	2800      	cmp	r0, #0
    f124:	d001      	beq.n	f12a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x246a>
    f126:	e7ff      	b.n	f128 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2468>
    f128:	e001      	b.n	f12e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x246e>
                for y in 0..n {
    f12a:	e788      	b.n	f03e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x237e>
                    for x in 0..8 {
    f12c:	defe      	udf	#254	; 0xfe
    f12e:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f132:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f136:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f13a:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f13e:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f140:	1842      	adds	r2, r0, r1
    f142:	4613      	mov	r3, r2
    f144:	4282      	cmp	r2, r0
    f146:	9061      	str	r0, [sp, #388]	; 0x184
    f148:	9360      	str	r3, [sp, #384]	; 0x180
    f14a:	f0c1 81df 	bcc.w	1050c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x384c>
    f14e:	e7ff      	b.n	f150 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2490>
    f150:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f152:	2800      	cmp	r0, #0
    f154:	f001 81e6 	beq.w	10524 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3864>
    f158:	e7ff      	b.n	f15a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x249a>
    f15a:	9860      	ldr	r0, [sp, #384]	; 0x180
    f15c:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f15e:	fbb0 f2f1 	udiv	r2, r0, r1
    f162:	fb02 0211 	mls	r2, r2, r1, r0
    f166:	4613      	mov	r3, r2
    f168:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f16c:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f16e:	f1c2 0c07 	rsb	ip, r2, #7
    f172:	f04f 0e07 	mov.w	lr, #7
    f176:	4596      	cmp	lr, r2
    f178:	935f      	str	r3, [sp, #380]	; 0x17c
    f17a:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f17e:	f0c1 81dd 	bcc.w	1053c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x387c>
    f182:	e7ff      	b.n	f184 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x24c4>
    f184:	985e      	ldr	r0, [sp, #376]	; 0x178
    f186:	f000 0107 	and.w	r1, r0, #7
    f18a:	2201      	movs	r2, #1
    f18c:	fa02 f101 	lsl.w	r1, r2, r1
    f190:	08c2      	lsrs	r2, r0, #3
    f192:	2a00      	cmp	r2, #0
    f194:	915d      	str	r1, [sp, #372]	; 0x174
    f196:	f041 81dd 	bne.w	10554 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3894>
    f19a:	e7ff      	b.n	f19c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x24dc>
    f19c:	9866      	ldr	r0, [sp, #408]	; 0x198
    f19e:	995d      	ldr	r1, [sp, #372]	; 0x174
    f1a0:	ea00 0201 	and.w	r2, r0, r1
    f1a4:	b2d2      	uxtb	r2, r2
    f1a6:	2a00      	cmp	r2, #0
    f1a8:	bf18      	it	ne
    f1aa:	2201      	movne	r2, #1
    f1ac:	4613      	mov	r3, r2
    f1ae:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    f1b2:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    f1b6:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    f1ba:	eb0c 0002 	add.w	r0, ip, r2
    f1be:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f1c0:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f1c2:	935c      	str	r3, [sp, #368]	; 0x170
    f1c4:	f7fd f8e8 	bl	c398 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE>
    f1c8:	4601      	mov	r1, r0
    f1ca:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f1ce:	915b      	str	r1, [sp, #364]	; 0x16c
    f1d0:	e7ff      	b.n	f1d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    f1d2:	985c      	ldr	r0, [sp, #368]	; 0x170
    f1d4:	07c1      	lsls	r1, r0, #31
    f1d6:	2900      	cmp	r1, #0
    f1d8:	d108      	bne.n	f1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x252c>
    f1da:	e003      	b.n	f1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2524>
    f1dc:	2001      	movs	r0, #1
    f1de:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f1e2:	e008      	b.n	f1f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2536>
    f1e4:	2000      	movs	r0, #0
    f1e6:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f1ea:	e004      	b.n	f1f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2536>
    f1ec:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f1ee:	07c1      	lsls	r1, r0, #31
    f1f0:	2900      	cmp	r1, #0
    f1f2:	d1f3      	bne.n	f1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x251c>
    f1f4:	e7f6      	b.n	f1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2524>
    f1f6:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f1fa:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f1fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f202:	4310      	orrs	r0, r2
    f204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f208:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f20c:	4408      	add	r0, r1
    f20e:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    f210:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    f212:	ea82 0c03 	eor.w	ip, r2, r3
    f216:	f00c 0301 	and.w	r3, ip, #1
    f21a:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f21c:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f21e:	f7fc ff56 	bl	c0ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE>
    f222:	e7ff      	b.n	f224 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2564>
                    for x in 0..8 {
    f224:	e772      	b.n	f10c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x244c>
    f226:	2005      	movs	r0, #5
    f228:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f22c:	f64c 2000 	movw	r0, #51712	; 0xca00
    f230:	f2c0 0001 	movt	r0, #1
    f234:	6801      	ldr	r1, [r0, #0]
    f236:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f23a:	f005 f9a1 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f23e:	905a      	str	r0, [sp, #360]	; 0x168
    f240:	e01f      	b.n	f282 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25c2>
    f242:	2001      	movs	r0, #1
    f244:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f248:	e015      	b.n	f276 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25b6>
    f24a:	2000      	movs	r0, #0
    f24c:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f250:	e011      	b.n	f276 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25b6>
    f252:	2000      	movs	r0, #0
    f254:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f258:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f25c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f260:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f264:	f001 fdd1 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f268:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f26c:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f270:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f274:	e00a      	b.n	f28c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25cc>
    f276:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f27a:	07c0      	lsls	r0, r0, #31
    f27c:	2800      	cmp	r0, #0
    f27e:	d112      	bne.n	f2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25e6>
    f280:	e055      	b.n	f32e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x266e>
    f282:	985a      	ldr	r0, [sp, #360]	; 0x168
    f284:	07c1      	lsls	r1, r0, #31
    f286:	2900      	cmp	r1, #0
    f288:	d1e3      	bne.n	f252 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2592>
    f28a:	e7de      	b.n	f24a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x258a>
    f28c:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f290:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f294:	f005 f974 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f298:	9059      	str	r0, [sp, #356]	; 0x164
    f29a:	e7ff      	b.n	f29c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25dc>
    f29c:	9859      	ldr	r0, [sp, #356]	; 0x164
    f29e:	07c1      	lsls	r1, r0, #31
    f2a0:	2900      	cmp	r1, #0
    f2a2:	d1ce      	bne.n	f242 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2582>
    f2a4:	e7d1      	b.n	f24a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    f2a6:	f64c 6060 	movw	r0, #52832	; 0xce60
    f2aa:	f2c0 0001 	movt	r0, #1
    f2ae:	6801      	ldr	r1, [r0, #0]
    f2b0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2b4:	f100 0212 	add.w	r2, r0, #18
    f2b8:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f2bc:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f2c0:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f2c4:	f646 03eb 	movw	r3, #26859	; 0x68eb
    f2c8:	f2c0 0301 	movt	r3, #1
    f2cc:	4610      	mov	r0, r2
    f2ce:	9158      	str	r1, [sp, #352]	; 0x160
    f2d0:	4619      	mov	r1, r3
    f2d2:	f7fb f8de 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f2d6:	9057      	str	r0, [sp, #348]	; 0x15c
    f2d8:	9156      	str	r1, [sp, #344]	; 0x158
    f2da:	e7ff      	b.n	f2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x261c>
    f2dc:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f2de:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f2e2:	9956      	ldr	r1, [sp, #344]	; 0x158
    f2e4:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f2e8:	f64c 2248 	movw	r2, #51784	; 0xca48
    f2ec:	f2c0 0201 	movt	r2, #1
    f2f0:	6812      	ldr	r2, [r2, #0]
    f2f2:	466b      	mov	r3, sp
    f2f4:	f04f 0c01 	mov.w	ip, #1
    f2f8:	f8c3 c008 	str.w	ip, [r3, #8]
    f2fc:	605a      	str	r2, [r3, #4]
    f2fe:	f8c3 c000 	str.w	ip, [r3]
    f302:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f306:	2202      	movs	r2, #2
    f308:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f30c:	9958      	ldr	r1, [sp, #352]	; 0x160
    f30e:	f004 fffc 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f312:	e7ff      	b.n	f314 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2654>
    f314:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f318:	f64c 6080 	movw	r0, #52864	; 0xce80
    f31c:	f2c0 0001 	movt	r0, #1
    f320:	6802      	ldr	r2, [r0, #0]
    f322:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f326:	f002 fc75 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f32a:	e7ff      	b.n	f32c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x266c>
    f32c:	e7ff      	b.n	f32e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x266e>
    f32e:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    f332:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f336:	4408      	add	r0, r1
    f338:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f33c:	2a0f      	cmp	r2, #15
    f33e:	9055      	str	r0, [sp, #340]	; 0x154
    f340:	f201 8098 	bhi.w	10474 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37b4>
    f344:	e7ff      	b.n	f346 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2686>
    f346:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f34a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f34e:	1842      	adds	r2, r0, r1
    f350:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f354:	9855      	ldr	r0, [sp, #340]	; 0x154
    f356:	f7fc feb2 	bl	c0be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>
    f35a:	9054      	str	r0, [sp, #336]	; 0x150
    f35c:	e7ff      	b.n	f35e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x269e>
    f35e:	9854      	ldr	r0, [sp, #336]	; 0x150
    f360:	07c1      	lsls	r1, r0, #31
    f362:	2900      	cmp	r1, #0
    f364:	d006      	beq.n	f374 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b4>
    f366:	e7ff      	b.n	f368 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26a8>
                    self.next();
    f368:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f36c:	f001 faa7 	bl	108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    f370:	e7ff      	b.n	f372 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b2>
                if self.hw.key(self.v[x]) {
    f372:	e7ff      	b.n	f374 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b4>
        match (
    f374:	f000 bf71 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f378:	2005      	movs	r0, #5
    f37a:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f37e:	f64c 2000 	movw	r0, #51712	; 0xca00
    f382:	f2c0 0001 	movt	r0, #1
    f386:	6801      	ldr	r1, [r0, #0]
    f388:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f38c:	f005 f8f8 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f390:	9053      	str	r0, [sp, #332]	; 0x14c
    f392:	e01f      	b.n	f3d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2714>
    f394:	2001      	movs	r0, #1
    f396:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f39a:	e015      	b.n	f3c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2708>
    f39c:	2000      	movs	r0, #0
    f39e:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f3a2:	e011      	b.n	f3c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2708>
    f3a4:	2000      	movs	r0, #0
    f3a6:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f3aa:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f3ae:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f3b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f3b6:	f001 fd28 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f3ba:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f3be:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f3c2:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f3c6:	e00a      	b.n	f3de <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x271e>
    f3c8:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f3cc:	07c0      	lsls	r0, r0, #31
    f3ce:	2800      	cmp	r0, #0
    f3d0:	d112      	bne.n	f3f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2738>
    f3d2:	e055      	b.n	f480 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27c0>
    f3d4:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f3d6:	07c1      	lsls	r1, r0, #31
    f3d8:	2900      	cmp	r1, #0
    f3da:	d1e3      	bne.n	f3a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26e4>
    f3dc:	e7de      	b.n	f39c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26dc>
    f3de:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f3e2:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f3e6:	f005 f8cb 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f3ea:	9052      	str	r0, [sp, #328]	; 0x148
    f3ec:	e7ff      	b.n	f3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x272e>
    f3ee:	9852      	ldr	r0, [sp, #328]	; 0x148
    f3f0:	07c1      	lsls	r1, r0, #31
    f3f2:	2900      	cmp	r1, #0
    f3f4:	d1ce      	bne.n	f394 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26d4>
    f3f6:	e7d1      	b.n	f39c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f3f8:	f64c 601c 	movw	r0, #52764	; 0xce1c
    f3fc:	f2c0 0001 	movt	r0, #1
    f400:	6801      	ldr	r1, [r0, #0]
    f402:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f406:	f100 0212 	add.w	r2, r0, #18
    f40a:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    f40e:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    f412:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    f416:	f646 03eb 	movw	r3, #26859	; 0x68eb
    f41a:	f2c0 0301 	movt	r3, #1
    f41e:	4610      	mov	r0, r2
    f420:	9151      	str	r1, [sp, #324]	; 0x144
    f422:	4619      	mov	r1, r3
    f424:	f7fb f835 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f428:	9050      	str	r0, [sp, #320]	; 0x140
    f42a:	914f      	str	r1, [sp, #316]	; 0x13c
    f42c:	e7ff      	b.n	f42e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x276e>
    f42e:	9850      	ldr	r0, [sp, #320]	; 0x140
    f430:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    f434:	994f      	ldr	r1, [sp, #316]	; 0x13c
    f436:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    f43a:	f64c 2248 	movw	r2, #51784	; 0xca48
    f43e:	f2c0 0201 	movt	r2, #1
    f442:	6812      	ldr	r2, [r2, #0]
    f444:	466b      	mov	r3, sp
    f446:	f04f 0c01 	mov.w	ip, #1
    f44a:	f8c3 c008 	str.w	ip, [r3, #8]
    f44e:	605a      	str	r2, [r3, #4]
    f450:	f8c3 c000 	str.w	ip, [r3]
    f454:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f458:	2202      	movs	r2, #2
    f45a:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    f45e:	9951      	ldr	r1, [sp, #324]	; 0x144
    f460:	f004 ff53 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f464:	e7ff      	b.n	f466 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27a6>
    f466:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    f46a:	f64c 603c 	movw	r0, #52796	; 0xce3c
    f46e:	f2c0 0001 	movt	r0, #1
    f472:	6802      	ldr	r2, [r0, #0]
    f474:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f478:	f002 fbcc 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f47c:	e7ff      	b.n	f47e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27be>
    f47e:	e7ff      	b.n	f480 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27c0>
    f480:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    f484:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f488:	4408      	add	r0, r1
    f48a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f48e:	2a0f      	cmp	r2, #15
    f490:	904e      	str	r0, [sp, #312]	; 0x138
    f492:	f200 87e5 	bhi.w	10460 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37a0>
    f496:	e7ff      	b.n	f498 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27d8>
    f498:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f49c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f4a0:	1842      	adds	r2, r0, r1
    f4a2:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f4a6:	984e      	ldr	r0, [sp, #312]	; 0x138
    f4a8:	f7fc fe09 	bl	c0be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>
    f4ac:	904d      	str	r0, [sp, #308]	; 0x134
    f4ae:	e7ff      	b.n	f4b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27f0>
    f4b0:	984d      	ldr	r0, [sp, #308]	; 0x134
    f4b2:	07c1      	lsls	r1, r0, #31
    f4b4:	2900      	cmp	r1, #0
    f4b6:	d106      	bne.n	f4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2806>
    f4b8:	e7ff      	b.n	f4ba <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27fa>
                    self.next();
    f4ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f4be:	f001 f9fe 	bl	108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    f4c2:	e7ff      	b.n	f4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2804>
                if !self.hw.key(self.v[x]) {
    f4c4:	e7ff      	b.n	f4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2806>
        match (
    f4c6:	f000 bec8 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f4ca:	2005      	movs	r0, #5
    f4cc:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    f4d0:	f64c 2000 	movw	r0, #51712	; 0xca00
    f4d4:	f2c0 0001 	movt	r0, #1
    f4d8:	6801      	ldr	r1, [r0, #0]
    f4da:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f4de:	f005 f84f 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f4e2:	904c      	str	r0, [sp, #304]	; 0x130
    f4e4:	e01f      	b.n	f526 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2866>
    f4e6:	2001      	movs	r0, #1
    f4e8:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f4ec:	e015      	b.n	f51a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x285a>
    f4ee:	2000      	movs	r0, #0
    f4f0:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f4f4:	e011      	b.n	f51a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x285a>
    f4f6:	2000      	movs	r0, #0
    f4f8:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    f4fc:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    f500:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f504:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f508:	f001 fc7f 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f50c:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    f510:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    f514:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    f518:	e00a      	b.n	f530 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2870>
    f51a:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    f51e:	07c0      	lsls	r0, r0, #31
    f520:	2800      	cmp	r0, #0
    f522:	d112      	bne.n	f54a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x288a>
    f524:	e055      	b.n	f5d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2912>
    f526:	984c      	ldr	r0, [sp, #304]	; 0x130
    f528:	07c1      	lsls	r1, r0, #31
    f52a:	2900      	cmp	r1, #0
    f52c:	d1e3      	bne.n	f4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2836>
    f52e:	e7de      	b.n	f4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x282e>
    f530:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f534:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    f538:	f005 f822 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f53c:	904b      	str	r0, [sp, #300]	; 0x12c
    f53e:	e7ff      	b.n	f540 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2880>
    f540:	984b      	ldr	r0, [sp, #300]	; 0x12c
    f542:	07c1      	lsls	r1, r0, #31
    f544:	2900      	cmp	r1, #0
    f546:	d1ce      	bne.n	f4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2826>
    f548:	e7d1      	b.n	f4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    f54a:	f64c 50cc 	movw	r0, #52684	; 0xcdcc
    f54e:	f2c0 0001 	movt	r0, #1
    f552:	6801      	ldr	r1, [r0, #0]
    f554:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f558:	f100 0212 	add.w	r2, r0, #18
    f55c:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    f560:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    f564:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    f568:	f646 03eb 	movw	r3, #26859	; 0x68eb
    f56c:	f2c0 0301 	movt	r3, #1
    f570:	4610      	mov	r0, r2
    f572:	914a      	str	r1, [sp, #296]	; 0x128
    f574:	4619      	mov	r1, r3
    f576:	f7fa ff8c 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f57a:	9049      	str	r0, [sp, #292]	; 0x124
    f57c:	9148      	str	r1, [sp, #288]	; 0x120
    f57e:	e7ff      	b.n	f580 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x28c0>
    f580:	9849      	ldr	r0, [sp, #292]	; 0x124
    f582:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    f586:	9948      	ldr	r1, [sp, #288]	; 0x120
    f588:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    f58c:	f64c 2248 	movw	r2, #51784	; 0xca48
    f590:	f2c0 0201 	movt	r2, #1
    f594:	6812      	ldr	r2, [r2, #0]
    f596:	466b      	mov	r3, sp
    f598:	f04f 0c01 	mov.w	ip, #1
    f59c:	f8c3 c008 	str.w	ip, [r3, #8]
    f5a0:	605a      	str	r2, [r3, #4]
    f5a2:	f8c3 c000 	str.w	ip, [r3]
    f5a6:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f5aa:	2202      	movs	r2, #2
    f5ac:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    f5b0:	994a      	ldr	r1, [sp, #296]	; 0x128
    f5b2:	f004 feaa 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f5b6:	e7ff      	b.n	f5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x28f8>
    f5b8:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    f5bc:	f64c 50ec 	movw	r0, #52716	; 0xcdec
    f5c0:	f2c0 0001 	movt	r0, #1
    f5c4:	6802      	ldr	r2, [r0, #0]
    f5c6:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f5ca:	f002 fb23 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f5ce:	e7ff      	b.n	f5d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2910>
    f5d0:	e7ff      	b.n	f5d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2912>
                self.v[x] = self.dt;
    f5d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f5d6:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    f5da:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f5de:	2a0f      	cmp	r2, #15
    f5e0:	9147      	str	r1, [sp, #284]	; 0x11c
    f5e2:	f200 8733 	bhi.w	1044c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x378c>
    f5e6:	e7ff      	b.n	f5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2928>
    f5e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f5ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f5f0:	1842      	adds	r2, r0, r1
    f5f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    f5f4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    f5f8:	f000 be2f 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f5fc:	2005      	movs	r0, #5
    f5fe:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    f602:	f64c 2000 	movw	r0, #51712	; 0xca00
    f606:	f2c0 0001 	movt	r0, #1
    f60a:	6801      	ldr	r1, [r0, #0]
    f60c:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f610:	f004 ffb6 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f614:	9046      	str	r0, [sp, #280]	; 0x118
    f616:	e01f      	b.n	f658 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2998>
    f618:	2001      	movs	r0, #1
    f61a:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f61e:	e015      	b.n	f64c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x298c>
    f620:	2000      	movs	r0, #0
    f622:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f626:	e011      	b.n	f64c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x298c>
    f628:	2000      	movs	r0, #0
    f62a:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    f62e:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    f632:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f636:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f63a:	f001 fbe6 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f63e:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    f642:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    f646:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    f64a:	e00a      	b.n	f662 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29a2>
    f64c:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    f650:	07c0      	lsls	r0, r0, #31
    f652:	2800      	cmp	r0, #0
    f654:	d112      	bne.n	f67c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29bc>
    f656:	e055      	b.n	f704 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a44>
    f658:	9846      	ldr	r0, [sp, #280]	; 0x118
    f65a:	07c1      	lsls	r1, r0, #31
    f65c:	2900      	cmp	r1, #0
    f65e:	d1e3      	bne.n	f628 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2968>
    f660:	e7de      	b.n	f620 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2960>
    f662:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f666:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    f66a:	f004 ff89 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f66e:	9045      	str	r0, [sp, #276]	; 0x114
    f670:	e7ff      	b.n	f672 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29b2>
    f672:	9845      	ldr	r0, [sp, #276]	; 0x114
    f674:	07c1      	lsls	r1, r0, #31
    f676:	2900      	cmp	r1, #0
    f678:	d1ce      	bne.n	f618 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2958>
    f67a:	e7d1      	b.n	f620 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    f67c:	f64c 507c 	movw	r0, #52604	; 0xcd7c
    f680:	f2c0 0001 	movt	r0, #1
    f684:	6801      	ldr	r1, [r0, #0]
    f686:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f68a:	f100 0212 	add.w	r2, r0, #18
    f68e:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    f692:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    f696:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    f69a:	f646 03eb 	movw	r3, #26859	; 0x68eb
    f69e:	f2c0 0301 	movt	r3, #1
    f6a2:	4610      	mov	r0, r2
    f6a4:	9144      	str	r1, [sp, #272]	; 0x110
    f6a6:	4619      	mov	r1, r3
    f6a8:	f7fa fef3 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f6ac:	9043      	str	r0, [sp, #268]	; 0x10c
    f6ae:	9142      	str	r1, [sp, #264]	; 0x108
    f6b0:	e7ff      	b.n	f6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29f2>
    f6b2:	9843      	ldr	r0, [sp, #268]	; 0x10c
    f6b4:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    f6b8:	9942      	ldr	r1, [sp, #264]	; 0x108
    f6ba:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    f6be:	f64c 2248 	movw	r2, #51784	; 0xca48
    f6c2:	f2c0 0201 	movt	r2, #1
    f6c6:	6812      	ldr	r2, [r2, #0]
    f6c8:	466b      	mov	r3, sp
    f6ca:	f04f 0c01 	mov.w	ip, #1
    f6ce:	f8c3 c008 	str.w	ip, [r3, #8]
    f6d2:	605a      	str	r2, [r3, #4]
    f6d4:	f8c3 c000 	str.w	ip, [r3]
    f6d8:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    f6dc:	2202      	movs	r2, #2
    f6de:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    f6e2:	9944      	ldr	r1, [sp, #272]	; 0x110
    f6e4:	f004 fe11 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f6e8:	e7ff      	b.n	f6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a2a>
    f6ea:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    f6ee:	f64c 509c 	movw	r0, #52636	; 0xcd9c
    f6f2:	f2c0 0001 	movt	r0, #1
    f6f6:	6802      	ldr	r2, [r0, #0]
    f6f8:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    f6fc:	f002 fa8a 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f700:	e7ff      	b.n	f702 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a42>
    f702:	e7ff      	b.n	f704 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a44>
                self.v[x] = self.waitkey();
    f704:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f708:	f001 fa2d 	bl	10b66 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E>
    f70c:	9041      	str	r0, [sp, #260]	; 0x104
    f70e:	e7ff      	b.n	f710 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a50>
    f710:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f714:	280f      	cmp	r0, #15
    f716:	f200 868f 	bhi.w	10438 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3778>
    f71a:	e7ff      	b.n	f71c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a5c>
    f71c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f720:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f724:	1842      	adds	r2, r0, r1
    f726:	9b41      	ldr	r3, [sp, #260]	; 0x104
    f728:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    f72c:	f000 bd95 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f730:	2005      	movs	r0, #5
    f732:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    f736:	f64c 2000 	movw	r0, #51712	; 0xca00
    f73a:	f2c0 0001 	movt	r0, #1
    f73e:	6801      	ldr	r1, [r0, #0]
    f740:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    f744:	f004 ff1c 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f748:	9040      	str	r0, [sp, #256]	; 0x100
    f74a:	e01f      	b.n	f78c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2acc>
    f74c:	2001      	movs	r0, #1
    f74e:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    f752:	e015      	b.n	f780 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ac0>
    f754:	2000      	movs	r0, #0
    f756:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    f75a:	e011      	b.n	f780 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ac0>
    f75c:	2000      	movs	r0, #0
    f75e:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    f762:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    f766:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f76a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f76e:	f001 fb4c 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f772:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    f776:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    f77a:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    f77e:	e00a      	b.n	f796 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ad6>
    f780:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    f784:	07c0      	lsls	r0, r0, #31
    f786:	2800      	cmp	r0, #0
    f788:	d112      	bne.n	f7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2af0>
    f78a:	e055      	b.n	f838 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b78>
    f78c:	9840      	ldr	r0, [sp, #256]	; 0x100
    f78e:	07c1      	lsls	r1, r0, #31
    f790:	2900      	cmp	r1, #0
    f792:	d1e3      	bne.n	f75c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a9c>
    f794:	e7de      	b.n	f754 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a94>
    f796:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    f79a:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    f79e:	f004 feef 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f7a2:	903f      	str	r0, [sp, #252]	; 0xfc
    f7a4:	e7ff      	b.n	f7a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ae6>
    f7a6:	983f      	ldr	r0, [sp, #252]	; 0xfc
    f7a8:	07c1      	lsls	r1, r0, #31
    f7aa:	2900      	cmp	r1, #0
    f7ac:	d1ce      	bne.n	f74c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a8c>
    f7ae:	e7d1      	b.n	f754 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    f7b0:	f64c 502c 	movw	r0, #52524	; 0xcd2c
    f7b4:	f2c0 0001 	movt	r0, #1
    f7b8:	6801      	ldr	r1, [r0, #0]
    f7ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f7be:	f100 0212 	add.w	r2, r0, #18
    f7c2:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    f7c6:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    f7ca:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    f7ce:	f646 03eb 	movw	r3, #26859	; 0x68eb
    f7d2:	f2c0 0301 	movt	r3, #1
    f7d6:	4610      	mov	r0, r2
    f7d8:	913e      	str	r1, [sp, #248]	; 0xf8
    f7da:	4619      	mov	r1, r3
    f7dc:	f7fa fe59 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f7e0:	903d      	str	r0, [sp, #244]	; 0xf4
    f7e2:	913c      	str	r1, [sp, #240]	; 0xf0
    f7e4:	e7ff      	b.n	f7e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b26>
    f7e6:	983d      	ldr	r0, [sp, #244]	; 0xf4
    f7e8:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    f7ec:	993c      	ldr	r1, [sp, #240]	; 0xf0
    f7ee:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    f7f2:	f64c 2248 	movw	r2, #51784	; 0xca48
    f7f6:	f2c0 0201 	movt	r2, #1
    f7fa:	6812      	ldr	r2, [r2, #0]
    f7fc:	466b      	mov	r3, sp
    f7fe:	f04f 0c01 	mov.w	ip, #1
    f802:	f8c3 c008 	str.w	ip, [r3, #8]
    f806:	605a      	str	r2, [r3, #4]
    f808:	f8c3 c000 	str.w	ip, [r3]
    f80c:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    f810:	2202      	movs	r2, #2
    f812:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    f816:	993e      	ldr	r1, [sp, #248]	; 0xf8
    f818:	f004 fd77 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f81c:	e7ff      	b.n	f81e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b5e>
    f81e:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    f822:	f64c 504c 	movw	r0, #52556	; 0xcd4c
    f826:	f2c0 0001 	movt	r0, #1
    f82a:	6802      	ldr	r2, [r0, #0]
    f82c:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    f830:	f002 f9f0 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f834:	e7ff      	b.n	f836 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b76>
    f836:	e7ff      	b.n	f838 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b78>
                self.dt = self.v[x];
    f838:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f83c:	280f      	cmp	r0, #15
    f83e:	f200 85f1 	bhi.w	10424 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3764>
    f842:	e7ff      	b.n	f844 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b84>
    f844:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f848:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f84c:	1842      	adds	r2, r0, r1
    f84e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f852:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    f856:	f000 bd00 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f85a:	2005      	movs	r0, #5
    f85c:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    f860:	f64c 2000 	movw	r0, #51712	; 0xca00
    f864:	f2c0 0001 	movt	r0, #1
    f868:	6801      	ldr	r1, [r0, #0]
    f86a:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    f86e:	f004 fe87 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f872:	903b      	str	r0, [sp, #236]	; 0xec
    f874:	e01f      	b.n	f8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bf6>
    f876:	2001      	movs	r0, #1
    f878:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    f87c:	e015      	b.n	f8aa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bea>
    f87e:	2000      	movs	r0, #0
    f880:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    f884:	e011      	b.n	f8aa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bea>
    f886:	2000      	movs	r0, #0
    f888:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    f88c:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    f890:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f894:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f898:	f001 fab7 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f89c:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    f8a0:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    f8a4:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    f8a8:	e00a      	b.n	f8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c00>
    f8aa:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    f8ae:	07c0      	lsls	r0, r0, #31
    f8b0:	2800      	cmp	r0, #0
    f8b2:	d112      	bne.n	f8da <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c1a>
    f8b4:	e055      	b.n	f962 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ca2>
    f8b6:	983b      	ldr	r0, [sp, #236]	; 0xec
    f8b8:	07c1      	lsls	r1, r0, #31
    f8ba:	2900      	cmp	r1, #0
    f8bc:	d1e3      	bne.n	f886 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bc6>
    f8be:	e7de      	b.n	f87e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bbe>
    f8c0:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    f8c4:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    f8c8:	f004 fe5a 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f8cc:	903a      	str	r0, [sp, #232]	; 0xe8
    f8ce:	e7ff      	b.n	f8d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c10>
    f8d0:	983a      	ldr	r0, [sp, #232]	; 0xe8
    f8d2:	07c1      	lsls	r1, r0, #31
    f8d4:	2900      	cmp	r1, #0
    f8d6:	d1ce      	bne.n	f876 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bb6>
    f8d8:	e7d1      	b.n	f87e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    f8da:	f64c 40dc 	movw	r0, #52444	; 0xccdc
    f8de:	f2c0 0001 	movt	r0, #1
    f8e2:	6801      	ldr	r1, [r0, #0]
    f8e4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f8e8:	f100 0212 	add.w	r2, r0, #18
    f8ec:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    f8f0:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    f8f4:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    f8f8:	f646 03eb 	movw	r3, #26859	; 0x68eb
    f8fc:	f2c0 0301 	movt	r3, #1
    f900:	4610      	mov	r0, r2
    f902:	9139      	str	r1, [sp, #228]	; 0xe4
    f904:	4619      	mov	r1, r3
    f906:	f7fa fdc4 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f90a:	9038      	str	r0, [sp, #224]	; 0xe0
    f90c:	9137      	str	r1, [sp, #220]	; 0xdc
    f90e:	e7ff      	b.n	f910 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c50>
    f910:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f912:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    f916:	9937      	ldr	r1, [sp, #220]	; 0xdc
    f918:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    f91c:	f64c 2248 	movw	r2, #51784	; 0xca48
    f920:	f2c0 0201 	movt	r2, #1
    f924:	6812      	ldr	r2, [r2, #0]
    f926:	466b      	mov	r3, sp
    f928:	f04f 0c01 	mov.w	ip, #1
    f92c:	f8c3 c008 	str.w	ip, [r3, #8]
    f930:	605a      	str	r2, [r3, #4]
    f932:	f8c3 c000 	str.w	ip, [r3]
    f936:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    f93a:	2202      	movs	r2, #2
    f93c:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    f940:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f942:	f004 fce2 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f946:	e7ff      	b.n	f948 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c88>
    f948:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    f94c:	f64c 40fc 	movw	r0, #52476	; 0xccfc
    f950:	f2c0 0001 	movt	r0, #1
    f954:	6802      	ldr	r2, [r0, #0]
    f956:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    f95a:	f002 f95b 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f95e:	e7ff      	b.n	f960 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ca0>
    f960:	e7ff      	b.n	f962 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ca2>
                self.st = self.v[x];
    f962:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f966:	280f      	cmp	r0, #15
    f968:	f200 8552 	bhi.w	10410 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3750>
    f96c:	e7ff      	b.n	f96e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2cae>
    f96e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f972:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f976:	1842      	adds	r2, r0, r1
    f978:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f97c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    f980:	f000 bc6b 	b.w	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f984:	2005      	movs	r0, #5
    f986:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    f98a:	f64c 2000 	movw	r0, #51712	; 0xca00
    f98e:	f2c0 0001 	movt	r0, #1
    f992:	6801      	ldr	r1, [r0, #0]
    f994:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    f998:	f004 fdf2 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f99c:	9036      	str	r0, [sp, #216]	; 0xd8
    f99e:	e01f      	b.n	f9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d20>
    f9a0:	2001      	movs	r0, #1
    f9a2:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    f9a6:	e015      	b.n	f9d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d14>
    f9a8:	2000      	movs	r0, #0
    f9aa:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    f9ae:	e011      	b.n	f9d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d14>
    f9b0:	2000      	movs	r0, #0
    f9b2:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    f9b6:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    f9ba:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f9be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f9c2:	f001 fa22 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f9c6:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    f9ca:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    f9ce:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    f9d2:	e00a      	b.n	f9ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d2a>
    f9d4:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    f9d8:	07c0      	lsls	r0, r0, #31
    f9da:	2800      	cmp	r0, #0
    f9dc:	d112      	bne.n	fa04 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d44>
    f9de:	e055      	b.n	fa8c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2dcc>
    f9e0:	9836      	ldr	r0, [sp, #216]	; 0xd8
    f9e2:	07c1      	lsls	r1, r0, #31
    f9e4:	2900      	cmp	r1, #0
    f9e6:	d1e3      	bne.n	f9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2cf0>
    f9e8:	e7de      	b.n	f9a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ce8>
    f9ea:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    f9ee:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    f9f2:	f004 fdc5 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f9f6:	9035      	str	r0, [sp, #212]	; 0xd4
    f9f8:	e7ff      	b.n	f9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d3a>
    f9fa:	9835      	ldr	r0, [sp, #212]	; 0xd4
    f9fc:	07c1      	lsls	r1, r0, #31
    f9fe:	2900      	cmp	r1, #0
    fa00:	d1ce      	bne.n	f9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ce0>
    fa02:	e7d1      	b.n	f9a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    fa04:	f64c 408c 	movw	r0, #52364	; 0xcc8c
    fa08:	f2c0 0001 	movt	r0, #1
    fa0c:	6801      	ldr	r1, [r0, #0]
    fa0e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa12:	f100 0212 	add.w	r2, r0, #18
    fa16:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    fa1a:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    fa1e:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    fa22:	f646 03eb 	movw	r3, #26859	; 0x68eb
    fa26:	f2c0 0301 	movt	r3, #1
    fa2a:	4610      	mov	r0, r2
    fa2c:	9134      	str	r1, [sp, #208]	; 0xd0
    fa2e:	4619      	mov	r1, r3
    fa30:	f7fa fd2f 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fa34:	9033      	str	r0, [sp, #204]	; 0xcc
    fa36:	9132      	str	r1, [sp, #200]	; 0xc8
    fa38:	e7ff      	b.n	fa3a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d7a>
    fa3a:	9833      	ldr	r0, [sp, #204]	; 0xcc
    fa3c:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    fa40:	9932      	ldr	r1, [sp, #200]	; 0xc8
    fa42:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    fa46:	f64c 2248 	movw	r2, #51784	; 0xca48
    fa4a:	f2c0 0201 	movt	r2, #1
    fa4e:	6812      	ldr	r2, [r2, #0]
    fa50:	466b      	mov	r3, sp
    fa52:	f04f 0c01 	mov.w	ip, #1
    fa56:	f8c3 c008 	str.w	ip, [r3, #8]
    fa5a:	605a      	str	r2, [r3, #4]
    fa5c:	f8c3 c000 	str.w	ip, [r3]
    fa60:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    fa64:	2202      	movs	r2, #2
    fa66:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    fa6a:	9934      	ldr	r1, [sp, #208]	; 0xd0
    fa6c:	f004 fc4d 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fa70:	e7ff      	b.n	fa72 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2db2>
    fa72:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    fa76:	f64c 40ac 	movw	r0, #52396	; 0xccac
    fa7a:	f2c0 0001 	movt	r0, #1
    fa7e:	6802      	ldr	r2, [r0, #0]
    fa80:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    fa84:	f002 f8c6 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fa88:	e7ff      	b.n	fa8a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2dca>
    fa8a:	e7ff      	b.n	fa8c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    fa8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa90:	8a01      	ldrh	r1, [r0, #16]
    fa92:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fa96:	2a0f      	cmp	r2, #15
    fa98:	9131      	str	r1, [sp, #196]	; 0xc4
    fa9a:	f200 84af 	bhi.w	103fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x373c>
    fa9e:	e7ff      	b.n	faa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2de0>
    faa0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    faa4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    faa8:	1842      	adds	r2, r0, r1
    faaa:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    faae:	f001 f99f 	bl	10df0 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    fab2:	9030      	str	r0, [sp, #192]	; 0xc0
    fab4:	e7ff      	b.n	fab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2df6>
    fab6:	9831      	ldr	r0, [sp, #196]	; 0xc4
    fab8:	9930      	ldr	r1, [sp, #192]	; 0xc0
    faba:	f004 fd27 	bl	1450c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    fabe:	902f      	str	r0, [sp, #188]	; 0xbc
    fac0:	e7ff      	b.n	fac2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e02>
    fac2:	982f      	ldr	r0, [sp, #188]	; 0xbc
    fac4:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fac8:	8208      	strh	r0, [r1, #16]
        match (
    faca:	e3c6      	b.n	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    facc:	2005      	movs	r0, #5
    face:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    fad2:	f64c 2000 	movw	r0, #51712	; 0xca00
    fad6:	f2c0 0001 	movt	r0, #1
    fada:	6801      	ldr	r1, [r0, #0]
    fadc:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    fae0:	f004 fd4e 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fae4:	902e      	str	r0, [sp, #184]	; 0xb8
    fae6:	e01f      	b.n	fb28 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e68>
    fae8:	2001      	movs	r0, #1
    faea:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    faee:	e015      	b.n	fb1c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e5c>
    faf0:	2000      	movs	r0, #0
    faf2:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    faf6:	e011      	b.n	fb1c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e5c>
    faf8:	2000      	movs	r0, #0
    fafa:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    fafe:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    fb02:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fb06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fb0a:	f001 f97e 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fb0e:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    fb12:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    fb16:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    fb1a:	e00a      	b.n	fb32 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e72>
    fb1c:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    fb20:	07c0      	lsls	r0, r0, #31
    fb22:	2800      	cmp	r0, #0
    fb24:	d112      	bne.n	fb4c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e8c>
    fb26:	e055      	b.n	fbd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f14>
    fb28:	982e      	ldr	r0, [sp, #184]	; 0xb8
    fb2a:	07c1      	lsls	r1, r0, #31
    fb2c:	2900      	cmp	r1, #0
    fb2e:	d1e3      	bne.n	faf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e38>
    fb30:	e7de      	b.n	faf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e30>
    fb32:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    fb36:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    fb3a:	f004 fd21 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb3e:	902d      	str	r0, [sp, #180]	; 0xb4
    fb40:	e7ff      	b.n	fb42 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e82>
    fb42:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fb44:	07c1      	lsls	r1, r0, #31
    fb46:	2900      	cmp	r1, #0
    fb48:	d1ce      	bne.n	fae8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e28>
    fb4a:	e7d1      	b.n	faf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
    fb4c:	f64c 4008 	movw	r0, #52232	; 0xcc08
    fb50:	f2c0 0001 	movt	r0, #1
    fb54:	6801      	ldr	r1, [r0, #0]
    fb56:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb5a:	f100 0212 	add.w	r2, r0, #18
    fb5e:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    fb62:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    fb66:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    fb6a:	f646 03eb 	movw	r3, #26859	; 0x68eb
    fb6e:	f2c0 0301 	movt	r3, #1
    fb72:	4610      	mov	r0, r2
    fb74:	912c      	str	r1, [sp, #176]	; 0xb0
    fb76:	4619      	mov	r1, r3
    fb78:	f7fa fc8b 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fb7c:	902b      	str	r0, [sp, #172]	; 0xac
    fb7e:	912a      	str	r1, [sp, #168]	; 0xa8
    fb80:	e7ff      	b.n	fb82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ec2>
    fb82:	982b      	ldr	r0, [sp, #172]	; 0xac
    fb84:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    fb88:	992a      	ldr	r1, [sp, #168]	; 0xa8
    fb8a:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    fb8e:	f64c 2248 	movw	r2, #51784	; 0xca48
    fb92:	f2c0 0201 	movt	r2, #1
    fb96:	6812      	ldr	r2, [r2, #0]
    fb98:	466b      	mov	r3, sp
    fb9a:	f04f 0c01 	mov.w	ip, #1
    fb9e:	f8c3 c008 	str.w	ip, [r3, #8]
    fba2:	605a      	str	r2, [r3, #4]
    fba4:	f8c3 c000 	str.w	ip, [r3]
    fba8:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    fbac:	2202      	movs	r2, #2
    fbae:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    fbb2:	992c      	ldr	r1, [sp, #176]	; 0xb0
    fbb4:	f004 fba9 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fbb8:	e7ff      	b.n	fbba <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2efa>
    fbba:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    fbbe:	f64c 4028 	movw	r0, #52264	; 0xcc28
    fbc2:	f2c0 0001 	movt	r0, #1
    fbc6:	6802      	ldr	r2, [r0, #0]
    fbc8:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    fbcc:	f002 f822 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fbd0:	e7ff      	b.n	fbd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f12>
    fbd2:	e7ff      	b.n	fbd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f14>
                self.i = (self.v[x] * 5).into();
    fbd4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fbd8:	280f      	cmp	r0, #15
    fbda:	f200 83f9 	bhi.w	103d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3710>
    fbde:	e7ff      	b.n	fbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f20>
    fbe0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbe4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fbe8:	1842      	adds	r2, r0, r1
    fbea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fbee:	2305      	movs	r3, #5
    fbf0:	fba2 2303 	umull	r2, r3, r2, r3
    fbf4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    fbf8:	f04f 0e00 	mov.w	lr, #0
    fbfc:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    fc00:	bf18      	it	ne
    fc02:	f04f 0c01 	movne.w	ip, #1
    fc06:	2b00      	cmp	r3, #0
    fc08:	bf18      	it	ne
    fc0a:	2301      	movne	r3, #1
    fc0c:	ea43 030c 	orr.w	r3, r3, ip
    fc10:	2b00      	cmp	r3, #0
    fc12:	9229      	str	r2, [sp, #164]	; 0xa4
    fc14:	f040 83e6 	bne.w	103e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3724>
    fc18:	e7ff      	b.n	fc1a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f5a>
    fc1a:	9829      	ldr	r0, [sp, #164]	; 0xa4
    fc1c:	f001 f8e8 	bl	10df0 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    fc20:	9028      	str	r0, [sp, #160]	; 0xa0
    fc22:	e7ff      	b.n	fc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f64>
    fc24:	9828      	ldr	r0, [sp, #160]	; 0xa0
    fc26:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fc2a:	8208      	strh	r0, [r1, #16]
        match (
    fc2c:	e315      	b.n	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    fc2e:	2005      	movs	r0, #5
    fc30:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    fc34:	f64c 2000 	movw	r0, #51712	; 0xca00
    fc38:	f2c0 0001 	movt	r0, #1
    fc3c:	6801      	ldr	r1, [r0, #0]
    fc3e:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    fc42:	f004 fc9d 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc46:	9027      	str	r0, [sp, #156]	; 0x9c
    fc48:	e01f      	b.n	fc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fca>
    fc4a:	2001      	movs	r0, #1
    fc4c:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    fc50:	e015      	b.n	fc7e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fbe>
    fc52:	2000      	movs	r0, #0
    fc54:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    fc58:	e011      	b.n	fc7e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fbe>
    fc5a:	2000      	movs	r0, #0
    fc5c:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    fc60:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    fc64:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fc68:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fc6c:	f001 f8cd 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fc70:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    fc74:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    fc78:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    fc7c:	e00a      	b.n	fc94 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fd4>
    fc7e:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    fc82:	07c0      	lsls	r0, r0, #31
    fc84:	2800      	cmp	r0, #0
    fc86:	d112      	bne.n	fcae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fee>
    fc88:	e055      	b.n	fd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3076>
    fc8a:	9827      	ldr	r0, [sp, #156]	; 0x9c
    fc8c:	07c1      	lsls	r1, r0, #31
    fc8e:	2900      	cmp	r1, #0
    fc90:	d1e3      	bne.n	fc5a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f9a>
    fc92:	e7de      	b.n	fc52 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f92>
    fc94:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    fc98:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    fc9c:	f004 fc70 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fca0:	9026      	str	r0, [sp, #152]	; 0x98
    fca2:	e7ff      	b.n	fca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fe4>
    fca4:	9826      	ldr	r0, [sp, #152]	; 0x98
    fca6:	07c1      	lsls	r1, r0, #31
    fca8:	2900      	cmp	r1, #0
    fcaa:	d1ce      	bne.n	fc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f8a>
    fcac:	e7d1      	b.n	fc52 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
    fcae:	f64c 3068 	movw	r0, #52072	; 0xcb68
    fcb2:	f2c0 0001 	movt	r0, #1
    fcb6:	6801      	ldr	r1, [r0, #0]
    fcb8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fcbc:	f100 0212 	add.w	r2, r0, #18
    fcc0:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    fcc4:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    fcc8:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    fccc:	f646 03eb 	movw	r3, #26859	; 0x68eb
    fcd0:	f2c0 0301 	movt	r3, #1
    fcd4:	4610      	mov	r0, r2
    fcd6:	9125      	str	r1, [sp, #148]	; 0x94
    fcd8:	4619      	mov	r1, r3
    fcda:	f7fa fbda 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fcde:	9024      	str	r0, [sp, #144]	; 0x90
    fce0:	9123      	str	r1, [sp, #140]	; 0x8c
    fce2:	e7ff      	b.n	fce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3024>
    fce4:	9824      	ldr	r0, [sp, #144]	; 0x90
    fce6:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    fcea:	9923      	ldr	r1, [sp, #140]	; 0x8c
    fcec:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    fcf0:	f64c 2248 	movw	r2, #51784	; 0xca48
    fcf4:	f2c0 0201 	movt	r2, #1
    fcf8:	6812      	ldr	r2, [r2, #0]
    fcfa:	466b      	mov	r3, sp
    fcfc:	f04f 0c01 	mov.w	ip, #1
    fd00:	f8c3 c008 	str.w	ip, [r3, #8]
    fd04:	605a      	str	r2, [r3, #4]
    fd06:	f8c3 c000 	str.w	ip, [r3]
    fd0a:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    fd0e:	2202      	movs	r2, #2
    fd10:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    fd14:	9925      	ldr	r1, [sp, #148]	; 0x94
    fd16:	f004 faf8 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fd1a:	e7ff      	b.n	fd1c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x305c>
    fd1c:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    fd20:	f64c 3088 	movw	r0, #52104	; 0xcb88
    fd24:	f2c0 0001 	movt	r0, #1
    fd28:	6802      	ldr	r2, [r0, #0]
    fd2a:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    fd2e:	f001 ff71 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fd32:	e7ff      	b.n	fd34 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3074>
    fd34:	e7ff      	b.n	fd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3076>
                let bcd = self.v[x];
    fd36:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fd3a:	280f      	cmp	r0, #15
    fd3c:	f200 8308 	bhi.w	10350 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3690>
    fd40:	e7ff      	b.n	fd42 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3082>
    fd42:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd46:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fd4a:	1842      	adds	r2, r0, r1
    fd4c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fd50:	4613      	mov	r3, r2
    fd52:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    fd56:	f248 5c1f 	movw	ip, #34079	; 0x851f
    fd5a:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    fd5e:	fba2 2c0c 	umull	r2, ip, r2, ip
    fd62:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    fd66:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    fd6a:	4674      	mov	r4, lr
    fd6c:	2500      	movs	r5, #0
    fd6e:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    fd72:	9322      	str	r3, [sp, #136]	; 0x88
    fd74:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    fd78:	9420      	str	r4, [sp, #128]	; 0x80
    fd7a:	f040 82f3 	bne.w	10364 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36a4>
    fd7e:	e7ff      	b.n	fd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x30c0>
    fd80:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd84:	9920      	ldr	r1, [sp, #128]	; 0x80
    fd86:	1842      	adds	r2, r0, r1
    fd88:	9b21      	ldr	r3, [sp, #132]	; 0x84
    fd8a:	fa5f fc83 	uxtb.w	ip, r3
    fd8e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fd92:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fd96:	fbac 450e 	umull	r4, r5, ip, lr
    fd9a:	08ed      	lsrs	r5, r5, #3
    fd9c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    fda0:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    fda4:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    fda8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    fdaa:	fa5f fc82 	uxtb.w	ip, r2
    fdae:	fbac ce0e 	umull	ip, lr, ip, lr
    fdb2:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    fdb6:	8a05      	ldrh	r5, [r0, #16]
    fdb8:	3501      	adds	r5, #1
    fdba:	2600      	movs	r6, #0
    fdbc:	2e00      	cmp	r6, #0
    fdbe:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    fdc2:	951e      	str	r5, [sp, #120]	; 0x78
    fdc4:	f040 82d8 	bne.w	10378 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36b8>
    fdc8:	e7ff      	b.n	fdca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x310a>
    fdca:	2000      	movs	r0, #0
    fdcc:	991e      	ldr	r1, [sp, #120]	; 0x78
    fdce:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fdd2:	f040 82dd 	bne.w	10390 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36d0>
    fdd6:	e7ff      	b.n	fdd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3118>
    fdd8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fddc:	991e      	ldr	r1, [sp, #120]	; 0x78
    fdde:	1842      	adds	r2, r0, r1
    fde0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    fde2:	fa5f fc83 	uxtb.w	ip, r3
    fde6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fdea:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fdee:	fbac e40e 	umull	lr, r4, ip, lr
    fdf2:	08e4      	lsrs	r4, r4, #3
    fdf4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    fdf8:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    fdfc:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    fe00:	8a02      	ldrh	r2, [r0, #16]
    fe02:	3202      	adds	r2, #2
    fe04:	f04f 0c00 	mov.w	ip, #0
    fe08:	f1bc 0f00 	cmp.w	ip, #0
    fe0c:	921d      	str	r2, [sp, #116]	; 0x74
    fe0e:	f040 82c9 	bne.w	103a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36e4>
    fe12:	e7ff      	b.n	fe14 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3154>
    fe14:	2000      	movs	r0, #0
    fe16:	991d      	ldr	r1, [sp, #116]	; 0x74
    fe18:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fe1c:	f040 82ce 	bne.w	103bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36fc>
    fe20:	e7ff      	b.n	fe22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3162>
    fe22:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe26:	991d      	ldr	r1, [sp, #116]	; 0x74
    fe28:	1842      	adds	r2, r0, r1
    fe2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fe2c:	fa5f fc83 	uxtb.w	ip, r3
    fe30:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fe34:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fe38:	fbac e40e 	umull	lr, r4, ip, lr
    fe3c:	08e4      	lsrs	r4, r4, #3
    fe3e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    fe42:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    fe46:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    fe4a:	e206      	b.n	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    fe4c:	2005      	movs	r0, #5
    fe4e:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    fe52:	f64c 2000 	movw	r0, #51712	; 0xca00
    fe56:	f2c0 0001 	movt	r0, #1
    fe5a:	6801      	ldr	r1, [r0, #0]
    fe5c:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    fe60:	f004 fb8e 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe64:	901c      	str	r0, [sp, #112]	; 0x70
    fe66:	e01f      	b.n	fea8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31e8>
    fe68:	2001      	movs	r0, #1
    fe6a:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    fe6e:	e015      	b.n	fe9c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31dc>
    fe70:	2000      	movs	r0, #0
    fe72:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    fe76:	e011      	b.n	fe9c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31dc>
    fe78:	2000      	movs	r0, #0
    fe7a:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    fe7e:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    fe82:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fe86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fe8a:	f000 ffbe 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fe8e:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    fe92:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    fe96:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    fe9a:	e00a      	b.n	feb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31f2>
    fe9c:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    fea0:	07c0      	lsls	r0, r0, #31
    fea2:	2800      	cmp	r0, #0
    fea4:	d112      	bne.n	fecc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x320c>
    fea6:	e055      	b.n	ff54 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3294>
    fea8:	981c      	ldr	r0, [sp, #112]	; 0x70
    feaa:	07c1      	lsls	r1, r0, #31
    feac:	2900      	cmp	r1, #0
    feae:	d1e3      	bne.n	fe78 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31b8>
    feb0:	e7de      	b.n	fe70 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31b0>
    feb2:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    feb6:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    feba:	f004 fb61 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    febe:	901b      	str	r0, [sp, #108]	; 0x6c
    fec0:	e7ff      	b.n	fec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3202>
    fec2:	981b      	ldr	r0, [sp, #108]	; 0x6c
    fec4:	07c1      	lsls	r1, r0, #31
    fec6:	2900      	cmp	r1, #0
    fec8:	d1ce      	bne.n	fe68 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31a8>
    feca:	e7d1      	b.n	fe70 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    fecc:	f64c 20e8 	movw	r0, #51944	; 0xcae8
    fed0:	f2c0 0001 	movt	r0, #1
    fed4:	6801      	ldr	r1, [r0, #0]
    fed6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    feda:	f100 0212 	add.w	r2, r0, #18
    fede:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    fee2:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    fee6:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    feea:	f646 03eb 	movw	r3, #26859	; 0x68eb
    feee:	f2c0 0301 	movt	r3, #1
    fef2:	4610      	mov	r0, r2
    fef4:	911a      	str	r1, [sp, #104]	; 0x68
    fef6:	4619      	mov	r1, r3
    fef8:	f7fa facb 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fefc:	9019      	str	r0, [sp, #100]	; 0x64
    fefe:	9118      	str	r1, [sp, #96]	; 0x60
    ff00:	e7ff      	b.n	ff02 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3242>
    ff02:	9819      	ldr	r0, [sp, #100]	; 0x64
    ff04:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    ff08:	9918      	ldr	r1, [sp, #96]	; 0x60
    ff0a:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    ff0e:	f64c 2248 	movw	r2, #51784	; 0xca48
    ff12:	f2c0 0201 	movt	r2, #1
    ff16:	6812      	ldr	r2, [r2, #0]
    ff18:	466b      	mov	r3, sp
    ff1a:	f04f 0c01 	mov.w	ip, #1
    ff1e:	f8c3 c008 	str.w	ip, [r3, #8]
    ff22:	605a      	str	r2, [r3, #4]
    ff24:	f8c3 c000 	str.w	ip, [r3]
    ff28:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    ff2c:	2202      	movs	r2, #2
    ff2e:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    ff32:	991a      	ldr	r1, [sp, #104]	; 0x68
    ff34:	f004 f9e9 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ff38:	e7ff      	b.n	ff3a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x327a>
    ff3a:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    ff3e:	f64c 3008 	movw	r0, #51976	; 0xcb08
    ff42:	f2c0 0001 	movt	r0, #1
    ff46:	6802      	ldr	r2, [r0, #0]
    ff48:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    ff4c:	f001 fe62 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ff50:	e7ff      	b.n	ff52 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3292>
    ff52:	e7ff      	b.n	ff54 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3294>
                let x = x as usize;
    ff54:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ff58:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    ff5c:	1c41      	adds	r1, r0, #1
    ff5e:	460a      	mov	r2, r1
    ff60:	4281      	cmp	r1, r0
    ff62:	9217      	str	r2, [sp, #92]	; 0x5c
    ff64:	f0c0 81c9 	bcc.w	102fa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x363a>
    ff68:	e7ff      	b.n	ff6a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32aa>
    ff6a:	2000      	movs	r0, #0
    ff6c:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    ff70:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ff72:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    ff76:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    ff7a:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    ff7e:	f001 fbd6 	bl	1172e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ff82:	9016      	str	r0, [sp, #88]	; 0x58
    ff84:	9115      	str	r1, [sp, #84]	; 0x54
    ff86:	e7ff      	b.n	ff88 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32c8>
    ff88:	9816      	ldr	r0, [sp, #88]	; 0x58
    ff8a:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    ff8e:	9915      	ldr	r1, [sp, #84]	; 0x54
    ff90:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    ff94:	e7ff      	b.n	ff96 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32d6>
    ff96:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    ff9a:	f001 fb3d 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ff9e:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    ffa2:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    ffa6:	e7ff      	b.n	ffa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32e8>
    ffa8:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    ffac:	2800      	cmp	r0, #0
    ffae:	d001      	beq.n	ffb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32f4>
    ffb0:	e7ff      	b.n	ffb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32f2>
    ffb2:	e001      	b.n	ffb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32f8>
        match (
    ffb4:	e151      	b.n	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for i in 0..(x + 1) {
    ffb6:	defe      	udf	#254	; 0xfe
    ffb8:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    ffbc:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    ffc0:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    ffc4:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    ffc8:	280f      	cmp	r0, #15
    ffca:	9014      	str	r0, [sp, #80]	; 0x50
    ffcc:	f200 81a1 	bhi.w	10312 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3652>
    ffd0:	e7ff      	b.n	ffd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3312>
    ffd2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ffd6:	9914      	ldr	r1, [sp, #80]	; 0x50
    ffd8:	1842      	adds	r2, r0, r1
    ffda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ffde:	8a03      	ldrh	r3, [r0, #16]
    ffe0:	eb03 0c01 	add.w	ip, r3, r1
    ffe4:	46e6      	mov	lr, ip
    ffe6:	459c      	cmp	ip, r3
    ffe8:	9213      	str	r2, [sp, #76]	; 0x4c
    ffea:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    ffee:	f0c0 8199 	bcc.w	10324 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3664>
    fff2:	e7ff      	b.n	fff4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3334>
    fff4:	2000      	movs	r0, #0
    fff6:	9912      	ldr	r1, [sp, #72]	; 0x48
    fff8:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fffc:	f040 819e 	bne.w	1033c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x367c>
   10000:	e7ff      	b.n	10002 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3342>
   10002:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10006:	9912      	ldr	r1, [sp, #72]	; 0x48
   10008:	1842      	adds	r2, r0, r1
   1000a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1000c:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
   10010:	e7c1      	b.n	ff96 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32d6>
   10012:	2005      	movs	r0, #5
   10014:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
   10018:	f64c 2000 	movw	r0, #51712	; 0xca00
   1001c:	f2c0 0001 	movt	r0, #1
   10020:	6801      	ldr	r1, [r0, #0]
   10022:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   10026:	f004 faab 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1002a:	9011      	str	r0, [sp, #68]	; 0x44
   1002c:	e01f      	b.n	1006e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33ae>
   1002e:	2001      	movs	r0, #1
   10030:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10034:	e015      	b.n	10062 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33a2>
   10036:	2000      	movs	r0, #0
   10038:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   1003c:	e011      	b.n	10062 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33a2>
   1003e:	2000      	movs	r0, #0
   10040:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
   10044:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
   10048:	f644 206c 	movw	r0, #19052	; 0x4a6c
   1004c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10050:	f000 fedb 	bl	10e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10054:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
   10058:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
   1005c:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   10060:	e00a      	b.n	10078 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33b8>
   10062:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   10066:	07c0      	lsls	r0, r0, #31
   10068:	2800      	cmp	r0, #0
   1006a:	d112      	bne.n	10092 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33d2>
   1006c:	e055      	b.n	1011a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x345a>
   1006e:	9811      	ldr	r0, [sp, #68]	; 0x44
   10070:	07c1      	lsls	r1, r0, #31
   10072:	2900      	cmp	r1, #0
   10074:	d1e3      	bne.n	1003e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x337e>
   10076:	e7de      	b.n	10036 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3376>
   10078:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   1007c:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   10080:	f004 fa7e 	bl	14580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10084:	9010      	str	r0, [sp, #64]	; 0x40
   10086:	e7ff      	b.n	10088 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33c8>
   10088:	9810      	ldr	r0, [sp, #64]	; 0x40
   1008a:	07c1      	lsls	r1, r0, #31
   1008c:	2900      	cmp	r1, #0
   1008e:	d1ce      	bne.n	1002e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x336e>
   10090:	e7d1      	b.n	10036 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   10092:	f64c 2024 	movw	r0, #51748	; 0xca24
   10096:	f2c0 0001 	movt	r0, #1
   1009a:	6801      	ldr	r1, [r0, #0]
   1009c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   100a0:	f100 0212 	add.w	r2, r0, #18
   100a4:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   100a8:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   100ac:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   100b0:	f646 03eb 	movw	r3, #26859	; 0x68eb
   100b4:	f2c0 0301 	movt	r3, #1
   100b8:	4610      	mov	r0, r2
   100ba:	910f      	str	r1, [sp, #60]	; 0x3c
   100bc:	4619      	mov	r1, r3
   100be:	f7fa f9e8 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   100c2:	900e      	str	r0, [sp, #56]	; 0x38
   100c4:	910d      	str	r1, [sp, #52]	; 0x34
   100c6:	e7ff      	b.n	100c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3408>
   100c8:	980e      	ldr	r0, [sp, #56]	; 0x38
   100ca:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   100ce:	990d      	ldr	r1, [sp, #52]	; 0x34
   100d0:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   100d4:	f64c 2248 	movw	r2, #51784	; 0xca48
   100d8:	f2c0 0201 	movt	r2, #1
   100dc:	6812      	ldr	r2, [r2, #0]
   100de:	466b      	mov	r3, sp
   100e0:	f04f 0c01 	mov.w	ip, #1
   100e4:	f8c3 c008 	str.w	ip, [r3, #8]
   100e8:	605a      	str	r2, [r3, #4]
   100ea:	f8c3 c000 	str.w	ip, [r3]
   100ee:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   100f2:	2202      	movs	r2, #2
   100f4:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   100f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   100fa:	f004 f906 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   100fe:	e7ff      	b.n	10100 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3440>
   10100:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   10104:	f64c 2088 	movw	r0, #51848	; 0xca88
   10108:	f2c0 0001 	movt	r0, #1
   1010c:	6802      	ldr	r2, [r0, #0]
   1010e:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   10112:	f001 fd7f 	bl	11c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10116:	e7ff      	b.n	10118 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3458>
   10118:	e7ff      	b.n	1011a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x345a>
                let x = x as usize;
   1011a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   1011e:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   10122:	1c41      	adds	r1, r0, #1
   10124:	460a      	mov	r2, r1
   10126:	4281      	cmp	r1, r0
   10128:	920c      	str	r2, [sp, #48]	; 0x30
   1012a:	f0c0 80bb 	bcc.w	102a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35e4>
   1012e:	e7ff      	b.n	10130 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3470>
   10130:	2000      	movs	r0, #0
   10132:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   10136:	980c      	ldr	r0, [sp, #48]	; 0x30
   10138:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   1013c:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   10140:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   10144:	f001 faf3 	bl	1172e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   10148:	900b      	str	r0, [sp, #44]	; 0x2c
   1014a:	910a      	str	r1, [sp, #40]	; 0x28
   1014c:	e7ff      	b.n	1014e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x348e>
   1014e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10150:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   10154:	990a      	ldr	r1, [sp, #40]	; 0x28
   10156:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   1015a:	e7ff      	b.n	1015c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x349c>
   1015c:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   10160:	f001 fa5a 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10164:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   10168:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   1016c:	e7ff      	b.n	1016e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34ae>
   1016e:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   10172:	2800      	cmp	r0, #0
   10174:	d001      	beq.n	1017a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34ba>
   10176:	e7ff      	b.n	10178 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34b8>
   10178:	e001      	b.n	1017e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34be>
        match (
   1017a:	e06e      	b.n	1025a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for i in 0..(x + 1) {
   1017c:	defe      	udf	#254	; 0xfe
   1017e:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   10182:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   10186:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   1018a:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   1018e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10192:	8a0a      	ldrh	r2, [r1, #16]
   10194:	1813      	adds	r3, r2, r0
   10196:	469c      	mov	ip, r3
   10198:	4293      	cmp	r3, r2
   1019a:	9009      	str	r0, [sp, #36]	; 0x24
   1019c:	f8cd c020 	str.w	ip, [sp, #32]
   101a0:	f0c0 808c 	bcc.w	102bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35fc>
   101a4:	e7ff      	b.n	101a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34e6>
   101a6:	2000      	movs	r0, #0
   101a8:	9908      	ldr	r1, [sp, #32]
   101aa:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   101ae:	f040 8091 	bne.w	102d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3614>
   101b2:	e7ff      	b.n	101b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34f4>
   101b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   101b8:	9908      	ldr	r1, [sp, #32]
   101ba:	1842      	adds	r2, r0, r1
   101bc:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   101c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   101c2:	2b0f      	cmp	r3, #15
   101c4:	9207      	str	r2, [sp, #28]
   101c6:	f200 808f 	bhi.w	102e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3628>
   101ca:	e7ff      	b.n	101cc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x350c>
   101cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   101d0:	9909      	ldr	r1, [sp, #36]	; 0x24
   101d2:	1842      	adds	r2, r0, r1
   101d4:	9b07      	ldr	r3, [sp, #28]
   101d6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   101da:	e7bf      	b.n	1015c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x349c>
   101dc:	f646 01eb 	movw	r1, #26859	; 0x68eb
   101e0:	f2c0 0101 	movt	r1, #1
   101e4:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   101e8:	f7fa f953 	bl	a492 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   101ec:	9006      	str	r0, [sp, #24]
   101ee:	9105      	str	r1, [sp, #20]
   101f0:	e7ff      	b.n	101f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3532>
   101f2:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   101f6:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   101fa:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   101fe:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   10202:	9a06      	ldr	r2, [sp, #24]
   10204:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   10208:	9b05      	ldr	r3, [sp, #20]
   1020a:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   1020e:	f24d 5cec 	movw	ip, #54764	; 0xd5ec
   10212:	f2c0 0c01 	movt	ip, #1
   10216:	f8dc c000 	ldr.w	ip, [ip]
   1021a:	46ee      	mov	lr, sp
   1021c:	2402      	movs	r4, #2
   1021e:	f8ce 4008 	str.w	r4, [lr, #8]
   10222:	f8ce c004 	str.w	ip, [lr, #4]
   10226:	f8ce 4000 	str.w	r4, [lr]
   1022a:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   1022e:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   10232:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   10236:	4622      	mov	r2, r4
   10238:	f004 f867 	bl	1430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   1023c:	e7ff      	b.n	1023e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x357e>
   1023e:	f24d 6010 	movw	r0, #54800	; 0xd610
   10242:	f2c0 0001 	movt	r0, #1
   10246:	f004 ff3c 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1024a:	9004      	str	r0, [sp, #16]
   1024c:	e7ff      	b.n	1024e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x358e>
   1024e:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   10252:	9904      	ldr	r1, [sp, #16]
   10254:	f004 ff72 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   10258:	defe      	udf	#254	; 0xfe
        }
    }
   1025a:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   1025e:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   10260:	f64c 10a4 	movw	r0, #51620	; 0xc9a4
   10264:	f2c0 0001 	movt	r0, #1
   10268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1026c:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   10270:	f004 ff44 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10274:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   10276:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   1027a:	f2c0 0001 	movt	r0, #1
   1027e:	f64c 12b4 	movw	r2, #51636	; 0xc9b4
   10282:	f2c0 0201 	movt	r2, #1
   10286:	211c      	movs	r1, #28
   10288:	f004 ff22 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1028c:	defe      	udf	#254	; 0xfe
   1028e:	f64c 10ec 	movw	r0, #51692	; 0xc9ec
   10292:	f2c0 0001 	movt	r0, #1
   10296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1029a:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   1029e:	f004 ff2d 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102a2:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   102a4:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   102a8:	f2c0 0001 	movt	r0, #1
   102ac:	f64c 228c 	movw	r2, #51852	; 0xca8c
   102b0:	f2c0 0201 	movt	r2, #1
   102b4:	211c      	movs	r1, #28
   102b6:	f004 ff0b 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   102ba:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   102bc:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   102c0:	f2c0 0001 	movt	r0, #1
   102c4:	f64c 229c 	movw	r2, #51868	; 0xca9c
   102c8:	f2c0 0201 	movt	r2, #1
   102cc:	211c      	movs	r1, #28
   102ce:	f004 feff 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   102d2:	defe      	udf	#254	; 0xfe
   102d4:	f64c 20ac 	movw	r0, #51884	; 0xcaac
   102d8:	f2c0 0001 	movt	r0, #1
   102dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   102e0:	9908      	ldr	r1, [sp, #32]
   102e2:	f004 ff0b 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102e6:	defe      	udf	#254	; 0xfe
   102e8:	f64c 20bc 	movw	r0, #51900	; 0xcabc
   102ec:	f2c0 0001 	movt	r0, #1
   102f0:	2210      	movs	r2, #16
   102f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   102f4:	f004 ff02 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102f8:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   102fa:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   102fe:	f2c0 0001 	movt	r0, #1
   10302:	f64c 320c 	movw	r2, #51980	; 0xcb0c
   10306:	f2c0 0201 	movt	r2, #1
   1030a:	211c      	movs	r1, #28
   1030c:	f004 fee0 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10310:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   10312:	f64c 301c 	movw	r0, #51996	; 0xcb1c
   10316:	f2c0 0001 	movt	r0, #1
   1031a:	2210      	movs	r2, #16
   1031c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1031e:	f004 feed 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10322:	defe      	udf	#254	; 0xfe
   10324:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   10328:	f2c0 0001 	movt	r0, #1
   1032c:	f64c 322c 	movw	r2, #52012	; 0xcb2c
   10330:	f2c0 0201 	movt	r2, #1
   10334:	211c      	movs	r1, #28
   10336:	f004 fecb 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1033a:	defe      	udf	#254	; 0xfe
   1033c:	f64c 303c 	movw	r0, #52028	; 0xcb3c
   10340:	f2c0 0001 	movt	r0, #1
   10344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10348:	9912      	ldr	r1, [sp, #72]	; 0x48
   1034a:	f004 fed7 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1034e:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   10350:	f64c 308c 	movw	r0, #52108	; 0xcb8c
   10354:	f2c0 0001 	movt	r0, #1
   10358:	2210      	movs	r2, #16
   1035a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1035e:	f004 fecd 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10362:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   10364:	f64c 309c 	movw	r0, #52124	; 0xcb9c
   10368:	f2c0 0001 	movt	r0, #1
   1036c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10370:	9920      	ldr	r1, [sp, #128]	; 0x80
   10372:	f004 fec3 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10376:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   10378:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   1037c:	f2c0 0001 	movt	r0, #1
   10380:	f64c 32ac 	movw	r2, #52140	; 0xcbac
   10384:	f2c0 0201 	movt	r2, #1
   10388:	211c      	movs	r1, #28
   1038a:	f004 fea1 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1038e:	defe      	udf	#254	; 0xfe
   10390:	f64c 30bc 	movw	r0, #52156	; 0xcbbc
   10394:	f2c0 0001 	movt	r0, #1
   10398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1039c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1039e:	f004 fead 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103a2:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   103a4:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   103a8:	f2c0 0001 	movt	r0, #1
   103ac:	f64c 32cc 	movw	r2, #52172	; 0xcbcc
   103b0:	f2c0 0201 	movt	r2, #1
   103b4:	211c      	movs	r1, #28
   103b6:	f004 fe8b 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103ba:	defe      	udf	#254	; 0xfe
   103bc:	f64c 30dc 	movw	r0, #52188	; 0xcbdc
   103c0:	f2c0 0001 	movt	r0, #1
   103c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   103c8:	991d      	ldr	r1, [sp, #116]	; 0x74
   103ca:	f004 fe97 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103ce:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   103d0:	f64c 402c 	movw	r0, #52268	; 0xcc2c
   103d4:	f2c0 0001 	movt	r0, #1
   103d8:	2210      	movs	r2, #16
   103da:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   103de:	f004 fe8d 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103e2:	defe      	udf	#254	; 0xfe
   103e4:	f64c 4050 	movw	r0, #52304	; 0xcc50
   103e8:	f2c0 0001 	movt	r0, #1
   103ec:	f64c 423c 	movw	r2, #52284	; 0xcc3c
   103f0:	f2c0 0201 	movt	r2, #1
   103f4:	2121      	movs	r1, #33	; 0x21
   103f6:	f004 fe6b 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103fa:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   103fc:	f64c 40b0 	movw	r0, #52400	; 0xccb0
   10400:	f2c0 0001 	movt	r0, #1
   10404:	2210      	movs	r2, #16
   10406:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1040a:	f004 fe77 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1040e:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   10410:	f64c 5000 	movw	r0, #52480	; 0xcd00
   10414:	f2c0 0001 	movt	r0, #1
   10418:	2210      	movs	r2, #16
   1041a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1041e:	f004 fe6d 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10422:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   10424:	f64c 5050 	movw	r0, #52560	; 0xcd50
   10428:	f2c0 0001 	movt	r0, #1
   1042c:	2210      	movs	r2, #16
   1042e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10432:	f004 fe63 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10436:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   10438:	f64c 50a0 	movw	r0, #52640	; 0xcda0
   1043c:	f2c0 0001 	movt	r0, #1
   10440:	2210      	movs	r2, #16
   10442:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10446:	f004 fe59 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1044a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   1044c:	f64c 50f0 	movw	r0, #52720	; 0xcdf0
   10450:	f2c0 0001 	movt	r0, #1
   10454:	2210      	movs	r2, #16
   10456:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1045a:	f004 fe4f 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1045e:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   10460:	f64c 6040 	movw	r0, #52800	; 0xce40
   10464:	f2c0 0001 	movt	r0, #1
   10468:	2210      	movs	r2, #16
   1046a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1046e:	f004 fe45 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10472:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   10474:	f64c 6084 	movw	r0, #52868	; 0xce84
   10478:	f2c0 0001 	movt	r0, #1
   1047c:	2210      	movs	r2, #16
   1047e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10482:	f004 fe3b 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10486:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   10488:	f64c 60d8 	movw	r0, #52952	; 0xced8
   1048c:	f2c0 0001 	movt	r0, #1
   10490:	2210      	movs	r2, #16
   10492:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10496:	f004 fe31 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1049a:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   1049c:	f64c 60e8 	movw	r0, #52968	; 0xcee8
   104a0:	f2c0 0001 	movt	r0, #1
   104a4:	2210      	movs	r2, #16
   104a6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   104aa:	f004 fe27 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   104ae:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   104b0:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   104b4:	f2c0 0001 	movt	r0, #1
   104b8:	f64c 62f8 	movw	r2, #52984	; 0xcef8
   104bc:	f2c0 0201 	movt	r2, #1
   104c0:	211c      	movs	r1, #28
   104c2:	f004 fe05 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   104c6:	defe      	udf	#254	; 0xfe
   104c8:	f64c 7008 	movw	r0, #53000	; 0xcf08
   104cc:	f2c0 0001 	movt	r0, #1
   104d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   104d4:	9967      	ldr	r1, [sp, #412]	; 0x19c
   104d6:	f004 fe11 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   104da:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   104dc:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   104e0:	f2c0 0001 	movt	r0, #1
   104e4:	f64c 7218 	movw	r2, #53016	; 0xcf18
   104e8:	f2c0 0201 	movt	r2, #1
   104ec:	211c      	movs	r1, #28
   104ee:	f004 fdef 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   104f2:	defe      	udf	#254	; 0xfe
   104f4:	f64c 7030 	movw	r0, #53040	; 0xcf30
   104f8:	f2c0 0001 	movt	r0, #1
   104fc:	f64c 7218 	movw	r2, #53016	; 0xcf18
   10500:	f2c0 0201 	movt	r2, #1
   10504:	2139      	movs	r1, #57	; 0x39
   10506:	f004 fde3 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1050a:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   1050c:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   10510:	f2c0 0001 	movt	r0, #1
   10514:	f64c 726c 	movw	r2, #53100	; 0xcf6c
   10518:	f2c0 0201 	movt	r2, #1
   1051c:	211c      	movs	r1, #28
   1051e:	f004 fdd7 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10522:	defe      	udf	#254	; 0xfe
   10524:	f64c 7030 	movw	r0, #53040	; 0xcf30
   10528:	f2c0 0001 	movt	r0, #1
   1052c:	f64c 726c 	movw	r2, #53100	; 0xcf6c
   10530:	f2c0 0201 	movt	r2, #1
   10534:	2139      	movs	r1, #57	; 0x39
   10536:	f004 fdcb 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1053a:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   1053c:	f64c 7090 	movw	r0, #53136	; 0xcf90
   10540:	f2c0 0001 	movt	r0, #1
   10544:	f64c 727c 	movw	r2, #53116	; 0xcf7c
   10548:	f2c0 0201 	movt	r2, #1
   1054c:	2121      	movs	r1, #33	; 0x21
   1054e:	f004 fdbf 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10552:	defe      	udf	#254	; 0xfe
   10554:	f64c 70d0 	movw	r0, #53200	; 0xcfd0
   10558:	f2c0 0001 	movt	r0, #1
   1055c:	f64c 72b4 	movw	r2, #53172	; 0xcfb4
   10560:	f2c0 0201 	movt	r2, #1
   10564:	2123      	movs	r1, #35	; 0x23
   10566:	f004 fdb3 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1056a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   1056c:	f24d 0034 	movw	r0, #53300	; 0xd034
   10570:	f2c0 0001 	movt	r0, #1
   10574:	2210      	movs	r2, #16
   10576:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1057a:	f004 fdbf 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1057e:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   10580:	f24d 1004 	movw	r0, #53508	; 0xd104
   10584:	f2c0 0001 	movt	r0, #1
   10588:	2210      	movs	r2, #16
   1058a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1058e:	f004 fdb5 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10592:	defe      	udf	#254	; 0xfe
   10594:	f24d 1014 	movw	r0, #53524	; 0xd114
   10598:	f2c0 0001 	movt	r0, #1
   1059c:	2210      	movs	r2, #16
   1059e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   105a2:	f004 fdab 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105a6:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   105a8:	f24d 1064 	movw	r0, #53604	; 0xd164
   105ac:	f2c0 0001 	movt	r0, #1
   105b0:	2210      	movs	r2, #16
   105b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105b6:	f004 fda1 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105ba:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   105bc:	f24d 1074 	movw	r0, #53620	; 0xd174
   105c0:	f2c0 0001 	movt	r0, #1
   105c4:	2210      	movs	r2, #16
   105c6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105ca:	f004 fd97 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105ce:	defe      	udf	#254	; 0xfe
   105d0:	f24d 1084 	movw	r0, #53636	; 0xd184
   105d4:	f2c0 0001 	movt	r0, #1
   105d8:	2210      	movs	r2, #16
   105da:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105de:	f004 fd8d 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105e2:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   105e4:	f24d 10d8 	movw	r0, #53720	; 0xd1d8
   105e8:	f2c0 0001 	movt	r0, #1
   105ec:	2210      	movs	r2, #16
   105ee:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   105f2:	f004 fd83 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105f6:	defe      	udf	#254	; 0xfe
   105f8:	f24d 10e8 	movw	r0, #53736	; 0xd1e8
   105fc:	f2c0 0001 	movt	r0, #1
   10600:	2210      	movs	r2, #16
   10602:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10606:	f004 fd79 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1060a:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   1060c:	f24d 10f8 	movw	r0, #53752	; 0xd1f8
   10610:	f2c0 0001 	movt	r0, #1
   10614:	2210      	movs	r2, #16
   10616:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1061a:	f004 fd6f 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1061e:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10620:	f24d 2048 	movw	r0, #53832	; 0xd248
   10624:	f2c0 0001 	movt	r0, #1
   10628:	2210      	movs	r2, #16
   1062a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1062e:	f004 fd65 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10632:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   10634:	f24d 2058 	movw	r0, #53848	; 0xd258
   10638:	f2c0 0001 	movt	r0, #1
   1063c:	2210      	movs	r2, #16
   1063e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10642:	f004 fd5b 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10646:	defe      	udf	#254	; 0xfe
   10648:	f24d 2068 	movw	r0, #53864	; 0xd268
   1064c:	f2c0 0001 	movt	r0, #1
   10650:	2210      	movs	r2, #16
   10652:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10656:	f004 fd51 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1065a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   1065c:	f24d 20b8 	movw	r0, #53944	; 0xd2b8
   10660:	f2c0 0001 	movt	r0, #1
   10664:	2210      	movs	r2, #16
   10666:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1066a:	f004 fd47 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1066e:	defe      	udf	#254	; 0xfe
   10670:	f24d 20c8 	movw	r0, #53960	; 0xd2c8
   10674:	f2c0 0001 	movt	r0, #1
   10678:	2210      	movs	r2, #16
   1067a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1067e:	f004 fd3d 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10682:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10684:	f24d 20d8 	movw	r0, #53976	; 0xd2d8
   10688:	f2c0 0001 	movt	r0, #1
   1068c:	2210      	movs	r2, #16
   1068e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10692:	f004 fd33 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10696:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   10698:	f24d 3028 	movw	r0, #54056	; 0xd328
   1069c:	f2c0 0001 	movt	r0, #1
   106a0:	2210      	movs	r2, #16
   106a2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   106a6:	f004 fd29 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106aa:	defe      	udf	#254	; 0xfe
   106ac:	f24d 3038 	movw	r0, #54072	; 0xd338
   106b0:	f2c0 0001 	movt	r0, #1
   106b4:	2210      	movs	r2, #16
   106b6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   106ba:	f004 fd1f 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106be:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   106c0:	f24d 3048 	movw	r0, #54088	; 0xd348
   106c4:	f2c0 0001 	movt	r0, #1
   106c8:	2210      	movs	r2, #16
   106ca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   106ce:	f004 fd15 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106d2:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   106d4:	f24d 3098 	movw	r0, #54168	; 0xd398
   106d8:	f2c0 0001 	movt	r0, #1
   106dc:	2210      	movs	r2, #16
   106de:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   106e2:	f004 fd0b 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106e6:	defe      	udf	#254	; 0xfe
   106e8:	f24d 30a8 	movw	r0, #54184	; 0xd3a8
   106ec:	f2c0 0001 	movt	r0, #1
   106f0:	2210      	movs	r2, #16
   106f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   106f6:	f004 fd01 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106fa:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   106fc:	f24d 30f8 	movw	r0, #54264	; 0xd3f8
   10700:	f2c0 0001 	movt	r0, #1
   10704:	2210      	movs	r2, #16
   10706:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1070a:	f004 fcf7 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1070e:	defe      	udf	#254	; 0xfe
   10710:	f24d 4008 	movw	r0, #54280	; 0xd408
   10714:	f2c0 0001 	movt	r0, #1
   10718:	2210      	movs	r2, #16
   1071a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1071e:	f004 fced 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10722:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10724:	f24d 4058 	movw	r0, #54360	; 0xd458
   10728:	f2c0 0001 	movt	r0, #1
   1072c:	2210      	movs	r2, #16
   1072e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10732:	f004 fce3 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10736:	defe      	udf	#254	; 0xfe
   10738:	f24d 4068 	movw	r0, #54376	; 0xd468
   1073c:	f2c0 0001 	movt	r0, #1
   10740:	2210      	movs	r2, #16
   10742:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10746:	f004 fcd9 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1074a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   1074c:	f24d 40b8 	movw	r0, #54456	; 0xd4b8
   10750:	f2c0 0001 	movt	r0, #1
   10754:	2210      	movs	r2, #16
   10756:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1075a:	f004 fccf 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1075e:	defe      	udf	#254	; 0xfe
   10760:	f24d 40c8 	movw	r0, #54472	; 0xd4c8
   10764:	f2c0 0001 	movt	r0, #1
   10768:	2210      	movs	r2, #16
   1076a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1076e:	f004 fcc5 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10772:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10774:	f24d 5018 	movw	r0, #54552	; 0xd518
   10778:	f2c0 0001 	movt	r0, #1
   1077c:	2210      	movs	r2, #16
   1077e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10782:	f004 fcbb 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10786:	defe      	udf	#254	; 0xfe
   10788:	f24d 5028 	movw	r0, #54568	; 0xd528
   1078c:	f2c0 0001 	movt	r0, #1
   10790:	2210      	movs	r2, #16
   10792:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10796:	f004 fcb1 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1079a:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   1079c:	f24d 5078 	movw	r0, #54648	; 0xd578
   107a0:	f2c0 0001 	movt	r0, #1
   107a4:	2210      	movs	r2, #16
   107a6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107aa:	f004 fca7 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107ae:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   107b0:	f24d 6060 	movw	r0, #54880	; 0xd660
   107b4:	f2c0 0001 	movt	r0, #1
   107b8:	2210      	movs	r2, #16
   107ba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107be:	f004 fc9d 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107c2:	defe      	udf	#254	; 0xfe
   107c4:	f24d 6070 	movw	r0, #54896	; 0xd670
   107c8:	f2c0 0001 	movt	r0, #1
   107cc:	2210      	movs	r2, #16
   107ce:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   107d2:	f004 fc93 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107d6:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   107d8:	f24d 60c0 	movw	r0, #54976	; 0xd6c0
   107dc:	f2c0 0001 	movt	r0, #1
   107e0:	2210      	movs	r2, #16
   107e2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107e6:	f004 fc89 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107ea:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   107ec:	f24d 7010 	movw	r0, #55056	; 0xd710
   107f0:	f2c0 0001 	movt	r0, #1
   107f4:	2210      	movs	r2, #16
   107f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107fa:	f004 fc7f 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107fe:	defe      	udf	#254	; 0xfe

00010800 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10800:	b580      	push	{r7, lr}
   10802:	b086      	sub	sp, #24
   10804:	9104      	str	r1, [sp, #16]
   10806:	9205      	str	r2, [sp, #20]
   10808:	6809      	ldr	r1, [r1, #0]
   1080a:	6809      	ldr	r1, [r1, #0]
   1080c:	2300      	movs	r3, #0
   1080e:	9301      	str	r3, [sp, #4]
   10810:	9102      	str	r1, [sp, #8]
   10812:	9203      	str	r2, [sp, #12]
   10814:	9901      	ldr	r1, [sp, #4]
   10816:	9a02      	ldr	r2, [sp, #8]
   10818:	9b03      	ldr	r3, [sp, #12]
   1081a:	f000 fbc4 	bl	10fa6 <_ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE>
   1081e:	e7ff      	b.n	10820 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE+0x20>
   10820:	b006      	add	sp, #24
   10822:	bd80      	pop	{r7, pc}

00010824 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h21f208ed1261e104E>:
   10824:	b084      	sub	sp, #16
   10826:	9002      	str	r0, [sp, #8]
   10828:	9103      	str	r1, [sp, #12]
   1082a:	6800      	ldr	r0, [r0, #0]
   1082c:	9000      	str	r0, [sp, #0]
   1082e:	9101      	str	r1, [sp, #4]
   10830:	9800      	ldr	r0, [sp, #0]
   10832:	9901      	ldr	r1, [sp, #4]
   10834:	b004      	add	sp, #16
   10836:	4770      	bx	lr

00010838 <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>:
    fn jump(&mut self, pc: u16) {
   10838:	b082      	sub	sp, #8
   1083a:	460a      	mov	r2, r1
   1083c:	9000      	str	r0, [sp, #0]
   1083e:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   10842:	8241      	strh	r1, [r0, #18]
    }
   10844:	b002      	add	sp, #8
   10846:	4770      	bx	lr

00010848 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE>:
    fn load(&mut self, rom: &[u8]) {
   10848:	b580      	push	{r7, lr}
   1084a:	b08a      	sub	sp, #40	; 0x28
   1084c:	9105      	str	r1, [sp, #20]
   1084e:	9206      	str	r2, [sp, #24]
   10850:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10852:	3047      	adds	r0, #71	; 0x47
   10854:	9905      	ldr	r1, [sp, #20]
   10856:	9a06      	ldr	r2, [sp, #24]
   10858:	9004      	str	r0, [sp, #16]
   1085a:	4608      	mov	r0, r1
   1085c:	4611      	mov	r1, r2
   1085e:	f000 ff3f 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10862:	9003      	str	r0, [sp, #12]
   10864:	e7ff      	b.n	10866 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x1e>
   10866:	9803      	ldr	r0, [sp, #12]
   10868:	f500 7100 	add.w	r1, r0, #512	; 0x200
   1086c:	460a      	mov	r2, r1
   1086e:	4281      	cmp	r1, r0
   10870:	9202      	str	r2, [sp, #8]
   10872:	d318      	bcc.n	108a6 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x5e>
   10874:	e7ff      	b.n	10876 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x2e>
   10876:	f44f 7000 	mov.w	r0, #512	; 0x200
   1087a:	9007      	str	r0, [sp, #28]
   1087c:	9802      	ldr	r0, [sp, #8]
   1087e:	9008      	str	r0, [sp, #32]
   10880:	9a07      	ldr	r2, [sp, #28]
   10882:	9b08      	ldr	r3, [sp, #32]
   10884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10888:	9804      	ldr	r0, [sp, #16]
   1088a:	f003 fe95 	bl	145b8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   1088e:	9001      	str	r0, [sp, #4]
   10890:	9100      	str	r1, [sp, #0]
   10892:	e7ff      	b.n	10894 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x4c>
   10894:	9a05      	ldr	r2, [sp, #20]
   10896:	9b06      	ldr	r3, [sp, #24]
   10898:	9801      	ldr	r0, [sp, #4]
   1089a:	9900      	ldr	r1, [sp, #0]
   1089c:	f7f8 fa67 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   108a0:	e7ff      	b.n	108a2 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x5a>
    }
   108a2:	b00a      	add	sp, #40	; 0x28
   108a4:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   108a6:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
   108aa:	f2c0 0001 	movt	r0, #1
   108ae:	f64d 026c 	movw	r2, #55404	; 0xd86c
   108b2:	f2c0 0201 	movt	r2, #1
   108b6:	211c      	movs	r1, #28
   108b8:	f004 fc0a 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108bc:	defe      	udf	#254	; 0xfe

000108be <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>:
    fn next(&mut self) {
   108be:	b580      	push	{r7, lr}
   108c0:	b084      	sub	sp, #16
   108c2:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   108c4:	8a41      	ldrh	r1, [r0, #18]
   108c6:	2202      	movs	r2, #2
   108c8:	9002      	str	r0, [sp, #8]
   108ca:	4608      	mov	r0, r1
   108cc:	4611      	mov	r1, r2
   108ce:	f003 fe1d 	bl	1450c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   108d2:	9001      	str	r0, [sp, #4]
   108d4:	e7ff      	b.n	108d6 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE+0x18>
   108d6:	9802      	ldr	r0, [sp, #8]
   108d8:	9901      	ldr	r1, [sp, #4]
   108da:	f7ff ffad 	bl	10838 <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
   108de:	e7ff      	b.n	108e0 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE+0x22>
    }
   108e0:	b004      	add	sp, #16
   108e2:	bd80      	pop	{r7, pc}

000108e4 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E>:
    fn push(&mut self, item: u16) {
   108e4:	b580      	push	{r7, lr}
   108e6:	b086      	sub	sp, #24
   108e8:	460a      	mov	r2, r1
   108ea:	9004      	str	r0, [sp, #16]
   108ec:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   108f0:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   108f4:	460b      	mov	r3, r1
   108f6:	290f      	cmp	r1, #15
   108f8:	9003      	str	r0, [sp, #12]
   108fa:	9202      	str	r2, [sp, #8]
   108fc:	9301      	str	r3, [sp, #4]
   108fe:	d813      	bhi.n	10928 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E+0x44>
   10900:	e7ff      	b.n	10902 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E+0x1e>
   10902:	9803      	ldr	r0, [sp, #12]
   10904:	9901      	ldr	r1, [sp, #4]
   10906:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   1090a:	9b02      	ldr	r3, [sp, #8]
   1090c:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   1090e:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10912:	2101      	movs	r1, #1
   10914:	f003 fd5d 	bl	143d2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   10918:	9000      	str	r0, [sp, #0]
   1091a:	e7ff      	b.n	1091c <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E+0x38>
   1091c:	9800      	ldr	r0, [sp, #0]
   1091e:	9903      	ldr	r1, [sp, #12]
   10920:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10924:	b006      	add	sp, #24
   10926:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   10928:	f64d 007c 	movw	r0, #55420	; 0xd87c
   1092c:	f2c0 0001 	movt	r0, #1
   10930:	2210      	movs	r2, #16
   10932:	9901      	ldr	r1, [sp, #4]
   10934:	f004 fbe2 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10938:	defe      	udf	#254	; 0xfe

0001093a <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E>:
    fn tick(&mut self) {
   1093a:	b580      	push	{r7, lr}
   1093c:	b084      	sub	sp, #16
   1093e:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   10940:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10944:	2900      	cmp	r1, #0
   10946:	9002      	str	r0, [sp, #8]
   10948:	d00f      	beq.n	1096a <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x30>
   1094a:	e7ff      	b.n	1094c <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x12>
            self.dt -= 1;
   1094c:	9802      	ldr	r0, [sp, #8]
   1094e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10952:	3901      	subs	r1, #1
   10954:	b2ca      	uxtb	r2, r1
   10956:	460b      	mov	r3, r1
   10958:	428a      	cmp	r2, r1
   1095a:	9301      	str	r3, [sp, #4]
   1095c:	d129      	bne.n	109b2 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x78>
   1095e:	e7ff      	b.n	10960 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x26>
   10960:	9801      	ldr	r0, [sp, #4]
   10962:	9902      	ldr	r1, [sp, #8]
   10964:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   10968:	e7ff      	b.n	1096a <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x30>
        if self.st > 0 {
   1096a:	9802      	ldr	r0, [sp, #8]
   1096c:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10970:	2900      	cmp	r1, #0
   10972:	d01c      	beq.n	109ae <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x74>
   10974:	e7ff      	b.n	10976 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x3c>
            self.st -= 1;
   10976:	9802      	ldr	r0, [sp, #8]
   10978:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   1097c:	3901      	subs	r1, #1
   1097e:	b2ca      	uxtb	r2, r1
   10980:	460b      	mov	r3, r1
   10982:	428a      	cmp	r2, r1
   10984:	9300      	str	r3, [sp, #0]
   10986:	d120      	bne.n	109ca <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x90>
   10988:	e7ff      	b.n	1098a <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x50>
   1098a:	9800      	ldr	r0, [sp, #0]
   1098c:	9902      	ldr	r1, [sp, #8]
   1098e:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10992:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10996:	2a00      	cmp	r2, #0
   10998:	d108      	bne.n	109ac <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x72>
   1099a:	e7ff      	b.n	1099c <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x62>
   1099c:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
   109a0:	9902      	ldr	r1, [sp, #8]
   109a2:	4408      	add	r0, r1
   109a4:	f7fb fdf9 	bl	c59a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h82c48d5866118aadE>
   109a8:	e7ff      	b.n	109aa <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x70>
            if self.st == 0 {
   109aa:	e7ff      	b.n	109ac <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x72>
        if self.st > 0 {
   109ac:	e7ff      	b.n	109ae <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x74>
    }
   109ae:	b004      	add	sp, #16
   109b0:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   109b2:	f64c 7090 	movw	r0, #53136	; 0xcf90
   109b6:	f2c0 0001 	movt	r0, #1
   109ba:	f64d 028c 	movw	r2, #55436	; 0xd88c
   109be:	f2c0 0201 	movt	r2, #1
   109c2:	2121      	movs	r1, #33	; 0x21
   109c4:	f004 fb84 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109c8:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   109ca:	f64c 7090 	movw	r0, #53136	; 0xcf90
   109ce:	f2c0 0001 	movt	r0, #1
   109d2:	f64d 029c 	movw	r2, #55452	; 0xd89c
   109d6:	f2c0 0201 	movt	r2, #1
   109da:	2121      	movs	r1, #33	; 0x21
   109dc:	f004 fb78 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109e0:	defe      	udf	#254	; 0xfe

000109e2 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E>:
    fn sched(&mut self) {
   109e2:	b510      	push	{r4, lr}
   109e4:	b098      	sub	sp, #96	; 0x60
   109e6:	9015      	str	r0, [sp, #84]	; 0x54
   109e8:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
   109ec:	4401      	add	r1, r0
   109ee:	900b      	str	r0, [sp, #44]	; 0x2c
   109f0:	4608      	mov	r0, r1
   109f2:	f7fb fdd6 	bl	c5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E>
   109f6:	900a      	str	r0, [sp, #40]	; 0x28
   109f8:	e7ff      	b.n	109fa <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x18>
   109fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   109fc:	07c1      	lsls	r1, r0, #31
   109fe:	2900      	cmp	r1, #0
   10a00:	d005      	beq.n	10a0e <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x2c>
   10a02:	e7ff      	b.n	10a04 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x22>
            self.shutdown();
   10a04:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a06:	f000 f90e 	bl	10c26 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h045ae3f7c372d833E>
   10a0a:	e7ff      	b.n	10a0c <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x2a>
        if self.hw.sched() {
   10a0c:	e7ff      	b.n	10a0e <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x2c>
        if let Some(t) = self.time {
   10a0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a10:	6801      	ldr	r1, [r0, #0]
   10a12:	2901      	cmp	r1, #1
   10a14:	d009      	beq.n	10a2a <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x48>
   10a16:	e7ff      	b.n	10a18 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x36>
   10a18:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
   10a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10a1e:	4408      	add	r0, r1
   10a20:	f7fb fd59 	bl	c4d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>
   10a24:	9109      	str	r1, [sp, #36]	; 0x24
   10a26:	9008      	str	r0, [sp, #32]
   10a28:	e046      	b.n	10ab8 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xd6>
        if let Some(t) = self.time {
   10a2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a2c:	6881      	ldr	r1, [r0, #8]
   10a2e:	68c2      	ldr	r2, [r0, #12]
   10a30:	9217      	str	r2, [sp, #92]	; 0x5c
   10a32:	9116      	str	r1, [sp, #88]	; 0x58
   10a34:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10a38:	4418      	add	r0, r3
   10a3a:	9107      	str	r1, [sp, #28]
   10a3c:	9206      	str	r2, [sp, #24]
   10a3e:	f7fb fd4a 	bl	c4d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>
   10a42:	9105      	str	r1, [sp, #20]
   10a44:	9004      	str	r0, [sp, #16]
   10a46:	e7ff      	b.n	10a48 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x66>
   10a48:	9804      	ldr	r0, [sp, #16]
   10a4a:	9905      	ldr	r1, [sp, #20]
   10a4c:	9a07      	ldr	r2, [sp, #28]
   10a4e:	9b06      	ldr	r3, [sp, #24]
   10a50:	f003 fd7e 	bl	14550 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   10a54:	9103      	str	r1, [sp, #12]
   10a56:	9002      	str	r0, [sp, #8]
   10a58:	e7ff      	b.n	10a5a <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x78>
   10a5a:	f245 002b 	movw	r0, #20523	; 0x502b
   10a5e:	f2c0 00fe 	movt	r0, #254	; 0xfe
   10a62:	9902      	ldr	r1, [sp, #8]
   10a64:	1a08      	subs	r0, r1, r0
   10a66:	9a03      	ldr	r2, [sp, #12]
   10a68:	f172 0300 	sbcs.w	r3, r2, #0
   10a6c:	d323      	bcc.n	10ab6 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xd4>
   10a6e:	e7ff      	b.n	10a70 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x8e>
                self.tick();
   10a70:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a72:	f7ff ff62 	bl	1093a <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E>
   10a76:	e7ff      	b.n	10a78 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x96>
   10a78:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
   10a7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10a7e:	4408      	add	r0, r1
   10a80:	f7fb fd29 	bl	c4d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>
   10a84:	9101      	str	r1, [sp, #4]
   10a86:	9000      	str	r0, [sp, #0]
   10a88:	e7ff      	b.n	10a8a <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xa8>
   10a8a:	9800      	ldr	r0, [sp, #0]
   10a8c:	900e      	str	r0, [sp, #56]	; 0x38
   10a8e:	9901      	ldr	r1, [sp, #4]
   10a90:	910f      	str	r1, [sp, #60]	; 0x3c
   10a92:	2200      	movs	r2, #0
   10a94:	920d      	str	r2, [sp, #52]	; 0x34
   10a96:	2201      	movs	r2, #1
   10a98:	920c      	str	r2, [sp, #48]	; 0x30
   10a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a9e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10aa2:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   10aa6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10aa8:	6063      	str	r3, [r4, #4]
   10aaa:	6022      	str	r2, [r4, #0]
   10aac:	f8c4 e00c 	str.w	lr, [r4, #12]
   10ab0:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10ab4:	e7ff      	b.n	10ab6 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xd4>
        if let Some(t) = self.time {
   10ab6:	e015      	b.n	10ae4 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x102>
            self.time = Some(self.hw.clock());
   10ab8:	9808      	ldr	r0, [sp, #32]
   10aba:	9012      	str	r0, [sp, #72]	; 0x48
   10abc:	9909      	ldr	r1, [sp, #36]	; 0x24
   10abe:	9113      	str	r1, [sp, #76]	; 0x4c
   10ac0:	2200      	movs	r2, #0
   10ac2:	9211      	str	r2, [sp, #68]	; 0x44
   10ac4:	2201      	movs	r2, #1
   10ac6:	9210      	str	r2, [sp, #64]	; 0x40
   10ac8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10acc:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   10ad0:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   10ad4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10ad6:	6063      	str	r3, [r4, #4]
   10ad8:	6022      	str	r2, [r4, #0]
   10ada:	f8c4 e00c 	str.w	lr, [r4, #12]
   10ade:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   10ae2:	e7ff      	b.n	10ae4 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x102>
    }
   10ae4:	b018      	add	sp, #96	; 0x60
   10ae6:	bd10      	pop	{r4, pc}

00010ae8 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE>:
    fn setup(&mut self) {
   10ae8:	b580      	push	{r7, lr}
   10aea:	b088      	sub	sp, #32
   10aec:	9007      	str	r0, [sp, #28]
   10aee:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   10af2:	8241      	strh	r1, [r0, #18]
   10af4:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
   10af8:	4401      	add	r1, r0
   10afa:	f64c 2264 	movw	r2, #51812	; 0xca64
   10afe:	f2c0 0201 	movt	r2, #1
   10b02:	6813      	ldr	r3, [r2, #0]
   10b04:	6852      	ldr	r2, [r2, #4]
   10b06:	9005      	str	r0, [sp, #20]
   10b08:	4608      	mov	r0, r1
   10b0a:	4619      	mov	r1, r3
   10b0c:	f7fb fcac 	bl	c468 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E>
   10b10:	e7ff      	b.n	10b12 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   10b12:	9805      	ldr	r0, [sp, #20]
   10b14:	f100 0147 	add.w	r1, r0, #71	; 0x47
   10b18:	f64d 00ac 	movw	r0, #55468	; 0xd8ac
   10b1c:	f2c0 0001 	movt	r0, #1
   10b20:	2250      	movs	r2, #80	; 0x50
   10b22:	9104      	str	r1, [sp, #16]
   10b24:	4611      	mov	r1, r2
   10b26:	f000 fddb 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10b2a:	9003      	str	r0, [sp, #12]
   10b2c:	e7ff      	b.n	10b2e <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x46>
   10b2e:	9803      	ldr	r0, [sp, #12]
   10b30:	9006      	str	r0, [sp, #24]
   10b32:	9a06      	ldr	r2, [sp, #24]
   10b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10b38:	9804      	ldr	r0, [sp, #16]
   10b3a:	f7f8 fa15 	bl	8f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   10b3e:	9002      	str	r0, [sp, #8]
   10b40:	9101      	str	r1, [sp, #4]
   10b42:	e7ff      	b.n	10b44 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x5c>
   10b44:	f64d 02ac 	movw	r2, #55468	; 0xd8ac
   10b48:	f2c0 0201 	movt	r2, #1
   10b4c:	2350      	movs	r3, #80	; 0x50
   10b4e:	9802      	ldr	r0, [sp, #8]
   10b50:	9901      	ldr	r1, [sp, #4]
   10b52:	f7f8 f90c 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10b56:	e7ff      	b.n	10b58 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x70>
   10b58:	f241 0047 	movw	r0, #4167	; 0x1047
   10b5c:	2101      	movs	r1, #1
        self.running = true;
   10b5e:	9a05      	ldr	r2, [sp, #20]
   10b60:	5411      	strb	r1, [r2, r0]
    }
   10b62:	b008      	add	sp, #32
   10b64:	bd80      	pop	{r7, pc}

00010b66 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E>:
    fn waitkey(&mut self) -> u8 {
   10b66:	b580      	push	{r7, lr}
   10b68:	b08c      	sub	sp, #48	; 0x30
   10b6a:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   10b6c:	9005      	str	r0, [sp, #20]
   10b6e:	e7ff      	b.n	10b70 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xa>
   10b70:	f241 0047 	movw	r0, #4167	; 0x1047
   10b74:	9905      	ldr	r1, [sp, #20]
   10b76:	5c08      	ldrb	r0, [r1, r0]
   10b78:	07c0      	lsls	r0, r0, #31
   10b7a:	2800      	cmp	r0, #0
   10b7c:	d104      	bne.n	10b88 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x22>
   10b7e:	e7ff      	b.n	10b80 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x1a>
   10b80:	2020      	movs	r0, #32
        return b' ';
   10b82:	f88d 001b 	strb.w	r0, [sp, #27]
   10b86:	e04a      	b.n	10c1e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xb8>
            self.sched();
   10b88:	9805      	ldr	r0, [sp, #20]
   10b8a:	f7ff ff2a 	bl	109e2 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E>
   10b8e:	e7ff      	b.n	10b90 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x2a>
   10b90:	2000      	movs	r0, #0
            for i in 0..0xf {
   10b92:	f88d 001c 	strb.w	r0, [sp, #28]
   10b96:	200f      	movs	r0, #15
   10b98:	f88d 001d 	strb.w	r0, [sp, #29]
   10b9c:	f89d 001c 	ldrb.w	r0, [sp, #28]
   10ba0:	f89d 101d 	ldrb.w	r1, [sp, #29]
   10ba4:	f000 fa09 	bl	10fba <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   10ba8:	9004      	str	r0, [sp, #16]
   10baa:	9103      	str	r1, [sp, #12]
   10bac:	e7ff      	b.n	10bae <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x48>
   10bae:	9804      	ldr	r0, [sp, #16]
   10bb0:	f88d 0020 	strb.w	r0, [sp, #32]
   10bb4:	9903      	ldr	r1, [sp, #12]
   10bb6:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   10bba:	e7ff      	b.n	10bbc <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x56>
   10bbc:	a808      	add	r0, sp, #32
   10bbe:	f000 f98b 	bl	10ed8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   10bc2:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   10bc6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   10bca:	e7ff      	b.n	10bcc <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x66>
   10bcc:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   10bd0:	07c1      	lsls	r1, r0, #31
   10bd2:	2900      	cmp	r1, #0
   10bd4:	d001      	beq.n	10bda <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x74>
   10bd6:	e7ff      	b.n	10bd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x72>
   10bd8:	e001      	b.n	10bde <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x78>
        while self.running {
   10bda:	e7c9      	b.n	10b70 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xa>
            for i in 0..0xf {
   10bdc:	defe      	udf	#254	; 0xfe
   10bde:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   10be2:	4601      	mov	r1, r0
   10be4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10be8:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10bec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   10bf0:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
   10bf4:	9b05      	ldr	r3, [sp, #20]
   10bf6:	441a      	add	r2, r3
   10bf8:	9002      	str	r0, [sp, #8]
   10bfa:	4610      	mov	r0, r2
   10bfc:	9a02      	ldr	r2, [sp, #8]
   10bfe:	9101      	str	r1, [sp, #4]
   10c00:	4611      	mov	r1, r2
   10c02:	f7fb fa5c 	bl	c0be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>
   10c06:	9000      	str	r0, [sp, #0]
   10c08:	e7ff      	b.n	10c0a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xa4>
   10c0a:	9800      	ldr	r0, [sp, #0]
   10c0c:	07c1      	lsls	r1, r0, #31
   10c0e:	2900      	cmp	r1, #0
   10c10:	d101      	bne.n	10c16 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xb0>
   10c12:	e7ff      	b.n	10c14 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xae>
            for i in 0..0xf {
   10c14:	e7d2      	b.n	10bbc <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x56>
                    return i;
   10c16:	9801      	ldr	r0, [sp, #4]
   10c18:	f88d 001b 	strb.w	r0, [sp, #27]
   10c1c:	e7ff      	b.n	10c1e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xb8>
    }
   10c1e:	f89d 001b 	ldrb.w	r0, [sp, #27]
   10c22:	b00c      	add	sp, #48	; 0x30
   10c24:	bd80      	pop	{r7, pc}

00010c26 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h045ae3f7c372d833E>:
    fn shutdown(&mut self) {
   10c26:	b081      	sub	sp, #4
   10c28:	9000      	str	r0, [sp, #0]
   10c2a:	f241 0147 	movw	r1, #4167	; 0x1047
   10c2e:	2200      	movs	r2, #0
        self.running = false;
   10c30:	5442      	strb	r2, [r0, r1]
    }
   10c32:	b001      	add	sp, #4
   10c34:	4770      	bx	lr

00010c36 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E>:
   10c36:	b580      	push	{r7, lr}
   10c38:	b082      	sub	sp, #8
   10c3a:	9101      	str	r1, [sp, #4]
   10c3c:	f000 f803 	bl	10c46 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE>
   10c40:	e7ff      	b.n	10c42 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E+0xc>
   10c42:	b002      	add	sp, #8
   10c44:	bd80      	pop	{r7, pc}

00010c46 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE>:
   10c46:	b580      	push	{r7, lr}
   10c48:	b0a0      	sub	sp, #128	; 0x80
   10c4a:	911c      	str	r1, [sp, #112]	; 0x70
   10c4c:	9103      	str	r1, [sp, #12]
   10c4e:	9002      	str	r0, [sp, #8]
   10c50:	e7ff      	b.n	10c52 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc>
   10c52:	9803      	ldr	r0, [sp, #12]
   10c54:	68c1      	ldr	r1, [r0, #12]
   10c56:	2901      	cmp	r1, #1
   10c58:	d11e      	bne.n	10c98 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x52>
   10c5a:	e7ff      	b.n	10c5c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x16>
   10c5c:	9803      	ldr	r0, [sp, #12]
   10c5e:	f100 0110 	add.w	r1, r0, #16
   10c62:	911e      	str	r1, [sp, #120]	; 0x78
   10c64:	a804      	add	r0, sp, #16
   10c66:	f000 f921 	bl	10eac <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE>
   10c6a:	e7ff      	b.n	10c6c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x26>
   10c6c:	9804      	ldr	r0, [sp, #16]
   10c6e:	2801      	cmp	r0, #1
   10c70:	d001      	beq.n	10c76 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x30>
   10c72:	e7ff      	b.n	10c74 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x2e>
   10c74:	e00f      	b.n	10c96 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x50>
   10c76:	9804      	ldr	r0, [sp, #16]
   10c78:	9905      	ldr	r1, [sp, #20]
   10c7a:	9a06      	ldr	r2, [sp, #24]
   10c7c:	9209      	str	r2, [sp, #36]	; 0x24
   10c7e:	9108      	str	r1, [sp, #32]
   10c80:	9007      	str	r0, [sp, #28]
   10c82:	9807      	ldr	r0, [sp, #28]
   10c84:	9908      	ldr	r1, [sp, #32]
   10c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10c88:	9b02      	ldr	r3, [sp, #8]
   10c8a:	609a      	str	r2, [r3, #8]
   10c8c:	6059      	str	r1, [r3, #4]
   10c8e:	6018      	str	r0, [r3, #0]
   10c90:	e7ff      	b.n	10c92 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x4c>
   10c92:	b020      	add	sp, #128	; 0x80
   10c94:	bd80      	pop	{r7, pc}
   10c96:	e7ff      	b.n	10c98 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x52>
   10c98:	a80a      	add	r0, sp, #40	; 0x28
   10c9a:	9903      	ldr	r1, [sp, #12]
   10c9c:	f000 f8f0 	bl	10e80 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE>
   10ca0:	e7ff      	b.n	10ca2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x5c>
   10ca2:	980a      	ldr	r0, [sp, #40]	; 0x28
   10ca4:	2800      	cmp	r0, #0
   10ca6:	d012      	beq.n	10cce <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x88>
   10ca8:	e7ff      	b.n	10caa <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x64>
   10caa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10cac:	990c      	ldr	r1, [sp, #48]	; 0x30
   10cae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10cb0:	9211      	str	r2, [sp, #68]	; 0x44
   10cb2:	9110      	str	r1, [sp, #64]	; 0x40
   10cb4:	900f      	str	r0, [sp, #60]	; 0x3c
   10cb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10cb8:	9910      	ldr	r1, [sp, #64]	; 0x40
   10cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10cbc:	921b      	str	r2, [sp, #108]	; 0x6c
   10cbe:	911a      	str	r1, [sp, #104]	; 0x68
   10cc0:	9019      	str	r0, [sp, #100]	; 0x64
   10cc2:	a816      	add	r0, sp, #88	; 0x58
   10cc4:	a919      	add	r1, sp, #100	; 0x64
   10cc6:	f000 f8d4 	bl	10e72 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc7e73cb793d71c2aE>
   10cca:	e028      	b.n	10d1e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd8>
   10ccc:	defe      	udf	#254	; 0xfe
   10cce:	9803      	ldr	r0, [sp, #12]
   10cd0:	301c      	adds	r0, #28
   10cd2:	f7fb fd63 	bl	c79c <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE>
   10cd6:	9001      	str	r0, [sp, #4]
   10cd8:	e7ff      	b.n	10cda <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x94>
   10cda:	9801      	ldr	r0, [sp, #4]
   10cdc:	f7fb fd98 	bl	c810 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE>
   10ce0:	900e      	str	r0, [sp, #56]	; 0x38
   10ce2:	e7ff      	b.n	10ce4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x9e>
   10ce4:	980e      	ldr	r0, [sp, #56]	; 0x38
   10ce6:	fab0 f180 	clz	r1, r0
   10cea:	0949      	lsrs	r1, r1, #5
   10cec:	2800      	cmp	r0, #0
   10cee:	d101      	bne.n	10cf4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xae>
   10cf0:	e7ff      	b.n	10cf2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xac>
   10cf2:	e009      	b.n	10d08 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc2>
   10cf4:	980e      	ldr	r0, [sp, #56]	; 0x38
   10cf6:	901f      	str	r0, [sp, #124]	; 0x7c
   10cf8:	9902      	ldr	r1, [sp, #8]
   10cfa:	9000      	str	r0, [sp, #0]
   10cfc:	4608      	mov	r0, r1
   10cfe:	9900      	ldr	r1, [sp, #0]
   10d00:	f000 f8d4 	bl	10eac <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE>
   10d04:	e00a      	b.n	10d1c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd6>
   10d06:	defe      	udf	#254	; 0xfe
   10d08:	f003 f85c 	bl	13dc4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   10d0c:	e7ff      	b.n	10d0e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc8>
   10d0e:	9802      	ldr	r0, [sp, #8]
   10d10:	f7fb fd79 	bl	c806 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   10d14:	e7ff      	b.n	10d16 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd0>
   10d16:	e7ff      	b.n	10d18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd2>
   10d18:	e7ff      	b.n	10d1a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd4>
   10d1a:	e7ba      	b.n	10c92 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x4c>
   10d1c:	e7fc      	b.n	10d18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd2>
   10d1e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10d20:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10d22:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10d24:	9215      	str	r2, [sp, #84]	; 0x54
   10d26:	9114      	str	r1, [sp, #80]	; 0x50
   10d28:	9013      	str	r0, [sp, #76]	; 0x4c
   10d2a:	2001      	movs	r0, #1
   10d2c:	9012      	str	r0, [sp, #72]	; 0x48
   10d2e:	e7ff      	b.n	10d30 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xea>
   10d30:	9812      	ldr	r0, [sp, #72]	; 0x48
   10d32:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10d34:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10d38:	f8dd c00c 	ldr.w	ip, [sp, #12]
   10d3c:	f8cc 3018 	str.w	r3, [ip, #24]
   10d40:	f8cc 2014 	str.w	r2, [ip, #20]
   10d44:	f8cc 1010 	str.w	r1, [ip, #16]
   10d48:	f8cc 000c 	str.w	r0, [ip, #12]
   10d4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10d4e:	2801      	cmp	r0, #1
   10d50:	d101      	bne.n	10d56 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x110>
   10d52:	e7ff      	b.n	10d54 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x10e>
   10d54:	e77d      	b.n	10c52 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc>
   10d56:	e7fd      	b.n	10d54 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x10e>

00010d58 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E>:
   10d58:	b5b0      	push	{r4, r5, r7, lr}
   10d5a:	b090      	sub	sp, #64	; 0x40
   10d5c:	680a      	ldr	r2, [r1, #0]
   10d5e:	684b      	ldr	r3, [r1, #4]
   10d60:	6889      	ldr	r1, [r1, #8]
   10d62:	910f      	str	r1, [sp, #60]	; 0x3c
   10d64:	930e      	str	r3, [sp, #56]	; 0x38
   10d66:	920d      	str	r2, [sp, #52]	; 0x34
   10d68:	a902      	add	r1, sp, #8
   10d6a:	aa0d      	add	r2, sp, #52	; 0x34
   10d6c:	9001      	str	r0, [sp, #4]
   10d6e:	4608      	mov	r0, r1
   10d70:	4611      	mov	r1, r2
   10d72:	f000 f80d 	bl	10d90 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h956bec499bd3b07aE>
   10d76:	e7ff      	b.n	10d78 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E+0x20>
   10d78:	a802      	add	r0, sp, #8
   10d7a:	9901      	ldr	r1, [sp, #4]
   10d7c:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   10d80:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   10d84:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   10d88:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   10d8c:	b010      	add	sp, #64	; 0x40
   10d8e:	bdb0      	pop	{r4, r5, r7, pc}

00010d90 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h956bec499bd3b07aE>:
   10d90:	b08b      	sub	sp, #44	; 0x2c
   10d92:	680a      	ldr	r2, [r1, #0]
   10d94:	684b      	ldr	r3, [r1, #4]
   10d96:	6889      	ldr	r1, [r1, #8]
   10d98:	9102      	str	r1, [sp, #8]
   10d9a:	9301      	str	r3, [sp, #4]
   10d9c:	9200      	str	r2, [sp, #0]
   10d9e:	2100      	movs	r1, #0
   10da0:	9103      	str	r1, [sp, #12]
   10da2:	9107      	str	r1, [sp, #28]
   10da4:	9900      	ldr	r1, [sp, #0]
   10da6:	9a01      	ldr	r2, [sp, #4]
   10da8:	9b02      	ldr	r3, [sp, #8]
   10daa:	6083      	str	r3, [r0, #8]
   10dac:	6042      	str	r2, [r0, #4]
   10dae:	6001      	str	r1, [r0, #0]
   10db0:	9903      	ldr	r1, [sp, #12]
   10db2:	9a04      	ldr	r2, [sp, #16]
   10db4:	9b05      	ldr	r3, [sp, #20]
   10db6:	f8dd c018 	ldr.w	ip, [sp, #24]
   10dba:	f8c0 c018 	str.w	ip, [r0, #24]
   10dbe:	6143      	str	r3, [r0, #20]
   10dc0:	6102      	str	r2, [r0, #16]
   10dc2:	60c1      	str	r1, [r0, #12]
   10dc4:	9907      	ldr	r1, [sp, #28]
   10dc6:	9a08      	ldr	r2, [sp, #32]
   10dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10dca:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   10dce:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   10dd2:	6243      	str	r3, [r0, #36]	; 0x24
   10dd4:	6202      	str	r2, [r0, #32]
   10dd6:	61c1      	str	r1, [r0, #28]
   10dd8:	b00b      	add	sp, #44	; 0x2c
   10dda:	4770      	bx	lr

00010ddc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had19db2520282693E>:
   10ddc:	b5b0      	push	{r4, r5, r7, lr}
   10dde:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   10de2:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   10de6:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   10dea:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   10dee:	bdb0      	pop	{r4, r5, r7, pc}

00010df0 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   10df0:	b580      	push	{r7, lr}
   10df2:	b084      	sub	sp, #16
   10df4:	4601      	mov	r1, r0
   10df6:	f88d 000f 	strb.w	r0, [sp, #15]
   10dfa:	9102      	str	r1, [sp, #8]
   10dfc:	f003 fbcc 	bl	14598 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   10e00:	9001      	str	r0, [sp, #4]
   10e02:	e7ff      	b.n	10e04 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   10e04:	9801      	ldr	r0, [sp, #4]
   10e06:	b004      	add	sp, #16
   10e08:	bd80      	pop	{r7, pc}

00010e0a <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   10e0a:	b580      	push	{r7, lr}
   10e0c:	b086      	sub	sp, #24
   10e0e:	460a      	mov	r2, r1
   10e10:	9004      	str	r0, [sp, #16]
   10e12:	f88d 1017 	strb.w	r1, [sp, #23]
   10e16:	9203      	str	r2, [sp, #12]
   10e18:	f000 fce6 	bl	117e8 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   10e1c:	9002      	str	r0, [sp, #8]
   10e1e:	e7ff      	b.n	10e20 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   10e20:	9802      	ldr	r0, [sp, #8]
   10e22:	9903      	ldr	r1, [sp, #12]
   10e24:	f000 fcf8 	bl	11818 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   10e28:	9001      	str	r0, [sp, #4]
   10e2a:	e7ff      	b.n	10e2c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   10e2c:	9801      	ldr	r0, [sp, #4]
   10e2e:	b006      	add	sp, #24
   10e30:	bd80      	pop	{r7, pc}

00010e32 <_ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE>:
   10e32:	b580      	push	{r7, lr}
   10e34:	b084      	sub	sp, #16
   10e36:	680a      	ldr	r2, [r1, #0]
   10e38:	684b      	ldr	r3, [r1, #4]
   10e3a:	6889      	ldr	r1, [r1, #8]
   10e3c:	9103      	str	r1, [sp, #12]
   10e3e:	9302      	str	r3, [sp, #8]
   10e40:	9201      	str	r2, [sp, #4]
   10e42:	a901      	add	r1, sp, #4
   10e44:	f7ff ff88 	bl	10d58 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E>
   10e48:	e7ff      	b.n	10e4a <_ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE+0x18>
   10e4a:	b004      	add	sp, #16
   10e4c:	bd80      	pop	{r7, pc}

00010e4e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h437121d4373158a5E>:
   10e4e:	b083      	sub	sp, #12
   10e50:	9100      	str	r1, [sp, #0]
   10e52:	9201      	str	r2, [sp, #4]
   10e54:	9302      	str	r3, [sp, #8]
   10e56:	6001      	str	r1, [r0, #0]
   10e58:	6042      	str	r2, [r0, #4]
   10e5a:	6083      	str	r3, [r0, #8]
   10e5c:	b003      	add	sp, #12
   10e5e:	4770      	bx	lr

00010e60 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6d2e3c3113406242E>:
   10e60:	b083      	sub	sp, #12
   10e62:	9100      	str	r1, [sp, #0]
   10e64:	9201      	str	r2, [sp, #4]
   10e66:	9302      	str	r3, [sp, #8]
   10e68:	6001      	str	r1, [r0, #0]
   10e6a:	6042      	str	r2, [r0, #4]
   10e6c:	6083      	str	r3, [r0, #8]
   10e6e:	b003      	add	sp, #12
   10e70:	4770      	bx	lr

00010e72 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc7e73cb793d71c2aE>:
   10e72:	680a      	ldr	r2, [r1, #0]
   10e74:	684b      	ldr	r3, [r1, #4]
   10e76:	6889      	ldr	r1, [r1, #8]
   10e78:	6081      	str	r1, [r0, #8]
   10e7a:	6043      	str	r3, [r0, #4]
   10e7c:	6002      	str	r2, [r0, #0]
   10e7e:	4770      	bx	lr

00010e80 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE>:
   10e80:	b580      	push	{r7, lr}
   10e82:	b086      	sub	sp, #24
   10e84:	9105      	str	r1, [sp, #20]
   10e86:	9004      	str	r0, [sp, #16]
   10e88:	4608      	mov	r0, r1
   10e8a:	9103      	str	r1, [sp, #12]
   10e8c:	f000 fbc4 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10e90:	9002      	str	r0, [sp, #8]
   10e92:	9101      	str	r1, [sp, #4]
   10e94:	e7ff      	b.n	10e96 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE+0x16>
   10e96:	9803      	ldr	r0, [sp, #12]
   10e98:	f100 0308 	add.w	r3, r0, #8
   10e9c:	9804      	ldr	r0, [sp, #16]
   10e9e:	9902      	ldr	r1, [sp, #8]
   10ea0:	9a01      	ldr	r2, [sp, #4]
   10ea2:	f7fb fba2 	bl	c5ea <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE>
   10ea6:	e7ff      	b.n	10ea8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE+0x28>
   10ea8:	b006      	add	sp, #24
   10eaa:	bd80      	pop	{r7, pc}

00010eac <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE>:
   10eac:	b580      	push	{r7, lr}
   10eae:	b086      	sub	sp, #24
   10eb0:	9105      	str	r1, [sp, #20]
   10eb2:	9004      	str	r0, [sp, #16]
   10eb4:	4608      	mov	r0, r1
   10eb6:	9103      	str	r1, [sp, #12]
   10eb8:	f000 fbae 	bl	11618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10ebc:	9002      	str	r0, [sp, #8]
   10ebe:	9101      	str	r1, [sp, #4]
   10ec0:	e7ff      	b.n	10ec2 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE+0x16>
   10ec2:	9803      	ldr	r0, [sp, #12]
   10ec4:	f100 0308 	add.w	r3, r0, #8
   10ec8:	9804      	ldr	r0, [sp, #16]
   10eca:	9902      	ldr	r1, [sp, #8]
   10ecc:	9a01      	ldr	r2, [sp, #4]
   10ece:	f7fb fbda 	bl	c686 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE>
   10ed2:	e7ff      	b.n	10ed4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE+0x28>
   10ed4:	b006      	add	sp, #24
   10ed6:	bd80      	pop	{r7, pc}

00010ed8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   10ed8:	b580      	push	{r7, lr}
   10eda:	b086      	sub	sp, #24
   10edc:	9005      	str	r0, [sp, #20]
   10ede:	2100      	movs	r1, #0
   10ee0:	f88d 1013 	strb.w	r1, [sp, #19]
   10ee4:	1c41      	adds	r1, r0, #1
   10ee6:	9002      	str	r0, [sp, #8]
   10ee8:	f003 fb7b 	bl	145e2 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   10eec:	9001      	str	r0, [sp, #4]
   10eee:	e7ff      	b.n	10ef0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   10ef0:	9801      	ldr	r0, [sp, #4]
   10ef2:	07c1      	lsls	r1, r0, #31
   10ef4:	2900      	cmp	r1, #0
   10ef6:	d104      	bne.n	10f02 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   10ef8:	e7ff      	b.n	10efa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   10efa:	2000      	movs	r0, #0
   10efc:	f88d 000c 	strb.w	r0, [sp, #12]
   10f00:	e02c      	b.n	10f5c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   10f02:	2001      	movs	r0, #1
   10f04:	f88d 0013 	strb.w	r0, [sp, #19]
   10f08:	9902      	ldr	r1, [sp, #8]
   10f0a:	9000      	str	r0, [sp, #0]
   10f0c:	4608      	mov	r0, r1
   10f0e:	9900      	ldr	r1, [sp, #0]
   10f10:	f003 fb73 	bl	145fa <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   10f14:	f88d 1011 	strb.w	r1, [sp, #17]
   10f18:	f88d 0010 	strb.w	r0, [sp, #16]
   10f1c:	e7ff      	b.n	10f1e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   10f1e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10f22:	07c0      	lsls	r0, r0, #31
   10f24:	2800      	cmp	r0, #0
   10f26:	d104      	bne.n	10f32 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   10f28:	e7ff      	b.n	10f2a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   10f2a:	2000      	movs	r0, #0
   10f2c:	f88d 000c 	strb.w	r0, [sp, #12]
   10f30:	e029      	b.n	10f86 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   10f32:	2000      	movs	r0, #0
   10f34:	f88d 0013 	strb.w	r0, [sp, #19]
   10f38:	f89d 0011 	ldrb.w	r0, [sp, #17]
   10f3c:	f88d 0012 	strb.w	r0, [sp, #18]
   10f40:	f10d 0012 	add.w	r0, sp, #18
   10f44:	9902      	ldr	r1, [sp, #8]
   10f46:	f003 fb2e 	bl	145a6 <_ZN4core3mem4swap17h206518364108b51fE>
   10f4a:	e7ff      	b.n	10f4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   10f4c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   10f50:	f88d 000d 	strb.w	r0, [sp, #13]
   10f54:	2001      	movs	r0, #1
   10f56:	f88d 000c 	strb.w	r0, [sp, #12]
   10f5a:	e014      	b.n	10f86 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   10f5c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10f60:	f89d 100d 	ldrb.w	r1, [sp, #13]
   10f64:	b006      	add	sp, #24
   10f66:	bd80      	pop	{r7, pc}
   10f68:	2000      	movs	r0, #0
   10f6a:	f88d 0013 	strb.w	r0, [sp, #19]
   10f6e:	e7f5      	b.n	10f5c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   10f70:	f89d 0013 	ldrb.w	r0, [sp, #19]
   10f74:	07c0      	lsls	r0, r0, #31
   10f76:	2800      	cmp	r0, #0
   10f78:	d0f6      	beq.n	10f68 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10f7a:	e7ff      	b.n	10f7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   10f7c:	2000      	movs	r0, #0
   10f7e:	f88d 0013 	strb.w	r0, [sp, #19]
   10f82:	e7f1      	b.n	10f68 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10f84:	e7f0      	b.n	10f68 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10f86:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10f8a:	07c0      	lsls	r0, r0, #31
   10f8c:	2800      	cmp	r0, #0
   10f8e:	d1ef      	bne.n	10f70 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   10f90:	e7f8      	b.n	10f84 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

00010f92 <_ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE>:
   10f92:	b580      	push	{r7, lr}
   10f94:	b084      	sub	sp, #16
   10f96:	9101      	str	r1, [sp, #4]
   10f98:	9202      	str	r2, [sp, #8]
   10f9a:	9303      	str	r3, [sp, #12]
   10f9c:	f7ff ff57 	bl	10e4e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h437121d4373158a5E>
   10fa0:	e7ff      	b.n	10fa2 <_ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE+0x10>
   10fa2:	b004      	add	sp, #16
   10fa4:	bd80      	pop	{r7, pc}

00010fa6 <_ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE>:
   10fa6:	b580      	push	{r7, lr}
   10fa8:	b084      	sub	sp, #16
   10faa:	9101      	str	r1, [sp, #4]
   10fac:	9202      	str	r2, [sp, #8]
   10fae:	9303      	str	r3, [sp, #12]
   10fb0:	f7ff ff56 	bl	10e60 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6d2e3c3113406242E>
   10fb4:	e7ff      	b.n	10fb6 <_ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE+0x10>
   10fb6:	b004      	add	sp, #16
   10fb8:	bd80      	pop	{r7, pc}

00010fba <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   10fba:	b081      	sub	sp, #4
   10fbc:	460a      	mov	r2, r1
   10fbe:	4603      	mov	r3, r0
   10fc0:	f88d 0000 	strb.w	r0, [sp]
   10fc4:	f88d 1001 	strb.w	r1, [sp, #1]
   10fc8:	b001      	add	sp, #4
   10fca:	4770      	bx	lr

00010fcc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   10fcc:	b084      	sub	sp, #16
   10fce:	9001      	str	r0, [sp, #4]
   10fd0:	9102      	str	r1, [sp, #8]
   10fd2:	4408      	add	r0, r1
   10fd4:	9003      	str	r0, [sp, #12]
   10fd6:	9803      	ldr	r0, [sp, #12]
   10fd8:	9000      	str	r0, [sp, #0]
   10fda:	e7ff      	b.n	10fdc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   10fdc:	9800      	ldr	r0, [sp, #0]
   10fde:	b004      	add	sp, #16
   10fe0:	4770      	bx	lr

00010fe2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   10fe2:	b082      	sub	sp, #8
   10fe4:	9001      	str	r0, [sp, #4]
   10fe6:	9000      	str	r0, [sp, #0]
   10fe8:	e7ff      	b.n	10fea <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   10fea:	9800      	ldr	r0, [sp, #0]
   10fec:	fab0 f180 	clz	r1, r0
   10ff0:	0948      	lsrs	r0, r1, #5
   10ff2:	b002      	add	sp, #8
   10ff4:	4770      	bx	lr

00010ff6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   10ff6:	b082      	sub	sp, #8
   10ff8:	9001      	str	r0, [sp, #4]
   10ffa:	9000      	str	r0, [sp, #0]
   10ffc:	9800      	ldr	r0, [sp, #0]
   10ffe:	b002      	add	sp, #8
   11000:	4770      	bx	lr

00011002 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   11002:	b081      	sub	sp, #4
   11004:	9000      	str	r0, [sp, #0]
   11006:	b001      	add	sp, #4
   11008:	4770      	bx	lr

0001100a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   1100a:	b580      	push	{r7, lr}
   1100c:	b084      	sub	sp, #16
   1100e:	9002      	str	r0, [sp, #8]
   11010:	9103      	str	r1, [sp, #12]
   11012:	f000 f805 	bl	11020 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11016:	9001      	str	r0, [sp, #4]
   11018:	e7ff      	b.n	1101a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   1101a:	9801      	ldr	r0, [sp, #4]
   1101c:	b004      	add	sp, #16
   1101e:	bd80      	pop	{r7, pc}

00011020 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   11020:	b084      	sub	sp, #16
   11022:	9001      	str	r0, [sp, #4]
   11024:	9102      	str	r1, [sp, #8]
   11026:	4408      	add	r0, r1
   11028:	9003      	str	r0, [sp, #12]
   1102a:	9803      	ldr	r0, [sp, #12]
   1102c:	9000      	str	r0, [sp, #0]
   1102e:	e7ff      	b.n	11030 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   11030:	9800      	ldr	r0, [sp, #0]
   11032:	b004      	add	sp, #16
   11034:	4770      	bx	lr

00011036 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   11036:	b082      	sub	sp, #8
   11038:	9001      	str	r0, [sp, #4]
   1103a:	9000      	str	r0, [sp, #0]
   1103c:	e7ff      	b.n	1103e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   1103e:	9800      	ldr	r0, [sp, #0]
   11040:	fab0 f180 	clz	r1, r0
   11044:	0948      	lsrs	r0, r1, #5
   11046:	b002      	add	sp, #8
   11048:	4770      	bx	lr

0001104a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   1104a:	b580      	push	{r7, lr}
   1104c:	b090      	sub	sp, #64	; 0x40
   1104e:	900c      	str	r0, [sp, #48]	; 0x30
   11050:	910d      	str	r1, [sp, #52]	; 0x34
   11052:	9007      	str	r0, [sp, #28]
   11054:	9106      	str	r1, [sp, #24]
   11056:	f000 ff6b 	bl	11f30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   1105a:	4601      	mov	r1, r0
   1105c:	900e      	str	r0, [sp, #56]	; 0x38
   1105e:	9105      	str	r1, [sp, #20]
   11060:	e7ff      	b.n	11062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   11062:	9805      	ldr	r0, [sp, #20]
   11064:	f7ff ffe7 	bl	11036 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11068:	e7ff      	b.n	1106a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   1106a:	e7ff      	b.n	1106c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   1106c:	2001      	movs	r0, #1
   1106e:	900f      	str	r0, [sp, #60]	; 0x3c
   11070:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11072:	9004      	str	r0, [sp, #16]
   11074:	e7ff      	b.n	11076 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   11076:	9804      	ldr	r0, [sp, #16]
   11078:	2800      	cmp	r0, #0
   1107a:	d006      	beq.n	1108a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   1107c:	e7ff      	b.n	1107e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   1107e:	9807      	ldr	r0, [sp, #28]
   11080:	9906      	ldr	r1, [sp, #24]
   11082:	f000 ff4d 	bl	11f20 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11086:	9003      	str	r0, [sp, #12]
   11088:	e00e      	b.n	110a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   1108a:	9807      	ldr	r0, [sp, #28]
   1108c:	9906      	ldr	r1, [sp, #24]
   1108e:	f000 ff47 	bl	11f20 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11092:	9002      	str	r0, [sp, #8]
   11094:	e7ff      	b.n	11096 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   11096:	9805      	ldr	r0, [sp, #20]
   11098:	9902      	ldr	r1, [sp, #8]
   1109a:	f7ff ffb6 	bl	1100a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   1109e:	9001      	str	r0, [sp, #4]
   110a0:	e7ff      	b.n	110a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   110a2:	9801      	ldr	r0, [sp, #4]
   110a4:	900a      	str	r0, [sp, #40]	; 0x28
   110a6:	e006      	b.n	110b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   110a8:	9805      	ldr	r0, [sp, #20]
   110aa:	9903      	ldr	r1, [sp, #12]
   110ac:	f000 ff15 	bl	11eda <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   110b0:	900a      	str	r0, [sp, #40]	; 0x28
   110b2:	e7ff      	b.n	110b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   110b4:	e7ff      	b.n	110b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   110b6:	9805      	ldr	r0, [sp, #20]
   110b8:	f7ff ff9d 	bl	10ff6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   110bc:	9000      	str	r0, [sp, #0]
   110be:	e7ff      	b.n	110c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   110c0:	980a      	ldr	r0, [sp, #40]	; 0x28
   110c2:	9900      	ldr	r1, [sp, #0]
   110c4:	9108      	str	r1, [sp, #32]
   110c6:	9009      	str	r0, [sp, #36]	; 0x24
   110c8:	9808      	ldr	r0, [sp, #32]
   110ca:	9909      	ldr	r1, [sp, #36]	; 0x24
   110cc:	b010      	add	sp, #64	; 0x40
   110ce:	bd80      	pop	{r7, pc}

000110d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   110d0:	b081      	sub	sp, #4
   110d2:	b001      	add	sp, #4
   110d4:	4770      	bx	lr

000110d6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   110d6:	b580      	push	{r7, lr}
   110d8:	b08e      	sub	sp, #56	; 0x38
   110da:	9007      	str	r0, [sp, #28]
   110dc:	6801      	ldr	r1, [r0, #0]
   110de:	9005      	str	r0, [sp, #20]
   110e0:	4608      	mov	r0, r1
   110e2:	f7ff ff8e 	bl	11002 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   110e6:	9004      	str	r0, [sp, #16]
   110e8:	e7ff      	b.n	110ea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   110ea:	9804      	ldr	r0, [sp, #16]
   110ec:	f7ff ff79 	bl	10fe2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   110f0:	e7ff      	b.n	110f2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   110f2:	e7ff      	b.n	110f4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   110f4:	2001      	movs	r0, #1
   110f6:	9008      	str	r0, [sp, #32]
   110f8:	9808      	ldr	r0, [sp, #32]
   110fa:	9003      	str	r0, [sp, #12]
   110fc:	e7ff      	b.n	110fe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   110fe:	9803      	ldr	r0, [sp, #12]
   11100:	2800      	cmp	r0, #0
   11102:	d007      	beq.n	11114 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11104:	e7ff      	b.n	11106 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   11106:	9805      	ldr	r0, [sp, #20]
   11108:	6840      	ldr	r0, [r0, #4]
   1110a:	f7ff ff94 	bl	11036 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   1110e:	e7ff      	b.n	11110 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11110:	e7ff      	b.n	11112 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   11112:	e7ff      	b.n	11114 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11114:	9805      	ldr	r0, [sp, #20]
   11116:	6800      	ldr	r0, [r0, #0]
   11118:	f7ff ff73 	bl	11002 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1111c:	9002      	str	r0, [sp, #8]
   1111e:	e7ff      	b.n	11120 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   11120:	9805      	ldr	r0, [sp, #20]
   11122:	6841      	ldr	r1, [r0, #4]
   11124:	9a02      	ldr	r2, [sp, #8]
   11126:	428a      	cmp	r2, r1
   11128:	d02e      	beq.n	11188 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   1112a:	e7ff      	b.n	1112c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   1112c:	9805      	ldr	r0, [sp, #20]
   1112e:	900a      	str	r0, [sp, #40]	; 0x28
   11130:	2101      	movs	r1, #1
   11132:	910b      	str	r1, [sp, #44]	; 0x2c
   11134:	910d      	str	r1, [sp, #52]	; 0x34
   11136:	990d      	ldr	r1, [sp, #52]	; 0x34
   11138:	2900      	cmp	r1, #0
   1113a:	d015      	beq.n	11168 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   1113c:	e7ff      	b.n	1113e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   1113e:	9805      	ldr	r0, [sp, #20]
   11140:	6800      	ldr	r0, [r0, #0]
   11142:	f7ff ff5e 	bl	11002 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11146:	900c      	str	r0, [sp, #48]	; 0x30
   11148:	9905      	ldr	r1, [sp, #20]
   1114a:	680a      	ldr	r2, [r1, #0]
   1114c:	9001      	str	r0, [sp, #4]
   1114e:	4610      	mov	r0, r2
   11150:	f7ff ff57 	bl	11002 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11154:	2101      	movs	r1, #1
   11156:	f7ff ff39 	bl	10fcc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   1115a:	f7ff ff4c 	bl	10ff6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   1115e:	9905      	ldr	r1, [sp, #20]
   11160:	6008      	str	r0, [r1, #0]
   11162:	9801      	ldr	r0, [sp, #4]
   11164:	9009      	str	r0, [sp, #36]	; 0x24
   11166:	e00c      	b.n	11182 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11168:	9805      	ldr	r0, [sp, #20]
   1116a:	6840      	ldr	r0, [r0, #4]
   1116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11170:	f7ff ff56 	bl	11020 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11174:	9905      	ldr	r1, [sp, #20]
   11176:	6048      	str	r0, [r1, #4]
   11178:	6808      	ldr	r0, [r1, #0]
   1117a:	f7ff ff42 	bl	11002 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1117e:	9009      	str	r0, [sp, #36]	; 0x24
   11180:	e7ff      	b.n	11182 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11182:	9809      	ldr	r0, [sp, #36]	; 0x24
   11184:	9000      	str	r0, [sp, #0]
   11186:	e002      	b.n	1118e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   11188:	2000      	movs	r0, #0
   1118a:	9006      	str	r0, [sp, #24]
   1118c:	e002      	b.n	11194 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   1118e:	9800      	ldr	r0, [sp, #0]
   11190:	9006      	str	r0, [sp, #24]
   11192:	e7ff      	b.n	11194 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11194:	9806      	ldr	r0, [sp, #24]
   11196:	b00e      	add	sp, #56	; 0x38
   11198:	bd80      	pop	{r7, pc}

0001119a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   1119a:	b580      	push	{r7, lr}
   1119c:	b084      	sub	sp, #16
   1119e:	9002      	str	r0, [sp, #8]
   111a0:	9103      	str	r1, [sp, #12]
   111a2:	6800      	ldr	r0, [r0, #0]
   111a4:	f000 f807 	bl	111b6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   111a8:	9001      	str	r0, [sp, #4]
   111aa:	e7ff      	b.n	111ac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   111ac:	9801      	ldr	r0, [sp, #4]
   111ae:	f000 0001 	and.w	r0, r0, #1
   111b2:	b004      	add	sp, #16
   111b4:	bd80      	pop	{r7, pc}

000111b6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   111b6:	b580      	push	{r7, lr}
   111b8:	b088      	sub	sp, #32
   111ba:	9006      	str	r0, [sp, #24]
   111bc:	9107      	str	r1, [sp, #28]
   111be:	9004      	str	r0, [sp, #16]
   111c0:	4608      	mov	r0, r1
   111c2:	9103      	str	r1, [sp, #12]
   111c4:	f004 fe25 	bl	15e12 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   111c8:	9002      	str	r0, [sp, #8]
   111ca:	e7ff      	b.n	111cc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   111cc:	9802      	ldr	r0, [sp, #8]
   111ce:	07c1      	lsls	r1, r0, #31
   111d0:	2900      	cmp	r1, #0
   111d2:	d105      	bne.n	111e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   111d4:	e7ff      	b.n	111d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   111d6:	9803      	ldr	r0, [sp, #12]
   111d8:	f004 fe1f 	bl	15e1a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   111dc:	9001      	str	r0, [sp, #4]
   111de:	e007      	b.n	111f0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   111e0:	9804      	ldr	r0, [sp, #16]
   111e2:	9903      	ldr	r1, [sp, #12]
   111e4:	f005 fbe0 	bl	169a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   111e8:	f88d 0017 	strb.w	r0, [sp, #23]
   111ec:	e7ff      	b.n	111ee <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   111ee:	e015      	b.n	1121c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   111f0:	9801      	ldr	r0, [sp, #4]
   111f2:	07c1      	lsls	r1, r0, #31
   111f4:	2900      	cmp	r1, #0
   111f6:	d107      	bne.n	11208 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   111f8:	e7ff      	b.n	111fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   111fa:	9804      	ldr	r0, [sp, #16]
   111fc:	9903      	ldr	r1, [sp, #12]
   111fe:	f005 fce6 	bl	16bce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   11202:	f88d 0017 	strb.w	r0, [sp, #23]
   11206:	e007      	b.n	11218 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   11208:	9804      	ldr	r0, [sp, #16]
   1120a:	9903      	ldr	r1, [sp, #12]
   1120c:	f005 fc37 	bl	16a7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11210:	f88d 0017 	strb.w	r0, [sp, #23]
   11214:	e7ff      	b.n	11216 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11216:	e000      	b.n	1121a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11218:	e7ff      	b.n	1121a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1121a:	e7ff      	b.n	1121c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1121c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11220:	b008      	add	sp, #32
   11222:	bd80      	pop	{r7, pc}

00011224 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   11224:	b084      	sub	sp, #16
   11226:	9002      	str	r0, [sp, #8]
   11228:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   1122a:	9000      	str	r0, [sp, #0]
   1122c:	9101      	str	r1, [sp, #4]
        }
   1122e:	9800      	ldr	r0, [sp, #0]
   11230:	9901      	ldr	r1, [sp, #4]
   11232:	b004      	add	sp, #16
   11234:	4770      	bx	lr

00011236 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11236:	b08b      	sub	sp, #44	; 0x2c
   11238:	4601      	mov	r1, r0
   1123a:	f8ad 0020 	strh.w	r0, [sp, #32]
   1123e:	0c00      	lsrs	r0, r0, #16
   11240:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11244:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11248:	f88d 001e 	strb.w	r0, [sp, #30]
   1124c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11250:	f8ad 001c 	strh.w	r0, [sp, #28]
   11254:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11258:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1125c:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11260:	4613      	mov	r3, r2
   11262:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11266:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1126a:	4694      	mov	ip, r2
   1126c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11270:	0200      	lsls	r0, r0, #8
   11272:	9306      	str	r3, [sp, #24]
   11274:	f8cd c014 	str.w	ip, [sp, #20]
   11278:	9004      	str	r0, [sp, #16]
   1127a:	e7ff      	b.n	1127c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   1127c:	9804      	ldr	r0, [sp, #16]
   1127e:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11282:	9a06      	ldr	r2, [sp, #24]
   11284:	b2d3      	uxtb	r3, r2
   11286:	00db      	lsls	r3, r3, #3
   11288:	9103      	str	r1, [sp, #12]
   1128a:	9302      	str	r3, [sp, #8]
   1128c:	e7ff      	b.n	1128e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   1128e:	9802      	ldr	r0, [sp, #8]
   11290:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11294:	9a03      	ldr	r2, [sp, #12]
   11296:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   11298:	9b05      	ldr	r3, [sp, #20]
   1129a:	fa5f fc83 	uxtb.w	ip, r3
   1129e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   112a2:	9101      	str	r1, [sp, #4]
   112a4:	f8cd c000 	str.w	ip, [sp]
   112a8:	e7ff      	b.n	112aa <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   112aa:	9800      	ldr	r0, [sp, #0]
   112ac:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   112b0:	9a01      	ldr	r2, [sp, #4]
   112b2:	4311      	orrs	r1, r2
   112b4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   112b8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   112bc:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   112c0:	b00b      	add	sp, #44	; 0x2c
   112c2:	4770      	bx	lr

000112c4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   112c4:	b580      	push	{r7, lr}
   112c6:	b088      	sub	sp, #32
   112c8:	9005      	str	r0, [sp, #20]
   112ca:	9106      	str	r1, [sp, #24]
   112cc:	9003      	str	r0, [sp, #12]
   112ce:	4608      	mov	r0, r1
   112d0:	f000 fa21 	bl	11716 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   112d4:	9004      	str	r0, [sp, #16]
   112d6:	e7ff      	b.n	112d8 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   112d8:	9804      	ldr	r0, [sp, #16]
   112da:	9007      	str	r0, [sp, #28]
   112dc:	9903      	ldr	r1, [sp, #12]
   112de:	680a      	ldr	r2, [r1, #0]
   112e0:	9002      	str	r0, [sp, #8]
   112e2:	4610      	mov	r0, r2
   112e4:	9902      	ldr	r1, [sp, #8]
   112e6:	f000 f837 	bl	11358 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   112ea:	9001      	str	r0, [sp, #4]
   112ec:	9100      	str	r1, [sp, #0]
   112ee:	e7ff      	b.n	112f0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   112f0:	9801      	ldr	r0, [sp, #4]
   112f2:	9900      	ldr	r1, [sp, #0]
   112f4:	b008      	add	sp, #32
   112f6:	bd80      	pop	{r7, pc}

000112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   112f8:	b580      	push	{r7, lr}
   112fa:	b084      	sub	sp, #16
   112fc:	9001      	str	r0, [sp, #4]
   112fe:	9102      	str	r1, [sp, #8]
   11300:	9203      	str	r2, [sp, #12]
   11302:	9000      	str	r0, [sp, #0]
   11304:	4608      	mov	r0, r1
   11306:	9900      	ldr	r1, [sp, #0]
   11308:	f00a f9ee 	bl	1b6e8 <__aeabi_memcpy>
   1130c:	e7ff      	b.n	1130e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   1130e:	b004      	add	sp, #16
   11310:	bd80      	pop	{r7, pc}

00011312 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11312:	b580      	push	{r7, lr}
   11314:	b084      	sub	sp, #16
   11316:	9001      	str	r0, [sp, #4]
   11318:	9102      	str	r1, [sp, #8]
   1131a:	9203      	str	r2, [sp, #12]
   1131c:	0092      	lsls	r2, r2, #2
   1131e:	9000      	str	r0, [sp, #0]
   11320:	4608      	mov	r0, r1
   11322:	9900      	ldr	r1, [sp, #0]
   11324:	f00a f9e0 	bl	1b6e8 <__aeabi_memcpy>
   11328:	e7ff      	b.n	1132a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   1132a:	b004      	add	sp, #16
   1132c:	bd80      	pop	{r7, pc}

0001132e <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   1132e:	b082      	sub	sp, #8
   11330:	9000      	str	r0, [sp, #0]
   11332:	9101      	str	r1, [sp, #4]
   11334:	6800      	ldr	r0, [r0, #0]
   11336:	6809      	ldr	r1, [r1, #0]
   11338:	2200      	movs	r2, #0
   1133a:	4288      	cmp	r0, r1
   1133c:	bf38      	it	cc
   1133e:	2201      	movcc	r2, #1
   11340:	4610      	mov	r0, r2
   11342:	b002      	add	sp, #8
   11344:	4770      	bx	lr

00011346 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11346:	b580      	push	{r7, lr}
   11348:	b082      	sub	sp, #8
   1134a:	9000      	str	r0, [sp, #0]
   1134c:	9101      	str	r1, [sp, #4]
   1134e:	f000 f85f 	bl	11410 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11352:	e7ff      	b.n	11354 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11354:	b002      	add	sp, #8
   11356:	bd80      	pop	{r7, pc}

00011358 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11358:	b580      	push	{r7, lr}
   1135a:	b088      	sub	sp, #32
   1135c:	9004      	str	r0, [sp, #16]
   1135e:	9105      	str	r1, [sp, #20]
   11360:	f000 f819 	bl	11396 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11364:	9001      	str	r0, [sp, #4]
   11366:	9100      	str	r1, [sp, #0]
   11368:	e7ff      	b.n	1136a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   1136a:	9801      	ldr	r0, [sp, #4]
   1136c:	9006      	str	r0, [sp, #24]
   1136e:	9900      	ldr	r1, [sp, #0]
   11370:	f001 0201 	and.w	r2, r1, #1
   11374:	f88d 201f 	strb.w	r2, [sp, #31]
   11378:	2a00      	cmp	r2, #0
   1137a:	d105      	bne.n	11388 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   1137c:	e7ff      	b.n	1137e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   1137e:	9801      	ldr	r0, [sp, #4]
   11380:	9003      	str	r0, [sp, #12]
   11382:	2101      	movs	r1, #1
   11384:	9102      	str	r1, [sp, #8]
   11386:	e002      	b.n	1138e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11388:	2000      	movs	r0, #0
   1138a:	9002      	str	r0, [sp, #8]
   1138c:	e7ff      	b.n	1138e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   1138e:	9802      	ldr	r0, [sp, #8]
   11390:	9903      	ldr	r1, [sp, #12]
   11392:	b008      	add	sp, #32
   11394:	bd80      	pop	{r7, pc}

00011396 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   11396:	b08a      	sub	sp, #40	; 0x28
   11398:	9004      	str	r0, [sp, #16]
   1139a:	9105      	str	r1, [sp, #20]
   1139c:	1840      	adds	r0, r0, r1
   1139e:	f04f 0100 	mov.w	r1, #0
   113a2:	f141 0100 	adc.w	r1, r1, #0
   113a6:	9006      	str	r0, [sp, #24]
   113a8:	f88d 101c 	strb.w	r1, [sp, #28]
   113ac:	9806      	ldr	r0, [sp, #24]
   113ae:	f89d 101c 	ldrb.w	r1, [sp, #28]
   113b2:	9001      	str	r0, [sp, #4]
   113b4:	9100      	str	r1, [sp, #0]
   113b6:	e7ff      	b.n	113b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   113b8:	9801      	ldr	r0, [sp, #4]
   113ba:	9008      	str	r0, [sp, #32]
   113bc:	9900      	ldr	r1, [sp, #0]
   113be:	f001 0201 	and.w	r2, r1, #1
   113c2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   113c6:	9002      	str	r0, [sp, #8]
   113c8:	f88d 200c 	strb.w	r2, [sp, #12]
   113cc:	9802      	ldr	r0, [sp, #8]
   113ce:	f89d 100c 	ldrb.w	r1, [sp, #12]
   113d2:	b00a      	add	sp, #40	; 0x28
   113d4:	4770      	bx	lr

000113d6 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   113d6:	b580      	push	{r7, lr}
   113d8:	b08c      	sub	sp, #48	; 0x30
   113da:	9005      	str	r0, [sp, #20]
   113dc:	9106      	str	r1, [sp, #24]
   113de:	9207      	str	r2, [sp, #28]
   113e0:	4603      	mov	r3, r0
   113e2:	9008      	str	r0, [sp, #32]
   113e4:	4608      	mov	r0, r1
   113e6:	9109      	str	r1, [sp, #36]	; 0x24
   113e8:	2104      	movs	r1, #4
   113ea:	910b      	str	r1, [sp, #44]	; 0x2c
   113ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   113ee:	9204      	str	r2, [sp, #16]
   113f0:	9303      	str	r3, [sp, #12]
   113f2:	9002      	str	r0, [sp, #8]
   113f4:	9101      	str	r1, [sp, #4]
   113f6:	e7ff      	b.n	113f8 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   113f8:	9801      	ldr	r0, [sp, #4]
   113fa:	9904      	ldr	r1, [sp, #16]
   113fc:	fb00 f201 	mul.w	r2, r0, r1
   11400:	920a      	str	r2, [sp, #40]	; 0x28
   11402:	9803      	ldr	r0, [sp, #12]
   11404:	9902      	ldr	r1, [sp, #8]
   11406:	f000 f82e 	bl	11466 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   1140a:	e7ff      	b.n	1140c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   1140c:	b00c      	add	sp, #48	; 0x30
   1140e:	bd80      	pop	{r7, pc}

00011410 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11410:	b580      	push	{r7, lr}
   11412:	b088      	sub	sp, #32
   11414:	9004      	str	r0, [sp, #16]
   11416:	9105      	str	r1, [sp, #20]
   11418:	2204      	movs	r2, #4
   1141a:	9207      	str	r2, [sp, #28]
   1141c:	9a07      	ldr	r2, [sp, #28]
   1141e:	9103      	str	r1, [sp, #12]
   11420:	9002      	str	r0, [sp, #8]
   11422:	9201      	str	r2, [sp, #4]
   11424:	e7ff      	b.n	11426 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11426:	9801      	ldr	r0, [sp, #4]
   11428:	2820      	cmp	r0, #32
   1142a:	d306      	bcc.n	1143a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   1142c:	e7ff      	b.n	1142e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   1142e:	2201      	movs	r2, #1
   11430:	9802      	ldr	r0, [sp, #8]
   11432:	9903      	ldr	r1, [sp, #12]
   11434:	f7ff ffcf 	bl	113d6 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11438:	e012      	b.n	11460 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   1143a:	9802      	ldr	r0, [sp, #8]
   1143c:	f000 f8a1 	bl	11582 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11440:	4601      	mov	r1, r0
   11442:	9006      	str	r0, [sp, #24]
   11444:	9100      	str	r1, [sp, #0]
   11446:	e7ff      	b.n	11448 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11448:	2201      	movs	r2, #1
   1144a:	9803      	ldr	r0, [sp, #12]
   1144c:	9902      	ldr	r1, [sp, #8]
   1144e:	f7ff ff60 	bl	11312 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11452:	e7ff      	b.n	11454 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11454:	9803      	ldr	r0, [sp, #12]
   11456:	9900      	ldr	r1, [sp, #0]
   11458:	f000 f8ac 	bl	115b4 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   1145c:	e7ff      	b.n	1145e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   1145e:	e000      	b.n	11462 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11460:	e7ff      	b.n	11462 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11462:	b008      	add	sp, #32
   11464:	bd80      	pop	{r7, pc}

00011466 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11466:	b5d0      	push	{r4, r6, r7, lr}
   11468:	af02      	add	r7, sp, #8
   1146a:	b0b4      	sub	sp, #208	; 0xd0
   1146c:	466c      	mov	r4, sp
   1146e:	f36f 0404 	bfc	r4, #0, #5
   11472:	46a5      	mov	sp, r4
   11474:	9024      	str	r0, [sp, #144]	; 0x90
   11476:	9125      	str	r1, [sp, #148]	; 0x94
   11478:	9226      	str	r2, [sp, #152]	; 0x98
   1147a:	2320      	movs	r3, #32
   1147c:	932f      	str	r3, [sp, #188]	; 0xbc
   1147e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11480:	9327      	str	r3, [sp, #156]	; 0x9c
   11482:	920e      	str	r2, [sp, #56]	; 0x38
   11484:	910d      	str	r1, [sp, #52]	; 0x34
   11486:	900c      	str	r0, [sp, #48]	; 0x30
   11488:	930b      	str	r3, [sp, #44]	; 0x2c
   1148a:	e7ff      	b.n	1148c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   1148c:	2000      	movs	r0, #0
   1148e:	900f      	str	r0, [sp, #60]	; 0x3c
   11490:	e7ff      	b.n	11492 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11492:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11494:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11496:	4408      	add	r0, r1
   11498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1149a:	4290      	cmp	r0, r2
   1149c:	d905      	bls.n	114aa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   1149e:	e7ff      	b.n	114a0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   114a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   114a2:	990e      	ldr	r1, [sp, #56]	; 0x38
   114a4:	4288      	cmp	r0, r1
   114a6:	d334      	bcc.n	11512 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   114a8:	e067      	b.n	1157a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   114aa:	e7ff      	b.n	114ac <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   114ac:	a810      	add	r0, sp, #64	; 0x40
   114ae:	9030      	str	r0, [sp, #192]	; 0xc0
   114b0:	9031      	str	r0, [sp, #196]	; 0xc4
   114b2:	e7ff      	b.n	114b4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   114b4:	a810      	add	r0, sp, #64	; 0x40
   114b6:	4601      	mov	r1, r0
   114b8:	9028      	str	r0, [sp, #160]	; 0xa0
   114ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
   114bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   114be:	900a      	str	r0, [sp, #40]	; 0x28
   114c0:	4610      	mov	r0, r2
   114c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   114c4:	9109      	str	r1, [sp, #36]	; 0x24
   114c6:	4619      	mov	r1, r3
   114c8:	f000 f87a 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   114cc:	4601      	mov	r1, r0
   114ce:	9029      	str	r0, [sp, #164]	; 0xa4
   114d0:	9108      	str	r1, [sp, #32]
   114d2:	e7ff      	b.n	114d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   114d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   114d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   114d8:	f000 f872 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   114dc:	4601      	mov	r1, r0
   114de:	902a      	str	r0, [sp, #168]	; 0xa8
   114e0:	9107      	str	r1, [sp, #28]
   114e2:	e7ff      	b.n	114e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   114e4:	9808      	ldr	r0, [sp, #32]
   114e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   114e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   114ea:	f7ff ff05 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   114ee:	e7ff      	b.n	114f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   114f0:	9807      	ldr	r0, [sp, #28]
   114f2:	9908      	ldr	r1, [sp, #32]
   114f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   114f6:	f7ff feff 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   114fa:	e7ff      	b.n	114fc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   114fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   114fe:	9907      	ldr	r1, [sp, #28]
   11500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11502:	f7ff fef9 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11506:	e7ff      	b.n	11508 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11508:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1150a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1150c:	4408      	add	r0, r1
   1150e:	900f      	str	r0, [sp, #60]	; 0x3c
   11510:	e7bf      	b.n	11492 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11512:	e7ff      	b.n	11514 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11514:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11516:	990e      	ldr	r1, [sp, #56]	; 0x38
   11518:	1a08      	subs	r0, r1, r0
   1151a:	4602      	mov	r2, r0
   1151c:	902b      	str	r0, [sp, #172]	; 0xac
   1151e:	a81c      	add	r0, sp, #112	; 0x70
   11520:	9032      	str	r0, [sp, #200]	; 0xc8
   11522:	9033      	str	r0, [sp, #204]	; 0xcc
   11524:	9206      	str	r2, [sp, #24]
   11526:	9005      	str	r0, [sp, #20]
   11528:	e7ff      	b.n	1152a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   1152a:	9805      	ldr	r0, [sp, #20]
   1152c:	9905      	ldr	r1, [sp, #20]
   1152e:	912c      	str	r1, [sp, #176]	; 0xb0
   11530:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11534:	9004      	str	r0, [sp, #16]
   11536:	4610      	mov	r0, r2
   11538:	f000 f842 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1153c:	4601      	mov	r1, r0
   1153e:	902d      	str	r0, [sp, #180]	; 0xb4
   11540:	9103      	str	r1, [sp, #12]
   11542:	e7ff      	b.n	11544 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11544:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11546:	980d      	ldr	r0, [sp, #52]	; 0x34
   11548:	f000 f83a 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1154c:	4601      	mov	r1, r0
   1154e:	902e      	str	r0, [sp, #184]	; 0xb8
   11550:	9102      	str	r1, [sp, #8]
   11552:	e7ff      	b.n	11554 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11554:	9803      	ldr	r0, [sp, #12]
   11556:	9904      	ldr	r1, [sp, #16]
   11558:	9a06      	ldr	r2, [sp, #24]
   1155a:	f7ff fecd 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1155e:	e7ff      	b.n	11560 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11560:	9802      	ldr	r0, [sp, #8]
   11562:	9903      	ldr	r1, [sp, #12]
   11564:	9a06      	ldr	r2, [sp, #24]
   11566:	f7ff fec7 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1156a:	e7ff      	b.n	1156c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   1156c:	9804      	ldr	r0, [sp, #16]
   1156e:	9902      	ldr	r1, [sp, #8]
   11570:	9a06      	ldr	r2, [sp, #24]
   11572:	f7ff fec1 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11576:	e7ff      	b.n	11578 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11578:	e7ff      	b.n	1157a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   1157a:	f1a7 0408 	sub.w	r4, r7, #8
   1157e:	46a5      	mov	sp, r4
   11580:	bdd0      	pop	{r4, r6, r7, pc}

00011582 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11582:	b580      	push	{r7, lr}
   11584:	b08a      	sub	sp, #40	; 0x28
   11586:	9004      	str	r0, [sp, #16]
   11588:	9905      	ldr	r1, [sp, #20]
   1158a:	9103      	str	r1, [sp, #12]
   1158c:	9002      	str	r0, [sp, #8]
   1158e:	e7ff      	b.n	11590 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11590:	a803      	add	r0, sp, #12
   11592:	9008      	str	r0, [sp, #32]
   11594:	9009      	str	r0, [sp, #36]	; 0x24
   11596:	e7ff      	b.n	11598 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11598:	a903      	add	r1, sp, #12
   1159a:	2201      	movs	r2, #1
   1159c:	9802      	ldr	r0, [sp, #8]
   1159e:	f7ff feb8 	bl	11312 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   115a2:	e7ff      	b.n	115a4 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   115a4:	9803      	ldr	r0, [sp, #12]
   115a6:	9006      	str	r0, [sp, #24]
   115a8:	9007      	str	r0, [sp, #28]
   115aa:	9001      	str	r0, [sp, #4]
   115ac:	e7ff      	b.n	115ae <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   115ae:	9801      	ldr	r0, [sp, #4]
   115b0:	b00a      	add	sp, #40	; 0x28
   115b2:	bd80      	pop	{r7, pc}

000115b4 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   115b4:	b082      	sub	sp, #8
   115b6:	9000      	str	r0, [sp, #0]
   115b8:	9101      	str	r1, [sp, #4]
   115ba:	6001      	str	r1, [r0, #0]
   115bc:	b002      	add	sp, #8
   115be:	4770      	bx	lr

000115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   115c0:	b580      	push	{r7, lr}
   115c2:	b084      	sub	sp, #16
   115c4:	9002      	str	r0, [sp, #8]
   115c6:	9103      	str	r1, [sp, #12]
   115c8:	f000 f805 	bl	115d6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   115cc:	9001      	str	r0, [sp, #4]
   115ce:	e7ff      	b.n	115d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   115d0:	9801      	ldr	r0, [sp, #4]
   115d2:	b004      	add	sp, #16
   115d4:	bd80      	pop	{r7, pc}

000115d6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   115d6:	b084      	sub	sp, #16
   115d8:	9001      	str	r0, [sp, #4]
   115da:	9102      	str	r1, [sp, #8]
   115dc:	4408      	add	r0, r1
   115de:	9003      	str	r0, [sp, #12]
   115e0:	9803      	ldr	r0, [sp, #12]
   115e2:	9000      	str	r0, [sp, #0]
   115e4:	e7ff      	b.n	115e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   115e6:	9800      	ldr	r0, [sp, #0]
   115e8:	b004      	add	sp, #16
   115ea:	4770      	bx	lr

000115ec <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   115ec:	b580      	push	{r7, lr}
   115ee:	b084      	sub	sp, #16
   115f0:	9002      	str	r0, [sp, #8]
   115f2:	9103      	str	r1, [sp, #12]
   115f4:	f000 f805 	bl	11602 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   115f8:	9001      	str	r0, [sp, #4]
   115fa:	e7ff      	b.n	115fc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   115fc:	9801      	ldr	r0, [sp, #4]
   115fe:	b004      	add	sp, #16
   11600:	bd80      	pop	{r7, pc}

00011602 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11602:	b084      	sub	sp, #16
   11604:	9001      	str	r0, [sp, #4]
   11606:	9102      	str	r1, [sp, #8]
   11608:	4408      	add	r0, r1
   1160a:	9003      	str	r0, [sp, #12]
   1160c:	9803      	ldr	r0, [sp, #12]
   1160e:	9000      	str	r0, [sp, #0]
   11610:	e7ff      	b.n	11612 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11612:	9800      	ldr	r0, [sp, #0]
   11614:	b004      	add	sp, #16
   11616:	4770      	bx	lr

00011618 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11618:	b580      	push	{r7, lr}
   1161a:	b08a      	sub	sp, #40	; 0x28
   1161c:	9009      	str	r0, [sp, #36]	; 0x24
   1161e:	2100      	movs	r1, #0
   11620:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11624:	1d01      	adds	r1, r0, #4
   11626:	9002      	str	r0, [sp, #8]
   11628:	f7ff fe81 	bl	1132e <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   1162c:	9001      	str	r0, [sp, #4]
   1162e:	e7ff      	b.n	11630 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11630:	9801      	ldr	r0, [sp, #4]
   11632:	07c1      	lsls	r1, r0, #31
   11634:	2900      	cmp	r1, #0
   11636:	d103      	bne.n	11640 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11638:	e7ff      	b.n	1163a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   1163a:	2000      	movs	r0, #0
   1163c:	9003      	str	r0, [sp, #12]
   1163e:	e021      	b.n	11684 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11640:	2001      	movs	r0, #1
   11642:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11646:	9902      	ldr	r1, [sp, #8]
   11648:	9000      	str	r0, [sp, #0]
   1164a:	4608      	mov	r0, r1
   1164c:	9900      	ldr	r1, [sp, #0]
   1164e:	f7ff fe39 	bl	112c4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11652:	9106      	str	r1, [sp, #24]
   11654:	9005      	str	r0, [sp, #20]
   11656:	e7ff      	b.n	11658 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11658:	9805      	ldr	r0, [sp, #20]
   1165a:	2801      	cmp	r0, #1
   1165c:	d003      	beq.n	11666 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   1165e:	e7ff      	b.n	11660 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11660:	2000      	movs	r0, #0
   11662:	9003      	str	r0, [sp, #12]
   11664:	e021      	b.n	116aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11666:	2000      	movs	r0, #0
   11668:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1166c:	9806      	ldr	r0, [sp, #24]
   1166e:	9007      	str	r0, [sp, #28]
   11670:	a807      	add	r0, sp, #28
   11672:	9902      	ldr	r1, [sp, #8]
   11674:	f7ff fe67 	bl	11346 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11678:	e7ff      	b.n	1167a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   1167a:	9807      	ldr	r0, [sp, #28]
   1167c:	9004      	str	r0, [sp, #16]
   1167e:	2001      	movs	r0, #1
   11680:	9003      	str	r0, [sp, #12]
   11682:	e012      	b.n	116aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11684:	9803      	ldr	r0, [sp, #12]
   11686:	9904      	ldr	r1, [sp, #16]
   11688:	b00a      	add	sp, #40	; 0x28
   1168a:	bd80      	pop	{r7, pc}
   1168c:	2000      	movs	r0, #0
   1168e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11692:	e7f7      	b.n	11684 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11694:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11698:	07c0      	lsls	r0, r0, #31
   1169a:	2800      	cmp	r0, #0
   1169c:	d0f6      	beq.n	1168c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   1169e:	e7ff      	b.n	116a0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   116a0:	2000      	movs	r0, #0
   116a2:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   116a6:	e7f1      	b.n	1168c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   116a8:	e7f0      	b.n	1168c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   116aa:	9805      	ldr	r0, [sp, #20]
   116ac:	2801      	cmp	r0, #1
   116ae:	d0f1      	beq.n	11694 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   116b0:	e7fa      	b.n	116a8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

000116b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   116b2:	b082      	sub	sp, #8
   116b4:	9000      	str	r0, [sp, #0]
   116b6:	9101      	str	r1, [sp, #4]
   116b8:	b002      	add	sp, #8
   116ba:	4770      	bx	lr

000116bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   116bc:	b580      	push	{r7, lr}
   116be:	b086      	sub	sp, #24
   116c0:	9003      	str	r0, [sp, #12]
   116c2:	9104      	str	r1, [sp, #16]
   116c4:	9205      	str	r2, [sp, #20]
   116c6:	9002      	str	r0, [sp, #8]
   116c8:	4610      	mov	r0, r2
   116ca:	9a02      	ldr	r2, [sp, #8]
   116cc:	9101      	str	r1, [sp, #4]
   116ce:	4611      	mov	r1, r2
   116d0:	9a01      	ldr	r2, [sp, #4]
   116d2:	f000 f846 	bl	11762 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   116d6:	9000      	str	r0, [sp, #0]
   116d8:	e7ff      	b.n	116da <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   116da:	9800      	ldr	r0, [sp, #0]
   116dc:	b006      	add	sp, #24
   116de:	bd80      	pop	{r7, pc}

000116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   116e0:	b084      	sub	sp, #16
   116e2:	9002      	str	r0, [sp, #8]
   116e4:	9103      	str	r1, [sp, #12]
   116e6:	9000      	str	r0, [sp, #0]
   116e8:	9101      	str	r1, [sp, #4]
   116ea:	9801      	ldr	r0, [sp, #4]
   116ec:	b004      	add	sp, #16
   116ee:	4770      	bx	lr

000116f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   116f0:	b082      	sub	sp, #8
   116f2:	9000      	str	r0, [sp, #0]
   116f4:	9101      	str	r1, [sp, #4]
   116f6:	b002      	add	sp, #8
   116f8:	4770      	bx	lr

000116fa <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   116fa:	b081      	sub	sp, #4
   116fc:	9000      	str	r0, [sp, #0]
   116fe:	b001      	add	sp, #4
   11700:	4770      	bx	lr

00011702 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11702:	b580      	push	{r7, lr}
   11704:	b082      	sub	sp, #8
   11706:	9001      	str	r0, [sp, #4]
   11708:	f7ff fff7 	bl	116fa <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   1170c:	9000      	str	r0, [sp, #0]
   1170e:	e7ff      	b.n	11710 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11710:	9800      	ldr	r0, [sp, #0]
   11712:	b002      	add	sp, #8
   11714:	bd80      	pop	{r7, pc}

00011716 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11716:	b580      	push	{r7, lr}
   11718:	b084      	sub	sp, #16
   1171a:	9003      	str	r0, [sp, #12]
   1171c:	f7ff fff1 	bl	11702 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11720:	9001      	str	r0, [sp, #4]
   11722:	e7ff      	b.n	11724 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11724:	9801      	ldr	r0, [sp, #4]
   11726:	9002      	str	r0, [sp, #8]
   11728:	9802      	ldr	r0, [sp, #8]
   1172a:	b004      	add	sp, #16
   1172c:	bd80      	pop	{r7, pc}

0001172e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   1172e:	b082      	sub	sp, #8
   11730:	9000      	str	r0, [sp, #0]
   11732:	9101      	str	r1, [sp, #4]
   11734:	b002      	add	sp, #8
   11736:	4770      	bx	lr

00011738 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11738:	b580      	push	{r7, lr}
   1173a:	b086      	sub	sp, #24
   1173c:	9003      	str	r0, [sp, #12]
   1173e:	9104      	str	r1, [sp, #16]
   11740:	9205      	str	r2, [sp, #20]
   11742:	9002      	str	r0, [sp, #8]
   11744:	4608      	mov	r0, r1
   11746:	4611      	mov	r1, r2
   11748:	f7ff ffd2 	bl	116f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1174c:	9001      	str	r0, [sp, #4]
   1174e:	e7ff      	b.n	11750 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11750:	9801      	ldr	r0, [sp, #4]
   11752:	9902      	ldr	r1, [sp, #8]
   11754:	f7ff ff4a 	bl	115ec <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11758:	9000      	str	r0, [sp, #0]
   1175a:	e7ff      	b.n	1175c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   1175c:	9800      	ldr	r0, [sp, #0]
   1175e:	b006      	add	sp, #24
   11760:	bd80      	pop	{r7, pc}

00011762 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11762:	b580      	push	{r7, lr}
   11764:	b086      	sub	sp, #24
   11766:	9003      	str	r0, [sp, #12]
   11768:	9104      	str	r1, [sp, #16]
   1176a:	9205      	str	r2, [sp, #20]
   1176c:	9002      	str	r0, [sp, #8]
   1176e:	4608      	mov	r0, r1
   11770:	4611      	mov	r1, r2
   11772:	f7ff ff9e 	bl	116b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11776:	9001      	str	r0, [sp, #4]
   11778:	e7ff      	b.n	1177a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   1177a:	9801      	ldr	r0, [sp, #4]
   1177c:	9902      	ldr	r1, [sp, #8]
   1177e:	f7ff ff1f 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11782:	9000      	str	r0, [sp, #0]
   11784:	e7ff      	b.n	11786 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11786:	9800      	ldr	r0, [sp, #0]
   11788:	b006      	add	sp, #24
   1178a:	bd80      	pop	{r7, pc}

0001178c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   1178c:	b081      	sub	sp, #4
   1178e:	b001      	add	sp, #4
   11790:	4770      	bx	lr

00011792 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11792:	b580      	push	{r7, lr}
   11794:	b086      	sub	sp, #24
   11796:	f8dd c020 	ldr.w	ip, [sp, #32]
   1179a:	9102      	str	r1, [sp, #8]
   1179c:	9203      	str	r2, [sp, #12]
   1179e:	9304      	str	r3, [sp, #16]
   117a0:	f8cd c014 	str.w	ip, [sp, #20]
   117a4:	f04f 0e00 	mov.w	lr, #0
   117a8:	f8cd e004 	str.w	lr, [sp, #4]
   117ac:	f8cd e000 	str.w	lr, [sp]
   117b0:	f8cd e000 	str.w	lr, [sp]
   117b4:	6001      	str	r1, [r0, #0]
   117b6:	6042      	str	r2, [r0, #4]
   117b8:	9900      	ldr	r1, [sp, #0]
   117ba:	9a01      	ldr	r2, [sp, #4]
   117bc:	6081      	str	r1, [r0, #8]
   117be:	60c2      	str	r2, [r0, #12]
   117c0:	6103      	str	r3, [r0, #16]
   117c2:	f8c0 c014 	str.w	ip, [r0, #20]
   117c6:	b006      	add	sp, #24
   117c8:	bd80      	pop	{r7, pc}

000117ca <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   117ca:	b580      	push	{r7, lr}
   117cc:	b084      	sub	sp, #16
   117ce:	9101      	str	r1, [sp, #4]
   117d0:	9202      	str	r2, [sp, #8]
   117d2:	9901      	ldr	r1, [sp, #4]
   117d4:	9a02      	ldr	r2, [sp, #8]
   117d6:	f000 fa94 	bl	11d02 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   117da:	e7ff      	b.n	117dc <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   117dc:	b004      	add	sp, #16
   117de:	bd80      	pop	{r7, pc}

000117e0 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   117e0:	b081      	sub	sp, #4
   117e2:	9000      	str	r0, [sp, #0]
   117e4:	b001      	add	sp, #4
   117e6:	4770      	bx	lr

000117e8 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   117e8:	b081      	sub	sp, #4
   117ea:	9000      	str	r0, [sp, #0]
   117ec:	b001      	add	sp, #4
   117ee:	4770      	bx	lr

000117f0 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   117f0:	b580      	push	{r7, lr}
   117f2:	b086      	sub	sp, #24
   117f4:	460a      	mov	r2, r1
   117f6:	9004      	str	r0, [sp, #16]
   117f8:	f88d 1017 	strb.w	r1, [sp, #23]
   117fc:	9203      	str	r2, [sp, #12]
   117fe:	f7ff fff3 	bl	117e8 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11802:	9002      	str	r0, [sp, #8]
   11804:	e7ff      	b.n	11806 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11806:	9802      	ldr	r0, [sp, #8]
   11808:	9903      	ldr	r1, [sp, #12]
   1180a:	f000 f805 	bl	11818 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   1180e:	9001      	str	r0, [sp, #4]
   11810:	e7ff      	b.n	11812 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11812:	9801      	ldr	r0, [sp, #4]
   11814:	b006      	add	sp, #24
   11816:	bd80      	pop	{r7, pc}

00011818 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   11818:	b086      	sub	sp, #24
   1181a:	460a      	mov	r2, r1
   1181c:	f88d 100f 	strb.w	r1, [sp, #15]
   11820:	9005      	str	r0, [sp, #20]
   11822:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11826:	9002      	str	r0, [sp, #8]
   11828:	9101      	str	r1, [sp, #4]
   1182a:	9901      	ldr	r1, [sp, #4]
   1182c:	e8df f001 	tbb	[pc, r1]
   11830:	03102317 	.word	0x03102317
   11834:	001c      	.short	0x001c
   11836:	f64d 00fc 	movw	r0, #55548	; 0xd8fc
   1183a:	f2c0 0001 	movt	r0, #1
   1183e:	f64d 1278 	movw	r2, #55672	; 0xd978
   11842:	f2c0 0201 	movt	r2, #1
   11846:	2131      	movs	r1, #49	; 0x31
   11848:	f003 fc42 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1184c:	defe      	udf	#254	; 0xfe
   1184e:	defe      	udf	#254	; 0xfe
   11850:	9802      	ldr	r0, [sp, #8]
   11852:	6801      	ldr	r1, [r0, #0]
   11854:	f3bf 8f5f 	dmb	sy
   11858:	9104      	str	r1, [sp, #16]
   1185a:	e7ff      	b.n	1185c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   1185c:	e017      	b.n	1188e <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   1185e:	9802      	ldr	r0, [sp, #8]
   11860:	6801      	ldr	r1, [r0, #0]
   11862:	9104      	str	r1, [sp, #16]
   11864:	e7ff      	b.n	11866 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   11866:	e012      	b.n	1188e <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11868:	9802      	ldr	r0, [sp, #8]
   1186a:	6801      	ldr	r1, [r0, #0]
   1186c:	f3bf 8f5f 	dmb	sy
   11870:	9104      	str	r1, [sp, #16]
   11872:	e7ff      	b.n	11874 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   11874:	e00b      	b.n	1188e <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11876:	f64d 1088 	movw	r0, #55688	; 0xd988
   1187a:	f2c0 0001 	movt	r0, #1
   1187e:	f64d 1278 	movw	r2, #55672	; 0xd978
   11882:	f2c0 0201 	movt	r2, #1
   11886:	2128      	movs	r1, #40	; 0x28
   11888:	f003 fc22 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1188c:	defe      	udf	#254	; 0xfe
   1188e:	9804      	ldr	r0, [sp, #16]
   11890:	b006      	add	sp, #24
   11892:	4770      	bx	lr

00011894 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   11894:	b081      	sub	sp, #4
   11896:	9000      	str	r0, [sp, #0]
   11898:	6800      	ldr	r0, [r0, #0]
   1189a:	b001      	add	sp, #4
   1189c:	4770      	bx	lr

0001189e <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   1189e:	b082      	sub	sp, #8
   118a0:	9001      	str	r0, [sp, #4]
   118a2:	6801      	ldr	r1, [r0, #0]
   118a4:	6840      	ldr	r0, [r0, #4]
   118a6:	9000      	str	r0, [sp, #0]
   118a8:	4608      	mov	r0, r1
   118aa:	9900      	ldr	r1, [sp, #0]
   118ac:	b002      	add	sp, #8
   118ae:	4770      	bx	lr

000118b0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   118b0:	b580      	push	{r7, lr}
   118b2:	b08c      	sub	sp, #48	; 0x30
   118b4:	9101      	str	r1, [sp, #4]
   118b6:	9202      	str	r2, [sp, #8]
   118b8:	2100      	movs	r1, #0
   118ba:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   118be:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   118c2:	2101      	movs	r1, #1
   118c4:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   118c8:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   118cc:	9901      	ldr	r1, [sp, #4]
   118ce:	2900      	cmp	r1, #0
   118d0:	460a      	mov	r2, r1
   118d2:	bf18      	it	ne
   118d4:	2201      	movne	r2, #1
   118d6:	2900      	cmp	r1, #0
   118d8:	9000      	str	r0, [sp, #0]
   118da:	d001      	beq.n	118e0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   118dc:	e7ff      	b.n	118de <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   118de:	e008      	b.n	118f2 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   118e0:	2000      	movs	r0, #0
   118e2:	9900      	ldr	r1, [sp, #0]
   118e4:	6088      	str	r0, [r1, #8]
   118e6:	6048      	str	r0, [r1, #4]
   118e8:	6008      	str	r0, [r1, #0]
   118ea:	2002      	movs	r0, #2
   118ec:	6008      	str	r0, [r1, #0]
   118ee:	e021      	b.n	11934 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   118f0:	defe      	udf	#254	; 0xfe
   118f2:	2000      	movs	r0, #0
   118f4:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   118f8:	9901      	ldr	r1, [sp, #4]
   118fa:	9a02      	ldr	r2, [sp, #8]
   118fc:	910a      	str	r1, [sp, #40]	; 0x28
   118fe:	920b      	str	r2, [sp, #44]	; 0x2c
   11900:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11904:	9106      	str	r1, [sp, #24]
   11906:	9207      	str	r2, [sp, #28]
   11908:	9906      	ldr	r1, [sp, #24]
   1190a:	9a07      	ldr	r2, [sp, #28]
   1190c:	a803      	add	r0, sp, #12
   1190e:	f7ff ff5c 	bl	117ca <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   11912:	e7ff      	b.n	11914 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   11914:	9803      	ldr	r0, [sp, #12]
   11916:	9904      	ldr	r1, [sp, #16]
   11918:	9a05      	ldr	r2, [sp, #20]
   1191a:	9b00      	ldr	r3, [sp, #0]
   1191c:	609a      	str	r2, [r3, #8]
   1191e:	6059      	str	r1, [r3, #4]
   11920:	6018      	str	r0, [r3, #0]
   11922:	e007      	b.n	11934 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11924:	9801      	ldr	r0, [sp, #4]
   11926:	2800      	cmp	r0, #0
   11928:	d10c      	bne.n	11944 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   1192a:	e015      	b.n	11958 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   1192c:	2000      	movs	r0, #0
   1192e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11932:	e7f7      	b.n	11924 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11934:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11938:	07c0      	lsls	r0, r0, #31
   1193a:	2800      	cmp	r0, #0
   1193c:	d1f6      	bne.n	1192c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   1193e:	e7f1      	b.n	11924 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11940:	b00c      	add	sp, #48	; 0x30
   11942:	bd80      	pop	{r7, pc}
   11944:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11948:	07c0      	lsls	r0, r0, #31
   1194a:	2800      	cmp	r0, #0
   1194c:	d0f8      	beq.n	11940 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   1194e:	e7ff      	b.n	11950 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   11950:	2000      	movs	r0, #0
   11952:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11956:	e7f3      	b.n	11940 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11958:	e7f2      	b.n	11940 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

0001195a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   1195a:	b081      	sub	sp, #4
   1195c:	b001      	add	sp, #4
   1195e:	4770      	bx	lr

00011960 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   11960:	b5b0      	push	{r4, r5, r7, lr}
   11962:	b081      	sub	sp, #4
   11964:	9100      	str	r1, [sp, #0]
   11966:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1196a:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   1196e:	b001      	add	sp, #4
   11970:	bdb0      	pop	{r4, r5, r7, pc}

00011972 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   11972:	b580      	push	{r7, lr}
   11974:	b088      	sub	sp, #32
   11976:	9106      	str	r1, [sp, #24]
   11978:	680a      	ldr	r2, [r1, #0]
   1197a:	1e93      	subs	r3, r2, #2
   1197c:	bf18      	it	ne
   1197e:	2301      	movne	r3, #1
   11980:	2a02      	cmp	r2, #2
   11982:	9102      	str	r1, [sp, #8]
   11984:	9001      	str	r0, [sp, #4]
   11986:	d001      	beq.n	1198c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   11988:	e7ff      	b.n	1198a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   1198a:	e008      	b.n	1199e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   1198c:	2000      	movs	r0, #0
   1198e:	9901      	ldr	r1, [sp, #4]
   11990:	6088      	str	r0, [r1, #8]
   11992:	6048      	str	r0, [r1, #4]
   11994:	6008      	str	r0, [r1, #0]
   11996:	2002      	movs	r0, #2
   11998:	6008      	str	r0, [r1, #0]
   1199a:	e00f      	b.n	119bc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   1199c:	defe      	udf	#254	; 0xfe
   1199e:	9802      	ldr	r0, [sp, #8]
   119a0:	9007      	str	r0, [sp, #28]
   119a2:	a803      	add	r0, sp, #12
   119a4:	9902      	ldr	r1, [sp, #8]
   119a6:	f000 f9b5 	bl	11d14 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   119aa:	e7ff      	b.n	119ac <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   119ac:	9803      	ldr	r0, [sp, #12]
   119ae:	9904      	ldr	r1, [sp, #16]
   119b0:	9a05      	ldr	r2, [sp, #20]
   119b2:	9b01      	ldr	r3, [sp, #4]
   119b4:	609a      	str	r2, [r3, #8]
   119b6:	6059      	str	r1, [r3, #4]
   119b8:	6018      	str	r0, [r3, #0]
   119ba:	e7ff      	b.n	119bc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   119bc:	b008      	add	sp, #32
   119be:	bd80      	pop	{r7, pc}

000119c0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   119c0:	b580      	push	{r7, lr}
   119c2:	b086      	sub	sp, #24
   119c4:	9004      	str	r0, [sp, #16]
   119c6:	6801      	ldr	r1, [r0, #0]
   119c8:	2900      	cmp	r1, #0
   119ca:	9001      	str	r0, [sp, #4]
   119cc:	d001      	beq.n	119d2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   119ce:	e7ff      	b.n	119d0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   119d0:	e003      	b.n	119da <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   119d2:	2000      	movs	r0, #0
   119d4:	9002      	str	r0, [sp, #8]
   119d6:	e00d      	b.n	119f4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   119d8:	defe      	udf	#254	; 0xfe
   119da:	9801      	ldr	r0, [sp, #4]
   119dc:	1d01      	adds	r1, r0, #4
   119de:	9105      	str	r1, [sp, #20]
   119e0:	4608      	mov	r0, r1
   119e2:	f7ff ff57 	bl	11894 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   119e6:	9000      	str	r0, [sp, #0]
   119e8:	e7ff      	b.n	119ea <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   119ea:	9800      	ldr	r0, [sp, #0]
   119ec:	9003      	str	r0, [sp, #12]
   119ee:	2101      	movs	r1, #1
   119f0:	9102      	str	r1, [sp, #8]
   119f2:	e7ff      	b.n	119f4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   119f4:	9802      	ldr	r0, [sp, #8]
   119f6:	9903      	ldr	r1, [sp, #12]
   119f8:	b006      	add	sp, #24
   119fa:	bd80      	pop	{r7, pc}

000119fc <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   119fc:	b081      	sub	sp, #4
   119fe:	9000      	str	r0, [sp, #0]
        *self
   11a00:	6800      	ldr	r0, [r0, #0]
    }
   11a02:	b001      	add	sp, #4
   11a04:	4770      	bx	lr

00011a06 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   11a06:	b580      	push	{r7, lr}
        RecordBuilder::new()
   11a08:	f000 f802 	bl	11a10 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   11a0c:	e7ff      	b.n	11a0e <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   11a0e:	bd80      	pop	{r7, pc}

00011a10 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   11a10:	b570      	push	{r4, r5, r6, lr}
   11a12:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   11a14:	f64d 11c8 	movw	r1, #55752	; 0xd9c8
   11a18:	f2c0 0101 	movt	r1, #1
   11a1c:	6809      	ldr	r1, [r1, #0]
   11a1e:	466a      	mov	r2, sp
   11a20:	2300      	movs	r3, #0
   11a22:	6013      	str	r3, [r2, #0]
   11a24:	aa16      	add	r2, sp, #88	; 0x58
   11a26:	9004      	str	r0, [sp, #16]
   11a28:	4610      	mov	r0, r2
   11a2a:	9103      	str	r1, [sp, #12]
   11a2c:	461a      	mov	r2, r3
   11a2e:	9b03      	ldr	r3, [sp, #12]
   11a30:	f7ff feaf 	bl	11792 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   11a34:	e7ff      	b.n	11a36 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   11a36:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   11a38:	f000 f891 	bl	11b5e <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   11a3c:	e7ff      	b.n	11a3e <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   11a3e:	a81c      	add	r0, sp, #112	; 0x70
   11a40:	a91f      	add	r1, sp, #124	; 0x7c
   11a42:	f000 f8a5 	bl	11b90 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   11a46:	e7ff      	b.n	11a48 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   11a48:	2000      	movs	r0, #0
                module_path: None,
   11a4a:	9024      	str	r0, [sp, #144]	; 0x90
   11a4c:	9023      	str	r0, [sp, #140]	; 0x8c
   11a4e:	9022      	str	r0, [sp, #136]	; 0x88
   11a50:	2102      	movs	r1, #2
   11a52:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   11a54:	9027      	str	r0, [sp, #156]	; 0x9c
   11a56:	9026      	str	r0, [sp, #152]	; 0x98
   11a58:	9025      	str	r0, [sp, #148]	; 0x94
   11a5a:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   11a5c:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   11a5e:	981c      	ldr	r0, [sp, #112]	; 0x70
   11a60:	991d      	ldr	r1, [sp, #116]	; 0x74
   11a62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11a64:	9207      	str	r2, [sp, #28]
   11a66:	9106      	str	r1, [sp, #24]
   11a68:	9005      	str	r0, [sp, #20]
   11a6a:	a805      	add	r0, sp, #20
   11a6c:	f100 010c 	add.w	r1, r0, #12
   11a70:	aa16      	add	r2, sp, #88	; 0x58
   11a72:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11a76:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   11a7a:	9922      	ldr	r1, [sp, #136]	; 0x88
   11a7c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11a7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11a80:	9310      	str	r3, [sp, #64]	; 0x40
   11a82:	920f      	str	r2, [sp, #60]	; 0x3c
   11a84:	910e      	str	r1, [sp, #56]	; 0x38
   11a86:	9925      	ldr	r1, [sp, #148]	; 0x94
   11a88:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11a8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   11a8c:	9313      	str	r3, [sp, #76]	; 0x4c
   11a8e:	9212      	str	r2, [sp, #72]	; 0x48
   11a90:	9111      	str	r1, [sp, #68]	; 0x44
   11a92:	9928      	ldr	r1, [sp, #160]	; 0xa0
   11a94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   11a96:	9114      	str	r1, [sp, #80]	; 0x50
   11a98:	9215      	str	r2, [sp, #84]	; 0x54
   11a9a:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   11a9c:	9904      	ldr	r1, [sp, #16]
   11a9e:	9002      	str	r0, [sp, #8]
   11aa0:	4608      	mov	r0, r1
   11aa2:	9902      	ldr	r1, [sp, #8]
   11aa4:	f009 fe20 	bl	1b6e8 <__aeabi_memcpy>
    }
   11aa8:	b02a      	add	sp, #168	; 0xa8
   11aaa:	bd70      	pop	{r4, r5, r6, pc}

00011aac <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   11aac:	b5f0      	push	{r4, r5, r6, r7, lr}
   11aae:	b087      	sub	sp, #28
   11ab0:	9006      	str	r0, [sp, #24]
   11ab2:	466a      	mov	r2, sp
        self.record.args = args;
   11ab4:	4613      	mov	r3, r2
   11ab6:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   11aba:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   11abe:	f100 010c 	add.w	r1, r0, #12
   11ac2:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11ac6:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   11aca:	b007      	add	sp, #28
   11acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011ace <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   11ace:	b082      	sub	sp, #8
   11ad0:	9000      	str	r0, [sp, #0]
   11ad2:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   11ad4:	6001      	str	r1, [r0, #0]
    }
   11ad6:	b002      	add	sp, #8
   11ad8:	4770      	bx	lr

00011ada <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   11ada:	b083      	sub	sp, #12
   11adc:	9000      	str	r0, [sp, #0]
   11ade:	9101      	str	r1, [sp, #4]
   11ae0:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   11ae2:	6041      	str	r1, [r0, #4]
   11ae4:	6082      	str	r2, [r0, #8]
    }
   11ae6:	b003      	add	sp, #12
   11ae8:	4770      	bx	lr

00011aea <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11aea:	b580      	push	{r7, lr}
   11aec:	b088      	sub	sp, #32
   11aee:	9005      	str	r0, [sp, #20]
   11af0:	9106      	str	r1, [sp, #24]
   11af2:	9207      	str	r2, [sp, #28]
   11af4:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   11af6:	9001      	str	r0, [sp, #4]
   11af8:	4618      	mov	r0, r3
   11afa:	f7ff fed9 	bl	118b0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11afe:	e7ff      	b.n	11b00 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   11b00:	9802      	ldr	r0, [sp, #8]
   11b02:	9903      	ldr	r1, [sp, #12]
   11b04:	9a04      	ldr	r2, [sp, #16]
   11b06:	9b01      	ldr	r3, [sp, #4]
   11b08:	62da      	str	r2, [r3, #44]	; 0x2c
   11b0a:	6299      	str	r1, [r3, #40]	; 0x28
   11b0c:	6258      	str	r0, [r3, #36]	; 0x24
    }
   11b0e:	4618      	mov	r0, r3
   11b10:	b008      	add	sp, #32
   11b12:	bd80      	pop	{r7, pc}

00011b14 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11b14:	b580      	push	{r7, lr}
   11b16:	b088      	sub	sp, #32
   11b18:	9005      	str	r0, [sp, #20]
   11b1a:	9106      	str	r1, [sp, #24]
   11b1c:	9207      	str	r2, [sp, #28]
   11b1e:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   11b20:	9001      	str	r0, [sp, #4]
   11b22:	4618      	mov	r0, r3
   11b24:	f7ff fec4 	bl	118b0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11b28:	e7ff      	b.n	11b2a <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   11b2a:	9802      	ldr	r0, [sp, #8]
   11b2c:	9903      	ldr	r1, [sp, #12]
   11b2e:	9a04      	ldr	r2, [sp, #16]
   11b30:	9b01      	ldr	r3, [sp, #4]
   11b32:	639a      	str	r2, [r3, #56]	; 0x38
   11b34:	6359      	str	r1, [r3, #52]	; 0x34
   11b36:	6318      	str	r0, [r3, #48]	; 0x30
    }
   11b38:	4618      	mov	r0, r3
   11b3a:	b008      	add	sp, #32
   11b3c:	bd80      	pop	{r7, pc}

00011b3e <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   11b3e:	b083      	sub	sp, #12
   11b40:	9000      	str	r0, [sp, #0]
   11b42:	9101      	str	r1, [sp, #4]
   11b44:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   11b46:	63c1      	str	r1, [r0, #60]	; 0x3c
   11b48:	6402      	str	r2, [r0, #64]	; 0x40
    }
   11b4a:	b003      	add	sp, #12
   11b4c:	4770      	bx	lr

00011b4e <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   11b4e:	b580      	push	{r7, lr}
   11b50:	b082      	sub	sp, #8
   11b52:	9101      	str	r1, [sp, #4]
        self.record.clone()
   11b54:	f000 f8e8 	bl	11d28 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   11b58:	e7ff      	b.n	11b5a <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   11b5a:	b002      	add	sp, #8
   11b5c:	bd80      	pop	{r7, pc}

00011b5e <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   11b5e:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   11b60:	f000 f802 	bl	11b68 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   11b64:	e7ff      	b.n	11b66 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   11b66:	bd80      	pop	{r7, pc}

00011b68 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   11b68:	b084      	sub	sp, #16
   11b6a:	2103      	movs	r1, #3
                level: Level::Info,
   11b6c:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   11b6e:	9903      	ldr	r1, [sp, #12]
   11b70:	9100      	str	r1, [sp, #0]
   11b72:	f64d 11b0 	movw	r1, #55728	; 0xd9b0
   11b76:	f2c0 0101 	movt	r1, #1
   11b7a:	9101      	str	r1, [sp, #4]
   11b7c:	2100      	movs	r1, #0
   11b7e:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   11b80:	9900      	ldr	r1, [sp, #0]
   11b82:	9a01      	ldr	r2, [sp, #4]
   11b84:	9b02      	ldr	r3, [sp, #8]
   11b86:	6083      	str	r3, [r0, #8]
   11b88:	6042      	str	r2, [r0, #4]
   11b8a:	6001      	str	r1, [r0, #0]
    }
   11b8c:	b004      	add	sp, #16
   11b8e:	4770      	bx	lr

00011b90 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   11b90:	b580      	push	{r7, lr}
   11b92:	b082      	sub	sp, #8
   11b94:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   11b96:	f000 f91c 	bl	11dd2 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   11b9a:	e7ff      	b.n	11b9c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   11b9c:	b002      	add	sp, #8
   11b9e:	bd80      	pop	{r7, pc}

00011ba0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   11ba0:	b082      	sub	sp, #8
   11ba2:	9000      	str	r0, [sp, #0]
   11ba4:	9101      	str	r1, [sp, #4]
   11ba6:	2000      	movs	r0, #0
    }
   11ba8:	b002      	add	sp, #8
   11baa:	4770      	bx	lr

00011bac <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   11bac:	b082      	sub	sp, #8
   11bae:	9000      	str	r0, [sp, #0]
   11bb0:	9101      	str	r1, [sp, #4]
   11bb2:	b002      	add	sp, #8
   11bb4:	4770      	bx	lr

00011bb6 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   11bb6:	b081      	sub	sp, #4
   11bb8:	9000      	str	r0, [sp, #0]
   11bba:	b001      	add	sp, #4
   11bbc:	4770      	bx	lr

00011bbe <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   11bbe:	b580      	push	{r7, lr}
   11bc0:	b084      	sub	sp, #16
   11bc2:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11bc4:	f88d 000f 	strb.w	r0, [sp, #15]
   11bc8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11bcc:	f644 2068 	movw	r0, #19048	; 0x4a68
   11bd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11bd4:	f7ff fe0c 	bl	117f0 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   11bd8:	9000      	str	r0, [sp, #0]
   11bda:	e7ff      	b.n	11bdc <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   11bdc:	9800      	ldr	r0, [sp, #0]
   11bde:	2802      	cmp	r0, #2
   11be0:	d109      	bne.n	11bf6 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   11be2:	e7ff      	b.n	11be4 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   11be4:	f240 00f0 	movw	r0, #240	; 0xf0
   11be8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11bec:	6801      	ldr	r1, [r0, #0]
   11bee:	6840      	ldr	r0, [r0, #4]
   11bf0:	9101      	str	r1, [sp, #4]
   11bf2:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11bf4:	e00a      	b.n	11c0c <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   11bf6:	f64d 10e4 	movw	r0, #55780	; 0xd9e4
   11bfa:	f2c0 0001 	movt	r0, #1
   11bfe:	9001      	str	r0, [sp, #4]
   11c00:	f64d 10cc 	movw	r0, #55756	; 0xd9cc
   11c04:	f2c0 0001 	movt	r0, #1
   11c08:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11c0a:	e7ff      	b.n	11c0c <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   11c0c:	9801      	ldr	r0, [sp, #4]
   11c0e:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   11c10:	b004      	add	sp, #16
   11c12:	bd80      	pop	{r7, pc}

00011c14 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   11c14:	b570      	push	{r4, r5, r6, lr}
   11c16:	b0ca      	sub	sp, #296	; 0x128
   11c18:	9141      	str	r1, [sp, #260]	; 0x104
   11c1a:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   11c1c:	6813      	ldr	r3, [r2, #0]
   11c1e:	f8d2 c004 	ldr.w	ip, [r2, #4]
   11c22:	9343      	str	r3, [sp, #268]	; 0x10c
   11c24:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   11c28:	f8d2 e008 	ldr.w	lr, [r2, #8]
   11c2c:	68d4      	ldr	r4, [r2, #12]
   11c2e:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   11c32:	9446      	str	r4, [sp, #280]	; 0x118
   11c34:	6915      	ldr	r5, [r2, #16]
   11c36:	6956      	ldr	r6, [r2, #20]
   11c38:	9547      	str	r5, [sp, #284]	; 0x11c
   11c3a:	9648      	str	r6, [sp, #288]	; 0x120
   11c3c:	6992      	ldr	r2, [r2, #24]
   11c3e:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   11c40:	9112      	str	r1, [sp, #72]	; 0x48
   11c42:	9011      	str	r0, [sp, #68]	; 0x44
   11c44:	9310      	str	r3, [sp, #64]	; 0x40
   11c46:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   11c4a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   11c4e:	940d      	str	r4, [sp, #52]	; 0x34
   11c50:	950c      	str	r5, [sp, #48]	; 0x30
   11c52:	960b      	str	r6, [sp, #44]	; 0x2c
   11c54:	920a      	str	r2, [sp, #40]	; 0x28
   11c56:	f7ff ffb2 	bl	11bbe <_ZN3log6logger17hf609e7cc1c031552E>
   11c5a:	9009      	str	r0, [sp, #36]	; 0x24
   11c5c:	9108      	str	r1, [sp, #32]
   11c5e:	e7ff      	b.n	11c60 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   11c60:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   11c62:	f7ff fed0 	bl	11a06 <_ZN3log6Record7builder17hde62ab0132265febE>
   11c66:	e7ff      	b.n	11c68 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   11c68:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   11c6a:	4601      	mov	r1, r0
   11c6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11c6e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11c72:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   11c76:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   11c78:	9007      	str	r0, [sp, #28]
   11c7a:	4608      	mov	r0, r1
   11c7c:	9907      	ldr	r1, [sp, #28]
   11c7e:	f7ff ff15 	bl	11aac <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   11c82:	9006      	str	r0, [sp, #24]
   11c84:	e7ff      	b.n	11c86 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   11c86:	9806      	ldr	r0, [sp, #24]
   11c88:	9912      	ldr	r1, [sp, #72]	; 0x48
   11c8a:	f7ff ff20 	bl	11ace <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   11c8e:	9005      	str	r0, [sp, #20]
   11c90:	e7ff      	b.n	11c92 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   11c92:	9805      	ldr	r0, [sp, #20]
   11c94:	9910      	ldr	r1, [sp, #64]	; 0x40
   11c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11c98:	f7ff ff1f 	bl	11ada <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   11c9c:	9004      	str	r0, [sp, #16]
   11c9e:	e7ff      	b.n	11ca0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   11ca0:	980e      	ldr	r0, [sp, #56]	; 0x38
   11ca2:	903b      	str	r0, [sp, #236]	; 0xec
   11ca4:	990d      	ldr	r1, [sp, #52]	; 0x34
   11ca6:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   11ca8:	993b      	ldr	r1, [sp, #236]	; 0xec
   11caa:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   11cac:	9804      	ldr	r0, [sp, #16]
   11cae:	f7ff ff1c 	bl	11aea <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   11cb2:	9003      	str	r0, [sp, #12]
   11cb4:	e7ff      	b.n	11cb6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   11cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
   11cb8:	903d      	str	r0, [sp, #244]	; 0xf4
   11cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11cbc:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   11cbe:	993d      	ldr	r1, [sp, #244]	; 0xf4
   11cc0:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   11cc2:	9803      	ldr	r0, [sp, #12]
   11cc4:	f7ff ff26 	bl	11b14 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   11cc8:	9002      	str	r0, [sp, #8]
   11cca:	e7ff      	b.n	11ccc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   11ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
   11cce:	9040      	str	r0, [sp, #256]	; 0x100
   11cd0:	2101      	movs	r1, #1
   11cd2:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   11cd4:	993f      	ldr	r1, [sp, #252]	; 0xfc
   11cd6:	9a40      	ldr	r2, [sp, #256]	; 0x100
   11cd8:	9802      	ldr	r0, [sp, #8]
   11cda:	f7ff ff30 	bl	11b3e <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   11cde:	9001      	str	r0, [sp, #4]
   11ce0:	e7ff      	b.n	11ce2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   11ce2:	a813      	add	r0, sp, #76	; 0x4c
   11ce4:	9901      	ldr	r1, [sp, #4]
   11ce6:	f7ff ff32 	bl	11b4e <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   11cea:	e7ff      	b.n	11cec <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   11cec:	9808      	ldr	r0, [sp, #32]
   11cee:	6901      	ldr	r1, [r0, #16]
   11cf0:	aa13      	add	r2, sp, #76	; 0x4c
   11cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
   11cf4:	9100      	str	r1, [sp, #0]
   11cf6:	4611      	mov	r1, r2
   11cf8:	9a00      	ldr	r2, [sp, #0]
   11cfa:	4790      	blx	r2
   11cfc:	e7ff      	b.n	11cfe <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   11cfe:	b04a      	add	sp, #296	; 0x128
   11d00:	bd70      	pop	{r4, r5, r6, pc}

00011d02 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   11d02:	b082      	sub	sp, #8
   11d04:	9100      	str	r1, [sp, #0]
   11d06:	9201      	str	r2, [sp, #4]
   11d08:	6041      	str	r1, [r0, #4]
   11d0a:	6082      	str	r2, [r0, #8]
   11d0c:	2100      	movs	r1, #0
   11d0e:	6001      	str	r1, [r0, #0]
   11d10:	b002      	add	sp, #8
   11d12:	4770      	bx	lr

00011d14 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11d14:	b081      	sub	sp, #4
   11d16:	9100      	str	r1, [sp, #0]
   11d18:	680a      	ldr	r2, [r1, #0]
   11d1a:	684b      	ldr	r3, [r1, #4]
   11d1c:	6889      	ldr	r1, [r1, #8]
   11d1e:	6081      	str	r1, [r0, #8]
   11d20:	6043      	str	r3, [r0, #4]
   11d22:	6002      	str	r2, [r0, #0]
   11d24:	b001      	add	sp, #4
   11d26:	4770      	bx	lr

00011d28 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   11d28:	b570      	push	{r4, r5, r6, lr}
   11d2a:	b09c      	sub	sp, #112	; 0x70
   11d2c:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   11d2e:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   11d30:	f101 020c 	add.w	r2, r1, #12
   11d34:	4613      	mov	r3, r2
   11d36:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   11d38:	f101 0224 	add.w	r2, r1, #36	; 0x24
   11d3c:	4694      	mov	ip, r2
   11d3e:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   11d40:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11d44:	4696      	mov	lr, r2
   11d46:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   11d48:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   11d4c:	4614      	mov	r4, r2
   11d4e:	921b      	str	r2, [sp, #108]	; 0x6c
   11d50:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   11d52:	9006      	str	r0, [sp, #24]
   11d54:	4610      	mov	r0, r2
   11d56:	9305      	str	r3, [sp, #20]
   11d58:	f8cd c010 	str.w	ip, [sp, #16]
   11d5c:	f8cd e00c 	str.w	lr, [sp, #12]
   11d60:	9402      	str	r4, [sp, #8]
   11d62:	f000 f836 	bl	11dd2 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   11d66:	e7ff      	b.n	11d68 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   11d68:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   11d6a:	9905      	ldr	r1, [sp, #20]
   11d6c:	f7ff fdf8 	bl	11960 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   11d70:	e7ff      	b.n	11d72 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   11d72:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   11d74:	9904      	ldr	r1, [sp, #16]
   11d76:	f7ff fdfc 	bl	11972 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   11d7a:	e7ff      	b.n	11d7c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   11d7c:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   11d7e:	9903      	ldr	r1, [sp, #12]
   11d80:	f7ff fdf7 	bl	11972 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   11d84:	e7ff      	b.n	11d86 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   11d86:	9802      	ldr	r0, [sp, #8]
   11d88:	f7ff fe1a 	bl	119c0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   11d8c:	9001      	str	r0, [sp, #4]
   11d8e:	9100      	str	r1, [sp, #0]
   11d90:	e7ff      	b.n	11d92 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   11d92:	9807      	ldr	r0, [sp, #28]
   11d94:	9908      	ldr	r1, [sp, #32]
   11d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11d98:	9b06      	ldr	r3, [sp, #24]
   11d9a:	609a      	str	r2, [r3, #8]
   11d9c:	6059      	str	r1, [r3, #4]
   11d9e:	6018      	str	r0, [r3, #0]
   11da0:	f103 000c 	add.w	r0, r3, #12
   11da4:	a90a      	add	r1, sp, #40	; 0x28
   11da6:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   11daa:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   11dae:	9810      	ldr	r0, [sp, #64]	; 0x40
   11db0:	9911      	ldr	r1, [sp, #68]	; 0x44
   11db2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11db4:	62da      	str	r2, [r3, #44]	; 0x2c
   11db6:	6299      	str	r1, [r3, #40]	; 0x28
   11db8:	6258      	str	r0, [r3, #36]	; 0x24
   11dba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11dbc:	9914      	ldr	r1, [sp, #80]	; 0x50
   11dbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   11dc0:	639a      	str	r2, [r3, #56]	; 0x38
   11dc2:	6359      	str	r1, [r3, #52]	; 0x34
   11dc4:	6318      	str	r0, [r3, #48]	; 0x30
   11dc6:	9801      	ldr	r0, [sp, #4]
   11dc8:	63d8      	str	r0, [r3, #60]	; 0x3c
   11dca:	9900      	ldr	r1, [sp, #0]
   11dcc:	6419      	str	r1, [r3, #64]	; 0x40
   11dce:	b01c      	add	sp, #112	; 0x70
   11dd0:	bd70      	pop	{r4, r5, r6, pc}

00011dd2 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11dd2:	b580      	push	{r7, lr}
   11dd4:	b088      	sub	sp, #32
   11dd6:	9105      	str	r1, [sp, #20]
    level: Level,
   11dd8:	9106      	str	r1, [sp, #24]
    target: &'a str,
   11dda:	1d0a      	adds	r2, r1, #4
   11ddc:	4613      	mov	r3, r2
   11dde:	9207      	str	r2, [sp, #28]
    level: Level,
   11de0:	9004      	str	r0, [sp, #16]
   11de2:	4608      	mov	r0, r1
   11de4:	9303      	str	r3, [sp, #12]
   11de6:	f7ff fe09 	bl	119fc <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   11dea:	9002      	str	r0, [sp, #8]
   11dec:	e7ff      	b.n	11dee <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   11dee:	9803      	ldr	r0, [sp, #12]
   11df0:	f7ff fd55 	bl	1189e <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   11df4:	9001      	str	r0, [sp, #4]
   11df6:	9100      	str	r1, [sp, #0]
   11df8:	e7ff      	b.n	11dfa <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11dfa:	9802      	ldr	r0, [sp, #8]
   11dfc:	9904      	ldr	r1, [sp, #16]
   11dfe:	6008      	str	r0, [r1, #0]
   11e00:	9a01      	ldr	r2, [sp, #4]
   11e02:	604a      	str	r2, [r1, #4]
   11e04:	9b00      	ldr	r3, [sp, #0]
   11e06:	608b      	str	r3, [r1, #8]
   11e08:	b008      	add	sp, #32
   11e0a:	bd80      	pop	{r7, pc}

00011e0c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   11e0c:	b580      	push	{r7, lr}
   11e0e:	b084      	sub	sp, #16
   11e10:	9002      	str	r0, [sp, #8]
   11e12:	9103      	str	r1, [sp, #12]
   11e14:	6800      	ldr	r0, [r0, #0]
   11e16:	f000 f81c 	bl	11e52 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   11e1a:	9001      	str	r0, [sp, #4]
   11e1c:	e7ff      	b.n	11e1e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   11e1e:	9801      	ldr	r0, [sp, #4]
   11e20:	f000 0001 	and.w	r0, r0, #1
   11e24:	b004      	add	sp, #16
   11e26:	bd80      	pop	{r7, pc}

00011e28 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   11e28:	b089      	sub	sp, #36	; 0x24
   11e2a:	9005      	str	r0, [sp, #20]
   11e2c:	9106      	str	r1, [sp, #24]
   11e2e:	9107      	str	r1, [sp, #28]
   11e30:	9907      	ldr	r1, [sp, #28]
   11e32:	9002      	str	r0, [sp, #8]
   11e34:	9101      	str	r1, [sp, #4]
   11e36:	e7ff      	b.n	11e38 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   11e38:	9802      	ldr	r0, [sp, #8]
   11e3a:	9008      	str	r0, [sp, #32]
   11e3c:	9908      	ldr	r1, [sp, #32]
   11e3e:	9100      	str	r1, [sp, #0]
   11e40:	e7ff      	b.n	11e42 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   11e42:	9800      	ldr	r0, [sp, #0]
   11e44:	9003      	str	r0, [sp, #12]
   11e46:	9901      	ldr	r1, [sp, #4]
   11e48:	9104      	str	r1, [sp, #16]
   11e4a:	9803      	ldr	r0, [sp, #12]
   11e4c:	9904      	ldr	r1, [sp, #16]
   11e4e:	b009      	add	sp, #36	; 0x24
   11e50:	4770      	bx	lr

00011e52 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   11e52:	b580      	push	{r7, lr}
   11e54:	b088      	sub	sp, #32
   11e56:	9006      	str	r0, [sp, #24]
   11e58:	9107      	str	r1, [sp, #28]
   11e5a:	9004      	str	r0, [sp, #16]
   11e5c:	4608      	mov	r0, r1
   11e5e:	9103      	str	r1, [sp, #12]
   11e60:	f003 ffd7 	bl	15e12 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11e64:	9002      	str	r0, [sp, #8]
   11e66:	e7ff      	b.n	11e68 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   11e68:	9802      	ldr	r0, [sp, #8]
   11e6a:	07c1      	lsls	r1, r0, #31
   11e6c:	2900      	cmp	r1, #0
   11e6e:	d105      	bne.n	11e7c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   11e70:	e7ff      	b.n	11e72 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   11e72:	9803      	ldr	r0, [sp, #12]
   11e74:	f003 ffd1 	bl	15e1a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   11e78:	9001      	str	r0, [sp, #4]
   11e7a:	e007      	b.n	11e8c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   11e7c:	9804      	ldr	r0, [sp, #16]
   11e7e:	9903      	ldr	r1, [sp, #12]
   11e80:	f004 fd92 	bl	169a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   11e84:	f88d 0017 	strb.w	r0, [sp, #23]
   11e88:	e7ff      	b.n	11e8a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   11e8a:	e015      	b.n	11eb8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   11e8c:	9801      	ldr	r0, [sp, #4]
   11e8e:	07c1      	lsls	r1, r0, #31
   11e90:	2900      	cmp	r1, #0
   11e92:	d107      	bne.n	11ea4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   11e94:	e7ff      	b.n	11e96 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   11e96:	9804      	ldr	r0, [sp, #16]
   11e98:	9903      	ldr	r1, [sp, #12]
   11e9a:	f004 ff12 	bl	16cc2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   11e9e:	f88d 0017 	strb.w	r0, [sp, #23]
   11ea2:	e007      	b.n	11eb4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   11ea4:	9804      	ldr	r0, [sp, #16]
   11ea6:	9903      	ldr	r1, [sp, #12]
   11ea8:	f004 fde9 	bl	16a7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11eac:	f88d 0017 	strb.w	r0, [sp, #23]
   11eb0:	e7ff      	b.n	11eb2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   11eb2:	e000      	b.n	11eb6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   11eb4:	e7ff      	b.n	11eb6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   11eb6:	e7ff      	b.n	11eb8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   11eb8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11ebc:	b008      	add	sp, #32
   11ebe:	bd80      	pop	{r7, pc}

00011ec0 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   11ec0:	b086      	sub	sp, #24
   11ec2:	9004      	str	r0, [sp, #16]
   11ec4:	9105      	str	r1, [sp, #20]
   11ec6:	9002      	str	r0, [sp, #8]
   11ec8:	9103      	str	r1, [sp, #12]
   11eca:	9802      	ldr	r0, [sp, #8]
   11ecc:	9903      	ldr	r1, [sp, #12]
   11ece:	9000      	str	r0, [sp, #0]
   11ed0:	9101      	str	r1, [sp, #4]
   11ed2:	9800      	ldr	r0, [sp, #0]
   11ed4:	9901      	ldr	r1, [sp, #4]
   11ed6:	b006      	add	sp, #24
   11ed8:	4770      	bx	lr

00011eda <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   11eda:	b580      	push	{r7, lr}
   11edc:	b084      	sub	sp, #16
   11ede:	9002      	str	r0, [sp, #8]
   11ee0:	9103      	str	r1, [sp, #12]
   11ee2:	f000 f805 	bl	11ef0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   11ee6:	9001      	str	r0, [sp, #4]
   11ee8:	e7ff      	b.n	11eea <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   11eea:	9801      	ldr	r0, [sp, #4]
   11eec:	b004      	add	sp, #16
   11eee:	bd80      	pop	{r7, pc}

00011ef0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   11ef0:	b084      	sub	sp, #16
   11ef2:	9001      	str	r0, [sp, #4]
   11ef4:	9102      	str	r1, [sp, #8]
   11ef6:	4408      	add	r0, r1
   11ef8:	9003      	str	r0, [sp, #12]
   11efa:	9803      	ldr	r0, [sp, #12]
   11efc:	9000      	str	r0, [sp, #0]
   11efe:	e7ff      	b.n	11f00 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   11f00:	9800      	ldr	r0, [sp, #0]
   11f02:	b004      	add	sp, #16
   11f04:	4770      	bx	lr

00011f06 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   11f06:	b580      	push	{r7, lr}
   11f08:	b084      	sub	sp, #16
   11f0a:	9002      	str	r0, [sp, #8]
   11f0c:	9103      	str	r1, [sp, #12]
   11f0e:	f7ff ffd7 	bl	11ec0 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   11f12:	9001      	str	r0, [sp, #4]
   11f14:	9100      	str	r1, [sp, #0]
   11f16:	e7ff      	b.n	11f18 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   11f18:	9801      	ldr	r0, [sp, #4]
   11f1a:	9900      	ldr	r1, [sp, #0]
   11f1c:	b004      	add	sp, #16
   11f1e:	bd80      	pop	{r7, pc}

00011f20 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   11f20:	b084      	sub	sp, #16
   11f22:	9002      	str	r0, [sp, #8]
   11f24:	9103      	str	r1, [sp, #12]
   11f26:	9000      	str	r0, [sp, #0]
   11f28:	9101      	str	r1, [sp, #4]
   11f2a:	9801      	ldr	r0, [sp, #4]
   11f2c:	b004      	add	sp, #16
   11f2e:	4770      	bx	lr

00011f30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   11f30:	b082      	sub	sp, #8
   11f32:	9000      	str	r0, [sp, #0]
   11f34:	9101      	str	r1, [sp, #4]
   11f36:	b002      	add	sp, #8
   11f38:	4770      	bx	lr

00011f3a <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   11f3a:	b082      	sub	sp, #8
   11f3c:	9000      	str	r0, [sp, #0]
   11f3e:	9101      	str	r1, [sp, #4]
   11f40:	7800      	ldrb	r0, [r0, #0]
   11f42:	7809      	ldrb	r1, [r1, #0]
   11f44:	1a40      	subs	r0, r0, r1
   11f46:	fab0 f080 	clz	r0, r0
   11f4a:	0940      	lsrs	r0, r0, #5
   11f4c:	b002      	add	sp, #8
   11f4e:	4770      	bx	lr

00011f50 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   11f50:	b580      	push	{r7, lr}
   11f52:	b084      	sub	sp, #16
   11f54:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   11f56:	f002 fcab 	bl	148b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   11f5a:	9002      	str	r0, [sp, #8]
   11f5c:	9101      	str	r1, [sp, #4]
   11f5e:	e7ff      	b.n	11f60 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   11f60:	9802      	ldr	r0, [sp, #8]
   11f62:	9901      	ldr	r1, [sp, #4]
   11f64:	b004      	add	sp, #16
   11f66:	bd80      	pop	{r7, pc}

00011f68 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   11f68:	b580      	push	{r7, lr}
   11f6a:	b084      	sub	sp, #16
   11f6c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   11f6e:	f002 fcb4 	bl	148da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   11f72:	9002      	str	r0, [sp, #8]
   11f74:	9101      	str	r1, [sp, #4]
   11f76:	e7ff      	b.n	11f78 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   11f78:	9802      	ldr	r0, [sp, #8]
   11f7a:	9901      	ldr	r1, [sp, #4]
   11f7c:	b004      	add	sp, #16
   11f7e:	bd80      	pop	{r7, pc}

00011f80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   11f80:	b580      	push	{r7, lr}
   11f82:	b084      	sub	sp, #16
   11f84:	9001      	str	r0, [sp, #4]
   11f86:	9102      	str	r1, [sp, #8]
   11f88:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   11f8a:	f002 fbf3 	bl	14774 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   11f8e:	9000      	str	r0, [sp, #0]
   11f90:	e7ff      	b.n	11f92 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   11f92:	9800      	ldr	r0, [sp, #0]
   11f94:	f000 0001 	and.w	r0, r0, #1
   11f98:	b004      	add	sp, #16
   11f9a:	bd80      	pop	{r7, pc}

00011f9c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   11f9c:	b580      	push	{r7, lr}
   11f9e:	b086      	sub	sp, #24
   11fa0:	460a      	mov	r2, r1
   11fa2:	9004      	str	r0, [sp, #16]
   11fa4:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   11fa8:	9203      	str	r2, [sp, #12]
   11faa:	f002 fc46 	bl	1483a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   11fae:	9002      	str	r0, [sp, #8]
   11fb0:	9101      	str	r1, [sp, #4]
   11fb2:	e7ff      	b.n	11fb4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   11fb4:	9802      	ldr	r0, [sp, #8]
   11fb6:	f000 0001 	and.w	r0, r0, #1
   11fba:	9901      	ldr	r1, [sp, #4]
   11fbc:	b006      	add	sp, #24
   11fbe:	bd80      	pop	{r7, pc}

00011fc0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   11fc0:	b580      	push	{r7, lr}
   11fc2:	b082      	sub	sp, #8
   11fc4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   11fc6:	f002 fc61 	bl	1488c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   11fca:	e7ff      	b.n	11fcc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   11fcc:	b002      	add	sp, #8
   11fce:	bd80      	pop	{r7, pc}

00011fd0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   11fd0:	b580      	push	{r7, lr}
   11fd2:	b082      	sub	sp, #8
   11fd4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   11fd6:	f002 fc62 	bl	1489e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   11fda:	e7ff      	b.n	11fdc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   11fdc:	b002      	add	sp, #8
   11fde:	bd80      	pop	{r7, pc}

00011fe0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   11fe0:	b580      	push	{r7, lr}
   11fe2:	b082      	sub	sp, #8
   11fe4:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   11fe6:	f002 fc97 	bl	14918 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   11fea:	9000      	str	r0, [sp, #0]
   11fec:	e7ff      	b.n	11fee <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   11fee:	9800      	ldr	r0, [sp, #0]
   11ff0:	b002      	add	sp, #8
   11ff2:	bd80      	pop	{r7, pc}

00011ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   11ff4:	b081      	sub	sp, #4
   11ff6:	9000      	str	r0, [sp, #0]
   11ff8:	b001      	add	sp, #4
   11ffa:	4770      	bx	lr

00011ffc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   11ffc:	b580      	push	{r7, lr}
   11ffe:	b088      	sub	sp, #32
   12000:	9006      	str	r0, [sp, #24]
   12002:	9107      	str	r1, [sp, #28]
   12004:	9004      	str	r0, [sp, #16]
   12006:	4608      	mov	r0, r1
   12008:	9103      	str	r1, [sp, #12]
   1200a:	f003 ff02 	bl	15e12 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1200e:	9002      	str	r0, [sp, #8]
   12010:	e7ff      	b.n	12012 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   12012:	9802      	ldr	r0, [sp, #8]
   12014:	07c1      	lsls	r1, r0, #31
   12016:	2900      	cmp	r1, #0
   12018:	d105      	bne.n	12026 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   1201a:	e7ff      	b.n	1201c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   1201c:	9803      	ldr	r0, [sp, #12]
   1201e:	f003 fefc 	bl	15e1a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12022:	9001      	str	r0, [sp, #4]
   12024:	e007      	b.n	12036 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   12026:	9804      	ldr	r0, [sp, #16]
   12028:	9903      	ldr	r1, [sp, #12]
   1202a:	f004 fc00 	bl	1682e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   1202e:	f88d 0017 	strb.w	r0, [sp, #23]
   12032:	e7ff      	b.n	12034 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   12034:	e015      	b.n	12062 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12036:	9801      	ldr	r0, [sp, #4]
   12038:	07c1      	lsls	r1, r0, #31
   1203a:	2900      	cmp	r1, #0
   1203c:	d107      	bne.n	1204e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   1203e:	e7ff      	b.n	12040 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   12040:	9804      	ldr	r0, [sp, #16]
   12042:	9903      	ldr	r1, [sp, #12]
   12044:	f004 fd86 	bl	16b54 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   12048:	f88d 0017 	strb.w	r0, [sp, #23]
   1204c:	e007      	b.n	1205e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   1204e:	9804      	ldr	r0, [sp, #16]
   12050:	9903      	ldr	r1, [sp, #12]
   12052:	f004 fc1b 	bl	1688c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   12056:	f88d 0017 	strb.w	r0, [sp, #23]
   1205a:	e7ff      	b.n	1205c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   1205c:	e000      	b.n	12060 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1205e:	e7ff      	b.n	12060 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   12060:	e7ff      	b.n	12062 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12062:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12066:	b008      	add	sp, #32
   12068:	bd80      	pop	{r7, pc}

0001206a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   1206a:	b580      	push	{r7, lr}
   1206c:	b088      	sub	sp, #32
   1206e:	9006      	str	r0, [sp, #24]
   12070:	9107      	str	r1, [sp, #28]
   12072:	9004      	str	r0, [sp, #16]
   12074:	4608      	mov	r0, r1
   12076:	9103      	str	r1, [sp, #12]
   12078:	f003 fecb 	bl	15e12 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1207c:	9002      	str	r0, [sp, #8]
   1207e:	e7ff      	b.n	12080 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   12080:	9802      	ldr	r0, [sp, #8]
   12082:	07c1      	lsls	r1, r0, #31
   12084:	2900      	cmp	r1, #0
   12086:	d105      	bne.n	12094 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   12088:	e7ff      	b.n	1208a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   1208a:	9803      	ldr	r0, [sp, #12]
   1208c:	f003 fec5 	bl	15e1a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12090:	9001      	str	r0, [sp, #4]
   12092:	e007      	b.n	120a4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   12094:	9804      	ldr	r0, [sp, #16]
   12096:	9903      	ldr	r1, [sp, #12]
   12098:	f004 fc86 	bl	169a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1209c:	f88d 0017 	strb.w	r0, [sp, #23]
   120a0:	e7ff      	b.n	120a2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   120a2:	e015      	b.n	120d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   120a4:	9801      	ldr	r0, [sp, #4]
   120a6:	07c1      	lsls	r1, r0, #31
   120a8:	2900      	cmp	r1, #0
   120aa:	d107      	bne.n	120bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   120ac:	e7ff      	b.n	120ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   120ae:	9804      	ldr	r0, [sp, #16]
   120b0:	9903      	ldr	r1, [sp, #12]
   120b2:	f004 fd8c 	bl	16bce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   120b6:	f88d 0017 	strb.w	r0, [sp, #23]
   120ba:	e007      	b.n	120cc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   120bc:	9804      	ldr	r0, [sp, #16]
   120be:	9903      	ldr	r1, [sp, #12]
   120c0:	f004 fcdd 	bl	16a7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   120c4:	f88d 0017 	strb.w	r0, [sp, #23]
   120c8:	e7ff      	b.n	120ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   120ca:	e000      	b.n	120ce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   120cc:	e7ff      	b.n	120ce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   120ce:	e7ff      	b.n	120d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   120d0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   120d4:	b008      	add	sp, #32
   120d6:	bd80      	pop	{r7, pc}

000120d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   120d8:	b580      	push	{r7, lr}
   120da:	b088      	sub	sp, #32
   120dc:	9006      	str	r0, [sp, #24]
   120de:	9107      	str	r1, [sp, #28]
   120e0:	9004      	str	r0, [sp, #16]
   120e2:	4608      	mov	r0, r1
   120e4:	9103      	str	r1, [sp, #12]
   120e6:	f003 fe94 	bl	15e12 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   120ea:	9002      	str	r0, [sp, #8]
   120ec:	e7ff      	b.n	120ee <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   120ee:	9802      	ldr	r0, [sp, #8]
   120f0:	07c1      	lsls	r1, r0, #31
   120f2:	2900      	cmp	r1, #0
   120f4:	d105      	bne.n	12102 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   120f6:	e7ff      	b.n	120f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   120f8:	9803      	ldr	r0, [sp, #12]
   120fa:	f003 fe8e 	bl	15e1a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   120fe:	9001      	str	r0, [sp, #4]
   12100:	e007      	b.n	12112 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   12102:	9804      	ldr	r0, [sp, #16]
   12104:	9903      	ldr	r1, [sp, #12]
   12106:	f004 fc4f 	bl	169a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1210a:	f88d 0017 	strb.w	r0, [sp, #23]
   1210e:	e7ff      	b.n	12110 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   12110:	e015      	b.n	1213e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   12112:	9801      	ldr	r0, [sp, #4]
   12114:	07c1      	lsls	r1, r0, #31
   12116:	2900      	cmp	r1, #0
   12118:	d107      	bne.n	1212a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   1211a:	e7ff      	b.n	1211c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1211c:	9804      	ldr	r0, [sp, #16]
   1211e:	9903      	ldr	r1, [sp, #12]
   12120:	f004 fdcf 	bl	16cc2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12124:	f88d 0017 	strb.w	r0, [sp, #23]
   12128:	e007      	b.n	1213a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1212a:	9804      	ldr	r0, [sp, #16]
   1212c:	9903      	ldr	r1, [sp, #12]
   1212e:	f004 fca6 	bl	16a7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12132:	f88d 0017 	strb.w	r0, [sp, #23]
   12136:	e7ff      	b.n	12138 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   12138:	e000      	b.n	1213c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1213a:	e7ff      	b.n	1213c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1213c:	e7ff      	b.n	1213e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1213e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12142:	b008      	add	sp, #32
   12144:	bd80      	pop	{r7, pc}

00012146 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   12146:	b580      	push	{r7, lr}
   12148:	b084      	sub	sp, #16
   1214a:	9002      	str	r0, [sp, #8]
   1214c:	9103      	str	r1, [sp, #12]
   1214e:	6800      	ldr	r0, [r0, #0]
   12150:	6809      	ldr	r1, [r1, #0]
   12152:	f7ff fef2 	bl	11f3a <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   12156:	9001      	str	r0, [sp, #4]
   12158:	e7ff      	b.n	1215a <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   1215a:	9801      	ldr	r0, [sp, #4]
   1215c:	f000 0001 	and.w	r0, r0, #1
   12160:	b004      	add	sp, #16
   12162:	bd80      	pop	{r7, pc}

00012164 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12164:	b5b0      	push	{r4, r5, r7, lr}
   12166:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   1216a:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   1216c:	f005 fc8a 	bl	17a84 <hal_spi_disable>
   12170:	e7ff      	b.n	12172 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12172:	f240 01f8 	movw	r1, #248	; 0xf8
   12176:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1217a:	2000      	movs	r0, #0
   1217c:	f005 fc40 	bl	17a00 <hal_spi_config>
   12180:	906a      	str	r0, [sp, #424]	; 0x1a8
   12182:	e7ff      	b.n	12184 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   12184:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   12188:	f2c0 0001 	movt	r0, #1
   1218c:	6800      	ldr	r0, [r0, #0]
   1218e:	a96a      	add	r1, sp, #424	; 0x1a8
   12190:	916b      	str	r1, [sp, #428]	; 0x1ac
   12192:	906c      	str	r0, [sp, #432]	; 0x1b0
   12194:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   12196:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   1219a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   1219c:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   121a0:	6802      	ldr	r2, [r0, #0]
   121a2:	680b      	ldr	r3, [r1, #0]
   121a4:	429a      	cmp	r2, r3
   121a6:	9068      	str	r0, [sp, #416]	; 0x1a0
   121a8:	9167      	str	r1, [sp, #412]	; 0x19c
   121aa:	d10c      	bne.n	121c6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   121ac:	e7ff      	b.n	121ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   121ae:	f646 7004 	movw	r0, #28420	; 0x6f04
   121b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   121b6:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   121ba:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   121be:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   121c2:	9066      	str	r0, [sp, #408]	; 0x198
   121c4:	e075      	b.n	122b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   121c6:	f64d 2040 	movw	r0, #55872	; 0xda40
   121ca:	f2c0 0001 	movt	r0, #1
   121ce:	6801      	ldr	r1, [r0, #0]
   121d0:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   121d2:	907c      	str	r0, [sp, #496]	; 0x1f0
   121d4:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   121d6:	927d      	str	r2, [sp, #500]	; 0x1f4
   121d8:	f64d 235c 	movw	r3, #55900	; 0xda5c
   121dc:	f2c0 0301 	movt	r3, #1
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	f64d 2c60 	movw	ip, #55904	; 0xda60
   121e6:	f2c0 0c01 	movt	ip, #1
   121ea:	f8dc c000 	ldr.w	ip, [ip]
   121ee:	46ee      	mov	lr, sp
   121f0:	2400      	movs	r4, #0
   121f2:	f8ce 4000 	str.w	r4, [lr]
   121f6:	a87e      	add	r0, sp, #504	; 0x1f8
   121f8:	2201      	movs	r2, #1
   121fa:	9165      	str	r1, [sp, #404]	; 0x194
   121fc:	4619      	mov	r1, r3
   121fe:	4663      	mov	r3, ip
   12200:	f7f6 fc4c 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12204:	e7ff      	b.n	12206 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12206:	a87c      	add	r0, sp, #496	; 0x1f0
   12208:	9079      	str	r0, [sp, #484]	; 0x1e4
   1220a:	a87d      	add	r0, sp, #500	; 0x1f4
   1220c:	907a      	str	r0, [sp, #488]	; 0x1e8
   1220e:	a87e      	add	r0, sp, #504	; 0x1f8
   12210:	907b      	str	r0, [sp, #492]	; 0x1ec
   12212:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12214:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12218:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   1221a:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   1221e:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12220:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12224:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12228:	f2c0 0300 	movt	r3, #0
   1222c:	9164      	str	r1, [sp, #400]	; 0x190
   1222e:	4619      	mov	r1, r3
   12230:	9263      	str	r2, [sp, #396]	; 0x18c
   12232:	f7f7 f892 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12236:	9062      	str	r0, [sp, #392]	; 0x188
   12238:	9161      	str	r1, [sp, #388]	; 0x184
   1223a:	e7ff      	b.n	1223c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   1223c:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12240:	f2c0 0100 	movt	r1, #0
   12244:	9864      	ldr	r0, [sp, #400]	; 0x190
   12246:	f7f7 f888 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1224a:	9060      	str	r0, [sp, #384]	; 0x180
   1224c:	915f      	str	r1, [sp, #380]	; 0x17c
   1224e:	e7ff      	b.n	12250 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12250:	f245 619f 	movw	r1, #22175	; 0x569f
   12254:	f2c0 0101 	movt	r1, #1
   12258:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1225a:	f7f7 f8bd 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1225e:	905e      	str	r0, [sp, #376]	; 0x178
   12260:	915d      	str	r1, [sp, #372]	; 0x174
   12262:	e7ff      	b.n	12264 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12264:	9862      	ldr	r0, [sp, #392]	; 0x188
   12266:	9073      	str	r0, [sp, #460]	; 0x1cc
   12268:	9961      	ldr	r1, [sp, #388]	; 0x184
   1226a:	9174      	str	r1, [sp, #464]	; 0x1d0
   1226c:	9a60      	ldr	r2, [sp, #384]	; 0x180
   1226e:	9275      	str	r2, [sp, #468]	; 0x1d4
   12270:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12272:	9376      	str	r3, [sp, #472]	; 0x1d8
   12274:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12278:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   1227c:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12280:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12284:	466c      	mov	r4, sp
   12286:	2503      	movs	r5, #3
   12288:	6025      	str	r5, [r4, #0]
   1228a:	a86d      	add	r0, sp, #436	; 0x1b4
   1228c:	ab73      	add	r3, sp, #460	; 0x1cc
   1228e:	9965      	ldr	r1, [sp, #404]	; 0x194
   12290:	462a      	mov	r2, r5
   12292:	f7f6 fc03 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12296:	e7ff      	b.n	12298 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12298:	f64d 207c 	movw	r0, #55932	; 0xda7c
   1229c:	f2c0 0001 	movt	r0, #1
   122a0:	f002 ff0f 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   122a4:	905c      	str	r0, [sp, #368]	; 0x170
   122a6:	e7ff      	b.n	122a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   122a8:	a86d      	add	r0, sp, #436	; 0x1b4
   122aa:	995c      	ldr	r1, [sp, #368]	; 0x170
   122ac:	f002 ff46 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   122b0:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   122b2:	f243 60ff 	movw	r0, #14079	; 0x36ff
   122b6:	f2c0 0001 	movt	r0, #1
   122ba:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   122bc:	9985      	ldr	r1, [sp, #532]	; 0x214
   122be:	2000      	movs	r0, #0
   122c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
   122c2:	f005 fc43 	bl	17b4c <hal_spi_set_txrx_cb>
   122c6:	9084      	str	r0, [sp, #528]	; 0x210
   122c8:	e7ff      	b.n	122ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   122ca:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   122ce:	f2c0 0001 	movt	r0, #1
   122d2:	6800      	ldr	r0, [r0, #0]
   122d4:	a984      	add	r1, sp, #528	; 0x210
   122d6:	9186      	str	r1, [sp, #536]	; 0x218
   122d8:	9087      	str	r0, [sp, #540]	; 0x21c
   122da:	9886      	ldr	r0, [sp, #536]	; 0x218
   122dc:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   122e0:	9987      	ldr	r1, [sp, #540]	; 0x21c
   122e2:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   122e6:	6802      	ldr	r2, [r0, #0]
   122e8:	680b      	ldr	r3, [r1, #0]
   122ea:	429a      	cmp	r2, r3
   122ec:	905b      	str	r0, [sp, #364]	; 0x16c
   122ee:	915a      	str	r1, [sp, #360]	; 0x168
   122f0:	d105      	bne.n	122fe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   122f2:	e7ff      	b.n	122f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   122f4:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   122f6:	f005 fb9f 	bl	17a38 <hal_spi_enable>
   122fa:	909f      	str	r0, [sp, #636]	; 0x27c
   122fc:	e075      	b.n	123ea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   122fe:	f64d 2040 	movw	r0, #55872	; 0xda40
   12302:	f2c0 0001 	movt	r0, #1
   12306:	6801      	ldr	r1, [r0, #0]
   12308:	985b      	ldr	r0, [sp, #364]	; 0x16c
   1230a:	9097      	str	r0, [sp, #604]	; 0x25c
   1230c:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   1230e:	9298      	str	r2, [sp, #608]	; 0x260
   12310:	f64d 23a0 	movw	r3, #55968	; 0xdaa0
   12314:	f2c0 0301 	movt	r3, #1
   12318:	681b      	ldr	r3, [r3, #0]
   1231a:	f64d 2c60 	movw	ip, #55904	; 0xda60
   1231e:	f2c0 0c01 	movt	ip, #1
   12322:	f8dc c000 	ldr.w	ip, [ip]
   12326:	46ee      	mov	lr, sp
   12328:	2400      	movs	r4, #0
   1232a:	f8ce 4000 	str.w	r4, [lr]
   1232e:	a899      	add	r0, sp, #612	; 0x264
   12330:	2201      	movs	r2, #1
   12332:	9159      	str	r1, [sp, #356]	; 0x164
   12334:	4619      	mov	r1, r3
   12336:	4663      	mov	r3, ip
   12338:	f7f6 fbb0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1233c:	e7ff      	b.n	1233e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   1233e:	a897      	add	r0, sp, #604	; 0x25c
   12340:	9094      	str	r0, [sp, #592]	; 0x250
   12342:	a898      	add	r0, sp, #608	; 0x260
   12344:	9095      	str	r0, [sp, #596]	; 0x254
   12346:	a899      	add	r0, sp, #612	; 0x264
   12348:	9096      	str	r0, [sp, #600]	; 0x258
   1234a:	9894      	ldr	r0, [sp, #592]	; 0x250
   1234c:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12350:	9995      	ldr	r1, [sp, #596]	; 0x254
   12352:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12356:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12358:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   1235c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12360:	f2c0 0300 	movt	r3, #0
   12364:	9158      	str	r1, [sp, #352]	; 0x160
   12366:	4619      	mov	r1, r3
   12368:	9257      	str	r2, [sp, #348]	; 0x15c
   1236a:	f7f6 fff6 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1236e:	9056      	str	r0, [sp, #344]	; 0x158
   12370:	9155      	str	r1, [sp, #340]	; 0x154
   12372:	e7ff      	b.n	12374 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12374:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12378:	f2c0 0100 	movt	r1, #0
   1237c:	9858      	ldr	r0, [sp, #352]	; 0x160
   1237e:	f7f6 ffec 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12382:	9054      	str	r0, [sp, #336]	; 0x150
   12384:	9153      	str	r1, [sp, #332]	; 0x14c
   12386:	e7ff      	b.n	12388 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   12388:	f245 619f 	movw	r1, #22175	; 0x569f
   1238c:	f2c0 0101 	movt	r1, #1
   12390:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12392:	f7f7 f821 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12396:	9052      	str	r0, [sp, #328]	; 0x148
   12398:	9151      	str	r1, [sp, #324]	; 0x144
   1239a:	e7ff      	b.n	1239c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   1239c:	9856      	ldr	r0, [sp, #344]	; 0x158
   1239e:	908e      	str	r0, [sp, #568]	; 0x238
   123a0:	9955      	ldr	r1, [sp, #340]	; 0x154
   123a2:	918f      	str	r1, [sp, #572]	; 0x23c
   123a4:	9a54      	ldr	r2, [sp, #336]	; 0x150
   123a6:	9290      	str	r2, [sp, #576]	; 0x240
   123a8:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   123aa:	9391      	str	r3, [sp, #580]	; 0x244
   123ac:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   123b0:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   123b4:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   123b8:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   123bc:	466c      	mov	r4, sp
   123be:	2503      	movs	r5, #3
   123c0:	6025      	str	r5, [r4, #0]
   123c2:	a888      	add	r0, sp, #544	; 0x220
   123c4:	ab8e      	add	r3, sp, #568	; 0x238
   123c6:	9959      	ldr	r1, [sp, #356]	; 0x164
   123c8:	462a      	mov	r2, r5
   123ca:	f7f6 fb67 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   123ce:	e7ff      	b.n	123d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   123d0:	f64d 20a4 	movw	r0, #55972	; 0xdaa4
   123d4:	f2c0 0001 	movt	r0, #1
   123d8:	f002 fe73 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   123dc:	9050      	str	r0, [sp, #320]	; 0x140
   123de:	e7ff      	b.n	123e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   123e0:	a888      	add	r0, sp, #544	; 0x220
   123e2:	9950      	ldr	r1, [sp, #320]	; 0x140
   123e4:	f002 feaa 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   123e8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   123ea:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   123ee:	f2c0 0001 	movt	r0, #1
   123f2:	6800      	ldr	r0, [r0, #0]
   123f4:	a99f      	add	r1, sp, #636	; 0x27c
   123f6:	91a0      	str	r1, [sp, #640]	; 0x280
   123f8:	90a1      	str	r0, [sp, #644]	; 0x284
   123fa:	98a0      	ldr	r0, [sp, #640]	; 0x280
   123fc:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12400:	99a1      	ldr	r1, [sp, #644]	; 0x284
   12402:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12406:	6802      	ldr	r2, [r0, #0]
   12408:	680b      	ldr	r3, [r1, #0]
   1240a:	429a      	cmp	r2, r3
   1240c:	904f      	str	r0, [sp, #316]	; 0x13c
   1240e:	914e      	str	r1, [sp, #312]	; 0x138
   12410:	d106      	bne.n	12420 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   12412:	e7ff      	b.n	12414 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12414:	2019      	movs	r0, #25
   12416:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12418:	f004 fee4 	bl	171e4 <hal_gpio_init_out>
   1241c:	90b9      	str	r0, [sp, #740]	; 0x2e4
   1241e:	e075      	b.n	1250c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12420:	f64d 2040 	movw	r0, #55872	; 0xda40
   12424:	f2c0 0001 	movt	r0, #1
   12428:	6801      	ldr	r1, [r0, #0]
   1242a:	984f      	ldr	r0, [sp, #316]	; 0x13c
   1242c:	90b1      	str	r0, [sp, #708]	; 0x2c4
   1242e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12430:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12432:	f64d 23cc 	movw	r3, #56012	; 0xdacc
   12436:	f2c0 0301 	movt	r3, #1
   1243a:	681b      	ldr	r3, [r3, #0]
   1243c:	f64d 2c60 	movw	ip, #55904	; 0xda60
   12440:	f2c0 0c01 	movt	ip, #1
   12444:	f8dc c000 	ldr.w	ip, [ip]
   12448:	46ee      	mov	lr, sp
   1244a:	2400      	movs	r4, #0
   1244c:	f8ce 4000 	str.w	r4, [lr]
   12450:	a8b3      	add	r0, sp, #716	; 0x2cc
   12452:	2201      	movs	r2, #1
   12454:	914d      	str	r1, [sp, #308]	; 0x134
   12456:	4619      	mov	r1, r3
   12458:	4663      	mov	r3, ip
   1245a:	f7f6 fb1f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1245e:	e7ff      	b.n	12460 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12460:	a8b1      	add	r0, sp, #708	; 0x2c4
   12462:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12464:	a8b2      	add	r0, sp, #712	; 0x2c8
   12466:	90af      	str	r0, [sp, #700]	; 0x2bc
   12468:	a8b3      	add	r0, sp, #716	; 0x2cc
   1246a:	90b0      	str	r0, [sp, #704]	; 0x2c0
   1246c:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   1246e:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12472:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12474:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12478:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   1247a:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   1247e:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12482:	f2c0 0300 	movt	r3, #0
   12486:	914c      	str	r1, [sp, #304]	; 0x130
   12488:	4619      	mov	r1, r3
   1248a:	924b      	str	r2, [sp, #300]	; 0x12c
   1248c:	f7f6 ff65 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12490:	904a      	str	r0, [sp, #296]	; 0x128
   12492:	9149      	str	r1, [sp, #292]	; 0x124
   12494:	e7ff      	b.n	12496 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12496:	f249 21eb 	movw	r1, #37611	; 0x92eb
   1249a:	f2c0 0100 	movt	r1, #0
   1249e:	984c      	ldr	r0, [sp, #304]	; 0x130
   124a0:	f7f6 ff5b 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   124a4:	9048      	str	r0, [sp, #288]	; 0x120
   124a6:	9147      	str	r1, [sp, #284]	; 0x11c
   124a8:	e7ff      	b.n	124aa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   124aa:	f245 619f 	movw	r1, #22175	; 0x569f
   124ae:	f2c0 0101 	movt	r1, #1
   124b2:	984b      	ldr	r0, [sp, #300]	; 0x12c
   124b4:	f7f6 ff90 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   124b8:	9046      	str	r0, [sp, #280]	; 0x118
   124ba:	9145      	str	r1, [sp, #276]	; 0x114
   124bc:	e7ff      	b.n	124be <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   124be:	984a      	ldr	r0, [sp, #296]	; 0x128
   124c0:	90a8      	str	r0, [sp, #672]	; 0x2a0
   124c2:	9949      	ldr	r1, [sp, #292]	; 0x124
   124c4:	91a9      	str	r1, [sp, #676]	; 0x2a4
   124c6:	9a48      	ldr	r2, [sp, #288]	; 0x120
   124c8:	92aa      	str	r2, [sp, #680]	; 0x2a8
   124ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   124cc:	93ab      	str	r3, [sp, #684]	; 0x2ac
   124ce:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   124d2:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   124d6:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   124da:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   124de:	466c      	mov	r4, sp
   124e0:	2503      	movs	r5, #3
   124e2:	6025      	str	r5, [r4, #0]
   124e4:	a8a2      	add	r0, sp, #648	; 0x288
   124e6:	aba8      	add	r3, sp, #672	; 0x2a0
   124e8:	994d      	ldr	r1, [sp, #308]	; 0x134
   124ea:	462a      	mov	r2, r5
   124ec:	f7f6 fad6 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   124f0:	e7ff      	b.n	124f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   124f2:	f64d 20d0 	movw	r0, #56016	; 0xdad0
   124f6:	f2c0 0001 	movt	r0, #1
   124fa:	f002 fde2 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   124fe:	9044      	str	r0, [sp, #272]	; 0x110
   12500:	e7ff      	b.n	12502 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12502:	a8a2      	add	r0, sp, #648	; 0x288
   12504:	9944      	ldr	r1, [sp, #272]	; 0x110
   12506:	f002 fe19 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1250a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1250c:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   12510:	f2c0 0001 	movt	r0, #1
   12514:	6800      	ldr	r0, [r0, #0]
   12516:	a9b9      	add	r1, sp, #740	; 0x2e4
   12518:	91ba      	str	r1, [sp, #744]	; 0x2e8
   1251a:	90bb      	str	r0, [sp, #748]	; 0x2ec
   1251c:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   1251e:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12522:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12524:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12528:	6802      	ldr	r2, [r0, #0]
   1252a:	680b      	ldr	r3, [r1, #0]
   1252c:	429a      	cmp	r2, r3
   1252e:	9043      	str	r0, [sp, #268]	; 0x10c
   12530:	9142      	str	r1, [sp, #264]	; 0x108
   12532:	d106      	bne.n	12542 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12534:	e7ff      	b.n	12536 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12536:	2012      	movs	r0, #18
   12538:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1253a:	f004 fe53 	bl	171e4 <hal_gpio_init_out>
   1253e:	90d3      	str	r0, [sp, #844]	; 0x34c
   12540:	e075      	b.n	1262e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12542:	f64d 2040 	movw	r0, #55872	; 0xda40
   12546:	f2c0 0001 	movt	r0, #1
   1254a:	6801      	ldr	r1, [r0, #0]
   1254c:	9843      	ldr	r0, [sp, #268]	; 0x10c
   1254e:	90cb      	str	r0, [sp, #812]	; 0x32c
   12550:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12552:	92cc      	str	r2, [sp, #816]	; 0x330
   12554:	f64d 23f4 	movw	r3, #56052	; 0xdaf4
   12558:	f2c0 0301 	movt	r3, #1
   1255c:	681b      	ldr	r3, [r3, #0]
   1255e:	f64d 2c60 	movw	ip, #55904	; 0xda60
   12562:	f2c0 0c01 	movt	ip, #1
   12566:	f8dc c000 	ldr.w	ip, [ip]
   1256a:	46ee      	mov	lr, sp
   1256c:	2400      	movs	r4, #0
   1256e:	f8ce 4000 	str.w	r4, [lr]
   12572:	a8cd      	add	r0, sp, #820	; 0x334
   12574:	2201      	movs	r2, #1
   12576:	9141      	str	r1, [sp, #260]	; 0x104
   12578:	4619      	mov	r1, r3
   1257a:	4663      	mov	r3, ip
   1257c:	f7f6 fa8e 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12580:	e7ff      	b.n	12582 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12582:	a8cb      	add	r0, sp, #812	; 0x32c
   12584:	90c8      	str	r0, [sp, #800]	; 0x320
   12586:	a8cc      	add	r0, sp, #816	; 0x330
   12588:	90c9      	str	r0, [sp, #804]	; 0x324
   1258a:	a8cd      	add	r0, sp, #820	; 0x334
   1258c:	90ca      	str	r0, [sp, #808]	; 0x328
   1258e:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12590:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12594:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12596:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   1259a:	9aca      	ldr	r2, [sp, #808]	; 0x328
   1259c:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   125a0:	f249 23eb 	movw	r3, #37611	; 0x92eb
   125a4:	f2c0 0300 	movt	r3, #0
   125a8:	9140      	str	r1, [sp, #256]	; 0x100
   125aa:	4619      	mov	r1, r3
   125ac:	923f      	str	r2, [sp, #252]	; 0xfc
   125ae:	f7f6 fed4 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   125b2:	903e      	str	r0, [sp, #248]	; 0xf8
   125b4:	913d      	str	r1, [sp, #244]	; 0xf4
   125b6:	e7ff      	b.n	125b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   125b8:	f249 21eb 	movw	r1, #37611	; 0x92eb
   125bc:	f2c0 0100 	movt	r1, #0
   125c0:	9840      	ldr	r0, [sp, #256]	; 0x100
   125c2:	f7f6 feca 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   125c6:	903c      	str	r0, [sp, #240]	; 0xf0
   125c8:	913b      	str	r1, [sp, #236]	; 0xec
   125ca:	e7ff      	b.n	125cc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   125cc:	f245 619f 	movw	r1, #22175	; 0x569f
   125d0:	f2c0 0101 	movt	r1, #1
   125d4:	983f      	ldr	r0, [sp, #252]	; 0xfc
   125d6:	f7f6 feff 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   125da:	903a      	str	r0, [sp, #232]	; 0xe8
   125dc:	9139      	str	r1, [sp, #228]	; 0xe4
   125de:	e7ff      	b.n	125e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   125e0:	983e      	ldr	r0, [sp, #248]	; 0xf8
   125e2:	90c2      	str	r0, [sp, #776]	; 0x308
   125e4:	993d      	ldr	r1, [sp, #244]	; 0xf4
   125e6:	91c3      	str	r1, [sp, #780]	; 0x30c
   125e8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   125ea:	92c4      	str	r2, [sp, #784]	; 0x310
   125ec:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   125ee:	93c5      	str	r3, [sp, #788]	; 0x314
   125f0:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   125f4:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   125f8:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   125fc:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12600:	466c      	mov	r4, sp
   12602:	2503      	movs	r5, #3
   12604:	6025      	str	r5, [r4, #0]
   12606:	a8bc      	add	r0, sp, #752	; 0x2f0
   12608:	abc2      	add	r3, sp, #776	; 0x308
   1260a:	9941      	ldr	r1, [sp, #260]	; 0x104
   1260c:	462a      	mov	r2, r5
   1260e:	f7f6 fa45 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12612:	e7ff      	b.n	12614 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12614:	f64d 20f8 	movw	r0, #56056	; 0xdaf8
   12618:	f2c0 0001 	movt	r0, #1
   1261c:	f002 fd51 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12620:	9038      	str	r0, [sp, #224]	; 0xe0
   12622:	e7ff      	b.n	12624 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12624:	a8bc      	add	r0, sp, #752	; 0x2f0
   12626:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12628:	f002 fd88 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1262c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1262e:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   12632:	f2c0 0001 	movt	r0, #1
   12636:	6800      	ldr	r0, [r0, #0]
   12638:	a9d3      	add	r1, sp, #844	; 0x34c
   1263a:	91d4      	str	r1, [sp, #848]	; 0x350
   1263c:	90d5      	str	r0, [sp, #852]	; 0x354
   1263e:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12640:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12644:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12646:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   1264a:	6802      	ldr	r2, [r0, #0]
   1264c:	680b      	ldr	r3, [r1, #0]
   1264e:	429a      	cmp	r2, r3
   12650:	9037      	str	r0, [sp, #220]	; 0xdc
   12652:	9136      	str	r1, [sp, #216]	; 0xd8
   12654:	d107      	bne.n	12666 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12656:	e7ff      	b.n	12658 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12658:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   1265c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12660:	f005 feca 	bl	183f8 <os_eventq_init>
   12664:	e075      	b.n	12752 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12666:	f64d 2040 	movw	r0, #55872	; 0xda40
   1266a:	f2c0 0001 	movt	r0, #1
   1266e:	6801      	ldr	r1, [r0, #0]
   12670:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12672:	90e5      	str	r0, [sp, #916]	; 0x394
   12674:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12676:	92e6      	str	r2, [sp, #920]	; 0x398
   12678:	f64d 23f4 	movw	r3, #56052	; 0xdaf4
   1267c:	f2c0 0301 	movt	r3, #1
   12680:	681b      	ldr	r3, [r3, #0]
   12682:	f64d 2c60 	movw	ip, #55904	; 0xda60
   12686:	f2c0 0c01 	movt	ip, #1
   1268a:	f8dc c000 	ldr.w	ip, [ip]
   1268e:	46ee      	mov	lr, sp
   12690:	2400      	movs	r4, #0
   12692:	f8ce 4000 	str.w	r4, [lr]
   12696:	a8e7      	add	r0, sp, #924	; 0x39c
   12698:	2201      	movs	r2, #1
   1269a:	9135      	str	r1, [sp, #212]	; 0xd4
   1269c:	4619      	mov	r1, r3
   1269e:	4663      	mov	r3, ip
   126a0:	f7f6 f9fc 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   126a4:	e7ff      	b.n	126a6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   126a6:	a8e5      	add	r0, sp, #916	; 0x394
   126a8:	90e2      	str	r0, [sp, #904]	; 0x388
   126aa:	a8e6      	add	r0, sp, #920	; 0x398
   126ac:	90e3      	str	r0, [sp, #908]	; 0x38c
   126ae:	a8e7      	add	r0, sp, #924	; 0x39c
   126b0:	90e4      	str	r0, [sp, #912]	; 0x390
   126b2:	98e2      	ldr	r0, [sp, #904]	; 0x388
   126b4:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   126b8:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   126ba:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   126be:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   126c0:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   126c4:	f249 23eb 	movw	r3, #37611	; 0x92eb
   126c8:	f2c0 0300 	movt	r3, #0
   126cc:	9134      	str	r1, [sp, #208]	; 0xd0
   126ce:	4619      	mov	r1, r3
   126d0:	9233      	str	r2, [sp, #204]	; 0xcc
   126d2:	f7f6 fe42 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   126d6:	9032      	str	r0, [sp, #200]	; 0xc8
   126d8:	9131      	str	r1, [sp, #196]	; 0xc4
   126da:	e7ff      	b.n	126dc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   126dc:	f249 21eb 	movw	r1, #37611	; 0x92eb
   126e0:	f2c0 0100 	movt	r1, #0
   126e4:	9834      	ldr	r0, [sp, #208]	; 0xd0
   126e6:	f7f6 fe38 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   126ea:	9030      	str	r0, [sp, #192]	; 0xc0
   126ec:	912f      	str	r1, [sp, #188]	; 0xbc
   126ee:	e7ff      	b.n	126f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   126f0:	f245 619f 	movw	r1, #22175	; 0x569f
   126f4:	f2c0 0101 	movt	r1, #1
   126f8:	9833      	ldr	r0, [sp, #204]	; 0xcc
   126fa:	f7f6 fe6d 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   126fe:	902e      	str	r0, [sp, #184]	; 0xb8
   12700:	912d      	str	r1, [sp, #180]	; 0xb4
   12702:	e7ff      	b.n	12704 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12704:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12706:	90dc      	str	r0, [sp, #880]	; 0x370
   12708:	9931      	ldr	r1, [sp, #196]	; 0xc4
   1270a:	91dd      	str	r1, [sp, #884]	; 0x374
   1270c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   1270e:	92de      	str	r2, [sp, #888]	; 0x378
   12710:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12712:	93df      	str	r3, [sp, #892]	; 0x37c
   12714:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12718:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   1271c:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12720:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12724:	466c      	mov	r4, sp
   12726:	2503      	movs	r5, #3
   12728:	6025      	str	r5, [r4, #0]
   1272a:	a8d6      	add	r0, sp, #856	; 0x358
   1272c:	abdc      	add	r3, sp, #880	; 0x370
   1272e:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12730:	462a      	mov	r2, r5
   12732:	f7f6 f9b3 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12736:	e7ff      	b.n	12738 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12738:	f64d 3008 	movw	r0, #56072	; 0xdb08
   1273c:	f2c0 0001 	movt	r0, #1
   12740:	f002 fcbf 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12744:	902c      	str	r0, [sp, #176]	; 0xb0
   12746:	e7ff      	b.n	12748 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12748:	a8d6      	add	r0, sp, #856	; 0x358
   1274a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1274c:	f002 fcf6 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12750:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12752:	f243 00e1 	movw	r0, #12513	; 0x30e1
   12756:	f2c0 0001 	movt	r0, #1
   1275a:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   1275c:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   1275e:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12762:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12766:	2200      	movs	r2, #0
   12768:	f005 fef4 	bl	18554 <os_mqueue_init>
   1276c:	90ed      	str	r0, [sp, #948]	; 0x3b4
   1276e:	e7ff      	b.n	12770 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12770:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   12774:	f2c0 0001 	movt	r0, #1
   12778:	6800      	ldr	r0, [r0, #0]
   1277a:	a9ed      	add	r1, sp, #948	; 0x3b4
   1277c:	91ef      	str	r1, [sp, #956]	; 0x3bc
   1277e:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12780:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12782:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12786:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12788:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   1278c:	6802      	ldr	r2, [r0, #0]
   1278e:	680b      	ldr	r3, [r1, #0]
   12790:	429a      	cmp	r2, r3
   12792:	902b      	str	r0, [sp, #172]	; 0xac
   12794:	912a      	str	r1, [sp, #168]	; 0xa8
   12796:	d10a      	bne.n	127ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12798:	e7ff      	b.n	1279a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   1279a:	f646 207c 	movw	r0, #27260	; 0x6a7c
   1279e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   127a2:	2100      	movs	r1, #0
   127a4:	f006 fbd0 	bl	18f48 <os_sem_init>
   127a8:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   127ac:	e07b      	b.n	128a6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   127ae:	f64d 2040 	movw	r0, #55872	; 0xda40
   127b2:	f2c0 0001 	movt	r0, #1
   127b6:	6801      	ldr	r1, [r0, #0]
   127b8:	982b      	ldr	r0, [sp, #172]	; 0xac
   127ba:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   127be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   127c0:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   127c4:	f64d 332c 	movw	r3, #56108	; 0xdb2c
   127c8:	f2c0 0301 	movt	r3, #1
   127cc:	681b      	ldr	r3, [r3, #0]
   127ce:	f64d 2c60 	movw	ip, #55904	; 0xda60
   127d2:	f2c0 0c01 	movt	ip, #1
   127d6:	f8dc c000 	ldr.w	ip, [ip]
   127da:	46ee      	mov	lr, sp
   127dc:	2400      	movs	r4, #0
   127de:	f8ce 4000 	str.w	r4, [lr]
   127e2:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   127e6:	2201      	movs	r2, #1
   127e8:	9129      	str	r1, [sp, #164]	; 0xa4
   127ea:	4619      	mov	r1, r3
   127ec:	4663      	mov	r3, ip
   127ee:	f7f6 f955 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   127f2:	e7ff      	b.n	127f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   127f4:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   127f8:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   127fa:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   127fe:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12800:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12804:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   12806:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12808:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   1280c:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   1280e:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   12812:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   12814:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12818:	f249 23eb 	movw	r3, #37611	; 0x92eb
   1281c:	f2c0 0300 	movt	r3, #0
   12820:	9128      	str	r1, [sp, #160]	; 0xa0
   12822:	4619      	mov	r1, r3
   12824:	9227      	str	r2, [sp, #156]	; 0x9c
   12826:	f7f6 fd98 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1282a:	9026      	str	r0, [sp, #152]	; 0x98
   1282c:	9125      	str	r1, [sp, #148]	; 0x94
   1282e:	e7ff      	b.n	12830 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   12830:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12834:	f2c0 0100 	movt	r1, #0
   12838:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1283a:	f7f6 fd8e 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1283e:	9024      	str	r0, [sp, #144]	; 0x90
   12840:	9123      	str	r1, [sp, #140]	; 0x8c
   12842:	e7ff      	b.n	12844 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   12844:	f245 619f 	movw	r1, #22175	; 0x569f
   12848:	f2c0 0101 	movt	r1, #1
   1284c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1284e:	f7f6 fdc3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12852:	9022      	str	r0, [sp, #136]	; 0x88
   12854:	9121      	str	r1, [sp, #132]	; 0x84
   12856:	e7ff      	b.n	12858 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   12858:	9826      	ldr	r0, [sp, #152]	; 0x98
   1285a:	90f7      	str	r0, [sp, #988]	; 0x3dc
   1285c:	9925      	ldr	r1, [sp, #148]	; 0x94
   1285e:	91f8      	str	r1, [sp, #992]	; 0x3e0
   12860:	9a24      	ldr	r2, [sp, #144]	; 0x90
   12862:	92f9      	str	r2, [sp, #996]	; 0x3e4
   12864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12866:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   12868:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   1286c:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   12870:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   12874:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   12878:	466c      	mov	r4, sp
   1287a:	2503      	movs	r5, #3
   1287c:	6025      	str	r5, [r4, #0]
   1287e:	a8f1      	add	r0, sp, #964	; 0x3c4
   12880:	abf7      	add	r3, sp, #988	; 0x3dc
   12882:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12884:	462a      	mov	r2, r5
   12886:	f7f6 f909 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1288a:	e7ff      	b.n	1288c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   1288c:	f64d 3030 	movw	r0, #56112	; 0xdb30
   12890:	f2c0 0001 	movt	r0, #1
   12894:	f002 fc15 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12898:	9020      	str	r0, [sp, #128]	; 0x80
   1289a:	e7ff      	b.n	1289c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   1289c:	a8f1      	add	r0, sp, #964	; 0x3c4
   1289e:	9920      	ldr	r1, [sp, #128]	; 0x80
   128a0:	f002 fc4c 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   128a4:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   128a6:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   128aa:	f2c0 0001 	movt	r0, #1
   128ae:	6800      	ldr	r0, [r0, #0]
   128b0:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   128b4:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   128b8:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   128bc:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   128c0:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   128c4:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   128c8:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   128cc:	6802      	ldr	r2, [r0, #0]
   128ce:	680b      	ldr	r3, [r1, #0]
   128d0:	429a      	cmp	r2, r3
   128d2:	901f      	str	r0, [sp, #124]	; 0x7c
   128d4:	911e      	str	r1, [sp, #120]	; 0x78
   128d6:	d10a      	bne.n	128ee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   128d8:	e7ff      	b.n	128da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   128da:	f646 2084 	movw	r0, #27268	; 0x6a84
   128de:	f2c2 0000 	movt	r0, #8192	; 0x2000
   128e2:	2102      	movs	r1, #2
   128e4:	f006 fb30 	bl	18f48 <os_sem_init>
   128e8:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   128ec:	e088      	b.n	12a00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   128ee:	f64d 2040 	movw	r0, #55872	; 0xda40
   128f2:	f2c0 0001 	movt	r0, #1
   128f6:	6801      	ldr	r1, [r0, #0]
   128f8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   128fa:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   128fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12900:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   12904:	f64d 3358 	movw	r3, #56152	; 0xdb58
   12908:	f2c0 0301 	movt	r3, #1
   1290c:	681b      	ldr	r3, [r3, #0]
   1290e:	f64d 2c60 	movw	ip, #55904	; 0xda60
   12912:	f2c0 0c01 	movt	ip, #1
   12916:	f8dc c000 	ldr.w	ip, [ip]
   1291a:	46ee      	mov	lr, sp
   1291c:	2400      	movs	r4, #0
   1291e:	f8ce 4000 	str.w	r4, [lr]
   12922:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12926:	2201      	movs	r2, #1
   12928:	911d      	str	r1, [sp, #116]	; 0x74
   1292a:	4619      	mov	r1, r3
   1292c:	4663      	mov	r3, ip
   1292e:	f7f6 f8b5 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12932:	e7ff      	b.n	12934 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   12934:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   12938:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   1293c:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   12940:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   12944:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12948:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   1294c:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   12950:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   12954:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   12958:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   1295c:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   12960:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   12964:	f249 333f 	movw	r3, #37695	; 0x933f
   12968:	f2c0 0300 	movt	r3, #0
   1296c:	911c      	str	r1, [sp, #112]	; 0x70
   1296e:	4619      	mov	r1, r3
   12970:	921b      	str	r2, [sp, #108]	; 0x6c
   12972:	f7f6 fd1c 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12976:	901a      	str	r0, [sp, #104]	; 0x68
   12978:	9119      	str	r1, [sp, #100]	; 0x64
   1297a:	e7ff      	b.n	1297c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   1297c:	f249 313f 	movw	r1, #37695	; 0x933f
   12980:	f2c0 0100 	movt	r1, #0
   12984:	981c      	ldr	r0, [sp, #112]	; 0x70
   12986:	f7f6 fd12 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1298a:	9018      	str	r0, [sp, #96]	; 0x60
   1298c:	9117      	str	r1, [sp, #92]	; 0x5c
   1298e:	e7ff      	b.n	12990 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   12990:	f245 619f 	movw	r1, #22175	; 0x569f
   12994:	f2c0 0101 	movt	r1, #1
   12998:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1299a:	f7f6 fd1d 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1299e:	9016      	str	r0, [sp, #88]	; 0x58
   129a0:	9115      	str	r1, [sp, #84]	; 0x54
   129a2:	e7ff      	b.n	129a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   129a4:	981a      	ldr	r0, [sp, #104]	; 0x68
   129a6:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   129aa:	9919      	ldr	r1, [sp, #100]	; 0x64
   129ac:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   129b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   129b2:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   129b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   129b8:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   129bc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   129c0:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   129c4:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   129c8:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   129cc:	466c      	mov	r4, sp
   129ce:	2503      	movs	r5, #3
   129d0:	6025      	str	r5, [r4, #0]
   129d2:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   129d6:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   129da:	991d      	ldr	r1, [sp, #116]	; 0x74
   129dc:	462a      	mov	r2, r5
   129de:	f7f6 f85d 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   129e2:	e7ff      	b.n	129e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   129e4:	f64d 305c 	movw	r0, #56156	; 0xdb5c
   129e8:	f2c0 0001 	movt	r0, #1
   129ec:	f002 fb69 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   129f0:	9014      	str	r0, [sp, #80]	; 0x50
   129f2:	e7ff      	b.n	129f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   129f4:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   129f8:	9914      	ldr	r1, [sp, #80]	; 0x50
   129fa:	f002 fb9f 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   129fe:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12a00:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   12a04:	f2c0 0001 	movt	r0, #1
   12a08:	6800      	ldr	r0, [r0, #0]
   12a0a:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   12a0e:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   12a12:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   12a16:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   12a1a:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   12a1e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   12a22:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   12a26:	6802      	ldr	r2, [r0, #0]
   12a28:	680b      	ldr	r3, [r1, #0]
   12a2a:	429a      	cmp	r2, r3
   12a2c:	9013      	str	r0, [sp, #76]	; 0x4c
   12a2e:	9112      	str	r1, [sp, #72]	; 0x48
   12a30:	d125      	bne.n	12a7e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   12a32:	e7ff      	b.n	12a34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   12a34:	f64d 3088 	movw	r0, #56200	; 0xdb88
   12a38:	f2c0 0001 	movt	r0, #1
   12a3c:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   12a3e:	f642 30df 	movw	r0, #11231	; 0x2bdf
   12a42:	f2c0 0001 	movt	r0, #1
   12a46:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   12a4a:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   12a4e:	4668      	mov	r0, sp
   12a50:	f44f 7380 	mov.w	r3, #256	; 0x100
   12a54:	6103      	str	r3, [r0, #16]
   12a56:	60c3      	str	r3, [r0, #12]
   12a58:	f646 3304 	movw	r3, #27396	; 0x6b04
   12a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a60:	6083      	str	r3, [r0, #8]
   12a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a66:	6043      	str	r3, [r0, #4]
   12a68:	230a      	movs	r3, #10
   12a6a:	6003      	str	r3, [r0, #0]
   12a6c:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   12a70:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12a74:	2300      	movs	r3, #0
   12a76:	f7f6 f90b 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   12a7a:	9011      	str	r0, [sp, #68]	; 0x44
   12a7c:	e088      	b.n	12b90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12a7e:	f64d 2040 	movw	r0, #55872	; 0xda40
   12a82:	f2c0 0001 	movt	r0, #1
   12a86:	6801      	ldr	r1, [r0, #0]
   12a88:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12a8a:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   12a8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12a90:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   12a94:	f64d 3358 	movw	r3, #56152	; 0xdb58
   12a98:	f2c0 0301 	movt	r3, #1
   12a9c:	681b      	ldr	r3, [r3, #0]
   12a9e:	f64d 2c60 	movw	ip, #55904	; 0xda60
   12aa2:	f2c0 0c01 	movt	ip, #1
   12aa6:	f8dc c000 	ldr.w	ip, [ip]
   12aaa:	46ee      	mov	lr, sp
   12aac:	2400      	movs	r4, #0
   12aae:	f8ce 4000 	str.w	r4, [lr]
   12ab2:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12ab6:	2201      	movs	r2, #1
   12ab8:	9110      	str	r1, [sp, #64]	; 0x40
   12aba:	4619      	mov	r1, r3
   12abc:	4663      	mov	r3, ip
   12abe:	f7f5 ffed 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ac2:	e7ff      	b.n	12ac4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   12ac4:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   12ac8:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   12acc:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   12ad0:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   12ad4:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12ad8:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   12adc:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   12ae0:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   12ae4:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   12ae8:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   12aec:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   12af0:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   12af4:	f249 333f 	movw	r3, #37695	; 0x933f
   12af8:	f2c0 0300 	movt	r3, #0
   12afc:	910f      	str	r1, [sp, #60]	; 0x3c
   12afe:	4619      	mov	r1, r3
   12b00:	920e      	str	r2, [sp, #56]	; 0x38
   12b02:	f7f6 fc54 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12b06:	900d      	str	r0, [sp, #52]	; 0x34
   12b08:	910c      	str	r1, [sp, #48]	; 0x30
   12b0a:	e7ff      	b.n	12b0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   12b0c:	f249 313f 	movw	r1, #37695	; 0x933f
   12b10:	f2c0 0100 	movt	r1, #0
   12b14:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12b16:	f7f6 fc4a 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12b1a:	900b      	str	r0, [sp, #44]	; 0x2c
   12b1c:	910a      	str	r1, [sp, #40]	; 0x28
   12b1e:	e7ff      	b.n	12b20 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   12b20:	f245 619f 	movw	r1, #22175	; 0x569f
   12b24:	f2c0 0101 	movt	r1, #1
   12b28:	980e      	ldr	r0, [sp, #56]	; 0x38
   12b2a:	f7f6 fc55 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12b2e:	9009      	str	r0, [sp, #36]	; 0x24
   12b30:	9108      	str	r1, [sp, #32]
   12b32:	e7ff      	b.n	12b34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   12b34:	980d      	ldr	r0, [sp, #52]	; 0x34
   12b36:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   12b3a:	990c      	ldr	r1, [sp, #48]	; 0x30
   12b3c:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   12b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12b42:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   12b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12b48:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   12b4c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   12b50:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   12b54:	f8dd e020 	ldr.w	lr, [sp, #32]
   12b58:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   12b5c:	466c      	mov	r4, sp
   12b5e:	2503      	movs	r5, #3
   12b60:	6025      	str	r5, [r4, #0]
   12b62:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   12b66:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   12b6a:	9910      	ldr	r1, [sp, #64]	; 0x40
   12b6c:	462a      	mov	r2, r5
   12b6e:	f7f5 ff95 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b72:	e7ff      	b.n	12b74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   12b74:	f64d 306c 	movw	r0, #56172	; 0xdb6c
   12b78:	f2c0 0001 	movt	r0, #1
   12b7c:	f002 faa1 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12b80:	9007      	str	r0, [sp, #28]
   12b82:	e7ff      	b.n	12b84 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   12b84:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   12b88:	9907      	ldr	r1, [sp, #28]
   12b8a:	f002 fad7 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12b8e:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   12b90:	9811      	ldr	r0, [sp, #68]	; 0x44
   12b92:	f7f5 fff1 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   12b96:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   12b9a:	e7ff      	b.n	12b9c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   12b9c:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   12ba0:	1e41      	subs	r1, r0, #1
   12ba2:	bf18      	it	ne
   12ba4:	2101      	movne	r1, #1
   12ba6:	2801      	cmp	r0, #1
   12ba8:	d001      	beq.n	12bae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   12baa:	e7ff      	b.n	12bac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   12bac:	e005      	b.n	12bba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   12bae:	2000      	movs	r0, #0
    Ok(())
   12bb0:	9069      	str	r0, [sp, #420]	; 0x1a4
   12bb2:	2001      	movs	r0, #1
   12bb4:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   12bb6:	e008      	b.n	12bca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   12bb8:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   12bba:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   12bbe:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   12bc2:	f7ff fa17 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   12bc6:	9006      	str	r0, [sp, #24]
   12bc8:	e003      	b.n	12bd2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   12bca:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   12bcc:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   12bd0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   12bd2:	9806      	ldr	r0, [sp, #24]
   12bd4:	f7f5 ffc4 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12bd8:	9069      	str	r0, [sp, #420]	; 0x1a4
   12bda:	e7ff      	b.n	12bdc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   12bdc:	e7f5      	b.n	12bca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00012bde <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   12bde:	b580      	push	{r7, lr}
   12be0:	b082      	sub	sp, #8
   12be2:	9001      	str	r0, [sp, #4]
    loop {
   12be4:	e7ff      	b.n	12be6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   12be6:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12bea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12bee:	f7f6 f836 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   12bf2:	9000      	str	r0, [sp, #0]
   12bf4:	e7ff      	b.n	12bf6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   12bf6:	f64d 318c 	movw	r1, #56204	; 0xdb8c
   12bfa:	f2c0 0101 	movt	r1, #1
   12bfe:	f64d 3398 	movw	r3, #56216	; 0xdb98
   12c02:	f2c0 0301 	movt	r3, #1
   12c06:	220b      	movs	r2, #11
   12c08:	9800      	ldr	r0, [sp, #0]
   12c0a:	f7f5 ff76 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   12c0e:	e7ff      	b.n	12c10 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   12c10:	f005 f8d4 	bl	17dbc <hal_watchdog_tickle>
   12c14:	e7ff      	b.n	12c16 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   12c16:	e7e6      	b.n	12be6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00012c18 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   12c18:	b580      	push	{r7, lr}
   12c1a:	b08c      	sub	sp, #48	; 0x30
   12c1c:	4601      	mov	r1, r0
   12c1e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   12c22:	9104      	str	r1, [sp, #16]
   12c24:	f000 f8d4 	bl	12dd0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   12c28:	9003      	str	r0, [sp, #12]
   12c2a:	e7ff      	b.n	12c2c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   12c2c:	9803      	ldr	r0, [sp, #12]
   12c2e:	f7f5 ffa3 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   12c32:	9006      	str	r0, [sp, #24]
   12c34:	e7ff      	b.n	12c36 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   12c36:	9806      	ldr	r0, [sp, #24]
   12c38:	1e41      	subs	r1, r0, #1
   12c3a:	bf18      	it	ne
   12c3c:	2101      	movne	r1, #1
   12c3e:	2801      	cmp	r0, #1
   12c40:	d001      	beq.n	12c46 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   12c42:	e7ff      	b.n	12c44 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   12c44:	e00c      	b.n	12c60 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   12c46:	f644 2070 	movw	r0, #19056	; 0x4a70
   12c4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c4e:	9904      	ldr	r1, [sp, #16]
   12c50:	f7ff f9a4 	bl	11f9c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   12c54:	f88d 101d 	strb.w	r1, [sp, #29]
   12c58:	f88d 001c 	strb.w	r0, [sp, #28]
   12c5c:	e00f      	b.n	12c7e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   12c5e:	defe      	udf	#254	; 0xfe
   12c60:	9806      	ldr	r0, [sp, #24]
   12c62:	900b      	str	r0, [sp, #44]	; 0x2c
   12c64:	f7ff f9c6 	bl	11ff4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   12c68:	9002      	str	r0, [sp, #8]
   12c6a:	e002      	b.n	12c72 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   12c6c:	9805      	ldr	r0, [sp, #20]
   12c6e:	b00c      	add	sp, #48	; 0x30
   12c70:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   12c72:	9802      	ldr	r0, [sp, #8]
   12c74:	f7f5 ff74 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12c78:	9005      	str	r0, [sp, #20]
   12c7a:	e7ff      	b.n	12c7c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   12c7c:	e7f6      	b.n	12c6c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   12c7e:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   12c80:	f7f5 ff62 	bl	8b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   12c84:	9001      	str	r0, [sp, #4]
   12c86:	e7ff      	b.n	12c88 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   12c88:	9801      	ldr	r0, [sp, #4]
   12c8a:	07c1      	lsls	r1, r0, #31
   12c8c:	2900      	cmp	r1, #0
   12c8e:	d105      	bne.n	12c9c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   12c90:	e7ff      	b.n	12c92 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   12c92:	2000      	movs	r0, #0
    Ok(())
   12c94:	9005      	str	r0, [sp, #20]
   12c96:	2001      	movs	r0, #1
   12c98:	9005      	str	r0, [sp, #20]
}
   12c9a:	e7e7      	b.n	12c6c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   12c9c:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   12ca0:	9008      	str	r0, [sp, #32]
   12ca2:	9808      	ldr	r0, [sp, #32]
   12ca4:	9005      	str	r0, [sp, #20]
   12ca6:	e7e1      	b.n	12c6c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00012ca8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   12ca8:	b580      	push	{r7, lr}
   12caa:	b094      	sub	sp, #80	; 0x50
   12cac:	9010      	str	r0, [sp, #64]	; 0x40
   12cae:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   12cb0:	f644 2270 	movw	r2, #19056	; 0x4a70
   12cb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12cb8:	900d      	str	r0, [sp, #52]	; 0x34
   12cba:	4610      	mov	r0, r2
   12cbc:	910c      	str	r1, [sp, #48]	; 0x30
   12cbe:	f7ff f953 	bl	11f68 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12cc2:	900b      	str	r0, [sp, #44]	; 0x2c
   12cc4:	910a      	str	r1, [sp, #40]	; 0x28
   12cc6:	e7ff      	b.n	12cc8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   12cc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12cca:	990a      	ldr	r1, [sp, #40]	; 0x28
   12ccc:	f7fe fd08 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12cd0:	9009      	str	r0, [sp, #36]	; 0x24
   12cd2:	e7ff      	b.n	12cd4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   12cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
   12cd6:	2800      	cmp	r0, #0
   12cd8:	d009      	beq.n	12cee <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   12cda:	e7ff      	b.n	12cdc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   12cdc:	f644 2078 	movw	r0, #19064	; 0x4a78
   12ce0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ce4:	f7ff f934 	bl	11f50 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   12ce8:	9008      	str	r0, [sp, #32]
   12cea:	9107      	str	r1, [sp, #28]
   12cec:	e00b      	b.n	12d06 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   12cee:	f64d 30a8 	movw	r0, #56232	; 0xdba8
   12cf2:	f2c0 0001 	movt	r0, #1
   12cf6:	f64d 32b4 	movw	r2, #56244	; 0xdbb4
   12cfa:	f2c0 0201 	movt	r2, #1
   12cfe:	210b      	movs	r1, #11
   12d00:	f002 f9e6 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12d04:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   12d06:	9808      	ldr	r0, [sp, #32]
   12d08:	9907      	ldr	r1, [sp, #28]
   12d0a:	f7fe fce9 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12d0e:	9006      	str	r0, [sp, #24]
   12d10:	e7ff      	b.n	12d12 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   12d12:	980d      	ldr	r0, [sp, #52]	; 0x34
   12d14:	990c      	ldr	r1, [sp, #48]	; 0x30
   12d16:	f7fe fce3 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12d1a:	9005      	str	r0, [sp, #20]
   12d1c:	e7ff      	b.n	12d1e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   12d1e:	9806      	ldr	r0, [sp, #24]
   12d20:	9905      	ldr	r1, [sp, #20]
   12d22:	1842      	adds	r2, r0, r1
   12d24:	4613      	mov	r3, r2
   12d26:	4282      	cmp	r2, r0
   12d28:	9304      	str	r3, [sp, #16]
   12d2a:	d345      	bcc.n	12db8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   12d2c:	e7ff      	b.n	12d2e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   12d2e:	f644 2078 	movw	r0, #19064	; 0x4a78
   12d32:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d36:	f7ff f953 	bl	11fe0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   12d3a:	9003      	str	r0, [sp, #12]
   12d3c:	e7ff      	b.n	12d3e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   12d3e:	9804      	ldr	r0, [sp, #16]
   12d40:	9903      	ldr	r1, [sp, #12]
   12d42:	4288      	cmp	r0, r1
   12d44:	d80a      	bhi.n	12d5c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   12d46:	e7ff      	b.n	12d48 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12d48:	f644 2078 	movw	r0, #19064	; 0x4a78
   12d4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d50:	990d      	ldr	r1, [sp, #52]	; 0x34
   12d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12d54:	f7ff f914 	bl	11f80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   12d58:	9002      	str	r0, [sp, #8]
   12d5a:	e00b      	b.n	12d74 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   12d5c:	f64d 30fc 	movw	r0, #56316	; 0xdbfc
   12d60:	f2c0 0001 	movt	r0, #1
   12d64:	f64d 4208 	movw	r2, #56328	; 0xdc08
   12d68:	f2c0 0201 	movt	r2, #1
   12d6c:	210c      	movs	r1, #12
   12d6e:	f002 f9af 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12d72:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12d74:	9802      	ldr	r0, [sp, #8]
   12d76:	f000 0001 	and.w	r0, r0, #1
   12d7a:	f7f5 fef7 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   12d7e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   12d82:	e7ff      	b.n	12d84 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   12d84:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   12d88:	07c1      	lsls	r1, r0, #31
   12d8a:	2900      	cmp	r1, #0
   12d8c:	d001      	beq.n	12d92 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   12d8e:	e7ff      	b.n	12d90 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   12d90:	e005      	b.n	12d9e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   12d92:	2000      	movs	r0, #0
    Ok(())
   12d94:	900e      	str	r0, [sp, #56]	; 0x38
   12d96:	2001      	movs	r0, #1
   12d98:	900e      	str	r0, [sp, #56]	; 0x38
}
   12d9a:	e004      	b.n	12da6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12d9c:	defe      	udf	#254	; 0xfe
   12d9e:	f7f5 fe72 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   12da2:	9001      	str	r0, [sp, #4]
   12da4:	e002      	b.n	12dac <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   12da6:	980e      	ldr	r0, [sp, #56]	; 0x38
   12da8:	b014      	add	sp, #80	; 0x50
   12daa:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12dac:	9801      	ldr	r0, [sp, #4]
   12dae:	f7f5 fed7 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12db2:	900e      	str	r0, [sp, #56]	; 0x38
   12db4:	e7ff      	b.n	12db6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   12db6:	e7f6      	b.n	12da6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   12db8:	f64d 30e0 	movw	r0, #56288	; 0xdbe0
   12dbc:	f2c0 0001 	movt	r0, #1
   12dc0:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
   12dc4:	f2c0 0201 	movt	r2, #1
   12dc8:	211c      	movs	r1, #28
   12dca:	f002 f981 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12dce:	defe      	udf	#254	; 0xfe

00012dd0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   12dd0:	b580      	push	{r7, lr}
   12dd2:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   12dd4:	f644 2070 	movw	r0, #19056	; 0x4a70
   12dd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ddc:	f7ff f8c4 	bl	11f68 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12de0:	900b      	str	r0, [sp, #44]	; 0x2c
   12de2:	910a      	str	r1, [sp, #40]	; 0x28
   12de4:	e016      	b.n	12e14 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   12de6:	2001      	movs	r0, #1
   12de8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   12dec:	e00c      	b.n	12e08 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   12dee:	2000      	movs	r0, #0
   12df0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   12df4:	e008      	b.n	12e08 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   12df6:	f644 2078 	movw	r0, #19064	; 0x4a78
   12dfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12dfe:	f7ff f8a7 	bl	11f50 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   12e02:	9009      	str	r0, [sp, #36]	; 0x24
   12e04:	9108      	str	r1, [sp, #32]
   12e06:	e00f      	b.n	12e28 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   12e08:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   12e0c:	07c0      	lsls	r0, r0, #31
   12e0e:	2800      	cmp	r0, #0
   12e10:	d11d      	bne.n	12e4e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   12e12:	e013      	b.n	12e3c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   12e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12e16:	990a      	ldr	r1, [sp, #40]	; 0x28
   12e18:	f7fe fc62 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12e1c:	9007      	str	r0, [sp, #28]
   12e1e:	e7ff      	b.n	12e20 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   12e20:	9807      	ldr	r0, [sp, #28]
   12e22:	2800      	cmp	r0, #0
   12e24:	d0e7      	beq.n	12df6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   12e26:	e7e2      	b.n	12dee <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   12e28:	9809      	ldr	r0, [sp, #36]	; 0x24
   12e2a:	9908      	ldr	r1, [sp, #32]
   12e2c:	f7fe fc58 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12e30:	9006      	str	r0, [sp, #24]
   12e32:	e7ff      	b.n	12e34 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   12e34:	9806      	ldr	r0, [sp, #24]
   12e36:	2800      	cmp	r0, #0
   12e38:	d0d5      	beq.n	12de6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   12e3a:	e7d8      	b.n	12dee <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12e3c:	f644 2070 	movw	r0, #19056	; 0x4a70
   12e40:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e44:	f7ff f890 	bl	11f68 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12e48:	9005      	str	r0, [sp, #20]
   12e4a:	9104      	str	r1, [sp, #16]
   12e4c:	e007      	b.n	12e5e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   12e4e:	2000      	movs	r0, #0
        return Ok(());
   12e50:	900c      	str	r0, [sp, #48]	; 0x30
   12e52:	2001      	movs	r0, #1
   12e54:	900c      	str	r0, [sp, #48]	; 0x30
   12e56:	e7ff      	b.n	12e58 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   12e58:	980c      	ldr	r0, [sp, #48]	; 0x30
   12e5a:	b010      	add	sp, #64	; 0x40
   12e5c:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12e5e:	9804      	ldr	r0, [sp, #16]
   12e60:	2800      	cmp	r0, #0
   12e62:	d03f      	beq.n	12ee4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   12e64:	e7ff      	b.n	12e66 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   12e66:	9805      	ldr	r0, [sp, #20]
   12e68:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   12e6a:	f644 2078 	movw	r0, #19064	; 0x4a78
   12e6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e72:	9103      	str	r1, [sp, #12]
   12e74:	f7ff f86c 	bl	11f50 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   12e78:	9002      	str	r0, [sp, #8]
   12e7a:	9101      	str	r1, [sp, #4]
   12e7c:	e7ff      	b.n	12e7e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   12e7e:	9803      	ldr	r0, [sp, #12]
   12e80:	9902      	ldr	r1, [sp, #8]
   12e82:	9a01      	ldr	r2, [sp, #4]
   12e84:	f000 f837 	bl	12ef6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   12e88:	900e      	str	r0, [sp, #56]	; 0x38
   12e8a:	e7ff      	b.n	12e8c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   12e8c:	980e      	ldr	r0, [sp, #56]	; 0x38
   12e8e:	2801      	cmp	r0, #1
   12e90:	d107      	bne.n	12ea2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   12e92:	e7ff      	b.n	12e94 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   12e94:	f644 2070 	movw	r0, #19056	; 0x4a70
   12e98:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e9c:	f7ff f890 	bl	11fc0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   12ea0:	e014      	b.n	12ecc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   12ea2:	980e      	ldr	r0, [sp, #56]	; 0x38
   12ea4:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   12ea6:	f644 2170 	movw	r1, #19056	; 0x4a70
   12eaa:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12eae:	9000      	str	r0, [sp, #0]
   12eb0:	4608      	mov	r0, r1
   12eb2:	f7ff f885 	bl	11fc0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   12eb6:	e7ff      	b.n	12eb8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   12eb8:	f644 2078 	movw	r0, #19064	; 0x4a78
   12ebc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ec0:	f7ff f886 	bl	11fd0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   12ec4:	e7ff      	b.n	12ec6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   12ec6:	9800      	ldr	r0, [sp, #0]
   12ec8:	900c      	str	r0, [sp, #48]	; 0x30
   12eca:	e7c5      	b.n	12e58 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   12ecc:	f644 2078 	movw	r0, #19064	; 0x4a78
   12ed0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ed4:	f7ff f87c 	bl	11fd0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   12ed8:	e7ff      	b.n	12eda <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   12eda:	2000      	movs	r0, #0
    Ok(())
   12edc:	900c      	str	r0, [sp, #48]	; 0x30
   12ede:	2001      	movs	r0, #1
   12ee0:	900c      	str	r0, [sp, #48]	; 0x30
}
   12ee2:	e7b9      	b.n	12e58 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12ee4:	f64d 4018 	movw	r0, #56344	; 0xdc18
   12ee8:	f2c0 0001 	movt	r0, #1
   12eec:	2100      	movs	r1, #0
   12eee:	9a04      	ldr	r2, [sp, #16]
   12ef0:	f002 f904 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   12ef4:	defe      	udf	#254	; 0xfe

00012ef6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   12ef6:	b580      	push	{r7, lr}
   12ef8:	b0a0      	sub	sp, #128	; 0x80
   12efa:	4603      	mov	r3, r0
   12efc:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12f00:	9116      	str	r1, [sp, #88]	; 0x58
   12f02:	9217      	str	r2, [sp, #92]	; 0x5c
   12f04:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   12f08:	9018      	str	r0, [sp, #96]	; 0x60
   12f0a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   12f0e:	fba0 0c0c 	umull	r0, ip, r0, ip
   12f12:	f1bc 0f00 	cmp.w	ip, #0
   12f16:	920f      	str	r2, [sp, #60]	; 0x3c
   12f18:	910e      	str	r1, [sp, #56]	; 0x38
   12f1a:	900d      	str	r0, [sp, #52]	; 0x34
   12f1c:	f040 80c8 	bne.w	130b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   12f20:	e7ff      	b.n	12f22 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   12f22:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   12f26:	f2c1 0062 	movt	r0, #4194	; 0x1062
   12f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
   12f2c:	fba1 0200 	umull	r0, r2, r1, r0
   12f30:	0991      	lsrs	r1, r2, #6
   12f32:	f646 2284 	movw	r2, #27268	; 0x6a84
   12f36:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12f3a:	900c      	str	r0, [sp, #48]	; 0x30
   12f3c:	4610      	mov	r0, r2
   12f3e:	f006 f83d 	bl	18fbc <os_sem_pend>
   12f42:	e7ff      	b.n	12f44 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   12f44:	980e      	ldr	r0, [sp, #56]	; 0x38
   12f46:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12f48:	f7fe fbca 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12f4c:	900b      	str	r0, [sp, #44]	; 0x2c
   12f4e:	e7ff      	b.n	12f50 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   12f50:	2001      	movs	r0, #1
   12f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12f54:	fa10 f081 	uxtah	r0, r0, r1
   12f58:	b282      	uxth	r2, r0
   12f5a:	4603      	mov	r3, r0
   12f5c:	4282      	cmp	r2, r0
   12f5e:	930a      	str	r3, [sp, #40]	; 0x28
   12f60:	f040 80b2 	bne.w	130c8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   12f64:	e7ff      	b.n	12f66 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   12f66:	980a      	ldr	r0, [sp, #40]	; 0x28
   12f68:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   12f6c:	b280      	uxth	r0, r0
   12f6e:	2100      	movs	r1, #0
   12f70:	f005 fd32 	bl	189d8 <os_msys_get_pkthdr>
   12f74:	4601      	mov	r1, r0
   12f76:	901a      	str	r0, [sp, #104]	; 0x68
   12f78:	9109      	str	r1, [sp, #36]	; 0x24
   12f7a:	e7ff      	b.n	12f7c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   12f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f7e:	f000 ff17 	bl	13db0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   12f82:	9008      	str	r0, [sp, #32]
   12f84:	e7ff      	b.n	12f86 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   12f86:	9808      	ldr	r0, [sp, #32]
   12f88:	07c1      	lsls	r1, r0, #31
   12f8a:	2900      	cmp	r1, #0
   12f8c:	d106      	bne.n	12f9c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   12f8e:	e7ff      	b.n	12f90 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   12f90:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   12f94:	901b      	str	r0, [sp, #108]	; 0x6c
   12f96:	991b      	ldr	r1, [sp, #108]	; 0x6c
   12f98:	9107      	str	r1, [sp, #28]
   12f9a:	e010      	b.n	12fbe <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   12f9c:	f646 2084 	movw	r0, #27268	; 0x6a84
   12fa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12fa4:	f005 ffd8 	bl	18f58 <os_sem_release>
   12fa8:	e7ff      	b.n	12faa <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   12faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   12fae:	9012      	str	r0, [sp, #72]	; 0x48
   12fb0:	9812      	ldr	r0, [sp, #72]	; 0x48
   12fb2:	9011      	str	r0, [sp, #68]	; 0x44
   12fb4:	e002      	b.n	12fbc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   12fb6:	9811      	ldr	r0, [sp, #68]	; 0x44
   12fb8:	b020      	add	sp, #128	; 0x80
   12fba:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   12fbc:	e7fb      	b.n	12fb6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   12fbe:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   12fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   12fc2:	9907      	ldr	r1, [sp, #28]
   12fc4:	f005 fb60 	bl	18688 <os_mbuf_append>
   12fc8:	4601      	mov	r1, r0
   12fca:	901c      	str	r0, [sp, #112]	; 0x70
   12fcc:	9106      	str	r1, [sp, #24]
   12fce:	e7ff      	b.n	12fd0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   12fd0:	9806      	ldr	r0, [sp, #24]
   12fd2:	2800      	cmp	r0, #0
   12fd4:	d106      	bne.n	12fe4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   12fd6:	e7ff      	b.n	12fd8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   12fd8:	980e      	ldr	r0, [sp, #56]	; 0x38
   12fda:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12fdc:	f7fe fb88 	bl	116f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   12fe0:	9005      	str	r0, [sp, #20]
   12fe2:	e011      	b.n	13008 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   12fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
   12fe6:	f005 fb33 	bl	18650 <os_mbuf_free_chain>
   12fea:	e7ff      	b.n	12fec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   12fec:	f646 2084 	movw	r0, #27268	; 0x6a84
   12ff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ff4:	f005 ffb0 	bl	18f58 <os_sem_release>
   12ff8:	e7ff      	b.n	12ffa <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   12ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   12ffe:	9013      	str	r0, [sp, #76]	; 0x4c
   13000:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13002:	9011      	str	r0, [sp, #68]	; 0x44
   13004:	e7ff      	b.n	13006 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   13006:	e7d9      	b.n	12fbc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13008:	9805      	ldr	r0, [sp, #20]
   1300a:	901d      	str	r0, [sp, #116]	; 0x74
   1300c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1300e:	9104      	str	r1, [sp, #16]
   13010:	e7ff      	b.n	13012 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   13012:	980e      	ldr	r0, [sp, #56]	; 0x38
   13014:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13016:	f7fe fb63 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1301a:	9003      	str	r0, [sp, #12]
   1301c:	e7ff      	b.n	1301e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1301e:	9803      	ldr	r0, [sp, #12]
   13020:	b282      	uxth	r2, r0
   13022:	9809      	ldr	r0, [sp, #36]	; 0x24
   13024:	9904      	ldr	r1, [sp, #16]
   13026:	f005 fb2f 	bl	18688 <os_mbuf_append>
   1302a:	4601      	mov	r1, r0
   1302c:	901e      	str	r0, [sp, #120]	; 0x78
   1302e:	9102      	str	r1, [sp, #8]
   13030:	e7ff      	b.n	13032 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   13032:	9802      	ldr	r0, [sp, #8]
   13034:	2800      	cmp	r0, #0
   13036:	d10f      	bne.n	13058 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   13038:	e7ff      	b.n	1303a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   1303a:	f646 208c 	movw	r0, #27276	; 0x6a8c
   1303e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13042:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   13046:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1304a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1304c:	f005 fa9e 	bl	1858c <os_mqueue_put>
   13050:	4601      	mov	r1, r0
   13052:	901f      	str	r0, [sp, #124]	; 0x7c
   13054:	9101      	str	r1, [sp, #4]
   13056:	e011      	b.n	1307c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13058:	9809      	ldr	r0, [sp, #36]	; 0x24
   1305a:	f005 faf9 	bl	18650 <os_mbuf_free_chain>
   1305e:	e7ff      	b.n	13060 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13060:	f646 2084 	movw	r0, #27268	; 0x6a84
   13064:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13068:	f005 ff76 	bl	18f58 <os_sem_release>
   1306c:	e7ff      	b.n	1306e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1306e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13072:	9014      	str	r0, [sp, #80]	; 0x50
   13074:	9814      	ldr	r0, [sp, #80]	; 0x50
   13076:	9011      	str	r0, [sp, #68]	; 0x44
   13078:	e7ff      	b.n	1307a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   1307a:	e7c4      	b.n	13006 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   1307c:	9801      	ldr	r0, [sp, #4]
   1307e:	2800      	cmp	r0, #0
   13080:	d105      	bne.n	1308e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   13082:	e7ff      	b.n	13084 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   13084:	2000      	movs	r0, #0
    Ok(())
   13086:	9011      	str	r0, [sp, #68]	; 0x44
   13088:	2001      	movs	r0, #1
   1308a:	9011      	str	r0, [sp, #68]	; 0x44
}
   1308c:	e793      	b.n	12fb6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1308e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13090:	f005 fade 	bl	18650 <os_mbuf_free_chain>
   13094:	e7ff      	b.n	13096 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13096:	f646 2084 	movw	r0, #27268	; 0x6a84
   1309a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1309e:	f005 ff5b 	bl	18f58 <os_sem_release>
   130a2:	e7ff      	b.n	130a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   130a4:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   130a8:	9015      	str	r0, [sp, #84]	; 0x54
   130aa:	9815      	ldr	r0, [sp, #84]	; 0x54
   130ac:	9011      	str	r0, [sp, #68]	; 0x44
   130ae:	e7e4      	b.n	1307a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   130b0:	f64d 4040 	movw	r0, #56384	; 0xdc40
   130b4:	f2c0 0001 	movt	r0, #1
   130b8:	f64d 4228 	movw	r2, #56360	; 0xdc28
   130bc:	f2c0 0201 	movt	r2, #1
   130c0:	2121      	movs	r1, #33	; 0x21
   130c2:	f002 f805 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   130c6:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   130c8:	f64d 30e0 	movw	r0, #56288	; 0xdbe0
   130cc:	f2c0 0001 	movt	r0, #1
   130d0:	f64d 4264 	movw	r2, #56420	; 0xdc64
   130d4:	f2c0 0201 	movt	r2, #1
   130d8:	211c      	movs	r1, #28
   130da:	f001 fff9 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   130de:	defe      	udf	#254	; 0xfe

000130e0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   130e0:	b5b0      	push	{r4, r5, r7, lr}
   130e2:	b0c4      	sub	sp, #272	; 0x110
   130e4:	9038      	str	r0, [sp, #224]	; 0xe0
   130e6:	e7ff      	b.n	130e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   130e8:	f646 208c 	movw	r0, #27276	; 0x6a8c
   130ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
   130f0:	f005 fa39 	bl	18566 <os_mqueue_get>
   130f4:	4601      	mov	r1, r0
   130f6:	9039      	str	r0, [sp, #228]	; 0xe4
   130f8:	911b      	str	r1, [sp, #108]	; 0x6c
   130fa:	e7ff      	b.n	130fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   130fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
   130fe:	f000 fe57 	bl	13db0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13102:	901a      	str	r0, [sp, #104]	; 0x68
   13104:	e7ff      	b.n	13106 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   13106:	981a      	ldr	r0, [sp, #104]	; 0x68
   13108:	07c1      	lsls	r1, r0, #31
   1310a:	2900      	cmp	r1, #0
   1310c:	d106      	bne.n	1311c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1310e:	e7ff      	b.n	13110 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   13110:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13112:	901c      	str	r0, [sp, #112]	; 0x70
   13114:	2101      	movs	r1, #1
        let mut first_byte = true;
   13116:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   1311a:	e001      	b.n	13120 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   1311c:	b044      	add	sp, #272	; 0x110
   1311e:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   13120:	981c      	ldr	r0, [sp, #112]	; 0x70
   13122:	f000 fe45 	bl	13db0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13126:	9019      	str	r0, [sp, #100]	; 0x64
   13128:	e7ff      	b.n	1312a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   1312a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1312c:	07c1      	lsls	r1, r0, #31
   1312e:	2900      	cmp	r1, #0
   13130:	d004      	beq.n	1313c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   13132:	e7ff      	b.n	13134 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13134:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13136:	f005 fa8b 	bl	18650 <os_mbuf_free_chain>
   1313a:	e0aa      	b.n	13292 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   1313c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1313e:	6800      	ldr	r0, [r0, #0]
   13140:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   13142:	991c      	ldr	r1, [sp, #112]	; 0x70
   13144:	88c9      	ldrh	r1, [r1, #6]
   13146:	460a      	mov	r2, r1
   13148:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1314c:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   13150:	07c9      	lsls	r1, r1, #31
   13152:	2900      	cmp	r1, #0
   13154:	9018      	str	r0, [sp, #96]	; 0x60
   13156:	9217      	str	r2, [sp, #92]	; 0x5c
   13158:	d105      	bne.n	13166 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   1315a:	e7ff      	b.n	1315c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   1315c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1315e:	903e      	str	r0, [sp, #248]	; 0xf8
   13160:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13162:	9016      	str	r0, [sp, #88]	; 0x58
   13164:	e07b      	b.n	1325e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13166:	2000      	movs	r0, #0
                first_byte = false;
   13168:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   1316c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1316e:	903c      	str	r0, [sp, #240]	; 0xf0
   13170:	983c      	ldr	r0, [sp, #240]	; 0xf0
   13172:	9015      	str	r0, [sp, #84]	; 0x54
   13174:	e7ff      	b.n	13176 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13176:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13178:	9915      	ldr	r1, [sp, #84]	; 0x54
   1317a:	9014      	str	r0, [sp, #80]	; 0x50
   1317c:	4608      	mov	r0, r1
   1317e:	9914      	ldr	r1, [sp, #80]	; 0x50
   13180:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13182:	f000 f921 	bl	133c8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13186:	9013      	str	r0, [sp, #76]	; 0x4c
   13188:	e7ff      	b.n	1318a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   1318a:	f64d 4174 	movw	r1, #56436	; 0xdc74
   1318e:	f2c0 0101 	movt	r1, #1
   13192:	f64d 4380 	movw	r3, #56448	; 0xdc80
   13196:	f2c0 0301 	movt	r3, #1
   1319a:	220c      	movs	r2, #12
   1319c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1319e:	f7f5 fcac 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   131a2:	e7ff      	b.n	131a4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   131a4:	9818      	ldr	r0, [sp, #96]	; 0x60
   131a6:	7801      	ldrb	r1, [r0, #0]
   131a8:	2901      	cmp	r1, #1
   131aa:	d013      	beq.n	131d4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   131ac:	e01a      	b.n	131e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   131ae:	2001      	movs	r0, #1
   131b0:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   131b4:	e008      	b.n	131c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   131b6:	2000      	movs	r0, #0
   131b8:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   131bc:	e004      	b.n	131c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   131be:	9818      	ldr	r0, [sp, #96]	; 0x60
   131c0:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   131c2:	2929      	cmp	r1, #41	; 0x29
   131c4:	d0f3      	beq.n	131ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   131c6:	e7f6      	b.n	131b6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   131c8:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   131cc:	07c0      	lsls	r0, r0, #31
   131ce:	2800      	cmp	r0, #0
   131d0:	d113      	bne.n	131fa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   131d2:	e017      	b.n	13204 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   131d4:	2001      	movs	r0, #1
   131d6:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   131da:	e008      	b.n	131ee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   131dc:	2000      	movs	r0, #0
   131de:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   131e2:	e004      	b.n	131ee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   131e4:	9818      	ldr	r0, [sp, #96]	; 0x60
   131e6:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   131e8:	2911      	cmp	r1, #17
   131ea:	d0f3      	beq.n	131d4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   131ec:	e7f6      	b.n	131dc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   131ee:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   131f2:	07c0      	lsls	r0, r0, #31
   131f4:	2800      	cmp	r0, #0
   131f6:	d1da      	bne.n	131ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   131f8:	e7e1      	b.n	131be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   131fa:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   131fc:	f000 fb13 	bl	13826 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   13200:	e7ff      	b.n	13202 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13202:	e7ff      	b.n	13204 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13204:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13206:	9818      	ldr	r0, [sp, #96]	; 0x60
   13208:	f7fe f9da 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1320c:	9012      	str	r0, [sp, #72]	; 0x48
   1320e:	e7ff      	b.n	13210 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   13210:	9812      	ldr	r0, [sp, #72]	; 0x48
   13212:	903d      	str	r0, [sp, #244]	; 0xf4
   13214:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13216:	9011      	str	r0, [sp, #68]	; 0x44
   13218:	e7ff      	b.n	1321a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   1321a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1321e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13220:	fa10 f081 	uxtah	r0, r0, r1
   13224:	b282      	uxth	r2, r0
   13226:	4603      	mov	r3, r0
   13228:	4282      	cmp	r2, r0
   1322a:	9310      	str	r3, [sp, #64]	; 0x40
   1322c:	f040 80c0 	bne.w	133b0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   13230:	e7ff      	b.n	13232 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   13232:	9810      	ldr	r0, [sp, #64]	; 0x40
   13234:	b281      	uxth	r1, r0
   13236:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13238:	9811      	ldr	r0, [sp, #68]	; 0x44
   1323a:	f000 f8c5 	bl	133c8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1323e:	900f      	str	r0, [sp, #60]	; 0x3c
   13240:	e7ff      	b.n	13242 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   13242:	f64d 4174 	movw	r1, #56436	; 0xdc74
   13246:	f2c0 0101 	movt	r1, #1
   1324a:	f64d 43c4 	movw	r3, #56516	; 0xdcc4
   1324e:	f2c0 0301 	movt	r3, #1
   13252:	220c      	movs	r2, #12
   13254:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13256:	f7f5 fc50 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1325a:	e7ff      	b.n	1325c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1325c:	e015      	b.n	1328a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   1325e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13260:	b281      	uxth	r1, r0
   13262:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13264:	9816      	ldr	r0, [sp, #88]	; 0x58
   13266:	f000 f8af 	bl	133c8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1326a:	900e      	str	r0, [sp, #56]	; 0x38
   1326c:	e7ff      	b.n	1326e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1326e:	f64d 4174 	movw	r1, #56436	; 0xdc74
   13272:	f2c0 0101 	movt	r1, #1
   13276:	f64d 43d4 	movw	r3, #56532	; 0xdcd4
   1327a:	f2c0 0301 	movt	r3, #1
   1327e:	220c      	movs	r2, #12
   13280:	980e      	ldr	r0, [sp, #56]	; 0x38
   13282:	f7f5 fc3a 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13286:	e7ff      	b.n	13288 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13288:	e7ff      	b.n	1328a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   1328a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1328c:	68c0      	ldr	r0, [r0, #12]
   1328e:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   13290:	e746      	b.n	13120 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   13292:	f646 2084 	movw	r0, #27268	; 0x6a84
   13296:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1329a:	f005 fe5d 	bl	18f58 <os_sem_release>
   1329e:	901e      	str	r0, [sp, #120]	; 0x78
   132a0:	e7ff      	b.n	132a2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   132a2:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   132a6:	f2c0 0001 	movt	r0, #1
   132aa:	6800      	ldr	r0, [r0, #0]
   132ac:	a91e      	add	r1, sp, #120	; 0x78
   132ae:	911f      	str	r1, [sp, #124]	; 0x7c
   132b0:	9020      	str	r0, [sp, #128]	; 0x80
   132b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   132b4:	903f      	str	r0, [sp, #252]	; 0xfc
   132b6:	9920      	ldr	r1, [sp, #128]	; 0x80
   132b8:	9140      	str	r1, [sp, #256]	; 0x100
   132ba:	6802      	ldr	r2, [r0, #0]
   132bc:	680b      	ldr	r3, [r1, #0]
   132be:	429a      	cmp	r2, r3
   132c0:	900d      	str	r0, [sp, #52]	; 0x34
   132c2:	910c      	str	r1, [sp, #48]	; 0x30
   132c4:	d101      	bne.n	132ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   132c6:	e7ff      	b.n	132c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   132c8:	e70e      	b.n	130e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   132ca:	f64d 2040 	movw	r0, #55872	; 0xda40
   132ce:	f2c0 0001 	movt	r0, #1
   132d2:	6801      	ldr	r1, [r0, #0]
   132d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   132d6:	9030      	str	r0, [sp, #192]	; 0xc0
   132d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   132da:	9231      	str	r2, [sp, #196]	; 0xc4
   132dc:	f64d 3358 	movw	r3, #56152	; 0xdb58
   132e0:	f2c0 0301 	movt	r3, #1
   132e4:	681b      	ldr	r3, [r3, #0]
   132e6:	f64d 2c60 	movw	ip, #55904	; 0xda60
   132ea:	f2c0 0c01 	movt	ip, #1
   132ee:	f8dc c000 	ldr.w	ip, [ip]
   132f2:	46ee      	mov	lr, sp
   132f4:	2400      	movs	r4, #0
   132f6:	f8ce 4000 	str.w	r4, [lr]
   132fa:	a832      	add	r0, sp, #200	; 0xc8
   132fc:	2201      	movs	r2, #1
   132fe:	910b      	str	r1, [sp, #44]	; 0x2c
   13300:	4619      	mov	r1, r3
   13302:	4663      	mov	r3, ip
   13304:	f7f5 fbca 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13308:	e7ff      	b.n	1330a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   1330a:	a830      	add	r0, sp, #192	; 0xc0
   1330c:	902d      	str	r0, [sp, #180]	; 0xb4
   1330e:	a831      	add	r0, sp, #196	; 0xc4
   13310:	902e      	str	r0, [sp, #184]	; 0xb8
   13312:	a832      	add	r0, sp, #200	; 0xc8
   13314:	902f      	str	r0, [sp, #188]	; 0xbc
   13316:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13318:	9041      	str	r0, [sp, #260]	; 0x104
   1331a:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1331c:	9142      	str	r1, [sp, #264]	; 0x108
   1331e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13320:	9243      	str	r2, [sp, #268]	; 0x10c
   13322:	f249 333f 	movw	r3, #37695	; 0x933f
   13326:	f2c0 0300 	movt	r3, #0
   1332a:	910a      	str	r1, [sp, #40]	; 0x28
   1332c:	4619      	mov	r1, r3
   1332e:	9209      	str	r2, [sp, #36]	; 0x24
   13330:	f7f6 f83d 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13334:	9008      	str	r0, [sp, #32]
   13336:	9107      	str	r1, [sp, #28]
   13338:	e7ff      	b.n	1333a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   1333a:	f249 313f 	movw	r1, #37695	; 0x933f
   1333e:	f2c0 0100 	movt	r1, #0
   13342:	980a      	ldr	r0, [sp, #40]	; 0x28
   13344:	f7f6 f833 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13348:	9006      	str	r0, [sp, #24]
   1334a:	9105      	str	r1, [sp, #20]
   1334c:	e7ff      	b.n	1334e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   1334e:	f245 619f 	movw	r1, #22175	; 0x569f
   13352:	f2c0 0101 	movt	r1, #1
   13356:	9809      	ldr	r0, [sp, #36]	; 0x24
   13358:	f7f6 f83e 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1335c:	9004      	str	r0, [sp, #16]
   1335e:	9103      	str	r1, [sp, #12]
   13360:	e7ff      	b.n	13362 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   13362:	9808      	ldr	r0, [sp, #32]
   13364:	9027      	str	r0, [sp, #156]	; 0x9c
   13366:	9907      	ldr	r1, [sp, #28]
   13368:	9128      	str	r1, [sp, #160]	; 0xa0
   1336a:	9a06      	ldr	r2, [sp, #24]
   1336c:	9229      	str	r2, [sp, #164]	; 0xa4
   1336e:	9b05      	ldr	r3, [sp, #20]
   13370:	932a      	str	r3, [sp, #168]	; 0xa8
   13372:	f8dd c010 	ldr.w	ip, [sp, #16]
   13376:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   1337a:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1337e:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   13382:	466c      	mov	r4, sp
   13384:	2503      	movs	r5, #3
   13386:	6025      	str	r5, [r4, #0]
   13388:	a821      	add	r0, sp, #132	; 0x84
   1338a:	ab27      	add	r3, sp, #156	; 0x9c
   1338c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1338e:	462a      	mov	r2, r5
   13390:	f7f5 fb84 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13394:	e7ff      	b.n	13396 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   13396:	f64d 40e4 	movw	r0, #56548	; 0xdce4
   1339a:	f2c0 0001 	movt	r0, #1
   1339e:	f001 fe90 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   133a2:	9002      	str	r0, [sp, #8]
   133a4:	e7ff      	b.n	133a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   133a6:	a821      	add	r0, sp, #132	; 0x84
   133a8:	9902      	ldr	r1, [sp, #8]
   133aa:	f001 fec7 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   133ae:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   133b0:	f64d 40a0 	movw	r0, #56480	; 0xdca0
   133b4:	f2c0 0001 	movt	r0, #1
   133b8:	f64d 4290 	movw	r2, #56464	; 0xdc90
   133bc:	f2c0 0201 	movt	r2, #1
   133c0:	2121      	movs	r1, #33	; 0x21
   133c2:	f001 fe85 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   133c6:	defe      	udf	#254	; 0xfe

000133c8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   133c8:	b5b0      	push	{r4, r5, r7, lr}
   133ca:	b0e8      	sub	sp, #416	; 0x1a0
   133cc:	4613      	mov	r3, r2
   133ce:	9058      	str	r0, [sp, #352]	; 0x160
   133d0:	9159      	str	r1, [sp, #356]	; 0x164
   133d2:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   133d6:	2900      	cmp	r1, #0
   133d8:	9121      	str	r1, [sp, #132]	; 0x84
   133da:	9020      	str	r0, [sp, #128]	; 0x80
   133dc:	931f      	str	r3, [sp, #124]	; 0x7c
   133de:	d004      	beq.n	133ea <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   133e0:	e7ff      	b.n	133e2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   133e2:	9821      	ldr	r0, [sp, #132]	; 0x84
   133e4:	2801      	cmp	r0, #1
   133e6:	db0d      	blt.n	13404 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   133e8:	e007      	b.n	133fa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   133ea:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   133ec:	9022      	str	r0, [sp, #136]	; 0x88
   133ee:	2001      	movs	r0, #1
   133f0:	9022      	str	r0, [sp, #136]	; 0x88
   133f2:	e7ff      	b.n	133f4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   133f4:	9822      	ldr	r0, [sp, #136]	; 0x88
   133f6:	b068      	add	sp, #416	; 0x1a0
   133f8:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   133fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
   133fc:	07c1      	lsls	r1, r0, #31
   133fe:	2900      	cmp	r1, #0
   13400:	d10f      	bne.n	13422 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   13402:	e00b      	b.n	1341c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13404:	f64d 40f4 	movw	r0, #56564	; 0xdcf4
   13408:	f2c0 0001 	movt	r0, #1
   1340c:	f64d 5200 	movw	r2, #56576	; 0xdd00
   13410:	f2c0 0201 	movt	r2, #1
   13414:	210b      	movs	r1, #11
   13416:	f001 fe5b 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1341a:	defe      	udf	#254	; 0xfe
   1341c:	2001      	movs	r0, #1
        else { 1 }
   1341e:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   13420:	e002      	b.n	13428 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   13422:	2000      	movs	r0, #0
   13424:	9023      	str	r0, [sp, #140]	; 0x8c
   13426:	e7ff      	b.n	13428 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13428:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1342a:	2012      	movs	r0, #18
   1342c:	f003 fef6 	bl	1721c <hal_gpio_write>
   13430:	e7ff      	b.n	13432 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   13432:	2019      	movs	r0, #25
   13434:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13436:	f003 fef1 	bl	1721c <hal_gpio_write>
   1343a:	e7ff      	b.n	1343c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   1343c:	9821      	ldr	r0, [sp, #132]	; 0x84
   1343e:	2801      	cmp	r0, #1
   13440:	d005      	beq.n	1344e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   13442:	e7ff      	b.n	13444 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13444:	9820      	ldr	r0, [sp, #128]	; 0x80
   13446:	9061      	str	r0, [sp, #388]	; 0x184
   13448:	9961      	ldr	r1, [sp, #388]	; 0x184
   1344a:	911e      	str	r1, [sp, #120]	; 0x78
   1344c:	e094      	b.n	13578 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   1344e:	9820      	ldr	r0, [sp, #128]	; 0x80
   13450:	905b      	str	r0, [sp, #364]	; 0x16c
   13452:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13454:	911d      	str	r1, [sp, #116]	; 0x74
   13456:	e7ff      	b.n	13458 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13458:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   1345a:	901c      	str	r0, [sp, #112]	; 0x70
   1345c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1345e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13460:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13462:	f004 fb89 	bl	17b78 <hal_spi_txrx>
   13466:	9024      	str	r0, [sp, #144]	; 0x90
   13468:	e7ff      	b.n	1346a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1346a:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   1346e:	f2c0 0001 	movt	r0, #1
   13472:	6800      	ldr	r0, [r0, #0]
   13474:	a924      	add	r1, sp, #144	; 0x90
   13476:	9125      	str	r1, [sp, #148]	; 0x94
   13478:	9026      	str	r0, [sp, #152]	; 0x98
   1347a:	9825      	ldr	r0, [sp, #148]	; 0x94
   1347c:	905c      	str	r0, [sp, #368]	; 0x170
   1347e:	9926      	ldr	r1, [sp, #152]	; 0x98
   13480:	915d      	str	r1, [sp, #372]	; 0x174
   13482:	6802      	ldr	r2, [r0, #0]
   13484:	680b      	ldr	r3, [r1, #0]
   13486:	429a      	cmp	r2, r3
   13488:	901b      	str	r0, [sp, #108]	; 0x6c
   1348a:	911a      	str	r1, [sp, #104]	; 0x68
   1348c:	d101      	bne.n	13492 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1348e:	e7ff      	b.n	13490 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   13490:	e11f      	b.n	136d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13492:	f64d 2040 	movw	r0, #55872	; 0xda40
   13496:	f2c0 0001 	movt	r0, #1
   1349a:	6801      	ldr	r1, [r0, #0]
   1349c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1349e:	9036      	str	r0, [sp, #216]	; 0xd8
   134a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   134a2:	9237      	str	r2, [sp, #220]	; 0xdc
   134a4:	f64d 5318 	movw	r3, #56600	; 0xdd18
   134a8:	f2c0 0301 	movt	r3, #1
   134ac:	681b      	ldr	r3, [r3, #0]
   134ae:	f64d 2c60 	movw	ip, #55904	; 0xda60
   134b2:	f2c0 0c01 	movt	ip, #1
   134b6:	f8dc c000 	ldr.w	ip, [ip]
   134ba:	46ee      	mov	lr, sp
   134bc:	2400      	movs	r4, #0
   134be:	f8ce 4000 	str.w	r4, [lr]
   134c2:	a838      	add	r0, sp, #224	; 0xe0
   134c4:	2201      	movs	r2, #1
   134c6:	9119      	str	r1, [sp, #100]	; 0x64
   134c8:	4619      	mov	r1, r3
   134ca:	4663      	mov	r3, ip
   134cc:	f7f5 fae6 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   134d0:	e7ff      	b.n	134d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   134d2:	a836      	add	r0, sp, #216	; 0xd8
   134d4:	9033      	str	r0, [sp, #204]	; 0xcc
   134d6:	a837      	add	r0, sp, #220	; 0xdc
   134d8:	9034      	str	r0, [sp, #208]	; 0xd0
   134da:	a838      	add	r0, sp, #224	; 0xe0
   134dc:	9035      	str	r0, [sp, #212]	; 0xd4
   134de:	9833      	ldr	r0, [sp, #204]	; 0xcc
   134e0:	905e      	str	r0, [sp, #376]	; 0x178
   134e2:	9934      	ldr	r1, [sp, #208]	; 0xd0
   134e4:	915f      	str	r1, [sp, #380]	; 0x17c
   134e6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   134e8:	9260      	str	r2, [sp, #384]	; 0x180
   134ea:	f249 23eb 	movw	r3, #37611	; 0x92eb
   134ee:	f2c0 0300 	movt	r3, #0
   134f2:	9118      	str	r1, [sp, #96]	; 0x60
   134f4:	4619      	mov	r1, r3
   134f6:	9217      	str	r2, [sp, #92]	; 0x5c
   134f8:	f7f5 ff2f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   134fc:	9016      	str	r0, [sp, #88]	; 0x58
   134fe:	9115      	str	r1, [sp, #84]	; 0x54
   13500:	e7ff      	b.n	13502 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13502:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13506:	f2c0 0100 	movt	r1, #0
   1350a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1350c:	f7f5 ff25 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13510:	9014      	str	r0, [sp, #80]	; 0x50
   13512:	9113      	str	r1, [sp, #76]	; 0x4c
   13514:	e7ff      	b.n	13516 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13516:	f245 619f 	movw	r1, #22175	; 0x569f
   1351a:	f2c0 0101 	movt	r1, #1
   1351e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13520:	f7f5 ff5a 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13524:	9012      	str	r0, [sp, #72]	; 0x48
   13526:	9111      	str	r1, [sp, #68]	; 0x44
   13528:	e7ff      	b.n	1352a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   1352a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1352c:	902d      	str	r0, [sp, #180]	; 0xb4
   1352e:	9915      	ldr	r1, [sp, #84]	; 0x54
   13530:	912e      	str	r1, [sp, #184]	; 0xb8
   13532:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13534:	922f      	str	r2, [sp, #188]	; 0xbc
   13536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13538:	9330      	str	r3, [sp, #192]	; 0xc0
   1353a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   1353e:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13542:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13546:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   1354a:	466c      	mov	r4, sp
   1354c:	2503      	movs	r5, #3
   1354e:	6025      	str	r5, [r4, #0]
   13550:	a827      	add	r0, sp, #156	; 0x9c
   13552:	ab2d      	add	r3, sp, #180	; 0xb4
   13554:	9919      	ldr	r1, [sp, #100]	; 0x64
   13556:	462a      	mov	r2, r5
   13558:	f7f5 faa0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1355c:	e7ff      	b.n	1355e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   1355e:	f64d 501c 	movw	r0, #56604	; 0xdd1c
   13562:	f2c0 0001 	movt	r0, #1
   13566:	f001 fdac 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1356a:	9010      	str	r0, [sp, #64]	; 0x40
   1356c:	e7ff      	b.n	1356e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   1356e:	a827      	add	r0, sp, #156	; 0x9c
   13570:	9910      	ldr	r1, [sp, #64]	; 0x40
   13572:	f001 fde3 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13576:	defe      	udf	#254	; 0xfe
   13578:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   1357a:	900f      	str	r0, [sp, #60]	; 0x3c
   1357c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1357e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13580:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13582:	f004 fb4f 	bl	17c24 <hal_spi_txrx_noblock>
   13586:	903e      	str	r0, [sp, #248]	; 0xf8
   13588:	e7ff      	b.n	1358a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1358a:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   1358e:	f2c0 0001 	movt	r0, #1
   13592:	6800      	ldr	r0, [r0, #0]
   13594:	a93e      	add	r1, sp, #248	; 0xf8
   13596:	913f      	str	r1, [sp, #252]	; 0xfc
   13598:	9040      	str	r0, [sp, #256]	; 0x100
   1359a:	983f      	ldr	r0, [sp, #252]	; 0xfc
   1359c:	9062      	str	r0, [sp, #392]	; 0x188
   1359e:	9940      	ldr	r1, [sp, #256]	; 0x100
   135a0:	9163      	str	r1, [sp, #396]	; 0x18c
   135a2:	6802      	ldr	r2, [r0, #0]
   135a4:	680b      	ldr	r3, [r1, #0]
   135a6:	429a      	cmp	r2, r3
   135a8:	900e      	str	r0, [sp, #56]	; 0x38
   135aa:	910d      	str	r1, [sp, #52]	; 0x34
   135ac:	d10c      	bne.n	135c8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   135ae:	e7ff      	b.n	135b0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   135b0:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   135b4:	9067      	str	r0, [sp, #412]	; 0x19c
   135b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   135ba:	fba0 0101 	umull	r0, r1, r0, r1
   135be:	2900      	cmp	r1, #0
   135c0:	900c      	str	r0, [sp, #48]	; 0x30
   135c2:	f040 8090 	bne.w	136e6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   135c6:	e072      	b.n	136ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   135c8:	f64d 2040 	movw	r0, #55872	; 0xda40
   135cc:	f2c0 0001 	movt	r0, #1
   135d0:	6801      	ldr	r1, [r0, #0]
   135d2:	980e      	ldr	r0, [sp, #56]	; 0x38
   135d4:	9050      	str	r0, [sp, #320]	; 0x140
   135d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   135d8:	9251      	str	r2, [sp, #324]	; 0x144
   135da:	f64d 5318 	movw	r3, #56600	; 0xdd18
   135de:	f2c0 0301 	movt	r3, #1
   135e2:	681b      	ldr	r3, [r3, #0]
   135e4:	f64d 2c60 	movw	ip, #55904	; 0xda60
   135e8:	f2c0 0c01 	movt	ip, #1
   135ec:	f8dc c000 	ldr.w	ip, [ip]
   135f0:	46ee      	mov	lr, sp
   135f2:	2400      	movs	r4, #0
   135f4:	f8ce 4000 	str.w	r4, [lr]
   135f8:	a852      	add	r0, sp, #328	; 0x148
   135fa:	2201      	movs	r2, #1
   135fc:	910b      	str	r1, [sp, #44]	; 0x2c
   135fe:	4619      	mov	r1, r3
   13600:	4663      	mov	r3, ip
   13602:	f7f5 fa4b 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13606:	e7ff      	b.n	13608 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13608:	a850      	add	r0, sp, #320	; 0x140
   1360a:	904d      	str	r0, [sp, #308]	; 0x134
   1360c:	a851      	add	r0, sp, #324	; 0x144
   1360e:	904e      	str	r0, [sp, #312]	; 0x138
   13610:	a852      	add	r0, sp, #328	; 0x148
   13612:	904f      	str	r0, [sp, #316]	; 0x13c
   13614:	984d      	ldr	r0, [sp, #308]	; 0x134
   13616:	9064      	str	r0, [sp, #400]	; 0x190
   13618:	994e      	ldr	r1, [sp, #312]	; 0x138
   1361a:	9165      	str	r1, [sp, #404]	; 0x194
   1361c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   1361e:	9266      	str	r2, [sp, #408]	; 0x198
   13620:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13624:	f2c0 0300 	movt	r3, #0
   13628:	910a      	str	r1, [sp, #40]	; 0x28
   1362a:	4619      	mov	r1, r3
   1362c:	9209      	str	r2, [sp, #36]	; 0x24
   1362e:	f7f5 fe94 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13632:	9008      	str	r0, [sp, #32]
   13634:	9107      	str	r1, [sp, #28]
   13636:	e7ff      	b.n	13638 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13638:	f249 21eb 	movw	r1, #37611	; 0x92eb
   1363c:	f2c0 0100 	movt	r1, #0
   13640:	980a      	ldr	r0, [sp, #40]	; 0x28
   13642:	f7f5 fe8a 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13646:	9006      	str	r0, [sp, #24]
   13648:	9105      	str	r1, [sp, #20]
   1364a:	e7ff      	b.n	1364c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   1364c:	f245 619f 	movw	r1, #22175	; 0x569f
   13650:	f2c0 0101 	movt	r1, #1
   13654:	9809      	ldr	r0, [sp, #36]	; 0x24
   13656:	f7f5 febf 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1365a:	9004      	str	r0, [sp, #16]
   1365c:	9103      	str	r1, [sp, #12]
   1365e:	e7ff      	b.n	13660 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13660:	9808      	ldr	r0, [sp, #32]
   13662:	9047      	str	r0, [sp, #284]	; 0x11c
   13664:	9907      	ldr	r1, [sp, #28]
   13666:	9148      	str	r1, [sp, #288]	; 0x120
   13668:	9a06      	ldr	r2, [sp, #24]
   1366a:	9249      	str	r2, [sp, #292]	; 0x124
   1366c:	9b05      	ldr	r3, [sp, #20]
   1366e:	934a      	str	r3, [sp, #296]	; 0x128
   13670:	f8dd c010 	ldr.w	ip, [sp, #16]
   13674:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13678:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1367c:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13680:	466c      	mov	r4, sp
   13682:	2503      	movs	r5, #3
   13684:	6025      	str	r5, [r4, #0]
   13686:	a841      	add	r0, sp, #260	; 0x104
   13688:	ab47      	add	r3, sp, #284	; 0x11c
   1368a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1368c:	462a      	mov	r2, r5
   1368e:	f7f5 fa05 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13692:	e7ff      	b.n	13694 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13694:	f64d 502c 	movw	r0, #56620	; 0xdd2c
   13698:	f2c0 0001 	movt	r0, #1
   1369c:	f001 fd11 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   136a0:	9002      	str	r0, [sp, #8]
   136a2:	e7ff      	b.n	136a4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   136a4:	a841      	add	r0, sp, #260	; 0x104
   136a6:	9902      	ldr	r1, [sp, #8]
   136a8:	f001 fd48 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   136ac:	defe      	udf	#254	; 0xfe
   136ae:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   136b2:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   136b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   136b8:	fba1 0200 	umull	r0, r2, r1, r0
   136bc:	0991      	lsrs	r1, r2, #6
   136be:	f646 227c 	movw	r2, #27260	; 0x6a7c
   136c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   136c6:	9001      	str	r0, [sp, #4]
   136c8:	4610      	mov	r0, r2
   136ca:	f005 fc77 	bl	18fbc <os_sem_pend>
   136ce:	e7ff      	b.n	136d0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   136d0:	e7ff      	b.n	136d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   136d2:	2019      	movs	r0, #25
   136d4:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   136d6:	f003 fda1 	bl	1721c <hal_gpio_write>
   136da:	e7ff      	b.n	136dc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   136dc:	2000      	movs	r0, #0
    Ok(())
   136de:	9022      	str	r0, [sp, #136]	; 0x88
   136e0:	2001      	movs	r0, #1
   136e2:	9022      	str	r0, [sp, #136]	; 0x88
}
   136e4:	e686      	b.n	133f4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   136e6:	f64d 4040 	movw	r0, #56384	; 0xdc40
   136ea:	f2c0 0001 	movt	r0, #1
   136ee:	f64d 523c 	movw	r2, #56636	; 0xdd3c
   136f2:	f2c0 0201 	movt	r2, #1
   136f6:	2121      	movs	r1, #33	; 0x21
   136f8:	f001 fcea 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   136fc:	defe      	udf	#254	; 0xfe

000136fe <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   136fe:	b5b0      	push	{r4, r5, r7, lr}
   13700:	b0ae      	sub	sp, #184	; 0xb8
   13702:	9027      	str	r0, [sp, #156]	; 0x9c
   13704:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13706:	f646 207c 	movw	r0, #27260	; 0x6a7c
   1370a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1370e:	f005 fc23 	bl	18f58 <os_sem_release>
   13712:	900d      	str	r0, [sp, #52]	; 0x34
   13714:	e7ff      	b.n	13716 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13716:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   1371a:	f2c0 0001 	movt	r0, #1
   1371e:	6800      	ldr	r0, [r0, #0]
   13720:	a90d      	add	r1, sp, #52	; 0x34
   13722:	910e      	str	r1, [sp, #56]	; 0x38
   13724:	900f      	str	r0, [sp, #60]	; 0x3c
   13726:	980e      	ldr	r0, [sp, #56]	; 0x38
   13728:	9029      	str	r0, [sp, #164]	; 0xa4
   1372a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1372c:	912a      	str	r1, [sp, #168]	; 0xa8
   1372e:	6802      	ldr	r2, [r0, #0]
   13730:	680b      	ldr	r3, [r1, #0]
   13732:	429a      	cmp	r2, r3
   13734:	900c      	str	r0, [sp, #48]	; 0x30
   13736:	910b      	str	r1, [sp, #44]	; 0x2c
   13738:	d102      	bne.n	13740 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   1373a:	e7ff      	b.n	1373c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   1373c:	b02e      	add	sp, #184	; 0xb8
   1373e:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13740:	f64d 2040 	movw	r0, #55872	; 0xda40
   13744:	f2c0 0001 	movt	r0, #1
   13748:	6801      	ldr	r1, [r0, #0]
   1374a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1374c:	901f      	str	r0, [sp, #124]	; 0x7c
   1374e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13750:	9220      	str	r2, [sp, #128]	; 0x80
   13752:	f64d 3358 	movw	r3, #56152	; 0xdb58
   13756:	f2c0 0301 	movt	r3, #1
   1375a:	681b      	ldr	r3, [r3, #0]
   1375c:	f64d 2c60 	movw	ip, #55904	; 0xda60
   13760:	f2c0 0c01 	movt	ip, #1
   13764:	f8dc c000 	ldr.w	ip, [ip]
   13768:	46ee      	mov	lr, sp
   1376a:	2400      	movs	r4, #0
   1376c:	f8ce 4000 	str.w	r4, [lr]
   13770:	a821      	add	r0, sp, #132	; 0x84
   13772:	2201      	movs	r2, #1
   13774:	910a      	str	r1, [sp, #40]	; 0x28
   13776:	4619      	mov	r1, r3
   13778:	4663      	mov	r3, ip
   1377a:	f7f5 f98f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1377e:	e7ff      	b.n	13780 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13780:	a81f      	add	r0, sp, #124	; 0x7c
   13782:	901c      	str	r0, [sp, #112]	; 0x70
   13784:	a820      	add	r0, sp, #128	; 0x80
   13786:	901d      	str	r0, [sp, #116]	; 0x74
   13788:	a821      	add	r0, sp, #132	; 0x84
   1378a:	901e      	str	r0, [sp, #120]	; 0x78
   1378c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1378e:	902b      	str	r0, [sp, #172]	; 0xac
   13790:	991d      	ldr	r1, [sp, #116]	; 0x74
   13792:	912c      	str	r1, [sp, #176]	; 0xb0
   13794:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13796:	922d      	str	r2, [sp, #180]	; 0xb4
   13798:	f249 333f 	movw	r3, #37695	; 0x933f
   1379c:	f2c0 0300 	movt	r3, #0
   137a0:	9109      	str	r1, [sp, #36]	; 0x24
   137a2:	4619      	mov	r1, r3
   137a4:	9208      	str	r2, [sp, #32]
   137a6:	f7f5 fe02 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   137aa:	9007      	str	r0, [sp, #28]
   137ac:	9106      	str	r1, [sp, #24]
   137ae:	e7ff      	b.n	137b0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   137b0:	f249 313f 	movw	r1, #37695	; 0x933f
   137b4:	f2c0 0100 	movt	r1, #0
   137b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   137ba:	f7f5 fdf8 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   137be:	9005      	str	r0, [sp, #20]
   137c0:	9104      	str	r1, [sp, #16]
   137c2:	e7ff      	b.n	137c4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   137c4:	f245 619f 	movw	r1, #22175	; 0x569f
   137c8:	f2c0 0101 	movt	r1, #1
   137cc:	9808      	ldr	r0, [sp, #32]
   137ce:	f7f5 fe03 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   137d2:	9003      	str	r0, [sp, #12]
   137d4:	9102      	str	r1, [sp, #8]
   137d6:	e7ff      	b.n	137d8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   137d8:	9807      	ldr	r0, [sp, #28]
   137da:	9016      	str	r0, [sp, #88]	; 0x58
   137dc:	9906      	ldr	r1, [sp, #24]
   137de:	9117      	str	r1, [sp, #92]	; 0x5c
   137e0:	9a05      	ldr	r2, [sp, #20]
   137e2:	9218      	str	r2, [sp, #96]	; 0x60
   137e4:	9b04      	ldr	r3, [sp, #16]
   137e6:	9319      	str	r3, [sp, #100]	; 0x64
   137e8:	f8dd c00c 	ldr.w	ip, [sp, #12]
   137ec:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   137f0:	f8dd e008 	ldr.w	lr, [sp, #8]
   137f4:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   137f8:	466c      	mov	r4, sp
   137fa:	2503      	movs	r5, #3
   137fc:	6025      	str	r5, [r4, #0]
   137fe:	a810      	add	r0, sp, #64	; 0x40
   13800:	ab16      	add	r3, sp, #88	; 0x58
   13802:	990a      	ldr	r1, [sp, #40]	; 0x28
   13804:	462a      	mov	r2, r5
   13806:	f7f5 f949 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1380a:	e7ff      	b.n	1380c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   1380c:	f64d 504c 	movw	r0, #56652	; 0xdd4c
   13810:	f2c0 0001 	movt	r0, #1
   13814:	f001 fc55 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13818:	9001      	str	r0, [sp, #4]
   1381a:	e7ff      	b.n	1381c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   1381c:	a810      	add	r0, sp, #64	; 0x40
   1381e:	9901      	ldr	r1, [sp, #4]
   13820:	f001 fc8c 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13824:	defe      	udf	#254	; 0xfe

00013826 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   13826:	b580      	push	{r7, lr}
   13828:	b084      	sub	sp, #16
   1382a:	4601      	mov	r1, r0
   1382c:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13830:	b2c0      	uxtb	r0, r0
   13832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13836:	fba0 0202 	umull	r0, r2, r0, r2
   1383a:	2a00      	cmp	r2, #0
   1383c:	9001      	str	r0, [sp, #4]
   1383e:	d110      	bne.n	13862 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   13840:	e7ff      	b.n	13842 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   13842:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13846:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1384a:	9901      	ldr	r1, [sp, #4]
   1384c:	fba1 0200 	umull	r0, r2, r1, r0
   13850:	0992      	lsrs	r2, r2, #6
   13852:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   13854:	9000      	str	r0, [sp, #0]
   13856:	4610      	mov	r0, r2
   13858:	f005 fcfe 	bl	19258 <os_time_delay>
   1385c:	e7ff      	b.n	1385e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   1385e:	b004      	add	sp, #16
   13860:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13862:	f64d 4040 	movw	r0, #56384	; 0xdc40
   13866:	f2c0 0001 	movt	r0, #1
   1386a:	f64d 525c 	movw	r2, #56668	; 0xdd5c
   1386e:	f2c0 0201 	movt	r2, #1
   13872:	2121      	movs	r1, #33	; 0x21
   13874:	f001 fc2c 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13878:	defe      	udf	#254	; 0xfe

0001387a <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   1387a:	b082      	sub	sp, #8
   1387c:	2000      	movs	r0, #0
        SPI {
   1387e:	9000      	str	r0, [sp, #0]
   13880:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   13882:	9800      	ldr	r0, [sp, #0]
   13884:	9901      	ldr	r1, [sp, #4]
   13886:	b002      	add	sp, #8
   13888:	4770      	bx	lr

0001388a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   1388a:	b5b0      	push	{r4, r5, r7, lr}
   1388c:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   13890:	9077      	str	r0, [sp, #476]	; 0x1dc
   13892:	9178      	str	r1, [sp, #480]	; 0x1e0
   13894:	9279      	str	r2, [sp, #484]	; 0x1e4
   13896:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   13898:	9028      	str	r0, [sp, #160]	; 0xa0
   1389a:	4608      	mov	r0, r1
   1389c:	9127      	str	r1, [sp, #156]	; 0x9c
   1389e:	4619      	mov	r1, r3
   138a0:	9226      	str	r2, [sp, #152]	; 0x98
   138a2:	f004 f8ad 	bl	17a00 <hal_spi_config>
   138a6:	9029      	str	r0, [sp, #164]	; 0xa4
   138a8:	e7ff      	b.n	138aa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   138aa:	f64d 506c 	movw	r0, #56684	; 0xdd6c
   138ae:	f2c0 0001 	movt	r0, #1
   138b2:	6800      	ldr	r0, [r0, #0]
   138b4:	a929      	add	r1, sp, #164	; 0xa4
   138b6:	912a      	str	r1, [sp, #168]	; 0xa8
   138b8:	902b      	str	r0, [sp, #172]	; 0xac
   138ba:	982a      	ldr	r0, [sp, #168]	; 0xa8
   138bc:	907b      	str	r0, [sp, #492]	; 0x1ec
   138be:	992b      	ldr	r1, [sp, #172]	; 0xac
   138c0:	917c      	str	r1, [sp, #496]	; 0x1f0
   138c2:	6802      	ldr	r2, [r0, #0]
   138c4:	680b      	ldr	r3, [r1, #0]
   138c6:	429a      	cmp	r2, r3
   138c8:	9025      	str	r0, [sp, #148]	; 0x94
   138ca:	9124      	str	r1, [sp, #144]	; 0x90
   138cc:	d105      	bne.n	138da <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   138ce:	e7ff      	b.n	138d0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   138d0:	9827      	ldr	r0, [sp, #156]	; 0x9c
   138d2:	f004 f8b1 	bl	17a38 <hal_spi_enable>
   138d6:	9043      	str	r0, [sp, #268]	; 0x10c
   138d8:	e072      	b.n	139c0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   138da:	f64d 50c4 	movw	r0, #56772	; 0xddc4
   138de:	f2c0 0001 	movt	r0, #1
   138e2:	6801      	ldr	r1, [r0, #0]
   138e4:	9825      	ldr	r0, [sp, #148]	; 0x94
   138e6:	903b      	str	r0, [sp, #236]	; 0xec
   138e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   138ea:	923c      	str	r2, [sp, #240]	; 0xf0
   138ec:	f64d 53e0 	movw	r3, #56800	; 0xdde0
   138f0:	f2c0 0301 	movt	r3, #1
   138f4:	681b      	ldr	r3, [r3, #0]
   138f6:	f64d 5ce4 	movw	ip, #56804	; 0xdde4
   138fa:	f2c0 0c01 	movt	ip, #1
   138fe:	f8dc c000 	ldr.w	ip, [ip]
   13902:	46ee      	mov	lr, sp
   13904:	2400      	movs	r4, #0
   13906:	f8ce 4000 	str.w	r4, [lr]
   1390a:	a83d      	add	r0, sp, #244	; 0xf4
   1390c:	2201      	movs	r2, #1
   1390e:	9123      	str	r1, [sp, #140]	; 0x8c
   13910:	4619      	mov	r1, r3
   13912:	4663      	mov	r3, ip
   13914:	f7f5 f8c2 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13918:	e7ff      	b.n	1391a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   1391a:	a83b      	add	r0, sp, #236	; 0xec
   1391c:	9038      	str	r0, [sp, #224]	; 0xe0
   1391e:	a83c      	add	r0, sp, #240	; 0xf0
   13920:	9039      	str	r0, [sp, #228]	; 0xe4
   13922:	a83d      	add	r0, sp, #244	; 0xf4
   13924:	903a      	str	r0, [sp, #232]	; 0xe8
   13926:	9838      	ldr	r0, [sp, #224]	; 0xe0
   13928:	907d      	str	r0, [sp, #500]	; 0x1f4
   1392a:	9939      	ldr	r1, [sp, #228]	; 0xe4
   1392c:	917e      	str	r1, [sp, #504]	; 0x1f8
   1392e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   13930:	927f      	str	r2, [sp, #508]	; 0x1fc
   13932:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13936:	f2c0 0300 	movt	r3, #0
   1393a:	9122      	str	r1, [sp, #136]	; 0x88
   1393c:	4619      	mov	r1, r3
   1393e:	9221      	str	r2, [sp, #132]	; 0x84
   13940:	f7f5 fd0b 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13944:	9020      	str	r0, [sp, #128]	; 0x80
   13946:	911f      	str	r1, [sp, #124]	; 0x7c
   13948:	e7ff      	b.n	1394a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   1394a:	f249 21eb 	movw	r1, #37611	; 0x92eb
   1394e:	f2c0 0100 	movt	r1, #0
   13952:	9822      	ldr	r0, [sp, #136]	; 0x88
   13954:	f7f5 fd01 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13958:	901e      	str	r0, [sp, #120]	; 0x78
   1395a:	911d      	str	r1, [sp, #116]	; 0x74
   1395c:	e7ff      	b.n	1395e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   1395e:	f245 619f 	movw	r1, #22175	; 0x569f
   13962:	f2c0 0101 	movt	r1, #1
   13966:	9821      	ldr	r0, [sp, #132]	; 0x84
   13968:	f7f5 fd36 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1396c:	901c      	str	r0, [sp, #112]	; 0x70
   1396e:	911b      	str	r1, [sp, #108]	; 0x6c
   13970:	e7ff      	b.n	13972 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   13972:	9820      	ldr	r0, [sp, #128]	; 0x80
   13974:	9032      	str	r0, [sp, #200]	; 0xc8
   13976:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13978:	9133      	str	r1, [sp, #204]	; 0xcc
   1397a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1397c:	9234      	str	r2, [sp, #208]	; 0xd0
   1397e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13980:	9335      	str	r3, [sp, #212]	; 0xd4
   13982:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   13986:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   1398a:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   1398e:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   13992:	466c      	mov	r4, sp
   13994:	2503      	movs	r5, #3
   13996:	6025      	str	r5, [r4, #0]
   13998:	a82c      	add	r0, sp, #176	; 0xb0
   1399a:	ab32      	add	r3, sp, #200	; 0xc8
   1399c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1399e:	462a      	mov	r2, r5
   139a0:	f7f5 f87c 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139a4:	e7ff      	b.n	139a6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   139a6:	f64d 6000 	movw	r0, #56832	; 0xde00
   139aa:	f2c0 0001 	movt	r0, #1
   139ae:	f001 fb88 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   139b2:	901a      	str	r0, [sp, #104]	; 0x68
   139b4:	e7ff      	b.n	139b6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   139b6:	a82c      	add	r0, sp, #176	; 0xb0
   139b8:	991a      	ldr	r1, [sp, #104]	; 0x68
   139ba:	f001 fbbf 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   139be:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   139c0:	f64d 506c 	movw	r0, #56684	; 0xdd6c
   139c4:	f2c0 0001 	movt	r0, #1
   139c8:	6800      	ldr	r0, [r0, #0]
   139ca:	a943      	add	r1, sp, #268	; 0x10c
   139cc:	9144      	str	r1, [sp, #272]	; 0x110
   139ce:	9045      	str	r0, [sp, #276]	; 0x114
   139d0:	9844      	ldr	r0, [sp, #272]	; 0x110
   139d2:	9080      	str	r0, [sp, #512]	; 0x200
   139d4:	9945      	ldr	r1, [sp, #276]	; 0x114
   139d6:	9181      	str	r1, [sp, #516]	; 0x204
   139d8:	6802      	ldr	r2, [r0, #0]
   139da:	680b      	ldr	r3, [r1, #0]
   139dc:	429a      	cmp	r2, r3
   139de:	9019      	str	r0, [sp, #100]	; 0x64
   139e0:	9118      	str	r1, [sp, #96]	; 0x60
   139e2:	d106      	bne.n	139f2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   139e4:	e7ff      	b.n	139e6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   139e6:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   139e8:	9826      	ldr	r0, [sp, #152]	; 0x98
   139ea:	f003 fbfb 	bl	171e4 <hal_gpio_init_out>
   139ee:	905d      	str	r0, [sp, #372]	; 0x174
   139f0:	e072      	b.n	13ad8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   139f2:	f64d 50c4 	movw	r0, #56772	; 0xddc4
   139f6:	f2c0 0001 	movt	r0, #1
   139fa:	6801      	ldr	r1, [r0, #0]
   139fc:	9819      	ldr	r0, [sp, #100]	; 0x64
   139fe:	9055      	str	r0, [sp, #340]	; 0x154
   13a00:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13a02:	9256      	str	r2, [sp, #344]	; 0x158
   13a04:	f64d 6328 	movw	r3, #56872	; 0xde28
   13a08:	f2c0 0301 	movt	r3, #1
   13a0c:	681b      	ldr	r3, [r3, #0]
   13a0e:	f64d 5ce4 	movw	ip, #56804	; 0xdde4
   13a12:	f2c0 0c01 	movt	ip, #1
   13a16:	f8dc c000 	ldr.w	ip, [ip]
   13a1a:	46ee      	mov	lr, sp
   13a1c:	2400      	movs	r4, #0
   13a1e:	f8ce 4000 	str.w	r4, [lr]
   13a22:	a857      	add	r0, sp, #348	; 0x15c
   13a24:	2201      	movs	r2, #1
   13a26:	9117      	str	r1, [sp, #92]	; 0x5c
   13a28:	4619      	mov	r1, r3
   13a2a:	4663      	mov	r3, ip
   13a2c:	f7f5 f836 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a30:	e7ff      	b.n	13a32 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   13a32:	a855      	add	r0, sp, #340	; 0x154
   13a34:	9052      	str	r0, [sp, #328]	; 0x148
   13a36:	a856      	add	r0, sp, #344	; 0x158
   13a38:	9053      	str	r0, [sp, #332]	; 0x14c
   13a3a:	a857      	add	r0, sp, #348	; 0x15c
   13a3c:	9054      	str	r0, [sp, #336]	; 0x150
   13a3e:	9852      	ldr	r0, [sp, #328]	; 0x148
   13a40:	9082      	str	r0, [sp, #520]	; 0x208
   13a42:	9953      	ldr	r1, [sp, #332]	; 0x14c
   13a44:	9183      	str	r1, [sp, #524]	; 0x20c
   13a46:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13a48:	9284      	str	r2, [sp, #528]	; 0x210
   13a4a:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13a4e:	f2c0 0300 	movt	r3, #0
   13a52:	9116      	str	r1, [sp, #88]	; 0x58
   13a54:	4619      	mov	r1, r3
   13a56:	9215      	str	r2, [sp, #84]	; 0x54
   13a58:	f7f5 fc7f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a5c:	9014      	str	r0, [sp, #80]	; 0x50
   13a5e:	9113      	str	r1, [sp, #76]	; 0x4c
   13a60:	e7ff      	b.n	13a62 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   13a62:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13a66:	f2c0 0100 	movt	r1, #0
   13a6a:	9816      	ldr	r0, [sp, #88]	; 0x58
   13a6c:	f7f5 fc75 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a70:	9012      	str	r0, [sp, #72]	; 0x48
   13a72:	9111      	str	r1, [sp, #68]	; 0x44
   13a74:	e7ff      	b.n	13a76 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   13a76:	f245 619f 	movw	r1, #22175	; 0x569f
   13a7a:	f2c0 0101 	movt	r1, #1
   13a7e:	9815      	ldr	r0, [sp, #84]	; 0x54
   13a80:	f7f5 fcaa 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a84:	9010      	str	r0, [sp, #64]	; 0x40
   13a86:	910f      	str	r1, [sp, #60]	; 0x3c
   13a88:	e7ff      	b.n	13a8a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   13a8a:	9814      	ldr	r0, [sp, #80]	; 0x50
   13a8c:	904c      	str	r0, [sp, #304]	; 0x130
   13a8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13a90:	914d      	str	r1, [sp, #308]	; 0x134
   13a92:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13a94:	924e      	str	r2, [sp, #312]	; 0x138
   13a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13a98:	934f      	str	r3, [sp, #316]	; 0x13c
   13a9a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   13a9e:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   13aa2:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   13aa6:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   13aaa:	466c      	mov	r4, sp
   13aac:	2503      	movs	r5, #3
   13aae:	6025      	str	r5, [r4, #0]
   13ab0:	a846      	add	r0, sp, #280	; 0x118
   13ab2:	ab4c      	add	r3, sp, #304	; 0x130
   13ab4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13ab6:	462a      	mov	r2, r5
   13ab8:	f7f4 fff0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13abc:	e7ff      	b.n	13abe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   13abe:	f64d 602c 	movw	r0, #56876	; 0xde2c
   13ac2:	f2c0 0001 	movt	r0, #1
   13ac6:	f001 fafc 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13aca:	900e      	str	r0, [sp, #56]	; 0x38
   13acc:	e7ff      	b.n	13ace <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   13ace:	a846      	add	r0, sp, #280	; 0x118
   13ad0:	990e      	ldr	r1, [sp, #56]	; 0x38
   13ad2:	f001 fb33 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ad6:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   13ad8:	f64d 506c 	movw	r0, #56684	; 0xdd6c
   13adc:	f2c0 0001 	movt	r0, #1
   13ae0:	6800      	ldr	r0, [r0, #0]
   13ae2:	a95d      	add	r1, sp, #372	; 0x174
   13ae4:	915e      	str	r1, [sp, #376]	; 0x178
   13ae6:	905f      	str	r0, [sp, #380]	; 0x17c
   13ae8:	985e      	ldr	r0, [sp, #376]	; 0x178
   13aea:	9085      	str	r0, [sp, #532]	; 0x214
   13aec:	995f      	ldr	r1, [sp, #380]	; 0x17c
   13aee:	9186      	str	r1, [sp, #536]	; 0x218
   13af0:	6802      	ldr	r2, [r0, #0]
   13af2:	680b      	ldr	r3, [r1, #0]
   13af4:	429a      	cmp	r2, r3
   13af6:	900d      	str	r0, [sp, #52]	; 0x34
   13af8:	910c      	str	r1, [sp, #48]	; 0x30
   13afa:	d109      	bne.n	13b10 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   13afc:	e7ff      	b.n	13afe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   13afe:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13b00:	9928      	ldr	r1, [sp, #160]	; 0xa0
   13b02:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   13b04:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13b06:	604a      	str	r2, [r1, #4]
   13b08:	2001      	movs	r0, #1
        Ok(())
    }
   13b0a:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   13b0e:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   13b10:	f64d 50c4 	movw	r0, #56772	; 0xddc4
   13b14:	f2c0 0001 	movt	r0, #1
   13b18:	6801      	ldr	r1, [r0, #0]
   13b1a:	980d      	ldr	r0, [sp, #52]	; 0x34
   13b1c:	906f      	str	r0, [sp, #444]	; 0x1bc
   13b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13b20:	9270      	str	r2, [sp, #448]	; 0x1c0
   13b22:	f64d 6354 	movw	r3, #56916	; 0xde54
   13b26:	f2c0 0301 	movt	r3, #1
   13b2a:	681b      	ldr	r3, [r3, #0]
   13b2c:	f64d 5ce4 	movw	ip, #56804	; 0xdde4
   13b30:	f2c0 0c01 	movt	ip, #1
   13b34:	f8dc c000 	ldr.w	ip, [ip]
   13b38:	46ee      	mov	lr, sp
   13b3a:	2400      	movs	r4, #0
   13b3c:	f8ce 4000 	str.w	r4, [lr]
   13b40:	a871      	add	r0, sp, #452	; 0x1c4
   13b42:	2201      	movs	r2, #1
   13b44:	910b      	str	r1, [sp, #44]	; 0x2c
   13b46:	4619      	mov	r1, r3
   13b48:	4663      	mov	r3, ip
   13b4a:	f7f4 ffa7 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b4e:	e7ff      	b.n	13b50 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   13b50:	a86f      	add	r0, sp, #444	; 0x1bc
   13b52:	906c      	str	r0, [sp, #432]	; 0x1b0
   13b54:	a870      	add	r0, sp, #448	; 0x1c0
   13b56:	906d      	str	r0, [sp, #436]	; 0x1b4
   13b58:	a871      	add	r0, sp, #452	; 0x1c4
   13b5a:	906e      	str	r0, [sp, #440]	; 0x1b8
   13b5c:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   13b5e:	9087      	str	r0, [sp, #540]	; 0x21c
   13b60:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   13b62:	9188      	str	r1, [sp, #544]	; 0x220
   13b64:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   13b66:	9289      	str	r2, [sp, #548]	; 0x224
   13b68:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13b6c:	f2c0 0300 	movt	r3, #0
   13b70:	910a      	str	r1, [sp, #40]	; 0x28
   13b72:	4619      	mov	r1, r3
   13b74:	9209      	str	r2, [sp, #36]	; 0x24
   13b76:	f7f5 fbf0 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b7a:	9008      	str	r0, [sp, #32]
   13b7c:	9107      	str	r1, [sp, #28]
   13b7e:	e7ff      	b.n	13b80 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   13b80:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13b84:	f2c0 0100 	movt	r1, #0
   13b88:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b8a:	f7f5 fbe6 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b8e:	9006      	str	r0, [sp, #24]
   13b90:	9105      	str	r1, [sp, #20]
   13b92:	e7ff      	b.n	13b94 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   13b94:	f245 619f 	movw	r1, #22175	; 0x569f
   13b98:	f2c0 0101 	movt	r1, #1
   13b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b9e:	f7f5 fc1b 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13ba2:	9004      	str	r0, [sp, #16]
   13ba4:	9103      	str	r1, [sp, #12]
   13ba6:	e7ff      	b.n	13ba8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   13ba8:	9808      	ldr	r0, [sp, #32]
   13baa:	9066      	str	r0, [sp, #408]	; 0x198
   13bac:	9907      	ldr	r1, [sp, #28]
   13bae:	9167      	str	r1, [sp, #412]	; 0x19c
   13bb0:	9a06      	ldr	r2, [sp, #24]
   13bb2:	9268      	str	r2, [sp, #416]	; 0x1a0
   13bb4:	9b05      	ldr	r3, [sp, #20]
   13bb6:	9369      	str	r3, [sp, #420]	; 0x1a4
   13bb8:	f8dd c010 	ldr.w	ip, [sp, #16]
   13bbc:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   13bc0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13bc4:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   13bc8:	466c      	mov	r4, sp
   13bca:	2503      	movs	r5, #3
   13bcc:	6025      	str	r5, [r4, #0]
   13bce:	a860      	add	r0, sp, #384	; 0x180
   13bd0:	ab66      	add	r3, sp, #408	; 0x198
   13bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13bd4:	462a      	mov	r2, r5
   13bd6:	f7f4 ff61 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bda:	e7ff      	b.n	13bdc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   13bdc:	f64d 6058 	movw	r0, #56920	; 0xde58
   13be0:	f2c0 0001 	movt	r0, #1
   13be4:	f001 fa6d 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13be8:	9002      	str	r0, [sp, #8]
   13bea:	e7ff      	b.n	13bec <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   13bec:	a860      	add	r0, sp, #384	; 0x180
   13bee:	9902      	ldr	r1, [sp, #8]
   13bf0:	f001 faa4 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13bf4:	defe      	udf	#254	; 0xfe

00013bf6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   13bf6:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   13bf8:	4770      	bx	lr

00013bfa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   13bfa:	b5b0      	push	{r4, r5, r7, lr}
   13bfc:	b0b0      	sub	sp, #192	; 0xc0
   13bfe:	9029      	str	r0, [sp, #164]	; 0xa4
   13c00:	912a      	str	r1, [sp, #168]	; 0xa8
   13c02:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   13c04:	900e      	str	r0, [sp, #56]	; 0x38
   13c06:	4608      	mov	r0, r1
   13c08:	910d      	str	r1, [sp, #52]	; 0x34
   13c0a:	4611      	mov	r1, r2
   13c0c:	f003 faea 	bl	171e4 <hal_gpio_init_out>
   13c10:	900f      	str	r0, [sp, #60]	; 0x3c
   13c12:	e7ff      	b.n	13c14 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   13c14:	f64d 506c 	movw	r0, #56684	; 0xdd6c
   13c18:	f2c0 0001 	movt	r0, #1
   13c1c:	6800      	ldr	r0, [r0, #0]
   13c1e:	a90f      	add	r1, sp, #60	; 0x3c
   13c20:	9110      	str	r1, [sp, #64]	; 0x40
   13c22:	9011      	str	r0, [sp, #68]	; 0x44
   13c24:	9810      	ldr	r0, [sp, #64]	; 0x40
   13c26:	902b      	str	r0, [sp, #172]	; 0xac
   13c28:	9911      	ldr	r1, [sp, #68]	; 0x44
   13c2a:	912c      	str	r1, [sp, #176]	; 0xb0
   13c2c:	6802      	ldr	r2, [r0, #0]
   13c2e:	680b      	ldr	r3, [r1, #0]
   13c30:	429a      	cmp	r2, r3
   13c32:	900c      	str	r0, [sp, #48]	; 0x30
   13c34:	910b      	str	r1, [sp, #44]	; 0x2c
   13c36:	d106      	bne.n	13c46 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   13c38:	e7ff      	b.n	13c3a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   13c3a:	980d      	ldr	r0, [sp, #52]	; 0x34
   13c3c:	990e      	ldr	r1, [sp, #56]	; 0x38
   13c3e:	6008      	str	r0, [r1, #0]
   13c40:	2001      	movs	r0, #1
        Ok(())
    }
   13c42:	b030      	add	sp, #192	; 0xc0
   13c44:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   13c46:	f64d 50c4 	movw	r0, #56772	; 0xddc4
   13c4a:	f2c0 0001 	movt	r0, #1
   13c4e:	6801      	ldr	r1, [r0, #0]
   13c50:	980c      	ldr	r0, [sp, #48]	; 0x30
   13c52:	9021      	str	r0, [sp, #132]	; 0x84
   13c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13c56:	9222      	str	r2, [sp, #136]	; 0x88
   13c58:	f64d 637c 	movw	r3, #56956	; 0xde7c
   13c5c:	f2c0 0301 	movt	r3, #1
   13c60:	681b      	ldr	r3, [r3, #0]
   13c62:	f64d 5ce4 	movw	ip, #56804	; 0xdde4
   13c66:	f2c0 0c01 	movt	ip, #1
   13c6a:	f8dc c000 	ldr.w	ip, [ip]
   13c6e:	46ee      	mov	lr, sp
   13c70:	2400      	movs	r4, #0
   13c72:	f8ce 4000 	str.w	r4, [lr]
   13c76:	a823      	add	r0, sp, #140	; 0x8c
   13c78:	2201      	movs	r2, #1
   13c7a:	910a      	str	r1, [sp, #40]	; 0x28
   13c7c:	4619      	mov	r1, r3
   13c7e:	4663      	mov	r3, ip
   13c80:	f7f4 ff0c 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c84:	e7ff      	b.n	13c86 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   13c86:	a821      	add	r0, sp, #132	; 0x84
   13c88:	901e      	str	r0, [sp, #120]	; 0x78
   13c8a:	a822      	add	r0, sp, #136	; 0x88
   13c8c:	901f      	str	r0, [sp, #124]	; 0x7c
   13c8e:	a823      	add	r0, sp, #140	; 0x8c
   13c90:	9020      	str	r0, [sp, #128]	; 0x80
   13c92:	981e      	ldr	r0, [sp, #120]	; 0x78
   13c94:	902d      	str	r0, [sp, #180]	; 0xb4
   13c96:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13c98:	912e      	str	r1, [sp, #184]	; 0xb8
   13c9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13c9c:	922f      	str	r2, [sp, #188]	; 0xbc
   13c9e:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13ca2:	f2c0 0300 	movt	r3, #0
   13ca6:	9109      	str	r1, [sp, #36]	; 0x24
   13ca8:	4619      	mov	r1, r3
   13caa:	9208      	str	r2, [sp, #32]
   13cac:	f7f5 fb55 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13cb0:	9007      	str	r0, [sp, #28]
   13cb2:	9106      	str	r1, [sp, #24]
   13cb4:	e7ff      	b.n	13cb6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   13cb6:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13cba:	f2c0 0100 	movt	r1, #0
   13cbe:	9809      	ldr	r0, [sp, #36]	; 0x24
   13cc0:	f7f5 fb4b 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13cc4:	9005      	str	r0, [sp, #20]
   13cc6:	9104      	str	r1, [sp, #16]
   13cc8:	e7ff      	b.n	13cca <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   13cca:	f245 619f 	movw	r1, #22175	; 0x569f
   13cce:	f2c0 0101 	movt	r1, #1
   13cd2:	9808      	ldr	r0, [sp, #32]
   13cd4:	f7f5 fb80 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13cd8:	9003      	str	r0, [sp, #12]
   13cda:	9102      	str	r1, [sp, #8]
   13cdc:	e7ff      	b.n	13cde <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   13cde:	9807      	ldr	r0, [sp, #28]
   13ce0:	9018      	str	r0, [sp, #96]	; 0x60
   13ce2:	9906      	ldr	r1, [sp, #24]
   13ce4:	9119      	str	r1, [sp, #100]	; 0x64
   13ce6:	9a05      	ldr	r2, [sp, #20]
   13ce8:	921a      	str	r2, [sp, #104]	; 0x68
   13cea:	9b04      	ldr	r3, [sp, #16]
   13cec:	931b      	str	r3, [sp, #108]	; 0x6c
   13cee:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13cf2:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   13cf6:	f8dd e008 	ldr.w	lr, [sp, #8]
   13cfa:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   13cfe:	466c      	mov	r4, sp
   13d00:	2503      	movs	r5, #3
   13d02:	6025      	str	r5, [r4, #0]
   13d04:	a812      	add	r0, sp, #72	; 0x48
   13d06:	ab18      	add	r3, sp, #96	; 0x60
   13d08:	990a      	ldr	r1, [sp, #40]	; 0x28
   13d0a:	462a      	mov	r2, r5
   13d0c:	f7f4 fec6 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d10:	e7ff      	b.n	13d12 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   13d12:	f64d 6080 	movw	r0, #56960	; 0xde80
   13d16:	f2c0 0001 	movt	r0, #1
   13d1a:	f001 f9d2 	bl	150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13d1e:	9001      	str	r0, [sp, #4]
   13d20:	e7ff      	b.n	13d22 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   13d22:	a812      	add	r0, sp, #72	; 0x48
   13d24:	9901      	ldr	r1, [sp, #4]
   13d26:	f001 fa09 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d2a:	defe      	udf	#254	; 0xfe

00013d2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   13d2c:	b580      	push	{r7, lr}
   13d2e:	b082      	sub	sp, #8
   13d30:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   13d32:	6800      	ldr	r0, [r0, #0]
   13d34:	2100      	movs	r1, #0
   13d36:	f003 fa71 	bl	1721c <hal_gpio_write>
   13d3a:	e7ff      	b.n	13d3c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   13d3c:	2001      	movs	r0, #1
        Ok(())
    }
   13d3e:	b002      	add	sp, #8
   13d40:	bd80      	pop	{r7, pc}

00013d42 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   13d42:	b580      	push	{r7, lr}
   13d44:	b082      	sub	sp, #8
   13d46:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   13d48:	6800      	ldr	r0, [r0, #0]
   13d4a:	2101      	movs	r1, #1
   13d4c:	f003 fa66 	bl	1721c <hal_gpio_write>
   13d50:	e7ff      	b.n	13d52 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   13d52:	2001      	movs	r0, #1
        Ok(())
    }
   13d54:	b002      	add	sp, #8
   13d56:	bd80      	pop	{r7, pc}

00013d58 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   13d58:	4770      	bx	lr

00013d5a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   13d5a:	b580      	push	{r7, lr}
   13d5c:	b086      	sub	sp, #24
   13d5e:	460a      	mov	r2, r1
   13d60:	9003      	str	r0, [sp, #12]
   13d62:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13d66:	b2c8      	uxtb	r0, r1
   13d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13d6c:	fba0 0101 	umull	r0, r1, r0, r1
   13d70:	2900      	cmp	r1, #0
   13d72:	9002      	str	r0, [sp, #8]
   13d74:	d110      	bne.n	13d98 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   13d76:	e7ff      	b.n	13d78 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   13d78:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13d7c:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13d80:	9902      	ldr	r1, [sp, #8]
   13d82:	fba1 0200 	umull	r0, r2, r1, r0
   13d86:	0992      	lsrs	r2, r2, #6
   13d88:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   13d8a:	9001      	str	r0, [sp, #4]
   13d8c:	4610      	mov	r0, r2
   13d8e:	f005 fa63 	bl	19258 <os_time_delay>
   13d92:	e7ff      	b.n	13d94 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   13d94:	b006      	add	sp, #24
   13d96:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13d98:	f64d 60a0 	movw	r0, #56992	; 0xdea0
   13d9c:	f2c0 0001 	movt	r0, #1
   13da0:	f64d 6290 	movw	r2, #56976	; 0xde90
   13da4:	f2c0 0201 	movt	r2, #1
   13da8:	2121      	movs	r1, #33	; 0x21
   13daa:	f001 f991 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13dae:	defe      	udf	#254	; 0xfe

00013db0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   13db0:	b082      	sub	sp, #8
   13db2:	9001      	str	r0, [sp, #4]
   13db4:	9000      	str	r0, [sp, #0]
   13db6:	e7ff      	b.n	13db8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   13db8:	9800      	ldr	r0, [sp, #0]
   13dba:	fab0 f180 	clz	r1, r0
   13dbe:	0948      	lsrs	r0, r1, #5
   13dc0:	b002      	add	sp, #8
   13dc2:	4770      	bx	lr

00013dc4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   13dc4:	b081      	sub	sp, #4
   13dc6:	b001      	add	sp, #4
   13dc8:	4770      	bx	lr

00013dca <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   13dca:	b08a      	sub	sp, #40	; 0x28
   13dcc:	9005      	str	r0, [sp, #20]
   13dce:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   13dd0:	9107      	str	r1, [sp, #28]
   13dd2:	21ff      	movs	r1, #255	; 0xff
   13dd4:	9106      	str	r1, [sp, #24]
   13dd6:	2108      	movs	r1, #8
   13dd8:	9108      	str	r1, [sp, #32]
   13dda:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13ddc:	9003      	str	r0, [sp, #12]
   13dde:	9102      	str	r1, [sp, #8]
   13de0:	e016      	b.n	13e10 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   13de2:	2001      	movs	r0, #1
   13de4:	f88d 0013 	strb.w	r0, [sp, #19]
   13de8:	e00c      	b.n	13e04 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   13dea:	2000      	movs	r0, #0
   13dec:	f88d 0013 	strb.w	r0, [sp, #19]
   13df0:	e008      	b.n	13e04 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   13df2:	9803      	ldr	r0, [sp, #12]
   13df4:	6801      	ldr	r1, [r0, #0]
   13df6:	6842      	ldr	r2, [r0, #4]
   13df8:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   13dfc:	f172 0200 	sbcs.w	r2, r2, #0
   13e00:	d3ef      	bcc.n	13de2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   13e02:	e7f2      	b.n	13dea <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   13e04:	f89d 0013 	ldrb.w	r0, [sp, #19]
   13e08:	07c0      	lsls	r0, r0, #31
   13e0a:	2800      	cmp	r0, #0
   13e0c:	d10e      	bne.n	13e2c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   13e0e:	e009      	b.n	13e24 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   13e10:	2001      	movs	r0, #1
   13e12:	9009      	str	r0, [sp, #36]	; 0x24
   13e14:	9809      	ldr	r0, [sp, #36]	; 0x24
   13e16:	9001      	str	r0, [sp, #4]
   13e18:	e7ff      	b.n	13e1a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   13e1a:	9802      	ldr	r0, [sp, #8]
   13e1c:	9901      	ldr	r1, [sp, #4]
   13e1e:	4288      	cmp	r0, r1
   13e20:	d9df      	bls.n	13de2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   13e22:	e7e6      	b.n	13df2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   13e24:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   13e26:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13e2a:	e007      	b.n	13e3c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   13e2c:	9803      	ldr	r0, [sp, #12]
   13e2e:	7801      	ldrb	r1, [r0, #0]
   13e30:	f88d 1011 	strb.w	r1, [sp, #17]
   13e34:	2101      	movs	r1, #1
   13e36:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13e3a:	e7ff      	b.n	13e3c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   13e3c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   13e40:	f89d 1011 	ldrb.w	r1, [sp, #17]
   13e44:	b00a      	add	sp, #40	; 0x28
   13e46:	4770      	bx	lr

00013e48 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   13e48:	b084      	sub	sp, #16
   13e4a:	9002      	str	r0, [sp, #8]
   13e4c:	6801      	ldr	r1, [r0, #0]
   13e4e:	2900      	cmp	r1, #0
   13e50:	9000      	str	r0, [sp, #0]
   13e52:	d001      	beq.n	13e58 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   13e54:	e7ff      	b.n	13e56 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   13e56:	e003      	b.n	13e60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   13e58:	2000      	movs	r0, #0
   13e5a:	9001      	str	r0, [sp, #4]
   13e5c:	e006      	b.n	13e6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   13e5e:	defe      	udf	#254	; 0xfe
   13e60:	9800      	ldr	r0, [sp, #0]
   13e62:	f100 0108 	add.w	r1, r0, #8
   13e66:	9103      	str	r1, [sp, #12]
   13e68:	9101      	str	r1, [sp, #4]
   13e6a:	e7ff      	b.n	13e6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   13e6c:	9801      	ldr	r0, [sp, #4]
   13e6e:	b004      	add	sp, #16
   13e70:	4770      	bx	lr

00013e72 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   13e72:	b084      	sub	sp, #16
   13e74:	460b      	mov	r3, r1
   13e76:	4684      	mov	ip, r0
   13e78:	f88d 000c 	strb.w	r0, [sp, #12]
   13e7c:	f88d 100d 	strb.w	r1, [sp, #13]
   13e80:	f89d 000c 	ldrb.w	r0, [sp, #12]
   13e84:	07c1      	lsls	r1, r0, #31
   13e86:	2900      	cmp	r1, #0
   13e88:	9202      	str	r2, [sp, #8]
   13e8a:	d001      	beq.n	13e90 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   13e8c:	e7ff      	b.n	13e8e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   13e8e:	e009      	b.n	13ea4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   13e90:	f64d 60c1 	movw	r0, #57025	; 0xdec1
   13e94:	f2c0 0001 	movt	r0, #1
   13e98:	212b      	movs	r1, #43	; 0x2b
   13e9a:	9a02      	ldr	r2, [sp, #8]
   13e9c:	f001 f918 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13ea0:	defe      	udf	#254	; 0xfe
   13ea2:	defe      	udf	#254	; 0xfe
   13ea4:	f89d 000d 	ldrb.w	r0, [sp, #13]
   13ea8:	4601      	mov	r1, r0
   13eaa:	f88d 000f 	strb.w	r0, [sp, #15]
   13eae:	f89d 000c 	ldrb.w	r0, [sp, #12]
   13eb2:	07c0      	lsls	r0, r0, #31
   13eb4:	2800      	cmp	r0, #0
   13eb6:	9101      	str	r1, [sp, #4]
   13eb8:	d003      	beq.n	13ec2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   13eba:	e7ff      	b.n	13ebc <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   13ebc:	9801      	ldr	r0, [sp, #4]
   13ebe:	b004      	add	sp, #16
   13ec0:	4770      	bx	lr
   13ec2:	e7fb      	b.n	13ebc <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00013ec4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   13ec4:	b088      	sub	sp, #32
   13ec6:	9004      	str	r0, [sp, #16]
   13ec8:	9105      	str	r1, [sp, #20]
   13eca:	9804      	ldr	r0, [sp, #16]
   13ecc:	2800      	cmp	r0, #0
   13ece:	4601      	mov	r1, r0
   13ed0:	bf18      	it	ne
   13ed2:	2101      	movne	r1, #1
   13ed4:	2800      	cmp	r0, #0
   13ed6:	9203      	str	r2, [sp, #12]
   13ed8:	d001      	beq.n	13ede <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   13eda:	e7ff      	b.n	13edc <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   13edc:	e009      	b.n	13ef2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   13ede:	f64d 60c1 	movw	r0, #57025	; 0xdec1
   13ee2:	f2c0 0001 	movt	r0, #1
   13ee6:	212b      	movs	r1, #43	; 0x2b
   13ee8:	9a03      	ldr	r2, [sp, #12]
   13eea:	f001 f8f1 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13eee:	defe      	udf	#254	; 0xfe
   13ef0:	defe      	udf	#254	; 0xfe
   13ef2:	9804      	ldr	r0, [sp, #16]
   13ef4:	9905      	ldr	r1, [sp, #20]
   13ef6:	9006      	str	r0, [sp, #24]
   13ef8:	9107      	str	r1, [sp, #28]
   13efa:	9a04      	ldr	r2, [sp, #16]
   13efc:	2a00      	cmp	r2, #0
   13efe:	9002      	str	r0, [sp, #8]
   13f00:	9101      	str	r1, [sp, #4]
   13f02:	d004      	beq.n	13f0e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   13f04:	e7ff      	b.n	13f06 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   13f06:	9802      	ldr	r0, [sp, #8]
   13f08:	9901      	ldr	r1, [sp, #4]
   13f0a:	b008      	add	sp, #32
   13f0c:	4770      	bx	lr
   13f0e:	e7fa      	b.n	13f06 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00013f10 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   13f10:	b082      	sub	sp, #8
   13f12:	9001      	str	r0, [sp, #4]
   13f14:	6800      	ldr	r0, [r0, #0]
   13f16:	2800      	cmp	r0, #0
   13f18:	d104      	bne.n	13f24 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   13f1a:	e7ff      	b.n	13f1c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   13f1c:	2000      	movs	r0, #0
   13f1e:	f88d 0003 	strb.w	r0, [sp, #3]
   13f22:	e003      	b.n	13f2c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   13f24:	2001      	movs	r0, #1
   13f26:	f88d 0003 	strb.w	r0, [sp, #3]
   13f2a:	e7ff      	b.n	13f2c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   13f2c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   13f30:	b002      	add	sp, #8
   13f32:	4770      	bx	lr

00013f34 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   13f34:	b580      	push	{r7, lr}
   13f36:	b086      	sub	sp, #24
   13f38:	9000      	str	r0, [sp, #0]
   13f3a:	2000      	movs	r0, #0
   13f3c:	f88d 000f 	strb.w	r0, [sp, #15]
   13f40:	f88d 000e 	strb.w	r0, [sp, #14]
   13f44:	2001      	movs	r0, #1
   13f46:	f88d 000f 	strb.w	r0, [sp, #15]
   13f4a:	f88d 000e 	strb.w	r0, [sp, #14]
   13f4e:	9800      	ldr	r0, [sp, #0]
   13f50:	2800      	cmp	r0, #0
   13f52:	4601      	mov	r1, r0
   13f54:	bf18      	it	ne
   13f56:	2101      	movne	r1, #1
   13f58:	2800      	cmp	r0, #0
   13f5a:	d001      	beq.n	13f60 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   13f5c:	e7ff      	b.n	13f5e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   13f5e:	e004      	b.n	13f6a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   13f60:	2000      	movs	r0, #0
   13f62:	f88d 0004 	strb.w	r0, [sp, #4]
   13f66:	e019      	b.n	13f9c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   13f68:	defe      	udf	#254	; 0xfe
   13f6a:	2000      	movs	r0, #0
   13f6c:	f88d 000f 	strb.w	r0, [sp, #15]
   13f70:	9900      	ldr	r1, [sp, #0]
   13f72:	9105      	str	r1, [sp, #20]
   13f74:	f88d 000e 	strb.w	r0, [sp, #14]
   13f78:	9102      	str	r1, [sp, #8]
   13f7a:	9802      	ldr	r0, [sp, #8]
   13f7c:	f7f6 fa76 	bl	a46c <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   13f80:	f88d 1005 	strb.w	r1, [sp, #5]
   13f84:	f88d 0004 	strb.w	r0, [sp, #4]
   13f88:	e7ff      	b.n	13f8a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   13f8a:	e007      	b.n	13f9c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   13f8c:	9800      	ldr	r0, [sp, #0]
   13f8e:	2800      	cmp	r0, #0
   13f90:	d110      	bne.n	13fb4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   13f92:	e019      	b.n	13fc8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   13f94:	2000      	movs	r0, #0
   13f96:	f88d 000e 	strb.w	r0, [sp, #14]
   13f9a:	e7f7      	b.n	13f8c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   13f9c:	f89d 000e 	ldrb.w	r0, [sp, #14]
   13fa0:	07c0      	lsls	r0, r0, #31
   13fa2:	2800      	cmp	r0, #0
   13fa4:	d1f6      	bne.n	13f94 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   13fa6:	e7f1      	b.n	13f8c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   13fa8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13fac:	f89d 1005 	ldrb.w	r1, [sp, #5]
   13fb0:	b006      	add	sp, #24
   13fb2:	bd80      	pop	{r7, pc}
   13fb4:	f89d 000f 	ldrb.w	r0, [sp, #15]
   13fb8:	07c0      	lsls	r0, r0, #31
   13fba:	2800      	cmp	r0, #0
   13fbc:	d0f4      	beq.n	13fa8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   13fbe:	e7ff      	b.n	13fc0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   13fc0:	2000      	movs	r0, #0
   13fc2:	f88d 000f 	strb.w	r0, [sp, #15]
   13fc6:	e7ef      	b.n	13fa8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   13fc8:	e7ee      	b.n	13fa8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00013fca <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   13fca:	b580      	push	{r7, lr}
   13fcc:	b084      	sub	sp, #16
   13fce:	9002      	str	r0, [sp, #8]
   13fd0:	9103      	str	r1, [sp, #12]
   13fd2:	f64d 60ec 	movw	r0, #57068	; 0xdeec
   13fd6:	f2c0 0001 	movt	r0, #1
   13fda:	2202      	movs	r2, #2
   13fdc:	9001      	str	r0, [sp, #4]
   13fde:	4608      	mov	r0, r1
   13fe0:	9901      	ldr	r1, [sp, #4]
   13fe2:	f001 fd95 	bl	15b10 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   13fe6:	9000      	str	r0, [sp, #0]
   13fe8:	e7ff      	b.n	13fea <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   13fea:	9800      	ldr	r0, [sp, #0]
   13fec:	f000 0001 	and.w	r0, r0, #1
   13ff0:	b004      	add	sp, #16
   13ff2:	bd80      	pop	{r7, pc}

00013ff4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b08a      	sub	sp, #40	; 0x28
   13ff8:	4684      	mov	ip, r0
   13ffa:	f88d 0017 	strb.w	r0, [sp, #23]
   13ffe:	9107      	str	r1, [sp, #28]
   14000:	9208      	str	r2, [sp, #32]
   14002:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14006:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   1400a:	f1be 0f00 	cmp.w	lr, #0
   1400e:	9304      	str	r3, [sp, #16]
   14010:	9203      	str	r2, [sp, #12]
   14012:	9102      	str	r1, [sp, #8]
   14014:	d00e      	beq.n	14034 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   14016:	e7ff      	b.n	14018 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   14018:	4668      	mov	r0, sp
   1401a:	9904      	ldr	r1, [sp, #16]
   1401c:	6001      	str	r1, [r0, #0]
   1401e:	f64d 63f0 	movw	r3, #57072	; 0xdef0
   14022:	f2c0 0301 	movt	r3, #1
   14026:	aa06      	add	r2, sp, #24
   14028:	9802      	ldr	r0, [sp, #8]
   1402a:	9903      	ldr	r1, [sp, #12]
   1402c:	f001 f822 	bl	15074 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   14030:	defe      	udf	#254	; 0xfe
   14032:	defe      	udf	#254	; 0xfe
   14034:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14038:	07c0      	lsls	r0, r0, #31
   1403a:	2800      	cmp	r0, #0
   1403c:	d102      	bne.n	14044 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   1403e:	e7ff      	b.n	14040 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   14040:	b00a      	add	sp, #40	; 0x28
   14042:	bd80      	pop	{r7, pc}
   14044:	e7fc      	b.n	14040 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00014046 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   14046:	b580      	push	{r7, lr}
   14048:	b088      	sub	sp, #32
   1404a:	9001      	str	r0, [sp, #4]
   1404c:	2000      	movs	r0, #0
   1404e:	f88d 0013 	strb.w	r0, [sp, #19]
   14052:	f88d 0011 	strb.w	r0, [sp, #17]
   14056:	f88d 0012 	strb.w	r0, [sp, #18]
   1405a:	2001      	movs	r0, #1
   1405c:	f88d 0012 	strb.w	r0, [sp, #18]
   14060:	f88d 0013 	strb.w	r0, [sp, #19]
   14064:	f88d 0011 	strb.w	r0, [sp, #17]
   14068:	9801      	ldr	r0, [sp, #4]
   1406a:	1e41      	subs	r1, r0, #1
   1406c:	bf18      	it	ne
   1406e:	2101      	movne	r1, #1
   14070:	2801      	cmp	r0, #1
   14072:	d00d      	beq.n	14090 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   14074:	e7ff      	b.n	14076 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   14076:	2000      	movs	r0, #0
   14078:	f88d 0013 	strb.w	r0, [sp, #19]
   1407c:	9901      	ldr	r1, [sp, #4]
   1407e:	9107      	str	r1, [sp, #28]
   14080:	f88d 0011 	strb.w	r0, [sp, #17]
   14084:	9103      	str	r1, [sp, #12]
   14086:	9803      	ldr	r0, [sp, #12]
   14088:	f7f5 fbb0 	bl	97ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   1408c:	e006      	b.n	1409c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   1408e:	defe      	udf	#254	; 0xfe
   14090:	2000      	movs	r0, #0
   14092:	f88d 0012 	strb.w	r0, [sp, #18]
   14096:	f88d 000b 	strb.w	r0, [sp, #11]
   1409a:	e003      	b.n	140a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1409c:	2001      	movs	r0, #1
   1409e:	f88d 000b 	strb.w	r0, [sp, #11]
   140a2:	e7ff      	b.n	140a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   140a4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   140a8:	07c0      	lsls	r0, r0, #31
   140aa:	2800      	cmp	r0, #0
   140ac:	d104      	bne.n	140b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   140ae:	e7ff      	b.n	140b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   140b0:	9801      	ldr	r0, [sp, #4]
   140b2:	2801      	cmp	r0, #1
   140b4:	d008      	beq.n	140c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   140b6:	e011      	b.n	140dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   140b8:	2000      	movs	r0, #0
   140ba:	f88d 0011 	strb.w	r0, [sp, #17]
   140be:	e7f7      	b.n	140b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   140c0:	f89d 000b 	ldrb.w	r0, [sp, #11]
   140c4:	b008      	add	sp, #32
   140c6:	bd80      	pop	{r7, pc}
   140c8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   140cc:	07c0      	lsls	r0, r0, #31
   140ce:	2800      	cmp	r0, #0
   140d0:	d0f6      	beq.n	140c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   140d2:	e7ff      	b.n	140d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   140d4:	2000      	movs	r0, #0
   140d6:	f88d 0012 	strb.w	r0, [sp, #18]
   140da:	e7f1      	b.n	140c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   140dc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   140e0:	07c0      	lsls	r0, r0, #31
   140e2:	2800      	cmp	r0, #0
   140e4:	d0ec      	beq.n	140c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   140e6:	e7ff      	b.n	140e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   140e8:	2000      	movs	r0, #0
   140ea:	f88d 0013 	strb.w	r0, [sp, #19]
   140ee:	e7e7      	b.n	140c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

000140f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   140f0:	b580      	push	{r7, lr}
   140f2:	b088      	sub	sp, #32
   140f4:	9001      	str	r0, [sp, #4]
   140f6:	2000      	movs	r0, #0
   140f8:	f88d 0013 	strb.w	r0, [sp, #19]
   140fc:	f88d 0011 	strb.w	r0, [sp, #17]
   14100:	f88d 0012 	strb.w	r0, [sp, #18]
   14104:	2001      	movs	r0, #1
   14106:	f88d 0012 	strb.w	r0, [sp, #18]
   1410a:	f88d 0013 	strb.w	r0, [sp, #19]
   1410e:	f88d 0011 	strb.w	r0, [sp, #17]
   14112:	9801      	ldr	r0, [sp, #4]
   14114:	1e41      	subs	r1, r0, #1
   14116:	bf18      	it	ne
   14118:	2101      	movne	r1, #1
   1411a:	2801      	cmp	r0, #1
   1411c:	d00d      	beq.n	1413a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   1411e:	e7ff      	b.n	14120 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   14120:	2000      	movs	r0, #0
   14122:	f88d 0013 	strb.w	r0, [sp, #19]
   14126:	9901      	ldr	r1, [sp, #4]
   14128:	9107      	str	r1, [sp, #28]
   1412a:	f88d 0011 	strb.w	r0, [sp, #17]
   1412e:	9103      	str	r1, [sp, #12]
   14130:	9803      	ldr	r0, [sp, #12]
   14132:	f7f5 fb51 	bl	97d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   14136:	e006      	b.n	14146 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   14138:	defe      	udf	#254	; 0xfe
   1413a:	2000      	movs	r0, #0
   1413c:	f88d 0012 	strb.w	r0, [sp, #18]
   14140:	f88d 000b 	strb.w	r0, [sp, #11]
   14144:	e003      	b.n	1414e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14146:	2001      	movs	r0, #1
   14148:	f88d 000b 	strb.w	r0, [sp, #11]
   1414c:	e7ff      	b.n	1414e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1414e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14152:	07c0      	lsls	r0, r0, #31
   14154:	2800      	cmp	r0, #0
   14156:	d104      	bne.n	14162 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   14158:	e7ff      	b.n	1415a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1415a:	9801      	ldr	r0, [sp, #4]
   1415c:	2801      	cmp	r0, #1
   1415e:	d008      	beq.n	14172 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   14160:	e011      	b.n	14186 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   14162:	2000      	movs	r0, #0
   14164:	f88d 0011 	strb.w	r0, [sp, #17]
   14168:	e7f7      	b.n	1415a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1416a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1416e:	b008      	add	sp, #32
   14170:	bd80      	pop	{r7, pc}
   14172:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14176:	07c0      	lsls	r0, r0, #31
   14178:	2800      	cmp	r0, #0
   1417a:	d0f6      	beq.n	1416a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1417c:	e7ff      	b.n	1417e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   1417e:	2000      	movs	r0, #0
   14180:	f88d 0012 	strb.w	r0, [sp, #18]
   14184:	e7f1      	b.n	1416a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14186:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1418a:	07c0      	lsls	r0, r0, #31
   1418c:	2800      	cmp	r0, #0
   1418e:	d0ec      	beq.n	1416a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14190:	e7ff      	b.n	14192 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   14192:	2000      	movs	r0, #0
   14194:	f88d 0013 	strb.w	r0, [sp, #19]
   14198:	e7e7      	b.n	1416a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

0001419a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   1419a:	b580      	push	{r7, lr}
   1419c:	b088      	sub	sp, #32
   1419e:	9001      	str	r0, [sp, #4]
   141a0:	2000      	movs	r0, #0
   141a2:	f88d 0013 	strb.w	r0, [sp, #19]
   141a6:	f88d 0011 	strb.w	r0, [sp, #17]
   141aa:	f88d 0012 	strb.w	r0, [sp, #18]
   141ae:	2001      	movs	r0, #1
   141b0:	f88d 0012 	strb.w	r0, [sp, #18]
   141b4:	f88d 0013 	strb.w	r0, [sp, #19]
   141b8:	f88d 0011 	strb.w	r0, [sp, #17]
   141bc:	9801      	ldr	r0, [sp, #4]
   141be:	1e41      	subs	r1, r0, #1
   141c0:	bf18      	it	ne
   141c2:	2101      	movne	r1, #1
   141c4:	2801      	cmp	r0, #1
   141c6:	d00d      	beq.n	141e4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   141c8:	e7ff      	b.n	141ca <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   141ca:	2000      	movs	r0, #0
   141cc:	f88d 0013 	strb.w	r0, [sp, #19]
   141d0:	9901      	ldr	r1, [sp, #4]
   141d2:	9107      	str	r1, [sp, #28]
   141d4:	f88d 0011 	strb.w	r0, [sp, #17]
   141d8:	9103      	str	r1, [sp, #12]
   141da:	9803      	ldr	r0, [sp, #12]
   141dc:	f7f5 fb01 	bl	97e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   141e0:	e006      	b.n	141f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   141e2:	defe      	udf	#254	; 0xfe
   141e4:	2000      	movs	r0, #0
   141e6:	f88d 0012 	strb.w	r0, [sp, #18]
   141ea:	f88d 000b 	strb.w	r0, [sp, #11]
   141ee:	e003      	b.n	141f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   141f0:	2001      	movs	r0, #1
   141f2:	f88d 000b 	strb.w	r0, [sp, #11]
   141f6:	e7ff      	b.n	141f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   141f8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   141fc:	07c0      	lsls	r0, r0, #31
   141fe:	2800      	cmp	r0, #0
   14200:	d104      	bne.n	1420c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   14202:	e7ff      	b.n	14204 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14204:	9801      	ldr	r0, [sp, #4]
   14206:	2801      	cmp	r0, #1
   14208:	d008      	beq.n	1421c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   1420a:	e011      	b.n	14230 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   1420c:	2000      	movs	r0, #0
   1420e:	f88d 0011 	strb.w	r0, [sp, #17]
   14212:	e7f7      	b.n	14204 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14214:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14218:	b008      	add	sp, #32
   1421a:	bd80      	pop	{r7, pc}
   1421c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14220:	07c0      	lsls	r0, r0, #31
   14222:	2800      	cmp	r0, #0
   14224:	d0f6      	beq.n	14214 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14226:	e7ff      	b.n	14228 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   14228:	2000      	movs	r0, #0
   1422a:	f88d 0012 	strb.w	r0, [sp, #18]
   1422e:	e7f1      	b.n	14214 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14230:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14234:	07c0      	lsls	r0, r0, #31
   14236:	2800      	cmp	r0, #0
   14238:	d0ec      	beq.n	14214 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1423a:	e7ff      	b.n	1423c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   1423c:	2000      	movs	r0, #0
   1423e:	f88d 0013 	strb.w	r0, [sp, #19]
   14242:	e7e7      	b.n	14214 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00014244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   14244:	b082      	sub	sp, #8
   14246:	2001      	movs	r0, #1
   14248:	f88d 0003 	strb.w	r0, [sp, #3]
   1424c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14250:	b002      	add	sp, #8
   14252:	4770      	bx	lr

00014254 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
        self.style.stroke_width = width;

        self
    }

    fn fill(mut self, color: Option<C>) -> Self {
   14254:	b5b0      	push	{r4, r5, r7, lr}
   14256:	b081      	sub	sp, #4
   14258:	469c      	mov	ip, r3
   1425a:	4696      	mov	lr, r2
   1425c:	f8ad 2000 	strh.w	r2, [sp]
   14260:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   14264:	820a      	strh	r2, [r1, #16]
   14266:	824b      	strh	r3, [r1, #18]

        self
   14268:	c91c      	ldmia	r1!, {r2, r3, r4}
   1426a:	c01c      	stmia	r0!, {r2, r3, r4}
   1426c:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   14270:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   14274:	b001      	add	sp, #4
   14276:	bdb0      	pop	{r4, r5, r7, pc}

00014278 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   14278:	b510      	push	{r4, lr}
   1427a:	b08c      	sub	sp, #48	; 0x30
   1427c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   14280:	9108      	str	r1, [sp, #32]
   14282:	9209      	str	r2, [sp, #36]	; 0x24
   14284:	930a      	str	r3, [sp, #40]	; 0x28
   14286:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1428a:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   1428e:	9004      	str	r0, [sp, #16]
   14290:	4670      	mov	r0, lr
   14292:	9303      	str	r3, [sp, #12]
   14294:	9202      	str	r2, [sp, #8]
   14296:	9101      	str	r1, [sp, #4]
   14298:	f8cd c000 	str.w	ip, [sp]
   1429c:	f000 f818 	bl	142d0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   142a0:	e7ff      	b.n	142a2 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   142a2:	9801      	ldr	r0, [sp, #4]
   142a4:	9904      	ldr	r1, [sp, #16]
   142a6:	6008      	str	r0, [r1, #0]
   142a8:	9a02      	ldr	r2, [sp, #8]
   142aa:	604a      	str	r2, [r1, #4]
   142ac:	9b03      	ldr	r3, [sp, #12]
   142ae:	608b      	str	r3, [r1, #8]
   142b0:	f8dd c000 	ldr.w	ip, [sp]
   142b4:	f8c1 c00c 	str.w	ip, [r1, #12]
   142b8:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   142bc:	f8a1 e018 	strh.w	lr, [r1, #24]
   142c0:	f8dd e014 	ldr.w	lr, [sp, #20]
   142c4:	9c06      	ldr	r4, [sp, #24]
   142c6:	614c      	str	r4, [r1, #20]
   142c8:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   142cc:	b00c      	add	sp, #48	; 0x30
   142ce:	bd10      	pop	{r4, pc}

000142d0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   142d0:	b082      	sub	sp, #8
   142d2:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   142d4:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   142d8:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   142dc:	f8bd 1000 	ldrh.w	r1, [sp]
   142e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   142e4:	8001      	strh	r1, [r0, #0]
   142e6:	8042      	strh	r2, [r0, #2]
   142e8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   142ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   142f0:	8081      	strh	r1, [r0, #4]
   142f2:	80c2      	strh	r2, [r0, #6]
   142f4:	2101      	movs	r1, #1
   142f6:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   142f8:	b002      	add	sp, #8
   142fa:	4770      	bx	lr

000142fc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   142fc:	b084      	sub	sp, #16
   142fe:	460a      	mov	r2, r1
   14300:	4603      	mov	r3, r0
   14302:	9103      	str	r1, [sp, #12]
   14304:	9002      	str	r0, [sp, #8]
   14306:	b004      	add	sp, #16
   14308:	4770      	bx	lr

0001430a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   1430a:	b510      	push	{r4, lr}
   1430c:	b088      	sub	sp, #32
   1430e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   14312:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   14316:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14318:	9102      	str	r1, [sp, #8]
   1431a:	9203      	str	r2, [sp, #12]
   1431c:	9304      	str	r3, [sp, #16]
   1431e:	9405      	str	r4, [sp, #20]
   14320:	f8cd e018 	str.w	lr, [sp, #24]
   14324:	f8cd c01c 	str.w	ip, [sp, #28]
   14328:	f8cd e000 	str.w	lr, [sp]
   1432c:	f8cd c004 	str.w	ip, [sp, #4]
   14330:	6001      	str	r1, [r0, #0]
   14332:	6042      	str	r2, [r0, #4]
   14334:	9900      	ldr	r1, [sp, #0]
   14336:	9a01      	ldr	r2, [sp, #4]
   14338:	6081      	str	r1, [r0, #8]
   1433a:	60c2      	str	r2, [r0, #12]
   1433c:	6103      	str	r3, [r0, #16]
   1433e:	6144      	str	r4, [r0, #20]
   14340:	b008      	add	sp, #32
   14342:	bd10      	pop	{r4, pc}

00014344 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   14344:	b580      	push	{r7, lr}
   14346:	b086      	sub	sp, #24
   14348:	f8dd c020 	ldr.w	ip, [sp, #32]
   1434c:	9102      	str	r1, [sp, #8]
   1434e:	9203      	str	r2, [sp, #12]
   14350:	9304      	str	r3, [sp, #16]
   14352:	f8cd c014 	str.w	ip, [sp, #20]
   14356:	f04f 0e00 	mov.w	lr, #0
   1435a:	f8cd e004 	str.w	lr, [sp, #4]
   1435e:	f8cd e000 	str.w	lr, [sp]
   14362:	f8cd e000 	str.w	lr, [sp]
   14366:	6001      	str	r1, [r0, #0]
   14368:	6042      	str	r2, [r0, #4]
   1436a:	9900      	ldr	r1, [sp, #0]
   1436c:	9a01      	ldr	r2, [sp, #4]
   1436e:	6081      	str	r1, [r0, #8]
   14370:	60c2      	str	r2, [r0, #12]
   14372:	6103      	str	r3, [r0, #16]
   14374:	f8c0 c014 	str.w	ip, [r0, #20]
   14378:	b006      	add	sp, #24
   1437a:	bd80      	pop	{r7, pc}

0001437c <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   1437c:	b580      	push	{r7, lr}
   1437e:	b086      	sub	sp, #24
   14380:	460a      	mov	r2, r1
   14382:	4603      	mov	r3, r0
   14384:	f88d 0014 	strb.w	r0, [sp, #20]
   14388:	f88d 1015 	strb.w	r1, [sp, #21]
   1438c:	9203      	str	r2, [sp, #12]
   1438e:	9302      	str	r3, [sp, #8]
   14390:	f000 f865 	bl	1445e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   14394:	9001      	str	r0, [sp, #4]
   14396:	9100      	str	r1, [sp, #0]
   14398:	e7ff      	b.n	1439a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   1439a:	9801      	ldr	r0, [sp, #4]
   1439c:	f88d 0016 	strb.w	r0, [sp, #22]
   143a0:	9900      	ldr	r1, [sp, #0]
   143a2:	f001 0201 	and.w	r2, r1, #1
   143a6:	f88d 2017 	strb.w	r2, [sp, #23]
   143aa:	2a00      	cmp	r2, #0
   143ac:	d107      	bne.n	143be <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   143ae:	e7ff      	b.n	143b0 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   143b0:	9801      	ldr	r0, [sp, #4]
   143b2:	f88d 0011 	strb.w	r0, [sp, #17]
   143b6:	2101      	movs	r1, #1
   143b8:	f88d 1010 	strb.w	r1, [sp, #16]
   143bc:	e003      	b.n	143c6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   143be:	2000      	movs	r0, #0
   143c0:	f88d 0010 	strb.w	r0, [sp, #16]
   143c4:	e7ff      	b.n	143c6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   143c6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   143ca:	f89d 1011 	ldrb.w	r1, [sp, #17]
   143ce:	b006      	add	sp, #24
   143d0:	bd80      	pop	{r7, pc}

000143d2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   143d2:	b082      	sub	sp, #8
   143d4:	460a      	mov	r2, r1
   143d6:	4603      	mov	r3, r0
   143d8:	f88d 0005 	strb.w	r0, [sp, #5]
   143dc:	f88d 1006 	strb.w	r1, [sp, #6]
   143e0:	4408      	add	r0, r1
   143e2:	f88d 0007 	strb.w	r0, [sp, #7]
   143e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   143ea:	9000      	str	r0, [sp, #0]
   143ec:	e7ff      	b.n	143ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   143ee:	9800      	ldr	r0, [sp, #0]
   143f0:	b002      	add	sp, #8
   143f2:	4770      	bx	lr

000143f4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   143f4:	b084      	sub	sp, #16
   143f6:	4602      	mov	r2, r0
   143f8:	f88d 0007 	strb.w	r0, [sp, #7]
   143fc:	9102      	str	r1, [sp, #8]
   143fe:	f001 0107 	and.w	r1, r1, #7
   14402:	4088      	lsls	r0, r1
   14404:	f88d 000f 	strb.w	r0, [sp, #15]
   14408:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1440c:	9000      	str	r0, [sp, #0]
   1440e:	e7ff      	b.n	14410 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   14410:	9800      	ldr	r0, [sp, #0]
   14412:	b004      	add	sp, #16
   14414:	4770      	bx	lr

00014416 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   14416:	b084      	sub	sp, #16
   14418:	b2c2      	uxtb	r2, r0
   1441a:	4603      	mov	r3, r0
   1441c:	f88d 0007 	strb.w	r0, [sp, #7]
   14420:	9102      	str	r1, [sp, #8]
   14422:	f001 0007 	and.w	r0, r1, #7
   14426:	fa22 f000 	lsr.w	r0, r2, r0
   1442a:	f88d 000f 	strb.w	r0, [sp, #15]
   1442e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14432:	9000      	str	r0, [sp, #0]
   14434:	e7ff      	b.n	14436 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   14436:	9800      	ldr	r0, [sp, #0]
   14438:	b004      	add	sp, #16
   1443a:	4770      	bx	lr

0001443c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   1443c:	b082      	sub	sp, #8
   1443e:	460a      	mov	r2, r1
   14440:	4603      	mov	r3, r0
   14442:	f88d 0005 	strb.w	r0, [sp, #5]
   14446:	f88d 1006 	strb.w	r1, [sp, #6]
   1444a:	1a40      	subs	r0, r0, r1
   1444c:	f88d 0007 	strb.w	r0, [sp, #7]
   14450:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14454:	9000      	str	r0, [sp, #0]
   14456:	e7ff      	b.n	14458 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   14458:	9800      	ldr	r0, [sp, #0]
   1445a:	b002      	add	sp, #8
   1445c:	4770      	bx	lr

0001445e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   1445e:	b084      	sub	sp, #16
   14460:	b2c2      	uxtb	r2, r0
   14462:	460b      	mov	r3, r1
   14464:	4684      	mov	ip, r0
   14466:	f88d 000a 	strb.w	r0, [sp, #10]
   1446a:	f88d 100b 	strb.w	r1, [sp, #11]
   1446e:	fa52 f081 	uxtab	r0, r2, r1
   14472:	b2c1      	uxtb	r1, r0
   14474:	1a09      	subs	r1, r1, r0
   14476:	bf18      	it	ne
   14478:	2101      	movne	r1, #1
   1447a:	f88d 000c 	strb.w	r0, [sp, #12]
   1447e:	f88d 100d 	strb.w	r1, [sp, #13]
   14482:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14486:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1448a:	9001      	str	r0, [sp, #4]
   1448c:	9100      	str	r1, [sp, #0]
   1448e:	e7ff      	b.n	14490 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   14490:	9801      	ldr	r0, [sp, #4]
   14492:	f88d 000e 	strb.w	r0, [sp, #14]
   14496:	9900      	ldr	r1, [sp, #0]
   14498:	f001 0201 	and.w	r2, r1, #1
   1449c:	f88d 200f 	strb.w	r2, [sp, #15]
   144a0:	f88d 0008 	strb.w	r0, [sp, #8]
   144a4:	f88d 2009 	strb.w	r2, [sp, #9]
   144a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   144ac:	f89d 1009 	ldrb.w	r1, [sp, #9]
   144b0:	b004      	add	sp, #16
   144b2:	4770      	bx	lr

000144b4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   144b4:	b580      	push	{r7, lr}
   144b6:	b084      	sub	sp, #16
   144b8:	b2ca      	uxtb	r2, r1
   144ba:	b2c3      	uxtb	r3, r0
   144bc:	468c      	mov	ip, r1
   144be:	4686      	mov	lr, r0
   144c0:	f88d 000a 	strb.w	r0, [sp, #10]
   144c4:	f88d 100b 	strb.w	r1, [sp, #11]
   144c8:	1a98      	subs	r0, r3, r2
   144ca:	b2c1      	uxtb	r1, r0
   144cc:	1a09      	subs	r1, r1, r0
   144ce:	bf18      	it	ne
   144d0:	2101      	movne	r1, #1
   144d2:	f88d 000c 	strb.w	r0, [sp, #12]
   144d6:	f88d 100d 	strb.w	r1, [sp, #13]
   144da:	f89d 000c 	ldrb.w	r0, [sp, #12]
   144de:	f89d 100d 	ldrb.w	r1, [sp, #13]
   144e2:	9001      	str	r0, [sp, #4]
   144e4:	9100      	str	r1, [sp, #0]
   144e6:	e7ff      	b.n	144e8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   144e8:	9801      	ldr	r0, [sp, #4]
   144ea:	f88d 000e 	strb.w	r0, [sp, #14]
   144ee:	9900      	ldr	r1, [sp, #0]
   144f0:	f001 0201 	and.w	r2, r1, #1
   144f4:	f88d 200f 	strb.w	r2, [sp, #15]
   144f8:	f88d 0008 	strb.w	r0, [sp, #8]
   144fc:	f88d 2009 	strb.w	r2, [sp, #9]
   14500:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14504:	f89d 1009 	ldrb.w	r1, [sp, #9]
   14508:	b004      	add	sp, #16
   1450a:	bd80      	pop	{r7, pc}

0001450c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   1450c:	b083      	sub	sp, #12
   1450e:	460a      	mov	r2, r1
   14510:	4603      	mov	r3, r0
   14512:	f8ad 0006 	strh.w	r0, [sp, #6]
   14516:	f8ad 1008 	strh.w	r1, [sp, #8]
   1451a:	4408      	add	r0, r1
   1451c:	f8ad 000a 	strh.w	r0, [sp, #10]
   14520:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   14524:	9000      	str	r0, [sp, #0]
   14526:	e7ff      	b.n	14528 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   14528:	9800      	ldr	r0, [sp, #0]
   1452a:	b003      	add	sp, #12
   1452c:	4770      	bx	lr

0001452e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   1452e:	b083      	sub	sp, #12
   14530:	460a      	mov	r2, r1
   14532:	4603      	mov	r3, r0
   14534:	f8ad 0006 	strh.w	r0, [sp, #6]
   14538:	f8ad 1008 	strh.w	r1, [sp, #8]
   1453c:	1a40      	subs	r0, r0, r1
   1453e:	f8ad 000a 	strh.w	r0, [sp, #10]
   14542:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   14546:	9000      	str	r0, [sp, #0]
   14548:	e7ff      	b.n	1454a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   1454a:	9800      	ldr	r0, [sp, #0]
   1454c:	b003      	add	sp, #12
   1454e:	4770      	bx	lr

00014550 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   14550:	b5b0      	push	{r4, r5, r7, lr}
   14552:	b088      	sub	sp, #32
   14554:	469c      	mov	ip, r3
   14556:	4696      	mov	lr, r2
   14558:	460c      	mov	r4, r1
   1455a:	4605      	mov	r5, r0
   1455c:	9103      	str	r1, [sp, #12]
   1455e:	9002      	str	r0, [sp, #8]
   14560:	9305      	str	r3, [sp, #20]
   14562:	9204      	str	r2, [sp, #16]
   14564:	1a80      	subs	r0, r0, r2
   14566:	eb61 0103 	sbc.w	r1, r1, r3
   1456a:	9107      	str	r1, [sp, #28]
   1456c:	9006      	str	r0, [sp, #24]
   1456e:	9806      	ldr	r0, [sp, #24]
   14570:	9907      	ldr	r1, [sp, #28]
   14572:	9001      	str	r0, [sp, #4]
   14574:	9100      	str	r1, [sp, #0]
   14576:	e7ff      	b.n	14578 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   14578:	9801      	ldr	r0, [sp, #4]
   1457a:	9900      	ldr	r1, [sp, #0]
   1457c:	b008      	add	sp, #32
   1457e:	bdb0      	pop	{r4, r5, r7, pc}

00014580 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   14580:	b082      	sub	sp, #8
   14582:	9000      	str	r0, [sp, #0]
   14584:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   14586:	6800      	ldr	r0, [r0, #0]
   14588:	6809      	ldr	r1, [r1, #0]
   1458a:	2200      	movs	r2, #0
   1458c:	4288      	cmp	r0, r1
   1458e:	bf98      	it	ls
   14590:	2201      	movls	r2, #1
    }
   14592:	4610      	mov	r0, r2
   14594:	b002      	add	sp, #8
   14596:	4770      	bx	lr

00014598 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   14598:	b081      	sub	sp, #4
   1459a:	4601      	mov	r1, r0
   1459c:	f88d 0003 	strb.w	r0, [sp, #3]
   145a0:	b2c0      	uxtb	r0, r0
   145a2:	b001      	add	sp, #4
   145a4:	4770      	bx	lr

000145a6 <_ZN4core3mem4swap17h206518364108b51fE>:
   145a6:	b580      	push	{r7, lr}
   145a8:	b082      	sub	sp, #8
   145aa:	9000      	str	r0, [sp, #0]
   145ac:	9101      	str	r1, [sp, #4]
   145ae:	f000 fba5 	bl	14cfc <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   145b2:	e7ff      	b.n	145b4 <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   145b4:	b002      	add	sp, #8
   145b6:	bd80      	pop	{r7, pc}

000145b8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   145b8:	b580      	push	{r7, lr}
   145ba:	b088      	sub	sp, #32
   145bc:	9004      	str	r0, [sp, #16]
   145be:	9105      	str	r1, [sp, #20]
   145c0:	9206      	str	r2, [sp, #24]
   145c2:	9307      	str	r3, [sp, #28]
   145c4:	9003      	str	r0, [sp, #12]
   145c6:	4610      	mov	r0, r2
   145c8:	9102      	str	r1, [sp, #8]
   145ca:	4619      	mov	r1, r3
   145cc:	9a03      	ldr	r2, [sp, #12]
   145ce:	9b02      	ldr	r3, [sp, #8]
   145d0:	f7f4 fb10 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   145d4:	9001      	str	r0, [sp, #4]
   145d6:	9100      	str	r1, [sp, #0]
   145d8:	e7ff      	b.n	145da <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   145da:	9801      	ldr	r0, [sp, #4]
   145dc:	9900      	ldr	r1, [sp, #0]
   145de:	b008      	add	sp, #32
   145e0:	bd80      	pop	{r7, pc}

000145e2 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   145e2:	b082      	sub	sp, #8
   145e4:	9000      	str	r0, [sp, #0]
   145e6:	9101      	str	r1, [sp, #4]
   145e8:	7800      	ldrb	r0, [r0, #0]
   145ea:	7809      	ldrb	r1, [r1, #0]
   145ec:	2200      	movs	r2, #0
   145ee:	4288      	cmp	r0, r1
   145f0:	bf38      	it	cc
   145f2:	2201      	movcc	r2, #1
   145f4:	4610      	mov	r0, r2
   145f6:	b002      	add	sp, #8
   145f8:	4770      	bx	lr

000145fa <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   145fa:	b580      	push	{r7, lr}
   145fc:	b088      	sub	sp, #32
   145fe:	9005      	str	r0, [sp, #20]
   14600:	9106      	str	r1, [sp, #24]
   14602:	9002      	str	r0, [sp, #8]
   14604:	4608      	mov	r0, r1
   14606:	f000 fc54 	bl	14eb2 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   1460a:	f88d 1011 	strb.w	r1, [sp, #17]
   1460e:	f88d 0010 	strb.w	r0, [sp, #16]
   14612:	e7ff      	b.n	14614 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   14614:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14618:	07c1      	lsls	r1, r0, #31
   1461a:	2900      	cmp	r1, #0
   1461c:	d005      	beq.n	1462a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   1461e:	e7ff      	b.n	14620 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   14620:	2000      	movs	r0, #0
   14622:	f88d 000c 	strb.w	r0, [sp, #12]
   14626:	e011      	b.n	1464c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   14628:	defe      	udf	#254	; 0xfe
   1462a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1462e:	f88d 001f 	strb.w	r0, [sp, #31]
   14632:	9902      	ldr	r1, [sp, #8]
   14634:	780a      	ldrb	r2, [r1, #0]
   14636:	9001      	str	r0, [sp, #4]
   14638:	4610      	mov	r0, r2
   1463a:	9901      	ldr	r1, [sp, #4]
   1463c:	f7ff fe9e 	bl	1437c <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   14640:	f88d 100d 	strb.w	r1, [sp, #13]
   14644:	f88d 000c 	strb.w	r0, [sp, #12]
   14648:	e7ff      	b.n	1464a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   1464a:	e7ff      	b.n	1464c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   1464c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14650:	f89d 100d 	ldrb.w	r1, [sp, #13]
   14654:	b008      	add	sp, #32
   14656:	bd80      	pop	{r7, pc}

00014658 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14658:	b580      	push	{r7, lr}
   1465a:	b088      	sub	sp, #32
   1465c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   1465e:	1d01      	adds	r1, r0, #4
   14660:	9106      	str	r1, [sp, #24]
   14662:	9107      	str	r1, [sp, #28]
   14664:	9004      	str	r0, [sp, #16]
   14666:	9103      	str	r1, [sp, #12]
   14668:	e7ff      	b.n	1466a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   1466a:	9804      	ldr	r0, [sp, #16]
   1466c:	6801      	ldr	r1, [r0, #0]
   1466e:	9803      	ldr	r0, [sp, #12]
   14670:	f7f4 fb70 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14674:	9002      	str	r0, [sp, #8]
   14676:	9101      	str	r1, [sp, #4]
   14678:	e7ff      	b.n	1467a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   1467a:	9802      	ldr	r0, [sp, #8]
   1467c:	9901      	ldr	r1, [sp, #4]
   1467e:	b008      	add	sp, #32
   14680:	bd80      	pop	{r7, pc}

00014682 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14682:	b580      	push	{r7, lr}
   14684:	b088      	sub	sp, #32
   14686:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14688:	1d01      	adds	r1, r0, #4
   1468a:	9106      	str	r1, [sp, #24]
   1468c:	9107      	str	r1, [sp, #28]
   1468e:	9004      	str	r0, [sp, #16]
   14690:	9103      	str	r1, [sp, #12]
   14692:	e7ff      	b.n	14694 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   14694:	9804      	ldr	r0, [sp, #16]
   14696:	6801      	ldr	r1, [r0, #0]
   14698:	9803      	ldr	r0, [sp, #12]
   1469a:	f7f4 fb5b 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   1469e:	9002      	str	r0, [sp, #8]
   146a0:	9101      	str	r1, [sp, #4]
   146a2:	e7ff      	b.n	146a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   146a4:	9802      	ldr	r0, [sp, #8]
   146a6:	9901      	ldr	r1, [sp, #4]
   146a8:	b008      	add	sp, #32
   146aa:	bd80      	pop	{r7, pc}

000146ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   146ac:	b580      	push	{r7, lr}
   146ae:	b08a      	sub	sp, #40	; 0x28
   146b0:	460a      	mov	r2, r1
   146b2:	9006      	str	r0, [sp, #24]
   146b4:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   146b8:	1d01      	adds	r1, r0, #4
   146ba:	9108      	str	r1, [sp, #32]
   146bc:	9109      	str	r1, [sp, #36]	; 0x24
   146be:	9005      	str	r0, [sp, #20]
   146c0:	9204      	str	r2, [sp, #16]
   146c2:	9103      	str	r1, [sp, #12]
   146c4:	e7ff      	b.n	146c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   146c6:	9805      	ldr	r0, [sp, #20]
   146c8:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   146ca:	9803      	ldr	r0, [sp, #12]
   146cc:	f7fc ff78 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   146d0:	9002      	str	r0, [sp, #8]
   146d2:	e7ff      	b.n	146d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   146d4:	9802      	ldr	r0, [sp, #8]
   146d6:	9904      	ldr	r1, [sp, #16]
   146d8:	f000 f994 	bl	14a04 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   146dc:	e7ff      	b.n	146de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   146de:	9805      	ldr	r0, [sp, #20]
   146e0:	6801      	ldr	r1, [r0, #0]
   146e2:	1c4a      	adds	r2, r1, #1
   146e4:	4613      	mov	r3, r2
   146e6:	428a      	cmp	r2, r1
   146e8:	9301      	str	r3, [sp, #4]
   146ea:	d305      	bcc.n	146f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   146ec:	e7ff      	b.n	146ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   146ee:	9801      	ldr	r0, [sp, #4]
   146f0:	9905      	ldr	r1, [sp, #20]
   146f2:	6008      	str	r0, [r1, #0]
    }
   146f4:	b00a      	add	sp, #40	; 0x28
   146f6:	bd80      	pop	{r7, pc}
        self.len += 1;
   146f8:	f64d 7070 	movw	r0, #57200	; 0xdf70
   146fc:	f2c0 0001 	movt	r0, #1
   14700:	f64d 7258 	movw	r2, #57176	; 0xdf58
   14704:	f2c0 0201 	movt	r2, #1
   14708:	211c      	movs	r1, #28
   1470a:	f000 fce1 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1470e:	defe      	udf	#254	; 0xfe

00014710 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14710:	b580      	push	{r7, lr}
   14712:	b08a      	sub	sp, #40	; 0x28
   14714:	460a      	mov	r2, r1
   14716:	9006      	str	r0, [sp, #24]
   14718:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   1471c:	1d01      	adds	r1, r0, #4
   1471e:	9108      	str	r1, [sp, #32]
   14720:	9109      	str	r1, [sp, #36]	; 0x24
   14722:	9005      	str	r0, [sp, #20]
   14724:	9204      	str	r2, [sp, #16]
   14726:	9103      	str	r1, [sp, #12]
   14728:	e7ff      	b.n	1472a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   1472a:	9805      	ldr	r0, [sp, #20]
   1472c:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1472e:	9803      	ldr	r0, [sp, #12]
   14730:	f7fc ff46 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14734:	9002      	str	r0, [sp, #8]
   14736:	e7ff      	b.n	14738 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   14738:	9802      	ldr	r0, [sp, #8]
   1473a:	9904      	ldr	r1, [sp, #16]
   1473c:	f000 f962 	bl	14a04 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14740:	e7ff      	b.n	14742 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   14742:	9805      	ldr	r0, [sp, #20]
   14744:	6801      	ldr	r1, [r0, #0]
   14746:	1c4a      	adds	r2, r1, #1
   14748:	4613      	mov	r3, r2
   1474a:	428a      	cmp	r2, r1
   1474c:	9301      	str	r3, [sp, #4]
   1474e:	d305      	bcc.n	1475c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   14750:	e7ff      	b.n	14752 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   14752:	9801      	ldr	r0, [sp, #4]
   14754:	9905      	ldr	r1, [sp, #20]
   14756:	6008      	str	r0, [r1, #0]
    }
   14758:	b00a      	add	sp, #40	; 0x28
   1475a:	bd80      	pop	{r7, pc}
        self.len += 1;
   1475c:	f64d 7070 	movw	r0, #57200	; 0xdf70
   14760:	f2c0 0001 	movt	r0, #1
   14764:	f64d 7258 	movw	r2, #57176	; 0xdf58
   14768:	f2c0 0201 	movt	r2, #1
   1476c:	211c      	movs	r1, #28
   1476e:	f000 fcaf 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14772:	defe      	udf	#254	; 0xfe

00014774 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14774:	b580      	push	{r7, lr}
   14776:	b094      	sub	sp, #80	; 0x50
   14778:	900e      	str	r0, [sp, #56]	; 0x38
   1477a:	910f      	str	r1, [sp, #60]	; 0x3c
   1477c:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   1477e:	6803      	ldr	r3, [r0, #0]
   14780:	9009      	str	r0, [sp, #36]	; 0x24
   14782:	4608      	mov	r0, r1
   14784:	9108      	str	r1, [sp, #32]
   14786:	4611      	mov	r1, r2
   14788:	9207      	str	r2, [sp, #28]
   1478a:	9306      	str	r3, [sp, #24]
   1478c:	f7fc ffa8 	bl	116e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14790:	9005      	str	r0, [sp, #20]
   14792:	e7ff      	b.n	14794 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   14794:	9806      	ldr	r0, [sp, #24]
   14796:	9905      	ldr	r1, [sp, #20]
   14798:	1842      	adds	r2, r0, r1
   1479a:	4613      	mov	r3, r2
   1479c:	4282      	cmp	r2, r0
   1479e:	9304      	str	r3, [sp, #16]
   147a0:	d33f      	bcc.n	14822 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   147a2:	e7ff      	b.n	147a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   147a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   147a6:	f000 f8b7 	bl	14918 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   147aa:	9003      	str	r0, [sp, #12]
   147ac:	e7ff      	b.n	147ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   147ae:	9804      	ldr	r0, [sp, #16]
   147b0:	9903      	ldr	r1, [sp, #12]
   147b2:	4288      	cmp	r0, r1
   147b4:	d807      	bhi.n	147c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   147b6:	e7ff      	b.n	147b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   147b8:	9808      	ldr	r0, [sp, #32]
   147ba:	9907      	ldr	r1, [sp, #28]
   147bc:	f7f4 fbe8 	bl	8f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   147c0:	9002      	str	r0, [sp, #8]
   147c2:	9101      	str	r1, [sp, #4]
   147c4:	e003      	b.n	147ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   147c6:	2001      	movs	r0, #1
            Err(())
   147c8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   147cc:	e025      	b.n	1481a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   147ce:	9802      	ldr	r0, [sp, #8]
   147d0:	900b      	str	r0, [sp, #44]	; 0x2c
   147d2:	9901      	ldr	r1, [sp, #4]
   147d4:	910c      	str	r1, [sp, #48]	; 0x30
   147d6:	e7ff      	b.n	147d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   147d8:	a80b      	add	r0, sp, #44	; 0x2c
   147da:	f7fc fc7c 	bl	110d6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   147de:	900d      	str	r0, [sp, #52]	; 0x34
   147e0:	e7ff      	b.n	147e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   147e2:	980d      	ldr	r0, [sp, #52]	; 0x34
   147e4:	2800      	cmp	r0, #0
   147e6:	4601      	mov	r1, r0
   147e8:	bf18      	it	ne
   147ea:	2101      	movne	r1, #1
   147ec:	2800      	cmp	r0, #0
   147ee:	d001      	beq.n	147f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   147f0:	e7ff      	b.n	147f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   147f2:	e004      	b.n	147fe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   147f4:	2000      	movs	r0, #0
            Ok(())
   147f6:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   147fa:	e00e      	b.n	1481a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   147fc:	defe      	udf	#254	; 0xfe
   147fe:	980d      	ldr	r0, [sp, #52]	; 0x34
   14800:	9011      	str	r0, [sp, #68]	; 0x44
   14802:	9012      	str	r0, [sp, #72]	; 0x48
   14804:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14806:	f000 f909 	bl	14a1c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   1480a:	9000      	str	r0, [sp, #0]
   1480c:	e7ff      	b.n	1480e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   1480e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14810:	9900      	ldr	r1, [sp, #0]
   14812:	f7ff ff7d 	bl	14710 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   14816:	e7ff      	b.n	14818 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   14818:	e7de      	b.n	147d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   1481a:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1481e:	b014      	add	sp, #80	; 0x50
   14820:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14822:	f64d 7070 	movw	r0, #57200	; 0xdf70
   14826:	f2c0 0001 	movt	r0, #1
   1482a:	f64d 728c 	movw	r2, #57228	; 0xdf8c
   1482e:	f2c0 0201 	movt	r2, #1
   14832:	211c      	movs	r1, #28
   14834:	f000 fc4c 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14838:	defe      	udf	#254	; 0xfe

0001483a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   1483a:	b580      	push	{r7, lr}
   1483c:	b088      	sub	sp, #32
   1483e:	460a      	mov	r2, r1
   14840:	9006      	str	r0, [sp, #24]
   14842:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   14846:	6801      	ldr	r1, [r0, #0]
   14848:	9004      	str	r0, [sp, #16]
   1484a:	9203      	str	r2, [sp, #12]
   1484c:	9102      	str	r1, [sp, #8]
   1484e:	f000 f859 	bl	14904 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   14852:	9001      	str	r0, [sp, #4]
   14854:	e7ff      	b.n	14856 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   14856:	9802      	ldr	r0, [sp, #8]
   14858:	9901      	ldr	r1, [sp, #4]
   1485a:	4288      	cmp	r0, r1
   1485c:	d307      	bcc.n	1486e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   1485e:	e7ff      	b.n	14860 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   14860:	9803      	ldr	r0, [sp, #12]
   14862:	f88d 0015 	strb.w	r0, [sp, #21]
   14866:	2101      	movs	r1, #1
   14868:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   1486c:	e008      	b.n	14880 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   1486e:	9804      	ldr	r0, [sp, #16]
   14870:	9903      	ldr	r1, [sp, #12]
   14872:	f7ff ff1b 	bl	146ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   14876:	e7ff      	b.n	14878 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   14878:	2000      	movs	r0, #0
            Ok(())
   1487a:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   1487e:	e7ff      	b.n	14880 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   14880:	f89d 0014 	ldrb.w	r0, [sp, #20]
   14884:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14888:	b008      	add	sp, #32
   1488a:	bd80      	pop	{r7, pc}

0001488c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   1488c:	b580      	push	{r7, lr}
   1488e:	b082      	sub	sp, #8
   14890:	9001      	str	r0, [sp, #4]
   14892:	2100      	movs	r1, #0
        self.truncate(0);
   14894:	f000 f880 	bl	14998 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   14898:	e7ff      	b.n	1489a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   1489a:	b002      	add	sp, #8
   1489c:	bd80      	pop	{r7, pc}

0001489e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   1489e:	b580      	push	{r7, lr}
   148a0:	b082      	sub	sp, #8
   148a2:	9001      	str	r0, [sp, #4]
   148a4:	2100      	movs	r1, #0
        self.truncate(0);
   148a6:	f000 f841 	bl	1492c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   148aa:	e7ff      	b.n	148ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   148ac:	b002      	add	sp, #8
   148ae:	bd80      	pop	{r7, pc}

000148b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   148b0:	b580      	push	{r7, lr}
   148b2:	b088      	sub	sp, #32
   148b4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   148b6:	1d01      	adds	r1, r0, #4
   148b8:	9106      	str	r1, [sp, #24]
   148ba:	9107      	str	r1, [sp, #28]
   148bc:	9004      	str	r0, [sp, #16]
   148be:	9103      	str	r1, [sp, #12]
   148c0:	e7ff      	b.n	148c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   148c2:	9804      	ldr	r0, [sp, #16]
   148c4:	6801      	ldr	r1, [r0, #0]
   148c6:	9803      	ldr	r0, [sp, #12]
   148c8:	f7fd fb1d 	bl	11f06 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   148cc:	9002      	str	r0, [sp, #8]
   148ce:	9101      	str	r1, [sp, #4]
   148d0:	e7ff      	b.n	148d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   148d2:	9802      	ldr	r0, [sp, #8]
   148d4:	9901      	ldr	r1, [sp, #4]
   148d6:	b008      	add	sp, #32
   148d8:	bd80      	pop	{r7, pc}

000148da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   148da:	b580      	push	{r7, lr}
   148dc:	b088      	sub	sp, #32
   148de:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   148e0:	1d01      	adds	r1, r0, #4
   148e2:	9106      	str	r1, [sp, #24]
   148e4:	9107      	str	r1, [sp, #28]
   148e6:	9004      	str	r0, [sp, #16]
   148e8:	9103      	str	r1, [sp, #12]
   148ea:	e7ff      	b.n	148ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   148ec:	9804      	ldr	r0, [sp, #16]
   148ee:	6801      	ldr	r1, [r0, #0]
   148f0:	9803      	ldr	r0, [sp, #12]
   148f2:	f7fd fb08 	bl	11f06 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   148f6:	9002      	str	r0, [sp, #8]
   148f8:	9101      	str	r1, [sp, #4]
   148fa:	e7ff      	b.n	148fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   148fc:	9802      	ldr	r0, [sp, #8]
   148fe:	9901      	ldr	r1, [sp, #4]
   14900:	b008      	add	sp, #32
   14902:	bd80      	pop	{r7, pc}

00014904 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   14904:	b580      	push	{r7, lr}
   14906:	b082      	sub	sp, #8
   14908:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1490a:	f000 f964 	bl	14bd6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   1490e:	9000      	str	r0, [sp, #0]
   14910:	e7ff      	b.n	14912 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   14912:	9800      	ldr	r0, [sp, #0]
   14914:	b002      	add	sp, #8
   14916:	bd80      	pop	{r7, pc}

00014918 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   14918:	b580      	push	{r7, lr}
   1491a:	b082      	sub	sp, #8
   1491c:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1491e:	f000 f8b2 	bl	14a86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   14922:	9000      	str	r0, [sp, #0]
   14924:	e7ff      	b.n	14926 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   14926:	9800      	ldr	r0, [sp, #0]
   14928:	b002      	add	sp, #8
   1492a:	bd80      	pop	{r7, pc}

0001492c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1492c:	b580      	push	{r7, lr}
   1492e:	b08a      	sub	sp, #40	; 0x28
   14930:	9007      	str	r0, [sp, #28]
   14932:	9108      	str	r1, [sp, #32]
   14934:	9106      	str	r1, [sp, #24]
   14936:	9005      	str	r0, [sp, #20]
   14938:	e7ff      	b.n	1493a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   1493a:	9805      	ldr	r0, [sp, #20]
   1493c:	6801      	ldr	r1, [r0, #0]
   1493e:	9a06      	ldr	r2, [sp, #24]
   14940:	428a      	cmp	r2, r1
   14942:	d302      	bcc.n	1494a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   14944:	e7ff      	b.n	14946 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   14946:	b00a      	add	sp, #40	; 0x28
   14948:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1494a:	9805      	ldr	r0, [sp, #20]
   1494c:	6801      	ldr	r1, [r0, #0]
   1494e:	1e4a      	subs	r2, r1, #1
   14950:	2901      	cmp	r1, #1
   14952:	9204      	str	r2, [sp, #16]
   14954:	d314      	bcc.n	14980 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   14956:	e7ff      	b.n	14958 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   14958:	9804      	ldr	r0, [sp, #16]
   1495a:	9905      	ldr	r1, [sp, #20]
   1495c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1495e:	680a      	ldr	r2, [r1, #0]
   14960:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14962:	4608      	mov	r0, r1
   14964:	9203      	str	r2, [sp, #12]
   14966:	f7ff fe8c 	bl	14682 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   1496a:	9002      	str	r0, [sp, #8]
   1496c:	9101      	str	r1, [sp, #4]
   1496e:	e7ff      	b.n	14970 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   14970:	9802      	ldr	r0, [sp, #8]
   14972:	9901      	ldr	r1, [sp, #4]
   14974:	9a03      	ldr	r2, [sp, #12]
   14976:	f7fc fea1 	bl	116bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   1497a:	e7ff      	b.n	1497c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   1497c:	e7ff      	b.n	1497e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   1497e:	e7dc      	b.n	1493a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   14980:	f64d 70b0 	movw	r0, #57264	; 0xdfb0
   14984:	f2c0 0001 	movt	r0, #1
   14988:	f64d 729c 	movw	r2, #57244	; 0xdf9c
   1498c:	f2c0 0201 	movt	r2, #1
   14990:	2121      	movs	r1, #33	; 0x21
   14992:	f000 fb9d 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14996:	defe      	udf	#254	; 0xfe

00014998 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14998:	b580      	push	{r7, lr}
   1499a:	b08a      	sub	sp, #40	; 0x28
   1499c:	9007      	str	r0, [sp, #28]
   1499e:	9108      	str	r1, [sp, #32]
   149a0:	9106      	str	r1, [sp, #24]
   149a2:	9005      	str	r0, [sp, #20]
   149a4:	e7ff      	b.n	149a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   149a6:	9805      	ldr	r0, [sp, #20]
   149a8:	6801      	ldr	r1, [r0, #0]
   149aa:	9a06      	ldr	r2, [sp, #24]
   149ac:	428a      	cmp	r2, r1
   149ae:	d302      	bcc.n	149b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   149b0:	e7ff      	b.n	149b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   149b2:	b00a      	add	sp, #40	; 0x28
   149b4:	bd80      	pop	{r7, pc}
                self.len -= 1;
   149b6:	9805      	ldr	r0, [sp, #20]
   149b8:	6801      	ldr	r1, [r0, #0]
   149ba:	1e4a      	subs	r2, r1, #1
   149bc:	2901      	cmp	r1, #1
   149be:	9204      	str	r2, [sp, #16]
   149c0:	d314      	bcc.n	149ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   149c2:	e7ff      	b.n	149c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   149c4:	9804      	ldr	r0, [sp, #16]
   149c6:	9905      	ldr	r1, [sp, #20]
   149c8:	6008      	str	r0, [r1, #0]
                let len = self.len;
   149ca:	680a      	ldr	r2, [r1, #0]
   149cc:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   149ce:	4608      	mov	r0, r1
   149d0:	9203      	str	r2, [sp, #12]
   149d2:	f7ff fe41 	bl	14658 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   149d6:	9002      	str	r0, [sp, #8]
   149d8:	9101      	str	r1, [sp, #4]
   149da:	e7ff      	b.n	149dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   149dc:	9802      	ldr	r0, [sp, #8]
   149de:	9901      	ldr	r1, [sp, #4]
   149e0:	9a03      	ldr	r2, [sp, #12]
   149e2:	f7fc fe6b 	bl	116bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   149e6:	e7ff      	b.n	149e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   149e8:	e7ff      	b.n	149ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   149ea:	e7dc      	b.n	149a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   149ec:	f64d 70b0 	movw	r0, #57264	; 0xdfb0
   149f0:	f2c0 0001 	movt	r0, #1
   149f4:	f64d 729c 	movw	r2, #57244	; 0xdf9c
   149f8:	f2c0 0201 	movt	r2, #1
   149fc:	2121      	movs	r1, #33	; 0x21
   149fe:	f000 fb67 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a02:	defe      	udf	#254	; 0xfe

00014a04 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   14a04:	b580      	push	{r7, lr}
   14a06:	b084      	sub	sp, #16
   14a08:	460a      	mov	r2, r1
   14a0a:	9002      	str	r0, [sp, #8]
   14a0c:	f88d 100f 	strb.w	r1, [sp, #15]
   14a10:	9201      	str	r2, [sp, #4]
   14a12:	f7f4 fb45 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14a16:	e7ff      	b.n	14a18 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   14a18:	b004      	add	sp, #16
   14a1a:	bd80      	pop	{r7, pc}

00014a1c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   14a1c:	b081      	sub	sp, #4
   14a1e:	9000      	str	r0, [sp, #0]
   14a20:	7800      	ldrb	r0, [r0, #0]
   14a22:	b001      	add	sp, #4
   14a24:	4770      	bx	lr

00014a26 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   14a26:	b580      	push	{r7, lr}
   14a28:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14a2a:	f000 fa5b 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14a2e:	9003      	str	r0, [sp, #12]
   14a30:	e7ff      	b.n	14a32 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   14a32:	9803      	ldr	r0, [sp, #12]
   14a34:	f000 fa5c 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14a38:	9002      	str	r0, [sp, #8]
   14a3a:	e7ff      	b.n	14a3c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   14a3c:	f000 f8cb 	bl	14bd6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   14a40:	9001      	str	r0, [sp, #4]
   14a42:	e7ff      	b.n	14a44 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   14a44:	9801      	ldr	r0, [sp, #4]
   14a46:	0041      	lsls	r1, r0, #1
   14a48:	9100      	str	r1, [sp, #0]
   14a4a:	e7ff      	b.n	14a4c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   14a4c:	9802      	ldr	r0, [sp, #8]
   14a4e:	9900      	ldr	r1, [sp, #0]
   14a50:	4308      	orrs	r0, r1
    }
   14a52:	b004      	add	sp, #16
   14a54:	bd80      	pop	{r7, pc}

00014a56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   14a56:	b580      	push	{r7, lr}
   14a58:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14a5a:	f000 fa43 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14a5e:	9003      	str	r0, [sp, #12]
   14a60:	e7ff      	b.n	14a62 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   14a62:	9803      	ldr	r0, [sp, #12]
   14a64:	f000 fa44 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14a68:	9002      	str	r0, [sp, #8]
   14a6a:	e7ff      	b.n	14a6c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   14a6c:	f000 f86b 	bl	14b46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   14a70:	9001      	str	r0, [sp, #4]
   14a72:	e7ff      	b.n	14a74 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   14a74:	9801      	ldr	r0, [sp, #4]
   14a76:	0041      	lsls	r1, r0, #1
   14a78:	9100      	str	r1, [sp, #0]
   14a7a:	e7ff      	b.n	14a7c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   14a7c:	9802      	ldr	r0, [sp, #8]
   14a7e:	9900      	ldr	r1, [sp, #0]
   14a80:	4308      	orrs	r0, r1
    }
   14a82:	b004      	add	sp, #16
   14a84:	bd80      	pop	{r7, pc}

00014a86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   14a86:	b580      	push	{r7, lr}
   14a88:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14a8a:	f000 fa2b 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14a8e:	9003      	str	r0, [sp, #12]
   14a90:	e7ff      	b.n	14a92 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   14a92:	9803      	ldr	r0, [sp, #12]
   14a94:	f000 fa2c 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14a98:	9002      	str	r0, [sp, #8]
   14a9a:	e7ff      	b.n	14a9c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   14a9c:	f000 f8fb 	bl	14c96 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   14aa0:	9001      	str	r0, [sp, #4]
   14aa2:	e7ff      	b.n	14aa4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   14aa4:	9801      	ldr	r0, [sp, #4]
   14aa6:	0041      	lsls	r1, r0, #1
   14aa8:	9100      	str	r1, [sp, #0]
   14aaa:	e7ff      	b.n	14aac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   14aac:	9802      	ldr	r0, [sp, #8]
   14aae:	9900      	ldr	r1, [sp, #0]
   14ab0:	4308      	orrs	r0, r1
    }
   14ab2:	b004      	add	sp, #16
   14ab4:	bd80      	pop	{r7, pc}

00014ab6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   14ab6:	b580      	push	{r7, lr}
   14ab8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14aba:	f000 fa13 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14abe:	9003      	str	r0, [sp, #12]
   14ac0:	e7ff      	b.n	14ac2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   14ac2:	9803      	ldr	r0, [sp, #12]
   14ac4:	f000 fa14 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14ac8:	9002      	str	r0, [sp, #8]
   14aca:	e7ff      	b.n	14acc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   14acc:	f000 f80b 	bl	14ae6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   14ad0:	9001      	str	r0, [sp, #4]
   14ad2:	e7ff      	b.n	14ad4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   14ad4:	9801      	ldr	r0, [sp, #4]
   14ad6:	0041      	lsls	r1, r0, #1
   14ad8:	9100      	str	r1, [sp, #0]
   14ada:	e7ff      	b.n	14adc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   14adc:	9802      	ldr	r0, [sp, #8]
   14ade:	9900      	ldr	r1, [sp, #0]
   14ae0:	4308      	orrs	r0, r1
    }
   14ae2:	b004      	add	sp, #16
   14ae4:	bd80      	pop	{r7, pc}

00014ae6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   14ae6:	b580      	push	{r7, lr}
   14ae8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14aea:	f000 f9fb 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14aee:	9003      	str	r0, [sp, #12]
   14af0:	e7ff      	b.n	14af2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   14af2:	9803      	ldr	r0, [sp, #12]
   14af4:	f000 f9fc 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14af8:	9002      	str	r0, [sp, #8]
   14afa:	e7ff      	b.n	14afc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   14afc:	f000 f89b 	bl	14c36 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   14b00:	9001      	str	r0, [sp, #4]
   14b02:	e7ff      	b.n	14b04 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   14b04:	9801      	ldr	r0, [sp, #4]
   14b06:	0041      	lsls	r1, r0, #1
   14b08:	9100      	str	r1, [sp, #0]
   14b0a:	e7ff      	b.n	14b0c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   14b0c:	9802      	ldr	r0, [sp, #8]
   14b0e:	9900      	ldr	r1, [sp, #0]
   14b10:	4308      	orrs	r0, r1
    }
   14b12:	b004      	add	sp, #16
   14b14:	bd80      	pop	{r7, pc}

00014b16 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   14b16:	b580      	push	{r7, lr}
   14b18:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b1a:	f000 f9e3 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b1e:	9003      	str	r0, [sp, #12]
   14b20:	e7ff      	b.n	14b22 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   14b22:	9803      	ldr	r0, [sp, #12]
   14b24:	f000 f9e4 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b28:	9002      	str	r0, [sp, #8]
   14b2a:	e7ff      	b.n	14b2c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   14b2c:	f7ff ff7b 	bl	14a26 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   14b30:	9001      	str	r0, [sp, #4]
   14b32:	e7ff      	b.n	14b34 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   14b34:	9801      	ldr	r0, [sp, #4]
   14b36:	0041      	lsls	r1, r0, #1
   14b38:	9100      	str	r1, [sp, #0]
   14b3a:	e7ff      	b.n	14b3c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   14b3c:	9802      	ldr	r0, [sp, #8]
   14b3e:	9900      	ldr	r1, [sp, #0]
   14b40:	4308      	orrs	r0, r1
    }
   14b42:	b004      	add	sp, #16
   14b44:	bd80      	pop	{r7, pc}

00014b46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   14b46:	b580      	push	{r7, lr}
   14b48:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b4a:	f000 f9cb 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b4e:	9003      	str	r0, [sp, #12]
   14b50:	e7ff      	b.n	14b52 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   14b52:	9803      	ldr	r0, [sp, #12]
   14b54:	f000 f9cc 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b58:	9002      	str	r0, [sp, #8]
   14b5a:	e7ff      	b.n	14b5c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   14b5c:	f000 f823 	bl	14ba6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   14b60:	9001      	str	r0, [sp, #4]
   14b62:	e7ff      	b.n	14b64 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   14b64:	9801      	ldr	r0, [sp, #4]
   14b66:	0041      	lsls	r1, r0, #1
   14b68:	9100      	str	r1, [sp, #0]
   14b6a:	e7ff      	b.n	14b6c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   14b6c:	9802      	ldr	r0, [sp, #8]
   14b6e:	9900      	ldr	r1, [sp, #0]
   14b70:	4308      	orrs	r0, r1
    }
   14b72:	b004      	add	sp, #16
   14b74:	bd80      	pop	{r7, pc}

00014b76 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   14b76:	b580      	push	{r7, lr}
   14b78:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b7a:	f000 f9b3 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b7e:	9003      	str	r0, [sp, #12]
   14b80:	e7ff      	b.n	14b82 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   14b82:	9803      	ldr	r0, [sp, #12]
   14b84:	f000 f9b4 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b88:	9002      	str	r0, [sp, #8]
   14b8a:	e7ff      	b.n	14b8c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   14b8c:	f000 f86b 	bl	14c66 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   14b90:	9001      	str	r0, [sp, #4]
   14b92:	e7ff      	b.n	14b94 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   14b94:	9801      	ldr	r0, [sp, #4]
   14b96:	0041      	lsls	r1, r0, #1
   14b98:	9100      	str	r1, [sp, #0]
   14b9a:	e7ff      	b.n	14b9c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   14b9c:	9802      	ldr	r0, [sp, #8]
   14b9e:	9900      	ldr	r1, [sp, #0]
   14ba0:	4308      	orrs	r0, r1
    }
   14ba2:	b004      	add	sp, #16
   14ba4:	bd80      	pop	{r7, pc}

00014ba6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   14ba6:	b580      	push	{r7, lr}
   14ba8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14baa:	f000 f99b 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14bae:	9003      	str	r0, [sp, #12]
   14bb0:	e7ff      	b.n	14bb2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   14bb2:	9803      	ldr	r0, [sp, #12]
   14bb4:	f000 f99c 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14bb8:	9002      	str	r0, [sp, #8]
   14bba:	e7ff      	b.n	14bbc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   14bbc:	f000 f823 	bl	14c06 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   14bc0:	9001      	str	r0, [sp, #4]
   14bc2:	e7ff      	b.n	14bc4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   14bc4:	9801      	ldr	r0, [sp, #4]
   14bc6:	0041      	lsls	r1, r0, #1
   14bc8:	9100      	str	r1, [sp, #0]
   14bca:	e7ff      	b.n	14bcc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   14bcc:	9802      	ldr	r0, [sp, #8]
   14bce:	9900      	ldr	r1, [sp, #0]
   14bd0:	4308      	orrs	r0, r1
    }
   14bd2:	b004      	add	sp, #16
   14bd4:	bd80      	pop	{r7, pc}

00014bd6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   14bd6:	b580      	push	{r7, lr}
   14bd8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14bda:	f000 f985 	bl	14ee8 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   14bde:	9003      	str	r0, [sp, #12]
   14be0:	e7ff      	b.n	14be2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   14be2:	9803      	ldr	r0, [sp, #12]
   14be4:	f000 f984 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14be8:	9002      	str	r0, [sp, #8]
   14bea:	e7ff      	b.n	14bec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   14bec:	f000 f97e 	bl	14eec <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   14bf0:	9001      	str	r0, [sp, #4]
   14bf2:	e7ff      	b.n	14bf4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   14bf4:	9801      	ldr	r0, [sp, #4]
   14bf6:	0041      	lsls	r1, r0, #1
   14bf8:	9100      	str	r1, [sp, #0]
   14bfa:	e7ff      	b.n	14bfc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   14bfc:	9802      	ldr	r0, [sp, #8]
   14bfe:	9900      	ldr	r1, [sp, #0]
   14c00:	4308      	orrs	r0, r1
    }
   14c02:	b004      	add	sp, #16
   14c04:	bd80      	pop	{r7, pc}

00014c06 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   14c06:	b580      	push	{r7, lr}
   14c08:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c0a:	f000 f96b 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c0e:	9003      	str	r0, [sp, #12]
   14c10:	e7ff      	b.n	14c12 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   14c12:	9803      	ldr	r0, [sp, #12]
   14c14:	f000 f96c 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c18:	9002      	str	r0, [sp, #8]
   14c1a:	e7ff      	b.n	14c1c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   14c1c:	f7ff ff7b 	bl	14b16 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   14c20:	9001      	str	r0, [sp, #4]
   14c22:	e7ff      	b.n	14c24 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   14c24:	9801      	ldr	r0, [sp, #4]
   14c26:	0041      	lsls	r1, r0, #1
   14c28:	9100      	str	r1, [sp, #0]
   14c2a:	e7ff      	b.n	14c2c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   14c2c:	9802      	ldr	r0, [sp, #8]
   14c2e:	9900      	ldr	r1, [sp, #0]
   14c30:	4308      	orrs	r0, r1
    }
   14c32:	b004      	add	sp, #16
   14c34:	bd80      	pop	{r7, pc}

00014c36 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   14c36:	b580      	push	{r7, lr}
   14c38:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c3a:	f000 f953 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c3e:	9003      	str	r0, [sp, #12]
   14c40:	e7ff      	b.n	14c42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   14c42:	9803      	ldr	r0, [sp, #12]
   14c44:	f000 f954 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c48:	9002      	str	r0, [sp, #8]
   14c4a:	e7ff      	b.n	14c4c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   14c4c:	f7ff ff03 	bl	14a56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   14c50:	9001      	str	r0, [sp, #4]
   14c52:	e7ff      	b.n	14c54 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   14c54:	9801      	ldr	r0, [sp, #4]
   14c56:	0041      	lsls	r1, r0, #1
   14c58:	9100      	str	r1, [sp, #0]
   14c5a:	e7ff      	b.n	14c5c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   14c5c:	9802      	ldr	r0, [sp, #8]
   14c5e:	9900      	ldr	r1, [sp, #0]
   14c60:	4308      	orrs	r0, r1
    }
   14c62:	b004      	add	sp, #16
   14c64:	bd80      	pop	{r7, pc}

00014c66 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   14c66:	b580      	push	{r7, lr}
   14c68:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c6a:	f000 f93b 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c6e:	9003      	str	r0, [sp, #12]
   14c70:	e7ff      	b.n	14c72 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   14c72:	9803      	ldr	r0, [sp, #12]
   14c74:	f000 f93c 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c78:	9002      	str	r0, [sp, #8]
   14c7a:	e7ff      	b.n	14c7c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   14c7c:	f7ff ff1b 	bl	14ab6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   14c80:	9001      	str	r0, [sp, #4]
   14c82:	e7ff      	b.n	14c84 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   14c84:	9801      	ldr	r0, [sp, #4]
   14c86:	0041      	lsls	r1, r0, #1
   14c88:	9100      	str	r1, [sp, #0]
   14c8a:	e7ff      	b.n	14c8c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   14c8c:	9802      	ldr	r0, [sp, #8]
   14c8e:	9900      	ldr	r1, [sp, #0]
   14c90:	4308      	orrs	r0, r1
    }
   14c92:	b004      	add	sp, #16
   14c94:	bd80      	pop	{r7, pc}

00014c96 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   14c96:	b580      	push	{r7, lr}
   14c98:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c9a:	f000 f923 	bl	14ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c9e:	9003      	str	r0, [sp, #12]
   14ca0:	e7ff      	b.n	14ca2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   14ca2:	9803      	ldr	r0, [sp, #12]
   14ca4:	f000 f924 	bl	14ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14ca8:	9002      	str	r0, [sp, #8]
   14caa:	e7ff      	b.n	14cac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   14cac:	f7ff ff63 	bl	14b76 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   14cb0:	9001      	str	r0, [sp, #4]
   14cb2:	e7ff      	b.n	14cb4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   14cb4:	9801      	ldr	r0, [sp, #4]
   14cb6:	0041      	lsls	r1, r0, #1
   14cb8:	9100      	str	r1, [sp, #0]
   14cba:	e7ff      	b.n	14cbc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   14cbc:	9802      	ldr	r0, [sp, #8]
   14cbe:	9900      	ldr	r1, [sp, #0]
   14cc0:	4308      	orrs	r0, r1
    }
   14cc2:	b004      	add	sp, #16
   14cc4:	bd80      	pop	{r7, pc}

00014cc6 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   14cc6:	b580      	push	{r7, lr}
   14cc8:	b08c      	sub	sp, #48	; 0x30
   14cca:	9005      	str	r0, [sp, #20]
   14ccc:	9106      	str	r1, [sp, #24]
   14cce:	9207      	str	r2, [sp, #28]
   14cd0:	9008      	str	r0, [sp, #32]
   14cd2:	9109      	str	r1, [sp, #36]	; 0x24
   14cd4:	2301      	movs	r3, #1
   14cd6:	930b      	str	r3, [sp, #44]	; 0x2c
   14cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14cda:	9204      	str	r2, [sp, #16]
   14cdc:	9103      	str	r1, [sp, #12]
   14cde:	9002      	str	r0, [sp, #8]
   14ce0:	9301      	str	r3, [sp, #4]
   14ce2:	e7ff      	b.n	14ce4 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   14ce4:	9801      	ldr	r0, [sp, #4]
   14ce6:	9904      	ldr	r1, [sp, #16]
   14ce8:	fb00 f201 	mul.w	r2, r0, r1
   14cec:	920a      	str	r2, [sp, #40]	; 0x28
   14cee:	9802      	ldr	r0, [sp, #8]
   14cf0:	9903      	ldr	r1, [sp, #12]
   14cf2:	f000 f850 	bl	14d96 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   14cf6:	e7ff      	b.n	14cf8 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   14cf8:	b00c      	add	sp, #48	; 0x30
   14cfa:	bd80      	pop	{r7, pc}

00014cfc <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   14cfc:	b580      	push	{r7, lr}
   14cfe:	b088      	sub	sp, #32
   14d00:	9004      	str	r0, [sp, #16]
   14d02:	9105      	str	r1, [sp, #20]
   14d04:	2201      	movs	r2, #1
   14d06:	9207      	str	r2, [sp, #28]
   14d08:	9a07      	ldr	r2, [sp, #28]
   14d0a:	9103      	str	r1, [sp, #12]
   14d0c:	9002      	str	r0, [sp, #8]
   14d0e:	9201      	str	r2, [sp, #4]
   14d10:	e7ff      	b.n	14d12 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   14d12:	9801      	ldr	r0, [sp, #4]
   14d14:	2820      	cmp	r0, #32
   14d16:	d306      	bcc.n	14d26 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   14d18:	e7ff      	b.n	14d1a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   14d1a:	2201      	movs	r2, #1
   14d1c:	9802      	ldr	r0, [sp, #8]
   14d1e:	9903      	ldr	r1, [sp, #12]
   14d20:	f7ff ffd1 	bl	14cc6 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   14d24:	e013      	b.n	14d4e <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   14d26:	9802      	ldr	r0, [sp, #8]
   14d28:	f000 f814 	bl	14d54 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   14d2c:	4601      	mov	r1, r0
   14d2e:	f88d 001b 	strb.w	r0, [sp, #27]
   14d32:	9100      	str	r1, [sp, #0]
   14d34:	e7ff      	b.n	14d36 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   14d36:	2201      	movs	r2, #1
   14d38:	9803      	ldr	r0, [sp, #12]
   14d3a:	9902      	ldr	r1, [sp, #8]
   14d3c:	f7fc fadc 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14d40:	e7ff      	b.n	14d42 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   14d42:	9803      	ldr	r0, [sp, #12]
   14d44:	9900      	ldr	r1, [sp, #0]
   14d46:	f7f4 f9ab 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14d4a:	e7ff      	b.n	14d4c <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   14d4c:	e000      	b.n	14d50 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   14d4e:	e7ff      	b.n	14d50 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   14d50:	b008      	add	sp, #32
   14d52:	bd80      	pop	{r7, pc}

00014d54 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   14d54:	b580      	push	{r7, lr}
   14d56:	b088      	sub	sp, #32
   14d58:	9004      	str	r0, [sp, #16]
   14d5a:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14d5e:	f88d 100f 	strb.w	r1, [sp, #15]
   14d62:	9002      	str	r0, [sp, #8]
   14d64:	e7ff      	b.n	14d66 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   14d66:	f10d 000f 	add.w	r0, sp, #15
   14d6a:	9006      	str	r0, [sp, #24]
   14d6c:	9007      	str	r0, [sp, #28]
   14d6e:	e7ff      	b.n	14d70 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   14d70:	f10d 010f 	add.w	r1, sp, #15
   14d74:	2201      	movs	r2, #1
   14d76:	9802      	ldr	r0, [sp, #8]
   14d78:	f7fc fabe 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14d7c:	e7ff      	b.n	14d7e <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   14d7e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14d82:	4601      	mov	r1, r0
   14d84:	f88d 0016 	strb.w	r0, [sp, #22]
   14d88:	f88d 0017 	strb.w	r0, [sp, #23]
   14d8c:	9101      	str	r1, [sp, #4]
   14d8e:	e7ff      	b.n	14d90 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   14d90:	9801      	ldr	r0, [sp, #4]
   14d92:	b008      	add	sp, #32
   14d94:	bd80      	pop	{r7, pc}

00014d96 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   14d96:	b5d0      	push	{r4, r6, r7, lr}
   14d98:	af02      	add	r7, sp, #8
   14d9a:	b0b4      	sub	sp, #208	; 0xd0
   14d9c:	466c      	mov	r4, sp
   14d9e:	f36f 0404 	bfc	r4, #0, #5
   14da2:	46a5      	mov	sp, r4
   14da4:	9024      	str	r0, [sp, #144]	; 0x90
   14da6:	9125      	str	r1, [sp, #148]	; 0x94
   14da8:	9226      	str	r2, [sp, #152]	; 0x98
   14daa:	2320      	movs	r3, #32
   14dac:	932f      	str	r3, [sp, #188]	; 0xbc
   14dae:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   14db0:	9327      	str	r3, [sp, #156]	; 0x9c
   14db2:	920e      	str	r2, [sp, #56]	; 0x38
   14db4:	910d      	str	r1, [sp, #52]	; 0x34
   14db6:	900c      	str	r0, [sp, #48]	; 0x30
   14db8:	930b      	str	r3, [sp, #44]	; 0x2c
   14dba:	e7ff      	b.n	14dbc <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   14dbc:	2000      	movs	r0, #0
   14dbe:	900f      	str	r0, [sp, #60]	; 0x3c
   14dc0:	e7ff      	b.n	14dc2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   14dc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14dc6:	4408      	add	r0, r1
   14dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14dca:	4290      	cmp	r0, r2
   14dcc:	d905      	bls.n	14dda <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   14dce:	e7ff      	b.n	14dd0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   14dd0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14dd2:	990e      	ldr	r1, [sp, #56]	; 0x38
   14dd4:	4288      	cmp	r0, r1
   14dd6:	d334      	bcc.n	14e42 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   14dd8:	e067      	b.n	14eaa <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   14dda:	e7ff      	b.n	14ddc <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   14ddc:	a810      	add	r0, sp, #64	; 0x40
   14dde:	9032      	str	r0, [sp, #200]	; 0xc8
   14de0:	9033      	str	r0, [sp, #204]	; 0xcc
   14de2:	e7ff      	b.n	14de4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   14de4:	a810      	add	r0, sp, #64	; 0x40
   14de6:	4601      	mov	r1, r0
   14de8:	9028      	str	r0, [sp, #160]	; 0xa0
   14dea:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14dee:	900a      	str	r0, [sp, #40]	; 0x28
   14df0:	4610      	mov	r0, r2
   14df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14df4:	9109      	str	r1, [sp, #36]	; 0x24
   14df6:	4619      	mov	r1, r3
   14df8:	f7fc fbe2 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14dfc:	4601      	mov	r1, r0
   14dfe:	9029      	str	r0, [sp, #164]	; 0xa4
   14e00:	9108      	str	r1, [sp, #32]
   14e02:	e7ff      	b.n	14e04 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   14e04:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14e06:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e08:	f7fc fbda 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e0c:	4601      	mov	r1, r0
   14e0e:	902a      	str	r0, [sp, #168]	; 0xa8
   14e10:	9107      	str	r1, [sp, #28]
   14e12:	e7ff      	b.n	14e14 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   14e14:	9808      	ldr	r0, [sp, #32]
   14e16:	9909      	ldr	r1, [sp, #36]	; 0x24
   14e18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14e1a:	f7fc fa6d 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e1e:	e7ff      	b.n	14e20 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   14e20:	9807      	ldr	r0, [sp, #28]
   14e22:	9908      	ldr	r1, [sp, #32]
   14e24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14e26:	f7fc fa67 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e2a:	e7ff      	b.n	14e2c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   14e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e2e:	9907      	ldr	r1, [sp, #28]
   14e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14e32:	f7fc fa61 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e36:	e7ff      	b.n	14e38 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   14e38:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14e3c:	4408      	add	r0, r1
   14e3e:	900f      	str	r0, [sp, #60]	; 0x3c
   14e40:	e7bf      	b.n	14dc2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   14e42:	e7ff      	b.n	14e44 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   14e44:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e46:	990e      	ldr	r1, [sp, #56]	; 0x38
   14e48:	1a08      	subs	r0, r1, r0
   14e4a:	4602      	mov	r2, r0
   14e4c:	902b      	str	r0, [sp, #172]	; 0xac
   14e4e:	a81c      	add	r0, sp, #112	; 0x70
   14e50:	9030      	str	r0, [sp, #192]	; 0xc0
   14e52:	9031      	str	r0, [sp, #196]	; 0xc4
   14e54:	9206      	str	r2, [sp, #24]
   14e56:	9005      	str	r0, [sp, #20]
   14e58:	e7ff      	b.n	14e5a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   14e5a:	9805      	ldr	r0, [sp, #20]
   14e5c:	9905      	ldr	r1, [sp, #20]
   14e5e:	912c      	str	r1, [sp, #176]	; 0xb0
   14e60:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14e64:	9004      	str	r0, [sp, #16]
   14e66:	4610      	mov	r0, r2
   14e68:	f7fc fbaa 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e6c:	4601      	mov	r1, r0
   14e6e:	902d      	str	r0, [sp, #180]	; 0xb4
   14e70:	9103      	str	r1, [sp, #12]
   14e72:	e7ff      	b.n	14e74 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   14e74:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14e76:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e78:	f7fc fba2 	bl	115c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e7c:	4601      	mov	r1, r0
   14e7e:	902e      	str	r0, [sp, #184]	; 0xb8
   14e80:	9102      	str	r1, [sp, #8]
   14e82:	e7ff      	b.n	14e84 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   14e84:	9803      	ldr	r0, [sp, #12]
   14e86:	9904      	ldr	r1, [sp, #16]
   14e88:	9a06      	ldr	r2, [sp, #24]
   14e8a:	f7fc fa35 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e8e:	e7ff      	b.n	14e90 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   14e90:	9802      	ldr	r0, [sp, #8]
   14e92:	9903      	ldr	r1, [sp, #12]
   14e94:	9a06      	ldr	r2, [sp, #24]
   14e96:	f7fc fa2f 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e9a:	e7ff      	b.n	14e9c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   14e9c:	9804      	ldr	r0, [sp, #16]
   14e9e:	9902      	ldr	r1, [sp, #8]
   14ea0:	9a06      	ldr	r2, [sp, #24]
   14ea2:	f7fc fa29 	bl	112f8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14ea6:	e7ff      	b.n	14ea8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   14ea8:	e7ff      	b.n	14eaa <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   14eaa:	f1a7 0408 	sub.w	r4, r7, #8
   14eae:	46a5      	mov	sp, r4
   14eb0:	bdd0      	pop	{r4, r6, r7, pc}

00014eb2 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   14eb2:	b083      	sub	sp, #12
   14eb4:	9002      	str	r0, [sp, #8]
   14eb6:	9000      	str	r0, [sp, #0]
   14eb8:	e7ff      	b.n	14eba <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   14eba:	9800      	ldr	r0, [sp, #0]
   14ebc:	28ff      	cmp	r0, #255	; 0xff
   14ebe:	d807      	bhi.n	14ed0 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   14ec0:	e7ff      	b.n	14ec2 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   14ec2:	9800      	ldr	r0, [sp, #0]
   14ec4:	f88d 0005 	strb.w	r0, [sp, #5]
   14ec8:	2100      	movs	r1, #0
   14eca:	f88d 1004 	strb.w	r1, [sp, #4]
   14ece:	e003      	b.n	14ed8 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   14ed0:	2001      	movs	r0, #1
   14ed2:	f88d 0004 	strb.w	r0, [sp, #4]
   14ed6:	e7ff      	b.n	14ed8 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   14ed8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14edc:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14ee0:	b003      	add	sp, #12
   14ee2:	4770      	bx	lr

00014ee4 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   14ee4:	2000      	movs	r0, #0
        0
    }
   14ee6:	4770      	bx	lr

00014ee8 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   14ee8:	2001      	movs	r0, #1
        1
    }
   14eea:	4770      	bx	lr

00014eec <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   14eec:	2000      	movs	r0, #0
    }
   14eee:	4770      	bx	lr

00014ef0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   14ef0:	b081      	sub	sp, #4
   14ef2:	4601      	mov	r1, r0
   14ef4:	f88d 0003 	strb.w	r0, [sp, #3]
   14ef8:	b2c0      	uxtb	r0, r0
   14efa:	b001      	add	sp, #4
   14efc:	4770      	bx	lr

00014efe <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   14efe:	4770      	bx	lr

00014f00 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   14f00:	b5b0      	push	{r4, r5, r7, lr}
   14f02:	b086      	sub	sp, #24
   14f04:	460c      	mov	r4, r1
   14f06:	4605      	mov	r5, r0
   14f08:	f001 fb6b 	bl	165e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   14f0c:	b9a8      	cbnz	r0, 14f3a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   14f0e:	f64d 73d4 	movw	r3, #57300	; 0xdfd4
   14f12:	2200      	movs	r2, #0
   14f14:	f2c0 0301 	movt	r3, #1
   14f18:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   14f1c:	9205      	str	r2, [sp, #20]
   14f1e:	9304      	str	r3, [sp, #16]
   14f20:	e9cd 2202 	strd	r2, r2, [sp, #8]
   14f24:	2201      	movs	r2, #1
   14f26:	9201      	str	r2, [sp, #4]
   14f28:	f24e 0298 	movw	r2, #57496	; 0xe098
   14f2c:	f2c0 0201 	movt	r2, #1
   14f30:	9200      	str	r2, [sp, #0]
   14f32:	466a      	mov	r2, sp
   14f34:	f000 fbc4 	bl	156c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   14f38:	b110      	cbz	r0, 14f40 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   14f3a:	2001      	movs	r0, #1
   14f3c:	b006      	add	sp, #24
   14f3e:	bdb0      	pop	{r4, r5, r7, pc}
   14f40:	1d28      	adds	r0, r5, #4
   14f42:	4621      	mov	r1, r4
   14f44:	b006      	add	sp, #24
   14f46:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   14f4a:	f001 bb4a 	b.w	165e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00014f4e <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   14f4e:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   14f52:	f243 6134 	movw	r1, #13876	; 0x3634
   14f56:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   14f5a:	f6cd 0131 	movt	r1, #55345	; 0xd831
   14f5e:	4770      	bx	lr

00014f60 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   14f60:	b570      	push	{r4, r5, r6, lr}
   14f62:	460e      	mov	r6, r1
   14f64:	3909      	subs	r1, #9
   14f66:	4604      	mov	r4, r0
   14f68:	291e      	cmp	r1, #30
   14f6a:	d818      	bhi.n	14f9e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   14f6c:	2002      	movs	r0, #2
   14f6e:	2574      	movs	r5, #116	; 0x74
   14f70:	e8df f001 	tbb	[pc, r1]
   14f74:	1c1c1019 	.word	0x1c1c1019
   14f78:	1c1c1c29 	.word	0x1c1c1c29
   14f7c:	1c1c1c1c 	.word	0x1c1c1c1c
   14f80:	1c1c1c1c 	.word	0x1c1c1c1c
   14f84:	1c1c1c1c 	.word	0x1c1c1c1c
   14f88:	1c1c1c1c 	.word	0x1c1c1c1c
   14f8c:	1c1c171c 	.word	0x1c1c171c
   14f90:	00171c1c 	.word	0x00171c1c
   14f94:	2002      	movs	r0, #2
   14f96:	256e      	movs	r5, #110	; 0x6e
   14f98:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   14f9c:	bd70      	pop	{r4, r5, r6, pc}
   14f9e:	2e5c      	cmp	r6, #92	; 0x5c
   14fa0:	d104      	bne.n	14fac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   14fa2:	2002      	movs	r0, #2
   14fa4:	4635      	mov	r5, r6
   14fa6:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   14faa:	bd70      	pop	{r4, r5, r6, pc}
   14fac:	2a00      	cmp	r2, #0
   14fae:	d040      	beq.n	15032 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   14fb0:	f3c6 1083 	ubfx	r0, r6, #6, #4
   14fb4:	0ab1      	lsrs	r1, r6, #10
   14fb6:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   14fba:	d309      	bcc.n	14fd0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   14fbc:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   14fc0:	d137      	bne.n	15032 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   14fc2:	211e      	movs	r1, #30
   14fc4:	e00b      	b.n	14fde <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   14fc6:	2002      	movs	r0, #2
   14fc8:	2572      	movs	r5, #114	; 0x72
   14fca:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   14fce:	bd70      	pop	{r4, r5, r6, pc}
   14fd0:	f64e 3204 	movw	r2, #60164	; 0xeb04
   14fd4:	f2c0 0201 	movt	r2, #1
   14fd8:	5c51      	ldrb	r1, [r2, r1]
   14fda:	291e      	cmp	r1, #30
   14fdc:	d842      	bhi.n	15064 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   14fde:	f64e 327f 	movw	r2, #60287	; 0xeb7f
   14fe2:	f2c0 0201 	movt	r2, #1
   14fe6:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   14fea:	5c09      	ldrb	r1, [r1, r0]
   14fec:	298b      	cmp	r1, #139	; 0x8b
   14fee:	d231      	bcs.n	15054 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   14ff0:	f64e 5070 	movw	r0, #60784	; 0xed70
   14ff4:	2301      	movs	r3, #1
   14ff6:	f2c0 0001 	movt	r0, #1
   14ffa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   14ffe:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   15002:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   15006:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1500a:	fa03 f501 	lsl.w	r5, r3, r1
   1500e:	f1b1 0220 	subs.w	r2, r1, #32
   15012:	f1c1 0120 	rsb	r1, r1, #32
   15016:	bf58      	it	pl
   15018:	2500      	movpl	r5, #0
   1501a:	2a00      	cmp	r2, #0
   1501c:	ea00 0005 	and.w	r0, r0, r5
   15020:	fa23 f101 	lsr.w	r1, r3, r1
   15024:	bf58      	it	pl
   15026:	fa03 f102 	lslpl.w	r1, r3, r2
   1502a:	ea01 010c 	and.w	r1, r1, ip
   1502e:	4308      	orrs	r0, r1
   15030:	d105      	bne.n	1503e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   15032:	4630      	mov	r0, r6
   15034:	f001 f989 	bl	1634a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   15038:	b108      	cbz	r0, 1503e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1503a:	2001      	movs	r0, #1
   1503c:	e7b2      	b.n	14fa4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1503e:	f046 0001 	orr.w	r0, r6, #1
   15042:	2107      	movs	r1, #7
   15044:	fab0 f080 	clz	r0, r0
   15048:	f04f 0e05 	mov.w	lr, #5
   1504c:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   15050:	2003      	movs	r0, #3
   15052:	e7a7      	b.n	14fa4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   15054:	f64e 20f4 	movw	r0, #60148	; 0xeaf4
   15058:	228b      	movs	r2, #139	; 0x8b
   1505a:	f2c0 0001 	movt	r0, #1
   1505e:	f000 f84d 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15062:	defe      	udf	#254	; 0xfe
   15064:	f64e 20e4 	movw	r0, #60132	; 0xeae4
   15068:	221f      	movs	r2, #31
   1506a:	f2c0 0001 	movt	r0, #1
   1506e:	f000 f845 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15072:	defe      	udf	#254	; 0xfe

00015074 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   15074:	b08e      	sub	sp, #56	; 0x38
   15076:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1507a:	2002      	movs	r0, #2
   1507c:	a90a      	add	r1, sp, #40	; 0x28
   1507e:	9009      	str	r0, [sp, #36]	; 0x24
   15080:	9108      	str	r1, [sp, #32]
   15082:	2100      	movs	r1, #0
   15084:	9107      	str	r1, [sp, #28]
   15086:	e9cd 0105 	strd	r0, r1, [sp, #20]
   1508a:	f24e 10a0 	movw	r0, #57760	; 0xe1a0
   1508e:	f2c0 0001 	movt	r0, #1
   15092:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   15096:	9004      	str	r0, [sp, #16]
   15098:	f646 50a7 	movw	r0, #28071	; 0x6da7
   1509c:	f2c0 0001 	movt	r0, #1
   150a0:	900d      	str	r0, [sp, #52]	; 0x34
   150a2:	a802      	add	r0, sp, #8
   150a4:	900c      	str	r0, [sp, #48]	; 0x30
   150a6:	f646 50b1 	movw	r0, #28081	; 0x6db1
   150aa:	f2c0 0001 	movt	r0, #1
   150ae:	4661      	mov	r1, ip
   150b0:	900b      	str	r0, [sp, #44]	; 0x2c
   150b2:	4668      	mov	r0, sp
   150b4:	900a      	str	r0, [sp, #40]	; 0x28
   150b6:	a804      	add	r0, sp, #16
   150b8:	f000 f840 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   150bc:	defe      	udf	#254	; 0xfe

000150be <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   150be:	68c0      	ldr	r0, [r0, #12]
   150c0:	4770      	bx	lr

000150c2 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   150c2:	4770      	bx	lr

000150c4 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   150c4:	e9d0 2100 	ldrd	r2, r1, [r0]
   150c8:	4610      	mov	r0, r2
   150ca:	4770      	bx	lr

000150cc <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   150cc:	6880      	ldr	r0, [r0, #8]
   150ce:	4770      	bx	lr

000150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   150d0:	b088      	sub	sp, #32
   150d2:	4694      	mov	ip, r2
   150d4:	f64d 72d4 	movw	r2, #57300	; 0xdfd4
   150d8:	2300      	movs	r3, #0
   150da:	f2c0 0201 	movt	r2, #1
   150de:	e9cd 0106 	strd	r0, r1, [sp, #24]
   150e2:	4668      	mov	r0, sp
   150e4:	9305      	str	r3, [sp, #20]
   150e6:	4661      	mov	r1, ip
   150e8:	9204      	str	r2, [sp, #16]
   150ea:	2201      	movs	r2, #1
   150ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
   150f0:	9201      	str	r2, [sp, #4]
   150f2:	aa06      	add	r2, sp, #24
   150f4:	9200      	str	r2, [sp, #0]
   150f6:	f000 f821 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   150fa:	defe      	udf	#254	; 0xfe

000150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   150fc:	b08c      	sub	sp, #48	; 0x30
   150fe:	4603      	mov	r3, r0
   15100:	e9cd 1200 	strd	r1, r2, [sp]
   15104:	2002      	movs	r0, #2
   15106:	a908      	add	r1, sp, #32
   15108:	9007      	str	r0, [sp, #28]
   1510a:	9106      	str	r1, [sp, #24]
   1510c:	2100      	movs	r1, #0
   1510e:	9105      	str	r1, [sp, #20]
   15110:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15114:	f24e 10d4 	movw	r0, #57812	; 0xe1d4
   15118:	f2c0 0001 	movt	r0, #1
   1511c:	4669      	mov	r1, sp
   1511e:	9002      	str	r0, [sp, #8]
   15120:	f646 40c3 	movw	r0, #27843	; 0x6cc3
   15124:	f2c0 0001 	movt	r0, #1
   15128:	900b      	str	r0, [sp, #44]	; 0x2c
   1512a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1512e:	a801      	add	r0, sp, #4
   15130:	9008      	str	r0, [sp, #32]
   15132:	a802      	add	r0, sp, #8
   15134:	4619      	mov	r1, r3
   15136:	f000 f801 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1513a:	defe      	udf	#254	; 0xfe

0001513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   1513c:	b084      	sub	sp, #16
   1513e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15142:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
   15146:	f2c0 0001 	movt	r0, #1
   1514a:	9001      	str	r0, [sp, #4]
   1514c:	f64d 70d4 	movw	r0, #57300	; 0xdfd4
   15150:	f2c0 0001 	movt	r0, #1
   15154:	9000      	str	r0, [sp, #0]
   15156:	4668      	mov	r0, sp
   15158:	f7f3 faba 	bl	86d0 <rust_begin_unwind>
   1515c:	defe      	udf	#254	; 0xfe

0001515e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   1515e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15162:	b081      	sub	sp, #4
   15164:	2a00      	cmp	r2, #0
   15166:	f000 80fe 	beq.w	15366 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   1516a:	4690      	mov	r8, r2
   1516c:	468a      	mov	sl, r1
   1516e:	4681      	mov	r9, r0
   15170:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15174:	7800      	ldrb	r0, [r0, #0]
   15176:	b948      	cbnz	r0, 1518c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   15178:	e014      	b.n	151a4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   1517a:	44da      	add	sl, fp
   1517c:	2c00      	cmp	r4, #0
   1517e:	46a0      	mov	r8, r4
   15180:	f000 80f1 	beq.w	15366 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   15184:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15188:	7800      	ldrb	r0, [r0, #0]
   1518a:	b158      	cbz	r0, 151a4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   1518c:	e9d9 0100 	ldrd	r0, r1, [r9]
   15190:	2204      	movs	r2, #4
   15192:	68cb      	ldr	r3, [r1, #12]
   15194:	f24e 01f4 	movw	r1, #57588	; 0xe0f4
   15198:	f2c0 0101 	movt	r1, #1
   1519c:	4798      	blx	r3
   1519e:	2800      	cmp	r0, #0
   151a0:	f040 80e5 	bne.w	1536e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   151a4:	f04f 0b00 	mov.w	fp, #0
   151a8:	4641      	mov	r1, r8
   151aa:	e008      	b.n	151be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   151ac:	ebb8 010b 	subs.w	r1, r8, fp
   151b0:	f04f 0000 	mov.w	r0, #0
   151b4:	bf38      	it	cc
   151b6:	4601      	movcc	r1, r0
   151b8:	45c3      	cmp	fp, r8
   151ba:	f200 80a5 	bhi.w	15308 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   151be:	eb0a 0e0b 	add.w	lr, sl, fp
   151c2:	2000      	movs	r0, #0
   151c4:	f01e 0203 	ands.w	r2, lr, #3
   151c8:	bf18      	it	ne
   151ca:	f1d2 0c04 	rsbsne	ip, r2, #4
   151ce:	d120      	bne.n	15212 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   151d0:	2908      	cmp	r1, #8
   151d2:	d357      	bcc.n	15284 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   151d4:	f1a1 0208 	sub.w	r2, r1, #8
   151d8:	4290      	cmp	r0, r2
   151da:	d853      	bhi.n	15284 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   151dc:	f85e 3000 	ldr.w	r3, [lr, r0]
   151e0:	eb0e 0700 	add.w	r7, lr, r0
   151e4:	687f      	ldr	r7, [r7, #4]
   151e6:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   151ea:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   151ee:	ea26 0303 	bic.w	r3, r6, r3
   151f2:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   151f6:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   151fa:	ea26 0707 	bic.w	r7, r6, r7
   151fe:	433b      	orrs	r3, r7
   15200:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   15204:	d102      	bne.n	1520c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   15206:	3008      	adds	r0, #8
   15208:	4290      	cmp	r0, r2
   1520a:	d9e7      	bls.n	151dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   1520c:	4288      	cmp	r0, r1
   1520e:	d939      	bls.n	15284 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15210:	e0b1      	b.n	15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   15212:	458c      	cmp	ip, r1
   15214:	bf88      	it	hi
   15216:	468c      	movhi	ip, r1
   15218:	eb0e 060c 	add.w	r6, lr, ip
   1521c:	2000      	movs	r0, #0
   1521e:	4663      	mov	r3, ip
   15220:	4677      	mov	r7, lr
   15222:	b363      	cbz	r3, 1527e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15224:	463a      	mov	r2, r7
   15226:	f812 4b01 	ldrb.w	r4, [r2], #1
   1522a:	f1b4 050a 	subs.w	r5, r4, #10
   1522e:	bf18      	it	ne
   15230:	2501      	movne	r5, #1
   15232:	4428      	add	r0, r5
   15234:	2c0a      	cmp	r4, #10
   15236:	d059      	beq.n	152ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15238:	42b2      	cmp	r2, r6
   1523a:	d020      	beq.n	1527e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1523c:	787a      	ldrb	r2, [r7, #1]
   1523e:	f1b2 040a 	subs.w	r4, r2, #10
   15242:	bf18      	it	ne
   15244:	2401      	movne	r4, #1
   15246:	4420      	add	r0, r4
   15248:	2a0a      	cmp	r2, #10
   1524a:	d04f      	beq.n	152ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1524c:	1cba      	adds	r2, r7, #2
   1524e:	42b2      	cmp	r2, r6
   15250:	d015      	beq.n	1527e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15252:	78ba      	ldrb	r2, [r7, #2]
   15254:	f1b2 040a 	subs.w	r4, r2, #10
   15258:	bf18      	it	ne
   1525a:	2401      	movne	r4, #1
   1525c:	4420      	add	r0, r4
   1525e:	2a0a      	cmp	r2, #10
   15260:	d044      	beq.n	152ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15262:	1cfa      	adds	r2, r7, #3
   15264:	42b2      	cmp	r2, r6
   15266:	d00a      	beq.n	1527e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15268:	78fa      	ldrb	r2, [r7, #3]
   1526a:	3b04      	subs	r3, #4
   1526c:	3704      	adds	r7, #4
   1526e:	f1b2 040a 	subs.w	r4, r2, #10
   15272:	bf18      	it	ne
   15274:	2401      	movne	r4, #1
   15276:	4420      	add	r0, r4
   15278:	2a0a      	cmp	r2, #10
   1527a:	d1d2      	bne.n	15222 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   1527c:	e036      	b.n	152ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1527e:	4660      	mov	r0, ip
   15280:	2908      	cmp	r1, #8
   15282:	d2a7      	bcs.n	151d4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   15284:	eb0e 0700 	add.w	r7, lr, r0
   15288:	eb0e 0201 	add.w	r2, lr, r1
   1528c:	1a0e      	subs	r6, r1, r0
   1528e:	2100      	movs	r1, #0
   15290:	b3ce      	cbz	r6, 15306 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15292:	463b      	mov	r3, r7
   15294:	f813 5b01 	ldrb.w	r5, [r3], #1
   15298:	f1b5 040a 	subs.w	r4, r5, #10
   1529c:	bf18      	it	ne
   1529e:	2401      	movne	r4, #1
   152a0:	4421      	add	r1, r4
   152a2:	2d0a      	cmp	r5, #10
   152a4:	d021      	beq.n	152ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   152a6:	4293      	cmp	r3, r2
   152a8:	d02d      	beq.n	15306 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   152aa:	787b      	ldrb	r3, [r7, #1]
   152ac:	f1b3 050a 	subs.w	r5, r3, #10
   152b0:	bf18      	it	ne
   152b2:	2501      	movne	r5, #1
   152b4:	4429      	add	r1, r5
   152b6:	2b0a      	cmp	r3, #10
   152b8:	d017      	beq.n	152ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   152ba:	1cbb      	adds	r3, r7, #2
   152bc:	4293      	cmp	r3, r2
   152be:	d022      	beq.n	15306 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   152c0:	78bb      	ldrb	r3, [r7, #2]
   152c2:	f1b3 050a 	subs.w	r5, r3, #10
   152c6:	bf18      	it	ne
   152c8:	2501      	movne	r5, #1
   152ca:	4429      	add	r1, r5
   152cc:	2b0a      	cmp	r3, #10
   152ce:	d00c      	beq.n	152ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   152d0:	1cfb      	adds	r3, r7, #3
   152d2:	4293      	cmp	r3, r2
   152d4:	d017      	beq.n	15306 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   152d6:	78fb      	ldrb	r3, [r7, #3]
   152d8:	3e04      	subs	r6, #4
   152da:	3704      	adds	r7, #4
   152dc:	f1b3 050a 	subs.w	r5, r3, #10
   152e0:	bf18      	it	ne
   152e2:	2501      	movne	r5, #1
   152e4:	4429      	add	r1, r5
   152e6:	2b0a      	cmp	r3, #10
   152e8:	d1d2      	bne.n	15290 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   152ea:	4408      	add	r0, r1
   152ec:	4458      	add	r0, fp
   152ee:	f100 0b01 	add.w	fp, r0, #1
   152f2:	4540      	cmp	r0, r8
   152f4:	f4bf af5a 	bcs.w	151ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   152f8:	f81a 0000 	ldrb.w	r0, [sl, r0]
   152fc:	280a      	cmp	r0, #10
   152fe:	f47f af55 	bne.w	151ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15302:	2001      	movs	r0, #1
   15304:	e001      	b.n	1530a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   15306:	2000      	movs	r0, #0
   15308:	46c3      	mov	fp, r8
   1530a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1530e:	eba8 040b 	sub.w	r4, r8, fp
   15312:	7008      	strb	r0, [r1, #0]
   15314:	fab4 f084 	clz	r0, r4
   15318:	0942      	lsrs	r2, r0, #5
   1531a:	fabb f08b 	clz	r0, fp
   1531e:	0943      	lsrs	r3, r0, #5
   15320:	e9d9 0100 	ldrd	r0, r1, [r9]
   15324:	ea53 0602 	orrs.w	r6, r3, r2
   15328:	d106      	bne.n	15338 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   1532a:	45d8      	cmp	r8, fp
   1532c:	d926      	bls.n	1537c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   1532e:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   15332:	f112 0f41 	cmn.w	r2, #65	; 0x41
   15336:	dd21      	ble.n	1537c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   15338:	68cb      	ldr	r3, [r1, #12]
   1533a:	4651      	mov	r1, sl
   1533c:	465a      	mov	r2, fp
   1533e:	4798      	blx	r3
   15340:	b9a8      	cbnz	r0, 1536e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   15342:	2e00      	cmp	r6, #0
   15344:	f47f af19 	bne.w	1517a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   15348:	45d8      	cmp	r8, fp
   1534a:	d905      	bls.n	15358 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   1534c:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   15350:	f110 0f41 	cmn.w	r0, #65	; 0x41
   15354:	f73f af11 	bgt.w	1517a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   15358:	4650      	mov	r0, sl
   1535a:	4641      	mov	r1, r8
   1535c:	465a      	mov	r2, fp
   1535e:	4643      	mov	r3, r8
   15360:	f000 fe4d 	bl	15ffe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   15364:	defe      	udf	#254	; 0xfe
   15366:	2000      	movs	r0, #0
   15368:	b001      	add	sp, #4
   1536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1536e:	2001      	movs	r0, #1
   15370:	b001      	add	sp, #4
   15372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15376:	f000 fe20 	bl	15fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1537a:	defe      	udf	#254	; 0xfe
   1537c:	4650      	mov	r0, sl
   1537e:	4641      	mov	r1, r8
   15380:	2200      	movs	r2, #0
   15382:	465b      	mov	r3, fp
   15384:	f000 fe3b 	bl	15ffe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   15388:	defe      	udf	#254	; 0xfe

0001538a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   1538a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1538c:	b08d      	sub	sp, #52	; 0x34
   1538e:	4604      	mov	r4, r0
   15390:	7a00      	ldrb	r0, [r0, #8]
   15392:	b138      	cbz	r0, 153a4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   15394:	2001      	movs	r0, #1
   15396:	6861      	ldr	r1, [r4, #4]
   15398:	7220      	strb	r0, [r4, #8]
   1539a:	1c48      	adds	r0, r1, #1
   1539c:	6060      	str	r0, [r4, #4]
   1539e:	4620      	mov	r0, r4
   153a0:	b00d      	add	sp, #52	; 0x34
   153a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   153a4:	4616      	mov	r6, r2
   153a6:	460d      	mov	r5, r1
   153a8:	e9d4 1200 	ldrd	r1, r2, [r4]
   153ac:	7808      	ldrb	r0, [r1, #0]
   153ae:	0740      	lsls	r0, r0, #29
   153b0:	d419      	bmi.n	153e6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   153b2:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   153b6:	f24e 11fe 	movw	r1, #57854	; 0xe1fe
   153ba:	f24e 2c02 	movw	ip, #57858	; 0xe202
   153be:	f2c0 0101 	movt	r1, #1
   153c2:	2a00      	cmp	r2, #0
   153c4:	f2c0 0c01 	movt	ip, #1
   153c8:	bf08      	it	eq
   153ca:	4661      	moveq	r1, ip
   153cc:	68db      	ldr	r3, [r3, #12]
   153ce:	f04f 0202 	mov.w	r2, #2
   153d2:	bf08      	it	eq
   153d4:	2201      	moveq	r2, #1
   153d6:	4798      	blx	r3
   153d8:	2800      	cmp	r0, #0
   153da:	d1db      	bne.n	15394 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   153dc:	68f2      	ldr	r2, [r6, #12]
   153de:	4628      	mov	r0, r5
   153e0:	6821      	ldr	r1, [r4, #0]
   153e2:	4790      	blx	r2
   153e4:	e7d7      	b.n	15396 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   153e6:	b95a      	cbnz	r2, 15400 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   153e8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   153ec:	2202      	movs	r2, #2
   153ee:	68cb      	ldr	r3, [r1, #12]
   153f0:	f24e 2100 	movw	r1, #57856	; 0xe200
   153f4:	f2c0 0101 	movt	r1, #1
   153f8:	4798      	blx	r3
   153fa:	2800      	cmp	r0, #0
   153fc:	d1ca      	bne.n	15394 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   153fe:	6821      	ldr	r1, [r4, #0]
   15400:	2001      	movs	r0, #1
   15402:	f10d 030f 	add.w	r3, sp, #15
   15406:	f88d 000f 	strb.w	r0, [sp, #15]
   1540a:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   1540e:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   15412:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   15416:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   1541a:	f891 1020 	ldrb.w	r1, [r1, #32]
   1541e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   15422:	a904      	add	r1, sp, #16
   15424:	e9cd 0204 	strd	r0, r2, [sp, #16]
   15428:	f24e 10e4 	movw	r0, #57828	; 0xe1e4
   1542c:	f2c0 0001 	movt	r0, #1
   15430:	68f2      	ldr	r2, [r6, #12]
   15432:	900b      	str	r0, [sp, #44]	; 0x2c
   15434:	4668      	mov	r0, sp
   15436:	900a      	str	r0, [sp, #40]	; 0x28
   15438:	4628      	mov	r0, r5
   1543a:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1543e:	e9cd ce06 	strd	ip, lr, [sp, #24]
   15442:	4790      	blx	r2
   15444:	2800      	cmp	r0, #0
   15446:	d1a5      	bne.n	15394 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   15448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1544c:	2202      	movs	r2, #2
   1544e:	68cb      	ldr	r3, [r1, #12]
   15450:	f24e 11fc 	movw	r1, #57852	; 0xe1fc
   15454:	f2c0 0101 	movt	r1, #1
   15458:	4798      	blx	r3
   1545a:	e79c      	b.n	15396 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

0001545c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   1545c:	b5b0      	push	{r4, r5, r7, lr}
   1545e:	4604      	mov	r4, r0
   15460:	7a05      	ldrb	r5, [r0, #8]
   15462:	6840      	ldr	r0, [r0, #4]
   15464:	b308      	cbz	r0, 154aa <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   15466:	b10d      	cbz	r5, 1546c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   15468:	2501      	movs	r5, #1
   1546a:	e01d      	b.n	154a8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   1546c:	2801      	cmp	r0, #1
   1546e:	d110      	bne.n	15492 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15470:	7a60      	ldrb	r0, [r4, #9]
   15472:	b170      	cbz	r0, 15492 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15474:	6821      	ldr	r1, [r4, #0]
   15476:	7808      	ldrb	r0, [r1, #0]
   15478:	0740      	lsls	r0, r0, #29
   1547a:	d40a      	bmi.n	15492 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   1547c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15480:	2201      	movs	r2, #1
   15482:	68cb      	ldr	r3, [r1, #12]
   15484:	f24e 2103 	movw	r1, #57859	; 0xe203
   15488:	f2c0 0101 	movt	r1, #1
   1548c:	2501      	movs	r5, #1
   1548e:	4798      	blx	r3
   15490:	b950      	cbnz	r0, 154a8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   15492:	6821      	ldr	r1, [r4, #0]
   15494:	2201      	movs	r2, #1
   15496:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1549a:	68cb      	ldr	r3, [r1, #12]
   1549c:	f24e 2104 	movw	r1, #57860	; 0xe204
   154a0:	f2c0 0101 	movt	r1, #1
   154a4:	4798      	blx	r3
   154a6:	4605      	mov	r5, r0
   154a8:	7225      	strb	r5, [r4, #8]
   154aa:	2d00      	cmp	r5, #0
   154ac:	bf18      	it	ne
   154ae:	2501      	movne	r5, #1
   154b0:	4628      	mov	r0, r5
   154b2:	bdb0      	pop	{r4, r5, r7, pc}

000154b4 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   154b4:	b580      	push	{r7, lr}
   154b6:	b082      	sub	sp, #8
   154b8:	468c      	mov	ip, r1
   154ba:	2100      	movs	r1, #0
   154bc:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   154c0:	9101      	str	r1, [sp, #4]
   154c2:	d207      	bcs.n	154d4 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   154c4:	f88d c004 	strb.w	ip, [sp, #4]
   154c8:	a901      	add	r1, sp, #4
   154ca:	2201      	movs	r2, #1
   154cc:	f7ff fe47 	bl	1515e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   154d0:	b002      	add	sp, #8
   154d2:	bd80      	pop	{r7, pc}
   154d4:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   154d8:	d210      	bcs.n	154fc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   154da:	ea4f 119c 	mov.w	r1, ip, lsr #6
   154de:	2306      	movs	r3, #6
   154e0:	2202      	movs	r2, #2
   154e2:	f363 115f 	bfi	r1, r3, #5, #27
   154e6:	f362 1c9f 	bfi	ip, r2, #6, #26
   154ea:	f88d c005 	strb.w	ip, [sp, #5]
   154ee:	f88d 1004 	strb.w	r1, [sp, #4]
   154f2:	a901      	add	r1, sp, #4
   154f4:	f7ff fe33 	bl	1515e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   154f8:	b002      	add	sp, #8
   154fa:	bd80      	pop	{r7, pc}
   154fc:	2202      	movs	r2, #2
   154fe:	4663      	mov	r3, ip
   15500:	a901      	add	r1, sp, #4
   15502:	f362 139f 	bfi	r3, r2, #6, #26
   15506:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   1550a:	d213      	bcs.n	15534 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   1550c:	f88d 3006 	strb.w	r3, [sp, #6]
   15510:	ea4f 139c 	mov.w	r3, ip, lsr #6
   15514:	f362 139f 	bfi	r3, r2, #6, #26
   15518:	f88d 3005 	strb.w	r3, [sp, #5]
   1551c:	ea4f 321c 	mov.w	r2, ip, lsr #12
   15520:	230e      	movs	r3, #14
   15522:	f363 121f 	bfi	r2, r3, #4, #28
   15526:	f88d 2004 	strb.w	r2, [sp, #4]
   1552a:	2203      	movs	r2, #3
   1552c:	f7ff fe17 	bl	1515e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15530:	b002      	add	sp, #8
   15532:	bd80      	pop	{r7, pc}
   15534:	f88d 3007 	strb.w	r3, [sp, #7]
   15538:	ea4f 139c 	mov.w	r3, ip, lsr #6
   1553c:	f362 139f 	bfi	r3, r2, #6, #26
   15540:	f88d 3006 	strb.w	r3, [sp, #6]
   15544:	ea4f 331c 	mov.w	r3, ip, lsr #12
   15548:	f362 139f 	bfi	r3, r2, #6, #26
   1554c:	22f0      	movs	r2, #240	; 0xf0
   1554e:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   15552:	f88d 3005 	strb.w	r3, [sp, #5]
   15556:	f88d 2004 	strb.w	r2, [sp, #4]
   1555a:	2204      	movs	r2, #4
   1555c:	f7ff fdff 	bl	1515e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15560:	b002      	add	sp, #8
   15562:	bd80      	pop	{r7, pc}

00015564 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   15564:	b570      	push	{r4, r5, r6, lr}
   15566:	b088      	sub	sp, #32
   15568:	9001      	str	r0, [sp, #4]
   1556a:	aa02      	add	r2, sp, #8
   1556c:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   15570:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
   15574:	4610      	mov	r0, r2
   15576:	f2c0 0101 	movt	r1, #1
   1557a:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   1557e:	a801      	add	r0, sp, #4
   15580:	f000 f89e 	bl	156c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15584:	b008      	add	sp, #32
   15586:	bd70      	pop	{r4, r5, r6, pc}

00015588 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   15588:	6800      	ldr	r0, [r0, #0]
   1558a:	f7ff bde8 	b.w	1515e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

0001558e <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   1558e:	6800      	ldr	r0, [r0, #0]
   15590:	f7ff bf90 	b.w	154b4 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00015594 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   15594:	b570      	push	{r4, r5, r6, lr}
   15596:	b088      	sub	sp, #32
   15598:	6800      	ldr	r0, [r0, #0]
   1559a:	aa02      	add	r2, sp, #8
   1559c:	9001      	str	r0, [sp, #4]
   1559e:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   155a2:	4610      	mov	r0, r2
   155a4:	f24e 21d0 	movw	r1, #58064	; 0xe2d0
   155a8:	f2c0 0101 	movt	r1, #1
   155ac:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   155b0:	a801      	add	r0, sp, #4
   155b2:	f000 f885 	bl	156c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   155b6:	b008      	add	sp, #32
   155b8:	bd70      	pop	{r4, r5, r6, pc}

000155ba <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   155ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155be:	b08d      	sub	sp, #52	; 0x34
   155c0:	468c      	mov	ip, r1
   155c2:	6801      	ldr	r1, [r0, #0]
   155c4:	f248 5e1f 	movw	lr, #34079	; 0x851f
   155c8:	f24e 2007 	movw	r0, #57863	; 0xe207
   155cc:	f242 7810 	movw	r8, #10000	; 0x2710
   155d0:	4541      	cmp	r1, r8
   155d2:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   155d6:	f2c0 0001 	movt	r0, #1
   155da:	d337      	bcc.n	1564c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   155dc:	f241 7959 	movw	r9, #5977	; 0x1759
   155e0:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   155e4:	f10d 0b0c 	add.w	fp, sp, #12
   155e8:	2300      	movs	r3, #0
   155ea:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   155ee:	f04f 0a64 	mov.w	sl, #100	; 0x64
   155f2:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   155f6:	fba1 2409 	umull	r2, r4, r1, r9
   155fa:	42b9      	cmp	r1, r7
   155fc:	ea4f 3254 	mov.w	r2, r4, lsr #13
   15600:	fb02 1418 	mls	r4, r2, r8, r1
   15604:	4611      	mov	r1, r2
   15606:	b2a5      	uxth	r5, r4
   15608:	fba5 560e 	umull	r5, r6, r5, lr
   1560c:	ea4f 1556 	mov.w	r5, r6, lsr #5
   15610:	eb0b 0603 	add.w	r6, fp, r3
   15614:	fb05 441a 	mls	r4, r5, sl, r4
   15618:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1561c:	f1a3 0304 	sub.w	r3, r3, #4
   15620:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   15624:	b2a4      	uxth	r4, r4
   15626:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1562a:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1562e:	d8e2      	bhi.n	155f6 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   15630:	f103 0427 	add.w	r4, r3, #39	; 0x27
   15634:	4611      	mov	r1, r2
   15636:	2963      	cmp	r1, #99	; 0x63
   15638:	dc0b      	bgt.n	15652 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   1563a:	460b      	mov	r3, r1
   1563c:	2b0a      	cmp	r3, #10
   1563e:	db17      	blt.n	15670 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   15640:	1ea1      	subs	r1, r4, #2
   15642:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   15646:	aa03      	add	r2, sp, #12
   15648:	5250      	strh	r0, [r2, r1]
   1564a:	e016      	b.n	1567a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   1564c:	2427      	movs	r4, #39	; 0x27
   1564e:	2963      	cmp	r1, #99	; 0x63
   15650:	ddf3      	ble.n	1563a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   15652:	b28a      	uxth	r2, r1
   15654:	3c02      	subs	r4, #2
   15656:	fba2 230e 	umull	r2, r3, r2, lr
   1565a:	2264      	movs	r2, #100	; 0x64
   1565c:	095b      	lsrs	r3, r3, #5
   1565e:	fb03 1112 	mls	r1, r3, r2, r1
   15662:	aa03      	add	r2, sp, #12
   15664:	b289      	uxth	r1, r1
   15666:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1566a:	5311      	strh	r1, [r2, r4]
   1566c:	2b0a      	cmp	r3, #10
   1566e:	dae7      	bge.n	15640 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   15670:	1e61      	subs	r1, r4, #1
   15672:	aa03      	add	r2, sp, #12
   15674:	f103 0030 	add.w	r0, r3, #48	; 0x30
   15678:	5450      	strb	r0, [r2, r1]
   1567a:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1567e:	aa03      	add	r2, sp, #12
   15680:	4411      	add	r1, r2
   15682:	f64d 72d4 	movw	r2, #57300	; 0xdfd4
   15686:	e9cd 1000 	strd	r1, r0, [sp]
   1568a:	f2c0 0201 	movt	r2, #1
   1568e:	4660      	mov	r0, ip
   15690:	2101      	movs	r1, #1
   15692:	2300      	movs	r3, #0
   15694:	f000 f8f4 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15698:	b00d      	add	sp, #52	; 0x34
   1569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001569e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   1569e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156a2:	b086      	sub	sp, #24
   156a4:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   156a8:	466a      	mov	r2, sp
   156aa:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   156ae:	4613      	mov	r3, r2
   156b0:	4660      	mov	r0, ip
   156b2:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   156b6:	f000 f803 	bl	156c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   156ba:	b006      	add	sp, #24
   156bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000156c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   156c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156c4:	b08b      	sub	sp, #44	; 0x2c
   156c6:	2303      	movs	r3, #3
   156c8:	6897      	ldr	r7, [r2, #8]
   156ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   156ce:	2320      	movs	r3, #32
   156d0:	9303      	str	r3, [sp, #12]
   156d2:	2300      	movs	r3, #0
   156d4:	2f00      	cmp	r7, #0
   156d6:	9302      	str	r3, [sp, #8]
   156d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   156dc:	9306      	str	r3, [sp, #24]
   156de:	9304      	str	r3, [sp, #16]
   156e0:	d07c      	beq.n	157dc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   156e2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   156e6:	e9d2 9400 	ldrd	r9, r4, [r2]
   156ea:	45a3      	cmp	fp, r4
   156ec:	bf88      	it	hi
   156ee:	46a3      	movhi	fp, r4
   156f0:	f1bb 0f00 	cmp.w	fp, #0
   156f4:	f000 809b 	beq.w	1582e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   156f8:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   156fc:	68cd      	ldr	r5, [r1, #12]
   156fe:	9201      	str	r2, [sp, #4]
   15700:	e9d9 3200 	ldrd	r3, r2, [r9]
   15704:	4619      	mov	r1, r3
   15706:	47a8      	blx	r5
   15708:	2800      	cmp	r0, #0
   1570a:	f040 809e 	bne.w	1584a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1570e:	464d      	mov	r5, r9
   15710:	f04f 0a01 	mov.w	sl, #1
   15714:	f04f 0800 	mov.w	r8, #0
   15718:	f04f 0910 	mov.w	r9, #16
   1571c:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   15720:	6841      	ldr	r1, [r0, #4]
   15722:	9103      	str	r1, [sp, #12]
   15724:	7f01      	ldrb	r1, [r0, #28]
   15726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1572a:	6881      	ldr	r1, [r0, #8]
   1572c:	9102      	str	r1, [sp, #8]
   1572e:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   15732:	b18a      	cbz	r2, 15758 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   15734:	2a02      	cmp	r2, #2
   15736:	d011      	beq.n	1575c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15738:	9a01      	ldr	r2, [sp, #4]
   1573a:	4291      	cmp	r1, r2
   1573c:	f080 8098 	bcs.w	15870 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15740:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   15744:	f245 53bb 	movw	r3, #21947	; 0x55bb
   15748:	f2c0 0301 	movt	r3, #1
   1574c:	6852      	ldr	r2, [r2, #4]
   1574e:	429a      	cmp	r2, r3
   15750:	d104      	bne.n	1575c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15752:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   15756:	6809      	ldr	r1, [r1, #0]
   15758:	2201      	movs	r2, #1
   1575a:	e000      	b.n	1575e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   1575c:	2200      	movs	r2, #0
   1575e:	e9cd 2104 	strd	r2, r1, [sp, #16]
   15762:	f857 1009 	ldr.w	r1, [r7, r9]
   15766:	68c0      	ldr	r0, [r0, #12]
   15768:	b180      	cbz	r0, 1578c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   1576a:	2802      	cmp	r0, #2
   1576c:	d010      	beq.n	15790 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1576e:	9801      	ldr	r0, [sp, #4]
   15770:	4281      	cmp	r1, r0
   15772:	d27d      	bcs.n	15870 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15774:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   15778:	f245 52bb 	movw	r2, #21947	; 0x55bb
   1577c:	f2c0 0201 	movt	r2, #1
   15780:	6840      	ldr	r0, [r0, #4]
   15782:	4290      	cmp	r0, r2
   15784:	d104      	bne.n	15790 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15786:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1578a:	6801      	ldr	r1, [r0, #0]
   1578c:	2001      	movs	r0, #1
   1578e:	e000      	b.n	15792 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   15790:	2000      	movs	r0, #0
   15792:	eb07 0209 	add.w	r2, r7, r9
   15796:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1579a:	9801      	ldr	r0, [sp, #4]
   1579c:	f852 1c10 	ldr.w	r1, [r2, #-16]
   157a0:	4281      	cmp	r1, r0
   157a2:	d25d      	bcs.n	15860 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   157a4:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   157a8:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   157ac:	684a      	ldr	r2, [r1, #4]
   157ae:	a902      	add	r1, sp, #8
   157b0:	4790      	blx	r2
   157b2:	2800      	cmp	r0, #0
   157b4:	d149      	bne.n	1584a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   157b6:	45da      	cmp	sl, fp
   157b8:	d24b      	bcs.n	15852 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   157ba:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   157be:	eb05 0208 	add.w	r2, r5, r8
   157c2:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   157c6:	68db      	ldr	r3, [r3, #12]
   157c8:	4798      	blx	r3
   157ca:	f109 0920 	add.w	r9, r9, #32
   157ce:	f108 0808 	add.w	r8, r8, #8
   157d2:	f10a 0a01 	add.w	sl, sl, #1
   157d6:	2800      	cmp	r0, #0
   157d8:	d0a0      	beq.n	1571c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   157da:	e036      	b.n	1584a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   157dc:	6956      	ldr	r6, [r2, #20]
   157de:	e9d2 9400 	ldrd	r9, r4, [r2]
   157e2:	42a6      	cmp	r6, r4
   157e4:	bf88      	it	hi
   157e6:	4626      	movhi	r6, r4
   157e8:	b30e      	cbz	r6, 1582e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   157ea:	6917      	ldr	r7, [r2, #16]
   157ec:	e9d9 3200 	ldrd	r3, r2, [r9]
   157f0:	68cd      	ldr	r5, [r1, #12]
   157f2:	4619      	mov	r1, r3
   157f4:	47a8      	blx	r5
   157f6:	bb40      	cbnz	r0, 1584a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   157f8:	f10d 0808 	add.w	r8, sp, #8
   157fc:	2500      	movs	r5, #0
   157fe:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   15802:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   15806:	684a      	ldr	r2, [r1, #4]
   15808:	4641      	mov	r1, r8
   1580a:	4790      	blx	r2
   1580c:	b9e8      	cbnz	r0, 1584a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1580e:	f105 0a01 	add.w	sl, r5, #1
   15812:	45b2      	cmp	sl, r6
   15814:	d20d      	bcs.n	15832 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   15816:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1581a:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   1581e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15822:	68db      	ldr	r3, [r3, #12]
   15824:	4798      	blx	r3
   15826:	2800      	cmp	r0, #0
   15828:	4655      	mov	r5, sl
   1582a:	d0e8      	beq.n	157fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   1582c:	e00d      	b.n	1584a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1582e:	f04f 0a00 	mov.w	sl, #0
   15832:	4554      	cmp	r4, sl
   15834:	d910      	bls.n	15858 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   15836:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   1583a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1583e:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   15842:	6852      	ldr	r2, [r2, #4]
   15844:	68db      	ldr	r3, [r3, #12]
   15846:	4798      	blx	r3
   15848:	b130      	cbz	r0, 15858 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1584a:	2001      	movs	r0, #1
   1584c:	b00b      	add	sp, #44	; 0x2c
   1584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15852:	46a9      	mov	r9, r5
   15854:	4554      	cmp	r4, sl
   15856:	d8ee      	bhi.n	15836 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   15858:	2000      	movs	r0, #0
   1585a:	b00b      	add	sp, #44	; 0x2c
   1585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15860:	f24e 3000 	movw	r0, #58112	; 0xe300
   15864:	f2c0 0001 	movt	r0, #1
   15868:	9a01      	ldr	r2, [sp, #4]
   1586a:	f7ff fc47 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1586e:	defe      	udf	#254	; 0xfe
   15870:	f24e 3010 	movw	r0, #58128	; 0xe310
   15874:	f2c0 0001 	movt	r0, #1
   15878:	9a01      	ldr	r2, [sp, #4]
   1587a:	f7ff fc3f 	bl	150fc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1587e:	defe      	udf	#254	; 0xfe

00015880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   15880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15884:	b083      	sub	sp, #12
   15886:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   1588a:	469a      	mov	sl, r3
   1588c:	4604      	mov	r4, r0
   1588e:	b1e1      	cbz	r1, 158ca <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   15890:	f8d4 e000 	ldr.w	lr, [r4]
   15894:	f04f 082b 	mov.w	r8, #43	; 0x2b
   15898:	f01e 0101 	ands.w	r1, lr, #1
   1589c:	bf08      	it	eq
   1589e:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   158a2:	eb01 0907 	add.w	r9, r1, r7
   158a6:	ea5f 714e 	movs.w	r1, lr, lsl #29
   158aa:	d517      	bpl.n	158dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   158ac:	f1ba 0f00 	cmp.w	sl, #0
   158b0:	d033      	beq.n	1591a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   158b2:	f1aa 0101 	sub.w	r1, sl, #1
   158b6:	f00a 0c03 	and.w	ip, sl, #3
   158ba:	2903      	cmp	r1, #3
   158bc:	d22f      	bcs.n	1591e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   158be:	2100      	movs	r1, #0
   158c0:	4613      	mov	r3, r2
   158c2:	f1bc 0f00 	cmp.w	ip, #0
   158c6:	d152      	bne.n	1596e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   158c8:	e069      	b.n	1599e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   158ca:	f8d4 e000 	ldr.w	lr, [r4]
   158ce:	f107 0901 	add.w	r9, r7, #1
   158d2:	f04f 082d 	mov.w	r8, #45	; 0x2d
   158d6:	ea5f 714e 	movs.w	r1, lr, lsl #29
   158da:	d4e7      	bmi.n	158ac <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   158dc:	f04f 0a00 	mov.w	sl, #0
   158e0:	2200      	movs	r2, #0
   158e2:	68a0      	ldr	r0, [r4, #8]
   158e4:	2801      	cmp	r0, #1
   158e6:	d161      	bne.n	159ac <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   158e8:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   158ec:	45cb      	cmp	fp, r9
   158ee:	d95d      	bls.n	159ac <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   158f0:	ea5f 700e 	movs.w	r0, lr, lsl #28
   158f4:	d46e      	bmi.n	159d4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   158f6:	9202      	str	r2, [sp, #8]
   158f8:	ebab 0109 	sub.w	r1, fp, r9
   158fc:	f894 2020 	ldrb.w	r2, [r4, #32]
   15900:	2000      	movs	r0, #0
   15902:	46a9      	mov	r9, r5
   15904:	460e      	mov	r6, r1
   15906:	2a03      	cmp	r2, #3
   15908:	bf08      	it	eq
   1590a:	2201      	moveq	r2, #1
   1590c:	e8df f002 	tbb	[pc, r2]
   15910:	02840287 	.word	0x02840287
   15914:	2600      	movs	r6, #0
   15916:	4608      	mov	r0, r1
   15918:	e081      	b.n	15a1e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   1591a:	2100      	movs	r1, #0
   1591c:	e03f      	b.n	1599e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1591e:	ebac 060a 	sub.w	r6, ip, sl
   15922:	2100      	movs	r1, #0
   15924:	4693      	mov	fp, r2
   15926:	4613      	mov	r3, r2
   15928:	e9cd 7501 	strd	r7, r5, [sp, #4]
   1592c:	781a      	ldrb	r2, [r3, #0]
   1592e:	785d      	ldrb	r5, [r3, #1]
   15930:	7898      	ldrb	r0, [r3, #2]
   15932:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15936:	78df      	ldrb	r7, [r3, #3]
   15938:	2a80      	cmp	r2, #128	; 0x80
   1593a:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   1593e:	bf08      	it	eq
   15940:	3101      	addeq	r1, #1
   15942:	2a80      	cmp	r2, #128	; 0x80
   15944:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15948:	bf08      	it	eq
   1594a:	3101      	addeq	r1, #1
   1594c:	2880      	cmp	r0, #128	; 0x80
   1594e:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   15952:	bf08      	it	eq
   15954:	3101      	addeq	r1, #1
   15956:	2880      	cmp	r0, #128	; 0x80
   15958:	bf08      	it	eq
   1595a:	3101      	addeq	r1, #1
   1595c:	3304      	adds	r3, #4
   1595e:	3604      	adds	r6, #4
   15960:	d1e4      	bne.n	1592c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   15962:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   15966:	465a      	mov	r2, fp
   15968:	f1bc 0f00 	cmp.w	ip, #0
   1596c:	d017      	beq.n	1599e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1596e:	7818      	ldrb	r0, [r3, #0]
   15970:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15974:	2880      	cmp	r0, #128	; 0x80
   15976:	bf08      	it	eq
   15978:	3101      	addeq	r1, #1
   1597a:	f1bc 0f01 	cmp.w	ip, #1
   1597e:	d00e      	beq.n	1599e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15980:	7858      	ldrb	r0, [r3, #1]
   15982:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15986:	2880      	cmp	r0, #128	; 0x80
   15988:	bf08      	it	eq
   1598a:	3101      	addeq	r1, #1
   1598c:	f1bc 0f02 	cmp.w	ip, #2
   15990:	d005      	beq.n	1599e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15992:	7898      	ldrb	r0, [r3, #2]
   15994:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15998:	2880      	cmp	r0, #128	; 0x80
   1599a:	bf08      	it	eq
   1599c:	3101      	addeq	r1, #1
   1599e:	eb09 000a 	add.w	r0, r9, sl
   159a2:	eba0 0901 	sub.w	r9, r0, r1
   159a6:	68a0      	ldr	r0, [r4, #8]
   159a8:	2801      	cmp	r0, #1
   159aa:	d09d      	beq.n	158e8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   159ac:	4620      	mov	r0, r4
   159ae:	4641      	mov	r1, r8
   159b0:	4653      	mov	r3, sl
   159b2:	f000 f893 	bl	15adc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   159b6:	b120      	cbz	r0, 159c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   159b8:	2601      	movs	r6, #1
   159ba:	4630      	mov	r0, r6
   159bc:	b003      	add	sp, #12
   159be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c2:	69e1      	ldr	r1, [r4, #28]
   159c4:	463a      	mov	r2, r7
   159c6:	69a0      	ldr	r0, [r4, #24]
   159c8:	68cb      	ldr	r3, [r1, #12]
   159ca:	4629      	mov	r1, r5
   159cc:	b003      	add	sp, #12
   159ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159d2:	4718      	bx	r3
   159d4:	6860      	ldr	r0, [r4, #4]
   159d6:	2601      	movs	r6, #1
   159d8:	9002      	str	r0, [sp, #8]
   159da:	2030      	movs	r0, #48	; 0x30
   159dc:	f894 1020 	ldrb.w	r1, [r4, #32]
   159e0:	4653      	mov	r3, sl
   159e2:	6060      	str	r0, [r4, #4]
   159e4:	4620      	mov	r0, r4
   159e6:	9101      	str	r1, [sp, #4]
   159e8:	4641      	mov	r1, r8
   159ea:	f884 6020 	strb.w	r6, [r4, #32]
   159ee:	f000 f875 	bl	15adc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   159f2:	2800      	cmp	r0, #0
   159f4:	d1e1      	bne.n	159ba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   159f6:	f894 2020 	ldrb.w	r2, [r4, #32]
   159fa:	ebab 0109 	sub.w	r1, fp, r9
   159fe:	2000      	movs	r0, #0
   15a00:	46a9      	mov	r9, r5
   15a02:	2a03      	cmp	r2, #3
   15a04:	bf08      	it	eq
   15a06:	2201      	moveq	r2, #1
   15a08:	460e      	mov	r6, r1
   15a0a:	e8df f002 	tbb	[pc, r2]
   15a0e:	0235      	.short	0x0235
   15a10:	0232      	.short	0x0232
   15a12:	2600      	movs	r6, #0
   15a14:	4608      	mov	r0, r1
   15a16:	e02f      	b.n	15a78 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   15a18:	0848      	lsrs	r0, r1, #1
   15a1a:	3101      	adds	r1, #1
   15a1c:	084e      	lsrs	r6, r1, #1
   15a1e:	1c45      	adds	r5, r0, #1
   15a20:	3d01      	subs	r5, #1
   15a22:	d007      	beq.n	15a34 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   15a24:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15a28:	6861      	ldr	r1, [r4, #4]
   15a2a:	6912      	ldr	r2, [r2, #16]
   15a2c:	4790      	blx	r2
   15a2e:	2800      	cmp	r0, #0
   15a30:	d0f6      	beq.n	15a20 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   15a32:	e7c1      	b.n	159b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15a34:	9a02      	ldr	r2, [sp, #8]
   15a36:	4620      	mov	r0, r4
   15a38:	4641      	mov	r1, r8
   15a3a:	4653      	mov	r3, sl
   15a3c:	f8d4 b004 	ldr.w	fp, [r4, #4]
   15a40:	f000 f84c 	bl	15adc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15a44:	2800      	cmp	r0, #0
   15a46:	d1b7      	bne.n	159b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15a48:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15a4c:	463a      	mov	r2, r7
   15a4e:	68cb      	ldr	r3, [r1, #12]
   15a50:	4649      	mov	r1, r9
   15a52:	4798      	blx	r3
   15a54:	2800      	cmp	r0, #0
   15a56:	d1af      	bne.n	159b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15a58:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   15a5c:	1c77      	adds	r7, r6, #1
   15a5e:	2601      	movs	r6, #1
   15a60:	3f01      	subs	r7, #1
   15a62:	d02c      	beq.n	15abe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   15a64:	6922      	ldr	r2, [r4, #16]
   15a66:	4628      	mov	r0, r5
   15a68:	4659      	mov	r1, fp
   15a6a:	4790      	blx	r2
   15a6c:	2800      	cmp	r0, #0
   15a6e:	d0f7      	beq.n	15a60 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   15a70:	e7a3      	b.n	159ba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15a72:	0848      	lsrs	r0, r1, #1
   15a74:	3101      	adds	r1, #1
   15a76:	084e      	lsrs	r6, r1, #1
   15a78:	1c45      	adds	r5, r0, #1
   15a7a:	3d01      	subs	r5, #1
   15a7c:	d007      	beq.n	15a8e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   15a7e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15a82:	6861      	ldr	r1, [r4, #4]
   15a84:	6912      	ldr	r2, [r2, #16]
   15a86:	4790      	blx	r2
   15a88:	2800      	cmp	r0, #0
   15a8a:	d0f6      	beq.n	15a7a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   15a8c:	e794      	b.n	159b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15a8e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15a92:	463a      	mov	r2, r7
   15a94:	68cb      	ldr	r3, [r1, #12]
   15a96:	4649      	mov	r1, r9
   15a98:	f8d4 8004 	ldr.w	r8, [r4, #4]
   15a9c:	4798      	blx	r3
   15a9e:	2800      	cmp	r0, #0
   15aa0:	f47f af8a 	bne.w	159b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15aa4:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   15aa8:	1c77      	adds	r7, r6, #1
   15aaa:	2601      	movs	r6, #1
   15aac:	3f01      	subs	r7, #1
   15aae:	d00b      	beq.n	15ac8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   15ab0:	692a      	ldr	r2, [r5, #16]
   15ab2:	4648      	mov	r0, r9
   15ab4:	4641      	mov	r1, r8
   15ab6:	4790      	blx	r2
   15ab8:	2800      	cmp	r0, #0
   15aba:	d0f7      	beq.n	15aac <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   15abc:	e77d      	b.n	159ba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15abe:	2600      	movs	r6, #0
   15ac0:	4630      	mov	r0, r6
   15ac2:	b003      	add	sp, #12
   15ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ac8:	9801      	ldr	r0, [sp, #4]
   15aca:	2600      	movs	r6, #0
   15acc:	f884 0020 	strb.w	r0, [r4, #32]
   15ad0:	9802      	ldr	r0, [sp, #8]
   15ad2:	6060      	str	r0, [r4, #4]
   15ad4:	4630      	mov	r0, r6
   15ad6:	b003      	add	sp, #12
   15ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015adc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   15adc:	b570      	push	{r4, r5, r6, lr}
   15ade:	461c      	mov	r4, r3
   15ae0:	4615      	mov	r5, r2
   15ae2:	4606      	mov	r6, r0
   15ae4:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   15ae8:	d006      	beq.n	15af8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15aea:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   15aee:	6912      	ldr	r2, [r2, #16]
   15af0:	4790      	blx	r2
   15af2:	b108      	cbz	r0, 15af8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15af4:	2001      	movs	r0, #1
   15af6:	bd70      	pop	{r4, r5, r6, pc}
   15af8:	b13d      	cbz	r5, 15b0a <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   15afa:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   15afe:	4622      	mov	r2, r4
   15b00:	68cb      	ldr	r3, [r1, #12]
   15b02:	4629      	mov	r1, r5
   15b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15b08:	4718      	bx	r3
   15b0a:	2000      	movs	r0, #0
   15b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

00015b10 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   15b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b14:	b081      	sub	sp, #4
   15b16:	f8d0 e008 	ldr.w	lr, [r0, #8]
   15b1a:	4682      	mov	sl, r0
   15b1c:	6900      	ldr	r0, [r0, #16]
   15b1e:	4691      	mov	r9, r2
   15b20:	4688      	mov	r8, r1
   15b22:	f1be 0f01 	cmp.w	lr, #1
   15b26:	d111      	bne.n	15b4c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   15b28:	2801      	cmp	r0, #1
   15b2a:	d012      	beq.n	15b52 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   15b2c:	f1b9 0f00 	cmp.w	r9, #0
   15b30:	f000 80c5 	beq.w	15cbe <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   15b34:	f1a9 0101 	sub.w	r1, r9, #1
   15b38:	f009 0003 	and.w	r0, r9, #3
   15b3c:	2903      	cmp	r1, #3
   15b3e:	d267      	bcs.n	15c10 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   15b40:	2100      	movs	r1, #0
   15b42:	4642      	mov	r2, r8
   15b44:	2800      	cmp	r0, #0
   15b46:	f040 8083 	bne.w	15c50 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   15b4a:	e097      	b.n	15c7c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15b4c:	2801      	cmp	r0, #1
   15b4e:	f040 80bd 	bne.w	15ccc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   15b52:	f1b9 0f00 	cmp.w	r9, #0
   15b56:	d054      	beq.n	15c02 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   15b58:	f8da 0014 	ldr.w	r0, [sl, #20]
   15b5c:	eb08 0109 	add.w	r1, r8, r9
   15b60:	2200      	movs	r2, #0
   15b62:	4647      	mov	r7, r8
   15b64:	1c43      	adds	r3, r0, #1
   15b66:	4646      	mov	r6, r8
   15b68:	463c      	mov	r4, r7
   15b6a:	f914 5b01 	ldrsb.w	r5, [r4], #1
   15b6e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   15b72:	b2e8      	uxtb	r0, r5
   15b74:	dc2e      	bgt.n	15bd4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15b76:	428c      	cmp	r4, r1
   15b78:	d01a      	beq.n	15bb0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   15b7a:	787d      	ldrb	r5, [r7, #1]
   15b7c:	1cbc      	adds	r4, r7, #2
   15b7e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   15b82:	4627      	mov	r7, r4
   15b84:	f000 0b1f 	and.w	fp, r0, #31
   15b88:	28df      	cmp	r0, #223	; 0xdf
   15b8a:	d917      	bls.n	15bbc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   15b8c:	428f      	cmp	r7, r1
   15b8e:	d018      	beq.n	15bc2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   15b90:	f817 4b01 	ldrb.w	r4, [r7], #1
   15b94:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   15b98:	463c      	mov	r4, r7
   15b9a:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15b9e:	28f0      	cmp	r0, #240	; 0xf0
   15ba0:	d316      	bcc.n	15bd0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   15ba2:	428f      	cmp	r7, r1
   15ba4:	d020      	beq.n	15be8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   15ba6:	f817 0b01 	ldrb.w	r0, [r7], #1
   15baa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15bae:	e01d      	b.n	15bec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   15bb0:	2500      	movs	r5, #0
   15bb2:	460f      	mov	r7, r1
   15bb4:	f000 0b1f 	and.w	fp, r0, #31
   15bb8:	28df      	cmp	r0, #223	; 0xdf
   15bba:	d8e7      	bhi.n	15b8c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   15bbc:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   15bc0:	e008      	b.n	15bd4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15bc2:	f04f 0c00 	mov.w	ip, #0
   15bc6:	460f      	mov	r7, r1
   15bc8:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15bcc:	28f0      	cmp	r0, #240	; 0xf0
   15bce:	d2e8      	bcs.n	15ba2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   15bd0:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   15bd4:	4627      	mov	r7, r4
   15bd6:	3b01      	subs	r3, #1
   15bd8:	d065      	beq.n	15ca6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   15bda:	1b90      	subs	r0, r2, r6
   15bdc:	42b9      	cmp	r1, r7
   15bde:	eb00 0207 	add.w	r2, r0, r7
   15be2:	463e      	mov	r6, r7
   15be4:	d1c0      	bne.n	15b68 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   15be6:	e061      	b.n	15cac <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   15be8:	2000      	movs	r0, #0
   15bea:	4627      	mov	r7, r4
   15bec:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   15bf0:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   15bf4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   15bf8:	4428      	add	r0, r5
   15bfa:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   15bfe:	d1ea      	bne.n	15bd6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   15c00:	e054      	b.n	15cac <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   15c02:	2200      	movs	r2, #0
   15c04:	f1be 0f01 	cmp.w	lr, #1
   15c08:	d054      	beq.n	15cb4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15c0a:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   15c0e:	e062      	b.n	15cd6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   15c10:	eba0 0309 	sub.w	r3, r0, r9
   15c14:	2100      	movs	r1, #0
   15c16:	4642      	mov	r2, r8
   15c18:	7817      	ldrb	r7, [r2, #0]
   15c1a:	7856      	ldrb	r6, [r2, #1]
   15c1c:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   15c20:	7895      	ldrb	r5, [r2, #2]
   15c22:	78d4      	ldrb	r4, [r2, #3]
   15c24:	2f80      	cmp	r7, #128	; 0x80
   15c26:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   15c2a:	bf08      	it	eq
   15c2c:	3101      	addeq	r1, #1
   15c2e:	2f80      	cmp	r7, #128	; 0x80
   15c30:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   15c34:	bf08      	it	eq
   15c36:	3101      	addeq	r1, #1
   15c38:	2f80      	cmp	r7, #128	; 0x80
   15c3a:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   15c3e:	bf08      	it	eq
   15c40:	3101      	addeq	r1, #1
   15c42:	2f80      	cmp	r7, #128	; 0x80
   15c44:	bf08      	it	eq
   15c46:	3101      	addeq	r1, #1
   15c48:	3204      	adds	r2, #4
   15c4a:	3304      	adds	r3, #4
   15c4c:	d1e4      	bne.n	15c18 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   15c4e:	b1a8      	cbz	r0, 15c7c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15c50:	7813      	ldrb	r3, [r2, #0]
   15c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15c56:	2b80      	cmp	r3, #128	; 0x80
   15c58:	bf08      	it	eq
   15c5a:	3101      	addeq	r1, #1
   15c5c:	2801      	cmp	r0, #1
   15c5e:	d00d      	beq.n	15c7c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15c60:	7853      	ldrb	r3, [r2, #1]
   15c62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15c66:	2b80      	cmp	r3, #128	; 0x80
   15c68:	bf08      	it	eq
   15c6a:	3101      	addeq	r1, #1
   15c6c:	2802      	cmp	r0, #2
   15c6e:	d005      	beq.n	15c7c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15c70:	7890      	ldrb	r0, [r2, #2]
   15c72:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15c76:	2880      	cmp	r0, #128	; 0x80
   15c78:	bf08      	it	eq
   15c7a:	3101      	addeq	r1, #1
   15c7c:	f8da 000c 	ldr.w	r0, [sl, #12]
   15c80:	eba9 0101 	sub.w	r1, r9, r1
   15c84:	4281      	cmp	r1, r0
   15c86:	d221      	bcs.n	15ccc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   15c88:	f1b9 0f00 	cmp.w	r9, #0
   15c8c:	d029      	beq.n	15ce2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   15c8e:	f1a9 0101 	sub.w	r1, r9, #1
   15c92:	f009 0c03 	and.w	ip, r9, #3
   15c96:	2903      	cmp	r1, #3
   15c98:	d225      	bcs.n	15ce6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   15c9a:	2100      	movs	r1, #0
   15c9c:	4643      	mov	r3, r8
   15c9e:	f1bc 0f00 	cmp.w	ip, #0
   15ca2:	d142      	bne.n	15d2a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   15ca4:	e059      	b.n	15d5a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15ca6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   15caa:	d167      	bne.n	15d7c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   15cac:	464a      	mov	r2, r9
   15cae:	f1be 0f01 	cmp.w	lr, #1
   15cb2:	d1aa      	bne.n	15c0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   15cb4:	4691      	mov	r9, r2
   15cb6:	f1b9 0f00 	cmp.w	r9, #0
   15cba:	f47f af3b 	bne.w	15b34 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   15cbe:	2100      	movs	r1, #0
   15cc0:	f8da 000c 	ldr.w	r0, [sl, #12]
   15cc4:	eba9 0101 	sub.w	r1, r9, r1
   15cc8:	4281      	cmp	r1, r0
   15cca:	d3dd      	bcc.n	15c88 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   15ccc:	f8da 101c 	ldr.w	r1, [sl, #28]
   15cd0:	464a      	mov	r2, r9
   15cd2:	f8da 0018 	ldr.w	r0, [sl, #24]
   15cd6:	68cb      	ldr	r3, [r1, #12]
   15cd8:	4641      	mov	r1, r8
   15cda:	b001      	add	sp, #4
   15cdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce0:	4718      	bx	r3
   15ce2:	2100      	movs	r1, #0
   15ce4:	e039      	b.n	15d5a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15ce6:	ebac 0709 	sub.w	r7, ip, r9
   15cea:	2100      	movs	r1, #0
   15cec:	4643      	mov	r3, r8
   15cee:	781e      	ldrb	r6, [r3, #0]
   15cf0:	785d      	ldrb	r5, [r3, #1]
   15cf2:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   15cf6:	789c      	ldrb	r4, [r3, #2]
   15cf8:	78da      	ldrb	r2, [r3, #3]
   15cfa:	2e80      	cmp	r6, #128	; 0x80
   15cfc:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   15d00:	bf08      	it	eq
   15d02:	3101      	addeq	r1, #1
   15d04:	2e80      	cmp	r6, #128	; 0x80
   15d06:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   15d0a:	bf08      	it	eq
   15d0c:	3101      	addeq	r1, #1
   15d0e:	2e80      	cmp	r6, #128	; 0x80
   15d10:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15d14:	bf08      	it	eq
   15d16:	3101      	addeq	r1, #1
   15d18:	2a80      	cmp	r2, #128	; 0x80
   15d1a:	bf08      	it	eq
   15d1c:	3101      	addeq	r1, #1
   15d1e:	3304      	adds	r3, #4
   15d20:	3704      	adds	r7, #4
   15d22:	d1e4      	bne.n	15cee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   15d24:	f1bc 0f00 	cmp.w	ip, #0
   15d28:	d017      	beq.n	15d5a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d2a:	781a      	ldrb	r2, [r3, #0]
   15d2c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15d30:	2a80      	cmp	r2, #128	; 0x80
   15d32:	bf08      	it	eq
   15d34:	3101      	addeq	r1, #1
   15d36:	f1bc 0f01 	cmp.w	ip, #1
   15d3a:	d00e      	beq.n	15d5a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d3c:	785a      	ldrb	r2, [r3, #1]
   15d3e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15d42:	2a80      	cmp	r2, #128	; 0x80
   15d44:	bf08      	it	eq
   15d46:	3101      	addeq	r1, #1
   15d48:	f1bc 0f02 	cmp.w	ip, #2
   15d4c:	d005      	beq.n	15d5a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d4e:	789a      	ldrb	r2, [r3, #2]
   15d50:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15d54:	2a80      	cmp	r2, #128	; 0x80
   15d56:	bf08      	it	eq
   15d58:	3101      	addeq	r1, #1
   15d5a:	f89a 3020 	ldrb.w	r3, [sl, #32]
   15d5e:	eba1 0109 	sub.w	r1, r1, r9
   15d62:	4401      	add	r1, r0
   15d64:	2000      	movs	r0, #0
   15d66:	1eda      	subs	r2, r3, #3
   15d68:	bf18      	it	ne
   15d6a:	461a      	movne	r2, r3
   15d6c:	460e      	mov	r6, r1
   15d6e:	e8df f002 	tbb	[pc, r2]
   15d72:	0216      	.short	0x0216
   15d74:	0213      	.short	0x0213
   15d76:	2600      	movs	r6, #0
   15d78:	4608      	mov	r0, r1
   15d7a:	e010      	b.n	15d9e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   15d7c:	2a00      	cmp	r2, #0
   15d7e:	bf18      	it	ne
   15d80:	454a      	cmpne	r2, r9
   15d82:	d134      	bne.n	15dee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   15d84:	4640      	mov	r0, r8
   15d86:	2800      	cmp	r0, #0
   15d88:	bf0c      	ite	eq
   15d8a:	464a      	moveq	r2, r9
   15d8c:	4680      	movne	r8, r0
   15d8e:	f1be 0f01 	cmp.w	lr, #1
   15d92:	f43f af8f 	beq.w	15cb4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15d96:	e738      	b.n	15c0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   15d98:	0848      	lsrs	r0, r1, #1
   15d9a:	3101      	adds	r1, #1
   15d9c:	084e      	lsrs	r6, r1, #1
   15d9e:	1c44      	adds	r4, r0, #1
   15da0:	3c01      	subs	r4, #1
   15da2:	d008      	beq.n	15db6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   15da4:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   15da8:	f8da 1004 	ldr.w	r1, [sl, #4]
   15dac:	6912      	ldr	r2, [r2, #16]
   15dae:	4790      	blx	r2
   15db0:	2800      	cmp	r0, #0
   15db2:	d0f5      	beq.n	15da0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   15db4:	e013      	b.n	15dde <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   15db6:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   15dba:	464a      	mov	r2, r9
   15dbc:	68cb      	ldr	r3, [r1, #12]
   15dbe:	4641      	mov	r1, r8
   15dc0:	f8da 7004 	ldr.w	r7, [sl, #4]
   15dc4:	4798      	blx	r3
   15dc6:	b950      	cbnz	r0, 15dde <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   15dc8:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   15dcc:	3601      	adds	r6, #1
   15dce:	3e01      	subs	r6, #1
   15dd0:	d009      	beq.n	15de6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   15dd2:	692a      	ldr	r2, [r5, #16]
   15dd4:	4620      	mov	r0, r4
   15dd6:	4639      	mov	r1, r7
   15dd8:	4790      	blx	r2
   15dda:	2800      	cmp	r0, #0
   15ddc:	d0f7      	beq.n	15dce <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   15dde:	2001      	movs	r0, #1
   15de0:	b001      	add	sp, #4
   15de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de6:	2000      	movs	r0, #0
   15de8:	b001      	add	sp, #4
   15dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dee:	454a      	cmp	r2, r9
   15df0:	d204      	bcs.n	15dfc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   15df2:	f918 0002 	ldrsb.w	r0, [r8, r2]
   15df6:	f110 0f40 	cmn.w	r0, #64	; 0x40
   15dfa:	dac3      	bge.n	15d84 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   15dfc:	2000      	movs	r0, #0
   15dfe:	2200      	movs	r2, #0
   15e00:	2800      	cmp	r0, #0
   15e02:	bf0c      	ite	eq
   15e04:	464a      	moveq	r2, r9
   15e06:	4680      	movne	r8, r0
   15e08:	f1be 0f01 	cmp.w	lr, #1
   15e0c:	f43f af52 	beq.w	15cb4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15e10:	e6fb      	b.n	15c0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00015e12 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   15e12:	7800      	ldrb	r0, [r0, #0]
   15e14:	f3c0 1000 	ubfx	r0, r0, #4, #1
   15e18:	4770      	bx	lr

00015e1a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   15e1a:	7800      	ldrb	r0, [r0, #0]
   15e1c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15e20:	4770      	bx	lr

00015e22 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   15e22:	b570      	push	{r4, r5, r6, lr}
   15e24:	460d      	mov	r5, r1
   15e26:	4606      	mov	r6, r0
   15e28:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15e2c:	461c      	mov	r4, r3
   15e2e:	68cb      	ldr	r3, [r1, #12]
   15e30:	4611      	mov	r1, r2
   15e32:	4622      	mov	r2, r4
   15e34:	4798      	blx	r3
   15e36:	7230      	strb	r0, [r6, #8]
   15e38:	fab4 f084 	clz	r0, r4
   15e3c:	0940      	lsrs	r0, r0, #5
   15e3e:	7270      	strb	r0, [r6, #9]
   15e40:	2000      	movs	r0, #0
   15e42:	e9c6 5000 	strd	r5, r0, [r6]
   15e46:	bd70      	pop	{r4, r5, r6, pc}

00015e48 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   15e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15e4c:	b085      	sub	sp, #20
   15e4e:	460c      	mov	r4, r1
   15e50:	4605      	mov	r5, r0
   15e52:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15e56:	690a      	ldr	r2, [r1, #16]
   15e58:	2127      	movs	r1, #39	; 0x27
   15e5a:	4790      	blx	r2
   15e5c:	b118      	cbz	r0, 15e66 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   15e5e:	2001      	movs	r0, #1
   15e60:	b005      	add	sp, #20
   15e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15e66:	6829      	ldr	r1, [r5, #0]
   15e68:	a801      	add	r0, sp, #4
   15e6a:	2201      	movs	r2, #1
   15e6c:	f7ff f878 	bl	14f60 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   15e70:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   15e74:	f04f 091c 	mov.w	r9, #28
   15e78:	f8dd 800c 	ldr.w	r8, [sp, #12]
   15e7c:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   15e80:	f89d 6010 	ldrb.w	r6, [sp, #16]
   15e84:	d139      	bne.n	15efa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   15e86:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   15e8a:	2f02      	cmp	r7, #2
   15e8c:	f0c0 806b 	bcc.w	15f66 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   15e90:	d00c      	beq.n	15eac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   15e92:	b2f0      	uxtb	r0, r6
   15e94:	2604      	movs	r6, #4
   15e96:	2703      	movs	r7, #3
   15e98:	215c      	movs	r1, #92	; 0x5c
   15e9a:	e8df f000 	tbb	[pc, r0]
   15e9e:	0364      	.short	0x0364
   15ea0:	09242010 	.word	0x09242010
   15ea4:	2600      	movs	r6, #0
   15ea6:	2703      	movs	r7, #3
   15ea8:	217d      	movs	r1, #125	; 0x7d
   15eaa:	e001      	b.n	15eb0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15eac:	2701      	movs	r7, #1
   15eae:	215c      	movs	r1, #92	; 0x5c
   15eb0:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15eb4:	6912      	ldr	r2, [r2, #16]
   15eb6:	4790      	blx	r2
   15eb8:	2800      	cmp	r0, #0
   15eba:	d0e6      	beq.n	15e8a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   15ebc:	e7cf      	b.n	15e5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   15ebe:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   15ec2:	2602      	movs	r6, #2
   15ec4:	2703      	movs	r7, #3
   15ec6:	f1b8 0f00 	cmp.w	r8, #0
   15eca:	fa25 f100 	lsr.w	r1, r5, r0
   15ece:	bf08      	it	eq
   15ed0:	2601      	moveq	r6, #1
   15ed2:	bf18      	it	ne
   15ed4:	f1a8 0801 	subne.w	r8, r8, #1
   15ed8:	f367 111f 	bfi	r1, r7, #4, #28
   15edc:	e7e8      	b.n	15eb0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15ede:	2602      	movs	r6, #2
   15ee0:	2703      	movs	r7, #3
   15ee2:	217b      	movs	r1, #123	; 0x7b
   15ee4:	e7e4      	b.n	15eb0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15ee6:	2703      	movs	r7, #3
   15ee8:	2175      	movs	r1, #117	; 0x75
   15eea:	2603      	movs	r6, #3
   15eec:	e7e0      	b.n	15eb0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15eee:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15ef2:	6912      	ldr	r2, [r2, #16]
   15ef4:	4790      	blx	r2
   15ef6:	2800      	cmp	r0, #0
   15ef8:	d1b1      	bne.n	15e5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   15efa:	4638      	mov	r0, r7
   15efc:	2701      	movs	r7, #1
   15efe:	215c      	movs	r1, #92	; 0x5c
   15f00:	e8df f000 	tbb	[pc, r0]
   15f04:	06020331 	.word	0x06020331
   15f08:	e7f1      	b.n	15eee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f0a:	2700      	movs	r7, #0
   15f0c:	4629      	mov	r1, r5
   15f0e:	e7ee      	b.n	15eee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f10:	b2f0      	uxtb	r0, r6
   15f12:	2604      	movs	r6, #4
   15f14:	2703      	movs	r7, #3
   15f16:	215c      	movs	r1, #92	; 0x5c
   15f18:	e8df f000 	tbb	[pc, r0]
   15f1c:	1d080425 	.word	0x1d080425
   15f20:	0321      	.short	0x0321
   15f22:	e7e4      	b.n	15eee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f24:	2600      	movs	r6, #0
   15f26:	2703      	movs	r7, #3
   15f28:	217d      	movs	r1, #125	; 0x7d
   15f2a:	e7e0      	b.n	15eee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f2c:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   15f30:	2602      	movs	r6, #2
   15f32:	2703      	movs	r7, #3
   15f34:	fa25 f000 	lsr.w	r0, r5, r0
   15f38:	f000 000f 	and.w	r0, r0, #15
   15f3c:	f100 0157 	add.w	r1, r0, #87	; 0x57
   15f40:	280a      	cmp	r0, #10
   15f42:	bf38      	it	cc
   15f44:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   15f48:	f1b8 0f00 	cmp.w	r8, #0
   15f4c:	bf0c      	ite	eq
   15f4e:	2601      	moveq	r6, #1
   15f50:	f1a8 0801 	subne.w	r8, r8, #1
   15f54:	e7cb      	b.n	15eee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f56:	2602      	movs	r6, #2
   15f58:	2703      	movs	r7, #3
   15f5a:	217b      	movs	r1, #123	; 0x7b
   15f5c:	e7c7      	b.n	15eee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f5e:	2703      	movs	r7, #3
   15f60:	2175      	movs	r1, #117	; 0x75
   15f62:	2603      	movs	r6, #3
   15f64:	e7c3      	b.n	15eee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f66:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15f6a:	690a      	ldr	r2, [r1, #16]
   15f6c:	2127      	movs	r1, #39	; 0x27
   15f6e:	b005      	add	sp, #20
   15f70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15f74:	4710      	bx	r2

00015f76 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   15f76:	b08c      	sub	sp, #48	; 0x30
   15f78:	e9cd 0100 	strd	r0, r1, [sp]
   15f7c:	2002      	movs	r0, #2
   15f7e:	a908      	add	r1, sp, #32
   15f80:	9007      	str	r0, [sp, #28]
   15f82:	9106      	str	r1, [sp, #24]
   15f84:	2100      	movs	r1, #0
   15f86:	9105      	str	r1, [sp, #20]
   15f88:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15f8c:	f24e 3060 	movw	r0, #58208	; 0xe360
   15f90:	f2c0 0001 	movt	r0, #1
   15f94:	a901      	add	r1, sp, #4
   15f96:	9002      	str	r0, [sp, #8]
   15f98:	f646 40c3 	movw	r0, #27843	; 0x6cc3
   15f9c:	f2c0 0001 	movt	r0, #1
   15fa0:	900b      	str	r0, [sp, #44]	; 0x2c
   15fa2:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   15fa6:	4668      	mov	r0, sp
   15fa8:	f24e 3170 	movw	r1, #58224	; 0xe370
   15fac:	9008      	str	r0, [sp, #32]
   15fae:	a802      	add	r0, sp, #8
   15fb0:	f2c0 0101 	movt	r1, #1
   15fb4:	f7ff f8c2 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15fb8:	defe      	udf	#254	; 0xfe

00015fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   15fba:	b08c      	sub	sp, #48	; 0x30
   15fbc:	e9cd 0100 	strd	r0, r1, [sp]
   15fc0:	2002      	movs	r0, #2
   15fc2:	a908      	add	r1, sp, #32
   15fc4:	9007      	str	r0, [sp, #28]
   15fc6:	9106      	str	r1, [sp, #24]
   15fc8:	2100      	movs	r1, #0
   15fca:	9105      	str	r1, [sp, #20]
   15fcc:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15fd0:	f24e 30a4 	movw	r0, #58276	; 0xe3a4
   15fd4:	f2c0 0001 	movt	r0, #1
   15fd8:	a901      	add	r1, sp, #4
   15fda:	9002      	str	r0, [sp, #8]
   15fdc:	f646 40c3 	movw	r0, #27843	; 0x6cc3
   15fe0:	f2c0 0001 	movt	r0, #1
   15fe4:	900b      	str	r0, [sp, #44]	; 0x2c
   15fe6:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   15fea:	4668      	mov	r0, sp
   15fec:	f24e 31b4 	movw	r1, #58292	; 0xe3b4
   15ff0:	9008      	str	r0, [sp, #32]
   15ff2:	a802      	add	r0, sp, #8
   15ff4:	f2c0 0101 	movt	r1, #1
   15ff8:	f7ff f8a0 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15ffc:	defe      	udf	#254	; 0xfe

00015ffe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   15ffe:	b09a      	sub	sp, #104	; 0x68
   16000:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   16004:	e9cd 2300 	strd	r2, r3, [sp]
   16008:	d802      	bhi.n	16010 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   1600a:	2501      	movs	r5, #1
   1600c:	468c      	mov	ip, r1
   1600e:	e03e      	b.n	1608e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16010:	f1c1 0e00 	rsb	lr, r1, #0
   16014:	f44f 7c80 	mov.w	ip, #256	; 0x100
   16018:	458c      	cmp	ip, r1
   1601a:	d205      	bcs.n	16028 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   1601c:	f910 400c 	ldrsb.w	r4, [r0, ip]
   16020:	f114 0f41 	cmn.w	r4, #65	; 0x41
   16024:	f300 8108 	bgt.w	16238 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   16028:	eb0e 040c 	add.w	r4, lr, ip
   1602c:	f1ac 0601 	sub.w	r6, ip, #1
   16030:	2c01      	cmp	r4, #1
   16032:	d02a      	beq.n	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16034:	428e      	cmp	r6, r1
   16036:	d206      	bcs.n	16046 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   16038:	eb00 050c 	add.w	r5, r0, ip
   1603c:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   16040:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16044:	dc21      	bgt.n	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16046:	f1ac 0602 	sub.w	r6, ip, #2
   1604a:	2c02      	cmp	r4, #2
   1604c:	d01d      	beq.n	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1604e:	428e      	cmp	r6, r1
   16050:	d206      	bcs.n	16060 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   16052:	eb00 050c 	add.w	r5, r0, ip
   16056:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   1605a:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1605e:	dc14      	bgt.n	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16060:	f1ac 0603 	sub.w	r6, ip, #3
   16064:	2c03      	cmp	r4, #3
   16066:	d010      	beq.n	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16068:	428e      	cmp	r6, r1
   1606a:	d206      	bcs.n	1607a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   1606c:	eb00 050c 	add.w	r5, r0, ip
   16070:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   16074:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16078:	dc07      	bgt.n	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1607a:	f1bc 0c04 	subs.w	ip, ip, #4
   1607e:	f04f 0500 	mov.w	r5, #0
   16082:	d004      	beq.n	1608e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16084:	2c04      	cmp	r4, #4
   16086:	d1c7      	bne.n	16018 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   16088:	e001      	b.n	1608e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1608a:	2500      	movs	r5, #0
   1608c:	46b4      	mov	ip, r6
   1608e:	2605      	movs	r6, #5
   16090:	2d00      	cmp	r5, #0
   16092:	f24e 4582 	movw	r5, #58498	; 0xe482
   16096:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   1609a:	bf18      	it	ne
   1609c:	2600      	movne	r6, #0
   1609e:	9605      	str	r6, [sp, #20]
   160a0:	f64d 76d4 	movw	r6, #57300	; 0xdfd4
   160a4:	f2c0 0501 	movt	r5, #1
   160a8:	f2c0 0601 	movt	r6, #1
   160ac:	bf18      	it	ne
   160ae:	4635      	movne	r5, r6
   160b0:	428a      	cmp	r2, r1
   160b2:	9504      	str	r5, [sp, #16]
   160b4:	bf98      	it	ls
   160b6:	428b      	cmpls	r3, r1
   160b8:	d92a      	bls.n	16110 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   160ba:	428a      	cmp	r2, r1
   160bc:	f04f 0003 	mov.w	r0, #3
   160c0:	a910      	add	r1, sp, #64	; 0x40
   160c2:	bf88      	it	hi
   160c4:	4613      	movhi	r3, r2
   160c6:	900f      	str	r0, [sp, #60]	; 0x3c
   160c8:	910e      	str	r1, [sp, #56]	; 0x38
   160ca:	2100      	movs	r1, #0
   160cc:	910d      	str	r1, [sp, #52]	; 0x34
   160ce:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   160d2:	f24e 40a8 	movw	r0, #58536	; 0xe4a8
   160d6:	f2c0 0001 	movt	r0, #1
   160da:	a904      	add	r1, sp, #16
   160dc:	900a      	str	r0, [sp, #40]	; 0x28
   160de:	f646 50b1 	movw	r0, #28081	; 0x6db1
   160e2:	f2c0 0001 	movt	r0, #1
   160e6:	9308      	str	r3, [sp, #32]
   160e8:	9015      	str	r0, [sp, #84]	; 0x54
   160ea:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   160ee:	a802      	add	r0, sp, #8
   160f0:	f24e 41c0 	movw	r1, #58560	; 0xe4c0
   160f4:	9012      	str	r0, [sp, #72]	; 0x48
   160f6:	f646 40c3 	movw	r0, #27843	; 0x6cc3
   160fa:	f2c0 0101 	movt	r1, #1
   160fe:	f2c0 0001 	movt	r0, #1
   16102:	9011      	str	r0, [sp, #68]	; 0x44
   16104:	a808      	add	r0, sp, #32
   16106:	9010      	str	r0, [sp, #64]	; 0x40
   16108:	a80a      	add	r0, sp, #40	; 0x28
   1610a:	f7ff f817 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1610e:	defe      	udf	#254	; 0xfe
   16110:	429a      	cmp	r2, r3
   16112:	f200 80f1 	bhi.w	162f8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   16116:	2a00      	cmp	r2, #0
   16118:	bf18      	it	ne
   1611a:	4291      	cmpne	r1, r2
   1611c:	d109      	bne.n	16132 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   1611e:	461a      	mov	r2, r3
   16120:	2a00      	cmp	r2, #0
   16122:	9206      	str	r2, [sp, #24]
   16124:	bf18      	it	ne
   16126:	428a      	cmpne	r2, r1
   16128:	d10e      	bne.n	16148 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   1612a:	4613      	mov	r3, r2
   1612c:	428b      	cmp	r3, r1
   1612e:	d047      	beq.n	161c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16130:	e052      	b.n	161d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   16132:	d9f5      	bls.n	16120 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   16134:	5686      	ldrsb	r6, [r0, r2]
   16136:	f116 0f40 	cmn.w	r6, #64	; 0x40
   1613a:	bfa8      	it	ge
   1613c:	461a      	movge	r2, r3
   1613e:	2a00      	cmp	r2, #0
   16140:	9206      	str	r2, [sp, #24]
   16142:	bf18      	it	ne
   16144:	428a      	cmpne	r2, r1
   16146:	d0f0      	beq.n	1612a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16148:	f1a0 0c01 	sub.w	ip, r0, #1
   1614c:	f101 0e02 	add.w	lr, r1, #2
   16150:	1ccc      	adds	r4, r1, #3
   16152:	1c4d      	adds	r5, r1, #1
   16154:	1d0e      	adds	r6, r1, #4
   16156:	428a      	cmp	r2, r1
   16158:	d206      	bcs.n	16168 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   1615a:	eb0c 0302 	add.w	r3, ip, r2
   1615e:	f993 3001 	ldrsb.w	r3, [r3, #1]
   16162:	f113 0f41 	cmn.w	r3, #65	; 0x41
   16166:	dce0      	bgt.n	1612a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16168:	1e53      	subs	r3, r2, #1
   1616a:	bf18      	it	ne
   1616c:	4295      	cmpne	r5, r2
   1616e:	d025      	beq.n	161bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16170:	428b      	cmp	r3, r1
   16172:	d204      	bcs.n	1617e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   16174:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   16178:	f117 0f41 	cmn.w	r7, #65	; 0x41
   1617c:	dc1e      	bgt.n	161bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1617e:	1e93      	subs	r3, r2, #2
   16180:	bf18      	it	ne
   16182:	4596      	cmpne	lr, r2
   16184:	d01a      	beq.n	161bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16186:	428b      	cmp	r3, r1
   16188:	d206      	bcs.n	16198 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   1618a:	eb0c 0702 	add.w	r7, ip, r2
   1618e:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   16192:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16196:	dc11      	bgt.n	161bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16198:	1ed3      	subs	r3, r2, #3
   1619a:	bf18      	it	ne
   1619c:	4294      	cmpne	r4, r2
   1619e:	d00d      	beq.n	161bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   161a0:	428b      	cmp	r3, r1
   161a2:	d206      	bcs.n	161b2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   161a4:	eb0c 0702 	add.w	r7, ip, r2
   161a8:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   161ac:	f117 0f41 	cmn.w	r7, #65	; 0x41
   161b0:	dc04      	bgt.n	161bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   161b2:	1f13      	subs	r3, r2, #4
   161b4:	d002      	beq.n	161bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   161b6:	4296      	cmp	r6, r2
   161b8:	461a      	mov	r2, r3
   161ba:	d1cc      	bne.n	16156 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   161bc:	428b      	cmp	r3, r1
   161be:	d10b      	bne.n	161d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   161c0:	f24e 1070 	movw	r0, #57712	; 0xe170
   161c4:	f24e 5210 	movw	r2, #58640	; 0xe510
   161c8:	f2c0 0001 	movt	r0, #1
   161cc:	f2c0 0201 	movt	r2, #1
   161d0:	212b      	movs	r1, #43	; 0x2b
   161d2:	f7fe ff7d 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   161d6:	defe      	udf	#254	; 0xfe
   161d8:	18c5      	adds	r5, r0, r3
   161da:	462e      	mov	r6, r5
   161dc:	f916 4b01 	ldrsb.w	r4, [r6], #1
   161e0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   161e4:	b2e2      	uxtb	r2, r4
   161e6:	dd02      	ble.n	161ee <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   161e8:	9207      	str	r2, [sp, #28]
   161ea:	2101      	movs	r1, #1
   161ec:	e04d      	b.n	1628a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   161ee:	4408      	add	r0, r1
   161f0:	4286      	cmp	r6, r0
   161f2:	d10b      	bne.n	1620c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   161f4:	2500      	movs	r5, #0
   161f6:	4606      	mov	r6, r0
   161f8:	f002 011f 	and.w	r1, r2, #31
   161fc:	2adf      	cmp	r2, #223	; 0xdf
   161fe:	d80d      	bhi.n	1621c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   16200:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   16204:	2880      	cmp	r0, #128	; 0x80
   16206:	9007      	str	r0, [sp, #28]
   16208:	d333      	bcc.n	16272 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   1620a:	e034      	b.n	16276 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1620c:	7869      	ldrb	r1, [r5, #1]
   1620e:	1cae      	adds	r6, r5, #2
   16210:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   16214:	f002 011f 	and.w	r1, r2, #31
   16218:	2adf      	cmp	r2, #223	; 0xdf
   1621a:	d9f1      	bls.n	16200 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   1621c:	4286      	cmp	r6, r0
   1621e:	d10d      	bne.n	1623c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   16220:	2400      	movs	r4, #0
   16222:	4606      	mov	r6, r0
   16224:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16228:	2af0      	cmp	r2, #240	; 0xf0
   1622a:	d20f      	bcs.n	1624c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   1622c:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   16230:	2880      	cmp	r0, #128	; 0x80
   16232:	9007      	str	r0, [sp, #28]
   16234:	d31d      	bcc.n	16272 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   16236:	e01e      	b.n	16276 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16238:	2500      	movs	r5, #0
   1623a:	e728      	b.n	1608e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1623c:	f816 4b01 	ldrb.w	r4, [r6], #1
   16240:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   16244:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16248:	2af0      	cmp	r2, #240	; 0xf0
   1624a:	d3ef      	bcc.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   1624c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   16250:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   16254:	4286      	cmp	r6, r0
   16256:	bf1a      	itte	ne
   16258:	7830      	ldrbne	r0, [r6, #0]
   1625a:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   1625e:	2000      	moveq	r0, #0
   16260:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   16264:	4408      	add	r0, r1
   16266:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1626a:	d0a9      	beq.n	161c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   1626c:	2880      	cmp	r0, #128	; 0x80
   1626e:	9007      	str	r0, [sp, #28]
   16270:	d201      	bcs.n	16276 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16272:	2101      	movs	r1, #1
   16274:	e009      	b.n	1628a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16276:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1627a:	d201      	bcs.n	16280 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   1627c:	2102      	movs	r1, #2
   1627e:	e004      	b.n	1628a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16280:	2104      	movs	r1, #4
   16282:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   16286:	bf38      	it	cc
   16288:	2103      	movcc	r1, #3
   1628a:	4419      	add	r1, r3
   1628c:	aa10      	add	r2, sp, #64	; 0x40
   1628e:	a808      	add	r0, sp, #32
   16290:	e9cd 3108 	strd	r3, r1, [sp, #32]
   16294:	2105      	movs	r1, #5
   16296:	910f      	str	r1, [sp, #60]	; 0x3c
   16298:	920e      	str	r2, [sp, #56]	; 0x38
   1629a:	2200      	movs	r2, #0
   1629c:	920d      	str	r2, [sp, #52]	; 0x34
   1629e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   162a2:	f24e 514c 	movw	r1, #58700	; 0xe54c
   162a6:	f2c0 0101 	movt	r1, #1
   162aa:	aa04      	add	r2, sp, #16
   162ac:	910a      	str	r1, [sp, #40]	; 0x28
   162ae:	f646 51b1 	movw	r1, #28081	; 0x6db1
   162b2:	f2c0 0101 	movt	r1, #1
   162b6:	9119      	str	r1, [sp, #100]	; 0x64
   162b8:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   162bc:	a902      	add	r1, sp, #8
   162be:	9116      	str	r1, [sp, #88]	; 0x58
   162c0:	f644 7101 	movw	r1, #20225	; 0x4f01
   162c4:	f2c0 0101 	movt	r1, #1
   162c8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   162cc:	f645 6049 	movw	r0, #24137	; 0x5e49
   162d0:	f2c0 0001 	movt	r0, #1
   162d4:	f24e 5174 	movw	r1, #58740	; 0xe574
   162d8:	9013      	str	r0, [sp, #76]	; 0x4c
   162da:	a807      	add	r0, sp, #28
   162dc:	9012      	str	r0, [sp, #72]	; 0x48
   162de:	f646 40c3 	movw	r0, #27843	; 0x6cc3
   162e2:	f2c0 0001 	movt	r0, #1
   162e6:	f2c0 0101 	movt	r1, #1
   162ea:	9011      	str	r0, [sp, #68]	; 0x44
   162ec:	a806      	add	r0, sp, #24
   162ee:	9010      	str	r0, [sp, #64]	; 0x40
   162f0:	a80a      	add	r0, sp, #40	; 0x28
   162f2:	f7fe ff23 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   162f6:	defe      	udf	#254	; 0xfe
   162f8:	2004      	movs	r0, #4
   162fa:	a910      	add	r1, sp, #64	; 0x40
   162fc:	900f      	str	r0, [sp, #60]	; 0x3c
   162fe:	910e      	str	r1, [sp, #56]	; 0x38
   16300:	2100      	movs	r1, #0
   16302:	910d      	str	r1, [sp, #52]	; 0x34
   16304:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16308:	f24e 40e0 	movw	r0, #58592	; 0xe4e0
   1630c:	f2c0 0001 	movt	r0, #1
   16310:	a904      	add	r1, sp, #16
   16312:	900a      	str	r0, [sp, #40]	; 0x28
   16314:	f646 50b1 	movw	r0, #28081	; 0x6db1
   16318:	f2c0 0001 	movt	r0, #1
   1631c:	9017      	str	r0, [sp, #92]	; 0x5c
   1631e:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   16322:	a802      	add	r0, sp, #8
   16324:	9014      	str	r0, [sp, #80]	; 0x50
   16326:	f646 40c3 	movw	r0, #27843	; 0x6cc3
   1632a:	a901      	add	r1, sp, #4
   1632c:	f2c0 0001 	movt	r0, #1
   16330:	9013      	str	r0, [sp, #76]	; 0x4c
   16332:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   16336:	f24e 5100 	movw	r1, #58624	; 0xe500
   1633a:	4668      	mov	r0, sp
   1633c:	f2c0 0101 	movt	r1, #1
   16340:	9010      	str	r0, [sp, #64]	; 0x40
   16342:	a80a      	add	r0, sp, #40	; 0x28
   16344:	f7fe fefa 	bl	1513c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16348:	defe      	udf	#254	; 0xfe

0001634a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   1634a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1634e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   16352:	d270      	bcs.n	16436 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   16354:	f24e 5e94 	movw	lr, #58772	; 0xe594
   16358:	f24e 58e6 	movw	r8, #58854	; 0xe5e6
   1635c:	fa1f f980 	uxth.w	r9, r0
   16360:	f2c0 0e01 	movt	lr, #1
   16364:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   16368:	f04f 0a00 	mov.w	sl, #0
   1636c:	f2c0 0801 	movt	r8, #1
   16370:	4675      	mov	r5, lr
   16372:	786e      	ldrb	r6, [r5, #1]
   16374:	4652      	mov	r2, sl
   16376:	782b      	ldrb	r3, [r5, #0]
   16378:	3502      	adds	r5, #2
   1637a:	44b2      	add	sl, r6
   1637c:	4563      	cmp	r3, ip
   1637e:	d129      	bne.n	163d4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   16380:	4592      	cmp	sl, r2
   16382:	f0c0 8112 	bcc.w	165aa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   16386:	ea4f 035a 	mov.w	r3, sl, lsr #1
   1638a:	2b92      	cmp	r3, #146	; 0x92
   1638c:	f200 8112 	bhi.w	165b4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   16390:	eb08 0302 	add.w	r3, r8, r2
   16394:	199a      	adds	r2, r3, r6
   16396:	b31e      	cbz	r6, 163e0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16398:	461f      	mov	r7, r3
   1639a:	b2c4      	uxtb	r4, r0
   1639c:	f817 1b01 	ldrb.w	r1, [r7], #1
   163a0:	42a1      	cmp	r1, r4
   163a2:	f000 80b6 	beq.w	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   163a6:	4297      	cmp	r7, r2
   163a8:	d01a      	beq.n	163e0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   163aa:	7859      	ldrb	r1, [r3, #1]
   163ac:	42a1      	cmp	r1, r4
   163ae:	f000 80b0 	beq.w	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   163b2:	1c99      	adds	r1, r3, #2
   163b4:	4291      	cmp	r1, r2
   163b6:	d013      	beq.n	163e0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   163b8:	7899      	ldrb	r1, [r3, #2]
   163ba:	42a1      	cmp	r1, r4
   163bc:	f000 80a9 	beq.w	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   163c0:	1cd9      	adds	r1, r3, #3
   163c2:	4291      	cmp	r1, r2
   163c4:	d00c      	beq.n	163e0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   163c6:	1d19      	adds	r1, r3, #4
   163c8:	78db      	ldrb	r3, [r3, #3]
   163ca:	3e04      	subs	r6, #4
   163cc:	42a3      	cmp	r3, r4
   163ce:	460b      	mov	r3, r1
   163d0:	d1e1      	bne.n	16396 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   163d2:	e09e      	b.n	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   163d4:	d808      	bhi.n	163e8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   163d6:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   163da:	4295      	cmp	r5, r2
   163dc:	d1c9      	bne.n	16372 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   163de:	e003      	b.n	163e8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   163e0:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   163e4:	428d      	cmp	r5, r1
   163e6:	d1c4      	bne.n	16372 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   163e8:	f24e 750b 	movw	r5, #59147	; 0xe70b
   163ec:	2101      	movs	r1, #1
   163ee:	f2c0 0501 	movt	r5, #1
   163f2:	4628      	mov	r0, r5
   163f4:	4602      	mov	r2, r0
   163f6:	f812 7b01 	ldrb.w	r7, [r2], #1
   163fa:	b27e      	sxtb	r6, r7
   163fc:	2e00      	cmp	r6, #0
   163fe:	d404      	bmi.n	1640a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   16400:	4610      	mov	r0, r2
   16402:	ebb9 0907 	subs.w	r9, r9, r7
   16406:	d50f      	bpl.n	16428 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   16408:	e0bd      	b.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1640a:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   1640e:	429a      	cmp	r2, r3
   16410:	f000 80db 	beq.w	165ca <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   16414:	7842      	ldrb	r2, [r0, #1]
   16416:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   1641a:	3002      	adds	r0, #2
   1641c:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16420:	ebb9 0907 	subs.w	r9, r9, r7
   16424:	f100 80af 	bmi.w	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16428:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   1642c:	f081 0101 	eor.w	r1, r1, #1
   16430:	4290      	cmp	r0, r2
   16432:	d1df      	bne.n	163f4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   16434:	e0a7      	b.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16436:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   1643a:	d26f      	bcs.n	1651c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   1643c:	f64e 0e45 	movw	lr, #59461	; 0xe845
   16440:	f64e 088b 	movw	r8, #59531	; 0xe88b
   16444:	fa1f f980 	uxth.w	r9, r0
   16448:	f2c0 0e01 	movt	lr, #1
   1644c:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   16450:	f04f 0a00 	mov.w	sl, #0
   16454:	f2c0 0801 	movt	r8, #1
   16458:	4675      	mov	r5, lr
   1645a:	786e      	ldrb	r6, [r5, #1]
   1645c:	4652      	mov	r2, sl
   1645e:	782b      	ldrb	r3, [r5, #0]
   16460:	3502      	adds	r5, #2
   16462:	44b2      	add	sl, r6
   16464:	4563      	cmp	r3, ip
   16466:	d125      	bne.n	164b4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   16468:	4592      	cmp	sl, r2
   1646a:	f0c0 809e 	bcc.w	165aa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   1646e:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   16472:	f200 80a5 	bhi.w	165c0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   16476:	eb08 0302 	add.w	r3, r8, r2
   1647a:	199a      	adds	r2, r3, r6
   1647c:	b306      	cbz	r6, 164c0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1647e:	461f      	mov	r7, r3
   16480:	b2c4      	uxtb	r4, r0
   16482:	f817 1b01 	ldrb.w	r1, [r7], #1
   16486:	42a1      	cmp	r1, r4
   16488:	d043      	beq.n	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1648a:	4297      	cmp	r7, r2
   1648c:	d018      	beq.n	164c0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1648e:	7859      	ldrb	r1, [r3, #1]
   16490:	42a1      	cmp	r1, r4
   16492:	d03e      	beq.n	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16494:	1c99      	adds	r1, r3, #2
   16496:	4291      	cmp	r1, r2
   16498:	d012      	beq.n	164c0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1649a:	7899      	ldrb	r1, [r3, #2]
   1649c:	42a1      	cmp	r1, r4
   1649e:	d038      	beq.n	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   164a0:	1cd9      	adds	r1, r3, #3
   164a2:	4291      	cmp	r1, r2
   164a4:	d00c      	beq.n	164c0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   164a6:	1d19      	adds	r1, r3, #4
   164a8:	78db      	ldrb	r3, [r3, #3]
   164aa:	3e04      	subs	r6, #4
   164ac:	42a3      	cmp	r3, r4
   164ae:	460b      	mov	r3, r1
   164b0:	d1e4      	bne.n	1647c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   164b2:	e02e      	b.n	16512 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   164b4:	d808      	bhi.n	164c8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   164b6:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   164ba:	4295      	cmp	r5, r2
   164bc:	d1cd      	bne.n	1645a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   164be:	e003      	b.n	164c8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   164c0:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   164c4:	428d      	cmp	r5, r1
   164c6:	d1c8      	bne.n	1645a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   164c8:	f64e 1531 	movw	r5, #59697	; 0xe931
   164cc:	2101      	movs	r1, #1
   164ce:	f2c0 0501 	movt	r5, #1
   164d2:	4628      	mov	r0, r5
   164d4:	4602      	mov	r2, r0
   164d6:	f812 7b01 	ldrb.w	r7, [r2], #1
   164da:	b27e      	sxtb	r6, r7
   164dc:	2e00      	cmp	r6, #0
   164de:	d40a      	bmi.n	164f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   164e0:	4610      	mov	r0, r2
   164e2:	ebb9 0907 	subs.w	r9, r9, r7
   164e6:	d44e      	bmi.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   164e8:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   164ec:	f081 0101 	eor.w	r1, r1, #1
   164f0:	4290      	cmp	r0, r2
   164f2:	d1ef      	bne.n	164d4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   164f4:	e047      	b.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   164f6:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   164fa:	429a      	cmp	r2, r3
   164fc:	d065      	beq.n	165ca <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   164fe:	7842      	ldrb	r2, [r0, #1]
   16500:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16504:	3002      	adds	r0, #2
   16506:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1650a:	ebb9 0907 	subs.w	r9, r9, r7
   1650e:	d5eb      	bpl.n	164e8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   16510:	e039      	b.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16512:	2100      	movs	r1, #0
   16514:	f001 0001 	and.w	r0, r1, #1
   16518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1651c:	f240 51e2 	movw	r1, #1506	; 0x5e2
   16520:	f240 63e2 	movw	r3, #1762	; 0x6e2
   16524:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   16528:	1842      	adds	r2, r0, r1
   1652a:	f2c0 030b 	movt	r3, #11
   1652e:	2100      	movs	r1, #0
   16530:	429a      	cmp	r2, r3
   16532:	d328      	bcc.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16534:	f241 421f 	movw	r2, #5151	; 0x141f
   16538:	f640 431f 	movw	r3, #3103	; 0xc1f
   1653c:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   16540:	4402      	add	r2, r0
   16542:	429a      	cmp	r2, r3
   16544:	bf21      	itttt	cs
   16546:	f243 125e 	movwcs	r2, #12638	; 0x315e
   1654a:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   1654e:	4402      	addcs	r2, r0
   16550:	2a0e      	cmpcs	r2, #14
   16552:	d318      	bcc.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16554:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   16558:	f64b 031e 	movw	r3, #47134	; 0xb81e
   1655c:	f2c0 021f 	movt	r2, #31
   16560:	f2c0 0302 	movt	r3, #2
   16564:	4002      	ands	r2, r0
   16566:	429a      	cmp	r2, r3
   16568:	d00d      	beq.n	16586 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1656a:	f645 1229 	movw	r2, #22825	; 0x5929
   1656e:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   16572:	4402      	add	r2, r0
   16574:	2a29      	cmp	r2, #41	; 0x29
   16576:	bf21      	itttt	cs
   16578:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   1657c:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   16580:	4402      	addcs	r2, r0
   16582:	2a0b      	cmpcs	r2, #11
   16584:	d203      	bcs.n	1658e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   16586:	f001 0001 	and.w	r0, r1, #1
   1658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1658e:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   16592:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   16596:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   1659a:	2000      	movs	r0, #0
   1659c:	f2c0 0202 	movt	r2, #2
   165a0:	4291      	cmp	r1, r2
   165a2:	bf88      	it	hi
   165a4:	2001      	movhi	r0, #1
   165a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   165aa:	4610      	mov	r0, r2
   165ac:	4651      	mov	r1, sl
   165ae:	f7ff fd04 	bl	15fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   165b2:	defe      	udf	#254	; 0xfe
   165b4:	4650      	mov	r0, sl
   165b6:	f240 1125 	movw	r1, #293	; 0x125
   165ba:	f7ff fcdc 	bl	15f76 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   165be:	defe      	udf	#254	; 0xfe
   165c0:	4650      	mov	r0, sl
   165c2:	21a6      	movs	r1, #166	; 0xa6
   165c4:	f7ff fcd7 	bl	15f76 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   165c8:	defe      	udf	#254	; 0xfe
   165ca:	f24e 1070 	movw	r0, #57712	; 0xe170
   165ce:	f24e 5284 	movw	r2, #58756	; 0xe584
   165d2:	f2c0 0001 	movt	r0, #1
   165d6:	f2c0 0201 	movt	r2, #1
   165da:	212b      	movs	r1, #43	; 0x2b
   165dc:	f7fe fd78 	bl	150d0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   165e0:	defe      	udf	#254	; 0xfe

000165e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   165e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165e6:	b0a3      	sub	sp, #140	; 0x8c
   165e8:	468c      	mov	ip, r1
   165ea:	6809      	ldr	r1, [r1, #0]
   165ec:	06ca      	lsls	r2, r1, #27
   165ee:	d44a      	bmi.n	16686 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   165f0:	6804      	ldr	r4, [r0, #0]
   165f2:	0688      	lsls	r0, r1, #26
   165f4:	f100 8089 	bmi.w	1670a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   165f8:	f248 5e1f 	movw	lr, #34079	; 0x851f
   165fc:	f24e 2207 	movw	r2, #57863	; 0xe207
   16600:	f242 7810 	movw	r8, #10000	; 0x2710
   16604:	4544      	cmp	r4, r8
   16606:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1660a:	f2c0 0201 	movt	r2, #1
   1660e:	f0c0 80e3 	bcc.w	167d8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   16612:	f241 7959 	movw	r9, #5977	; 0x1759
   16616:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1661a:	f10d 0b0c 	add.w	fp, sp, #12
   1661e:	2300      	movs	r3, #0
   16620:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16624:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16628:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   1662c:	fba4 0109 	umull	r0, r1, r4, r9
   16630:	42bc      	cmp	r4, r7
   16632:	ea4f 3051 	mov.w	r0, r1, lsr #13
   16636:	fb00 4118 	mls	r1, r0, r8, r4
   1663a:	4604      	mov	r4, r0
   1663c:	b28d      	uxth	r5, r1
   1663e:	fba5 560e 	umull	r5, r6, r5, lr
   16642:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16646:	eb0b 0603 	add.w	r6, fp, r3
   1664a:	fb05 111a 	mls	r1, r5, sl, r1
   1664e:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   16652:	f1a3 0304 	sub.w	r3, r3, #4
   16656:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1665a:	b289      	uxth	r1, r1
   1665c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   16660:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   16664:	d8e2      	bhi.n	1662c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   16666:	f103 0127 	add.w	r1, r3, #39	; 0x27
   1666a:	4604      	mov	r4, r0
   1666c:	2c63      	cmp	r4, #99	; 0x63
   1666e:	f300 80b7 	bgt.w	167e0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   16672:	4623      	mov	r3, r4
   16674:	2b0a      	cmp	r3, #10
   16676:	f2c0 80c3 	blt.w	16800 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   1667a:	1e88      	subs	r0, r1, #2
   1667c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   16680:	aa03      	add	r2, sp, #12
   16682:	5211      	strh	r1, [r2, r0]
   16684:	e0c1      	b.n	1680a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   16686:	6800      	ldr	r0, [r0, #0]
   16688:	f10d 0e0c 	add.w	lr, sp, #12
   1668c:	2381      	movs	r3, #129	; 0x81
   1668e:	2100      	movs	r1, #0
   16690:	f000 020f 	and.w	r2, r0, #15
   16694:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16698:	2a0a      	cmp	r2, #10
   1669a:	bf38      	it	cc
   1669c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   166a0:	eb0e 0203 	add.w	r2, lr, r3
   166a4:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   166a8:	f802 4c02 	strb.w	r4, [r2, #-2]
   166ac:	d071      	beq.n	16792 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   166ae:	0904      	lsrs	r4, r0, #4
   166b0:	f004 040f 	and.w	r4, r4, #15
   166b4:	f104 0557 	add.w	r5, r4, #87	; 0x57
   166b8:	2c0a      	cmp	r4, #10
   166ba:	bf38      	it	cc
   166bc:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   166c0:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   166c4:	f802 5c03 	strb.w	r5, [r2, #-3]
   166c8:	d079      	beq.n	167be <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   166ca:	0a04      	lsrs	r4, r0, #8
   166cc:	f004 040f 	and.w	r4, r4, #15
   166d0:	f104 0557 	add.w	r5, r4, #87	; 0x57
   166d4:	2c0a      	cmp	r4, #10
   166d6:	bf38      	it	cc
   166d8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   166dc:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   166e0:	f802 5c04 	strb.w	r5, [r2, #-4]
   166e4:	d073      	beq.n	167ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   166e6:	0b04      	lsrs	r4, r0, #12
   166e8:	3b04      	subs	r3, #4
   166ea:	f004 040f 	and.w	r4, r4, #15
   166ee:	f104 0557 	add.w	r5, r4, #87	; 0x57
   166f2:	2c0a      	cmp	r4, #10
   166f4:	bf38      	it	cc
   166f6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   166fa:	f802 5c05 	strb.w	r5, [r2, #-5]
   166fe:	0c02      	lsrs	r2, r0, #16
   16700:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16704:	4610      	mov	r0, r2
   16706:	d1c3      	bne.n	16690 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   16708:	e03f      	b.n	1678a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   1670a:	f10d 0e0c 	add.w	lr, sp, #12
   1670e:	2381      	movs	r3, #129	; 0x81
   16710:	2100      	movs	r1, #0
   16712:	f004 000f 	and.w	r0, r4, #15
   16716:	eb0e 0203 	add.w	r2, lr, r3
   1671a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1671e:	280a      	cmp	r0, #10
   16720:	bf38      	it	cc
   16722:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16726:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   1672a:	f802 5c02 	strb.w	r5, [r2, #-2]
   1672e:	d030      	beq.n	16792 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   16730:	0920      	lsrs	r0, r4, #4
   16732:	f000 000f 	and.w	r0, r0, #15
   16736:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1673a:	280a      	cmp	r0, #10
   1673c:	bf38      	it	cc
   1673e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16742:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   16746:	f802 5c03 	strb.w	r5, [r2, #-3]
   1674a:	d038      	beq.n	167be <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1674c:	0a20      	lsrs	r0, r4, #8
   1674e:	f000 000f 	and.w	r0, r0, #15
   16752:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16756:	280a      	cmp	r0, #10
   16758:	bf38      	it	cc
   1675a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1675e:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   16762:	f802 5c04 	strb.w	r5, [r2, #-4]
   16766:	d032      	beq.n	167ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16768:	0b20      	lsrs	r0, r4, #12
   1676a:	3b04      	subs	r3, #4
   1676c:	f000 000f 	and.w	r0, r0, #15
   16770:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16774:	280a      	cmp	r0, #10
   16776:	bf38      	it	cc
   16778:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1677c:	0c20      	lsrs	r0, r4, #16
   1677e:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   16782:	4604      	mov	r4, r0
   16784:	f802 5c05 	strb.w	r5, [r2, #-5]
   16788:	d1c3      	bne.n	16712 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   1678a:	1e58      	subs	r0, r3, #1
   1678c:	2881      	cmp	r0, #129	; 0x81
   1678e:	d305      	bcc.n	1679c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16790:	e019      	b.n	167c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16792:	1e59      	subs	r1, r3, #1
   16794:	1e98      	subs	r0, r3, #2
   16796:	460b      	mov	r3, r1
   16798:	2881      	cmp	r0, #129	; 0x81
   1679a:	d214      	bcs.n	167c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1679c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   167a0:	f24e 2205 	movw	r2, #57861	; 0xe205
   167a4:	4470      	add	r0, lr
   167a6:	f2c0 0201 	movt	r2, #1
   167aa:	e9cd 0100 	strd	r0, r1, [sp]
   167ae:	4660      	mov	r0, ip
   167b0:	2101      	movs	r1, #1
   167b2:	2302      	movs	r3, #2
   167b4:	f7ff f864 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   167b8:	b023      	add	sp, #140	; 0x8c
   167ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167be:	1ed8      	subs	r0, r3, #3
   167c0:	3b02      	subs	r3, #2
   167c2:	2881      	cmp	r0, #129	; 0x81
   167c4:	d3ea      	bcc.n	1679c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   167c6:	2180      	movs	r1, #128	; 0x80
   167c8:	f7ff fbf7 	bl	15fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   167cc:	defe      	udf	#254	; 0xfe
   167ce:	1f18      	subs	r0, r3, #4
   167d0:	3b03      	subs	r3, #3
   167d2:	2881      	cmp	r0, #129	; 0x81
   167d4:	d3e2      	bcc.n	1679c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   167d6:	e7f6      	b.n	167c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   167d8:	2127      	movs	r1, #39	; 0x27
   167da:	2c63      	cmp	r4, #99	; 0x63
   167dc:	f77f af49 	ble.w	16672 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   167e0:	b2a0      	uxth	r0, r4
   167e2:	3902      	subs	r1, #2
   167e4:	fba0 030e 	umull	r0, r3, r0, lr
   167e8:	af03      	add	r7, sp, #12
   167ea:	2064      	movs	r0, #100	; 0x64
   167ec:	095b      	lsrs	r3, r3, #5
   167ee:	fb03 4010 	mls	r0, r3, r0, r4
   167f2:	b280      	uxth	r0, r0
   167f4:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   167f8:	5278      	strh	r0, [r7, r1]
   167fa:	2b0a      	cmp	r3, #10
   167fc:	f6bf af3d 	bge.w	1667a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   16800:	1e48      	subs	r0, r1, #1
   16802:	aa03      	add	r2, sp, #12
   16804:	f103 0130 	add.w	r1, r3, #48	; 0x30
   16808:	5411      	strb	r1, [r2, r0]
   1680a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1680e:	aa03      	add	r2, sp, #12
   16810:	4410      	add	r0, r2
   16812:	f64d 72d4 	movw	r2, #57300	; 0xdfd4
   16816:	e9cd 0100 	strd	r0, r1, [sp]
   1681a:	f2c0 0201 	movt	r2, #1
   1681e:	4660      	mov	r0, ip
   16820:	2101      	movs	r1, #1
   16822:	2300      	movs	r3, #0
   16824:	f7ff f82c 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16828:	b023      	add	sp, #140	; 0x8c
   1682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001682e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   1682e:	b580      	push	{r7, lr}
   16830:	b0a2      	sub	sp, #136	; 0x88
   16832:	7802      	ldrb	r2, [r0, #0]
   16834:	468c      	mov	ip, r1
   16836:	f002 030f 	and.w	r3, r2, #15
   1683a:	f103 0057 	add.w	r0, r3, #87	; 0x57
   1683e:	2b0a      	cmp	r3, #10
   16840:	bf38      	it	cc
   16842:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16846:	2300      	movs	r3, #0
   16848:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1684c:	d00b      	beq.n	16866 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   1684e:	0913      	lsrs	r3, r2, #4
   16850:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16854:	2aa0      	cmp	r2, #160	; 0xa0
   16856:	bf38      	it	cc
   16858:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1685c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16860:	227e      	movs	r2, #126	; 0x7e
   16862:	2302      	movs	r3, #2
   16864:	e001      	b.n	1686a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   16866:	227f      	movs	r2, #127	; 0x7f
   16868:	2301      	movs	r3, #1
   1686a:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1686e:	a802      	add	r0, sp, #8
   16870:	4410      	add	r0, r2
   16872:	f24e 2205 	movw	r2, #57861	; 0xe205
   16876:	e9cd 0300 	strd	r0, r3, [sp]
   1687a:	f2c0 0201 	movt	r2, #1
   1687e:	4660      	mov	r0, ip
   16880:	2101      	movs	r1, #1
   16882:	2302      	movs	r3, #2
   16884:	f7fe fffc 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16888:	b022      	add	sp, #136	; 0x88
   1688a:	bd80      	pop	{r7, pc}

0001688c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   1688c:	b580      	push	{r7, lr}
   1688e:	b0a2      	sub	sp, #136	; 0x88
   16890:	7802      	ldrb	r2, [r0, #0]
   16892:	468c      	mov	ip, r1
   16894:	f002 030f 	and.w	r3, r2, #15
   16898:	f103 0037 	add.w	r0, r3, #55	; 0x37
   1689c:	2b0a      	cmp	r3, #10
   1689e:	bf38      	it	cc
   168a0:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   168a4:	2300      	movs	r3, #0
   168a6:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   168aa:	d00b      	beq.n	168c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   168ac:	0913      	lsrs	r3, r2, #4
   168ae:	f103 0137 	add.w	r1, r3, #55	; 0x37
   168b2:	2aa0      	cmp	r2, #160	; 0xa0
   168b4:	bf38      	it	cc
   168b6:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   168ba:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   168be:	227e      	movs	r2, #126	; 0x7e
   168c0:	2302      	movs	r3, #2
   168c2:	e001      	b.n	168c8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   168c4:	227f      	movs	r2, #127	; 0x7f
   168c6:	2301      	movs	r3, #1
   168c8:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   168cc:	a802      	add	r0, sp, #8
   168ce:	4410      	add	r0, r2
   168d0:	f24e 2205 	movw	r2, #57861	; 0xe205
   168d4:	e9cd 0300 	strd	r0, r3, [sp]
   168d8:	f2c0 0201 	movt	r2, #1
   168dc:	4660      	mov	r0, ip
   168de:	2101      	movs	r1, #1
   168e0:	2302      	movs	r3, #2
   168e2:	f7fe ffcd 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   168e6:	b022      	add	sp, #136	; 0x88
   168e8:	bd80      	pop	{r7, pc}

000168ea <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   168ea:	b580      	push	{r7, lr}
   168ec:	b0a2      	sub	sp, #136	; 0x88
   168ee:	8800      	ldrh	r0, [r0, #0]
   168f0:	468c      	mov	ip, r1
   168f2:	f000 020f 	and.w	r2, r0, #15
   168f6:	f102 0357 	add.w	r3, r2, #87	; 0x57
   168fa:	2a0a      	cmp	r2, #10
   168fc:	bf38      	it	cc
   168fe:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   16902:	2200      	movs	r2, #0
   16904:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   16908:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1690c:	d02a      	beq.n	16964 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   1690e:	0903      	lsrs	r3, r0, #4
   16910:	f003 030f 	and.w	r3, r3, #15
   16914:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16918:	2b0a      	cmp	r3, #10
   1691a:	bf38      	it	cc
   1691c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16920:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   16924:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16928:	d031      	beq.n	1698e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   1692a:	0a01      	lsrs	r1, r0, #8
   1692c:	f001 010f 	and.w	r1, r1, #15
   16930:	f101 0257 	add.w	r2, r1, #87	; 0x57
   16934:	290a      	cmp	r1, #10
   16936:	bf38      	it	cc
   16938:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   1693c:	2100      	movs	r1, #0
   1693e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16942:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   16946:	d027      	beq.n	16998 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   16948:	0b00      	lsrs	r0, r0, #12
   1694a:	f100 0157 	add.w	r1, r0, #87	; 0x57
   1694e:	280a      	cmp	r0, #10
   16950:	bf38      	it	cc
   16952:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   16956:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1695a:	227d      	movs	r2, #125	; 0x7d
   1695c:	207c      	movs	r0, #124	; 0x7c
   1695e:	2881      	cmp	r0, #129	; 0x81
   16960:	d304      	bcc.n	1696c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16962:	e01d      	b.n	169a0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16964:	2280      	movs	r2, #128	; 0x80
   16966:	207f      	movs	r0, #127	; 0x7f
   16968:	2881      	cmp	r0, #129	; 0x81
   1696a:	d219      	bcs.n	169a0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1696c:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   16970:	ab02      	add	r3, sp, #8
   16972:	4418      	add	r0, r3
   16974:	2101      	movs	r1, #1
   16976:	e9cd 0200 	strd	r0, r2, [sp]
   1697a:	f24e 2205 	movw	r2, #57861	; 0xe205
   1697e:	f2c0 0201 	movt	r2, #1
   16982:	4660      	mov	r0, ip
   16984:	2302      	movs	r3, #2
   16986:	f7fe ff7b 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1698a:	b022      	add	sp, #136	; 0x88
   1698c:	bd80      	pop	{r7, pc}
   1698e:	207e      	movs	r0, #126	; 0x7e
   16990:	227f      	movs	r2, #127	; 0x7f
   16992:	2881      	cmp	r0, #129	; 0x81
   16994:	d3ea      	bcc.n	1696c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16996:	e003      	b.n	169a0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16998:	207d      	movs	r0, #125	; 0x7d
   1699a:	227e      	movs	r2, #126	; 0x7e
   1699c:	2881      	cmp	r0, #129	; 0x81
   1699e:	d3e5      	bcc.n	1696c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   169a0:	2180      	movs	r1, #128	; 0x80
   169a2:	f7ff fb0a 	bl	15fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   169a6:	defe      	udf	#254	; 0xfe

000169a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   169a8:	b5b0      	push	{r4, r5, r7, lr}
   169aa:	b0a2      	sub	sp, #136	; 0x88
   169ac:	6800      	ldr	r0, [r0, #0]
   169ae:	f10d 0e08 	add.w	lr, sp, #8
   169b2:	468c      	mov	ip, r1
   169b4:	2381      	movs	r3, #129	; 0x81
   169b6:	2100      	movs	r1, #0
   169b8:	f000 020f 	and.w	r2, r0, #15
   169bc:	f102 0457 	add.w	r4, r2, #87	; 0x57
   169c0:	2a0a      	cmp	r2, #10
   169c2:	bf38      	it	cc
   169c4:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   169c8:	eb0e 0203 	add.w	r2, lr, r3
   169cc:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   169d0:	f802 4c02 	strb.w	r4, [r2, #-2]
   169d4:	d030      	beq.n	16a38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   169d6:	0904      	lsrs	r4, r0, #4
   169d8:	f004 040f 	and.w	r4, r4, #15
   169dc:	f104 0557 	add.w	r5, r4, #87	; 0x57
   169e0:	2c0a      	cmp	r4, #10
   169e2:	bf38      	it	cc
   169e4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   169e8:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   169ec:	f802 5c03 	strb.w	r5, [r2, #-3]
   169f0:	d028      	beq.n	16a44 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   169f2:	0a04      	lsrs	r4, r0, #8
   169f4:	f004 040f 	and.w	r4, r4, #15
   169f8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   169fc:	2c0a      	cmp	r4, #10
   169fe:	bf38      	it	cc
   16a00:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16a04:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16a08:	f802 5c04 	strb.w	r5, [r2, #-4]
   16a0c:	d01f      	beq.n	16a4e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   16a0e:	0b04      	lsrs	r4, r0, #12
   16a10:	3b04      	subs	r3, #4
   16a12:	f004 040f 	and.w	r4, r4, #15
   16a16:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16a1a:	2c0a      	cmp	r4, #10
   16a1c:	bf38      	it	cc
   16a1e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16a22:	f802 5c05 	strb.w	r5, [r2, #-5]
   16a26:	0c02      	lsrs	r2, r0, #16
   16a28:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16a2c:	4610      	mov	r0, r2
   16a2e:	d1c3      	bne.n	169b8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   16a30:	1e58      	subs	r0, r3, #1
   16a32:	2881      	cmp	r0, #129	; 0x81
   16a34:	d30f      	bcc.n	16a56 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16a36:	e01e      	b.n	16a76 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16a38:	1e59      	subs	r1, r3, #1
   16a3a:	1e98      	subs	r0, r3, #2
   16a3c:	460b      	mov	r3, r1
   16a3e:	2881      	cmp	r0, #129	; 0x81
   16a40:	d309      	bcc.n	16a56 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16a42:	e018      	b.n	16a76 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16a44:	1ed8      	subs	r0, r3, #3
   16a46:	3b02      	subs	r3, #2
   16a48:	2881      	cmp	r0, #129	; 0x81
   16a4a:	d304      	bcc.n	16a56 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16a4c:	e013      	b.n	16a76 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16a4e:	1f18      	subs	r0, r3, #4
   16a50:	3b03      	subs	r3, #3
   16a52:	2881      	cmp	r0, #129	; 0x81
   16a54:	d20f      	bcs.n	16a76 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16a56:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16a5a:	f24e 2205 	movw	r2, #57861	; 0xe205
   16a5e:	4470      	add	r0, lr
   16a60:	f2c0 0201 	movt	r2, #1
   16a64:	e9cd 0100 	strd	r0, r1, [sp]
   16a68:	4660      	mov	r0, ip
   16a6a:	2101      	movs	r1, #1
   16a6c:	2302      	movs	r3, #2
   16a6e:	f7fe ff07 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16a72:	b022      	add	sp, #136	; 0x88
   16a74:	bdb0      	pop	{r4, r5, r7, pc}
   16a76:	2180      	movs	r1, #128	; 0x80
   16a78:	f7ff fa9f 	bl	15fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16a7c:	defe      	udf	#254	; 0xfe

00016a7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   16a7e:	b5b0      	push	{r4, r5, r7, lr}
   16a80:	b0a2      	sub	sp, #136	; 0x88
   16a82:	6800      	ldr	r0, [r0, #0]
   16a84:	f10d 0e08 	add.w	lr, sp, #8
   16a88:	468c      	mov	ip, r1
   16a8a:	2381      	movs	r3, #129	; 0x81
   16a8c:	2100      	movs	r1, #0
   16a8e:	f000 020f 	and.w	r2, r0, #15
   16a92:	f102 0437 	add.w	r4, r2, #55	; 0x37
   16a96:	2a0a      	cmp	r2, #10
   16a98:	bf38      	it	cc
   16a9a:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16a9e:	eb0e 0203 	add.w	r2, lr, r3
   16aa2:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16aa6:	f802 4c02 	strb.w	r4, [r2, #-2]
   16aaa:	d030      	beq.n	16b0e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   16aac:	0904      	lsrs	r4, r0, #4
   16aae:	f004 040f 	and.w	r4, r4, #15
   16ab2:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16ab6:	2c0a      	cmp	r4, #10
   16ab8:	bf38      	it	cc
   16aba:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16abe:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16ac2:	f802 5c03 	strb.w	r5, [r2, #-3]
   16ac6:	d028      	beq.n	16b1a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   16ac8:	0a04      	lsrs	r4, r0, #8
   16aca:	f004 040f 	and.w	r4, r4, #15
   16ace:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16ad2:	2c0a      	cmp	r4, #10
   16ad4:	bf38      	it	cc
   16ad6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16ada:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16ade:	f802 5c04 	strb.w	r5, [r2, #-4]
   16ae2:	d01f      	beq.n	16b24 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   16ae4:	0b04      	lsrs	r4, r0, #12
   16ae6:	3b04      	subs	r3, #4
   16ae8:	f004 040f 	and.w	r4, r4, #15
   16aec:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16af0:	2c0a      	cmp	r4, #10
   16af2:	bf38      	it	cc
   16af4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16af8:	f802 5c05 	strb.w	r5, [r2, #-5]
   16afc:	0c02      	lsrs	r2, r0, #16
   16afe:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16b02:	4610      	mov	r0, r2
   16b04:	d1c3      	bne.n	16a8e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   16b06:	1e58      	subs	r0, r3, #1
   16b08:	2881      	cmp	r0, #129	; 0x81
   16b0a:	d30f      	bcc.n	16b2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16b0c:	e01e      	b.n	16b4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b0e:	1e59      	subs	r1, r3, #1
   16b10:	1e98      	subs	r0, r3, #2
   16b12:	460b      	mov	r3, r1
   16b14:	2881      	cmp	r0, #129	; 0x81
   16b16:	d309      	bcc.n	16b2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16b18:	e018      	b.n	16b4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b1a:	1ed8      	subs	r0, r3, #3
   16b1c:	3b02      	subs	r3, #2
   16b1e:	2881      	cmp	r0, #129	; 0x81
   16b20:	d304      	bcc.n	16b2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16b22:	e013      	b.n	16b4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b24:	1f18      	subs	r0, r3, #4
   16b26:	3b03      	subs	r3, #3
   16b28:	2881      	cmp	r0, #129	; 0x81
   16b2a:	d20f      	bcs.n	16b4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b2c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16b30:	f24e 2205 	movw	r2, #57861	; 0xe205
   16b34:	4470      	add	r0, lr
   16b36:	f2c0 0201 	movt	r2, #1
   16b3a:	e9cd 0100 	strd	r0, r1, [sp]
   16b3e:	4660      	mov	r0, ip
   16b40:	2101      	movs	r1, #1
   16b42:	2302      	movs	r3, #2
   16b44:	f7fe fe9c 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16b48:	b022      	add	sp, #136	; 0x88
   16b4a:	bdb0      	pop	{r4, r5, r7, pc}
   16b4c:	2180      	movs	r1, #128	; 0x80
   16b4e:	f7ff fa34 	bl	15fba <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16b52:	defe      	udf	#254	; 0xfe

00016b54 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   16b54:	b580      	push	{r7, lr}
   16b56:	b08c      	sub	sp, #48	; 0x30
   16b58:	7802      	ldrb	r2, [r0, #0]
   16b5a:	2a64      	cmp	r2, #100	; 0x64
   16b5c:	d314      	bcc.n	16b88 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   16b5e:	f248 501f 	movw	r0, #34079	; 0x851f
   16b62:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   16b66:	fba2 0300 	umull	r0, r3, r2, r0
   16b6a:	2064      	movs	r0, #100	; 0x64
   16b6c:	095b      	lsrs	r3, r3, #5
   16b6e:	fb03 2010 	mls	r0, r3, r0, r2
   16b72:	f24e 2207 	movw	r2, #57863	; 0xe207
   16b76:	f2c0 0201 	movt	r2, #1
   16b7a:	b2c0      	uxtb	r0, r0
   16b7c:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16b80:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16b84:	2024      	movs	r0, #36	; 0x24
   16b86:	e003      	b.n	16b90 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   16b88:	2a0a      	cmp	r2, #10
   16b8a:	d206      	bcs.n	16b9a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   16b8c:	2026      	movs	r0, #38	; 0x26
   16b8e:	4613      	mov	r3, r2
   16b90:	f103 0230 	add.w	r2, r3, #48	; 0x30
   16b94:	ab02      	add	r3, sp, #8
   16b96:	541a      	strb	r2, [r3, r0]
   16b98:	e008      	b.n	16bac <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   16b9a:	f24e 2007 	movw	r0, #57863	; 0xe207
   16b9e:	f2c0 0001 	movt	r0, #1
   16ba2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   16ba6:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16baa:	2025      	movs	r0, #37	; 0x25
   16bac:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   16bb0:	ab02      	add	r3, sp, #8
   16bb2:	4418      	add	r0, r3
   16bb4:	2300      	movs	r3, #0
   16bb6:	e9cd 0200 	strd	r0, r2, [sp]
   16bba:	f64d 72d4 	movw	r2, #57300	; 0xdfd4
   16bbe:	4608      	mov	r0, r1
   16bc0:	f2c0 0201 	movt	r2, #1
   16bc4:	2101      	movs	r1, #1
   16bc6:	f7fe fe5b 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16bca:	b00c      	add	sp, #48	; 0x30
   16bcc:	bd80      	pop	{r7, pc}

00016bce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   16bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd2:	b08f      	sub	sp, #60	; 0x3c
   16bd4:	6805      	ldr	r5, [r0, #0]
   16bd6:	f248 581f 	movw	r8, #34079	; 0x851f
   16bda:	460e      	mov	r6, r1
   16bdc:	f24e 2107 	movw	r1, #57863	; 0xe207
   16be0:	2d00      	cmp	r5, #0
   16be2:	f242 7910 	movw	r9, #10000	; 0x2710
   16be6:	462b      	mov	r3, r5
   16be8:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   16bec:	bf48      	it	mi
   16bee:	426b      	negmi	r3, r5
   16bf0:	454b      	cmp	r3, r9
   16bf2:	f2c0 0101 	movt	r1, #1
   16bf6:	d33a      	bcc.n	16c6e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   16bf8:	f241 7a59 	movw	sl, #5977	; 0x1759
   16bfc:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   16c00:	f10d 0e14 	add.w	lr, sp, #20
   16c04:	2400      	movs	r4, #0
   16c06:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   16c0a:	f04f 0b64 	mov.w	fp, #100	; 0x64
   16c0e:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   16c12:	e9cd 5603 	strd	r5, r6, [sp, #12]
   16c16:	fba3 250a 	umull	r2, r5, r3, sl
   16c1a:	eb0e 0704 	add.w	r7, lr, r4
   16c1e:	3c04      	subs	r4, #4
   16c20:	4283      	cmp	r3, r0
   16c22:	ea4f 3255 	mov.w	r2, r5, lsr #13
   16c26:	fb02 3519 	mls	r5, r2, r9, r3
   16c2a:	4613      	mov	r3, r2
   16c2c:	b2ae      	uxth	r6, r5
   16c2e:	fba6 6c08 	umull	r6, ip, r6, r8
   16c32:	ea4f 165c 	mov.w	r6, ip, lsr #5
   16c36:	fb06 551b 	mls	r5, r6, fp, r5
   16c3a:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   16c3e:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   16c42:	b2ad      	uxth	r5, r5
   16c44:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   16c48:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   16c4c:	d8e3      	bhi.n	16c16 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   16c4e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   16c52:	f104 0027 	add.w	r0, r4, #39	; 0x27
   16c56:	4613      	mov	r3, r2
   16c58:	2b63      	cmp	r3, #99	; 0x63
   16c5a:	dc0b      	bgt.n	16c74 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   16c5c:	461a      	mov	r2, r3
   16c5e:	2a0a      	cmp	r2, #10
   16c60:	db17      	blt.n	16c92 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   16c62:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   16c66:	3802      	subs	r0, #2
   16c68:	aa05      	add	r2, sp, #20
   16c6a:	5211      	strh	r1, [r2, r0]
   16c6c:	e016      	b.n	16c9c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   16c6e:	2027      	movs	r0, #39	; 0x27
   16c70:	2b63      	cmp	r3, #99	; 0x63
   16c72:	ddf3      	ble.n	16c5c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   16c74:	b29a      	uxth	r2, r3
   16c76:	3802      	subs	r0, #2
   16c78:	fba2 2708 	umull	r2, r7, r2, r8
   16c7c:	097a      	lsrs	r2, r7, #5
   16c7e:	2764      	movs	r7, #100	; 0x64
   16c80:	fb02 3317 	mls	r3, r2, r7, r3
   16c84:	af05      	add	r7, sp, #20
   16c86:	b29b      	uxth	r3, r3
   16c88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   16c8c:	523b      	strh	r3, [r7, r0]
   16c8e:	2a0a      	cmp	r2, #10
   16c90:	dae7      	bge.n	16c62 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   16c92:	3801      	subs	r0, #1
   16c94:	f102 0130 	add.w	r1, r2, #48	; 0x30
   16c98:	aa05      	add	r2, sp, #20
   16c9a:	5411      	strb	r1, [r2, r0]
   16c9c:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   16ca0:	aa05      	add	r2, sp, #20
   16ca2:	4410      	add	r0, r2
   16ca4:	f64d 72d4 	movw	r2, #57300	; 0xdfd4
   16ca8:	e9cd 0100 	strd	r0, r1, [sp]
   16cac:	43e8      	mvns	r0, r5
   16cae:	0fc1      	lsrs	r1, r0, #31
   16cb0:	f2c0 0201 	movt	r2, #1
   16cb4:	4630      	mov	r0, r6
   16cb6:	2300      	movs	r3, #0
   16cb8:	f7fe fde2 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16cbc:	b00f      	add	sp, #60	; 0x3c
   16cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016cc2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   16cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cc6:	b08d      	sub	sp, #52	; 0x34
   16cc8:	468c      	mov	ip, r1
   16cca:	6801      	ldr	r1, [r0, #0]
   16ccc:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16cd0:	f24e 2007 	movw	r0, #57863	; 0xe207
   16cd4:	f242 7810 	movw	r8, #10000	; 0x2710
   16cd8:	4541      	cmp	r1, r8
   16cda:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16cde:	f2c0 0001 	movt	r0, #1
   16ce2:	d337      	bcc.n	16d54 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   16ce4:	f241 7959 	movw	r9, #5977	; 0x1759
   16ce8:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16cec:	f10d 0b0c 	add.w	fp, sp, #12
   16cf0:	2300      	movs	r3, #0
   16cf2:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16cf6:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16cfa:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16cfe:	fba1 2409 	umull	r2, r4, r1, r9
   16d02:	42b9      	cmp	r1, r7
   16d04:	ea4f 3254 	mov.w	r2, r4, lsr #13
   16d08:	fb02 1418 	mls	r4, r2, r8, r1
   16d0c:	4611      	mov	r1, r2
   16d0e:	b2a5      	uxth	r5, r4
   16d10:	fba5 560e 	umull	r5, r6, r5, lr
   16d14:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16d18:	eb0b 0603 	add.w	r6, fp, r3
   16d1c:	fb05 441a 	mls	r4, r5, sl, r4
   16d20:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   16d24:	f1a3 0304 	sub.w	r3, r3, #4
   16d28:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16d2c:	b2a4      	uxth	r4, r4
   16d2e:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   16d32:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   16d36:	d8e2      	bhi.n	16cfe <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   16d38:	f103 0427 	add.w	r4, r3, #39	; 0x27
   16d3c:	4611      	mov	r1, r2
   16d3e:	2963      	cmp	r1, #99	; 0x63
   16d40:	dc0b      	bgt.n	16d5a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   16d42:	460b      	mov	r3, r1
   16d44:	2b0a      	cmp	r3, #10
   16d46:	db17      	blt.n	16d78 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   16d48:	1ea1      	subs	r1, r4, #2
   16d4a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   16d4e:	aa03      	add	r2, sp, #12
   16d50:	5250      	strh	r0, [r2, r1]
   16d52:	e016      	b.n	16d82 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   16d54:	2427      	movs	r4, #39	; 0x27
   16d56:	2963      	cmp	r1, #99	; 0x63
   16d58:	ddf3      	ble.n	16d42 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   16d5a:	b28a      	uxth	r2, r1
   16d5c:	3c02      	subs	r4, #2
   16d5e:	fba2 230e 	umull	r2, r3, r2, lr
   16d62:	2264      	movs	r2, #100	; 0x64
   16d64:	095b      	lsrs	r3, r3, #5
   16d66:	fb03 1112 	mls	r1, r3, r2, r1
   16d6a:	aa03      	add	r2, sp, #12
   16d6c:	b289      	uxth	r1, r1
   16d6e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   16d72:	5311      	strh	r1, [r2, r4]
   16d74:	2b0a      	cmp	r3, #10
   16d76:	dae7      	bge.n	16d48 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   16d78:	1e61      	subs	r1, r4, #1
   16d7a:	aa03      	add	r2, sp, #12
   16d7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16d80:	5450      	strb	r0, [r2, r1]
   16d82:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   16d86:	aa03      	add	r2, sp, #12
   16d88:	4411      	add	r1, r2
   16d8a:	f64d 72d4 	movw	r2, #57300	; 0xdfd4
   16d8e:	e9cd 1000 	strd	r1, r0, [sp]
   16d92:	f2c0 0201 	movt	r2, #1
   16d96:	4660      	mov	r0, ip
   16d98:	2101      	movs	r1, #1
   16d9a:	2300      	movs	r3, #0
   16d9c:	f7fe fd70 	bl	15880 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16da0:	b00d      	add	sp, #52	; 0x34
   16da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016da6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   16da6:	e9d0 2000 	ldrd	r2, r0, [r0]
   16daa:	68c3      	ldr	r3, [r0, #12]
   16dac:	4610      	mov	r0, r2
   16dae:	4718      	bx	r3

00016db0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   16db0:	460b      	mov	r3, r1
   16db2:	e9d0 1200 	ldrd	r1, r2, [r0]
   16db6:	4618      	mov	r0, r3
   16db8:	f7fe beaa 	b.w	15b10 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>

00016dbc <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   16dbc:	4b07      	ldr	r3, [pc, #28]	; (16ddc <__semihost+0x20>)
   16dbe:	781b      	ldrb	r3, [r3, #0]
   16dc0:	b14b      	cbz	r3, 16dd6 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   16dc2:	b410      	push	{r4}
   16dc4:	4602      	mov	r2, r0
   16dc6:	460c      	mov	r4, r1
    __asm( 
   16dc8:	4610      	mov	r0, r2
   16dca:	4621      	mov	r1, r4
   16dcc:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   16dce:	2000      	movs	r0, #0
}
   16dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
   16dd4:	4770      	bx	lr
    if (!log_enabled) return -1;
   16dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16dda:	4770      	bx	lr
   16ddc:	20000100 	.word	0x20000100

00016de0 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   16de0:	4b02      	ldr	r3, [pc, #8]	; (16dec <debugger_connected+0xc>)
   16de2:	6818      	ldr	r0, [r3, #0]
}
   16de4:	f000 0001 	and.w	r0, r0, #1
   16de8:	4770      	bx	lr
   16dea:	bf00      	nop
   16dec:	e000edf0 	.word	0xe000edf0

00016df0 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   16df0:	b570      	push	{r4, r5, r6, lr}
   16df2:	b084      	sub	sp, #16
   16df4:	4606      	mov	r6, r0
   16df6:	460d      	mov	r5, r1
   16df8:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   16dfa:	f7ff fff1 	bl	16de0 <debugger_connected>
   16dfe:	4603      	mov	r3, r0
   16e00:	b108      	cbz	r0, 16e06 <semihost_write+0x16>
    if (length == 0) { return 0; }
   16e02:	b91c      	cbnz	r4, 16e0c <semihost_write+0x1c>
   16e04:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   16e06:	4618      	mov	r0, r3
   16e08:	b004      	add	sp, #16
   16e0a:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   16e0c:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   16e0e:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   16e10:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   16e12:	a901      	add	r1, sp, #4
   16e14:	2005      	movs	r0, #5
   16e16:	f7ff ffd1 	bl	16dbc <__semihost>
   16e1a:	4603      	mov	r3, r0
   16e1c:	e7f3      	b.n	16e06 <semihost_write+0x16>
	...

00016e20 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   16e20:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   16e22:	4b0e      	ldr	r3, [pc, #56]	; (16e5c <console_flush+0x3c>)
   16e24:	781b      	ldrb	r3, [r3, #0]
   16e26:	b1bb      	cbz	r3, 16e58 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   16e28:	4b0d      	ldr	r3, [pc, #52]	; (16e60 <console_flush+0x40>)
   16e2a:	681d      	ldr	r5, [r3, #0]
   16e2c:	b1a5      	cbz	r5, 16e58 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   16e2e:	4b0d      	ldr	r3, [pc, #52]	; (16e64 <console_flush+0x44>)
   16e30:	685b      	ldr	r3, [r3, #4]
   16e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   16e36:	b97b      	cbnz	r3, 16e58 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   16e38:	4b09      	ldr	r3, [pc, #36]	; (16e60 <console_flush+0x40>)
   16e3a:	2200      	movs	r2, #0
   16e3c:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   16e3e:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   16e40:	e005      	b.n	16e4e <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   16e42:	88e2      	ldrh	r2, [r4, #6]
   16e44:	6821      	ldr	r1, [r4, #0]
   16e46:	2002      	movs	r0, #2
   16e48:	f7ff ffd2 	bl	16df0 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   16e4c:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   16e4e:	2c00      	cmp	r4, #0
   16e50:	d1f7      	bne.n	16e42 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   16e52:	4628      	mov	r0, r5
   16e54:	f001 fbfc 	bl	18650 <os_mbuf_free_chain>
}
   16e58:	bd38      	pop	{r3, r4, r5, pc}
   16e5a:	bf00      	nop
   16e5c:	20000100 	.word	0x20000100
   16e60:	20006f04 	.word	0x20006f04
   16e64:	e000ed00 	.word	0xe000ed00

00016e68 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   16e68:	b508      	push	{r3, lr}
   16e6a:	f7ff ffd9 	bl	16e20 <console_flush>
   16e6e:	bd08      	pop	{r3, pc}

00016e70 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   16e70:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   16e72:	4b12      	ldr	r3, [pc, #72]	; (16ebc <console_buffer+0x4c>)
   16e74:	781b      	ldrb	r3, [r3, #0]
   16e76:	b903      	cbnz	r3, 16e7a <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   16e78:	bd38      	pop	{r3, r4, r5, pc}
   16e7a:	460d      	mov	r5, r1
   16e7c:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   16e7e:	f7ff ffaf 	bl	16de0 <debugger_connected>
   16e82:	2800      	cmp	r0, #0
   16e84:	d0f8      	beq.n	16e78 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   16e86:	4b0e      	ldr	r3, [pc, #56]	; (16ec0 <console_buffer+0x50>)
   16e88:	681b      	ldr	r3, [r3, #0]
   16e8a:	b173      	cbz	r3, 16eaa <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   16e8c:	4b0c      	ldr	r3, [pc, #48]	; (16ec0 <console_buffer+0x50>)
   16e8e:	6818      	ldr	r0, [r3, #0]
   16e90:	f001 fbf0 	bl	18674 <os_mbuf_len>
   16e94:	4428      	add	r0, r5
   16e96:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16e9a:	d2ed      	bcs.n	16e78 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   16e9c:	b2aa      	uxth	r2, r5
   16e9e:	4621      	mov	r1, r4
   16ea0:	4b07      	ldr	r3, [pc, #28]	; (16ec0 <console_buffer+0x50>)
   16ea2:	6818      	ldr	r0, [r3, #0]
   16ea4:	f001 fbf0 	bl	18688 <os_mbuf_append>
   16ea8:	e7e6      	b.n	16e78 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   16eaa:	2100      	movs	r1, #0
   16eac:	b2a8      	uxth	r0, r5
   16eae:	f001 fd93 	bl	189d8 <os_msys_get_pkthdr>
   16eb2:	4b03      	ldr	r3, [pc, #12]	; (16ec0 <console_buffer+0x50>)
   16eb4:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   16eb6:	2800      	cmp	r0, #0
   16eb8:	d1e8      	bne.n	16e8c <console_buffer+0x1c>
   16eba:	e7dd      	b.n	16e78 <console_buffer+0x8>
   16ebc:	20000100 	.word	0x20000100
   16ec0:	20006f04 	.word	0x20006f04

00016ec4 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   16ec4:	b500      	push	{lr}
   16ec6:	b083      	sub	sp, #12
   16ec8:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   16ecc:	280d      	cmp	r0, #13
   16ece:	d004      	beq.n	16eda <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   16ed0:	2101      	movs	r1, #1
   16ed2:	f10d 0007 	add.w	r0, sp, #7
   16ed6:	f7ff ffcb 	bl	16e70 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   16eda:	b003      	add	sp, #12
   16edc:	f85d fb04 	ldr.w	pc, [sp], #4

00016ee0 <console_printhex>:
void console_printhex(uint8_t v) {
   16ee0:	b510      	push	{r4, lr}
   16ee2:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16ee4:	2310      	movs	r3, #16
    int length = 0;
   16ee6:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16ee8:	e005      	b.n	16ef6 <console_printhex+0x16>
        v = v % divisor;
   16eea:	fbb0 f1f3 	udiv	r1, r0, r3
   16eee:	fb03 0011 	mls	r0, r3, r1, r0
   16ef2:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16ef4:	091b      	lsrs	r3, r3, #4
   16ef6:	b18b      	cbz	r3, 16f1c <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   16ef8:	fbb0 f4f3 	udiv	r4, r0, r3
   16efc:	f104 0130 	add.w	r1, r4, #48	; 0x30
   16f00:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   16f02:	2939      	cmp	r1, #57	; 0x39
   16f04:	d902      	bls.n	16f0c <console_printhex+0x2c>
   16f06:	f104 0157 	add.w	r1, r4, #87	; 0x57
   16f0a:	b2c9      	uxtb	r1, r1
            if (length < size) {
   16f0c:	2a02      	cmp	r2, #2
   16f0e:	dcec      	bgt.n	16eea <console_printhex+0xa>
                buffer[length++] = digit;
   16f10:	ac02      	add	r4, sp, #8
   16f12:	4414      	add	r4, r2
   16f14:	f804 1c04 	strb.w	r1, [r4, #-4]
   16f18:	3201      	adds	r2, #1
   16f1a:	e7e6      	b.n	16eea <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   16f1c:	b92a      	cbnz	r2, 16f2a <console_printhex+0x4a>
   16f1e:	ab02      	add	r3, sp, #8
   16f20:	4413      	add	r3, r2
   16f22:	2130      	movs	r1, #48	; 0x30
   16f24:	f803 1c04 	strb.w	r1, [r3, #-4]
   16f28:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   16f2a:	2a02      	cmp	r2, #2
   16f2c:	dc04      	bgt.n	16f38 <console_printhex+0x58>
   16f2e:	ab02      	add	r3, sp, #8
   16f30:	441a      	add	r2, r3
   16f32:	2300      	movs	r3, #0
   16f34:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   16f38:	2300      	movs	r3, #0
   16f3a:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   16f3e:	a801      	add	r0, sp, #4
   16f40:	f002 fb73 	bl	1962a <strlen>
   16f44:	4601      	mov	r1, r0
   16f46:	a801      	add	r0, sp, #4
   16f48:	f7ff ff92 	bl	16e70 <console_buffer>
}
   16f4c:	b002      	add	sp, #8
   16f4e:	bd10      	pop	{r4, pc}

00016f50 <console_printint>:
void console_printint(int i) {
   16f50:	b508      	push	{r3, lr}
    console_printf("%d", i);
   16f52:	4601      	mov	r1, r0
   16f54:	4801      	ldr	r0, [pc, #4]	; (16f5c <console_printint+0xc>)
   16f56:	f000 f873 	bl	17040 <console_printf>
}
   16f5a:	bd08      	pop	{r3, pc}
   16f5c:	0001f1cc 	.word	0x0001f1cc

00016f60 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   16f60:	b180      	cbz	r0, 16f84 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   16f62:	b570      	push	{r4, r5, r6, lr}
   16f64:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   16f66:	b161      	cbz	r1, 16f82 <console_dump+0x22>
   16f68:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   16f6a:	2400      	movs	r4, #0
   16f6c:	e007      	b.n	16f7e <console_dump+0x1e>
   16f6e:	5d30      	ldrb	r0, [r6, r4]
   16f70:	f7ff ffb6 	bl	16ee0 <console_printhex>
   16f74:	2101      	movs	r1, #1
   16f76:	4804      	ldr	r0, [pc, #16]	; (16f88 <console_dump+0x28>)
   16f78:	f7ff ff7a 	bl	16e70 <console_buffer>
   16f7c:	3401      	adds	r4, #1
   16f7e:	42ac      	cmp	r4, r5
   16f80:	d3f5      	bcc.n	16f6e <console_dump+0xe>
}
   16f82:	bd70      	pop	{r4, r5, r6, pc}
   16f84:	4770      	bx	lr
   16f86:	bf00      	nop
   16f88:	0001f1c8 	.word	0x0001f1c8

00016f8c <console_out_nolock>:

int console_out_nolock(int character) {
   16f8c:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   16f8e:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   16f90:	4b0b      	ldr	r3, [pc, #44]	; (16fc0 <console_out_nolock+0x34>)
   16f92:	781b      	ldrb	r3, [r3, #0]
   16f94:	b953      	cbnz	r3, 16fac <console_out_nolock+0x20>
   16f96:	4604      	mov	r4, r0
    if ('\n' == c) {
   16f98:	2d0a      	cmp	r5, #10
   16f9a:	d009      	beq.n	16fb0 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   16f9c:	4b09      	ldr	r3, [pc, #36]	; (16fc4 <console_out_nolock+0x38>)
   16f9e:	2201      	movs	r2, #1
   16fa0:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   16fa2:	4628      	mov	r0, r5
   16fa4:	f7ff ff8e 	bl	16ec4 <semihosting_console_write_ch>
    return character;
   16fa8:	4620      	mov	r0, r4
}
   16faa:	bd38      	pop	{r3, r4, r5, pc}
   16fac:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   16fae:	e7fc      	b.n	16faa <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   16fb0:	200d      	movs	r0, #13
   16fb2:	f7ff ff87 	bl	16ec4 <semihosting_console_write_ch>
        console_is_midline = 0;
   16fb6:	4b03      	ldr	r3, [pc, #12]	; (16fc4 <console_out_nolock+0x38>)
   16fb8:	2200      	movs	r2, #0
   16fba:	601a      	str	r2, [r3, #0]
   16fbc:	e7f1      	b.n	16fa2 <console_out_nolock+0x16>
   16fbe:	bf00      	nop
   16fc0:	2000ddb4 	.word	0x2000ddb4
   16fc4:	2000ddb8 	.word	0x2000ddb8

00016fc8 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   16fc8:	2000      	movs	r0, #0
   16fca:	4770      	bx	lr

00016fcc <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   16fcc:	b570      	push	{r4, r5, r6, lr}
   16fce:	4606      	mov	r6, r0
   16fd0:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   16fd2:	2400      	movs	r4, #0
   16fd4:	42ac      	cmp	r4, r5
   16fd6:	da07      	bge.n	16fe8 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   16fd8:	5d30      	ldrb	r0, [r6, r4]
   16fda:	f7ff ffd7 	bl	16f8c <console_out_nolock>
   16fde:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16fe2:	d001      	beq.n	16fe8 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   16fe4:	3401      	adds	r4, #1
   16fe6:	e7f5      	b.n	16fd4 <console_write+0x8>
    }
}
   16fe8:	bd70      	pop	{r4, r5, r6, pc}

00016fea <console_blocking_mode>:

void console_blocking_mode(void) {
   16fea:	b508      	push	{r3, lr}
    disable_buffer();
   16fec:	f7ff ff3c 	bl	16e68 <disable_buffer>
}
   16ff0:	bd08      	pop	{r3, pc}
	...

00016ff4 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   16ff4:	b510      	push	{r4, lr}
   16ff6:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16ff8:	4b0d      	ldr	r3, [pc, #52]	; (17030 <console_pkg_init+0x3c>)
   16ffa:	781b      	ldrb	r3, [r3, #0]
   16ffc:	b193      	cbz	r3, 17024 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   16ffe:	480d      	ldr	r0, [pc, #52]	; (17034 <console_pkg_init+0x40>)
   17000:	f001 f9fa 	bl	183f8 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   17004:	480c      	ldr	r0, [pc, #48]	; (17038 <console_pkg_init+0x44>)
   17006:	f001 fd15 	bl	18a34 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   1700a:	f7ff ffdd 	bl	16fc8 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1700e:	b138      	cbz	r0, 17020 <console_pkg_init+0x2c>
   17010:	2000      	movs	r0, #0
   17012:	9000      	str	r0, [sp, #0]
   17014:	4b09      	ldr	r3, [pc, #36]	; (1703c <console_pkg_init+0x48>)
   17016:	681c      	ldr	r4, [r3, #0]
   17018:	4603      	mov	r3, r0
   1701a:	4602      	mov	r2, r0
   1701c:	4601      	mov	r1, r0
   1701e:	47a0      	blx	r4
}
   17020:	b002      	add	sp, #8
   17022:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   17024:	461a      	mov	r2, r3
   17026:	4619      	mov	r1, r3
   17028:	4618      	mov	r0, r3
   1702a:	f000 fed1 	bl	17dd0 <__assert_func>
   1702e:	bf00      	nop
   17030:	2000ddbc 	.word	0x2000ddbc
   17034:	20006f08 	.word	0x20006f08
   17038:	20006f18 	.word	0x20006f18
   1703c:	20000104 	.word	0x20000104

00017040 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   17040:	b40f      	push	{r0, r1, r2, r3}
   17042:	b510      	push	{r4, lr}
   17044:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   17046:	f000 f81f 	bl	17088 <console_get_ticks>
   1704a:	b160      	cbz	r0, 17066 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   1704c:	4b0c      	ldr	r3, [pc, #48]	; (17080 <console_printf+0x40>)
   1704e:	681b      	ldr	r3, [r3, #0]
   17050:	b10b      	cbz	r3, 17056 <console_printf+0x16>
    num_chars = 0;
   17052:	2400      	movs	r4, #0
   17054:	e008      	b.n	17068 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   17056:	f002 f8d9 	bl	1920c <os_time_get>
   1705a:	4601      	mov	r1, r0
   1705c:	4809      	ldr	r0, [pc, #36]	; (17084 <console_printf+0x44>)
   1705e:	f002 fd97 	bl	19b90 <printf>
   17062:	4604      	mov	r4, r0
   17064:	e000      	b.n	17068 <console_printf+0x28>
    num_chars = 0;
   17066:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   17068:	a905      	add	r1, sp, #20
   1706a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   1706c:	9804      	ldr	r0, [sp, #16]
   1706e:	f002 fdbf 	bl	19bf0 <vprintf>
    va_end(args);

    return num_chars;
}
   17072:	4420      	add	r0, r4
   17074:	b002      	add	sp, #8
   17076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1707a:	b004      	add	sp, #16
   1707c:	4770      	bx	lr
   1707e:	bf00      	nop
   17080:	2000ddb8 	.word	0x2000ddb8
   17084:	0001f1d0 	.word	0x0001f1d0

00017088 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   17088:	4b01      	ldr	r3, [pc, #4]	; (17090 <console_get_ticks+0x8>)
   1708a:	7818      	ldrb	r0, [r3, #0]
   1708c:	4770      	bx	lr
   1708e:	bf00      	nop
   17090:	20006f24 	.word	0x20006f24

00017094 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   17094:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   17096:	f000 fe9b 	bl	17dd0 <__assert_func>
	...

0001709c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1709c:	4b01      	ldr	r3, [pc, #4]	; (170a4 <sysinit_start+0x8>)
   1709e:	2201      	movs	r2, #1
   170a0:	701a      	strb	r2, [r3, #0]
}
   170a2:	4770      	bx	lr
   170a4:	2000ddbc 	.word	0x2000ddbc

000170a8 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   170a8:	4b01      	ldr	r3, [pc, #4]	; (170b0 <sysinit_end+0x8>)
   170aa:	2200      	movs	r2, #0
   170ac:	701a      	strb	r2, [r3, #0]
}
   170ae:	4770      	bx	lr
   170b0:	2000ddbc 	.word	0x2000ddbc

000170b4 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   170b4:	4a09      	ldr	r2, [pc, #36]	; (170dc <NVIC_Relocate+0x28>)
   170b6:	4b0a      	ldr	r3, [pc, #40]	; (170e0 <NVIC_Relocate+0x2c>)
   170b8:	429a      	cmp	r2, r3
   170ba:	d00a      	beq.n	170d2 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   170bc:	2300      	movs	r3, #0
   170be:	e006      	b.n	170ce <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   170c0:	4a07      	ldr	r2, [pc, #28]	; (170e0 <NVIC_Relocate+0x2c>)
   170c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   170c6:	4a05      	ldr	r2, [pc, #20]	; (170dc <NVIC_Relocate+0x28>)
   170c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   170cc:	3301      	adds	r3, #1
   170ce:	2b35      	cmp	r3, #53	; 0x35
   170d0:	ddf6      	ble.n	170c0 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   170d2:	4a02      	ldr	r2, [pc, #8]	; (170dc <NVIC_Relocate+0x28>)
   170d4:	4b03      	ldr	r3, [pc, #12]	; (170e4 <NVIC_Relocate+0x30>)
   170d6:	609a      	str	r2, [r3, #8]
#endif
}
   170d8:	4770      	bx	lr
   170da:	bf00      	nop
   170dc:	20000000 	.word	0x20000000
   170e0:	00008020 	.word	0x00008020
   170e4:	e000ed00 	.word	0xe000ed00

000170e8 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   170e8:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   170ea:	2400      	movs	r4, #0
   170ec:	e000      	b.n	170f0 <hal_gpio_irq_handler+0x8>
   170ee:	3401      	adds	r4, #1
   170f0:	2c07      	cmp	r4, #7
   170f2:	dc1c      	bgt.n	1712e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   170f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   170f8:	4a0d      	ldr	r2, [pc, #52]	; (17130 <hal_gpio_irq_handler+0x48>)
   170fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170fe:	2b00      	cmp	r3, #0
   17100:	d0f5      	beq.n	170ee <hal_gpio_irq_handler+0x6>
   17102:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   17106:	2301      	movs	r3, #1
   17108:	40a3      	lsls	r3, r4
   1710a:	421a      	tst	r2, r3
   1710c:	d0ef      	beq.n	170ee <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   1710e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17112:	4a07      	ldr	r2, [pc, #28]	; (17130 <hal_gpio_irq_handler+0x48>)
   17114:	2100      	movs	r1, #0
   17116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   1711a:	4b06      	ldr	r3, [pc, #24]	; (17134 <hal_gpio_irq_handler+0x4c>)
   1711c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   17120:	2a00      	cmp	r2, #0
   17122:	d0e4      	beq.n	170ee <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   17124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17128:	6858      	ldr	r0, [r3, #4]
   1712a:	4790      	blx	r2
   1712c:	e7df      	b.n	170ee <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   1712e:	bd10      	pop	{r4, pc}
   17130:	40006000 	.word	0x40006000
   17134:	20006f28 	.word	0x20006f28

00017138 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   17138:	4b06      	ldr	r3, [pc, #24]	; (17154 <hal_gpio_irq_setup+0x1c>)
   1713a:	781b      	ldrb	r3, [r3, #0]
   1713c:	b94b      	cbnz	r3, 17152 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1713e:	4b06      	ldr	r3, [pc, #24]	; (17158 <hal_gpio_irq_setup+0x20>)
   17140:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17142:	4a06      	ldr	r2, [pc, #24]	; (1715c <hal_gpio_irq_setup+0x24>)
   17144:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17146:	4b06      	ldr	r3, [pc, #24]	; (17160 <hal_gpio_irq_setup+0x28>)
   17148:	2240      	movs	r2, #64	; 0x40
   1714a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   1714c:	4b01      	ldr	r3, [pc, #4]	; (17154 <hal_gpio_irq_setup+0x1c>)
   1714e:	2201      	movs	r2, #1
   17150:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   17152:	4770      	bx	lr
   17154:	20006f68 	.word	0x20006f68
   17158:	e000ed00 	.word	0xe000ed00
   1715c:	000170e9 	.word	0x000170e9
   17160:	e000e100 	.word	0xe000e100

00017164 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17164:	2000      	movs	r0, #0
   17166:	2807      	cmp	r0, #7
   17168:	dc05      	bgt.n	17176 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   1716a:	4b04      	ldr	r3, [pc, #16]	; (1717c <hal_gpio_find_empty_slot+0x18>)
   1716c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17170:	b11b      	cbz	r3, 1717a <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17172:	3001      	adds	r0, #1
   17174:	e7f7      	b.n	17166 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   17176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1717a:	4770      	bx	lr
   1717c:	20006f28 	.word	0x20006f28

00017180 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   17180:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17182:	2000      	movs	r0, #0
   17184:	e000      	b.n	17188 <hal_gpio_find_pin+0x8>
   17186:	3001      	adds	r0, #1
   17188:	2807      	cmp	r0, #7
   1718a:	dc0e      	bgt.n	171aa <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   1718c:	4b08      	ldr	r3, [pc, #32]	; (171b0 <hal_gpio_find_pin+0x30>)
   1718e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17192:	2b00      	cmp	r3, #0
   17194:	d0f7      	beq.n	17186 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   17196:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   1719a:	4a06      	ldr	r2, [pc, #24]	; (171b4 <hal_gpio_find_pin+0x34>)
   1719c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171a0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   171a4:	428b      	cmp	r3, r1
   171a6:	d1ee      	bne.n	17186 <hal_gpio_find_pin+0x6>
   171a8:	e001      	b.n	171ae <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   171aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   171ae:	4770      	bx	lr
   171b0:	20006f28 	.word	0x20006f28
   171b4:	40006000 	.word	0x40006000

000171b8 <hal_gpio_init_in>:
    switch (pull) {
   171b8:	2901      	cmp	r1, #1
   171ba:	d003      	beq.n	171c4 <hal_gpio_init_in+0xc>
   171bc:	2902      	cmp	r1, #2
   171be:	d00f      	beq.n	171e0 <hal_gpio_init_in+0x28>
        conf = 0;
   171c0:	2100      	movs	r1, #0
        break;
   171c2:	e000      	b.n	171c6 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   171c4:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   171c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   171ca:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   171ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   171d2:	2301      	movs	r3, #1
   171d4:	fa03 f000 	lsl.w	r0, r3, r0
   171d8:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   171dc:	2000      	movs	r0, #0
   171de:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   171e0:	2104      	movs	r1, #4
   171e2:	e7f0      	b.n	171c6 <hal_gpio_init_in+0xe>

000171e4 <hal_gpio_init_out>:
    if (val) {
   171e4:	b999      	cbnz	r1, 1720e <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   171e6:	2301      	movs	r3, #1
   171e8:	4083      	lsls	r3, r0
   171ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   171ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   171f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   171f6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   171fa:	2103      	movs	r1, #3
   171fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   17200:	2301      	movs	r3, #1
   17202:	fa03 f000 	lsl.w	r0, r3, r0
   17206:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   1720a:	2000      	movs	r0, #0
   1720c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1720e:	2301      	movs	r3, #1
   17210:	4083      	lsls	r3, r0
   17212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17216:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1721a:	e7ea      	b.n	171f2 <hal_gpio_init_out+0xe>

0001721c <hal_gpio_write>:
    if (val) {
   1721c:	b939      	cbnz	r1, 1722e <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1721e:	2301      	movs	r3, #1
   17220:	fa03 f000 	lsl.w	r0, r3, r0
   17224:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17228:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1722c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1722e:	2301      	movs	r3, #1
   17230:	fa03 f000 	lsl.w	r0, r3, r0
   17234:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17238:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1723c:	4770      	bx	lr

0001723e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   1723e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17242:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   17246:	2301      	movs	r3, #1
   17248:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1724a:	421a      	tst	r2, r3
   1724c:	d108      	bne.n	17260 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1724e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17252:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   17256:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1725a:	f000 0001 	and.w	r0, r0, #1
}
   1725e:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17260:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17264:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   17268:	fa23 f000 	lsr.w	r0, r3, r0
   1726c:	f000 0001 	and.w	r0, r0, #1
   17270:	4770      	bx	lr
	...

00017274 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   17274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17278:	4680      	mov	r8, r0
   1727a:	460f      	mov	r7, r1
   1727c:	4616      	mov	r6, r2
   1727e:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   17280:	f7ff ff5a 	bl	17138 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   17284:	f7ff ff6e 	bl	17164 <hal_gpio_find_empty_slot>
    if (i < 0) {
   17288:	1e05      	subs	r5, r0, #0
   1728a:	db27      	blt.n	172dc <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   1728c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   17290:	4640      	mov	r0, r8
   17292:	f7ff ff91 	bl	171b8 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   17296:	2c02      	cmp	r4, #2
   17298:	d01d      	beq.n	172d6 <hal_gpio_irq_init+0x62>
   1729a:	2c03      	cmp	r4, #3
   1729c:	d018      	beq.n	172d0 <hal_gpio_irq_init+0x5c>
   1729e:	2c01      	cmp	r4, #1
   172a0:	d002      	beq.n	172a8 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   172a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172a6:	e011      	b.n	172cc <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   172a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   172ac:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   172b0:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   172b4:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   172b8:	4b0a      	ldr	r3, [pc, #40]	; (172e4 <hal_gpio_irq_init+0x70>)
   172ba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   172be:	4b0a      	ldr	r3, [pc, #40]	; (172e8 <hal_gpio_irq_init+0x74>)
   172c0:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   172c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   172c8:	605e      	str	r6, [r3, #4]

    return 0;
   172ca:	2000      	movs	r0, #0
}
   172cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   172d0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   172d4:	e7ea      	b.n	172ac <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   172d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   172da:	e7e7      	b.n	172ac <hal_gpio_irq_init+0x38>
        return -1;
   172dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172e0:	e7f4      	b.n	172cc <hal_gpio_irq_init+0x58>
   172e2:	bf00      	nop
   172e4:	40006000 	.word	0x40006000
   172e8:	20006f28 	.word	0x20006f28

000172ec <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   172ec:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   172ee:	f7ff ff47 	bl	17180 <hal_gpio_find_pin>
    if (i < 0) {
   172f2:	2800      	cmp	r0, #0
   172f4:	db0a      	blt.n	1730c <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   172f6:	4a06      	ldr	r2, [pc, #24]	; (17310 <hal_gpio_irq_enable+0x24>)
   172f8:	f100 0340 	add.w	r3, r0, #64	; 0x40
   172fc:	2100      	movs	r1, #0
   172fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   17302:	2301      	movs	r3, #1
   17304:	fa03 f000 	lsl.w	r0, r3, r0
   17308:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   1730c:	bd08      	pop	{r3, pc}
   1730e:	bf00      	nop
   17310:	40006000 	.word	0x40006000

00017314 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   17314:	3801      	subs	r0, #1
   17316:	bf00      	nop
   17318:	bf00      	nop
   1731a:	bf00      	nop
   1731c:	bf00      	nop
   1731e:	bf00      	nop
   17320:	bf00      	nop
   17322:	bf00      	nop
   17324:	bf00      	nop
   17326:	bf00      	nop
   17328:	bf00      	nop
   1732a:	bf00      	nop
   1732c:	bf00      	nop
   1732e:	bf00      	nop
   17330:	bf00      	nop
   17332:	bf00      	nop
   17334:	bf00      	nop
   17336:	bf00      	nop
   17338:	bf00      	nop
   1733a:	bf00      	nop
   1733c:	bf00      	nop
   1733e:	bf00      	nop
   17340:	bf00      	nop
   17342:	bf00      	nop
   17344:	bf00      	nop
   17346:	bf00      	nop
   17348:	bf00      	nop
   1734a:	bf00      	nop
   1734c:	bf00      	nop
   1734e:	bf00      	nop
   17350:	bf00      	nop
   17352:	bf00      	nop
   17354:	bf00      	nop
   17356:	bf00      	nop
   17358:	bf00      	nop
   1735a:	bf00      	nop
   1735c:	bf00      	nop
   1735e:	bf00      	nop
   17360:	bf00      	nop
   17362:	bf00      	nop
   17364:	bf00      	nop
   17366:	bf00      	nop
   17368:	bf00      	nop
   1736a:	bf00      	nop
   1736c:	bf00      	nop
   1736e:	bf00      	nop
   17370:	bf00      	nop
   17372:	bf00      	nop
   17374:	bf00      	nop
   17376:	bf00      	nop
   17378:	bf00      	nop
   1737a:	bf00      	nop
   1737c:	bf00      	nop
   1737e:	bf00      	nop
   17380:	bf00      	nop
   17382:	bf00      	nop
   17384:	bf00      	nop
   17386:	bf00      	nop
   17388:	bf00      	nop
   1738a:	d1c3      	bne.n	17314 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   1738c:	4770      	bx	lr
	...

00017390 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   17390:	2801      	cmp	r0, #1
   17392:	d806      	bhi.n	173a2 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   17394:	4b06      	ldr	r3, [pc, #24]	; (173b0 <hal_i2c_resolve+0x20>)
   17396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1739a:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1739c:	b12b      	cbz	r3, 173aa <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1739e:	2000      	movs	r0, #0
}
   173a0:	4770      	bx	lr
        *out_i2c = NULL;
   173a2:	2300      	movs	r3, #0
   173a4:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   173a6:	2002      	movs	r0, #2
   173a8:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   173aa:	2002      	movs	r0, #2
   173ac:	4770      	bx	lr
   173ae:	bf00      	nop
   173b0:	0001f1d8 	.word	0x0001f1d8

000173b4 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   173b4:	b148      	cbz	r0, 173ca <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   173b6:	f010 0f04 	tst.w	r0, #4
   173ba:	d107      	bne.n	173cc <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   173bc:	f010 0f02 	tst.w	r0, #2
   173c0:	d101      	bne.n	173c6 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   173c2:	2001      	movs	r0, #1
    }
}
   173c4:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   173c6:	2004      	movs	r0, #4
   173c8:	4770      	bx	lr
   173ca:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   173cc:	2005      	movs	r0, #5
   173ce:	4770      	bx	lr

000173d0 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   173d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   173d4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   173d8:	fa23 f000 	lsr.w	r0, r3, r0
}
   173dc:	f000 0001 	and.w	r0, r0, #1
   173e0:	4770      	bx	lr

000173e2 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   173e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173e6:	4605      	mov	r5, r0
   173e8:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   173ea:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   173ee:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   173f2:	f240 630c 	movw	r3, #1548	; 0x60c
   173f6:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   173fa:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   173fe:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   17402:	2101      	movs	r1, #1
   17404:	f7ff ff0a 	bl	1721c <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   17408:	2101      	movs	r1, #1
   1740a:	4630      	mov	r0, r6
   1740c:	f7ff ff06 	bl	1721c <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   17410:	f240 630d 	movw	r3, #1549	; 0x60d
   17414:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   17418:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   1741c:	2004      	movs	r0, #4
   1741e:	f7ff ff79 	bl	17314 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   17422:	2400      	movs	r4, #0
   17424:	2c08      	cmp	r4, #8
   17426:	dc14      	bgt.n	17452 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   17428:	4630      	mov	r0, r6
   1742a:	f7ff ffd1 	bl	173d0 <read_gpio_inbuffer>
   1742e:	b978      	cbnz	r0, 17450 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   17430:	2100      	movs	r1, #0
   17432:	4628      	mov	r0, r5
   17434:	f7ff fef2 	bl	1721c <hal_gpio_write>
        hal_i2c_delay_us(4);
   17438:	2004      	movs	r0, #4
   1743a:	f7ff ff6b 	bl	17314 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   1743e:	2101      	movs	r1, #1
   17440:	4628      	mov	r0, r5
   17442:	f7ff feeb 	bl	1721c <hal_gpio_write>
        hal_i2c_delay_us(4);
   17446:	2004      	movs	r0, #4
   17448:	f7ff ff64 	bl	17314 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   1744c:	3401      	adds	r4, #1
   1744e:	e7e9      	b.n	17424 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   17450:	b154      	cbz	r4, 17468 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   17452:	2100      	movs	r1, #0
   17454:	4630      	mov	r0, r6
   17456:	f7ff fee1 	bl	1721c <hal_gpio_write>
    hal_i2c_delay_us(4);
   1745a:	2004      	movs	r0, #4
   1745c:	f7ff ff5a 	bl	17314 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   17460:	2101      	movs	r1, #1
   17462:	4630      	mov	r0, r6
   17464:	f7ff feda 	bl	1721c <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   17468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1746c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   17470:	f240 620c 	movw	r2, #1548	; 0x60c
   17474:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17478:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1747c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   17480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017484 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   17484:	b5f0      	push	{r4, r5, r6, r7, lr}
   17486:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   17488:	b1a1      	cbz	r1, 174b4 <hal_i2c_init+0x30>
   1748a:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1748c:	a901      	add	r1, sp, #4
   1748e:	f7ff ff7f 	bl	17390 <hal_i2c_resolve>
    if (rc != 0) {
   17492:	4606      	mov	r6, r0
   17494:	bba8      	cbnz	r0, 17502 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   17496:	9b01      	ldr	r3, [sp, #4]
   17498:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1749a:	68a3      	ldr	r3, [r4, #8]
   1749c:	2bfa      	cmp	r3, #250	; 0xfa
   1749e:	d035      	beq.n	1750c <hal_i2c_init+0x88>
   174a0:	d90e      	bls.n	174c0 <hal_i2c_init+0x3c>
   174a2:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   174a6:	d02f      	beq.n	17508 <hal_i2c_init+0x84>
   174a8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   174ac:	d131      	bne.n	17512 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   174ae:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   174b2:	e009      	b.n	174c8 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   174b4:	2300      	movs	r3, #0
   174b6:	461a      	mov	r2, r3
   174b8:	4619      	mov	r1, r3
   174ba:	4618      	mov	r0, r3
   174bc:	f000 fc88 	bl	17dd0 <__assert_func>
    switch (cfg->i2c_frequency) {
   174c0:	2b64      	cmp	r3, #100	; 0x64
   174c2:	d126      	bne.n	17512 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   174c4:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   174c8:	6861      	ldr	r1, [r4, #4]
   174ca:	6820      	ldr	r0, [r4, #0]
   174cc:	f7ff ff89 	bl	173e2 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   174d0:	6823      	ldr	r3, [r4, #0]
   174d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   174d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   174da:	f240 610c 	movw	r1, #1548	; 0x60c
   174de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   174e2:	6863      	ldr	r3, [r4, #4]
   174e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   174e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   174ec:	6823      	ldr	r3, [r4, #0]
   174ee:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   174f2:	6863      	ldr	r3, [r4, #4]
   174f4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   174f8:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   174fc:	2305      	movs	r3, #5
   174fe:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   17502:	4630      	mov	r0, r6
   17504:	b003      	add	sp, #12
   17506:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   17508:	4f03      	ldr	r7, [pc, #12]	; (17518 <hal_i2c_init+0x94>)
        break;
   1750a:	e7dd      	b.n	174c8 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   1750c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   17510:	e7da      	b.n	174c8 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   17512:	2602      	movs	r6, #2
   17514:	e7f5      	b.n	17502 <hal_i2c_init+0x7e>
   17516:	bf00      	nop
   17518:	06147ae9 	.word	0x06147ae9

0001751c <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   1751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17520:	b083      	sub	sp, #12
   17522:	4688      	mov	r8, r1
   17524:	4615      	mov	r5, r2
   17526:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17528:	a901      	add	r1, sp, #4
   1752a:	f7ff ff31 	bl	17390 <hal_i2c_resolve>
    if (rc != 0) {
   1752e:	4681      	mov	r9, r0
   17530:	b118      	cbz	r0, 1753a <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   17532:	4648      	mov	r0, r9
   17534:	b003      	add	sp, #12
   17536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1753a:	9b01      	ldr	r3, [sp, #4]
   1753c:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   1753e:	f898 3000 	ldrb.w	r3, [r8]
   17542:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   17546:	2300      	movs	r3, #0
   17548:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1754c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17550:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   17554:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   17558:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   1755c:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17560:	2300      	movs	r3, #0
   17562:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   17566:	2301      	movs	r3, #1
   17568:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   1756a:	f000 fe61 	bl	18230 <os_cputime_get32>
   1756e:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17572:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17576:	f7ff fe62 	bl	1723e <hal_gpio_read>
   1757a:	b1b0      	cbz	r0, 175aa <hal_i2c_master_write+0x8e>
   1757c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17580:	b99b      	cbnz	r3, 175aa <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17582:	f000 fe55 	bl	18230 <os_cputime_get32>
   17586:	1b80      	subs	r0, r0, r6
   17588:	2800      	cmp	r0, #0
   1758a:	dbf2      	blt.n	17572 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1758c:	2300      	movs	r3, #0
   1758e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17592:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17596:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1759a:	f7ff ff22 	bl	173e2 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1759e:	2305      	movs	r3, #5
   175a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   175a4:	f1bb 0b01 	subs.w	fp, fp, #1
   175a8:	d1da      	bne.n	17560 <hal_i2c_master_write+0x44>
    start = os_time_get();
   175aa:	f001 fe2f 	bl	1920c <os_time_get>
   175ae:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   175b0:	464f      	mov	r7, r9
   175b2:	e003      	b.n	175bc <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   175b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175b8:	b9db      	cbnz	r3, 175f2 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   175ba:	3701      	adds	r7, #1
   175bc:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   175c0:	42bb      	cmp	r3, r7
   175c2:	dd24      	ble.n	1760e <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   175c4:	2300      	movs	r3, #0
   175c6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   175ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   175ce:	5ddb      	ldrb	r3, [r3, r7]
   175d0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   175d4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   175d8:	2b00      	cmp	r3, #0
   175da:	d1eb      	bne.n	175b4 <hal_i2c_master_write+0x98>
   175dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175e0:	2b00      	cmp	r3, #0
   175e2:	d1e7      	bne.n	175b4 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   175e4:	f001 fe12 	bl	1920c <os_time_get>
   175e8:	1b80      	subs	r0, r0, r6
   175ea:	42a8      	cmp	r0, r5
   175ec:	d9f2      	bls.n	175d4 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   175ee:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   175f2:	2301      	movs	r3, #1
   175f4:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   175f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   175fa:	2b00      	cmp	r3, #0
   175fc:	d099      	beq.n	17532 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   175fe:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17602:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17606:	f7ff fed5 	bl	173b4 <hal_i2c_convert_status>
   1760a:	4681      	mov	r9, r0
   1760c:	e791      	b.n	17532 <hal_i2c_master_write+0x16>
    if (last_op) {
   1760e:	f1ba 0f00 	cmp.w	sl, #0
   17612:	d08e      	beq.n	17532 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   17614:	2300      	movs	r3, #0
   17616:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1761a:	2301      	movs	r3, #1
   1761c:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1761e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   17622:	b953      	cbnz	r3, 1763a <hal_i2c_master_write+0x11e>
   17624:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17628:	b93b      	cbnz	r3, 1763a <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1762a:	f001 fdef 	bl	1920c <os_time_get>
   1762e:	1b80      	subs	r0, r0, r6
   17630:	42a8      	cmp	r0, r5
   17632:	d9f4      	bls.n	1761e <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   17634:	f04f 0903 	mov.w	r9, #3
   17638:	e7db      	b.n	175f2 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1763a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1763e:	2b00      	cmp	r3, #0
   17640:	d1d7      	bne.n	175f2 <hal_i2c_master_write+0xd6>
   17642:	e776      	b.n	17532 <hal_i2c_master_write+0x16>

00017644 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   17644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17648:	b085      	sub	sp, #20
   1764a:	460f      	mov	r7, r1
   1764c:	4615      	mov	r5, r2
   1764e:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17650:	a903      	add	r1, sp, #12
   17652:	f7ff fe9d 	bl	17390 <hal_i2c_resolve>
    if (rc != 0) {
   17656:	4681      	mov	r9, r0
   17658:	b118      	cbz	r0, 17662 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1765a:	4648      	mov	r0, r9
   1765c:	b005      	add	sp, #20
   1765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   17662:	9b03      	ldr	r3, [sp, #12]
   17664:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   17666:	f001 fdd1 	bl	1920c <os_time_get>
   1766a:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1766c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17670:	b11b      	cbz	r3, 1767a <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   17672:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   17676:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1767a:	2300      	movs	r3, #0
   1767c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   17680:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17684:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   17688:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1768c:	783b      	ldrb	r3, [r7, #0]
   1768e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   17692:	887b      	ldrh	r3, [r7, #2]
   17694:	2b01      	cmp	r3, #1
   17696:	d02e      	beq.n	176f6 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   17698:	2301      	movs	r3, #1
   1769a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1769e:	46a2      	mov	sl, r4
    int retry = 2;
   176a0:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   176a4:	2300      	movs	r3, #0
   176a6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   176aa:	2301      	movs	r3, #1
   176ac:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   176b0:	f000 fdbe 	bl	18230 <os_cputime_get32>
   176b4:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   176b8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   176bc:	f7ff fdbf 	bl	1723e <hal_gpio_read>
   176c0:	b1b8      	cbz	r0, 176f2 <hal_i2c_master_read+0xae>
   176c2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   176c6:	b9a3      	cbnz	r3, 176f2 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   176c8:	f000 fdb2 	bl	18230 <os_cputime_get32>
   176cc:	eba0 0008 	sub.w	r0, r0, r8
   176d0:	2800      	cmp	r0, #0
   176d2:	dbf1      	blt.n	176b8 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   176d4:	2300      	movs	r3, #0
   176d6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   176da:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   176de:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   176e2:	f7ff fe7e 	bl	173e2 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   176e6:	2305      	movs	r3, #5
   176e8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   176ec:	f1bb 0b01 	subs.w	fp, fp, #1
   176f0:	d1d8      	bne.n	176a4 <hal_i2c_master_read+0x60>
    int retry = 2;
   176f2:	46c8      	mov	r8, r9
   176f4:	e017      	b.n	17726 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   176f6:	9b01      	ldr	r3, [sp, #4]
   176f8:	2b00      	cmp	r3, #0
   176fa:	d0cd      	beq.n	17698 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   176fc:	2302      	movs	r3, #2
   176fe:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17702:	e7cc      	b.n	1769e <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   17704:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17708:	bb0b      	cbnz	r3, 1774e <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1770a:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1770e:	687b      	ldr	r3, [r7, #4]
   17710:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   17714:	887b      	ldrh	r3, [r7, #2]
   17716:	3b02      	subs	r3, #2
   17718:	4543      	cmp	r3, r8
   1771a:	d02a      	beq.n	17772 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1771c:	2300      	movs	r3, #0
   1771e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   17722:	f108 0801 	add.w	r8, r8, #1
   17726:	887b      	ldrh	r3, [r7, #2]
   17728:	4543      	cmp	r3, r8
   1772a:	dd96      	ble.n	1765a <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1772c:	2301      	movs	r3, #1
   1772e:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   17730:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17734:	2b00      	cmp	r3, #0
   17736:	d1e5      	bne.n	17704 <hal_i2c_master_read+0xc0>
   17738:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1773c:	2b00      	cmp	r3, #0
   1773e:	d1e1      	bne.n	17704 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   17740:	f001 fd64 	bl	1920c <os_time_get>
   17744:	1b80      	subs	r0, r0, r6
   17746:	42a8      	cmp	r0, r5
   17748:	d9f2      	bls.n	17730 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1774a:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1774e:	2301      	movs	r3, #1
   17750:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   17752:	2300      	movs	r3, #0
   17754:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   17758:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1775c:	2b00      	cmp	r3, #0
   1775e:	f43f af7c 	beq.w	1765a <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   17762:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17766:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1776a:	f7ff fe23 	bl	173b4 <hal_i2c_convert_status>
   1776e:	4681      	mov	r9, r0
   17770:	e773      	b.n	1765a <hal_i2c_master_read+0x16>
            if (last_op) {
   17772:	9b01      	ldr	r3, [sp, #4]
   17774:	2b00      	cmp	r3, #0
   17776:	d0d1      	beq.n	1771c <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17778:	2302      	movs	r3, #2
   1777a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1777e:	e7cd      	b.n	1771c <hal_i2c_master_read+0xd8>

00017780 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   17780:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   17782:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   17784:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17788:	b32b      	cbz	r3, 177d6 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1778a:	2300      	movs	r3, #0
   1778c:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   17790:	7843      	ldrb	r3, [r0, #1]
   17792:	b303      	cbz	r3, 177d6 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   17794:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   17798:	88c3      	ldrh	r3, [r0, #6]
   1779a:	fa13 f382 	uxtah	r3, r3, r2
   1779e:	b29b      	uxth	r3, r3
   177a0:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   177a2:	8881      	ldrh	r1, [r0, #4]
   177a4:	428b      	cmp	r3, r1
   177a6:	d217      	bcs.n	177d8 <nrf52_irqm_handler+0x58>
   177a8:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   177aa:	6984      	ldr	r4, [r0, #24]
   177ac:	4414      	add	r4, r2
   177ae:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   177b0:	1acb      	subs	r3, r1, r3
   177b2:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   177b4:	2bff      	cmp	r3, #255	; 0xff
   177b6:	bf28      	it	cs
   177b8:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   177ba:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   177be:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   177c2:	69c1      	ldr	r1, [r0, #28]
   177c4:	b129      	cbz	r1, 177d2 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   177c6:	440a      	add	r2, r1
   177c8:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   177ca:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   177ce:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   177d2:	2301      	movs	r3, #1
   177d4:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   177d6:	bd38      	pop	{r3, r4, r5, pc}
   177d8:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   177da:	6a03      	ldr	r3, [r0, #32]
   177dc:	b10b      	cbz	r3, 177e2 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   177de:	6a40      	ldr	r0, [r0, #36]	; 0x24
   177e0:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   177e2:	2300      	movs	r3, #0
   177e4:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   177e6:	2340      	movs	r3, #64	; 0x40
   177e8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   177ec:	e7f3      	b.n	177d6 <nrf52_irqm_handler+0x56>
	...

000177f0 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   177f0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   177f2:	4b04      	ldr	r3, [pc, #16]	; (17804 <nrf52_spi0_irq_handler+0x14>)
   177f4:	781b      	ldrb	r3, [r3, #0]
   177f6:	b103      	cbz	r3, 177fa <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   177f8:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   177fa:	4802      	ldr	r0, [pc, #8]	; (17804 <nrf52_spi0_irq_handler+0x14>)
   177fc:	f7ff ffc0 	bl	17780 <nrf52_irqm_handler>
}
   17800:	e7fa      	b.n	177f8 <nrf52_spi0_irq_handler+0x8>
   17802:	bf00      	nop
   17804:	2000ddc0 	.word	0x2000ddc0

00017808 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   17808:	2301      	movs	r3, #1
   1780a:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1780c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   17810:	2b00      	cmp	r3, #0
   17812:	d0fb      	beq.n	1780c <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   17814:	2300      	movs	r3, #0
   17816:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1781a:	4770      	bx	lr

0001781c <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1781c:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1781e:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   17820:	780b      	ldrb	r3, [r1, #0]
   17822:	2b03      	cmp	r3, #3
   17824:	d80c      	bhi.n	17840 <hal_spi_config_slave+0x24>
   17826:	e8df f003 	tbb	[pc, r3]
   1782a:	0e02      	.short	0x0e02
   1782c:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1782e:	2300      	movs	r3, #0
    rc = 0;
   17830:	4618      	mov	r0, r3
   17832:	e00a      	b.n	1784a <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17834:	2304      	movs	r3, #4
    rc = 0;
   17836:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   17838:	e007      	b.n	1784a <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1783a:	2306      	movs	r3, #6
    rc = 0;
   1783c:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1783e:	e004      	b.n	1784a <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   17840:	2300      	movs	r3, #0
            rc = EINVAL;
   17842:	2016      	movs	r0, #22
            break;
   17844:	e001      	b.n	1784a <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17846:	2302      	movs	r3, #2
    rc = 0;
   17848:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1784a:	784c      	ldrb	r4, [r1, #1]
   1784c:	2c01      	cmp	r4, #1
   1784e:	d006      	beq.n	1785e <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   17850:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   17854:	788b      	ldrb	r3, [r1, #2]
   17856:	b92b      	cbnz	r3, 17864 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   17858:	f85d 4b04 	ldr.w	r4, [sp], #4
   1785c:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1785e:	f043 0301 	orr.w	r3, r3, #1
   17862:	e7f5      	b.n	17850 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   17864:	2016      	movs	r0, #22
    return rc;
   17866:	e7f7      	b.n	17858 <hal_spi_config_slave+0x3c>

00017868 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   17868:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1786a:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1786c:	2501      	movs	r5, #1
   1786e:	409d      	lsls	r5, r3
   17870:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17874:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   17878:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1787c:	2503      	movs	r5, #3
   1787e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   17882:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   17884:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17888:	2500      	movs	r5, #0
   1788a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1788e:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   17890:	780c      	ldrb	r4, [r1, #0]
   17892:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   17896:	784c      	ldrb	r4, [r1, #1]
   17898:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1789c:	7889      	ldrb	r1, [r1, #2]
   1789e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   178a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   178a6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   178aa:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   178ae:	4919      	ldr	r1, [pc, #100]	; (17914 <hal_spi_init_master+0xac>)
   178b0:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   178b2:	3310      	adds	r3, #16
   178b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   178b8:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   178bc:	42ab      	cmp	r3, r5
   178be:	db22      	blt.n	17906 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   178c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   178c4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   178c8:	22e0      	movs	r2, #224	; 0xe0
   178ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   178ce:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   178d2:	2b00      	cmp	r3, #0
   178d4:	db08      	blt.n	178e8 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   178d6:	f003 011f 	and.w	r1, r3, #31
   178da:	095b      	lsrs	r3, r3, #5
   178dc:	2201      	movs	r2, #1
   178de:	408a      	lsls	r2, r1
   178e0:	3360      	adds	r3, #96	; 0x60
   178e2:	490d      	ldr	r1, [pc, #52]	; (17918 <hal_spi_init_master+0xb0>)
   178e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   178e8:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   178ec:	2b00      	cmp	r3, #0
   178ee:	db07      	blt.n	17900 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   178f0:	f003 011f 	and.w	r1, r3, #31
   178f4:	095b      	lsrs	r3, r3, #5
   178f6:	2201      	movs	r2, #1
   178f8:	408a      	lsls	r2, r1
   178fa:	4907      	ldr	r1, [pc, #28]	; (17918 <hal_spi_init_master+0xb0>)
   178fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   17900:	2000      	movs	r0, #0
   17902:	bc30      	pop	{r4, r5}
   17904:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17906:	f003 030f 	and.w	r3, r3, #15
   1790a:	4a04      	ldr	r2, [pc, #16]	; (1791c <hal_spi_init_master+0xb4>)
   1790c:	441a      	add	r2, r3
   1790e:	23e0      	movs	r3, #224	; 0xe0
   17910:	7613      	strb	r3, [r2, #24]
   17912:	e7dc      	b.n	178ce <hal_spi_init_master+0x66>
   17914:	e000ed00 	.word	0xe000ed00
   17918:	e000e100 	.word	0xe000e100
   1791c:	e000ecfc 	.word	0xe000ecfc

00017920 <hal_spi_config_master>:
{
   17920:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   17922:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   17924:	680c      	ldr	r4, [r1, #0]
   17926:	684b      	ldr	r3, [r1, #4]
   17928:	6084      	str	r4, [r0, #8]
   1792a:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1792c:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   17930:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   17934:	7808      	ldrb	r0, [r1, #0]
   17936:	2801      	cmp	r0, #1
   17938:	d916      	bls.n	17968 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1793a:	2001      	movs	r0, #1
   1793c:	4098      	lsls	r0, r3
   1793e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17942:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   17946:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1794a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1794e:	2403      	movs	r4, #3
   17950:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   17954:	788b      	ldrb	r3, [r1, #2]
   17956:	b973      	cbnz	r3, 17976 <hal_spi_config_master+0x56>
    rc = 0;
   17958:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1795a:	780b      	ldrb	r3, [r1, #0]
   1795c:	2b03      	cmp	r3, #3
   1795e:	d812      	bhi.n	17986 <hal_spi_config_master+0x66>
   17960:	e8df f003 	tbb	[pc, r3]
   17964:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   17968:	2001      	movs	r0, #1
   1796a:	4098      	lsls	r0, r3
   1796c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17970:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   17974:	e7e7      	b.n	17946 <hal_spi_config_master+0x26>
            rc = EINVAL;
   17976:	2016      	movs	r0, #22
   17978:	e7ef      	b.n	1795a <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1797a:	2300      	movs	r3, #0
   1797c:	e007      	b.n	1798e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1797e:	2304      	movs	r3, #4
            break;
   17980:	e005      	b.n	1798e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17982:	2306      	movs	r3, #6
            break;
   17984:	e003      	b.n	1798e <hal_spi_config_master+0x6e>
            nrf_config = 0;
   17986:	2300      	movs	r3, #0
            rc = EINVAL;
   17988:	2016      	movs	r0, #22
            break;
   1798a:	e000      	b.n	1798e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1798c:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1798e:	784c      	ldrb	r4, [r1, #1]
   17990:	2c01      	cmp	r4, #1
   17992:	d010      	beq.n	179b6 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   17994:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   17998:	684b      	ldr	r3, [r1, #4]
   1799a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1799e:	d023      	beq.n	179e8 <hal_spi_config_master+0xc8>
   179a0:	d80c      	bhi.n	179bc <hal_spi_config_master+0x9c>
   179a2:	2bfa      	cmp	r3, #250	; 0xfa
   179a4:	d029      	beq.n	179fa <hal_spi_config_master+0xda>
   179a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   179aa:	d01a      	beq.n	179e2 <hal_spi_config_master+0xc2>
   179ac:	2b7d      	cmp	r3, #125	; 0x7d
   179ae:	d011      	beq.n	179d4 <hal_spi_config_master+0xb4>
            frequency = 0;
   179b0:	2300      	movs	r3, #0
            rc = EINVAL;
   179b2:	2016      	movs	r0, #22
            break;
   179b4:	e010      	b.n	179d8 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   179b6:	f043 0301 	orr.w	r3, r3, #1
   179ba:	e7eb      	b.n	17994 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   179bc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   179c0:	d015      	beq.n	179ee <hal_spi_config_master+0xce>
   179c2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   179c6:	d015      	beq.n	179f4 <hal_spi_config_master+0xd4>
   179c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   179cc:	d1f0      	bne.n	179b0 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   179ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   179d2:	e001      	b.n	179d8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   179d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   179d8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   179dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   179e0:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   179e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   179e6:	e7f7      	b.n	179d8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   179e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   179ec:	e7f4      	b.n	179d8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   179ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   179f2:	e7f1      	b.n	179d8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   179f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   179f8:	e7ee      	b.n	179d8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   179fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   179fe:	e7eb      	b.n	179d8 <hal_spi_config_master+0xb8>

00017a00 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a00:	2802      	cmp	r0, #2
   17a02:	dc10      	bgt.n	17a26 <hal_spi_config+0x26>
{
   17a04:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a06:	4b0b      	ldr	r3, [pc, #44]	; (17a34 <hal_spi_config+0x34>)
   17a08:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17a0c:	b168      	cbz	r0, 17a2a <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17a0e:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   17a10:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   17a14:	b95b      	cbnz	r3, 17a2e <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17a16:	7803      	ldrb	r3, [r0, #0]
   17a18:	b113      	cbz	r3, 17a20 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   17a1a:	f7ff feff 	bl	1781c <hal_spi_config_slave>
    }

err:
    return (rc);
}
   17a1e:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   17a20:	f7ff ff7e 	bl	17920 <hal_spi_config_master>
   17a24:	e7fb      	b.n	17a1e <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a26:	2016      	movs	r0, #22
}
   17a28:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a2a:	2016      	movs	r0, #22
   17a2c:	e7f7      	b.n	17a1e <hal_spi_config+0x1e>
        return -1;
   17a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a32:	e7f4      	b.n	17a1e <hal_spi_config+0x1e>
   17a34:	0001f1e0 	.word	0x0001f1e0

00017a38 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a38:	2802      	cmp	r0, #2
   17a3a:	dc1b      	bgt.n	17a74 <hal_spi_enable+0x3c>
   17a3c:	4b10      	ldr	r3, [pc, #64]	; (17a80 <hal_spi_enable+0x48>)
   17a3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17a42:	b1cb      	cbz	r3, 17a78 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17a44:	781a      	ldrb	r2, [r3, #0]
   17a46:	b17a      	cbz	r2, 17a68 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   17a48:	6a1a      	ldr	r2, [r3, #32]
   17a4a:	b1ba      	cbz	r2, 17a7c <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   17a4c:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   17a4e:	2000      	movs	r0, #0
   17a50:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17a54:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   17a58:	f240 4202 	movw	r2, #1026	; 0x402
   17a5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   17a60:	2202      	movs	r2, #2
   17a62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17a66:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   17a68:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17a6a:	2201      	movs	r2, #1
   17a6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   17a70:	2000      	movs	r0, #0
   17a72:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a74:	2016      	movs	r0, #22
   17a76:	4770      	bx	lr
   17a78:	2016      	movs	r0, #22
   17a7a:	4770      	bx	lr
            rc = EINVAL;
   17a7c:	2016      	movs	r0, #22

err:
    return rc;
}
   17a7e:	4770      	bx	lr
   17a80:	0001f1e0 	.word	0x0001f1e0

00017a84 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a84:	2802      	cmp	r0, #2
   17a86:	dc2a      	bgt.n	17ade <hal_spi_disable+0x5a>
{
   17a88:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a8a:	4b17      	ldr	r3, [pc, #92]	; (17ae8 <hal_spi_disable+0x64>)
   17a8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17a90:	b33c      	cbz	r4, 17ae2 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17a92:	7823      	ldrb	r3, [r4, #0]
   17a94:	b9ab      	cbnz	r3, 17ac2 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   17a96:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17a9c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   17aa0:	7863      	ldrb	r3, [r4, #1]
   17aa2:	b943      	cbnz	r3, 17ab6 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   17aa4:	2300      	movs	r3, #0
   17aa6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   17aaa:	2000      	movs	r0, #0
   17aac:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   17aae:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   17ab0:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   17ab2:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   17ab4:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   17ab6:	4628      	mov	r0, r5
   17ab8:	f7ff fea6 	bl	17808 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   17abc:	2300      	movs	r3, #0
   17abe:	7063      	strb	r3, [r4, #1]
   17ac0:	e7f0      	b.n	17aa4 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   17ac2:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ac8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   17acc:	2300      	movs	r3, #0
   17ace:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17ad2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   17ad6:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   17ada:	70e3      	strb	r3, [r4, #3]
   17adc:	e7e5      	b.n	17aaa <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ade:	2016      	movs	r0, #22
}
   17ae0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ae2:	2016      	movs	r0, #22
    return rc;
   17ae4:	e7e6      	b.n	17ab4 <hal_spi_disable+0x30>
   17ae6:	bf00      	nop
   17ae8:	0001f1e0 	.word	0x0001f1e0

00017aec <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17aec:	2802      	cmp	r0, #2
   17aee:	dc1d      	bgt.n	17b2c <hal_spi_init+0x40>
{
   17af0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17af2:	4b13      	ldr	r3, [pc, #76]	; (17b40 <hal_spi_init+0x54>)
   17af4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17af8:	b1d4      	cbz	r4, 17b30 <hal_spi_init+0x44>
    if (cfg == NULL) {
   17afa:	b1d9      	cbz	r1, 17b34 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   17afc:	2a01      	cmp	r2, #1
   17afe:	d81b      	bhi.n	17b38 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   17b00:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   17b02:	b9d8      	cbnz	r0, 17b3c <hal_spi_init+0x50>
   17b04:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   17b06:	2303      	movs	r3, #3
   17b08:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   17b0a:	b94a      	cbnz	r2, 17b20 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   17b0c:	4b0d      	ldr	r3, [pc, #52]	; (17b44 <hal_spi_init+0x58>)
   17b0e:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   17b10:	f7ff ffb8 	bl	17a84 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   17b14:	4a0c      	ldr	r2, [pc, #48]	; (17b48 <hal_spi_init+0x5c>)
   17b16:	4629      	mov	r1, r5
   17b18:	4620      	mov	r0, r4
   17b1a:	f7ff fea5 	bl	17868 <hal_spi_init_master>
   17b1e:	e00c      	b.n	17b3a <hal_spi_init+0x4e>
            assert(0);
   17b20:	2300      	movs	r3, #0
   17b22:	461a      	mov	r2, r3
   17b24:	4619      	mov	r1, r3
   17b26:	4618      	mov	r0, r3
   17b28:	f000 f952 	bl	17dd0 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b2c:	2016      	movs	r0, #22
}
   17b2e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b30:	2016      	movs	r0, #22
   17b32:	e002      	b.n	17b3a <hal_spi_init+0x4e>
    rc = EINVAL;
   17b34:	2016      	movs	r0, #22
   17b36:	e000      	b.n	17b3a <hal_spi_init+0x4e>
   17b38:	2016      	movs	r0, #22
}
   17b3a:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   17b3c:	2016      	movs	r0, #22
    return (rc);
   17b3e:	e7fc      	b.n	17b3a <hal_spi_init+0x4e>
   17b40:	0001f1e0 	.word	0x0001f1e0
   17b44:	40003000 	.word	0x40003000
   17b48:	000177f1 	.word	0x000177f1

00017b4c <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b4c:	2802      	cmp	r0, #2
   17b4e:	dc0a      	bgt.n	17b66 <hal_spi_set_txrx_cb+0x1a>
   17b50:	4b08      	ldr	r3, [pc, #32]	; (17b74 <hal_spi_set_txrx_cb+0x28>)
   17b52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17b56:	b143      	cbz	r3, 17b6a <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17b58:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   17b5a:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   17b5e:	b930      	cbnz	r0, 17b6e <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   17b60:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   17b62:	625a      	str	r2, [r3, #36]	; 0x24
   17b64:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b66:	2016      	movs	r0, #22
   17b68:	4770      	bx	lr
   17b6a:	2016      	movs	r0, #22
   17b6c:	4770      	bx	lr
        rc = -1;
   17b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   17b72:	4770      	bx	lr
   17b74:	0001f1e0 	.word	0x0001f1e0

00017b78 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   17b78:	2b00      	cmp	r3, #0
   17b7a:	d046      	beq.n	17c0a <hal_spi_txrx+0x92>
{
   17b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b7e:	460d      	mov	r5, r1
   17b80:	4617      	mov	r7, r2
   17b82:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   17b84:	2802      	cmp	r0, #2
   17b86:	dc42      	bgt.n	17c0e <hal_spi_txrx+0x96>
   17b88:	4b25      	ldr	r3, [pc, #148]	; (17c20 <hal_spi_txrx+0xa8>)
   17b8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17b8e:	2b00      	cmp	r3, #0
   17b90:	d03f      	beq.n	17c12 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17b92:	781a      	ldrb	r2, [r3, #0]
   17b94:	2a00      	cmp	r2, #0
   17b96:	d13e      	bne.n	17c16 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17b98:	2900      	cmp	r1, #0
   17b9a:	d03e      	beq.n	17c1a <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   17b9c:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   17b9e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   17ba2:	2b07      	cmp	r3, #7
   17ba4:	d004      	beq.n	17bb0 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   17ba6:	b95b      	cbnz	r3, 17bc0 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17ba8:	2301      	movs	r3, #1
   17baa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   17bae:	e007      	b.n	17bc0 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   17bb0:	f7ff ff68 	bl	17a84 <hal_spi_disable>
   17bb4:	e7f8      	b.n	17ba8 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   17bb6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   17bba:	2300      	movs	r3, #0
   17bbc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   17bc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17bc4:	2b00      	cmp	r3, #0
   17bc6:	d1f6      	bne.n	17bb6 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   17bc8:	782b      	ldrb	r3, [r5, #0]
   17bca:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   17bce:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   17bd0:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   17bd2:	2200      	movs	r2, #0
   17bd4:	e00d      	b.n	17bf2 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   17bd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17bda:	2b00      	cmp	r3, #0
   17bdc:	d0fb      	beq.n	17bd6 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   17bde:	2300      	movs	r3, #0
   17be0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   17be4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   17be8:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   17bea:	b10f      	cbz	r7, 17bf0 <hal_spi_txrx+0x78>
                *rxd = rxval;
   17bec:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   17bf0:	3201      	adds	r2, #1
   17bf2:	42b2      	cmp	r2, r6
   17bf4:	da07      	bge.n	17c06 <hal_spi_txrx+0x8e>
            if (txcnt) {
   17bf6:	2900      	cmp	r1, #0
   17bf8:	d0ed      	beq.n	17bd6 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   17bfa:	786b      	ldrb	r3, [r5, #1]
   17bfc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   17c00:	3901      	subs	r1, #1
                ++txd;
   17c02:	3501      	adds	r5, #1
   17c04:	e7e7      	b.n	17bd6 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   17c06:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   17c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   17c0a:	2016      	movs	r0, #22
}
   17c0c:	4770      	bx	lr
    return rc;
   17c0e:	2016      	movs	r0, #22
   17c10:	e7fa      	b.n	17c08 <hal_spi_txrx+0x90>
   17c12:	2016      	movs	r0, #22
   17c14:	e7f8      	b.n	17c08 <hal_spi_txrx+0x90>
   17c16:	2016      	movs	r0, #22
   17c18:	e7f6      	b.n	17c08 <hal_spi_txrx+0x90>
   17c1a:	2016      	movs	r0, #22
   17c1c:	e7f4      	b.n	17c08 <hal_spi_txrx+0x90>
   17c1e:	bf00      	nop
   17c20:	0001f1e0 	.word	0x0001f1e0

00017c24 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17c24:	2802      	cmp	r0, #2
   17c26:	dc57      	bgt.n	17cd8 <hal_spi_txrx_noblock+0xb4>
{
   17c28:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17c2a:	4c35      	ldr	r4, [pc, #212]	; (17d00 <hal_spi_txrx_noblock+0xdc>)
   17c2c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   17c30:	2800      	cmp	r0, #0
   17c32:	d053      	beq.n	17cdc <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   17c34:	6a04      	ldr	r4, [r0, #32]
   17c36:	2c00      	cmp	r4, #0
   17c38:	d052      	beq.n	17ce0 <hal_spi_txrx_noblock+0xbc>
   17c3a:	2b00      	cmp	r3, #0
   17c3c:	d052      	beq.n	17ce4 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17c3e:	7804      	ldrb	r4, [r0, #0]
   17c40:	2c00      	cmp	r4, #0
   17c42:	d137      	bne.n	17cb4 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17c44:	2900      	cmp	r1, #0
   17c46:	d050      	beq.n	17cea <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   17c48:	7844      	ldrb	r4, [r0, #1]
   17c4a:	2c00      	cmp	r4, #0
   17c4c:	d14f      	bne.n	17cee <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   17c4e:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   17c50:	2540      	movs	r5, #64	; 0x40
   17c52:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   17c56:	2501      	movs	r5, #1
   17c58:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   17c5a:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   17c5e:	2d07      	cmp	r5, #7
   17c60:	d005      	beq.n	17c6e <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   17c62:	2500      	movs	r5, #0
   17c64:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   17c68:	2507      	movs	r5, #7
   17c6a:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   17c6e:	2500      	movs	r5, #0
   17c70:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   17c72:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   17c74:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   17c76:	2bff      	cmp	r3, #255	; 0xff
   17c78:	bfa8      	it	ge
   17c7a:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   17c7c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   17c80:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   17c84:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   17c86:	b172      	cbz	r2, 17ca6 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   17c88:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   17c8c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   17c90:	2000      	movs	r0, #0
   17c92:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   17c96:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   17c9a:	2301      	movs	r3, #1
   17c9c:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   17c9e:	2340      	movs	r3, #64	; 0x40
   17ca0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   17ca4:	e01f      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   17ca6:	3002      	adds	r0, #2
   17ca8:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   17cac:	2301      	movs	r3, #1
   17cae:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   17cb2:	e7ed      	b.n	17c90 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   17cb4:	b161      	cbz	r1, 17cd0 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   17cb6:	2bff      	cmp	r3, #255	; 0xff
   17cb8:	dc1c      	bgt.n	17cf4 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   17cba:	78c4      	ldrb	r4, [r0, #3]
   17cbc:	b9e4      	cbnz	r4, 17cf8 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   17cbe:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   17cc0:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   17cc2:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   17cc4:	2301      	movs	r3, #1
   17cc6:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   17cc8:	6902      	ldr	r2, [r0, #16]
   17cca:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   17ccc:	2000      	movs	r0, #0
   17cce:	e00a      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   17cd0:	2a00      	cmp	r2, #0
   17cd2:	d1f0      	bne.n	17cb6 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   17cd4:	2016      	movs	r0, #22
   17cd6:	e006      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17cd8:	2016      	movs	r0, #22

err:
    return rc;
}
   17cda:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17cdc:	2016      	movs	r0, #22
   17cde:	e002      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   17ce0:	2016      	movs	r0, #22
   17ce2:	e000      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
   17ce4:	2016      	movs	r0, #22
}
   17ce6:	bc30      	pop	{r4, r5}
   17ce8:	4770      	bx	lr
    rc = EINVAL;
   17cea:	2016      	movs	r0, #22
   17cec:	e7fb      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   17cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17cf2:	e7f8      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   17cf4:	2016      	movs	r0, #22
   17cf6:	e7f6      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   17cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17cfc:	e7f3      	b.n	17ce6 <hal_spi_txrx_noblock+0xc2>
   17cfe:	bf00      	nop
   17d00:	0001f1e0 	.word	0x0001f1e0

00017d04 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   17d04:	b508      	push	{r3, lr}
    assert(0);
   17d06:	2300      	movs	r3, #0
   17d08:	461a      	mov	r2, r3
   17d0a:	4619      	mov	r1, r3
   17d0c:	4618      	mov	r0, r3
   17d0e:	f000 f85f 	bl	17dd0 <__assert_func>
	...

00017d14 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   17d14:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   17d16:	4b06      	ldr	r3, [pc, #24]	; (17d30 <nrf52_wdt_irq_handler+0x1c>)
   17d18:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   17d1c:	f013 0f01 	tst.w	r3, #1
   17d20:	d100      	bne.n	17d24 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   17d22:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   17d24:	4b02      	ldr	r3, [pc, #8]	; (17d30 <nrf52_wdt_irq_handler+0x1c>)
   17d26:	2200      	movs	r2, #0
   17d28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   17d2c:	f7ff ffea 	bl	17d04 <nrf52_hal_wdt_default_handler>
   17d30:	40010000 	.word	0x40010000

00017d34 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   17d34:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   17d36:	4b17      	ldr	r3, [pc, #92]	; (17d94 <hal_watchdog_init+0x60>)
   17d38:	2201      	movs	r2, #1
   17d3a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   17d3e:	4b16      	ldr	r3, [pc, #88]	; (17d98 <hal_watchdog_init+0x64>)
   17d40:	4298      	cmp	r0, r3
   17d42:	d821      	bhi.n	17d88 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   17d44:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   17d48:	0153      	lsls	r3, r2, #5
   17d4a:	4a14      	ldr	r2, [pc, #80]	; (17d9c <hal_watchdog_init+0x68>)
   17d4c:	fba2 2303 	umull	r2, r3, r2, r3
   17d50:	08db      	lsrs	r3, r3, #3
   17d52:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   17d56:	4b0f      	ldr	r3, [pc, #60]	; (17d94 <hal_watchdog_init+0x60>)
   17d58:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17d5c:	4a10      	ldr	r2, [pc, #64]	; (17da0 <hal_watchdog_init+0x6c>)
   17d5e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17d60:	4910      	ldr	r1, [pc, #64]	; (17da4 <hal_watchdog_init+0x70>)
   17d62:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17d66:	4a10      	ldr	r2, [pc, #64]	; (17da8 <hal_watchdog_init+0x74>)
   17d68:	21e0      	movs	r1, #224	; 0xe0
   17d6a:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17d6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   17d72:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17d76:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   17d78:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   17d7c:	f042 0201 	orr.w	r2, r2, #1
   17d80:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   17d84:	2000      	movs	r0, #0
   17d86:	bd08      	pop	{r3, pc}
        assert(0);
   17d88:	2300      	movs	r3, #0
   17d8a:	461a      	mov	r2, r3
   17d8c:	4619      	mov	r1, r3
   17d8e:	4618      	mov	r0, r3
   17d90:	f000 f81e 	bl	17dd0 <__assert_func>
   17d94:	40010000 	.word	0x40010000
   17d98:	02aaaaaa 	.word	0x02aaaaaa
   17d9c:	10624dd3 	.word	0x10624dd3
   17da0:	e000ed00 	.word	0xe000ed00
   17da4:	00017d15 	.word	0x00017d15
   17da8:	e000e100 	.word	0xe000e100

00017dac <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   17dac:	4b02      	ldr	r3, [pc, #8]	; (17db8 <hal_watchdog_enable+0xc>)
   17dae:	2201      	movs	r2, #1
   17db0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   17db4:	601a      	str	r2, [r3, #0]
}
   17db6:	4770      	bx	lr
   17db8:	40010000 	.word	0x40010000

00017dbc <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   17dbc:	4b02      	ldr	r3, [pc, #8]	; (17dc8 <hal_watchdog_tickle+0xc>)
   17dbe:	4a03      	ldr	r2, [pc, #12]	; (17dcc <hal_watchdog_tickle+0x10>)
   17dc0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   17dc4:	4770      	bx	lr
   17dc6:	bf00      	nop
   17dc8:	40010000 	.word	0x40010000
   17dcc:	6e524635 	.word	0x6e524635

00017dd0 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   17dd0:	b508      	push	{r3, lr}
   17dd2:	4675      	mov	r5, lr
   17dd4:	4604      	mov	r4, r0
   17dd6:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   17dd8:	f001 fa90 	bl	192fc <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   17ddc:	f7ff f905 	bl	16fea <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   17de0:	b18c      	cbz	r4, 17e06 <__assert_func+0x36>
   17de2:	4633      	mov	r3, r6
   17de4:	4622      	mov	r2, r4
   17de6:	4629      	mov	r1, r5
   17de8:	4809      	ldr	r0, [pc, #36]	; (17e10 <__assert_func+0x40>)
   17dea:	f7ff f929 	bl	17040 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   17dee:	f7f0 f9c9 	bl	8184 <hal_debugger_connected>
   17df2:	b100      	cbz	r0, 17df6 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   17df4:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   17df6:	4b07      	ldr	r3, [pc, #28]	; (17e14 <__assert_func+0x44>)
   17df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17dfc:	605a      	str	r2, [r3, #4]
    asm("isb");
   17dfe:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   17e02:	f7f0 f9c7 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   17e06:	4629      	mov	r1, r5
   17e08:	4803      	ldr	r0, [pc, #12]	; (17e18 <__assert_func+0x48>)
   17e0a:	f7ff f919 	bl	17040 <console_printf>
   17e0e:	e7ee      	b.n	17dee <__assert_func+0x1e>
   17e10:	0001f1fc 	.word	0x0001f1fc
   17e14:	e000ed00 	.word	0xe000ed00
   17e18:	0001f1ec 	.word	0x0001f1ec

00017e1c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   17e1c:	b500      	push	{lr}
   17e1e:	b083      	sub	sp, #12
   17e20:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   17e22:	f7ff f8e2 	bl	16fea <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   17e26:	4d1b      	ldr	r5, [pc, #108]	; (17e94 <os_default_irq+0x78>)
   17e28:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   17e2a:	6822      	ldr	r2, [r4, #0]
   17e2c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   17e30:	4819      	ldr	r0, [pc, #100]	; (17e98 <os_default_irq+0x7c>)
   17e32:	f7ff f905 	bl	17040 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   17e36:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   17e38:	6883      	ldr	r3, [r0, #8]
   17e3a:	6842      	ldr	r2, [r0, #4]
   17e3c:	6801      	ldr	r1, [r0, #0]
   17e3e:	68c0      	ldr	r0, [r0, #12]
   17e40:	9000      	str	r0, [sp, #0]
   17e42:	4816      	ldr	r0, [pc, #88]	; (17e9c <os_default_irq+0x80>)
   17e44:	f7ff f8fc 	bl	17040 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   17e48:	6923      	ldr	r3, [r4, #16]
   17e4a:	9300      	str	r3, [sp, #0]
   17e4c:	68e3      	ldr	r3, [r4, #12]
   17e4e:	68a2      	ldr	r2, [r4, #8]
   17e50:	6861      	ldr	r1, [r4, #4]
   17e52:	4813      	ldr	r0, [pc, #76]	; (17ea0 <os_default_irq+0x84>)
   17e54:	f7ff f8f4 	bl	17040 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   17e58:	6a23      	ldr	r3, [r4, #32]
   17e5a:	9300      	str	r3, [sp, #0]
   17e5c:	69e3      	ldr	r3, [r4, #28]
   17e5e:	69a2      	ldr	r2, [r4, #24]
   17e60:	6961      	ldr	r1, [r4, #20]
   17e62:	4810      	ldr	r0, [pc, #64]	; (17ea4 <os_default_irq+0x88>)
   17e64:	f7ff f8ec 	bl	17040 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   17e68:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   17e6a:	6983      	ldr	r3, [r0, #24]
   17e6c:	6942      	ldr	r2, [r0, #20]
   17e6e:	6901      	ldr	r1, [r0, #16]
   17e70:	69c0      	ldr	r0, [r0, #28]
   17e72:	9000      	str	r0, [sp, #0]
   17e74:	480c      	ldr	r0, [pc, #48]	; (17ea8 <os_default_irq+0x8c>)
   17e76:	f7ff f8e3 	bl	17040 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   17e7a:	6869      	ldr	r1, [r5, #4]
   17e7c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   17e7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17e80:	480a      	ldr	r0, [pc, #40]	; (17eac <os_default_irq+0x90>)
   17e82:	f7ff f8dd 	bl	17040 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   17e86:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   17e88:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   17e8a:	4809      	ldr	r0, [pc, #36]	; (17eb0 <os_default_irq+0x94>)
   17e8c:	f7ff f8d8 	bl	17040 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   17e90:	f7f0 f980 	bl	8194 <hal_system_reset>
   17e94:	e000ed00 	.word	0xe000ed00
   17e98:	0001f214 	.word	0x0001f214
   17e9c:	0001f248 	.word	0x0001f248
   17ea0:	0001f27c 	.word	0x0001f27c
   17ea4:	0001f2b0 	.word	0x0001f2b0
   17ea8:	0001f2e4 	.word	0x0001f2e4
   17eac:	0001f318 	.word	0x0001f318
   17eb0:	0001f340 	.word	0x0001f340

00017eb4 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   17eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   17eb6:	f7ff ff81 	bl	17dbc <hal_watchdog_tickle>
    sanity_last = 0;
   17eba:	2500      	movs	r5, #0
   17ebc:	e00b      	b.n	17ed6 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   17ebe:	f000 fec7 	bl	18c50 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   17ec2:	f7ff ff7b 	bl	17dbc <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   17ec6:	4625      	mov	r5, r4
   17ec8:	e011      	b.n	17eee <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   17eca:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   17ecc:	f002 f842 	bl	19f54 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   17ed0:	4638      	mov	r0, r7
   17ed2:	f001 fa19 	bl	19308 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   17ed6:	4a14      	ldr	r2, [pc, #80]	; (17f28 <os_idle_task+0x74>)
   17ed8:	6813      	ldr	r3, [r2, #0]
   17eda:	3301      	adds	r3, #1
   17edc:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   17ede:	f001 f995 	bl	1920c <os_time_get>
   17ee2:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   17ee4:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   17ee8:	1ac3      	subs	r3, r0, r3
   17eea:	2b00      	cmp	r3, #0
   17eec:	dce7      	bgt.n	17ebe <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   17eee:	f001 fa05 	bl	192fc <os_arch_save_sr>
   17ef2:	4607      	mov	r7, r0
        now = os_time_get();
   17ef4:	f001 f98a 	bl	1920c <os_time_get>
   17ef8:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   17efa:	f000 ffd7 	bl	18eac <os_sched_wakeup_ticks>
   17efe:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   17f00:	4630      	mov	r0, r6
   17f02:	f000 f975 	bl	181f0 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   17f06:	42a0      	cmp	r0, r4
   17f08:	bf28      	it	cs
   17f0a:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   17f0c:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   17f10:	1b9b      	subs	r3, r3, r6
   17f12:	4298      	cmp	r0, r3
   17f14:	bf28      	it	cs
   17f16:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   17f18:	280b      	cmp	r0, #11
   17f1a:	d9d6      	bls.n	17eca <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   17f1c:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   17f20:	d9d4      	bls.n	17ecc <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   17f22:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   17f26:	e7d1      	b.n	17ecc <os_idle_task+0x18>
   17f28:	2000de8c 	.word	0x2000de8c

00017f2c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   17f2c:	b508      	push	{r3, lr}
   17f2e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   17f30:	2100      	movs	r1, #0
   17f32:	4608      	mov	r0, r1
   17f34:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   17f36:	2300      	movs	r3, #0
   17f38:	461a      	mov	r2, r3
   17f3a:	4619      	mov	r1, r3
   17f3c:	4618      	mov	r0, r3
   17f3e:	f7ff ff47 	bl	17dd0 <__assert_func>
	...

00017f44 <os_started>:
}
   17f44:	4b01      	ldr	r3, [pc, #4]	; (17f4c <os_started+0x8>)
   17f46:	6818      	ldr	r0, [r3, #0]
   17f48:	4770      	bx	lr
   17f4a:	bf00      	nop
   17f4c:	2000de88 	.word	0x2000de88

00017f50 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   17f50:	b500      	push	{lr}
   17f52:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   17f54:	2340      	movs	r3, #64	; 0x40
   17f56:	9303      	str	r3, [sp, #12]
   17f58:	4b15      	ldr	r3, [pc, #84]	; (17fb0 <os_init_idle_task+0x60>)
   17f5a:	9302      	str	r3, [sp, #8]
   17f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f60:	9301      	str	r3, [sp, #4]
   17f62:	23ff      	movs	r3, #255	; 0xff
   17f64:	9300      	str	r3, [sp, #0]
   17f66:	2300      	movs	r3, #0
   17f68:	4a12      	ldr	r2, [pc, #72]	; (17fb4 <os_init_idle_task+0x64>)
   17f6a:	4913      	ldr	r1, [pc, #76]	; (17fb8 <os_init_idle_task+0x68>)
   17f6c:	4813      	ldr	r0, [pc, #76]	; (17fbc <os_init_idle_task+0x6c>)
   17f6e:	f001 f88d 	bl	1908c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   17f72:	b950      	cbnz	r0, 17f8a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   17f74:	f000 fea2 	bl	18cbc <os_sanity_init>
    assert(rc == 0);
   17f78:	b968      	cbnz	r0, 17f96 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   17f7a:	f247 5030 	movw	r0, #30000	; 0x7530
   17f7e:	f7ff fed9 	bl	17d34 <hal_watchdog_init>
    assert(rc == 0);
   17f82:	b970      	cbnz	r0, 17fa2 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   17f84:	b005      	add	sp, #20
   17f86:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   17f8a:	2300      	movs	r3, #0
   17f8c:	461a      	mov	r2, r3
   17f8e:	4619      	mov	r1, r3
   17f90:	4618      	mov	r0, r3
   17f92:	f7ff ff1d 	bl	17dd0 <__assert_func>
    assert(rc == 0);
   17f96:	2300      	movs	r3, #0
   17f98:	461a      	mov	r2, r3
   17f9a:	4619      	mov	r1, r3
   17f9c:	4618      	mov	r0, r3
   17f9e:	f7ff ff17 	bl	17dd0 <__assert_func>
    assert(rc == 0);
   17fa2:	2300      	movs	r3, #0
   17fa4:	461a      	mov	r2, r3
   17fa6:	4619      	mov	r1, r3
   17fa8:	4618      	mov	r0, r3
   17faa:	f7ff ff11 	bl	17dd0 <__assert_func>
   17fae:	bf00      	nop
   17fb0:	20006f70 	.word	0x20006f70
   17fb4:	00017eb5 	.word	0x00017eb5
   17fb8:	0001f364 	.word	0x0001f364
   17fbc:	2000dde8 	.word	0x2000dde8

00017fc0 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   17fc0:	b510      	push	{r4, lr}
   17fc2:	b084      	sub	sp, #16
   17fc4:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   17fc6:	4b24      	ldr	r3, [pc, #144]	; (18058 <os_init+0x98>)
   17fc8:	2200      	movs	r2, #0
   17fca:	601a      	str	r2, [r3, #0]
   17fcc:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   17fce:	4b23      	ldr	r3, [pc, #140]	; (1805c <os_init+0x9c>)
   17fd0:	601a      	str	r2, [r3, #0]
   17fd2:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   17fd4:	f000 faba 	bl	1854c <os_eventq_dflt_get>
   17fd8:	f000 fa0e 	bl	183f8 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   17fdc:	f000 fa04 	bl	183e8 <os_dev_reset>

    err = os_arch_os_init();
   17fe0:	f001 f9c6 	bl	19370 <os_arch_os_init>
    assert(err == OS_OK);
   17fe4:	bb00      	cbnz	r0, 18028 <os_init+0x68>

    if (main_fn) {
   17fe6:	b18c      	cbz	r4, 1800c <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   17fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   17fec:	9303      	str	r3, [sp, #12]
   17fee:	4b1c      	ldr	r3, [pc, #112]	; (18060 <os_init+0xa0>)
   17ff0:	9302      	str	r3, [sp, #8]
   17ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ff6:	9301      	str	r3, [sp, #4]
   17ff8:	237f      	movs	r3, #127	; 0x7f
   17ffa:	9300      	str	r3, [sp, #0]
   17ffc:	4623      	mov	r3, r4
   17ffe:	4a19      	ldr	r2, [pc, #100]	; (18064 <os_init+0xa4>)
   18000:	4919      	ldr	r1, [pc, #100]	; (18068 <os_init+0xa8>)
   18002:	481a      	ldr	r0, [pc, #104]	; (1806c <os_init+0xac>)
   18004:	f001 f842 	bl	1908c <os_task_init>
   18008:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1800a:	b998      	cbnz	r0, 18034 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1800c:	f001 fe72 	bl	19cf4 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   18010:	2001      	movs	r0, #1
   18012:	f000 f985 	bl	18320 <os_dev_initialize_all>
   18016:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18018:	b990      	cbnz	r0, 18040 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1801a:	2002      	movs	r0, #2
   1801c:	f000 f980 	bl	18320 <os_dev_initialize_all>
   18020:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18022:	b998      	cbnz	r0, 1804c <os_init+0x8c>
}
   18024:	b004      	add	sp, #16
   18026:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   18028:	2300      	movs	r3, #0
   1802a:	461a      	mov	r2, r3
   1802c:	4619      	mov	r1, r3
   1802e:	4618      	mov	r0, r3
   18030:	f7ff fece 	bl	17dd0 <__assert_func>
        assert(err == 0);
   18034:	2300      	movs	r3, #0
   18036:	461a      	mov	r2, r3
   18038:	4619      	mov	r1, r3
   1803a:	4618      	mov	r0, r3
   1803c:	f7ff fec8 	bl	17dd0 <__assert_func>
    assert(err == OS_OK);
   18040:	2300      	movs	r3, #0
   18042:	461a      	mov	r2, r3
   18044:	4619      	mov	r1, r3
   18046:	4618      	mov	r0, r3
   18048:	f7ff fec2 	bl	17dd0 <__assert_func>
    assert(err == OS_OK);
   1804c:	2300      	movs	r3, #0
   1804e:	461a      	mov	r2, r3
   18050:	4619      	mov	r1, r3
   18052:	4618      	mov	r0, r3
   18054:	f7ff febc 	bl	17dd0 <__assert_func>
   18058:	2000de90 	.word	0x2000de90
   1805c:	2000deb8 	.word	0x2000deb8
   18060:	20007070 	.word	0x20007070
   18064:	00017f2d 	.word	0x00017f2d
   18068:	0001f35c 	.word	0x0001f35c
   1806c:	2000de38 	.word	0x2000de38

00018070 <os_start>:

void
os_start(void)
{
   18070:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   18072:	f7ff fe9b 	bl	17dac <hal_watchdog_enable>

    err = os_arch_os_start();
   18076:	f001 f9db 	bl	19430 <os_arch_os_start>
    assert(err == OS_OK);
   1807a:	b900      	cbnz	r0, 1807e <os_start+0xe>
#else
    assert(0);
#endif
}
   1807c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1807e:	2300      	movs	r3, #0
   18080:	461a      	mov	r2, r3
   18082:	4619      	mov	r1, r3
   18084:	4618      	mov	r0, r3
   18086:	f7ff fea3 	bl	17dd0 <__assert_func>
	...

0001808c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1808c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1808e:	4b0c      	ldr	r3, [pc, #48]	; (180c0 <os_pkg_init+0x34>)
   18090:	781b      	ldrb	r3, [r3, #0]
   18092:	b14b      	cbz	r3, 180a8 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   18094:	2003      	movs	r0, #3
   18096:	f000 f943 	bl	18320 <os_dev_initialize_all>
   1809a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1809c:	b948      	cbnz	r0, 180b2 <os_pkg_init+0x26>

    os_mempool_module_init();
   1809e:	f000 fc25 	bl	188ec <os_mempool_module_init>
    os_msys_init();
   180a2:	f000 fcad 	bl	18a00 <os_msys_init>
}
   180a6:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   180a8:	461a      	mov	r2, r3
   180aa:	4619      	mov	r1, r3
   180ac:	4618      	mov	r0, r3
   180ae:	f7ff fe8f 	bl	17dd0 <__assert_func>
    assert(err == OS_OK);
   180b2:	2300      	movs	r3, #0
   180b4:	461a      	mov	r2, r3
   180b6:	4619      	mov	r1, r3
   180b8:	4618      	mov	r0, r3
   180ba:	f7ff fe89 	bl	17dd0 <__assert_func>
   180be:	bf00      	nop
   180c0:	2000ddbc 	.word	0x2000ddbc

000180c4 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   180c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180c6:	4604      	mov	r4, r0
   180c8:	460d      	mov	r5, r1
   180ca:	4617      	mov	r7, r2
   180cc:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   180ce:	2220      	movs	r2, #32
   180d0:	2100      	movs	r1, #0
   180d2:	f001 fa80 	bl	195d6 <memset>
    c->c_ev.ev_cb = ev_cb;
   180d6:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   180d8:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   180da:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   180dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000180e0 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   180e0:	b538      	push	{r3, r4, r5, lr}
   180e2:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   180e4:	f001 f90a 	bl	192fc <os_arch_save_sr>
   180e8:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   180ea:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   180ec:	b13b      	cbz	r3, 180fe <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   180ee:	69a2      	ldr	r2, [r4, #24]
   180f0:	b172      	cbz	r2, 18110 <os_callout_stop+0x30>
   180f2:	61d3      	str	r3, [r2, #28]
   180f4:	69e3      	ldr	r3, [r4, #28]
   180f6:	69a2      	ldr	r2, [r4, #24]
   180f8:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   180fa:	2300      	movs	r3, #0
   180fc:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   180fe:	6920      	ldr	r0, [r4, #16]
   18100:	b110      	cbz	r0, 18108 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   18102:	4621      	mov	r1, r4
   18104:	f000 fa02 	bl	1850c <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   18108:	4628      	mov	r0, r5
   1810a:	f001 f8fd 	bl	19308 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1810e:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   18110:	4a01      	ldr	r2, [pc, #4]	; (18118 <os_callout_stop+0x38>)
   18112:	6053      	str	r3, [r2, #4]
   18114:	e7ee      	b.n	180f4 <os_callout_stop+0x14>
   18116:	bf00      	nop
   18118:	2000de90 	.word	0x2000de90

0001811c <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1811c:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1811e:	6903      	ldr	r3, [r0, #16]
   18120:	b1c3      	cbz	r3, 18154 <os_callout_reset+0x38>
   18122:	4605      	mov	r5, r0
   18124:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   18126:	2900      	cmp	r1, #0
   18128:	db2f      	blt.n	1818a <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1812a:	f001 f8e7 	bl	192fc <os_arch_save_sr>
   1812e:	4606      	mov	r6, r0

    os_callout_stop(c);
   18130:	4628      	mov	r0, r5
   18132:	f7ff ffd5 	bl	180e0 <os_callout_stop>

    if (ticks == 0) {
   18136:	b904      	cbnz	r4, 1813a <os_callout_reset+0x1e>
        ticks = 1;
   18138:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1813a:	f001 f867 	bl	1920c <os_time_get>
   1813e:	4420      	add	r0, r4
   18140:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   18142:	4b13      	ldr	r3, [pc, #76]	; (18190 <os_callout_reset+0x74>)
   18144:	681b      	ldr	r3, [r3, #0]
   18146:	b153      	cbz	r3, 1815e <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   18148:	695a      	ldr	r2, [r3, #20]
   1814a:	1a82      	subs	r2, r0, r2
   1814c:	2a00      	cmp	r2, #0
   1814e:	db06      	blt.n	1815e <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   18150:	699b      	ldr	r3, [r3, #24]
   18152:	e7f8      	b.n	18146 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   18154:	461a      	mov	r2, r3
   18156:	4619      	mov	r1, r3
   18158:	4618      	mov	r0, r3
   1815a:	f7ff fe39 	bl	17dd0 <__assert_func>
            break;
        }
    }

    if (entry) {
   1815e:	b15b      	cbz	r3, 18178 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   18160:	69da      	ldr	r2, [r3, #28]
   18162:	61ea      	str	r2, [r5, #28]
   18164:	61ab      	str	r3, [r5, #24]
   18166:	69da      	ldr	r2, [r3, #28]
   18168:	6015      	str	r5, [r2, #0]
   1816a:	3518      	adds	r5, #24
   1816c:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1816e:	4630      	mov	r0, r6
   18170:	f001 f8ca 	bl	19308 <os_arch_restore_sr>

    ret = OS_OK;
   18174:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   18176:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   18178:	2300      	movs	r3, #0
   1817a:	61ab      	str	r3, [r5, #24]
   1817c:	4b04      	ldr	r3, [pc, #16]	; (18190 <os_callout_reset+0x74>)
   1817e:	685a      	ldr	r2, [r3, #4]
   18180:	61ea      	str	r2, [r5, #28]
   18182:	6015      	str	r5, [r2, #0]
   18184:	3518      	adds	r5, #24
   18186:	605d      	str	r5, [r3, #4]
   18188:	e7f1      	b.n	1816e <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1818a:	2002      	movs	r0, #2
    return ret;
   1818c:	e7f3      	b.n	18176 <os_callout_reset+0x5a>
   1818e:	bf00      	nop
   18190:	2000de90 	.word	0x2000de90

00018194 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   18194:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   18196:	f001 f839 	bl	1920c <os_time_get>
   1819a:	4605      	mov	r5, r0
   1819c:	e00f      	b.n	181be <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1819e:	69e2      	ldr	r2, [r4, #28]
   181a0:	4b12      	ldr	r3, [pc, #72]	; (181ec <os_callout_tick+0x58>)
   181a2:	605a      	str	r2, [r3, #4]
   181a4:	69e3      	ldr	r3, [r4, #28]
   181a6:	69a2      	ldr	r2, [r4, #24]
   181a8:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   181aa:	2300      	movs	r3, #0
   181ac:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   181ae:	f001 f8ab 	bl	19308 <os_arch_restore_sr>

        if (c) {
   181b2:	b1d4      	cbz	r4, 181ea <os_callout_tick+0x56>
            if (c->c_evq) {
   181b4:	6920      	ldr	r0, [r4, #16]
   181b6:	b9a0      	cbnz	r0, 181e2 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   181b8:	6863      	ldr	r3, [r4, #4]
   181ba:	4620      	mov	r0, r4
   181bc:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   181be:	f001 f89d 	bl	192fc <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   181c2:	4b0a      	ldr	r3, [pc, #40]	; (181ec <os_callout_tick+0x58>)
   181c4:	681c      	ldr	r4, [r3, #0]
        if (c) {
   181c6:	2c00      	cmp	r4, #0
   181c8:	d0f1      	beq.n	181ae <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   181ca:	6963      	ldr	r3, [r4, #20]
   181cc:	1aeb      	subs	r3, r5, r3
   181ce:	2b00      	cmp	r3, #0
   181d0:	db05      	blt.n	181de <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   181d2:	69a3      	ldr	r3, [r4, #24]
   181d4:	2b00      	cmp	r3, #0
   181d6:	d0e2      	beq.n	1819e <os_callout_tick+0xa>
   181d8:	69e2      	ldr	r2, [r4, #28]
   181da:	61da      	str	r2, [r3, #28]
   181dc:	e7e2      	b.n	181a4 <os_callout_tick+0x10>
                c = NULL;
   181de:	2400      	movs	r4, #0
   181e0:	e7e5      	b.n	181ae <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   181e2:	4621      	mov	r1, r4
   181e4:	f000 f915 	bl	18412 <os_eventq_put>
   181e8:	e7e9      	b.n	181be <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   181ea:	bd38      	pop	{r3, r4, r5, pc}
   181ec:	2000de90 	.word	0x2000de90

000181f0 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   181f0:	b510      	push	{r4, lr}
   181f2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   181f4:	f001 f88b 	bl	1930e <os_arch_in_critical>
   181f8:	b130      	cbz	r0, 18208 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   181fa:	4b09      	ldr	r3, [pc, #36]	; (18220 <os_callout_wakeup_ticks+0x30>)
   181fc:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   181fe:	b15b      	cbz	r3, 18218 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   18200:	6958      	ldr	r0, [r3, #20]
   18202:	1b00      	subs	r0, r0, r4
   18204:	d406      	bmi.n	18214 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   18206:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18208:	2300      	movs	r3, #0
   1820a:	461a      	mov	r2, r3
   1820c:	4619      	mov	r1, r3
   1820e:	4618      	mov	r0, r3
   18210:	f7ff fdde 	bl	17dd0 <__assert_func>
            rt = 0;     /* callout time is in the past */
   18214:	2000      	movs	r0, #0
   18216:	e7f6      	b.n	18206 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   18218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1821c:	e7f3      	b.n	18206 <os_callout_wakeup_ticks+0x16>
   1821e:	bf00      	nop
   18220:	2000de90 	.word	0x2000de90

00018224 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   18224:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   18226:	4601      	mov	r1, r0
   18228:	2000      	movs	r0, #0
   1822a:	f002 f84d 	bl	1a2c8 <hal_timer_config>
    return rc;
}
   1822e:	bd08      	pop	{r3, pc}

00018230 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   18230:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   18232:	2000      	movs	r0, #0
   18234:	f002 f8c4 	bl	1a3c0 <hal_timer_read>
    return cpu_time;
}
   18238:	bd08      	pop	{r3, pc}
	...

0001823c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1823c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1823e:	4b15      	ldr	r3, [pc, #84]	; (18294 <os_dev_add+0x58>)
   18240:	681d      	ldr	r5, [r3, #0]
   18242:	b115      	cbz	r5, 1824a <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   18244:	462b      	mov	r3, r5
    prev_dev = NULL;
   18246:	2400      	movs	r4, #0
   18248:	e008      	b.n	1825c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1824a:	4603      	mov	r3, r0
   1824c:	f843 5f20 	str.w	r5, [r3, #32]!
   18250:	4a10      	ldr	r2, [pc, #64]	; (18294 <os_dev_add+0x58>)
   18252:	6053      	str	r3, [r2, #4]
   18254:	6010      	str	r0, [r2, #0]
        return (0);
   18256:	e010      	b.n	1827a <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   18258:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1825a:	6a1b      	ldr	r3, [r3, #32]
   1825c:	b143      	cbz	r3, 18270 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1825e:	7e01      	ldrb	r1, [r0, #24]
   18260:	7e1a      	ldrb	r2, [r3, #24]
   18262:	4291      	cmp	r1, r2
   18264:	d304      	bcc.n	18270 <os_dev_add+0x34>
   18266:	d1f7      	bne.n	18258 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   18268:	7e41      	ldrb	r1, [r0, #25]
   1826a:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1826c:	4291      	cmp	r1, r2
   1826e:	d2f3      	bcs.n	18258 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   18270:	b15c      	cbz	r4, 1828a <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   18272:	6a23      	ldr	r3, [r4, #32]
   18274:	6203      	str	r3, [r0, #32]
   18276:	b11b      	cbz	r3, 18280 <os_dev_add+0x44>
   18278:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1827a:	2000      	movs	r0, #0
   1827c:	bc30      	pop	{r4, r5}
   1827e:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   18280:	f100 0320 	add.w	r3, r0, #32
   18284:	4a03      	ldr	r2, [pc, #12]	; (18294 <os_dev_add+0x58>)
   18286:	6053      	str	r3, [r2, #4]
   18288:	e7f6      	b.n	18278 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1828a:	6205      	str	r5, [r0, #32]
   1828c:	4b01      	ldr	r3, [pc, #4]	; (18294 <os_dev_add+0x58>)
   1828e:	6018      	str	r0, [r3, #0]
   18290:	e7f3      	b.n	1827a <os_dev_add+0x3e>
   18292:	bf00      	nop
   18294:	20009070 	.word	0x20009070

00018298 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   18298:	b510      	push	{r4, lr}
   1829a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1829c:	6903      	ldr	r3, [r0, #16]
   1829e:	6941      	ldr	r1, [r0, #20]
   182a0:	4798      	blx	r3
    if (rc != 0) {
   182a2:	4603      	mov	r3, r0
   182a4:	b128      	cbz	r0, 182b2 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   182a6:	7ee2      	ldrb	r2, [r4, #27]
   182a8:	f012 0f08 	tst.w	r2, #8
   182ac:	d105      	bne.n	182ba <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   182ae:	2300      	movs	r3, #0
   182b0:	e003      	b.n	182ba <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   182b2:	7ee2      	ldrb	r2, [r4, #27]
   182b4:	f042 0201 	orr.w	r2, r2, #1
   182b8:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   182ba:	4618      	mov	r0, r3
   182bc:	bd10      	pop	{r4, pc}

000182be <os_dev_init>:
    dev->od_name = name;
   182be:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   182c0:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   182c2:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   182c4:	2300      	movs	r3, #0
   182c6:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   182c8:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   182ca:	9a00      	ldr	r2, [sp, #0]
   182cc:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   182ce:	9a01      	ldr	r2, [sp, #4]
   182d0:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   182d2:	6003      	str	r3, [r0, #0]
   182d4:	6043      	str	r3, [r0, #4]
   182d6:	6083      	str	r3, [r0, #8]
   182d8:	60c3      	str	r3, [r0, #12]
}
   182da:	4618      	mov	r0, r3
   182dc:	4770      	bx	lr
	...

000182e0 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   182e0:	b530      	push	{r4, r5, lr}
   182e2:	b083      	sub	sp, #12
   182e4:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   182e6:	9c07      	ldr	r4, [sp, #28]
   182e8:	9401      	str	r4, [sp, #4]
   182ea:	9c06      	ldr	r4, [sp, #24]
   182ec:	9400      	str	r4, [sp, #0]
   182ee:	f7ff ffe6 	bl	182be <os_dev_init>
    if (rc != 0) {
   182f2:	4603      	mov	r3, r0
   182f4:	b110      	cbz	r0, 182fc <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   182f6:	4618      	mov	r0, r3
   182f8:	b003      	add	sp, #12
   182fa:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   182fc:	4628      	mov	r0, r5
   182fe:	f7ff ff9d 	bl	1823c <os_dev_add>
    if (rc != 0) {
   18302:	4603      	mov	r3, r0
   18304:	2800      	cmp	r0, #0
   18306:	d1f6      	bne.n	182f6 <os_dev_create+0x16>
    if (g_os_started) {
   18308:	4a04      	ldr	r2, [pc, #16]	; (1831c <os_dev_create+0x3c>)
   1830a:	6812      	ldr	r2, [r2, #0]
   1830c:	2a00      	cmp	r2, #0
   1830e:	d0f2      	beq.n	182f6 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   18310:	4628      	mov	r0, r5
   18312:	f7ff ffc1 	bl	18298 <os_dev_initialize>
   18316:	4603      	mov	r3, r0
    return (rc);
   18318:	e7ed      	b.n	182f6 <os_dev_create+0x16>
   1831a:	bf00      	nop
   1831c:	2000de88 	.word	0x2000de88

00018320 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   18320:	b538      	push	{r3, r4, r5, lr}
   18322:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18324:	4b08      	ldr	r3, [pc, #32]	; (18348 <os_dev_initialize_all+0x28>)
   18326:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   18328:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1832a:	e000      	b.n	1832e <os_dev_initialize_all+0xe>
   1832c:	6a24      	ldr	r4, [r4, #32]
   1832e:	b144      	cbz	r4, 18342 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   18330:	7e23      	ldrb	r3, [r4, #24]
   18332:	42ab      	cmp	r3, r5
   18334:	d1fa      	bne.n	1832c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   18336:	4620      	mov	r0, r4
   18338:	f7ff ffae 	bl	18298 <os_dev_initialize>
            if (rc) {
   1833c:	4602      	mov	r2, r0
   1833e:	2800      	cmp	r0, #0
   18340:	d0f4      	beq.n	1832c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   18342:	4610      	mov	r0, r2
   18344:	bd38      	pop	{r3, r4, r5, pc}
   18346:	bf00      	nop
   18348:	20009070 	.word	0x20009070

0001834c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1834c:	b538      	push	{r3, r4, r5, lr}
   1834e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18350:	4b05      	ldr	r3, [pc, #20]	; (18368 <os_dev_lookup+0x1c>)
   18352:	681c      	ldr	r4, [r3, #0]
   18354:	b134      	cbz	r4, 18364 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   18356:	4629      	mov	r1, r5
   18358:	69e0      	ldr	r0, [r4, #28]
   1835a:	f001 f958 	bl	1960e <strcmp>
   1835e:	b108      	cbz	r0, 18364 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18360:	6a24      	ldr	r4, [r4, #32]
   18362:	e7f7      	b.n	18354 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   18364:	4620      	mov	r0, r4
   18366:	bd38      	pop	{r3, r4, r5, pc}
   18368:	20009070 	.word	0x20009070

0001836c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1836c:	b570      	push	{r4, r5, r6, lr}
   1836e:	460d      	mov	r5, r1
   18370:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   18372:	f7ff ffeb 	bl	1834c <os_dev_lookup>
    if (dev == NULL) {
   18376:	4604      	mov	r4, r0
   18378:	b1a0      	cbz	r0, 183a4 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1837a:	7ec3      	ldrb	r3, [r0, #27]
   1837c:	f013 0f01 	tst.w	r3, #1
   18380:	d012      	beq.n	183a8 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   18382:	6803      	ldr	r3, [r0, #0]
   18384:	b11b      	cbz	r3, 1838e <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   18386:	4632      	mov	r2, r6
   18388:	4629      	mov	r1, r5
   1838a:	4798      	blx	r3
        if (rc != 0) {
   1838c:	b970      	cbnz	r0, 183ac <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1838e:	f000 ffb5 	bl	192fc <os_arch_save_sr>
    ++dev->od_open_ref;
   18392:	7ea3      	ldrb	r3, [r4, #26]
   18394:	3301      	adds	r3, #1
   18396:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   18398:	7ee3      	ldrb	r3, [r4, #27]
   1839a:	f043 0302 	orr.w	r3, r3, #2
   1839e:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   183a0:	f000 ffb2 	bl	19308 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   183a4:	4620      	mov	r0, r4
   183a6:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   183a8:	2400      	movs	r4, #0
   183aa:	e7fb      	b.n	183a4 <os_dev_open+0x38>
    return (NULL);
   183ac:	2400      	movs	r4, #0
   183ae:	e7f9      	b.n	183a4 <os_dev_open+0x38>

000183b0 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   183b0:	b1b0      	cbz	r0, 183e0 <os_dev_close+0x30>
{
   183b2:	b510      	push	{r4, lr}
   183b4:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   183b6:	68c3      	ldr	r3, [r0, #12]
   183b8:	b113      	cbz	r3, 183c0 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   183ba:	4798      	blx	r3
        if (rc != 0) {
   183bc:	4603      	mov	r3, r0
   183be:	b968      	cbnz	r0, 183dc <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   183c0:	f000 ff9c 	bl	192fc <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   183c4:	7ea3      	ldrb	r3, [r4, #26]
   183c6:	3b01      	subs	r3, #1
   183c8:	b2db      	uxtb	r3, r3
   183ca:	76a3      	strb	r3, [r4, #26]
   183cc:	b91b      	cbnz	r3, 183d6 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   183ce:	7ee3      	ldrb	r3, [r4, #27]
   183d0:	f023 0306 	bic.w	r3, r3, #6
   183d4:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   183d6:	f000 ff97 	bl	19308 <os_arch_restore_sr>

    return (0);
   183da:	2300      	movs	r3, #0
err:
    return (rc);
}
   183dc:	4618      	mov	r0, r3
   183de:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   183e0:	2302      	movs	r3, #2
}
   183e2:	4618      	mov	r0, r3
   183e4:	4770      	bx	lr
	...

000183e8 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   183e8:	4b02      	ldr	r3, [pc, #8]	; (183f4 <os_dev_reset+0xc>)
   183ea:	2200      	movs	r2, #0
   183ec:	601a      	str	r2, [r3, #0]
   183ee:	605b      	str	r3, [r3, #4]
}
   183f0:	4770      	bx	lr
   183f2:	bf00      	nop
   183f4:	20009070 	.word	0x20009070

000183f8 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   183f8:	2200      	movs	r2, #0
   183fa:	6002      	str	r2, [r0, #0]
   183fc:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   183fe:	4603      	mov	r3, r0
   18400:	f843 2f08 	str.w	r2, [r3, #8]!
   18404:	60c3      	str	r3, [r0, #12]
}
   18406:	4770      	bx	lr

00018408 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   18408:	68c0      	ldr	r0, [r0, #12]
}
   1840a:	3000      	adds	r0, #0
   1840c:	bf18      	it	ne
   1840e:	2001      	movne	r0, #1
   18410:	4770      	bx	lr

00018412 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   18412:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   18414:	b1f0      	cbz	r0, 18454 <os_eventq_put+0x42>
   18416:	460c      	mov	r4, r1
   18418:	4605      	mov	r5, r0
   1841a:	f7ff fff5 	bl	18408 <os_eventq_inited>
   1841e:	b1c8      	cbz	r0, 18454 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18420:	f000 ff6c 	bl	192fc <os_arch_save_sr>
   18424:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   18426:	7823      	ldrb	r3, [r4, #0]
   18428:	b9d3      	cbnz	r3, 18460 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1842a:	2301      	movs	r3, #1
   1842c:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1842e:	2300      	movs	r3, #0
   18430:	60e3      	str	r3, [r4, #12]
   18432:	68eb      	ldr	r3, [r5, #12]
   18434:	601c      	str	r4, [r3, #0]
   18436:	340c      	adds	r4, #12
   18438:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1843a:	6868      	ldr	r0, [r5, #4]
   1843c:	b1b8      	cbz	r0, 1846e <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1843e:	7b03      	ldrb	r3, [r0, #12]
   18440:	2b02      	cmp	r3, #2
   18442:	d010      	beq.n	18466 <os_eventq_put+0x54>
    resched = 0;
   18444:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   18446:	2300      	movs	r3, #0
   18448:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1844a:	4630      	mov	r0, r6
   1844c:	f000 ff5c 	bl	19308 <os_arch_restore_sr>

    if (resched) {
   18450:	b97c      	cbnz	r4, 18472 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   18452:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   18454:	2300      	movs	r3, #0
   18456:	461a      	mov	r2, r3
   18458:	4619      	mov	r1, r3
   1845a:	4618      	mov	r0, r3
   1845c:	f7ff fcb8 	bl	17dd0 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   18460:	f000 ff52 	bl	19308 <os_arch_restore_sr>
   18464:	e7f5      	b.n	18452 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   18466:	f000 fcc7 	bl	18df8 <os_sched_wakeup>
            resched = 1;
   1846a:	2401      	movs	r4, #1
   1846c:	e7eb      	b.n	18446 <os_eventq_put+0x34>
    resched = 0;
   1846e:	2400      	movs	r4, #0
   18470:	e7eb      	b.n	1844a <os_eventq_put+0x38>
        os_sched(NULL);
   18472:	2000      	movs	r0, #0
   18474:	f000 fd40 	bl	18ef8 <os_sched>
   18478:	e7eb      	b.n	18452 <os_eventq_put+0x40>

0001847a <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1847a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1847c:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1847e:	f000 fc67 	bl	18d50 <os_sched_get_current_task>
   18482:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   18484:	682b      	ldr	r3, [r5, #0]
   18486:	4283      	cmp	r3, r0
   18488:	d001      	beq.n	1848e <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1848a:	b9db      	cbnz	r3, 184c4 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1848c:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1848e:	f000 ff35 	bl	192fc <os_arch_save_sr>
   18492:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   18494:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   18496:	b9de      	cbnz	r6, 184d0 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   18498:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1849a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1849e:	4620      	mov	r0, r4
   184a0:	f000 fc62 	bl	18d68 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   184a4:	7b63      	ldrb	r3, [r4, #13]
   184a6:	f043 0308 	orr.w	r3, r3, #8
   184aa:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   184ac:	4638      	mov	r0, r7
   184ae:	f000 ff2b 	bl	19308 <os_arch_restore_sr>

        os_sched(NULL);
   184b2:	2000      	movs	r0, #0
   184b4:	f000 fd20 	bl	18ef8 <os_sched>

        OS_ENTER_CRITICAL(sr);
   184b8:	f000 ff20 	bl	192fc <os_arch_save_sr>
   184bc:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   184be:	2300      	movs	r3, #0
   184c0:	606b      	str	r3, [r5, #4]
        goto pull_one;
   184c2:	e7e7      	b.n	18494 <os_eventq_get+0x1a>
            assert(0);
   184c4:	2300      	movs	r3, #0
   184c6:	461a      	mov	r2, r3
   184c8:	4619      	mov	r1, r3
   184ca:	4618      	mov	r0, r3
   184cc:	f7ff fc80 	bl	17dd0 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   184d0:	68f3      	ldr	r3, [r6, #12]
   184d2:	60ab      	str	r3, [r5, #8]
   184d4:	b153      	cbz	r3, 184ec <os_eventq_get+0x72>
        ev->ev_queued = 0;
   184d6:	2300      	movs	r3, #0
   184d8:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   184da:	7b63      	ldrb	r3, [r4, #13]
   184dc:	f023 0308 	bic.w	r3, r3, #8
   184e0:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   184e2:	4638      	mov	r0, r7
   184e4:	f000 ff10 	bl	19308 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   184e8:	4630      	mov	r0, r6
   184ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   184ec:	f105 0308 	add.w	r3, r5, #8
   184f0:	60eb      	str	r3, [r5, #12]
   184f2:	e7f0      	b.n	184d6 <os_eventq_get+0x5c>

000184f4 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   184f4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   184f6:	f7ff ffc0 	bl	1847a <os_eventq_get>
    assert(ev->ev_cb != NULL);
   184fa:	6843      	ldr	r3, [r0, #4]
   184fc:	b10b      	cbz	r3, 18502 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   184fe:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   18500:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   18502:	461a      	mov	r2, r3
   18504:	4619      	mov	r1, r3
   18506:	4618      	mov	r0, r3
   18508:	f7ff fc62 	bl	17dd0 <__assert_func>

0001850c <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1850c:	b538      	push	{r3, r4, r5, lr}
   1850e:	4605      	mov	r5, r0
   18510:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18512:	f000 fef3 	bl	192fc <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   18516:	7823      	ldrb	r3, [r4, #0]
   18518:	b183      	cbz	r3, 1853c <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1851a:	68aa      	ldr	r2, [r5, #8]
   1851c:	42a2      	cmp	r2, r4
   1851e:	d107      	bne.n	18530 <os_eventq_remove+0x24>
   18520:	68d3      	ldr	r3, [r2, #12]
   18522:	60ab      	str	r3, [r5, #8]
   18524:	b953      	cbnz	r3, 1853c <os_eventq_remove+0x30>
   18526:	f105 0308 	add.w	r3, r5, #8
   1852a:	60eb      	str	r3, [r5, #12]
   1852c:	e006      	b.n	1853c <os_eventq_remove+0x30>
   1852e:	461a      	mov	r2, r3
   18530:	68d3      	ldr	r3, [r2, #12]
   18532:	42a3      	cmp	r3, r4
   18534:	d1fb      	bne.n	1852e <os_eventq_remove+0x22>
   18536:	68db      	ldr	r3, [r3, #12]
   18538:	60d3      	str	r3, [r2, #12]
   1853a:	b123      	cbz	r3, 18546 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1853c:	2300      	movs	r3, #0
   1853e:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   18540:	f000 fee2 	bl	19308 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   18544:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18546:	320c      	adds	r2, #12
   18548:	60ea      	str	r2, [r5, #12]
   1854a:	e7f7      	b.n	1853c <os_eventq_remove+0x30>

0001854c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1854c:	4800      	ldr	r0, [pc, #0]	; (18550 <os_eventq_dflt_get+0x4>)
   1854e:	4770      	bx	lr
   18550:	20009078 	.word	0x20009078

00018554 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   18554:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   18556:	2000      	movs	r0, #0
   18558:	6018      	str	r0, [r3, #0]
   1855a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1855c:	6098      	str	r0, [r3, #8]
   1855e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   18560:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   18562:	611a      	str	r2, [r3, #16]

    return (0);
}
   18564:	4770      	bx	lr

00018566 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   18566:	b538      	push	{r3, r4, r5, lr}
   18568:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1856a:	f000 fec7 	bl	192fc <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1856e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   18570:	b114      	cbz	r4, 18578 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   18572:	6863      	ldr	r3, [r4, #4]
   18574:	602b      	str	r3, [r5, #0]
   18576:	b12b      	cbz	r3, 18584 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   18578:	f000 fec6 	bl	19308 <os_arch_restore_sr>

    if (mp) {
   1857c:	b124      	cbz	r4, 18588 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1857e:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   18582:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   18584:	606d      	str	r5, [r5, #4]
   18586:	e7f7      	b.n	18578 <os_mqueue_get+0x12>
        m = NULL;
   18588:	2000      	movs	r0, #0
    return (m);
   1858a:	e7fa      	b.n	18582 <os_mqueue_get+0x1c>

0001858c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1858e:	7953      	ldrb	r3, [r2, #5]
   18590:	2b07      	cmp	r3, #7
   18592:	d916      	bls.n	185c2 <os_mqueue_put+0x36>
   18594:	4614      	mov	r4, r2
   18596:	460e      	mov	r6, r1
   18598:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1859a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1859e:	f000 fead 	bl	192fc <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   185a2:	2300      	movs	r3, #0
   185a4:	f844 3f14 	str.w	r3, [r4, #20]!
   185a8:	686b      	ldr	r3, [r5, #4]
   185aa:	601f      	str	r7, [r3, #0]
   185ac:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   185ae:	f000 feab 	bl	19308 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   185b2:	b146      	cbz	r6, 185c6 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   185b4:	f105 0108 	add.w	r1, r5, #8
   185b8:	4630      	mov	r0, r6
   185ba:	f7ff ff2a 	bl	18412 <os_eventq_put>
    }

    return (0);
   185be:	2000      	movs	r0, #0
   185c0:	e000      	b.n	185c4 <os_mqueue_put+0x38>
err:
    return (rc);
   185c2:	2002      	movs	r0, #2
}
   185c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   185c6:	2000      	movs	r0, #0
   185c8:	e7fc      	b.n	185c4 <os_mqueue_put+0x38>

000185ca <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   185ca:	3a10      	subs	r2, #16
   185cc:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   185ce:	6041      	str	r1, [r0, #4]

    return (0);
}
   185d0:	2000      	movs	r0, #0
   185d2:	4770      	bx	lr

000185d4 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   185d4:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   185d6:	8803      	ldrh	r3, [r0, #0]
   185d8:	428b      	cmp	r3, r1
   185da:	d312      	bcc.n	18602 <os_mbuf_get+0x2e>
   185dc:	460d      	mov	r5, r1
   185de:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   185e0:	6840      	ldr	r0, [r0, #4]
   185e2:	f000 f947 	bl	18874 <os_memblock_get>
    if (!om) {
   185e6:	4603      	mov	r3, r0
   185e8:	b148      	cbz	r0, 185fe <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   185ea:	2200      	movs	r2, #0
   185ec:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   185ee:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   185f0:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   185f2:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   185f4:	f100 0110 	add.w	r1, r0, #16
   185f8:	4429      	add	r1, r5
   185fa:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   185fc:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   185fe:	4618      	mov	r0, r3
   18600:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18602:	2300      	movs	r3, #0
    return om;
   18604:	e7fb      	b.n	185fe <os_mbuf_get+0x2a>

00018606 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   18606:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   18608:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1860c:	8803      	ldrh	r3, [r0, #0]
   1860e:	42ab      	cmp	r3, r5
   18610:	d310      	bcc.n	18634 <os_mbuf_get_pkthdr+0x2e>
   18612:	2dff      	cmp	r5, #255	; 0xff
   18614:	d810      	bhi.n	18638 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   18616:	2100      	movs	r1, #0
   18618:	f7ff ffdc 	bl	185d4 <os_mbuf_get>
    if (om) {
   1861c:	4603      	mov	r3, r0
   1861e:	b138      	cbz	r0, 18630 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   18620:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   18622:	6802      	ldr	r2, [r0, #0]
   18624:	4415      	add	r5, r2
   18626:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   18628:	2200      	movs	r2, #0
   1862a:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1862c:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1862e:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   18630:	4618      	mov	r0, r3
   18632:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18634:	2300      	movs	r3, #0
   18636:	e7fb      	b.n	18630 <os_mbuf_get_pkthdr+0x2a>
   18638:	2300      	movs	r3, #0
    return om;
   1863a:	e7f9      	b.n	18630 <os_mbuf_get_pkthdr+0x2a>

0001863c <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1863c:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1863e:	6883      	ldr	r3, [r0, #8]
   18640:	b123      	cbz	r3, 1864c <os_mbuf_free+0x10>
   18642:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   18644:	6858      	ldr	r0, [r3, #4]
   18646:	f000 f93d 	bl	188c4 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1864a:	bd08      	pop	{r3, pc}
    rc = 0;
   1864c:	2000      	movs	r0, #0
    return (rc);
   1864e:	e7fc      	b.n	1864a <os_mbuf_free+0xe>

00018650 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   18650:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   18652:	b160      	cbz	r0, 1866e <os_mbuf_free_chain+0x1e>
{
   18654:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   18656:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   18658:	4618      	mov	r0, r3
   1865a:	f7ff ffef 	bl	1863c <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1865e:	4623      	mov	r3, r4
        if (rc != 0) {
   18660:	4602      	mov	r2, r0
   18662:	b910      	cbnz	r0, 1866a <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   18664:	2c00      	cmp	r4, #0
   18666:	d1f6      	bne.n	18656 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   18668:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1866a:	4610      	mov	r0, r2
   1866c:	bd10      	pop	{r4, pc}
    rc = 0;
   1866e:	2200      	movs	r2, #0
}
   18670:	4610      	mov	r0, r2
   18672:	4770      	bx	lr

00018674 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   18674:	2300      	movs	r3, #0
    while (om != NULL) {
   18676:	e003      	b.n	18680 <os_mbuf_len+0xc>
        len += om->om_len;
   18678:	88c2      	ldrh	r2, [r0, #6]
   1867a:	4413      	add	r3, r2
   1867c:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1867e:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   18680:	2800      	cmp	r0, #0
   18682:	d1f9      	bne.n	18678 <os_mbuf_len+0x4>
    }

    return len;
}
   18684:	4618      	mov	r0, r3
   18686:	4770      	bx	lr

00018688 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   18688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1868c:	2800      	cmp	r0, #0
   1868e:	d04d      	beq.n	1872c <os_mbuf_append+0xa4>
   18690:	460f      	mov	r7, r1
   18692:	4691      	mov	r9, r2
   18694:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   18696:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1869a:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1869c:	e000      	b.n	186a0 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1869e:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   186a0:	68eb      	ldr	r3, [r5, #12]
   186a2:	2b00      	cmp	r3, #0
   186a4:	d1fb      	bne.n	1869e <os_mbuf_append+0x16>
    }

    remainder = len;
   186a6:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   186a8:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   186aa:	f105 0410 	add.w	r4, r5, #16
   186ae:	881b      	ldrh	r3, [r3, #0]
   186b0:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   186b2:	6828      	ldr	r0, [r5, #0]
   186b4:	88eb      	ldrh	r3, [r5, #6]
   186b6:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   186b8:	1a24      	subs	r4, r4, r0
   186ba:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   186bc:	b164      	cbz	r4, 186d8 <os_mbuf_append+0x50>
        if (space > remainder) {
   186be:	454c      	cmp	r4, r9
   186c0:	dd00      	ble.n	186c4 <os_mbuf_append+0x3c>
            space = remainder;
   186c2:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   186c4:	4622      	mov	r2, r4
   186c6:	4639      	mov	r1, r7
   186c8:	f000 ff78 	bl	195bc <memcpy>

        last->om_len += space;
   186cc:	88eb      	ldrh	r3, [r5, #6]
   186ce:	4423      	add	r3, r4
   186d0:	80eb      	strh	r3, [r5, #6]
        data += space;
   186d2:	4427      	add	r7, r4
        remainder -= space;
   186d4:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   186d8:	2e00      	cmp	r6, #0
   186da:	dd16      	ble.n	1870a <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   186dc:	2100      	movs	r1, #0
   186de:	4640      	mov	r0, r8
   186e0:	f7ff ff78 	bl	185d4 <os_mbuf_get>
        if (!new) {
   186e4:	4604      	mov	r4, r0
   186e6:	b180      	cbz	r0, 1870a <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   186e8:	f8b8 2000 	ldrh.w	r2, [r8]
   186ec:	42b2      	cmp	r2, r6
   186ee:	bfa8      	it	ge
   186f0:	4632      	movge	r2, r6
   186f2:	b292      	uxth	r2, r2
   186f4:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   186f6:	4639      	mov	r1, r7
   186f8:	6800      	ldr	r0, [r0, #0]
   186fa:	f000 ff5f 	bl	195bc <memcpy>
        data += new->om_len;
   186fe:	88e3      	ldrh	r3, [r4, #6]
   18700:	441f      	add	r7, r3
        remainder -= new->om_len;
   18702:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   18704:	60ec      	str	r4, [r5, #12]
        last = new;
   18706:	4625      	mov	r5, r4
   18708:	e7e6      	b.n	186d8 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1870a:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1870e:	2b07      	cmp	r3, #7
   18710:	d907      	bls.n	18722 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   18712:	eba9 0906 	sub.w	r9, r9, r6
   18716:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1871a:	fa13 f989 	uxtah	r9, r3, r9
   1871e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   18722:	b106      	cbz	r6, 18726 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   18724:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   18726:	4630      	mov	r0, r6
   18728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1872c:	2602      	movs	r6, #2
   1872e:	e7fa      	b.n	18726 <os_mbuf_append+0x9e>

00018730 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   18730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18734:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   18736:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1873a:	2700      	movs	r7, #0
    head = NULL;
   1873c:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1873e:	e017      	b.n	18770 <os_mbuf_dup+0x40>
    startoff = 0;
   18740:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18742:	4623      	mov	r3, r4
   18744:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18748:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1874a:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1874c:	b299      	uxth	r1, r3
   1874e:	4640      	mov	r0, r8
   18750:	f7ff ff40 	bl	185d4 <os_mbuf_get>
   18754:	4605      	mov	r5, r0
   18756:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   18758:	b188      	cbz	r0, 1877e <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1875a:	7923      	ldrb	r3, [r4, #4]
   1875c:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1875e:	88e3      	ldrh	r3, [r4, #6]
   18760:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   18762:	88e2      	ldrh	r2, [r4, #6]
   18764:	6821      	ldr	r1, [r4, #0]
   18766:	6828      	ldr	r0, [r5, #0]
   18768:	f000 ff28 	bl	195bc <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1876c:	68e4      	ldr	r4, [r4, #12]
   1876e:	462f      	mov	r7, r5
   18770:	b14c      	cbz	r4, 18786 <os_mbuf_dup+0x56>
        if (head) {
   18772:	b15e      	cbz	r6, 1878c <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   18774:	7963      	ldrb	r3, [r4, #5]
   18776:	2b07      	cmp	r3, #7
   18778:	d9e2      	bls.n	18740 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1877a:	b299      	uxth	r1, r3
   1877c:	e7e1      	b.n	18742 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1877e:	4630      	mov	r0, r6
   18780:	f7ff ff66 	bl	18650 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   18784:	462e      	mov	r6, r5
}
   18786:	4630      	mov	r0, r6
   18788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1878c:	7963      	ldrb	r3, [r4, #5]
   1878e:	2b07      	cmp	r3, #7
   18790:	d911      	bls.n	187b6 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   18792:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18794:	4623      	mov	r3, r4
   18796:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1879a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1879c:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1879e:	b299      	uxth	r1, r3
   187a0:	4640      	mov	r0, r8
   187a2:	f7ff ff17 	bl	185d4 <os_mbuf_get>
            if (!head) {
   187a6:	4606      	mov	r6, r0
   187a8:	2800      	cmp	r0, #0
   187aa:	d0ec      	beq.n	18786 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   187ac:	7963      	ldrb	r3, [r4, #5]
   187ae:	2b07      	cmp	r3, #7
   187b0:	d803      	bhi.n	187ba <os_mbuf_dup+0x8a>
            copy = head;
   187b2:	4605      	mov	r5, r0
   187b4:	e7d1      	b.n	1875a <os_mbuf_dup+0x2a>
    startoff = 0;
   187b6:	2100      	movs	r1, #0
   187b8:	e7ec      	b.n	18794 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   187ba:	88c3      	ldrh	r3, [r0, #6]
   187bc:	b973      	cbnz	r3, 187dc <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   187be:	f100 0510 	add.w	r5, r0, #16
   187c2:	7962      	ldrb	r2, [r4, #5]
   187c4:	f104 0110 	add.w	r1, r4, #16
   187c8:	4628      	mov	r0, r5
   187ca:	f000 fef7 	bl	195bc <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   187ce:	7963      	ldrb	r3, [r4, #5]
   187d0:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   187d2:	7963      	ldrb	r3, [r4, #5]
   187d4:	441d      	add	r5, r3
   187d6:	6035      	str	r5, [r6, #0]
            copy = head;
   187d8:	4635      	mov	r5, r6
   187da:	e7be      	b.n	1875a <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   187dc:	2300      	movs	r3, #0
   187de:	461a      	mov	r2, r3
   187e0:	4619      	mov	r1, r3
   187e2:	4618      	mov	r0, r3
   187e4:	f7ff faf4 	bl	17dd0 <__assert_func>

000187e8 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   187e8:	2800      	cmp	r0, #0
   187ea:	d031      	beq.n	18850 <os_mempool_init_internal+0x68>
{
   187ec:	b430      	push	{r4, r5}
   187ee:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   187f0:	2a00      	cmp	r2, #0
   187f2:	d02f      	beq.n	18854 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   187f4:	b1bb      	cbz	r3, 18826 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   187f6:	b113      	cbz	r3, 187fe <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   187f8:	f013 0f03 	tst.w	r3, #3
   187fc:	d12c      	bne.n	18858 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   187fe:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   18800:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   18802:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   18804:	f89d 000c 	ldrb.w	r0, [sp, #12]
   18808:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1880a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1880c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1880e:	9802      	ldr	r0, [sp, #8]
   18810:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   18812:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   18814:	b199      	cbz	r1, 1883e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   18816:	f012 0f03 	tst.w	r2, #3
   1881a:	d002      	beq.n	18822 <os_mempool_init_internal+0x3a>
   1881c:	f022 0203 	bic.w	r2, r2, #3
   18820:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   18822:	2001      	movs	r0, #1
   18824:	e007      	b.n	18836 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   18826:	2900      	cmp	r1, #0
   18828:	d0e5      	beq.n	187f6 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1882a:	2003      	movs	r0, #3
   1882c:	e00e      	b.n	1884c <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1882e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   18830:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   18832:	3001      	adds	r0, #1
            block_addr += true_block_size;
   18834:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   18836:	4281      	cmp	r1, r0
   18838:	dcf9      	bgt.n	1882e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1883a:	2200      	movs	r2, #0
   1883c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1883e:	2000      	movs	r0, #0
   18840:	6120      	str	r0, [r4, #16]
   18842:	4b06      	ldr	r3, [pc, #24]	; (1885c <os_mempool_init_internal+0x74>)
   18844:	685a      	ldr	r2, [r3, #4]
   18846:	6014      	str	r4, [r2, #0]
   18848:	3410      	adds	r4, #16
   1884a:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1884c:	bc30      	pop	{r4, r5}
   1884e:	4770      	bx	lr
        return OS_INVALID_PARM;
   18850:	2003      	movs	r0, #3
}
   18852:	4770      	bx	lr
        return OS_INVALID_PARM;
   18854:	2003      	movs	r0, #3
   18856:	e7f9      	b.n	1884c <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   18858:	2004      	movs	r0, #4
   1885a:	e7f7      	b.n	1884c <os_mempool_init_internal+0x64>
   1885c:	2000de98 	.word	0x2000de98

00018860 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   18860:	b510      	push	{r4, lr}
   18862:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   18864:	2400      	movs	r4, #0
   18866:	9401      	str	r4, [sp, #4]
   18868:	9c04      	ldr	r4, [sp, #16]
   1886a:	9400      	str	r4, [sp, #0]
   1886c:	f7ff ffbc 	bl	187e8 <os_mempool_init_internal>
}
   18870:	b002      	add	sp, #8
   18872:	bd10      	pop	{r4, pc}

00018874 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   18874:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   18876:	b1a0      	cbz	r0, 188a2 <os_memblock_get+0x2e>
   18878:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1887a:	f000 fd3f 	bl	192fc <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1887e:	88e3      	ldrh	r3, [r4, #6]
   18880:	b153      	cbz	r3, 18898 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   18882:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   18884:	682a      	ldr	r2, [r5, #0]
   18886:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   18888:	3b01      	subs	r3, #1
   1888a:	b29b      	uxth	r3, r3
   1888c:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1888e:	8922      	ldrh	r2, [r4, #8]
   18890:	4293      	cmp	r3, r2
   18892:	d202      	bcs.n	1889a <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   18894:	8123      	strh	r3, [r4, #8]
   18896:	e000      	b.n	1889a <os_memblock_get+0x26>
    block = NULL;
   18898:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1889a:	f000 fd35 	bl	19308 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1889e:	4628      	mov	r0, r5
   188a0:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   188a2:	2500      	movs	r5, #0
    return (void *)block;
   188a4:	e7fb      	b.n	1889e <os_memblock_get+0x2a>

000188a6 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   188a6:	b538      	push	{r3, r4, r5, lr}
   188a8:	4604      	mov	r4, r0
   188aa:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   188ac:	f000 fd26 	bl	192fc <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   188b0:	6963      	ldr	r3, [r4, #20]
   188b2:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   188b4:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   188b6:	88e3      	ldrh	r3, [r4, #6]
   188b8:	3301      	adds	r3, #1
   188ba:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   188bc:	f000 fd24 	bl	19308 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   188c0:	2000      	movs	r0, #0
   188c2:	bd38      	pop	{r3, r4, r5, pc}

000188c4 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   188c4:	b168      	cbz	r0, 188e2 <os_memblock_put+0x1e>
{
   188c6:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   188c8:	b169      	cbz	r1, 188e6 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   188ca:	7a83      	ldrb	r3, [r0, #10]
   188cc:	f013 0f01 	tst.w	r3, #1
   188d0:	d004      	beq.n	188dc <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   188d2:	69c3      	ldr	r3, [r0, #28]
   188d4:	b113      	cbz	r3, 188dc <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   188d6:	6a02      	ldr	r2, [r0, #32]
   188d8:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   188da:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   188dc:	f7ff ffe3 	bl	188a6 <os_memblock_put_from_cb>
   188e0:	e7fb      	b.n	188da <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   188e2:	2003      	movs	r0, #3
}
   188e4:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   188e6:	2003      	movs	r0, #3
   188e8:	e7f7      	b.n	188da <os_memblock_put+0x16>
	...

000188ec <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   188ec:	4b02      	ldr	r3, [pc, #8]	; (188f8 <os_mempool_module_init+0xc>)
   188ee:	2200      	movs	r2, #0
   188f0:	601a      	str	r2, [r3, #0]
   188f2:	605b      	str	r3, [r3, #4]
}
   188f4:	4770      	bx	lr
   188f6:	bf00      	nop
   188f8:	2000de98 	.word	0x2000de98

000188fc <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   188fc:	4b02      	ldr	r3, [pc, #8]	; (18908 <os_msys_find_biggest_pool+0xc>)
   188fe:	6818      	ldr	r0, [r3, #0]
   18900:	b108      	cbz	r0, 18906 <os_msys_find_biggest_pool+0xa>
   18902:	6858      	ldr	r0, [r3, #4]
   18904:	3808      	subs	r0, #8
}
   18906:	4770      	bx	lr
   18908:	2000010c 	.word	0x2000010c

0001890c <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1890c:	4b09      	ldr	r3, [pc, #36]	; (18934 <os_msys_find_pool+0x28>)
   1890e:	6819      	ldr	r1, [r3, #0]
   18910:	460b      	mov	r3, r1
   18912:	b123      	cbz	r3, 1891e <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   18914:	881a      	ldrh	r2, [r3, #0]
   18916:	4282      	cmp	r2, r0
   18918:	d201      	bcs.n	1891e <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1891a:	689b      	ldr	r3, [r3, #8]
   1891c:	e7f9      	b.n	18912 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1891e:	b10b      	cbz	r3, 18924 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   18920:	4618      	mov	r0, r3
   18922:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18924:	b119      	cbz	r1, 1892e <os_msys_find_pool+0x22>
   18926:	4b03      	ldr	r3, [pc, #12]	; (18934 <os_msys_find_pool+0x28>)
   18928:	685b      	ldr	r3, [r3, #4]
   1892a:	3b08      	subs	r3, #8
   1892c:	e7f8      	b.n	18920 <os_msys_find_pool+0x14>
   1892e:	460b      	mov	r3, r1
    return (pool);
   18930:	e7f6      	b.n	18920 <os_msys_find_pool+0x14>
   18932:	bf00      	nop
   18934:	2000010c 	.word	0x2000010c

00018938 <os_msys_register>:
{
   18938:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1893a:	4b11      	ldr	r3, [pc, #68]	; (18980 <os_msys_register+0x48>)
   1893c:	681d      	ldr	r5, [r3, #0]
   1893e:	462b      	mov	r3, r5
    prev = NULL;
   18940:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18942:	b133      	cbz	r3, 18952 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   18944:	8801      	ldrh	r1, [r0, #0]
   18946:	881a      	ldrh	r2, [r3, #0]
   18948:	4291      	cmp	r1, r2
   1894a:	d302      	bcc.n	18952 <os_msys_register+0x1a>
        prev = pool;
   1894c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1894e:	689b      	ldr	r3, [r3, #8]
   18950:	e7f7      	b.n	18942 <os_msys_register+0xa>
    if (prev) {
   18952:	b15c      	cbz	r4, 1896c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18954:	68a3      	ldr	r3, [r4, #8]
   18956:	6083      	str	r3, [r0, #8]
   18958:	b11b      	cbz	r3, 18962 <os_msys_register+0x2a>
   1895a:	60a0      	str	r0, [r4, #8]
}
   1895c:	2000      	movs	r0, #0
   1895e:	bc30      	pop	{r4, r5}
   18960:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18962:	f100 0308 	add.w	r3, r0, #8
   18966:	4a06      	ldr	r2, [pc, #24]	; (18980 <os_msys_register+0x48>)
   18968:	6053      	str	r3, [r2, #4]
   1896a:	e7f6      	b.n	1895a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1896c:	6085      	str	r5, [r0, #8]
   1896e:	b115      	cbz	r5, 18976 <os_msys_register+0x3e>
   18970:	4b03      	ldr	r3, [pc, #12]	; (18980 <os_msys_register+0x48>)
   18972:	6018      	str	r0, [r3, #0]
   18974:	e7f2      	b.n	1895c <os_msys_register+0x24>
   18976:	f100 0308 	add.w	r3, r0, #8
   1897a:	4a01      	ldr	r2, [pc, #4]	; (18980 <os_msys_register+0x48>)
   1897c:	6053      	str	r3, [r2, #4]
   1897e:	e7f7      	b.n	18970 <os_msys_register+0x38>
   18980:	2000010c 	.word	0x2000010c

00018984 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   18984:	b530      	push	{r4, r5, lr}
   18986:	b083      	sub	sp, #12
   18988:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1898a:	9d07      	ldr	r5, [sp, #28]
   1898c:	9501      	str	r5, [sp, #4]
   1898e:	9d06      	ldr	r5, [sp, #24]
   18990:	9500      	str	r5, [sp, #0]
   18992:	f001 f96d 	bl	19c70 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   18996:	b138      	cbz	r0, 189a8 <os_msys_init_once+0x24>
   18998:	2000      	movs	r0, #0
   1899a:	9000      	str	r0, [sp, #0]
   1899c:	4b09      	ldr	r3, [pc, #36]	; (189c4 <os_msys_init_once+0x40>)
   1899e:	681d      	ldr	r5, [r3, #0]
   189a0:	4603      	mov	r3, r0
   189a2:	4602      	mov	r2, r0
   189a4:	4601      	mov	r1, r0
   189a6:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   189a8:	4620      	mov	r0, r4
   189aa:	f7ff ffc5 	bl	18938 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   189ae:	b138      	cbz	r0, 189c0 <os_msys_init_once+0x3c>
   189b0:	2000      	movs	r0, #0
   189b2:	9000      	str	r0, [sp, #0]
   189b4:	4b03      	ldr	r3, [pc, #12]	; (189c4 <os_msys_init_once+0x40>)
   189b6:	681c      	ldr	r4, [r3, #0]
   189b8:	4603      	mov	r3, r0
   189ba:	4602      	mov	r2, r0
   189bc:	4601      	mov	r1, r0
   189be:	47a0      	blx	r4
}
   189c0:	b003      	add	sp, #12
   189c2:	bd30      	pop	{r4, r5, pc}
   189c4:	20000104 	.word	0x20000104

000189c8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   189c8:	4b02      	ldr	r3, [pc, #8]	; (189d4 <os_msys_reset+0xc>)
   189ca:	2200      	movs	r2, #0
   189cc:	601a      	str	r2, [r3, #0]
   189ce:	605b      	str	r3, [r3, #4]
}
   189d0:	4770      	bx	lr
   189d2:	bf00      	nop
   189d4:	2000010c 	.word	0x2000010c

000189d8 <os_msys_get_pkthdr>:
{
   189d8:	b510      	push	{r4, lr}
   189da:	460c      	mov	r4, r1
    if (dsize == 0) {
   189dc:	b930      	cbnz	r0, 189ec <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   189de:	f7ff ff8d 	bl	188fc <os_msys_find_biggest_pool>
    if (!pool) {
   189e2:	b158      	cbz	r0, 189fc <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   189e4:	b2e1      	uxtb	r1, r4
   189e6:	f7ff fe0e 	bl	18606 <os_mbuf_get_pkthdr>
}
   189ea:	bd10      	pop	{r4, pc}
   189ec:	f101 0308 	add.w	r3, r1, #8
   189f0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   189f2:	4403      	add	r3, r0
   189f4:	b298      	uxth	r0, r3
   189f6:	f7ff ff89 	bl	1890c <os_msys_find_pool>
   189fa:	e7f2      	b.n	189e2 <os_msys_get_pkthdr+0xa>
    return (NULL);
   189fc:	2000      	movs	r0, #0
   189fe:	e7f4      	b.n	189ea <os_msys_get_pkthdr+0x12>

00018a00 <os_msys_init>:

void
os_msys_init(void)
{
   18a00:	b500      	push	{lr}
   18a02:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   18a04:	f7ff ffe0 	bl	189c8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   18a08:	4b06      	ldr	r3, [pc, #24]	; (18a24 <os_msys_init+0x24>)
   18a0a:	9301      	str	r3, [sp, #4]
   18a0c:	f44f 7392 	mov.w	r3, #292	; 0x124
   18a10:	9300      	str	r3, [sp, #0]
   18a12:	2340      	movs	r3, #64	; 0x40
   18a14:	4a04      	ldr	r2, [pc, #16]	; (18a28 <os_msys_init+0x28>)
   18a16:	4905      	ldr	r1, [pc, #20]	; (18a2c <os_msys_init+0x2c>)
   18a18:	4805      	ldr	r0, [pc, #20]	; (18a30 <os_msys_init+0x30>)
   18a1a:	f7ff ffb3 	bl	18984 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   18a1e:	b003      	add	sp, #12
   18a20:	f85d fb04 	ldr.w	pc, [sp], #4
   18a24:	0001f36c 	.word	0x0001f36c
   18a28:	2000d988 	.word	0x2000d988
   18a2c:	2000d994 	.word	0x2000d994
   18a30:	20009088 	.word	0x20009088

00018a34 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   18a34:	4603      	mov	r3, r0
   18a36:	b128      	cbz	r0, 18a44 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   18a38:	2000      	movs	r0, #0
   18a3a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   18a3c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   18a3e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   18a40:	6018      	str	r0, [r3, #0]
   18a42:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18a44:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   18a46:	4770      	bx	lr

00018a48 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   18a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   18a4a:	4b2c      	ldr	r3, [pc, #176]	; (18afc <os_mutex_release+0xb4>)
   18a4c:	681b      	ldr	r3, [r3, #0]
   18a4e:	2b00      	cmp	r3, #0
   18a50:	d04d      	beq.n	18aee <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18a52:	2800      	cmp	r0, #0
   18a54:	d04d      	beq.n	18af2 <os_mutex_release+0xaa>
   18a56:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   18a58:	f000 f97a 	bl	18d50 <os_sched_get_current_task>
   18a5c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   18a5e:	88e3      	ldrh	r3, [r4, #6]
   18a60:	2b00      	cmp	r3, #0
   18a62:	d048      	beq.n	18af6 <os_mutex_release+0xae>
   18a64:	68a2      	ldr	r2, [r4, #8]
   18a66:	4282      	cmp	r2, r0
   18a68:	d001      	beq.n	18a6e <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   18a6a:	2005      	movs	r0, #5
   18a6c:	e040      	b.n	18af0 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   18a6e:	2b01      	cmp	r3, #1
   18a70:	d003      	beq.n	18a7a <os_mutex_release+0x32>
        --mu->mu_level;
   18a72:	3b01      	subs	r3, #1
   18a74:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   18a76:	2000      	movs	r0, #0
        goto done;
   18a78:	e03a      	b.n	18af0 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   18a7a:	f000 fc3f 	bl	192fc <os_arch_save_sr>
   18a7e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   18a80:	88e3      	ldrh	r3, [r4, #6]
   18a82:	3b01      	subs	r3, #1
   18a84:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   18a86:	7aea      	ldrb	r2, [r5, #11]
   18a88:	7963      	ldrb	r3, [r4, #5]
   18a8a:	429a      	cmp	r2, r3
   18a8c:	d11e      	bne.n	18acc <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   18a8e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   18a90:	b146      	cbz	r6, 18aa4 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   18a92:	69f3      	ldr	r3, [r6, #28]
   18a94:	b1fb      	cbz	r3, 18ad6 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   18a96:	4630      	mov	r0, r6
   18a98:	f000 f9ae 	bl	18df8 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   18a9c:	2301      	movs	r3, #1
   18a9e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   18aa0:	7af3      	ldrb	r3, [r6, #11]
   18aa2:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   18aa4:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   18aa6:	b116      	cbz	r6, 18aae <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   18aa8:	7bb3      	ldrb	r3, [r6, #14]
   18aaa:	3301      	adds	r3, #1
   18aac:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   18aae:	7bab      	ldrb	r3, [r5, #14]
   18ab0:	3b01      	subs	r3, #1
   18ab2:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   18ab4:	f000 fa1a 	bl	18eec <os_sched_next_task>
   18ab8:	4604      	mov	r4, r0
    if (rdy != current) {
   18aba:	4285      	cmp	r5, r0
   18abc:	d010      	beq.n	18ae0 <os_mutex_release+0x98>
        resched = 1;
   18abe:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   18ac0:	4638      	mov	r0, r7
   18ac2:	f000 fc21 	bl	19308 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   18ac6:	b96d      	cbnz	r5, 18ae4 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   18ac8:	2000      	movs	r0, #0
   18aca:	e011      	b.n	18af0 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   18acc:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   18ace:	4628      	mov	r0, r5
   18ad0:	f000 fa24 	bl	18f1c <os_sched_resort>
   18ad4:	e7db      	b.n	18a8e <os_mutex_release+0x46>
        assert(rdy->t_obj);
   18ad6:	461a      	mov	r2, r3
   18ad8:	4619      	mov	r1, r3
   18ada:	4618      	mov	r0, r3
   18adc:	f7ff f978 	bl	17dd0 <__assert_func>
    resched = 0;
   18ae0:	2500      	movs	r5, #0
   18ae2:	e7ed      	b.n	18ac0 <os_mutex_release+0x78>
        os_sched(rdy);
   18ae4:	4620      	mov	r0, r4
   18ae6:	f000 fa07 	bl	18ef8 <os_sched>
    ret = OS_OK;
   18aea:	2000      	movs	r0, #0
   18aec:	e000      	b.n	18af0 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   18aee:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   18af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   18af2:	2003      	movs	r0, #3
   18af4:	e7fc      	b.n	18af0 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   18af6:	2005      	movs	r0, #5
   18af8:	e7fa      	b.n	18af0 <os_mutex_release+0xa8>
   18afa:	bf00      	nop
   18afc:	2000de88 	.word	0x2000de88

00018b00 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   18b00:	4b36      	ldr	r3, [pc, #216]	; (18bdc <os_mutex_pend+0xdc>)
   18b02:	681b      	ldr	r3, [r3, #0]
   18b04:	2b00      	cmp	r3, #0
   18b06:	d065      	beq.n	18bd4 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18b08:	2800      	cmp	r0, #0
   18b0a:	d065      	beq.n	18bd8 <os_mutex_pend+0xd8>
{
   18b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b10:	460f      	mov	r7, r1
   18b12:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   18b14:	f000 fbf2 	bl	192fc <os_arch_save_sr>
   18b18:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   18b1a:	f000 f919 	bl	18d50 <os_sched_get_current_task>
   18b1e:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   18b20:	88e3      	ldrh	r3, [r4, #6]
   18b22:	b19b      	cbz	r3, 18b4c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   18b24:	68a2      	ldr	r2, [r4, #8]
   18b26:	4282      	cmp	r2, r0
   18b28:	d01e      	beq.n	18b68 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   18b2a:	b327      	cbz	r7, 18b76 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   18b2c:	7ad1      	ldrb	r1, [r2, #11]
   18b2e:	7ac3      	ldrb	r3, [r0, #11]
   18b30:	4299      	cmp	r1, r3
   18b32:	d825      	bhi.n	18b80 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   18b34:	6821      	ldr	r1, [r4, #0]
   18b36:	b369      	cbz	r1, 18b94 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18b38:	460b      	mov	r3, r1
    last = NULL;
   18b3a:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18b3c:	b32b      	cbz	r3, 18b8a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   18b3e:	7ae8      	ldrb	r0, [r5, #11]
   18b40:	7ada      	ldrb	r2, [r3, #11]
   18b42:	4290      	cmp	r0, r2
   18b44:	d321      	bcc.n	18b8a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   18b46:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18b4a:	e7f7      	b.n	18b3c <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   18b4c:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   18b4e:	7ac3      	ldrb	r3, [r0, #11]
   18b50:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   18b52:	7b83      	ldrb	r3, [r0, #14]
   18b54:	3301      	adds	r3, #1
   18b56:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   18b58:	2301      	movs	r3, #1
   18b5a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18b5c:	4640      	mov	r0, r8
   18b5e:	f000 fbd3 	bl	19308 <os_arch_restore_sr>
        ret = OS_OK;
   18b62:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   18b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   18b68:	3301      	adds	r3, #1
   18b6a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18b6c:	4640      	mov	r0, r8
   18b6e:	f000 fbcb 	bl	19308 <os_arch_restore_sr>
        ret = OS_OK;
   18b72:	2000      	movs	r0, #0
        goto done;
   18b74:	e7f6      	b.n	18b64 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   18b76:	4640      	mov	r0, r8
   18b78:	f000 fbc6 	bl	19308 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   18b7c:	2006      	movs	r0, #6
        goto done;
   18b7e:	e7f1      	b.n	18b64 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   18b80:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   18b82:	68a0      	ldr	r0, [r4, #8]
   18b84:	f000 f9ca 	bl	18f1c <os_sched_resort>
   18b88:	e7d4      	b.n	18b34 <os_mutex_pend+0x34>
    if (last) {
   18b8a:	b11e      	cbz	r6, 18b94 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   18b8c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   18b8e:	64eb      	str	r3, [r5, #76]	; 0x4c
   18b90:	64f5      	str	r5, [r6, #76]	; 0x4c
   18b92:	e001      	b.n	18b98 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   18b94:	64e9      	str	r1, [r5, #76]	; 0x4c
   18b96:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   18b98:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   18b9a:	7b6b      	ldrb	r3, [r5, #13]
   18b9c:	f043 0304 	orr.w	r3, r3, #4
   18ba0:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   18ba2:	4639      	mov	r1, r7
   18ba4:	4628      	mov	r0, r5
   18ba6:	f000 f8df 	bl	18d68 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   18baa:	4640      	mov	r0, r8
   18bac:	f000 fbac 	bl	19308 <os_arch_restore_sr>
    os_sched(NULL);
   18bb0:	2000      	movs	r0, #0
   18bb2:	f000 f9a1 	bl	18ef8 <os_sched>
    OS_ENTER_CRITICAL(sr);
   18bb6:	f000 fba1 	bl	192fc <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   18bba:	7b6b      	ldrb	r3, [r5, #13]
   18bbc:	f023 0304 	bic.w	r3, r3, #4
   18bc0:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   18bc2:	f000 fba1 	bl	19308 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   18bc6:	68a3      	ldr	r3, [r4, #8]
   18bc8:	42ab      	cmp	r3, r5
   18bca:	d001      	beq.n	18bd0 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   18bcc:	2006      	movs	r0, #6
   18bce:	e7c9      	b.n	18b64 <os_mutex_pend+0x64>
        ret = OS_OK;
   18bd0:	2000      	movs	r0, #0
   18bd2:	e7c7      	b.n	18b64 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   18bd4:	2009      	movs	r0, #9
   18bd6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18bd8:	2003      	movs	r0, #3
}
   18bda:	4770      	bx	lr
   18bdc:	2000de88 	.word	0x2000de88

00018be0 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   18be0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   18be2:	4b05      	ldr	r3, [pc, #20]	; (18bf8 <os_sanity_check_list_lock+0x18>)
   18be4:	6818      	ldr	r0, [r3, #0]
   18be6:	b900      	cbnz	r0, 18bea <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   18be8:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   18bea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18bee:	4803      	ldr	r0, [pc, #12]	; (18bfc <os_sanity_check_list_lock+0x1c>)
   18bf0:	f7ff ff86 	bl	18b00 <os_mutex_pend>
err:
   18bf4:	e7f8      	b.n	18be8 <os_sanity_check_list_lock+0x8>
   18bf6:	bf00      	nop
   18bf8:	2000de88 	.word	0x2000de88
   18bfc:	2000dea0 	.word	0x2000dea0

00018c00 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   18c00:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   18c02:	4b04      	ldr	r3, [pc, #16]	; (18c14 <os_sanity_check_list_unlock+0x14>)
   18c04:	6818      	ldr	r0, [r3, #0]
   18c06:	b900      	cbnz	r0, 18c0a <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   18c08:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   18c0a:	4803      	ldr	r0, [pc, #12]	; (18c18 <os_sanity_check_list_unlock+0x18>)
   18c0c:	f7ff ff1c 	bl	18a48 <os_mutex_release>
err:
   18c10:	e7fa      	b.n	18c08 <os_sanity_check_list_unlock+0x8>
   18c12:	bf00      	nop
   18c14:	2000de88 	.word	0x2000de88
   18c18:	2000dea0 	.word	0x2000dea0

00018c1c <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   18c1c:	2300      	movs	r3, #0
   18c1e:	6003      	str	r3, [r0, #0]
   18c20:	6043      	str	r3, [r0, #4]
   18c22:	6083      	str	r3, [r0, #8]
   18c24:	60c3      	str	r3, [r0, #12]
   18c26:	6103      	str	r3, [r0, #16]
}
   18c28:	4618      	mov	r0, r3
   18c2a:	4770      	bx	lr

00018c2c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   18c2c:	b510      	push	{r4, lr}
   18c2e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   18c30:	f7ff ffd6 	bl	18be0 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   18c34:	4603      	mov	r3, r0
   18c36:	b108      	cbz	r0, 18c3c <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   18c38:	4618      	mov	r0, r3
   18c3a:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   18c3c:	4b03      	ldr	r3, [pc, #12]	; (18c4c <os_sanity_check_register+0x20>)
   18c3e:	681a      	ldr	r2, [r3, #0]
   18c40:	6122      	str	r2, [r4, #16]
   18c42:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   18c44:	f7ff ffdc 	bl	18c00 <os_sanity_check_list_unlock>
   18c48:	4603      	mov	r3, r0
err:
   18c4a:	e7f5      	b.n	18c38 <os_sanity_check_register+0xc>
   18c4c:	2000d9b0 	.word	0x2000d9b0

00018c50 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   18c50:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   18c52:	f7ff ffc5 	bl	18be0 <os_sanity_check_list_lock>
    if (rc != 0) {
   18c56:	b910      	cbnz	r0, 18c5e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   18c58:	4b17      	ldr	r3, [pc, #92]	; (18cb8 <os_sanity_run+0x68>)
   18c5a:	681c      	ldr	r4, [r3, #0]
   18c5c:	e00e      	b.n	18c7c <os_sanity_run+0x2c>
        assert(0);
   18c5e:	2300      	movs	r3, #0
   18c60:	461a      	mov	r2, r3
   18c62:	4619      	mov	r1, r3
   18c64:	4618      	mov	r0, r3
   18c66:	f7ff f8b3 	bl	17dd0 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   18c6a:	f000 facf 	bl	1920c <os_time_get>
   18c6e:	6823      	ldr	r3, [r4, #0]
   18c70:	6862      	ldr	r2, [r4, #4]
   18c72:	4413      	add	r3, r2
   18c74:	1ac3      	subs	r3, r0, r3
   18c76:	2b00      	cmp	r3, #0
   18c78:	dc0d      	bgt.n	18c96 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   18c7a:	6924      	ldr	r4, [r4, #16]
   18c7c:	b18c      	cbz	r4, 18ca2 <os_sanity_run+0x52>
        if (sc->sc_func) {
   18c7e:	68a3      	ldr	r3, [r4, #8]
   18c80:	2b00      	cmp	r3, #0
   18c82:	d0f2      	beq.n	18c6a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   18c84:	68e1      	ldr	r1, [r4, #12]
   18c86:	4620      	mov	r0, r4
   18c88:	4798      	blx	r3
            if (rc == OS_OK) {
   18c8a:	2800      	cmp	r0, #0
   18c8c:	d1ed      	bne.n	18c6a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   18c8e:	f000 fabd 	bl	1920c <os_time_get>
   18c92:	6020      	str	r0, [r4, #0]
                continue;
   18c94:	e7f1      	b.n	18c7a <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   18c96:	2300      	movs	r3, #0
   18c98:	461a      	mov	r2, r3
   18c9a:	4619      	mov	r1, r3
   18c9c:	4618      	mov	r0, r3
   18c9e:	f7ff f897 	bl	17dd0 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   18ca2:	f7ff ffad 	bl	18c00 <os_sanity_check_list_unlock>
    if (rc != 0) {
   18ca6:	b900      	cbnz	r0, 18caa <os_sanity_run+0x5a>
        assert(0);
    }
}
   18ca8:	bd10      	pop	{r4, pc}
        assert(0);
   18caa:	2300      	movs	r3, #0
   18cac:	461a      	mov	r2, r3
   18cae:	4619      	mov	r1, r3
   18cb0:	4618      	mov	r0, r3
   18cb2:	f7ff f88d 	bl	17dd0 <__assert_func>
   18cb6:	bf00      	nop
   18cb8:	2000d9b0 	.word	0x2000d9b0

00018cbc <os_sanity_init>:

int
os_sanity_init(void)
{
   18cbc:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   18cbe:	4802      	ldr	r0, [pc, #8]	; (18cc8 <os_sanity_init+0xc>)
   18cc0:	f7ff feb8 	bl	18a34 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   18cc4:	bd08      	pop	{r3, pc}
   18cc6:	bf00      	nop
   18cc8:	2000dea0 	.word	0x2000dea0

00018ccc <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   18ccc:	7b03      	ldrb	r3, [r0, #12]
   18cce:	2b01      	cmp	r3, #1
   18cd0:	d001      	beq.n	18cd6 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   18cd2:	2002      	movs	r0, #2
}
   18cd4:	4770      	bx	lr
{
   18cd6:	b510      	push	{r4, lr}
   18cd8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18cda:	f000 fb0f 	bl	192fc <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   18cde:	4b0f      	ldr	r3, [pc, #60]	; (18d1c <os_sched_insert+0x50>)
   18ce0:	681b      	ldr	r3, [r3, #0]
   18ce2:	b12b      	cbz	r3, 18cf0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   18ce4:	7ae1      	ldrb	r1, [r4, #11]
   18ce6:	7ada      	ldrb	r2, [r3, #11]
   18ce8:	4291      	cmp	r1, r2
   18cea:	d301      	bcc.n	18cf0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   18cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18cee:	e7f8      	b.n	18ce2 <os_sched_insert+0x16>
    if (entry) {
   18cf0:	b153      	cbz	r3, 18d08 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   18cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18cf4:	64a2      	str	r2, [r4, #72]	; 0x48
   18cf6:	6463      	str	r3, [r4, #68]	; 0x44
   18cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18cfa:	6014      	str	r4, [r2, #0]
   18cfc:	3444      	adds	r4, #68	; 0x44
   18cfe:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   18d00:	f000 fb02 	bl	19308 <os_arch_restore_sr>
    return (0);
   18d04:	2000      	movs	r0, #0
}
   18d06:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   18d08:	2300      	movs	r3, #0
   18d0a:	6463      	str	r3, [r4, #68]	; 0x44
   18d0c:	4b03      	ldr	r3, [pc, #12]	; (18d1c <os_sched_insert+0x50>)
   18d0e:	685a      	ldr	r2, [r3, #4]
   18d10:	64a2      	str	r2, [r4, #72]	; 0x48
   18d12:	6014      	str	r4, [r2, #0]
   18d14:	3444      	adds	r4, #68	; 0x44
   18d16:	605c      	str	r4, [r3, #4]
   18d18:	e7f2      	b.n	18d00 <os_sched_insert+0x34>
   18d1a:	bf00      	nop
   18d1c:	20000114 	.word	0x20000114

00018d20 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   18d20:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   18d22:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   18d24:	3301      	adds	r3, #1
   18d26:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   18d28:	4b06      	ldr	r3, [pc, #24]	; (18d44 <os_sched_ctx_sw_hook+0x24>)
   18d2a:	681c      	ldr	r4, [r3, #0]
   18d2c:	4b06      	ldr	r3, [pc, #24]	; (18d48 <os_sched_ctx_sw_hook+0x28>)
   18d2e:	6818      	ldr	r0, [r3, #0]
   18d30:	4906      	ldr	r1, [pc, #24]	; (18d4c <os_sched_ctx_sw_hook+0x2c>)
   18d32:	680b      	ldr	r3, [r1, #0]
   18d34:	1ac2      	subs	r2, r0, r3
   18d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18d38:	4413      	add	r3, r2
   18d3a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   18d3c:	6008      	str	r0, [r1, #0]
}
   18d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
   18d42:	4770      	bx	lr
   18d44:	2000deb0 	.word	0x2000deb0
   18d48:	2000dec0 	.word	0x2000dec0
   18d4c:	2000deac 	.word	0x2000deac

00018d50 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   18d50:	4b01      	ldr	r3, [pc, #4]	; (18d58 <os_sched_get_current_task+0x8>)
   18d52:	6818      	ldr	r0, [r3, #0]
   18d54:	4770      	bx	lr
   18d56:	bf00      	nop
   18d58:	2000deb0 	.word	0x2000deb0

00018d5c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   18d5c:	4b01      	ldr	r3, [pc, #4]	; (18d64 <os_sched_set_current_task+0x8>)
   18d5e:	6018      	str	r0, [r3, #0]
}
   18d60:	4770      	bx	lr
   18d62:	bf00      	nop
   18d64:	2000deb0 	.word	0x2000deb0

00018d68 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   18d68:	b538      	push	{r3, r4, r5, lr}
   18d6a:	4604      	mov	r4, r0
   18d6c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18d6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18d70:	b1d3      	cbz	r3, 18da8 <os_sched_sleep+0x40>
   18d72:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18d74:	649a      	str	r2, [r3, #72]	; 0x48
   18d76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18d78:	6c62      	ldr	r2, [r4, #68]	; 0x44
   18d7a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   18d7c:	2302      	movs	r3, #2
   18d7e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   18d80:	f000 fa44 	bl	1920c <os_time_get>
   18d84:	4428      	add	r0, r5
   18d86:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   18d88:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   18d8c:	d010      	beq.n	18db0 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   18d8e:	4b18      	ldr	r3, [pc, #96]	; (18df0 <os_sched_sleep+0x88>)
   18d90:	681b      	ldr	r3, [r3, #0]
   18d92:	b1d3      	cbz	r3, 18dca <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   18d94:	7b5a      	ldrb	r2, [r3, #13]
   18d96:	f012 0f01 	tst.w	r2, #1
   18d9a:	d116      	bne.n	18dca <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   18d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   18d9e:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   18da0:	2a00      	cmp	r2, #0
   18da2:	dc12      	bgt.n	18dca <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   18da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18da6:	e7f4      	b.n	18d92 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18da8:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18daa:	4b12      	ldr	r3, [pc, #72]	; (18df4 <os_sched_sleep+0x8c>)
   18dac:	605a      	str	r2, [r3, #4]
   18dae:	e7e2      	b.n	18d76 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   18db0:	7b63      	ldrb	r3, [r4, #13]
   18db2:	f043 0301 	orr.w	r3, r3, #1
   18db6:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   18db8:	2300      	movs	r3, #0
   18dba:	6463      	str	r3, [r4, #68]	; 0x44
   18dbc:	4b0c      	ldr	r3, [pc, #48]	; (18df0 <os_sched_sleep+0x88>)
   18dbe:	685a      	ldr	r2, [r3, #4]
   18dc0:	64a2      	str	r2, [r4, #72]	; 0x48
   18dc2:	6014      	str	r4, [r2, #0]
   18dc4:	3444      	adds	r4, #68	; 0x44
   18dc6:	605c      	str	r4, [r3, #4]
   18dc8:	e007      	b.n	18dda <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   18dca:	b143      	cbz	r3, 18dde <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   18dcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18dce:	64a2      	str	r2, [r4, #72]	; 0x48
   18dd0:	6463      	str	r3, [r4, #68]	; 0x44
   18dd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18dd4:	6014      	str	r4, [r2, #0]
   18dd6:	3444      	adds	r4, #68	; 0x44
   18dd8:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   18dda:	2000      	movs	r0, #0
   18ddc:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   18dde:	2300      	movs	r3, #0
   18de0:	6463      	str	r3, [r4, #68]	; 0x44
   18de2:	4b03      	ldr	r3, [pc, #12]	; (18df0 <os_sched_sleep+0x88>)
   18de4:	685a      	ldr	r2, [r3, #4]
   18de6:	64a2      	str	r2, [r4, #72]	; 0x48
   18de8:	6014      	str	r4, [r2, #0]
   18dea:	3444      	adds	r4, #68	; 0x44
   18dec:	605c      	str	r4, [r3, #4]
   18dee:	e7f4      	b.n	18dda <os_sched_sleep+0x72>
   18df0:	2000011c 	.word	0x2000011c
   18df4:	20000114 	.word	0x20000114

00018df8 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   18df8:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   18dfa:	7b03      	ldrb	r3, [r0, #12]
   18dfc:	2b02      	cmp	r3, #2
   18dfe:	d108      	bne.n	18e12 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   18e00:	69c3      	ldr	r3, [r0, #28]
   18e02:	b1db      	cbz	r3, 18e3c <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   18e04:	681a      	ldr	r2, [r3, #0]
   18e06:	b152      	cbz	r2, 18e1e <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   18e08:	4282      	cmp	r2, r0
   18e0a:	d10f      	bne.n	18e2c <os_sched_wakeup+0x34>
   18e0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   18e0e:	601a      	str	r2, [r3, #0]
   18e10:	e011      	b.n	18e36 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   18e12:	2300      	movs	r3, #0
   18e14:	461a      	mov	r2, r3
   18e16:	4619      	mov	r1, r3
   18e18:	4618      	mov	r0, r3
   18e1a:	f7fe ffd9 	bl	17dd0 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   18e1e:	2300      	movs	r3, #0
   18e20:	461a      	mov	r2, r3
   18e22:	4619      	mov	r1, r3
   18e24:	4618      	mov	r0, r3
   18e26:	f7fe ffd3 	bl	17dd0 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   18e2a:	461a      	mov	r2, r3
   18e2c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   18e2e:	4283      	cmp	r3, r0
   18e30:	d1fb      	bne.n	18e2a <os_sched_wakeup+0x32>
   18e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18e34:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   18e36:	2300      	movs	r3, #0
   18e38:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   18e3a:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   18e3c:	2301      	movs	r3, #1
   18e3e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   18e40:	2300      	movs	r3, #0
   18e42:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   18e44:	7b43      	ldrb	r3, [r0, #13]
   18e46:	f023 0301 	bic.w	r3, r3, #1
   18e4a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   18e4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18e4e:	b143      	cbz	r3, 18e62 <os_sched_wakeup+0x6a>
   18e50:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18e52:	649a      	str	r2, [r3, #72]	; 0x48
   18e54:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18e56:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18e58:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   18e5a:	f7ff ff37 	bl	18ccc <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   18e5e:	2000      	movs	r0, #0
   18e60:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   18e62:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18e64:	4b01      	ldr	r3, [pc, #4]	; (18e6c <os_sched_wakeup+0x74>)
   18e66:	605a      	str	r2, [r3, #4]
   18e68:	e7f4      	b.n	18e54 <os_sched_wakeup+0x5c>
   18e6a:	bf00      	nop
   18e6c:	2000011c 	.word	0x2000011c

00018e70 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   18e70:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   18e72:	f000 f9cb 	bl	1920c <os_time_get>
   18e76:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   18e78:	f000 fa40 	bl	192fc <os_arch_save_sr>
   18e7c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   18e7e:	4b0a      	ldr	r3, [pc, #40]	; (18ea8 <os_sched_os_timer_exp+0x38>)
   18e80:	6818      	ldr	r0, [r3, #0]
    while (t) {
   18e82:	b160      	cbz	r0, 18e9e <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   18e84:	7b43      	ldrb	r3, [r0, #13]
   18e86:	f013 0f01 	tst.w	r3, #1
   18e8a:	d108      	bne.n	18e9e <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   18e8c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   18e8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   18e90:	1aeb      	subs	r3, r5, r3
   18e92:	2b00      	cmp	r3, #0
   18e94:	db03      	blt.n	18e9e <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   18e96:	f7ff ffaf 	bl	18df8 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   18e9a:	4620      	mov	r0, r4
   18e9c:	e7f1      	b.n	18e82 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   18e9e:	4630      	mov	r0, r6
   18ea0:	f000 fa32 	bl	19308 <os_arch_restore_sr>
}
   18ea4:	bd70      	pop	{r4, r5, r6, pc}
   18ea6:	bf00      	nop
   18ea8:	2000011c 	.word	0x2000011c

00018eac <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   18eac:	b510      	push	{r4, lr}
   18eae:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   18eb0:	f000 fa2d 	bl	1930e <os_arch_in_critical>
   18eb4:	b150      	cbz	r0, 18ecc <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   18eb6:	4b0c      	ldr	r3, [pc, #48]	; (18ee8 <os_sched_wakeup_ticks+0x3c>)
   18eb8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   18eba:	b17b      	cbz	r3, 18edc <os_sched_wakeup_ticks+0x30>
   18ebc:	7b5a      	ldrb	r2, [r3, #13]
   18ebe:	f012 0f01 	tst.w	r2, #1
   18ec2:	d10e      	bne.n	18ee2 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   18ec4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   18ec6:	1b00      	subs	r0, r0, r4
   18ec8:	d406      	bmi.n	18ed8 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   18eca:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18ecc:	2300      	movs	r3, #0
   18ece:	461a      	mov	r2, r3
   18ed0:	4619      	mov	r1, r3
   18ed2:	4618      	mov	r0, r3
   18ed4:	f7fe ff7c 	bl	17dd0 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   18ed8:	2000      	movs	r0, #0
   18eda:	e7f6      	b.n	18eca <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   18edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ee0:	e7f3      	b.n	18eca <os_sched_wakeup_ticks+0x1e>
   18ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   18ee6:	e7f0      	b.n	18eca <os_sched_wakeup_ticks+0x1e>
   18ee8:	2000011c 	.word	0x2000011c

00018eec <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   18eec:	4b01      	ldr	r3, [pc, #4]	; (18ef4 <os_sched_next_task+0x8>)
   18eee:	6818      	ldr	r0, [r3, #0]
   18ef0:	4770      	bx	lr
   18ef2:	bf00      	nop
   18ef4:	20000114 	.word	0x20000114

00018ef8 <os_sched>:
{
   18ef8:	b538      	push	{r3, r4, r5, lr}
   18efa:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18efc:	f000 f9fe 	bl	192fc <os_arch_save_sr>
   18f00:	4605      	mov	r5, r0
    if (!next_t) {
   18f02:	b134      	cbz	r4, 18f12 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   18f04:	4620      	mov	r0, r4
   18f06:	f000 f9ef 	bl	192e8 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   18f0a:	4628      	mov	r0, r5
   18f0c:	f000 f9fc 	bl	19308 <os_arch_restore_sr>
}
   18f10:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   18f12:	f7ff ffeb 	bl	18eec <os_sched_next_task>
   18f16:	4604      	mov	r4, r0
   18f18:	e7f4      	b.n	18f04 <os_sched+0xc>
	...

00018f1c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   18f1c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   18f1e:	7b03      	ldrb	r3, [r0, #12]
   18f20:	2b01      	cmp	r3, #1
   18f22:	d000      	beq.n	18f26 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   18f24:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18f26:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18f28:	b13b      	cbz	r3, 18f3a <os_sched_resort+0x1e>
   18f2a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18f2c:	649a      	str	r2, [r3, #72]	; 0x48
   18f2e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18f30:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18f32:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   18f34:	f7ff feca 	bl	18ccc <os_sched_insert>
}
   18f38:	e7f4      	b.n	18f24 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18f3a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18f3c:	4b01      	ldr	r3, [pc, #4]	; (18f44 <os_sched_resort+0x28>)
   18f3e:	605a      	str	r2, [r3, #4]
   18f40:	e7f5      	b.n	18f2e <os_sched_resort+0x12>
   18f42:	bf00      	nop
   18f44:	20000114 	.word	0x20000114

00018f48 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   18f48:	4603      	mov	r3, r0
   18f4a:	b118      	cbz	r0, 18f54 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   18f4c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   18f4e:	2000      	movs	r0, #0
   18f50:	6018      	str	r0, [r3, #0]
   18f52:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18f54:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   18f56:	4770      	bx	lr

00018f58 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   18f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   18f5a:	4b17      	ldr	r3, [pc, #92]	; (18fb8 <os_sem_release+0x60>)
   18f5c:	681b      	ldr	r3, [r3, #0]
   18f5e:	b33b      	cbz	r3, 18fb0 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   18f60:	b340      	cbz	r0, 18fb4 <os_sem_release+0x5c>
   18f62:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   18f64:	f7ff fef4 	bl	18d50 <os_sched_get_current_task>
   18f68:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   18f6a:	f000 f9c7 	bl	192fc <os_arch_save_sr>
   18f6e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   18f70:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   18f72:	b165      	cbz	r5, 18f8e <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   18f74:	7b6b      	ldrb	r3, [r5, #13]
   18f76:	f023 0302 	bic.w	r3, r3, #2
   18f7a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   18f7c:	4628      	mov	r0, r5
   18f7e:	f7ff ff3b 	bl	18df8 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   18f82:	7afa      	ldrb	r2, [r7, #11]
   18f84:	7aeb      	ldrb	r3, [r5, #11]
   18f86:	429a      	cmp	r2, r3
   18f88:	d80b      	bhi.n	18fa2 <os_sem_release+0x4a>
    resched = 0;
   18f8a:	2400      	movs	r4, #0
   18f8c:	e003      	b.n	18f96 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   18f8e:	88e3      	ldrh	r3, [r4, #6]
   18f90:	3301      	adds	r3, #1
   18f92:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   18f94:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   18f96:	4630      	mov	r0, r6
   18f98:	f000 f9b6 	bl	19308 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   18f9c:	b91c      	cbnz	r4, 18fa6 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   18f9e:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   18fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   18fa2:	2401      	movs	r4, #1
   18fa4:	e7f7      	b.n	18f96 <os_sem_release+0x3e>
        os_sched(rdy);
   18fa6:	4628      	mov	r0, r5
   18fa8:	f7ff ffa6 	bl	18ef8 <os_sched>
    ret = OS_OK;
   18fac:	2000      	movs	r0, #0
   18fae:	e7f7      	b.n	18fa0 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   18fb0:	2009      	movs	r0, #9
   18fb2:	e7f5      	b.n	18fa0 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   18fb4:	2003      	movs	r0, #3
   18fb6:	e7f3      	b.n	18fa0 <os_sem_release+0x48>
   18fb8:	2000de88 	.word	0x2000de88

00018fbc <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   18fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   18fbe:	4b2c      	ldr	r3, [pc, #176]	; (19070 <os_sem_pend+0xb4>)
   18fc0:	681b      	ldr	r3, [r3, #0]
   18fc2:	2b00      	cmp	r3, #0
   18fc4:	d04f      	beq.n	19066 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   18fc6:	2800      	cmp	r0, #0
   18fc8:	d04f      	beq.n	1906a <os_sem_pend+0xae>
   18fca:	460d      	mov	r5, r1
   18fcc:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   18fce:	f7ff febf 	bl	18d50 <os_sched_get_current_task>
   18fd2:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   18fd4:	f000 f992 	bl	192fc <os_arch_save_sr>
   18fd8:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   18fda:	88e3      	ldrh	r3, [r4, #6]
   18fdc:	b14b      	cbz	r3, 18ff2 <os_sem_pend+0x36>
        sem->sem_tokens--;
   18fde:	3b01      	subs	r3, #1
   18fe0:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   18fe2:	2400      	movs	r4, #0
    sched = 0;
   18fe4:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   18fe6:	4638      	mov	r0, r7
   18fe8:	f000 f98e 	bl	19308 <os_arch_restore_sr>

    if (sched) {
   18fec:	bb45      	cbnz	r5, 19040 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   18fee:	4620      	mov	r0, r4
   18ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   18ff2:	b315      	cbz	r5, 1903a <os_sem_pend+0x7e>
        current->t_obj = sem;
   18ff4:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   18ff6:	7b73      	ldrb	r3, [r6, #13]
   18ff8:	f043 0302 	orr.w	r3, r3, #2
   18ffc:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   18ffe:	f8d4 c000 	ldr.w	ip, [r4]
   19002:	f1bc 0f00 	cmp.w	ip, #0
   19006:	d00e      	beq.n	19026 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19008:	4663      	mov	r3, ip
        last = NULL;
   1900a:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1900c:	b133      	cbz	r3, 1901c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1900e:	7af1      	ldrb	r1, [r6, #11]
   19010:	7ada      	ldrb	r2, [r3, #11]
   19012:	4291      	cmp	r1, r2
   19014:	d302      	bcc.n	1901c <os_sem_pend+0x60>
                last = entry;
   19016:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1901a:	e7f7      	b.n	1900c <os_sem_pend+0x50>
        if (last) {
   1901c:	b118      	cbz	r0, 19026 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1901e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19020:	64f3      	str	r3, [r6, #76]	; 0x4c
   19022:	64c6      	str	r6, [r0, #76]	; 0x4c
   19024:	e002      	b.n	1902c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   19026:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1902a:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1902c:	4629      	mov	r1, r5
   1902e:	4630      	mov	r0, r6
   19030:	f7ff fe9a 	bl	18d68 <os_sched_sleep>
        ret = OS_OK;
   19034:	2400      	movs	r4, #0
        sched = 1;
   19036:	2501      	movs	r5, #1
   19038:	e7d5      	b.n	18fe6 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1903a:	2406      	movs	r4, #6
    sched = 0;
   1903c:	2500      	movs	r5, #0
   1903e:	e7d2      	b.n	18fe6 <os_sem_pend+0x2a>
        os_sched(NULL);
   19040:	2000      	movs	r0, #0
   19042:	f7ff ff59 	bl	18ef8 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   19046:	7b73      	ldrb	r3, [r6, #13]
   19048:	f013 0f02 	tst.w	r3, #2
   1904c:	d101      	bne.n	19052 <os_sem_pend+0x96>
            ret = OS_OK;
   1904e:	2400      	movs	r4, #0
   19050:	e7cd      	b.n	18fee <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   19052:	f000 f953 	bl	192fc <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   19056:	7b73      	ldrb	r3, [r6, #13]
   19058:	f023 0302 	bic.w	r3, r3, #2
   1905c:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1905e:	f000 f953 	bl	19308 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   19062:	2406      	movs	r4, #6
   19064:	e7c3      	b.n	18fee <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   19066:	2409      	movs	r4, #9
   19068:	e7c1      	b.n	18fee <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1906a:	2403      	movs	r4, #3
   1906c:	e7bf      	b.n	18fee <os_sem_pend+0x32>
   1906e:	bf00      	nop
   19070:	2000de88 	.word	0x2000de88

00019074 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   19074:	2300      	movs	r3, #0
   19076:	e003      	b.n	19080 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   19078:	4a03      	ldr	r2, [pc, #12]	; (19088 <_clear_stack+0x14>)
   1907a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1907e:	3301      	adds	r3, #1
   19080:	428b      	cmp	r3, r1
   19082:	dbf9      	blt.n	19078 <_clear_stack+0x4>
    }
}
   19084:	4770      	bx	lr
   19086:	bf00      	nop
   19088:	deadbeef 	.word	0xdeadbeef

0001908c <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19090:	4604      	mov	r4, r0
   19092:	460f      	mov	r7, r1
   19094:	4690      	mov	r8, r2
   19096:	461d      	mov	r5, r3
   19098:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1909c:	2250      	movs	r2, #80	; 0x50
   1909e:	2100      	movs	r1, #0
   190a0:	f000 fa99 	bl	195d6 <memset>

    t->t_func = func;
   190a4:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   190a8:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   190aa:	f000 f927 	bl	192fc <os_arch_save_sr>
    rc = g_task_id;
   190ae:	4b2b      	ldr	r3, [pc, #172]	; (1915c <os_task_init+0xd0>)
   190b0:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   190b2:	1c6a      	adds	r2, r5, #1
   190b4:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   190b6:	f000 f927 	bl	19308 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   190ba:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   190bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   190c0:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   190c2:	2301      	movs	r3, #1
   190c4:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   190c6:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   190c8:	2300      	movs	r3, #0
   190ca:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   190cc:	f104 0720 	add.w	r7, r4, #32
   190d0:	4638      	mov	r0, r7
   190d2:	f7ff fda3 	bl	18c1c <os_sanity_check_init>
    if (rc != OS_OK) {
   190d6:	4605      	mov	r5, r0
   190d8:	2800      	cmp	r0, #0
   190da:	d132      	bne.n	19142 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   190dc:	9b07      	ldr	r3, [sp, #28]
   190de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   190e2:	d005      	beq.n	190f0 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   190e4:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   190e6:	4638      	mov	r0, r7
   190e8:	f7ff fda0 	bl	18c2c <os_sanity_check_register>
        if (rc != OS_OK) {
   190ec:	4605      	mov	r5, r0
   190ee:	bb40      	cbnz	r0, 19142 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   190f0:	4631      	mov	r1, r6
   190f2:	9808      	ldr	r0, [sp, #32]
   190f4:	f7ff ffbe 	bl	19074 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   190f8:	9b08      	ldr	r3, [sp, #32]
   190fa:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   190fe:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   19100:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   19102:	4632      	mov	r2, r6
   19104:	4620      	mov	r0, r4
   19106:	f000 f907 	bl	19318 <os_arch_task_stack_init>
   1910a:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1910c:	4b14      	ldr	r3, [pc, #80]	; (19160 <os_task_init+0xd4>)
   1910e:	681b      	ldr	r3, [r3, #0]
   19110:	b15b      	cbz	r3, 1912a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   19112:	7ae1      	ldrb	r1, [r4, #11]
   19114:	7ada      	ldrb	r2, [r3, #11]
   19116:	4291      	cmp	r1, r2
   19118:	d001      	beq.n	1911e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1911c:	e7f8      	b.n	19110 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1911e:	2300      	movs	r3, #0
   19120:	461a      	mov	r2, r3
   19122:	4619      	mov	r1, r3
   19124:	4618      	mov	r0, r3
   19126:	f7fe fe53 	bl	17dd0 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1912a:	6423      	str	r3, [r4, #64]	; 0x40
   1912c:	4b0c      	ldr	r3, [pc, #48]	; (19160 <os_task_init+0xd4>)
   1912e:	685a      	ldr	r2, [r3, #4]
   19130:	6014      	str	r4, [r2, #0]
   19132:	f104 0240 	add.w	r2, r4, #64	; 0x40
   19136:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   19138:	4620      	mov	r0, r4
   1913a:	f7ff fdc7 	bl	18ccc <os_sched_insert>
   1913e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   19140:	b110      	cbz	r0, 19148 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   19142:	4628      	mov	r0, r5
   19144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   19148:	f7fe fefc 	bl	17f44 <os_started>
   1914c:	b908      	cbnz	r0, 19152 <os_task_init+0xc6>
    return (0);
   1914e:	4605      	mov	r5, r0
   19150:	e7f7      	b.n	19142 <os_task_init+0xb6>
        os_sched(NULL);
   19152:	2000      	movs	r0, #0
   19154:	f7ff fed0 	bl	18ef8 <os_sched>
   19158:	e7f3      	b.n	19142 <os_task_init+0xb6>
   1915a:	bf00      	nop
   1915c:	2000deb4 	.word	0x2000deb4
   19160:	2000deb8 	.word	0x2000deb8

00019164 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   19164:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   19168:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1916a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1916e:	e9d1 4500 	ldrd	r4, r5, [r1]
   19172:	eb14 0b03 	adds.w	fp, r4, r3
   19176:	f145 0c00 	adc.w	ip, r5, #0
   1917a:	e9c2 bc00 	strd	fp, ip, [r2]
   1917e:	688b      	ldr	r3, [r1, #8]
   19180:	f641 6184 	movw	r1, #7812	; 0x1e84
   19184:	fb01 3000 	mla	r0, r1, r0, r3
   19188:	6090      	str	r0, [r2, #8]
   1918a:	4b08      	ldr	r3, [pc, #32]	; (191ac <os_deltatime+0x48>)
   1918c:	4298      	cmp	r0, r3
   1918e:	dd0a      	ble.n	191a6 <os_deltatime+0x42>
   19190:	f11b 0401 	adds.w	r4, fp, #1
   19194:	f14c 0500 	adc.w	r5, ip, #0
   19198:	e9c2 4500 	strd	r4, r5, [r2]
   1919c:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   191a0:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   191a4:	6090      	str	r0, [r2, #8]
}
   191a6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   191aa:	4770      	bx	lr
   191ac:	000f423f 	.word	0x000f423f

000191b0 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   191b0:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   191b2:	1e04      	subs	r4, r0, #0
   191b4:	db0d      	blt.n	191d2 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   191b6:	f000 f8a1 	bl	192fc <os_arch_save_sr>
   191ba:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   191bc:	4a11      	ldr	r2, [pc, #68]	; (19204 <os_time_tick+0x54>)
   191be:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   191c0:	18e0      	adds	r0, r4, r3
   191c2:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   191c4:	ea90 0f03 	teq	r0, r3
   191c8:	d409      	bmi.n	191de <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   191ca:	4628      	mov	r0, r5
   191cc:	f000 f89c 	bl	19308 <os_arch_restore_sr>
}
   191d0:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   191d2:	2300      	movs	r3, #0
   191d4:	461a      	mov	r2, r3
   191d6:	4619      	mov	r1, r3
   191d8:	4618      	mov	r0, r3
   191da:	f7fe fdf9 	bl	17dd0 <__assert_func>
        delta = g_os_time - basetod.ostime;
   191de:	4e0a      	ldr	r6, [pc, #40]	; (19208 <os_time_tick+0x58>)
   191e0:	4631      	mov	r1, r6
   191e2:	f851 4b08 	ldr.w	r4, [r1], #8
   191e6:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   191e8:	460a      	mov	r2, r1
   191ea:	4620      	mov	r0, r4
   191ec:	f7ff ffba 	bl	19164 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   191f0:	f106 0118 	add.w	r1, r6, #24
   191f4:	460a      	mov	r2, r1
   191f6:	4620      	mov	r0, r4
   191f8:	f7ff ffb4 	bl	19164 <os_deltatime>
        basetod.ostime = g_os_time;
   191fc:	4b01      	ldr	r3, [pc, #4]	; (19204 <os_time_tick+0x54>)
   191fe:	681b      	ldr	r3, [r3, #0]
   19200:	6033      	str	r3, [r6, #0]
   19202:	e7e2      	b.n	191ca <os_time_tick+0x1a>
   19204:	2000dec0 	.word	0x2000dec0
   19208:	2000d9b8 	.word	0x2000d9b8

0001920c <os_time_get>:
}
   1920c:	4b01      	ldr	r3, [pc, #4]	; (19214 <os_time_get+0x8>)
   1920e:	6818      	ldr	r0, [r3, #0]
   19210:	4770      	bx	lr
   19212:	bf00      	nop
   19214:	2000dec0 	.word	0x2000dec0

00019218 <os_time_advance>:

void
os_time_advance(int ticks)
{
   19218:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1921a:	1e04      	subs	r4, r0, #0
   1921c:	db09      	blt.n	19232 <os_time_advance+0x1a>

    if (ticks > 0) {
   1921e:	2c00      	cmp	r4, #0
   19220:	dd06      	ble.n	19230 <os_time_advance+0x18>
        if (!os_started()) {
   19222:	f7fe fe8f 	bl	17f44 <os_started>
   19226:	b950      	cbnz	r0, 1923e <os_time_advance+0x26>
            g_os_time += ticks;
   19228:	4a0a      	ldr	r2, [pc, #40]	; (19254 <os_time_advance+0x3c>)
   1922a:	6813      	ldr	r3, [r2, #0]
   1922c:	441c      	add	r4, r3
   1922e:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   19230:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   19232:	2300      	movs	r3, #0
   19234:	461a      	mov	r2, r3
   19236:	4619      	mov	r1, r3
   19238:	4618      	mov	r0, r3
   1923a:	f7fe fdc9 	bl	17dd0 <__assert_func>
            os_time_tick(ticks);
   1923e:	4620      	mov	r0, r4
   19240:	f7ff ffb6 	bl	191b0 <os_time_tick>
            os_callout_tick();
   19244:	f7fe ffa6 	bl	18194 <os_callout_tick>
            os_sched_os_timer_exp();
   19248:	f7ff fe12 	bl	18e70 <os_sched_os_timer_exp>
            os_sched(NULL);
   1924c:	2000      	movs	r0, #0
   1924e:	f7ff fe53 	bl	18ef8 <os_sched>
}
   19252:	e7ed      	b.n	19230 <os_time_advance+0x18>
   19254:	2000dec0 	.word	0x2000dec0

00019258 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   19258:	b900      	cbnz	r0, 1925c <os_time_delay+0x4>
   1925a:	4770      	bx	lr
{
   1925c:	b538      	push	{r3, r4, r5, lr}
   1925e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   19260:	f000 f84c 	bl	192fc <os_arch_save_sr>
   19264:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   19266:	f7ff fd73 	bl	18d50 <os_sched_get_current_task>
   1926a:	4621      	mov	r1, r4
   1926c:	f7ff fd7c 	bl	18d68 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   19270:	4628      	mov	r0, r5
   19272:	f000 f849 	bl	19308 <os_arch_restore_sr>
        os_sched(NULL);
   19276:	2000      	movs	r0, #0
   19278:	f7ff fe3e 	bl	18ef8 <os_sched>
    }
}
   1927c:	bd38      	pop	{r3, r4, r5, pc}
	...

00019280 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   19280:	b570      	push	{r4, r5, r6, lr}
   19282:	4605      	mov	r5, r0
   19284:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   19286:	f000 f839 	bl	192fc <os_arch_save_sr>
   1928a:	4606      	mov	r6, r0
    if (tv != NULL) {
   1928c:	b145      	cbz	r5, 192a0 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1928e:	f7ff ffbd 	bl	1920c <os_time_get>
   19292:	4908      	ldr	r1, [pc, #32]	; (192b4 <os_gettimeofday+0x34>)
   19294:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   19298:	462a      	mov	r2, r5
   1929a:	1ac0      	subs	r0, r0, r3
   1929c:	f7ff ff62 	bl	19164 <os_deltatime>
    }

    if (tz != NULL) {
   192a0:	b114      	cbz	r4, 192a8 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   192a2:	4b04      	ldr	r3, [pc, #16]	; (192b4 <os_gettimeofday+0x34>)
   192a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
   192a6:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   192a8:	4630      	mov	r0, r6
   192aa:	f000 f82d 	bl	19308 <os_arch_restore_sr>

    return (0);
}
   192ae:	2000      	movs	r0, #0
   192b0:	bd70      	pop	{r4, r5, r6, pc}
   192b2:	bf00      	nop
   192b4:	2000d9b8 	.word	0x2000d9b8

000192b8 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   192b8:	b538      	push	{r3, r4, r5, lr}
   192ba:	4604      	mov	r4, r0
   192bc:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   192be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   192c2:	2300      	movs	r3, #0
   192c4:	01c0      	lsls	r0, r0, #7
   192c6:	0e61      	lsrs	r1, r4, #25
   192c8:	f002 f88a 	bl	1b3e0 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   192cc:	2901      	cmp	r1, #1
   192ce:	bf08      	it	eq
   192d0:	2800      	cmpeq	r0, #0
   192d2:	d202      	bcs.n	192da <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   192d4:	6028      	str	r0, [r5, #0]
    return 0;
   192d6:	2000      	movs	r0, #0
}
   192d8:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   192da:	2002      	movs	r0, #2
   192dc:	e7fc      	b.n	192d8 <os_time_ms_to_ticks+0x20>

000192de <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   192de:	b508      	push	{r3, lr}
    os_time_advance(1);
   192e0:	2001      	movs	r0, #1
   192e2:	f7ff ff99 	bl	19218 <os_time_advance>
}
   192e6:	bd08      	pop	{r3, pc}

000192e8 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   192e8:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   192ea:	f7ff fd19 	bl	18d20 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   192ee:	4b02      	ldr	r3, [pc, #8]	; (192f8 <os_arch_ctx_sw+0x10>)
   192f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   192f4:	605a      	str	r2, [r3, #4]
}
   192f6:	bd08      	pop	{r3, pc}
   192f8:	e000ed00 	.word	0xe000ed00

000192fc <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   192fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19300:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   19302:	f000 0001 	and.w	r0, r0, #1
   19306:	4770      	bx	lr

00019308 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   19308:	b900      	cbnz	r0, 1930c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1930a:	b662      	cpsie	i
        __enable_irq();
    }
}
   1930c:	4770      	bx	lr

0001930e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1930e:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   19312:	f000 0001 	and.w	r0, r0, #1
   19316:	4770      	bx	lr

00019318 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   19318:	b570      	push	{r4, r5, r6, lr}
   1931a:	4606      	mov	r6, r0
   1931c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1931e:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   19322:	2309      	movs	r3, #9
   19324:	e003      	b.n	1932e <os_arch_task_stack_init+0x16>
        s[i] = 0;
   19326:	2200      	movs	r2, #0
   19328:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1932c:	3301      	adds	r3, #1
   1932e:	2b0d      	cmp	r3, #13
   19330:	ddf9      	ble.n	19326 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   19332:	4620      	mov	r0, r4
   19334:	f000 f8b6 	bl	194a4 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   19338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1933c:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   19340:	6973      	ldr	r3, [r6, #20]
   19342:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   19346:	69b3      	ldr	r3, [r6, #24]
   19348:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1934c:	f06f 0302 	mvn.w	r3, #2
   19350:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   19354:	4620      	mov	r0, r4
   19356:	bd70      	pop	{r4, r5, r6, pc}

00019358 <os_arch_init>:

void
os_arch_init(void)
{
   19358:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1935a:	4a04      	ldr	r2, [pc, #16]	; (1936c <os_arch_init+0x14>)
   1935c:	6953      	ldr	r3, [r2, #20]
   1935e:	f043 0310 	orr.w	r3, r3, #16
   19362:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   19364:	f7fe fdf4 	bl	17f50 <os_init_idle_task>
}
   19368:	bd08      	pop	{r3, pc}
   1936a:	bf00      	nop
   1936c:	e000ed00 	.word	0xe000ed00

00019370 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   19370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19372:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   19376:	b90c      	cbnz	r4, 1937c <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   19378:	2400      	movs	r4, #0
   1937a:	e009      	b.n	19390 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1937c:	2007      	movs	r0, #7
   1937e:	e02e      	b.n	193de <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   19380:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   19384:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   19388:	26ff      	movs	r6, #255	; 0xff
   1938a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1938e:	3401      	adds	r4, #1
   19390:	2cef      	cmp	r4, #239	; 0xef
   19392:	d9f5      	bls.n	19380 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   19394:	f06f 040d 	mvn.w	r4, #13
   19398:	e007      	b.n	193aa <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1939a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1939c:	4e12      	ldr	r6, [pc, #72]	; (193e8 <os_arch_os_init+0x78>)
   1939e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   193a0:	3510      	adds	r5, #16
   193a2:	4f12      	ldr	r7, [pc, #72]	; (193ec <os_arch_os_init+0x7c>)
   193a4:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   193a8:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   193aa:	2c25      	cmp	r4, #37	; 0x25
   193ac:	ddf5      	ble.n	1939a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   193ae:	4c0e      	ldr	r4, [pc, #56]	; (193e8 <os_arch_os_init+0x78>)
   193b0:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   193b2:	4e0f      	ldr	r6, [pc, #60]	; (193f0 <os_arch_os_init+0x80>)
   193b4:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   193b6:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   193b8:	4e0e      	ldr	r6, [pc, #56]	; (193f4 <os_arch_os_init+0x84>)
   193ba:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   193bc:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   193be:	4e0e      	ldr	r6, [pc, #56]	; (193f8 <os_arch_os_init+0x88>)
   193c0:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   193c2:	25e0      	movs	r5, #224	; 0xe0
   193c4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   193c8:	2520      	movs	r5, #32
   193ca:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   193cc:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   193d0:	f014 0f01 	tst.w	r4, #1
   193d4:	d004      	beq.n	193e0 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   193d6:	f8df c024 	ldr.w	ip, [pc, #36]	; 193fc <os_arch_os_init+0x8c>
   193da:	df00      	svc	0
        err = OS_OK;
   193dc:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   193de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   193e0:	f7ff ffba 	bl	19358 <os_arch_init>
        err = OS_OK;
   193e4:	2000      	movs	r0, #0
   193e6:	e7fa      	b.n	193de <os_arch_os_init+0x6e>
   193e8:	e000ed00 	.word	0xe000ed00
   193ec:	00019543 	.word	0x00019543
   193f0:	000194ab 	.word	0x000194ab
   193f4:	000194f1 	.word	0x000194f1
   193f8:	00019537 	.word	0x00019537
   193fc:	00019359 	.word	0x00019359

00019400 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   19400:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   19402:	f7ff fd73 	bl	18eec <os_sched_next_task>
   19406:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   19408:	f7ff fca8 	bl	18d5c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1940c:	6823      	ldr	r3, [r4, #0]
   1940e:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   19410:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   19414:	2106      	movs	r1, #6
   19416:	2080      	movs	r0, #128	; 0x80
   19418:	f000 fde8 	bl	19fec <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1941c:	4b03      	ldr	r3, [pc, #12]	; (1942c <os_arch_start+0x2c>)
   1941e:	2201      	movs	r2, #1
   19420:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   19422:	4620      	mov	r0, r4
   19424:	f7ff ff60 	bl	192e8 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   19428:	69a0      	ldr	r0, [r4, #24]
   1942a:	bd10      	pop	{r4, pc}
   1942c:	2000de88 	.word	0x2000de88

00019430 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   19430:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   19432:	4814      	ldr	r0, [pc, #80]	; (19484 <os_arch_os_start+0x54>)
   19434:	6800      	ldr	r0, [r0, #0]
   19436:	3804      	subs	r0, #4
   19438:	f000 f82a 	bl	19490 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1943c:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   19440:	b9d4      	cbnz	r4, 19478 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   19442:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   19446:	f004 0403 	and.w	r4, r4, #3
   1944a:	2c03      	cmp	r4, #3
   1944c:	d808      	bhi.n	19460 <os_arch_os_start+0x30>
   1944e:	e8df f004 	tbb	[pc, r4]
   19452:	1515      	.short	0x1515
   19454:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   19456:	4c0c      	ldr	r4, [pc, #48]	; (19488 <os_arch_os_start+0x58>)
   19458:	6824      	ldr	r4, [r4, #0]
   1945a:	f014 0f01 	tst.w	r4, #1
   1945e:	d10f      	bne.n	19480 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   19460:	f8df c028 	ldr.w	ip, [pc, #40]	; 1948c <os_arch_os_start+0x5c>
   19464:	df00      	svc	0
   19466:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   19468:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1946a:	4c07      	ldr	r4, [pc, #28]	; (19488 <os_arch_os_start+0x58>)
   1946c:	6824      	ldr	r4, [r4, #0]
   1946e:	f014 0f01 	tst.w	r4, #1
   19472:	d1f5      	bne.n	19460 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   19474:	2008      	movs	r0, #8
   19476:	e7f7      	b.n	19468 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   19478:	2007      	movs	r0, #7
   1947a:	e7f5      	b.n	19468 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1947c:	2008      	movs	r0, #8
   1947e:	e7f3      	b.n	19468 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   19480:	2008      	movs	r0, #8
   19482:	e7f1      	b.n	19468 <os_arch_os_start+0x38>
   19484:	2000dde8 	.word	0x2000dde8
   19488:	2000d9e8 	.word	0x2000d9e8
   1948c:	00019401 	.word	0x00019401

00019490 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   19490:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   19494:	4832      	ldr	r0, [pc, #200]	; (19560 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   19496:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   19498:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1949a:	f380 8814 	msr	CONTROL, r0
        ISB
   1949e:	f3bf 8f6f 	isb	sy
        BX      LR
   194a2:	4770      	bx	lr

000194a4 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   194a4:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   194a8:	4770      	bx	lr

000194aa <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   194aa:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   194ae:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   194b0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   194b4:	b951      	cbnz	r1, 194cc <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   194b6:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   194ba:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   194bc:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   194be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   194c2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   194c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   194ca:	4770      	bx	lr

000194cc <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   194cc:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   194ce:	4a25      	ldr	r2, [pc, #148]	; (19564 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   194d0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   194d2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   194d4:	d809      	bhi.n	194ea <SVC_Done>

        LDR     R4,=SVC_Table-4
   194d6:	4c24      	ldr	r4, [pc, #144]	; (19568 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   194d8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   194dc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   194e0:	47a0      	blx	r4

        MRS     R12,PSP
   194e2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   194e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000194ea <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   194ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   194ee:	4770      	bx	lr

000194f0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   194f0:	4b1e      	ldr	r3, [pc, #120]	; (1956c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   194f2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   194f4:	4b1e      	ldr	r3, [pc, #120]	; (19570 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   194f6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   194f8:	4291      	cmp	r1, r2
        IT      EQ
   194fa:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   194fc:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   194fe:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   19502:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   19506:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   19508:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1950c:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   19510:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   19514:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   19516:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1951a:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1951e:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   19522:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   19524:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   19528:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1952c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   19530:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   19534:	4770      	bx	lr

00019536 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   19536:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   19538:	f7ff fed1 	bl	192de <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1953c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   19540:	4770      	bx	lr

00019542 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   19542:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   19546:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   19548:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1954c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   19550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   19554:	4668      	mov	r0, sp
        BL      os_default_irq
   19556:	f7fe fc61 	bl	17e1c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1955a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1955e:	4770      	bx	lr
        LDR     R0,=os_flags
   19560:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   19564:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   19568:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1956c:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   19570:	2000deb0 	.word	0x2000deb0

00019574 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   19574:	b470      	push	{r4, r5, r6}
   19576:	f04f 0500 	mov.w	r5, #0
   1957a:	f022 0603 	bic.w	r6, r2, #3
   1957e:	e005      	b.n	1958c <test1>

00019580 <loop1>:
   19580:	5943      	ldr	r3, [r0, r5]
   19582:	594c      	ldr	r4, [r1, r5]
   19584:	42a3      	cmp	r3, r4
   19586:	d104      	bne.n	19592 <res1>
   19588:	f105 0504 	add.w	r5, r5, #4

0001958c <test1>:
   1958c:	42b5      	cmp	r5, r6
   1958e:	d1f7      	bne.n	19580 <loop1>
   19590:	e00d      	b.n	195ae <test2>

00019592 <res1>:
   19592:	ba1b      	rev	r3, r3
   19594:	ba24      	rev	r4, r4
   19596:	1b1b      	subs	r3, r3, r4
   19598:	bf8c      	ite	hi
   1959a:	2301      	movhi	r3, #1
   1959c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   195a0:	e009      	b.n	195b6 <done>

000195a2 <loop2>:
   195a2:	5d43      	ldrb	r3, [r0, r5]
   195a4:	5d4c      	ldrb	r4, [r1, r5]
   195a6:	1b1b      	subs	r3, r3, r4
   195a8:	d105      	bne.n	195b6 <done>
   195aa:	f105 0501 	add.w	r5, r5, #1

000195ae <test2>:
   195ae:	4295      	cmp	r5, r2
   195b0:	d1f7      	bne.n	195a2 <loop2>
   195b2:	f04f 0300 	mov.w	r3, #0

000195b6 <done>:
   195b6:	4618      	mov	r0, r3
   195b8:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   195ba:	4770      	bx	lr

000195bc <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   195bc:	e001      	b.n	195c2 <test1>

000195be <loop1>:
   195be:	588b      	ldr	r3, [r1, r2]
   195c0:	5083      	str	r3, [r0, r2]

000195c2 <test1>:
   195c2:	3a04      	subs	r2, #4
   195c4:	d5fb      	bpl.n	195be <loop1>
   195c6:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   195ca:	e001      	b.n	195d0 <test2>

000195cc <loop2>:
   195cc:	5c8b      	ldrb	r3, [r1, r2]
   195ce:	5483      	strb	r3, [r0, r2]

000195d0 <test2>:
   195d0:	3a01      	subs	r2, #1
   195d2:	d5fb      	bpl.n	195cc <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   195d4:	4770      	bx	lr

000195d6 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   195d6:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   195d8:	4605      	mov	r5, r0
   195da:	b2c9      	uxtb	r1, r1
   195dc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   195e0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   195e4:	18ab      	adds	r3, r5, r2
   195e6:	2403      	movs	r4, #3
   195e8:	4023      	ands	r3, r4
   195ea:	1ad3      	subs	r3, r2, r3
   195ec:	d40b      	bmi.n	19606 <memset+0x30>
   195ee:	e001      	b.n	195f4 <memset+0x1e>
   195f0:	3a01      	subs	r2, #1
   195f2:	54a9      	strb	r1, [r5, r2]
   195f4:	429a      	cmp	r2, r3
   195f6:	d1fb      	bne.n	195f0 <memset+0x1a>
   195f8:	e000      	b.n	195fc <memset+0x26>
   195fa:	50a9      	str	r1, [r5, r2]
   195fc:	3a04      	subs	r2, #4
   195fe:	d5fc      	bpl.n	195fa <memset+0x24>
   19600:	3204      	adds	r2, #4
   19602:	e000      	b.n	19606 <memset+0x30>
   19604:	54a9      	strb	r1, [r5, r2]
   19606:	3a01      	subs	r2, #1
   19608:	d5fc      	bpl.n	19604 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1960a:	bc30      	pop	{r4, r5}
   1960c:	4770      	bx	lr

0001960e <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1960e:	b430      	push	{r4, r5}
   19610:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   19612:	1c55      	adds	r5, r2, #1
   19614:	7813      	ldrb	r3, [r2, #0]
   19616:	1c4c      	adds	r4, r1, #1
   19618:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1961a:	1a18      	subs	r0, r3, r0
   1961c:	d103      	bne.n	19626 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1961e:	462a      	mov	r2, r5
   19620:	4621      	mov	r1, r4
		if (d || !ch)
   19622:	2b00      	cmp	r3, #0
   19624:	d1f5      	bne.n	19612 <strcmp+0x4>
			break;
	}

	return d;
}
   19626:	bc30      	pop	{r4, r5}
   19628:	4770      	bx	lr

0001962a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1962a:	4603      	mov	r3, r0
	while (*ss)
   1962c:	e000      	b.n	19630 <strlen+0x6>
		ss++;
   1962e:	3301      	adds	r3, #1
	while (*ss)
   19630:	781a      	ldrb	r2, [r3, #0]
   19632:	2a00      	cmp	r2, #0
   19634:	d1fb      	bne.n	1962e <strlen+0x4>
	return ss - s;
}
   19636:	1a18      	subs	r0, r3, r0
   19638:	4770      	bx	lr

0001963a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1963a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1963e:	b082      	sub	sp, #8
   19640:	e9cd 0100 	strd	r0, r1, [sp]
   19644:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   19646:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1964a:	2401      	movs	r4, #1
   1964c:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1964e:	e004      	b.n	1965a <ui2a+0x20>
        d *= p->base;
   19650:	fb06 f305 	mul.w	r3, r6, r5
   19654:	fba4 4506 	umull	r4, r5, r4, r6
   19658:	441d      	add	r5, r3
    while (num / d >= p->base)
   1965a:	4622      	mov	r2, r4
   1965c:	462b      	mov	r3, r5
   1965e:	e9dd 0100 	ldrd	r0, r1, [sp]
   19662:	f001 febd 	bl	1b3e0 <__aeabi_uldivmod>
   19666:	f899 6003 	ldrb.w	r6, [r9, #3]
   1966a:	2700      	movs	r7, #0
   1966c:	42b9      	cmp	r1, r7
   1966e:	bf08      	it	eq
   19670:	42b0      	cmpeq	r0, r6
   19672:	d2ed      	bcs.n	19650 <ui2a+0x16>
    int n = 0;
   19674:	f04f 0a00 	mov.w	sl, #0
   19678:	e007      	b.n	1968a <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1967a:	2330      	movs	r3, #48	; 0x30
   1967c:	441e      	add	r6, r3
   1967e:	f888 6000 	strb.w	r6, [r8]
            ++n;
   19682:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19686:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1968a:	ea54 0305 	orrs.w	r3, r4, r5
   1968e:	d02e      	beq.n	196ee <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   19690:	4622      	mov	r2, r4
   19692:	462b      	mov	r3, r5
   19694:	e9dd 0100 	ldrd	r0, r1, [sp]
   19698:	f001 fea2 	bl	1b3e0 <__aeabi_uldivmod>
   1969c:	4606      	mov	r6, r0
   1969e:	460f      	mov	r7, r1
        num %= d;
   196a0:	4622      	mov	r2, r4
   196a2:	462b      	mov	r3, r5
   196a4:	e9dd 0100 	ldrd	r0, r1, [sp]
   196a8:	f001 fe9a 	bl	1b3e0 <__aeabi_uldivmod>
   196ac:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   196b0:	f899 2003 	ldrb.w	r2, [r9, #3]
   196b4:	2300      	movs	r3, #0
   196b6:	4620      	mov	r0, r4
   196b8:	4629      	mov	r1, r5
   196ba:	f001 fe91 	bl	1b3e0 <__aeabi_uldivmod>
   196be:	4604      	mov	r4, r0
   196c0:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   196c2:	f1ba 0f00 	cmp.w	sl, #0
   196c6:	d105      	bne.n	196d4 <ui2a+0x9a>
   196c8:	ea56 0307 	orrs.w	r3, r6, r7
   196cc:	d102      	bne.n	196d4 <ui2a+0x9a>
   196ce:	ea54 0305 	orrs.w	r3, r4, r5
   196d2:	d1da      	bne.n	1968a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   196d4:	2f00      	cmp	r7, #0
   196d6:	bf08      	it	eq
   196d8:	2e0a      	cmpeq	r6, #10
   196da:	d3ce      	bcc.n	1967a <ui2a+0x40>
   196dc:	f899 3002 	ldrb.w	r3, [r9, #2]
   196e0:	f013 0f04 	tst.w	r3, #4
   196e4:	d001      	beq.n	196ea <ui2a+0xb0>
   196e6:	2337      	movs	r3, #55	; 0x37
   196e8:	e7c8      	b.n	1967c <ui2a+0x42>
   196ea:	2357      	movs	r3, #87	; 0x57
   196ec:	e7c6      	b.n	1967c <ui2a+0x42>
        }
    }
    *bf = 0;
   196ee:	2300      	movs	r3, #0
   196f0:	f888 3000 	strb.w	r3, [r8]
}
   196f4:	b002      	add	sp, #8
   196f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000196fa <i2a>:

static void i2a(long long int num, struct param *p)
{
   196fa:	b508      	push	{r3, lr}
    if (num < 0) {
   196fc:	2800      	cmp	r0, #0
   196fe:	f171 0300 	sbcs.w	r3, r1, #0
   19702:	db02      	blt.n	1970a <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   19704:	f7ff ff99 	bl	1963a <ui2a>
}
   19708:	bd08      	pop	{r3, pc}
        num = -num;
   1970a:	4240      	negs	r0, r0
   1970c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   19710:	7893      	ldrb	r3, [r2, #2]
   19712:	f043 0301 	orr.w	r3, r3, #1
   19716:	7093      	strb	r3, [r2, #2]
   19718:	e7f4      	b.n	19704 <i2a+0xa>

0001971a <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1971a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1971e:	b2db      	uxtb	r3, r3
   19720:	2b09      	cmp	r3, #9
   19722:	d90b      	bls.n	1973c <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   19724:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19728:	b2db      	uxtb	r3, r3
   1972a:	2b05      	cmp	r3, #5
   1972c:	d908      	bls.n	19740 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1972e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19732:	b2db      	uxtb	r3, r3
   19734:	2b05      	cmp	r3, #5
   19736:	d805      	bhi.n	19744 <a2d+0x2a>
        return ch - 'A' + 10;
   19738:	3837      	subs	r0, #55	; 0x37
   1973a:	4770      	bx	lr
        return ch - '0';
   1973c:	3830      	subs	r0, #48	; 0x30
   1973e:	4770      	bx	lr
        return ch - 'a' + 10;
   19740:	3857      	subs	r0, #87	; 0x57
   19742:	4770      	bx	lr
    else
        return -1;
   19744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19748:	4770      	bx	lr

0001974a <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1974a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1974e:	4605      	mov	r5, r0
   19750:	4688      	mov	r8, r1
   19752:	4617      	mov	r7, r2
   19754:	4699      	mov	r9, r3
    const char *p = *src;
   19756:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   19758:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1975a:	4628      	mov	r0, r5
   1975c:	f7ff ffdd 	bl	1971a <a2d>
   19760:	2800      	cmp	r0, #0
   19762:	db06      	blt.n	19772 <a2i+0x28>
        if (digit > base)
   19764:	42b8      	cmp	r0, r7
   19766:	dc04      	bgt.n	19772 <a2i+0x28>
            break;
        num = num * base + digit;
   19768:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1976c:	7825      	ldrb	r5, [r4, #0]
   1976e:	3401      	adds	r4, #1
   19770:	e7f3      	b.n	1975a <a2i+0x10>
    }
    *src = p;
   19772:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   19776:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1977a:	4628      	mov	r0, r5
   1977c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019780 <putf>:

static int putf(FILE *putp, char c)
{
   19780:	b500      	push	{lr}
   19782:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   19784:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   19788:	6803      	ldr	r3, [r0, #0]
   1978a:	681b      	ldr	r3, [r3, #0]
   1978c:	b14b      	cbz	r3, 197a2 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1978e:	2201      	movs	r2, #1
   19790:	f10d 0107 	add.w	r1, sp, #7
   19794:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   19796:	2801      	cmp	r0, #1
   19798:	d005      	beq.n	197a6 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1979a:	2000      	movs	r0, #0
    else
        return 1;
}
   1979c:	b003      	add	sp, #12
   1979e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   197a2:	2000      	movs	r0, #0
   197a4:	e7fa      	b.n	1979c <putf+0x1c>
        return 1;
   197a6:	2001      	movs	r0, #1
   197a8:	e7f8      	b.n	1979c <putf+0x1c>
	...

000197ac <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   197ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197b0:	4606      	mov	r6, r0
   197b2:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   197b4:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   197b6:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   197b8:	e001      	b.n	197be <putchw+0x12>
        n--;
   197ba:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   197bc:	4613      	mov	r3, r2
   197be:	1c5a      	adds	r2, r3, #1
   197c0:	781b      	ldrb	r3, [r3, #0]
   197c2:	b10b      	cbz	r3, 197c8 <putchw+0x1c>
   197c4:	2c00      	cmp	r4, #0
   197c6:	dcf8      	bgt.n	197ba <putchw+0xe>
    if (p->sign)
   197c8:	78bb      	ldrb	r3, [r7, #2]
   197ca:	f013 0f01 	tst.w	r3, #1
   197ce:	d000      	beq.n	197d2 <putchw+0x26>
        n--;
   197d0:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   197d2:	887b      	ldrh	r3, [r7, #2]
   197d4:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   197d8:	b29b      	uxth	r3, r3
   197da:	f241 0202 	movw	r2, #4098	; 0x1002
   197de:	4293      	cmp	r3, r2
   197e0:	d01c      	beq.n	1981c <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   197e2:	f640 0202 	movw	r2, #2050	; 0x802
   197e6:	4293      	cmp	r3, r2
   197e8:	d01a      	beq.n	19820 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   197ea:	683b      	ldr	r3, [r7, #0]
   197ec:	4d35      	ldr	r5, [pc, #212]	; (198c4 <putchw+0x118>)
   197ee:	401d      	ands	r5, r3
   197f0:	b1f5      	cbz	r5, 19830 <putchw+0x84>
    unsigned written = 0;
   197f2:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   197f4:	78bb      	ldrb	r3, [r7, #2]
   197f6:	f013 0f01 	tst.w	r3, #1
   197fa:	d11f      	bne.n	1983c <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   197fc:	887b      	ldrh	r3, [r7, #2]
   197fe:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19802:	b29b      	uxth	r3, r3
   19804:	f241 0202 	movw	r2, #4098	; 0x1002
   19808:	4293      	cmp	r3, r2
   1980a:	d01d      	beq.n	19848 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1980c:	f640 0202 	movw	r2, #2050	; 0x802
   19810:	4293      	cmp	r3, r2
   19812:	d02a      	beq.n	1986a <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   19814:	787b      	ldrb	r3, [r7, #1]
   19816:	bba3      	cbnz	r3, 19882 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   19818:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1981a:	e03d      	b.n	19898 <putchw+0xec>
        n -= 2;
   1981c:	3c02      	subs	r4, #2
   1981e:	e7e4      	b.n	197ea <putchw+0x3e>
        n--;
   19820:	3c01      	subs	r4, #1
   19822:	e7e2      	b.n	197ea <putchw+0x3e>
            written += putf(putp, ' ');
   19824:	2120      	movs	r1, #32
   19826:	4630      	mov	r0, r6
   19828:	f7ff ffaa 	bl	19780 <putf>
   1982c:	4405      	add	r5, r0
        while (n-- > 0)
   1982e:	4644      	mov	r4, r8
   19830:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19834:	2c00      	cmp	r4, #0
   19836:	dcf5      	bgt.n	19824 <putchw+0x78>
   19838:	4644      	mov	r4, r8
   1983a:	e7db      	b.n	197f4 <putchw+0x48>
        written += putf(putp, '-');
   1983c:	212d      	movs	r1, #45	; 0x2d
   1983e:	4630      	mov	r0, r6
   19840:	f7ff ff9e 	bl	19780 <putf>
   19844:	4405      	add	r5, r0
   19846:	e7d9      	b.n	197fc <putchw+0x50>
        written += putf(putp, '0');
   19848:	2130      	movs	r1, #48	; 0x30
   1984a:	4630      	mov	r0, r6
   1984c:	f7ff ff98 	bl	19780 <putf>
   19850:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   19852:	78bb      	ldrb	r3, [r7, #2]
   19854:	f013 0f04 	tst.w	r3, #4
   19858:	d005      	beq.n	19866 <putchw+0xba>
   1985a:	2158      	movs	r1, #88	; 0x58
   1985c:	4630      	mov	r0, r6
   1985e:	f7ff ff8f 	bl	19780 <putf>
   19862:	4405      	add	r5, r0
   19864:	e7d6      	b.n	19814 <putchw+0x68>
   19866:	2178      	movs	r1, #120	; 0x78
   19868:	e7f8      	b.n	1985c <putchw+0xb0>
        written += putf(putp, '0');
   1986a:	2130      	movs	r1, #48	; 0x30
   1986c:	4630      	mov	r0, r6
   1986e:	f7ff ff87 	bl	19780 <putf>
   19872:	4405      	add	r5, r0
   19874:	e7ce      	b.n	19814 <putchw+0x68>
            written += putf(putp, '0');
   19876:	2130      	movs	r1, #48	; 0x30
   19878:	4630      	mov	r0, r6
   1987a:	f7ff ff81 	bl	19780 <putf>
   1987e:	4405      	add	r5, r0
        while (n-- > 0)
   19880:	4644      	mov	r4, r8
   19882:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19886:	2c00      	cmp	r4, #0
   19888:	dcf5      	bgt.n	19876 <putchw+0xca>
   1988a:	4644      	mov	r4, r8
   1988c:	e7c4      	b.n	19818 <putchw+0x6c>
        written += putf(putp, ch);
   1988e:	4630      	mov	r0, r6
   19890:	f7ff ff76 	bl	19780 <putf>
   19894:	4405      	add	r5, r0
    while ((ch = *bf++))
   19896:	4643      	mov	r3, r8
   19898:	f103 0801 	add.w	r8, r3, #1
   1989c:	7819      	ldrb	r1, [r3, #0]
   1989e:	2900      	cmp	r1, #0
   198a0:	d1f5      	bne.n	1988e <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   198a2:	78bb      	ldrb	r3, [r7, #2]
   198a4:	f013 0f08 	tst.w	r3, #8
   198a8:	d106      	bne.n	198b8 <putchw+0x10c>
   198aa:	e008      	b.n	198be <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   198ac:	2120      	movs	r1, #32
   198ae:	4630      	mov	r0, r6
   198b0:	f7ff ff66 	bl	19780 <putf>
   198b4:	4405      	add	r5, r0
        while (n-- > 0)
   198b6:	463c      	mov	r4, r7
   198b8:	1e67      	subs	r7, r4, #1
   198ba:	2c00      	cmp	r4, #0
   198bc:	dcf6      	bgt.n	198ac <putchw+0x100>
    }
    
    return written;
}
   198be:	4628      	mov	r0, r5
   198c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198c4:	0008ff00 	.word	0x0008ff00

000198c8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   198c8:	b160      	cbz	r0, 198e4 <intarg+0x1c>
   198ca:	2801      	cmp	r0, #1
   198cc:	d017      	beq.n	198fe <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   198ce:	bb19      	cbnz	r1, 19918 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   198d0:	6813      	ldr	r3, [r2, #0]
   198d2:	3307      	adds	r3, #7
   198d4:	f023 0307 	bic.w	r3, r3, #7
   198d8:	f103 0108 	add.w	r1, r3, #8
   198dc:	6011      	str	r1, [r2, #0]
   198de:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   198e2:	4770      	bx	lr
        if (sign) {
   198e4:	b129      	cbz	r1, 198f2 <intarg+0x2a>
            val = va_arg(*va, int);
   198e6:	6813      	ldr	r3, [r2, #0]
   198e8:	1d19      	adds	r1, r3, #4
   198ea:	6011      	str	r1, [r2, #0]
   198ec:	6818      	ldr	r0, [r3, #0]
   198ee:	17c1      	asrs	r1, r0, #31
   198f0:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   198f2:	6813      	ldr	r3, [r2, #0]
   198f4:	1d19      	adds	r1, r3, #4
   198f6:	6011      	str	r1, [r2, #0]
   198f8:	6818      	ldr	r0, [r3, #0]
   198fa:	2100      	movs	r1, #0
   198fc:	4770      	bx	lr
        if (sign) {
   198fe:	b129      	cbz	r1, 1990c <intarg+0x44>
            val = va_arg(*va, long);
   19900:	6813      	ldr	r3, [r2, #0]
   19902:	1d19      	adds	r1, r3, #4
   19904:	6011      	str	r1, [r2, #0]
   19906:	6818      	ldr	r0, [r3, #0]
   19908:	17c1      	asrs	r1, r0, #31
   1990a:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1990c:	6813      	ldr	r3, [r2, #0]
   1990e:	1d19      	adds	r1, r3, #4
   19910:	6011      	str	r1, [r2, #0]
   19912:	6818      	ldr	r0, [r3, #0]
   19914:	2100      	movs	r1, #0
   19916:	4770      	bx	lr
            val = va_arg(*va, long long);
   19918:	6813      	ldr	r3, [r2, #0]
   1991a:	3307      	adds	r3, #7
   1991c:	f023 0307 	bic.w	r3, r3, #7
   19920:	f103 0108 	add.w	r1, r3, #8
   19924:	6011      	str	r1, [r2, #0]
   19926:	e9d3 0100 	ldrd	r0, r1, [r3]
   1992a:	4770      	bx	lr

0001992c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1992c:	b570      	push	{r4, r5, r6, lr}
   1992e:	b08a      	sub	sp, #40	; 0x28
   19930:	4605      	mov	r5, r0
   19932:	9101      	str	r1, [sp, #4]
   19934:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   19936:	ab02      	add	r3, sp, #8
   19938:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1993a:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1993c:	9b01      	ldr	r3, [sp, #4]
   1993e:	1c5a      	adds	r2, r3, #1
   19940:	9201      	str	r2, [sp, #4]
   19942:	7819      	ldrb	r1, [r3, #0]
   19944:	2900      	cmp	r1, #0
   19946:	f000 811c 	beq.w	19b82 <tfp_format+0x256>
        if (ch != '%') {
   1994a:	2925      	cmp	r1, #37	; 0x25
   1994c:	d004      	beq.n	19958 <tfp_format+0x2c>
            written += putf(putp, ch);
   1994e:	4628      	mov	r0, r5
   19950:	f7ff ff16 	bl	19780 <putf>
   19954:	4404      	add	r4, r0
   19956:	e7f1      	b.n	1993c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   19958:	2200      	movs	r2, #0
   1995a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1995e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   19962:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   19966:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1996a:	f362 0382 	bfi	r3, r2, #2, #1
   1996e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   19972:	9b01      	ldr	r3, [sp, #4]
   19974:	1c5a      	adds	r2, r3, #1
   19976:	9201      	str	r2, [sp, #4]
   19978:	7818      	ldrb	r0, [r3, #0]
   1997a:	b128      	cbz	r0, 19988 <tfp_format+0x5c>
                switch (ch) {
   1997c:	282d      	cmp	r0, #45	; 0x2d
   1997e:	d04e      	beq.n	19a1e <tfp_format+0xf2>
   19980:	2830      	cmp	r0, #48	; 0x30
   19982:	d03c      	beq.n	199fe <tfp_format+0xd2>
   19984:	2823      	cmp	r0, #35	; 0x23
   19986:	d043      	beq.n	19a10 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   19988:	282a      	cmp	r0, #42	; 0x2a
   1998a:	d052      	beq.n	19a32 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1998c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19990:	b2db      	uxtb	r3, r3
   19992:	2b09      	cmp	r3, #9
   19994:	d961      	bls.n	19a5a <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   19996:	286c      	cmp	r0, #108	; 0x6c
   19998:	d065      	beq.n	19a66 <tfp_format+0x13a>
            lng = 0;
   1999a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1999c:	287a      	cmp	r0, #122	; 0x7a
   1999e:	d06f      	beq.n	19a80 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   199a0:	2869      	cmp	r0, #105	; 0x69
   199a2:	f000 808e 	beq.w	19ac2 <tfp_format+0x196>
   199a6:	d970      	bls.n	19a8a <tfp_format+0x15e>
   199a8:	2873      	cmp	r0, #115	; 0x73
   199aa:	f000 80dd 	beq.w	19b68 <tfp_format+0x23c>
   199ae:	f200 8099 	bhi.w	19ae4 <tfp_format+0x1b8>
   199b2:	286f      	cmp	r0, #111	; 0x6f
   199b4:	f000 80c7 	beq.w	19b46 <tfp_format+0x21a>
   199b8:	2870      	cmp	r0, #112	; 0x70
   199ba:	d1bf      	bne.n	1993c <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   199bc:	9b00      	ldr	r3, [sp, #0]
   199be:	1d1a      	adds	r2, r3, #4
   199c0:	9200      	str	r2, [sp, #0]
   199c2:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   199c4:	2310      	movs	r3, #16
   199c6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   199ca:	aa08      	add	r2, sp, #32
   199cc:	2100      	movs	r1, #0
   199ce:	f7ff fe34 	bl	1963a <ui2a>
                p.width = 2 * sizeof(void*);
   199d2:	2308      	movs	r3, #8
   199d4:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   199d8:	2301      	movs	r3, #1
   199da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   199de:	2130      	movs	r1, #48	; 0x30
   199e0:	4628      	mov	r0, r5
   199e2:	f7ff fecd 	bl	19780 <putf>
   199e6:	4404      	add	r4, r0
                written += putf(putp, 'x');
   199e8:	2178      	movs	r1, #120	; 0x78
   199ea:	4628      	mov	r0, r5
   199ec:	f7ff fec8 	bl	19780 <putf>
   199f0:	4404      	add	r4, r0
                written += putchw(putp, &p);
   199f2:	a908      	add	r1, sp, #32
   199f4:	4628      	mov	r0, r5
   199f6:	f7ff fed9 	bl	197ac <putchw>
   199fa:	4404      	add	r4, r0
                break;
   199fc:	e79e      	b.n	1993c <tfp_format+0x10>
                    if (!p.left) {
   199fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19a02:	f013 0f08 	tst.w	r3, #8
   19a06:	d1b4      	bne.n	19972 <tfp_format+0x46>
                        p.lz = 1;
   19a08:	2301      	movs	r3, #1
   19a0a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19a0e:	e7b0      	b.n	19972 <tfp_format+0x46>
                    p.alt = 1;
   19a10:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19a14:	f043 0302 	orr.w	r3, r3, #2
   19a18:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   19a1c:	e7a9      	b.n	19972 <tfp_format+0x46>
                    p.left = 1;
   19a1e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19a22:	f043 0308 	orr.w	r3, r3, #8
   19a26:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   19a2a:	2300      	movs	r3, #0
   19a2c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19a30:	e79f      	b.n	19972 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   19a32:	466a      	mov	r2, sp
   19a34:	2101      	movs	r1, #1
   19a36:	2000      	movs	r0, #0
   19a38:	f7ff ff46 	bl	198c8 <intarg>
                if (i > UCHAR_MAX) {
   19a3c:	28ff      	cmp	r0, #255	; 0xff
   19a3e:	dd07      	ble.n	19a50 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   19a40:	23ff      	movs	r3, #255	; 0xff
   19a42:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   19a46:	9b01      	ldr	r3, [sp, #4]
   19a48:	1c5a      	adds	r2, r3, #1
   19a4a:	9201      	str	r2, [sp, #4]
   19a4c:	7818      	ldrb	r0, [r3, #0]
   19a4e:	e7a2      	b.n	19996 <tfp_format+0x6a>
                } else if (i > 0) {
   19a50:	2800      	cmp	r0, #0
   19a52:	ddf8      	ble.n	19a46 <tfp_format+0x11a>
                    p.width = i;
   19a54:	f88d 0020 	strb.w	r0, [sp, #32]
   19a58:	e7f5      	b.n	19a46 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   19a5a:	ab08      	add	r3, sp, #32
   19a5c:	220a      	movs	r2, #10
   19a5e:	a901      	add	r1, sp, #4
   19a60:	f7ff fe73 	bl	1974a <a2i>
   19a64:	e797      	b.n	19996 <tfp_format+0x6a>
                ch = *(fmt++);
   19a66:	9b01      	ldr	r3, [sp, #4]
   19a68:	1c5a      	adds	r2, r3, #1
   19a6a:	9201      	str	r2, [sp, #4]
   19a6c:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   19a6e:	286c      	cmp	r0, #108	; 0x6c
   19a70:	d001      	beq.n	19a76 <tfp_format+0x14a>
                lng = 1;
   19a72:	2601      	movs	r6, #1
   19a74:	e792      	b.n	1999c <tfp_format+0x70>
                    ch = *(fmt++);
   19a76:	1c9a      	adds	r2, r3, #2
   19a78:	9201      	str	r2, [sp, #4]
   19a7a:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   19a7c:	2602      	movs	r6, #2
   19a7e:	e78d      	b.n	1999c <tfp_format+0x70>
                ch = *(fmt++);
   19a80:	9b01      	ldr	r3, [sp, #4]
   19a82:	1c5a      	adds	r2, r3, #1
   19a84:	9201      	str	r2, [sp, #4]
   19a86:	7818      	ldrb	r0, [r3, #0]
   19a88:	e78a      	b.n	199a0 <tfp_format+0x74>
            switch (ch) {
   19a8a:	2858      	cmp	r0, #88	; 0x58
   19a8c:	d040      	beq.n	19b10 <tfp_format+0x1e4>
   19a8e:	d80a      	bhi.n	19aa6 <tfp_format+0x17a>
   19a90:	2800      	cmp	r0, #0
   19a92:	d076      	beq.n	19b82 <tfp_format+0x256>
   19a94:	2825      	cmp	r0, #37	; 0x25
   19a96:	f47f af51 	bne.w	1993c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   19a9a:	4601      	mov	r1, r0
   19a9c:	4628      	mov	r0, r5
   19a9e:	f7ff fe6f 	bl	19780 <putf>
   19aa2:	4404      	add	r4, r0
                break;
   19aa4:	e74a      	b.n	1993c <tfp_format+0x10>
            switch (ch) {
   19aa6:	2863      	cmp	r0, #99	; 0x63
   19aa8:	d108      	bne.n	19abc <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   19aaa:	9b00      	ldr	r3, [sp, #0]
   19aac:	1d1a      	adds	r2, r3, #4
   19aae:	9200      	str	r2, [sp, #0]
   19ab0:	7819      	ldrb	r1, [r3, #0]
   19ab2:	4628      	mov	r0, r5
   19ab4:	f7ff fe64 	bl	19780 <putf>
   19ab8:	4404      	add	r4, r0
                break;
   19aba:	e73f      	b.n	1993c <tfp_format+0x10>
            switch (ch) {
   19abc:	2864      	cmp	r0, #100	; 0x64
   19abe:	f47f af3d 	bne.w	1993c <tfp_format+0x10>
                p.base = 10;
   19ac2:	230a      	movs	r3, #10
   19ac4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   19ac8:	466a      	mov	r2, sp
   19aca:	2101      	movs	r1, #1
   19acc:	4630      	mov	r0, r6
   19ace:	f7ff fefb 	bl	198c8 <intarg>
   19ad2:	aa08      	add	r2, sp, #32
   19ad4:	f7ff fe11 	bl	196fa <i2a>
                written += putchw(putp, &p);
   19ad8:	a908      	add	r1, sp, #32
   19ada:	4628      	mov	r0, r5
   19adc:	f7ff fe66 	bl	197ac <putchw>
   19ae0:	4404      	add	r4, r0
                break;
   19ae2:	e72b      	b.n	1993c <tfp_format+0x10>
            switch (ch) {
   19ae4:	2875      	cmp	r0, #117	; 0x75
   19ae6:	d110      	bne.n	19b0a <tfp_format+0x1de>
                p.base = 10;
   19ae8:	230a      	movs	r3, #10
   19aea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19aee:	466a      	mov	r2, sp
   19af0:	2100      	movs	r1, #0
   19af2:	4630      	mov	r0, r6
   19af4:	f7ff fee8 	bl	198c8 <intarg>
   19af8:	aa08      	add	r2, sp, #32
   19afa:	f7ff fd9e 	bl	1963a <ui2a>
                written += putchw(putp, &p);
   19afe:	a908      	add	r1, sp, #32
   19b00:	4628      	mov	r0, r5
   19b02:	f7ff fe53 	bl	197ac <putchw>
   19b06:	4404      	add	r4, r0
                break;
   19b08:	e718      	b.n	1993c <tfp_format+0x10>
            switch (ch) {
   19b0a:	2878      	cmp	r0, #120	; 0x78
   19b0c:	f47f af16 	bne.w	1993c <tfp_format+0x10>
                p.base = 16;
   19b10:	2310      	movs	r3, #16
   19b12:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   19b16:	2858      	cmp	r0, #88	; 0x58
   19b18:	bf14      	ite	ne
   19b1a:	2300      	movne	r3, #0
   19b1c:	2301      	moveq	r3, #1
   19b1e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   19b22:	f363 0282 	bfi	r2, r3, #2, #1
   19b26:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   19b2a:	466a      	mov	r2, sp
   19b2c:	2100      	movs	r1, #0
   19b2e:	4630      	mov	r0, r6
   19b30:	f7ff feca 	bl	198c8 <intarg>
   19b34:	aa08      	add	r2, sp, #32
   19b36:	f7ff fd80 	bl	1963a <ui2a>
                written += putchw(putp, &p);
   19b3a:	a908      	add	r1, sp, #32
   19b3c:	4628      	mov	r0, r5
   19b3e:	f7ff fe35 	bl	197ac <putchw>
   19b42:	4404      	add	r4, r0
                break;
   19b44:	e6fa      	b.n	1993c <tfp_format+0x10>
                p.base = 8;
   19b46:	2308      	movs	r3, #8
   19b48:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19b4c:	466a      	mov	r2, sp
   19b4e:	2100      	movs	r1, #0
   19b50:	4630      	mov	r0, r6
   19b52:	f7ff feb9 	bl	198c8 <intarg>
   19b56:	aa08      	add	r2, sp, #32
   19b58:	f7ff fd6f 	bl	1963a <ui2a>
                written += putchw(putp, &p);
   19b5c:	a908      	add	r1, sp, #32
   19b5e:	4628      	mov	r0, r5
   19b60:	f7ff fe24 	bl	197ac <putchw>
   19b64:	4404      	add	r4, r0
                break;
   19b66:	e6e9      	b.n	1993c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   19b68:	9b00      	ldr	r3, [sp, #0]
   19b6a:	1d1a      	adds	r2, r3, #4
   19b6c:	9200      	str	r2, [sp, #0]
   19b6e:	681b      	ldr	r3, [r3, #0]
   19b70:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   19b72:	a908      	add	r1, sp, #32
   19b74:	4628      	mov	r0, r5
   19b76:	f7ff fe19 	bl	197ac <putchw>
   19b7a:	4404      	add	r4, r0
                p.bf = bf;
   19b7c:	ab02      	add	r3, sp, #8
   19b7e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   19b80:	e6dc      	b.n	1993c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   19b82:	4620      	mov	r0, r4
   19b84:	b00a      	add	sp, #40	; 0x28
   19b86:	bd70      	pop	{r4, r5, r6, pc}

00019b88 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   19b88:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   19b8a:	f7ff fecf 	bl	1992c <tfp_format>
}
   19b8e:	bd08      	pop	{r3, pc}

00019b90 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   19b90:	b40f      	push	{r0, r1, r2, r3}
   19b92:	b500      	push	{lr}
   19b94:	b083      	sub	sp, #12
   19b96:	aa04      	add	r2, sp, #16
   19b98:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   19b9c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   19b9e:	4b04      	ldr	r3, [pc, #16]	; (19bb0 <printf+0x20>)
   19ba0:	6818      	ldr	r0, [r3, #0]
   19ba2:	f7ff fff1 	bl	19b88 <vfprintf>
    va_end(va);
    return rv;
}
   19ba6:	b003      	add	sp, #12
   19ba8:	f85d eb04 	ldr.w	lr, [sp], #4
   19bac:	b004      	add	sp, #16
   19bae:	4770      	bx	lr
   19bb0:	0001f37c 	.word	0x0001f37c

00019bb4 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   19bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bb6:	b085      	sub	sp, #20
   19bb8:	4605      	mov	r5, r0
   19bba:	460c      	mov	r4, r1
   19bbc:	4616      	mov	r6, r2
   19bbe:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   19bc0:	460a      	mov	r2, r1
   19bc2:	4601      	mov	r1, r0
   19bc4:	4668      	mov	r0, sp
   19bc6:	f000 f835 	bl	19c34 <fmemopen_w>
    tfp_format(f, fmt, va);
   19bca:	463a      	mov	r2, r7
   19bcc:	4631      	mov	r1, r6
   19bce:	f7ff fead 	bl	1992c <tfp_format>
    if (size > 0) {
   19bd2:	b12c      	cbz	r4, 19be0 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   19bd4:	9b02      	ldr	r3, [sp, #8]
   19bd6:	42a3      	cmp	r3, r4
   19bd8:	d305      	bcc.n	19be6 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   19bda:	3c01      	subs	r4, #1
   19bdc:	2300      	movs	r3, #0
   19bde:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   19be0:	9802      	ldr	r0, [sp, #8]
   19be2:	b005      	add	sp, #20
   19be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   19be6:	9b01      	ldr	r3, [sp, #4]
   19be8:	2200      	movs	r2, #0
   19bea:	701a      	strb	r2, [r3, #0]
   19bec:	e7f8      	b.n	19be0 <vsnprintf+0x2c>
	...

00019bf0 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   19bf0:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   19bf2:	460a      	mov	r2, r1
   19bf4:	4601      	mov	r1, r0
   19bf6:	4b02      	ldr	r3, [pc, #8]	; (19c00 <vprintf+0x10>)
   19bf8:	6818      	ldr	r0, [r3, #0]
   19bfa:	f7ff ffc5 	bl	19b88 <vfprintf>
}
   19bfe:	bd08      	pop	{r3, pc}
   19c00:	0001f37c 	.word	0x0001f37c

00019c04 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   19c04:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   19c06:	2500      	movs	r5, #0
    
    while (n--)
   19c08:	e000      	b.n	19c0c <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   19c0a:	4622      	mov	r2, r4
    while (n--)
   19c0c:	1e54      	subs	r4, r2, #1
   19c0e:	b16a      	cbz	r2, 19c2c <memfile_write+0x28>
        f->bytes_written++;
   19c10:	6883      	ldr	r3, [r0, #8]
   19c12:	3301      	adds	r3, #1
   19c14:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   19c16:	68c2      	ldr	r2, [r0, #12]
   19c18:	4293      	cmp	r3, r2
   19c1a:	d8f6      	bhi.n	19c0a <memfile_write+0x6>
            *f->buffer++ = *bp++;
   19c1c:	6843      	ldr	r3, [r0, #4]
   19c1e:	1c5a      	adds	r2, r3, #1
   19c20:	6042      	str	r2, [r0, #4]
   19c22:	780a      	ldrb	r2, [r1, #0]
   19c24:	701a      	strb	r2, [r3, #0]
            i++;
   19c26:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   19c28:	3101      	adds	r1, #1
   19c2a:	e7ee      	b.n	19c0a <memfile_write+0x6>
        }
    }
    
    return i;
}
   19c2c:	4628      	mov	r0, r5
   19c2e:	bc30      	pop	{r4, r5}
   19c30:	4770      	bx	lr
	...

00019c34 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   19c34:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   19c36:	4c04      	ldr	r4, [pc, #16]	; (19c48 <fmemopen_w+0x14>)
   19c38:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   19c3a:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   19c3c:	2100      	movs	r1, #0
   19c3e:	6081      	str	r1, [r0, #8]
    storage->size = size;
   19c40:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   19c42:	f85d 4b04 	ldr.w	r4, [sp], #4
   19c46:	4770      	bx	lr
   19c48:	0001f374 	.word	0x0001f374

00019c4c <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   19c4c:	2000      	movs	r0, #0
   19c4e:	4770      	bx	lr

00019c50 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   19c50:	b510      	push	{r4, lr}
   19c52:	4608      	mov	r0, r1
   19c54:	4614      	mov	r4, r2
    console_write(bp, n);
   19c56:	4611      	mov	r1, r2
   19c58:	f7fd f9b8 	bl	16fcc <console_write>
    return n;
}
   19c5c:	4620      	mov	r0, r4
   19c5e:	bd10      	pop	{r4, pc}

00019c60 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   19c60:	b508      	push	{r3, lr}
    sysinit();
   19c62:	f7fd fa1b 	bl	1709c <sysinit_start>
   19c66:	f000 f81b 	bl	19ca0 <sysinit_app>
   19c6a:	f7fd fa1d 	bl	170a8 <sysinit_end>
}
   19c6e:	bd08      	pop	{r3, pc}

00019c70 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   19c70:	b570      	push	{r4, r5, r6, lr}
   19c72:	b082      	sub	sp, #8
   19c74:	460c      	mov	r4, r1
   19c76:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   19c78:	b29d      	uxth	r5, r3
   19c7a:	9b07      	ldr	r3, [sp, #28]
   19c7c:	9300      	str	r3, [sp, #0]
   19c7e:	4603      	mov	r3, r0
   19c80:	9a06      	ldr	r2, [sp, #24]
   19c82:	4629      	mov	r1, r5
   19c84:	4620      	mov	r0, r4
   19c86:	f7fe fdeb 	bl	18860 <os_mempool_init>
    if (rc != 0) {
   19c8a:	b108      	cbz	r0, 19c90 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   19c8c:	b002      	add	sp, #8
   19c8e:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   19c90:	462b      	mov	r3, r5
   19c92:	9a06      	ldr	r2, [sp, #24]
   19c94:	b292      	uxth	r2, r2
   19c96:	4621      	mov	r1, r4
   19c98:	4630      	mov	r0, r6
   19c9a:	f7fe fc96 	bl	185ca <os_mbuf_pool_init>
   19c9e:	e7f5      	b.n	19c8c <mem_init_mbuf_pool+0x1c>

00019ca0 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   19ca0:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   19ca2:	f7fe f9f3 	bl	1808c <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   19ca6:	f001 f985 	bl	1afb4 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   19caa:	f7fd f9a3 	bl	16ff4 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   19cae:	f001 fac7 	bl	1b240 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   19cb2:	f001 f9b7 	bl	1b024 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   19cb6:	f001 f8e1 	bl	1ae7c <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   19cba:	f001 f8f1 	bl	1aea0 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   19cbe:	f001 f8f0 	bl	1aea2 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   19cc2:	f001 f8ef 	bl	1aea4 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   19cc6:	f001 f8ee 	bl	1aea6 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   19cca:	f001 f8ed 	bl	1aea8 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   19cce:	f000 fbd1 	bl	1a474 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   19cd2:	f000 fd1f 	bl	1a714 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   19cd6:	f000 ff3d 	bl	1ab54 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   19cda:	f000 feb3 	bl	1aa44 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   19cde:	f000 fe3d 	bl	1a95c <init_sensor_coap>
}
   19ce2:	bd08      	pop	{r3, pc}

00019ce4 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   19ce4:	b908      	cbnz	r0, 19cea <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   19ce6:	4802      	ldr	r0, [pc, #8]	; (19cf0 <hal_bsp_flash_dev+0xc>)
   19ce8:	4770      	bx	lr
    }

    return NULL;
   19cea:	2000      	movs	r0, #0
}
   19cec:	4770      	bx	lr
   19cee:	bf00      	nop
   19cf0:	0001f380 	.word	0x0001f380

00019cf4 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   19cf4:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   19cf6:	f7ee fa63 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   19cfa:	f000 fbb3 	bl	1a464 <nrf52_periph_create>
}
   19cfe:	bd08      	pop	{r3, pc}

00019d00 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   19d00:	2300      	movs	r3, #0
   19d02:	4a07      	ldr	r2, [pc, #28]	; (19d20 <nrf52k_flash_wait_ready+0x20>)
   19d04:	4293      	cmp	r3, r2
   19d06:	dc06      	bgt.n	19d16 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   19d08:	4a06      	ldr	r2, [pc, #24]	; (19d24 <nrf52k_flash_wait_ready+0x24>)
   19d0a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   19d0e:	2a01      	cmp	r2, #1
   19d10:	d004      	beq.n	19d1c <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   19d12:	3301      	adds	r3, #1
   19d14:	e7f5      	b.n	19d02 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   19d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d1a:	4770      	bx	lr
            return 0;
   19d1c:	2000      	movs	r0, #0
}
   19d1e:	4770      	bx	lr
   19d20:	0001869f 	.word	0x0001869f
   19d24:	4001e000 	.word	0x4001e000

00019d28 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   19d28:	b538      	push	{r3, r4, r5, lr}
   19d2a:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   19d2c:	f7ff ffe8 	bl	19d00 <nrf52k_flash_wait_ready>
   19d30:	b9f0      	cbnz	r0, 19d70 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19d32:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19d36:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   19d38:	4b0f      	ldr	r3, [pc, #60]	; (19d78 <nrf52k_flash_erase_sector+0x50>)
   19d3a:	2202      	movs	r2, #2
   19d3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   19d40:	f7ff ffde 	bl	19d00 <nrf52k_flash_wait_ready>
   19d44:	b148      	cbz	r0, 19d5a <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   19d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   19d4a:	4a0b      	ldr	r2, [pc, #44]	; (19d78 <nrf52k_flash_erase_sector+0x50>)
   19d4c:	2100      	movs	r1, #0
   19d4e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   19d52:	b904      	cbnz	r4, 19d56 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   19d54:	b662      	cpsie	i
    return rc;
}
   19d56:	4618      	mov	r0, r3
   19d58:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   19d5a:	4b07      	ldr	r3, [pc, #28]	; (19d78 <nrf52k_flash_erase_sector+0x50>)
   19d5c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   19d60:	f7ff ffce 	bl	19d00 <nrf52k_flash_wait_ready>
   19d64:	4603      	mov	r3, r0
   19d66:	2800      	cmp	r0, #0
   19d68:	d0ef      	beq.n	19d4a <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   19d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d6e:	e7ec      	b.n	19d4a <nrf52k_flash_erase_sector+0x22>
        return -1;
   19d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d74:	e7ef      	b.n	19d56 <nrf52k_flash_erase_sector+0x2e>
   19d76:	bf00      	nop
   19d78:	4001e000 	.word	0x4001e000

00019d7c <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   19d7c:	2000      	movs	r0, #0
   19d7e:	4770      	bx	lr

00019d80 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   19d80:	297f      	cmp	r1, #127	; 0x7f
   19d82:	dc06      	bgt.n	19d92 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   19d84:	0309      	lsls	r1, r1, #12
   19d86:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   19d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19d8c:	601a      	str	r2, [r3, #0]
}
   19d8e:	2000      	movs	r0, #0
   19d90:	4770      	bx	lr
{
   19d92:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   19d94:	2300      	movs	r3, #0
   19d96:	461a      	mov	r2, r3
   19d98:	4619      	mov	r1, r3
   19d9a:	4618      	mov	r0, r3
   19d9c:	f7fe f818 	bl	17dd0 <__assert_func>

00019da0 <nrf52k_flash_write>:
{
   19da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19da4:	b082      	sub	sp, #8
   19da6:	460d      	mov	r5, r1
   19da8:	4616      	mov	r6, r2
   19daa:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   19dac:	f7ff ffa8 	bl	19d00 <nrf52k_flash_wait_ready>
   19db0:	2800      	cmp	r0, #0
   19db2:	d158      	bne.n	19e66 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19db4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19db8:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   19dba:	4b2c      	ldr	r3, [pc, #176]	; (19e6c <nrf52k_flash_write+0xcc>)
   19dbc:	2201      	movs	r2, #1
   19dbe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   19dc2:	f015 0803 	ands.w	r8, r5, #3
   19dc6:	d10b      	bne.n	19de0 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   19dc8:	2c03      	cmp	r4, #3
   19dca:	d925      	bls.n	19e18 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   19dcc:	f7ff ff98 	bl	19d00 <nrf52k_flash_wait_ready>
   19dd0:	2800      	cmp	r0, #0
   19dd2:	d139      	bne.n	19e48 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   19dd4:	f856 3b04 	ldr.w	r3, [r6], #4
   19dd8:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   19ddc:	3c04      	subs	r4, #4
   19dde:	e7f3      	b.n	19dc8 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   19de0:	f7ff ff8e 	bl	19d00 <nrf52k_flash_wait_ready>
   19de4:	bb68      	cbnz	r0, 19e42 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   19de6:	f025 0a03 	bic.w	sl, r5, #3
   19dea:	f8da 3000 	ldr.w	r3, [sl]
   19dee:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   19df0:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   19df4:	45a1      	cmp	r9, r4
   19df6:	d900      	bls.n	19dfa <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   19df8:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   19dfa:	464a      	mov	r2, r9
   19dfc:	4631      	mov	r1, r6
   19dfe:	ab01      	add	r3, sp, #4
   19e00:	eb03 0008 	add.w	r0, r3, r8
   19e04:	f7ff fbda 	bl	195bc <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   19e08:	9b01      	ldr	r3, [sp, #4]
   19e0a:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   19e0e:	444d      	add	r5, r9
        num_bytes -= cnt;
   19e10:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   19e14:	444e      	add	r6, r9
   19e16:	e7d7      	b.n	19dc8 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   19e18:	b164      	cbz	r4, 19e34 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   19e1a:	682b      	ldr	r3, [r5, #0]
   19e1c:	a802      	add	r0, sp, #8
   19e1e:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   19e22:	4622      	mov	r2, r4
   19e24:	4631      	mov	r1, r6
   19e26:	f7ff fbc9 	bl	195bc <memcpy>
        if (nrf52k_flash_wait_ready()) {
   19e2a:	f7ff ff69 	bl	19d00 <nrf52k_flash_wait_ready>
   19e2e:	b9b8      	cbnz	r0, 19e60 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   19e30:	9b01      	ldr	r3, [sp, #4]
   19e32:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   19e34:	f7ff ff64 	bl	19d00 <nrf52k_flash_wait_ready>
   19e38:	4603      	mov	r3, r0
   19e3a:	b138      	cbz	r0, 19e4c <nrf52k_flash_write+0xac>
        rc = -1;
   19e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e40:	e004      	b.n	19e4c <nrf52k_flash_write+0xac>
    int rc = -1;
   19e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e46:	e001      	b.n	19e4c <nrf52k_flash_write+0xac>
   19e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   19e4c:	4a07      	ldr	r2, [pc, #28]	; (19e6c <nrf52k_flash_write+0xcc>)
   19e4e:	2100      	movs	r1, #0
   19e50:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   19e54:	b907      	cbnz	r7, 19e58 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   19e56:	b662      	cpsie	i
}
   19e58:	4618      	mov	r0, r3
   19e5a:	b002      	add	sp, #8
   19e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   19e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e64:	e7f2      	b.n	19e4c <nrf52k_flash_write+0xac>
        return -1;
   19e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e6a:	e7f5      	b.n	19e58 <nrf52k_flash_write+0xb8>
   19e6c:	4001e000 	.word	0x4001e000

00019e70 <nrf52k_flash_read>:
{
   19e70:	b508      	push	{r3, lr}
   19e72:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   19e74:	461a      	mov	r2, r3
   19e76:	f7ff fba1 	bl	195bc <memcpy>
}
   19e7a:	2000      	movs	r0, #0
   19e7c:	bd08      	pop	{r3, pc}
	...

00019e80 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   19e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   19e82:	f7ff fa3b 	bl	192fc <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   19e86:	4b31      	ldr	r3, [pc, #196]	; (19f4c <nrf52_timer_handler+0xcc>)
   19e88:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   19e8c:	4b30      	ldr	r3, [pc, #192]	; (19f50 <nrf52_timer_handler+0xd0>)
   19e8e:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   19e90:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   19e94:	d225      	bcs.n	19ee2 <nrf52_timer_handler+0x62>
   19e96:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   19e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   19e9c:	d227      	bcs.n	19eee <nrf52_timer_handler+0x6e>
    result = x - y;
   19e9e:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   19ea0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   19ea4:	d129      	bne.n	19efa <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   19ea6:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   19eaa:	4f29      	ldr	r7, [pc, #164]	; (19f50 <nrf52_timer_handler+0xd0>)
   19eac:	683c      	ldr	r4, [r7, #0]
   19eae:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   19eb2:	4628      	mov	r0, r5
   19eb4:	f7ff f9b0 	bl	19218 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   19eb8:	4b24      	ldr	r3, [pc, #144]	; (19f4c <nrf52_timer_handler+0xcc>)
   19eba:	2200      	movs	r2, #0
   19ebc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19ec0:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   19ec2:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19ec4:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   19ec8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19ecc:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   19ece:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   19ed0:	f7ff fa1d 	bl	1930e <os_arch_in_critical>
   19ed4:	bb28      	cbnz	r0, 19f22 <nrf52_timer_handler+0xa2>
   19ed6:	2300      	movs	r3, #0
   19ed8:	461a      	mov	r2, r3
   19eda:	4619      	mov	r1, r3
   19edc:	4618      	mov	r0, r3
   19ede:	f7fd ff77 	bl	17dd0 <__assert_func>
    assert(x <= 0xffffff);
   19ee2:	2300      	movs	r3, #0
   19ee4:	461a      	mov	r2, r3
   19ee6:	4619      	mov	r1, r3
   19ee8:	4618      	mov	r0, r3
   19eea:	f7fd ff71 	bl	17dd0 <__assert_func>
    assert(y <= 0xffffff);
   19eee:	2300      	movs	r3, #0
   19ef0:	461a      	mov	r2, r3
   19ef2:	4619      	mov	r1, r3
   19ef4:	4618      	mov	r0, r3
   19ef6:	f7fd ff6b 	bl	17dd0 <__assert_func>
        return (result | 0xff800000);
   19efa:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   19efe:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   19f02:	e7d2      	b.n	19eaa <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   19f04:	2300      	movs	r3, #0
   19f06:	461a      	mov	r2, r3
   19f08:	4619      	mov	r1, r3
   19f0a:	4618      	mov	r0, r3
   19f0c:	f7fd ff60 	bl	17dd0 <__assert_func>
        return (result | 0xff800000);
   19f10:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   19f14:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   19f18:	2a02      	cmp	r2, #2
   19f1a:	dc13      	bgt.n	19f44 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   19f1c:	4a0c      	ldr	r2, [pc, #48]	; (19f50 <nrf52_timer_handler+0xd0>)
   19f1e:	6814      	ldr	r4, [r2, #0]
   19f20:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   19f22:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   19f26:	4a09      	ldr	r2, [pc, #36]	; (19f4c <nrf52_timer_handler+0xcc>)
   19f28:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   19f2c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   19f30:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   19f34:	d2e6      	bcs.n	19f04 <nrf52_timer_handler+0x84>
    result = x - y;
   19f36:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   19f38:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   19f3c:	d1e8      	bne.n	19f10 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   19f3e:	f3c2 0216 	ubfx	r2, r2, #0, #23
   19f42:	e7e9      	b.n	19f18 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   19f44:	4630      	mov	r0, r6
   19f46:	f7ff f9df 	bl	19308 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   19f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f4c:	40011000 	.word	0x40011000
   19f50:	2000dec4 	.word	0x2000dec4

00019f54 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   19f54:	b538      	push	{r3, r4, r5, lr}
   19f56:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   19f58:	f7ff f9d9 	bl	1930e <os_arch_in_critical>
   19f5c:	b1a0      	cbz	r0, 19f88 <os_tick_idle+0x34>

    if (ticks > 0) {
   19f5e:	2d00      	cmp	r5, #0
   19f60:	d038      	beq.n	19fd4 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   19f62:	4b20      	ldr	r3, [pc, #128]	; (19fe4 <os_tick_idle+0x90>)
   19f64:	685b      	ldr	r3, [r3, #4]
   19f66:	42ab      	cmp	r3, r5
   19f68:	d200      	bcs.n	19f6c <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   19f6a:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   19f6c:	4b1d      	ldr	r3, [pc, #116]	; (19fe4 <os_tick_idle+0x90>)
   19f6e:	689c      	ldr	r4, [r3, #8]
   19f70:	681a      	ldr	r2, [r3, #0]
   19f72:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   19f76:	f7ff f9ca 	bl	1930e <os_arch_in_critical>
   19f7a:	b9d0      	cbnz	r0, 19fb2 <os_tick_idle+0x5e>
   19f7c:	2300      	movs	r3, #0
   19f7e:	461a      	mov	r2, r3
   19f80:	4619      	mov	r1, r3
   19f82:	4618      	mov	r0, r3
   19f84:	f7fd ff24 	bl	17dd0 <__assert_func>
    OS_ASSERT_CRITICAL();
   19f88:	2300      	movs	r3, #0
   19f8a:	461a      	mov	r2, r3
   19f8c:	4619      	mov	r1, r3
   19f8e:	4618      	mov	r0, r3
   19f90:	f7fd ff1e 	bl	17dd0 <__assert_func>
    assert(y <= 0xffffff);
   19f94:	2300      	movs	r3, #0
   19f96:	461a      	mov	r2, r3
   19f98:	4619      	mov	r1, r3
   19f9a:	4618      	mov	r0, r3
   19f9c:	f7fd ff18 	bl	17dd0 <__assert_func>
        return (result | 0xff800000);
   19fa0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   19fa4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   19fa8:	2b02      	cmp	r3, #2
   19faa:	dc13      	bgt.n	19fd4 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   19fac:	4b0d      	ldr	r3, [pc, #52]	; (19fe4 <os_tick_idle+0x90>)
   19fae:	681c      	ldr	r4, [r3, #0]
   19fb0:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   19fb2:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   19fb6:	4b0c      	ldr	r3, [pc, #48]	; (19fe8 <os_tick_idle+0x94>)
   19fb8:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   19fbc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   19fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   19fc4:	d2e6      	bcs.n	19f94 <os_tick_idle+0x40>
    result = x - y;
   19fc6:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   19fc8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   19fcc:	d1e8      	bne.n	19fa0 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   19fce:	f3c3 0316 	ubfx	r3, r3, #0, #23
   19fd2:	e7e9      	b.n	19fa8 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   19fd4:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   19fd8:	bf30      	wfi

    if (ticks > 0) {
   19fda:	b905      	cbnz	r5, 19fde <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   19fdc:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   19fde:	f7ff ff4f 	bl	19e80 <nrf52_timer_handler>
}
   19fe2:	e7fb      	b.n	19fdc <os_tick_idle+0x88>
   19fe4:	2000dec4 	.word	0x2000dec4
   19fe8:	40011000 	.word	0x40011000

00019fec <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   19fec:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   19fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19ff2:	fbb3 f3f0 	udiv	r3, r3, r0
   19ff6:	fb00 f303 	mul.w	r3, r0, r3
   19ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19ffe:	d136      	bne.n	1a06e <os_tick_init+0x82>
   1a000:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a002:	4d1e      	ldr	r5, [pc, #120]	; (1a07c <os_tick_init+0x90>)
   1a004:	2600      	movs	r6, #0
   1a006:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a00c:	fbb3 f0f0 	udiv	r0, r3, r0
   1a010:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a016:	fbb3 f0f0 	udiv	r0, r3, r0
   1a01a:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a01c:	f7ff f96e 	bl	192fc <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a020:	0164      	lsls	r4, r4, #5
   1a022:	b2e4      	uxtb	r4, r4
   1a024:	4b16      	ldr	r3, [pc, #88]	; (1a080 <os_tick_init+0x94>)
   1a026:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a02a:	4a16      	ldr	r2, [pc, #88]	; (1a084 <os_tick_init+0x98>)
   1a02c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a02e:	4916      	ldr	r1, [pc, #88]	; (1a088 <os_tick_init+0x9c>)
   1a030:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a034:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a038:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a03a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a03e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a042:	2201      	movs	r2, #1
   1a044:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a046:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a04c:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a050:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a054:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a058:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a05c:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a060:	6829      	ldr	r1, [r5, #0]
   1a062:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a066:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a068:	f7ff f94e 	bl	19308 <os_arch_restore_sr>
}
   1a06c:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a06e:	2300      	movs	r3, #0
   1a070:	461a      	mov	r2, r3
   1a072:	4619      	mov	r1, r3
   1a074:	4618      	mov	r0, r3
   1a076:	f7fd feab 	bl	17dd0 <__assert_func>
   1a07a:	bf00      	nop
   1a07c:	2000dec4 	.word	0x2000dec4
   1a080:	e000e100 	.word	0xe000e100
   1a084:	e000ed00 	.word	0xe000ed00
   1a088:	00019e81 	.word	0x00019e81

0001a08c <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1a08c:	2301      	movs	r3, #1
   1a08e:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1a090:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1a094:	4770      	bx	lr
	...

0001a098 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1a098:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1a09a:	7883      	ldrb	r3, [r0, #2]
   1a09c:	b393      	cbz	r3, 1a104 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a09e:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a0a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a0a4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1a0a8:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1a0aa:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1a0ae:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a0b2:	b11d      	cbz	r5, 1a0bc <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1a0b4:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1a0b8:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1a0bc:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1a0be:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1a0c0:	2b02      	cmp	r3, #2
   1a0c2:	dc0e      	bgt.n	1a0e2 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a0c4:	7842      	ldrb	r2, [r0, #1]
   1a0c6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a0c8:	2b00      	cmp	r3, #0
   1a0ca:	db15      	blt.n	1a0f8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a0cc:	f002 021f 	and.w	r2, r2, #31
   1a0d0:	095b      	lsrs	r3, r3, #5
   1a0d2:	2101      	movs	r1, #1
   1a0d4:	fa01 f202 	lsl.w	r2, r1, r2
   1a0d8:	3340      	adds	r3, #64	; 0x40
   1a0da:	491b      	ldr	r1, [pc, #108]	; (1a148 <nrf_timer_set_ocmp+0xb0>)
   1a0dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1a0e0:	e00a      	b.n	1a0f8 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1a0e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a0e6:	d208      	bcs.n	1a0fa <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1a0e8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a0ec:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a0f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a0f4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1a0f8:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1a0fa:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1a0fe:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1a102:	e7f5      	b.n	1a0f0 <nrf_timer_set_ocmp+0x58>
   1a104:	460d      	mov	r5, r1
   1a106:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1a108:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a10a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a10e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1a112:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a116:	2200      	movs	r2, #0
   1a118:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a11c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1a120:	f7ff ffb4 	bl	1a08c <nrf_read_timer_cntr>
   1a124:	1b40      	subs	r0, r0, r5
   1a126:	2800      	cmp	r0, #0
   1a128:	dbe6      	blt.n	1a0f8 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a12a:	7862      	ldrb	r2, [r4, #1]
   1a12c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a12e:	2b00      	cmp	r3, #0
   1a130:	dbe2      	blt.n	1a0f8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a132:	f002 021f 	and.w	r2, r2, #31
   1a136:	095b      	lsrs	r3, r3, #5
   1a138:	2101      	movs	r1, #1
   1a13a:	fa01 f202 	lsl.w	r2, r1, r2
   1a13e:	3340      	adds	r3, #64	; 0x40
   1a140:	4901      	ldr	r1, [pc, #4]	; (1a148 <nrf_timer_set_ocmp+0xb0>)
   1a142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1a146:	e7d7      	b.n	1a0f8 <nrf_timer_set_ocmp+0x60>
   1a148:	e000e100 	.word	0xe000e100

0001a14c <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a14c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a150:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a154:	4770      	bx	lr

0001a156 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a156:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a15a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a15e:	4770      	bx	lr

0001a160 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1a160:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a162:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a164:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a168:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1a16a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1a16c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1a170:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a174:	b1ad      	cbz	r5, 1a1a2 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1a176:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1a17a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1a17c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1a180:	2500      	movs	r5, #0
   1a182:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a186:	7840      	ldrb	r0, [r0, #1]
   1a188:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1a18a:	42aa      	cmp	r2, r5
   1a18c:	db09      	blt.n	1a1a2 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a18e:	f000 001f 	and.w	r0, r0, #31
   1a192:	0952      	lsrs	r2, r2, #5
   1a194:	2501      	movs	r5, #1
   1a196:	fa05 f000 	lsl.w	r0, r5, r0
   1a19a:	3240      	adds	r2, #64	; 0x40
   1a19c:	4d04      	ldr	r5, [pc, #16]	; (1a1b0 <hal_timer_read_bsptimer+0x50>)
   1a19e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1a1a2:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a1a6:	b904      	cbnz	r4, 1a1aa <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1a1a8:	b662      	cpsie	i

    return tcntr;
}
   1a1aa:	bc30      	pop	{r4, r5}
   1a1ac:	4770      	bx	lr
   1a1ae:	bf00      	nop
   1a1b0:	e000e100 	.word	0xe000e100

0001a1b4 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1a1b4:	b570      	push	{r4, r5, r6, lr}
   1a1b6:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a1b8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a1bc:	b672      	cpsid	i
   1a1be:	e013      	b.n	1a1e8 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a1c0:	6928      	ldr	r0, [r5, #16]
   1a1c2:	f7ff ff63 	bl	1a08c <nrf_read_timer_cntr>
            delta = 0;
   1a1c6:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1a1c8:	68e3      	ldr	r3, [r4, #12]
   1a1ca:	1ac0      	subs	r0, r0, r3
   1a1cc:	4290      	cmp	r0, r2
   1a1ce:	db19      	blt.n	1a204 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a1d0:	6923      	ldr	r3, [r4, #16]
   1a1d2:	b1a3      	cbz	r3, 1a1fe <hal_timer_chk_queue+0x4a>
   1a1d4:	6962      	ldr	r2, [r4, #20]
   1a1d6:	615a      	str	r2, [r3, #20]
   1a1d8:	6963      	ldr	r3, [r4, #20]
   1a1da:	6922      	ldr	r2, [r4, #16]
   1a1dc:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1a1de:	2300      	movs	r3, #0
   1a1e0:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1a1e2:	6863      	ldr	r3, [r4, #4]
   1a1e4:	68a0      	ldr	r0, [r4, #8]
   1a1e6:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1a1e8:	696c      	ldr	r4, [r5, #20]
   1a1ea:	b15c      	cbz	r4, 1a204 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1a1ec:	78ab      	ldrb	r3, [r5, #2]
   1a1ee:	2b00      	cmp	r3, #0
   1a1f0:	d0e6      	beq.n	1a1c0 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1a1f2:	4628      	mov	r0, r5
   1a1f4:	f7ff ffb4 	bl	1a160 <hal_timer_read_bsptimer>
            delta = -3;
   1a1f8:	f06f 0202 	mvn.w	r2, #2
   1a1fc:	e7e4      	b.n	1a1c8 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a1fe:	6963      	ldr	r3, [r4, #20]
   1a200:	61ab      	str	r3, [r5, #24]
   1a202:	e7e9      	b.n	1a1d8 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1a204:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1a206:	b133      	cbz	r3, 1a216 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1a208:	68d9      	ldr	r1, [r3, #12]
   1a20a:	4628      	mov	r0, r5
   1a20c:	f7ff ff44 	bl	1a098 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a210:	b906      	cbnz	r6, 1a214 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1a212:	b662      	cpsie	i
}
   1a214:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1a216:	78ab      	ldrb	r3, [r5, #2]
   1a218:	b11b      	cbz	r3, 1a222 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1a21a:	6928      	ldr	r0, [r5, #16]
   1a21c:	f7ff ff9b 	bl	1a156 <nrf_rtc_disable_ocmp>
   1a220:	e7f6      	b.n	1a210 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1a222:	6928      	ldr	r0, [r5, #16]
   1a224:	f7ff ff92 	bl	1a14c <nrf_timer_disable_ocmp>
   1a228:	e7f2      	b.n	1a210 <hal_timer_chk_queue+0x5c>

0001a22a <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1a22a:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1a22c:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a22e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1a232:	b113      	cbz	r3, 1a23a <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a234:	2300      	movs	r3, #0
   1a236:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1a23a:	6883      	ldr	r3, [r0, #8]
   1a23c:	3301      	adds	r3, #1
   1a23e:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1a240:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1a244:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1a248:	d100      	bne.n	1a24c <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1a24a:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1a24c:	f7ff ffb2 	bl	1a1b4 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a250:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1a254:	e7f9      	b.n	1a24a <hal_timer_irq_handler+0x20>
	...

0001a258 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1a258:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1a25a:	4802      	ldr	r0, [pc, #8]	; (1a264 <nrf52_timer0_irq_handler+0xc>)
   1a25c:	f7ff ffe5 	bl	1a22a <hal_timer_irq_handler>
}
   1a260:	bd08      	pop	{r3, pc}
   1a262:	bf00      	nop
   1a264:	2000ded0 	.word	0x2000ded0

0001a268 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a268:	2805      	cmp	r0, #5
   1a26a:	dc1c      	bgt.n	1a2a6 <hal_timer_init+0x3e>
   1a26c:	4b12      	ldr	r3, [pc, #72]	; (1a2b8 <hal_timer_init+0x50>)
   1a26e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a272:	b1d3      	cbz	r3, 1a2aa <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1a274:	781a      	ldrb	r2, [r3, #0]
   1a276:	b9d2      	cbnz	r2, 1a2ae <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1a278:	b9d8      	cbnz	r0, 1a2b2 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1a27a:	4a10      	ldr	r2, [pc, #64]	; (1a2bc <hal_timer_init+0x54>)
   1a27c:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1a27e:	2208      	movs	r2, #8
   1a280:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a282:	4b0f      	ldr	r3, [pc, #60]	; (1a2c0 <hal_timer_init+0x58>)
   1a284:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1a28c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a290:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a294:	22e0      	movs	r2, #224	; 0xe0
   1a296:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a29a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1a29e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a2a0:	4a08      	ldr	r2, [pc, #32]	; (1a2c4 <hal_timer_init+0x5c>)
   1a2a2:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1a2a4:	4770      	bx	lr

err:
    return rc;
   1a2a6:	2016      	movs	r0, #22
   1a2a8:	4770      	bx	lr
   1a2aa:	2016      	movs	r0, #22
   1a2ac:	4770      	bx	lr
   1a2ae:	2016      	movs	r0, #22
   1a2b0:	4770      	bx	lr
   1a2b2:	2016      	movs	r0, #22
}
   1a2b4:	4770      	bx	lr
   1a2b6:	bf00      	nop
   1a2b8:	0001f3b4 	.word	0x0001f3b4
   1a2bc:	40008000 	.word	0x40008000
   1a2c0:	e000e100 	.word	0xe000e100
   1a2c4:	0001a259 	.word	0x0001a259

0001a2c8 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a2c8:	2805      	cmp	r0, #5
   1a2ca:	dc65      	bgt.n	1a398 <hal_timer_config+0xd0>
   1a2cc:	4b39      	ldr	r3, [pc, #228]	; (1a3b4 <hal_timer_config+0xec>)
   1a2ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a2d2:	2800      	cmp	r0, #0
   1a2d4:	d062      	beq.n	1a39c <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1a2d6:	4b38      	ldr	r3, [pc, #224]	; (1a3b8 <hal_timer_config+0xf0>)
   1a2d8:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a2dc:	7803      	ldrb	r3, [r0, #0]
   1a2de:	2b00      	cmp	r3, #0
   1a2e0:	d15e      	bne.n	1a3a0 <hal_timer_config+0xd8>
   1a2e2:	2900      	cmp	r1, #0
   1a2e4:	d05e      	beq.n	1a3a4 <hal_timer_config+0xdc>
   1a2e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a2ea:	d85d      	bhi.n	1a3a8 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1a2ec:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a2ee:	2a00      	cmp	r2, #0
   1a2f0:	d05c      	beq.n	1a3ac <hal_timer_config+0xe4>
{
   1a2f2:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1a2f4:	2901      	cmp	r1, #1
   1a2f6:	d013      	beq.n	1a320 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a2f8:	2301      	movs	r3, #1
   1a2fa:	2b09      	cmp	r3, #9
   1a2fc:	d810      	bhi.n	1a320 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1a2fe:	2201      	movs	r2, #1
   1a300:	409a      	lsls	r2, r3
   1a302:	428a      	cmp	r2, r1
   1a304:	d202      	bcs.n	1a30c <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a306:	3301      	adds	r3, #1
   1a308:	b2db      	uxtb	r3, r3
   1a30a:	e7f6      	b.n	1a2fa <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1a30c:	1e5c      	subs	r4, r3, #1
   1a30e:	2501      	movs	r5, #1
   1a310:	fa05 f404 	lsl.w	r4, r5, r4
   1a314:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1a316:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1a318:	428c      	cmp	r4, r1
   1a31a:	d201      	bcs.n	1a320 <hal_timer_config+0x58>
                    prescaler -= 1;
   1a31c:	3b01      	subs	r3, #1
   1a31e:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1a320:	4a25      	ldr	r2, [pc, #148]	; (1a3b8 <hal_timer_config+0xf0>)
   1a322:	411a      	asrs	r2, r3
   1a324:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1a326:	2201      	movs	r2, #1
   1a328:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a32a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a32e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1a330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a334:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1a338:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1a33c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1a340:	d00c      	beq.n	1a35c <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1a342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a346:	2100      	movs	r1, #0
   1a348:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1a34c:	2101      	movs	r1, #1
   1a34e:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1a350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a354:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1a358:	2a00      	cmp	r2, #0
   1a35a:	d0f9      	beq.n	1a350 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1a35c:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1a35e:	2101      	movs	r1, #1
   1a360:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1a362:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1a364:	2500      	movs	r5, #0
   1a366:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1a36a:	2503      	movs	r5, #3
   1a36c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1a370:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1a374:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1a376:	7842      	ldrb	r2, [r0, #1]
   1a378:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a37a:	2b00      	cmp	r3, #0
   1a37c:	db07      	blt.n	1a38e <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a37e:	f002 021f 	and.w	r2, r2, #31
   1a382:	095b      	lsrs	r3, r3, #5
   1a384:	fa01 f202 	lsl.w	r2, r1, r2
   1a388:	490c      	ldr	r1, [pc, #48]	; (1a3bc <hal_timer_config+0xf4>)
   1a38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1a38e:	b97c      	cbnz	r4, 1a3b0 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a390:	b662      	cpsie	i

    return 0;
   1a392:	2000      	movs	r0, #0

err:
    return rc;
}
   1a394:	bc30      	pop	{r4, r5}
   1a396:	4770      	bx	lr
    return rc;
   1a398:	2016      	movs	r0, #22
   1a39a:	4770      	bx	lr
   1a39c:	2016      	movs	r0, #22
   1a39e:	4770      	bx	lr
   1a3a0:	2016      	movs	r0, #22
   1a3a2:	4770      	bx	lr
   1a3a4:	2016      	movs	r0, #22
   1a3a6:	4770      	bx	lr
   1a3a8:	2016      	movs	r0, #22
   1a3aa:	4770      	bx	lr
   1a3ac:	2016      	movs	r0, #22
}
   1a3ae:	4770      	bx	lr
    return 0;
   1a3b0:	2000      	movs	r0, #0
   1a3b2:	e7ef      	b.n	1a394 <hal_timer_config+0xcc>
   1a3b4:	0001f3b4 	.word	0x0001f3b4
   1a3b8:	00f42400 	.word	0x00f42400
   1a3bc:	e000e100 	.word	0xe000e100

0001a3c0 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1a3c0:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a3c2:	2805      	cmp	r0, #5
   1a3c4:	dc0c      	bgt.n	1a3e0 <hal_timer_read+0x20>
   1a3c6:	4b09      	ldr	r3, [pc, #36]	; (1a3ec <hal_timer_read+0x2c>)
   1a3c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a3cc:	b140      	cbz	r0, 1a3e0 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1a3ce:	7883      	ldrb	r3, [r0, #2]
   1a3d0:	b91b      	cbnz	r3, 1a3da <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a3d2:	6900      	ldr	r0, [r0, #16]
   1a3d4:	f7ff fe5a 	bl	1a08c <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1a3d8:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1a3da:	f7ff fec1 	bl	1a160 <hal_timer_read_bsptimer>
   1a3de:	e7fb      	b.n	1a3d8 <hal_timer_read+0x18>
    assert(0);
   1a3e0:	2300      	movs	r3, #0
   1a3e2:	461a      	mov	r2, r3
   1a3e4:	4619      	mov	r1, r3
   1a3e6:	4618      	mov	r0, r3
   1a3e8:	f7fd fcf2 	bl	17dd0 <__assert_func>
   1a3ec:	0001f3b4 	.word	0x0001f3b4

0001a3f0 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1a3f0:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1a3f2:	2100      	movs	r1, #0
   1a3f4:	4608      	mov	r0, r1
   1a3f6:	f7ff ff37 	bl	1a268 <hal_timer_init>
    assert(rc == 0);
   1a3fa:	b920      	cbnz	r0, 1a406 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1a3fc:	4808      	ldr	r0, [pc, #32]	; (1a420 <nrf52_periph_create_timers+0x30>)
   1a3fe:	f7fd ff11 	bl	18224 <os_cputime_init>
    assert(rc == 0);
   1a402:	b930      	cbnz	r0, 1a412 <nrf52_periph_create_timers+0x22>
#endif
}
   1a404:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a406:	2300      	movs	r3, #0
   1a408:	461a      	mov	r2, r3
   1a40a:	4619      	mov	r1, r3
   1a40c:	4618      	mov	r0, r3
   1a40e:	f7fd fcdf 	bl	17dd0 <__assert_func>
    assert(rc == 0);
   1a412:	2300      	movs	r3, #0
   1a414:	461a      	mov	r2, r3
   1a416:	4619      	mov	r1, r3
   1a418:	4618      	mov	r0, r3
   1a41a:	f7fd fcd9 	bl	17dd0 <__assert_func>
   1a41e:	bf00      	nop
   1a420:	000f4240 	.word	0x000f4240

0001a424 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1a424:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1a426:	4906      	ldr	r1, [pc, #24]	; (1a440 <nrf52_periph_create_i2c+0x1c>)
   1a428:	2001      	movs	r0, #1
   1a42a:	f7fd f82b 	bl	17484 <hal_i2c_init>
    assert(rc == 0);
   1a42e:	b900      	cbnz	r0, 1a432 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1a430:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a432:	2300      	movs	r3, #0
   1a434:	461a      	mov	r2, r3
   1a436:	4619      	mov	r1, r3
   1a438:	4618      	mov	r0, r3
   1a43a:	f7fd fcc9 	bl	17dd0 <__assert_func>
   1a43e:	bf00      	nop
   1a440:	0001f3cc 	.word	0x0001f3cc

0001a444 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1a444:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1a446:	2200      	movs	r2, #0
   1a448:	4905      	ldr	r1, [pc, #20]	; (1a460 <nrf52_periph_create_spi+0x1c>)
   1a44a:	4610      	mov	r0, r2
   1a44c:	f7fd fb4e 	bl	17aec <hal_spi_init>
    assert(rc == 0);
   1a450:	b900      	cbnz	r0, 1a454 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1a452:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a454:	2300      	movs	r3, #0
   1a456:	461a      	mov	r2, r3
   1a458:	4619      	mov	r1, r3
   1a45a:	4618      	mov	r0, r3
   1a45c:	f7fd fcb8 	bl	17dd0 <__assert_func>
   1a460:	0001f3d8 	.word	0x0001f3d8

0001a464 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1a464:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1a466:	f7ff ffc3 	bl	1a3f0 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1a46a:	f7ff ffdb 	bl	1a424 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1a46e:	f7ff ffe9 	bl	1a444 <nrf52_periph_create_spi>
}
   1a472:	bd08      	pop	{r3, pc}

0001a474 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1a474:	4770      	bx	lr
	...

0001a478 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1a478:	4b08      	ldr	r3, [pc, #32]	; (1a49c <sensor_mgr_remove+0x24>)
   1a47a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a47c:	4282      	cmp	r2, r0
   1a47e:	d104      	bne.n	1a48a <sensor_mgr_remove+0x12>
   1a480:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1a484:	631a      	str	r2, [r3, #48]	; 0x30
   1a486:	4770      	bx	lr
   1a488:	461a      	mov	r2, r3
   1a48a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a48e:	4283      	cmp	r3, r0
   1a490:	d1fa      	bne.n	1a488 <sensor_mgr_remove+0x10>
   1a492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a496:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1a49a:	4770      	bx	lr
   1a49c:	2000def0 	.word	0x2000def0

0001a4a0 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1a4a0:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1a4a2:	6a03      	ldr	r3, [r0, #32]
   1a4a4:	b993      	cbnz	r3, 1a4cc <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a4a6:	4b15      	ldr	r3, [pc, #84]	; (1a4fc <sensor_mgr_insert+0x5c>)
   1a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a4aa:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a4ac:	e002      	b.n	1a4b4 <sensor_mgr_insert+0x14>
            prev = cursor;
   1a4ae:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a4b4:	2b00      	cmp	r3, #0
   1a4b6:	d1fa      	bne.n	1a4ae <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1a4b8:	b1c9      	cbz	r1, 1a4ee <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1a4ba:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1a4be:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1a4c2:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1a4c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a4ca:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a4cc:	4b0b      	ldr	r3, [pc, #44]	; (1a4fc <sensor_mgr_insert+0x5c>)
   1a4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a4d0:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a4d2:	2b00      	cmp	r3, #0
   1a4d4:	d0f0      	beq.n	1a4b8 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1a4d6:	6a1a      	ldr	r2, [r3, #32]
   1a4d8:	2a00      	cmp	r2, #0
   1a4da:	d0ed      	beq.n	1a4b8 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1a4dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1a4de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1a4e0:	1b12      	subs	r2, r2, r4
   1a4e2:	2a00      	cmp	r2, #0
   1a4e4:	dbe8      	blt.n	1a4b8 <sensor_mgr_insert+0x18>
        prev = cursor;
   1a4e6:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a4ec:	e7f1      	b.n	1a4d2 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1a4ee:	4b03      	ldr	r3, [pc, #12]	; (1a4fc <sensor_mgr_insert+0x5c>)
   1a4f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a4f2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1a4f6:	6318      	str	r0, [r3, #48]	; 0x30
   1a4f8:	e7e5      	b.n	1a4c6 <sensor_mgr_insert+0x26>
   1a4fa:	bf00      	nop
   1a4fc:	2000def0 	.word	0x2000def0

0001a500 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1a500:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1a502:	fab0 f080 	clz	r0, r0
   1a506:	0940      	lsrs	r0, r0, #5
   1a508:	4770      	bx	lr
	...

0001a50c <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1a50c:	4b01      	ldr	r3, [pc, #4]	; (1a514 <sensor_mgr_evq_set+0x8>)
   1a50e:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1a510:	4770      	bx	lr
   1a512:	bf00      	nop
   1a514:	2000def0 	.word	0x2000def0

0001a518 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1a518:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1a51c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a520:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a524:	ea02 0b04 	and.w	fp, r2, r4
   1a528:	ea03 0c05 	and.w	ip, r3, r5
   1a52c:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1a530:	ea0b 0200 	and.w	r2, fp, r0
   1a534:	ea0c 0301 	and.w	r3, ip, r1
   1a538:	4313      	orrs	r3, r2
}
   1a53a:	bf14      	ite	ne
   1a53c:	2001      	movne	r0, #1
   1a53e:	2000      	moveq	r0, #0
   1a540:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1a544:	4770      	bx	lr

0001a546 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1a546:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a54a:	b083      	sub	sp, #12
   1a54c:	4605      	mov	r5, r0
   1a54e:	4689      	mov	r9, r1
   1a550:	4690      	mov	r8, r2
   1a552:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1a556:	790b      	ldrb	r3, [r1, #4]
   1a558:	2b01      	cmp	r3, #1
   1a55a:	d013      	beq.n	1a584 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1a55c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1a55e:	e000      	b.n	1a562 <sensor_read_data_func+0x1c>
   1a560:	6924      	ldr	r4, [r4, #16]
   1a562:	b17c      	cbz	r4, 1a584 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1a564:	e9d4 0100 	ldrd	r0, r1, [r4]
   1a568:	ea00 0206 	and.w	r2, r0, r6
   1a56c:	ea01 0307 	and.w	r3, r1, r7
   1a570:	4313      	orrs	r3, r2
   1a572:	d0f5      	beq.n	1a560 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1a574:	68a3      	ldr	r3, [r4, #8]
   1a576:	68e1      	ldr	r1, [r4, #12]
   1a578:	e9cd 6700 	strd	r6, r7, [sp]
   1a57c:	4642      	mov	r2, r8
   1a57e:	4628      	mov	r0, r5
   1a580:	4798      	blx	r3
   1a582:	e7ed      	b.n	1a560 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1a584:	f8d9 3000 	ldr.w	r3, [r9]
   1a588:	b14b      	cbz	r3, 1a59e <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1a58a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a58e:	e9cd 6700 	strd	r6, r7, [sp]
   1a592:	4642      	mov	r2, r8
   1a594:	4628      	mov	r0, r5
   1a596:	4798      	blx	r3
    }

    return (0);
}
   1a598:	b003      	add	sp, #12
   1a59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1a59e:	2000      	movs	r0, #0
   1a5a0:	e7fa      	b.n	1a598 <sensor_read_data_func+0x52>
	...

0001a5a4 <sensor_base_ts_update_event>:
{
   1a5a4:	b530      	push	{r4, r5, lr}
   1a5a6:	b087      	sub	sp, #28
    ticks = os_time_get();
   1a5a8:	f7fe fe30 	bl	1920c <os_time_get>
   1a5ac:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1a5ae:	a901      	add	r1, sp, #4
   1a5b0:	a802      	add	r0, sp, #8
   1a5b2:	f7fe fe65 	bl	19280 <os_gettimeofday>
    if (rc) {
   1a5b6:	b138      	cbz	r0, 1a5c8 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1a5b8:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1a5bc:	4621      	mov	r1, r4
   1a5be:	4809      	ldr	r0, [pc, #36]	; (1a5e4 <sensor_base_ts_update_event+0x40>)
   1a5c0:	f7fd fdac 	bl	1811c <os_callout_reset>
}
   1a5c4:	b007      	add	sp, #28
   1a5c6:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1a5c8:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1a5cc:	4d06      	ldr	r5, [pc, #24]	; (1a5e8 <sensor_base_ts_update_event+0x44>)
   1a5ce:	ab06      	add	r3, sp, #24
   1a5d0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a5d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1a5d8:	9b01      	ldr	r3, [sp, #4]
   1a5da:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1a5dc:	f7fd fe28 	bl	18230 <os_cputime_get32>
   1a5e0:	6168      	str	r0, [r5, #20]
   1a5e2:	e7eb      	b.n	1a5bc <sensor_base_ts_update_event+0x18>
   1a5e4:	2000df24 	.word	0x2000df24
   1a5e8:	2000df48 	.word	0x2000df48

0001a5ec <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1a5ec:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1a5f0:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1a5f2:	f7fd fe1d 	bl	18230 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1a5f6:	4a0e      	ldr	r2, [pc, #56]	; (1a630 <sensor_up_timestamp+0x44>)
   1a5f8:	6955      	ldr	r5, [r2, #20]
   1a5fa:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1a5fc:	6460      	str	r0, [r4, #68]	; 0x44
   1a5fe:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a600:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1a604:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a606:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1a608:	4b0a      	ldr	r3, [pc, #40]	; (1a634 <sensor_up_timestamp+0x48>)
   1a60a:	fba3 c305 	umull	ip, r3, r3, r5
   1a60e:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a610:	eb10 0b03 	adds.w	fp, r0, r3
   1a614:	f141 0c00 	adc.w	ip, r1, #0
   1a618:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1a61c:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1a620:	4905      	ldr	r1, [pc, #20]	; (1a638 <sensor_up_timestamp+0x4c>)
   1a622:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1a626:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1a628:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1a62a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1a62e:	bf00      	nop
   1a630:	2000df48 	.word	0x2000df48
   1a634:	431bde83 	.word	0x431bde83
   1a638:	000f4240 	.word	0x000f4240

0001a63c <sensor_mgr_lock>:
{
   1a63c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1a63e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a642:	4804      	ldr	r0, [pc, #16]	; (1a654 <sensor_mgr_lock+0x18>)
   1a644:	f7fe fa5c 	bl	18b00 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1a648:	b108      	cbz	r0, 1a64e <sensor_mgr_lock+0x12>
   1a64a:	2809      	cmp	r0, #9
   1a64c:	d000      	beq.n	1a650 <sensor_mgr_lock+0x14>
}
   1a64e:	bd08      	pop	{r3, pc}
        return (0);
   1a650:	2000      	movs	r0, #0
   1a652:	e7fc      	b.n	1a64e <sensor_mgr_lock+0x12>
   1a654:	2000def0 	.word	0x2000def0

0001a658 <sensor_mgr_unlock>:
{
   1a658:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1a65a:	4802      	ldr	r0, [pc, #8]	; (1a664 <sensor_mgr_unlock+0xc>)
   1a65c:	f7fe f9f4 	bl	18a48 <os_mutex_release>
}
   1a660:	bd08      	pop	{r3, pc}
   1a662:	bf00      	nop
   1a664:	2000def0 	.word	0x2000def0

0001a668 <sensor_mgr_evq_get>:
}
   1a668:	4b01      	ldr	r3, [pc, #4]	; (1a670 <sensor_mgr_evq_get+0x8>)
   1a66a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1a66c:	4770      	bx	lr
   1a66e:	bf00      	nop
   1a670:	2000def0 	.word	0x2000def0

0001a674 <sensor_mgr_init>:
{
   1a674:	b570      	push	{r4, r5, r6, lr}
   1a676:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1a678:	f7fd ff68 	bl	1854c <os_eventq_dflt_get>
   1a67c:	f7ff ff46 	bl	1a50c <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1a680:	4b1c      	ldr	r3, [pc, #112]	; (1a6f4 <sensor_mgr_init+0x80>)
   1a682:	9300      	str	r3, [sp, #0]
   1a684:	4b1c      	ldr	r3, [pc, #112]	; (1a6f8 <sensor_mgr_init+0x84>)
   1a686:	2218      	movs	r2, #24
   1a688:	2105      	movs	r1, #5
   1a68a:	481c      	ldr	r0, [pc, #112]	; (1a6fc <sensor_mgr_init+0x88>)
   1a68c:	f7fe f8e8 	bl	18860 <os_mempool_init>
    assert(rc == OS_OK);
   1a690:	bb50      	cbnz	r0, 1a6e8 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1a692:	f7ff ffe9 	bl	1a668 <sensor_mgr_evq_get>
   1a696:	4e1a      	ldr	r6, [pc, #104]	; (1a700 <sensor_mgr_init+0x8c>)
   1a698:	2300      	movs	r3, #0
   1a69a:	4a1a      	ldr	r2, [pc, #104]	; (1a704 <sensor_mgr_init+0x90>)
   1a69c:	4601      	mov	r1, r0
   1a69e:	4630      	mov	r0, r6
   1a6a0:	f7fd fd10 	bl	180c4 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1a6a4:	ad04      	add	r5, sp, #16
   1a6a6:	a903      	add	r1, sp, #12
   1a6a8:	4628      	mov	r0, r5
   1a6aa:	f7fe fde9 	bl	19280 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1a6ae:	4c16      	ldr	r4, [pc, #88]	; (1a708 <sensor_mgr_init+0x94>)
   1a6b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a6b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1a6b8:	9b03      	ldr	r3, [sp, #12]
   1a6ba:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1a6bc:	f7fd fdb8 	bl	18230 <os_cputime_get32>
   1a6c0:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1a6c2:	f7ff ffd1 	bl	1a668 <sensor_mgr_evq_get>
   1a6c6:	4c11      	ldr	r4, [pc, #68]	; (1a70c <sensor_mgr_init+0x98>)
   1a6c8:	2300      	movs	r3, #0
   1a6ca:	4a11      	ldr	r2, [pc, #68]	; (1a710 <sensor_mgr_init+0x9c>)
   1a6cc:	4601      	mov	r1, r0
   1a6ce:	4620      	mov	r0, r4
   1a6d0:	f7fd fcf8 	bl	180c4 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1a6d4:	2180      	movs	r1, #128	; 0x80
   1a6d6:	4620      	mov	r0, r4
   1a6d8:	f7fd fd20 	bl	1811c <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1a6dc:	f1a6 000c 	sub.w	r0, r6, #12
   1a6e0:	f7fe f9a8 	bl	18a34 <os_mutex_init>
}
   1a6e4:	b008      	add	sp, #32
   1a6e6:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1a6e8:	2300      	movs	r3, #0
   1a6ea:	461a      	mov	r2, r3
   1a6ec:	4619      	mov	r1, r3
   1a6ee:	4618      	mov	r0, r3
   1a6f0:	f7fd fb6e 	bl	17dd0 <__assert_func>
   1a6f4:	0001f3dc 	.word	0x0001f3dc
   1a6f8:	2000d9ec 	.word	0x2000d9ec
   1a6fc:	2000da64 	.word	0x2000da64
   1a700:	2000defc 	.word	0x2000defc
   1a704:	0001a8e1 	.word	0x0001a8e1
   1a708:	2000df48 	.word	0x2000df48
   1a70c:	2000df24 	.word	0x2000df24
   1a710:	0001a5a5 	.word	0x0001a5a5

0001a714 <sensor_pkg_init>:
{
   1a714:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1a716:	f7ff ffad 	bl	1a674 <sensor_mgr_init>
}
   1a71a:	bd08      	pop	{r3, pc}

0001a71c <sensor_lock>:
{
   1a71c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1a71e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a722:	3004      	adds	r0, #4
   1a724:	f7fe f9ec 	bl	18b00 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1a728:	b108      	cbz	r0, 1a72e <sensor_lock+0x12>
   1a72a:	2809      	cmp	r0, #9
   1a72c:	d000      	beq.n	1a730 <sensor_lock+0x14>
}
   1a72e:	bd08      	pop	{r3, pc}
        return (0);
   1a730:	2000      	movs	r0, #0
   1a732:	e7fc      	b.n	1a72e <sensor_lock+0x12>

0001a734 <sensor_unlock>:
{
   1a734:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1a736:	3004      	adds	r0, #4
   1a738:	f7fe f986 	bl	18a48 <os_mutex_release>
}
   1a73c:	bd08      	pop	{r3, pc}

0001a73e <sensor_update_nextrun>:
{
   1a73e:	b530      	push	{r4, r5, lr}
   1a740:	b083      	sub	sp, #12
   1a742:	4604      	mov	r4, r0
   1a744:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1a746:	a901      	add	r1, sp, #4
   1a748:	6a00      	ldr	r0, [r0, #32]
   1a74a:	f7fe fdb5 	bl	192b8 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1a74e:	4620      	mov	r0, r4
   1a750:	f7ff ffe4 	bl	1a71c <sensor_lock>
    sensor_mgr_remove(sensor);
   1a754:	4620      	mov	r0, r4
   1a756:	f7ff fe8f 	bl	1a478 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1a75a:	9b01      	ldr	r3, [sp, #4]
   1a75c:	441d      	add	r5, r3
   1a75e:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1a760:	4620      	mov	r0, r4
   1a762:	f7ff fe9d 	bl	1a4a0 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1a766:	4620      	mov	r0, r4
   1a768:	f7ff ffe4 	bl	1a734 <sensor_unlock>
}
   1a76c:	b003      	add	sp, #12
   1a76e:	bd30      	pop	{r4, r5, pc}

0001a770 <sensor_calc_nextrun_delta>:
{
   1a770:	b538      	push	{r3, r4, r5, lr}
   1a772:	4605      	mov	r5, r0
   1a774:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1a776:	f7ff ffd1 	bl	1a71c <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1a77a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1a77c:	1b0c      	subs	r4, r1, r4
   1a77e:	d404      	bmi.n	1a78a <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1a780:	4628      	mov	r0, r5
   1a782:	f7ff ffd7 	bl	1a734 <sensor_unlock>
}
   1a786:	4620      	mov	r0, r4
   1a788:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1a78a:	2400      	movs	r4, #0
   1a78c:	e7f8      	b.n	1a780 <sensor_calc_nextrun_delta+0x10>
	...

0001a790 <sensor_find_min_nextrun_sensor>:
{
   1a790:	b570      	push	{r4, r5, r6, lr}
   1a792:	4606      	mov	r6, r0
   1a794:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1a796:	f7ff ff51 	bl	1a63c <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1a79a:	4b05      	ldr	r3, [pc, #20]	; (1a7b0 <sensor_find_min_nextrun_sensor+0x20>)
   1a79c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1a79e:	4631      	mov	r1, r6
   1a7a0:	4620      	mov	r0, r4
   1a7a2:	f7ff ffe5 	bl	1a770 <sensor_calc_nextrun_delta>
   1a7a6:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1a7a8:	f7ff ff56 	bl	1a658 <sensor_mgr_unlock>
}
   1a7ac:	4620      	mov	r0, r4
   1a7ae:	bd70      	pop	{r4, r5, r6, pc}
   1a7b0:	2000def0 	.word	0x2000def0

0001a7b4 <sensor_mgr_register>:
{
   1a7b4:	b538      	push	{r3, r4, r5, lr}
   1a7b6:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1a7b8:	f7ff ff40 	bl	1a63c <sensor_mgr_lock>
    if (rc != 0) {
   1a7bc:	4604      	mov	r4, r0
   1a7be:	b108      	cbz	r0, 1a7c4 <sensor_mgr_register+0x10>
}
   1a7c0:	4620      	mov	r0, r4
   1a7c2:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1a7c4:	4628      	mov	r0, r5
   1a7c6:	f7ff ffa9 	bl	1a71c <sensor_lock>
    if (rc != 0) {
   1a7ca:	4604      	mov	r4, r0
   1a7cc:	2800      	cmp	r0, #0
   1a7ce:	d1f7      	bne.n	1a7c0 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1a7d0:	4628      	mov	r0, r5
   1a7d2:	f7ff fe65 	bl	1a4a0 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1a7d6:	4628      	mov	r0, r5
   1a7d8:	f7ff ffac 	bl	1a734 <sensor_unlock>
    sensor_mgr_unlock();
   1a7dc:	f7ff ff3c 	bl	1a658 <sensor_mgr_unlock>
    return (0);
   1a7e0:	e7ee      	b.n	1a7c0 <sensor_mgr_register+0xc>

0001a7e2 <sensor_init>:
{
   1a7e2:	b538      	push	{r3, r4, r5, lr}
   1a7e4:	4604      	mov	r4, r0
   1a7e6:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1a7e8:	2288      	movs	r2, #136	; 0x88
   1a7ea:	2100      	movs	r1, #0
   1a7ec:	f7fe fef3 	bl	195d6 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1a7f0:	1d20      	adds	r0, r4, #4
   1a7f2:	f7fe f91f 	bl	18a34 <os_mutex_init>
    if (rc != 0) {
   1a7f6:	4603      	mov	r3, r0
   1a7f8:	b900      	cbnz	r0, 1a7fc <sensor_init+0x1a>
    sensor->s_dev = dev;
   1a7fa:	6025      	str	r5, [r4, #0]
}
   1a7fc:	4618      	mov	r0, r3
   1a7fe:	bd38      	pop	{r3, r4, r5, pc}

0001a800 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1a800:	b530      	push	{r4, r5, lr}
   1a802:	b089      	sub	sp, #36	; 0x24
   1a804:	4604      	mov	r4, r0
   1a806:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1a80a:	f7ff ff87 	bl	1a71c <sensor_lock>
    if (rc) {
   1a80e:	4605      	mov	r5, r0
   1a810:	b9f8      	cbnz	r0, 1a852 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1a812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a814:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1a816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a818:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1a81a:	a904      	add	r1, sp, #16
   1a81c:	4620      	mov	r0, r4
   1a81e:	f7ff fe7b 	bl	1a518 <sensor_mgr_match_bytype>
   1a822:	b1e0      	cbz	r0, 1a85e <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1a824:	4620      	mov	r0, r4
   1a826:	f7ff fee1 	bl	1a5ec <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1a82a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a82c:	6819      	ldr	r1, [r3, #0]
   1a82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a830:	9302      	str	r3, [sp, #8]
   1a832:	ab06      	add	r3, sp, #24
   1a834:	9301      	str	r3, [sp, #4]
   1a836:	4b0b      	ldr	r3, [pc, #44]	; (1a864 <sensor_read+0x64>)
   1a838:	9300      	str	r3, [sp, #0]
   1a83a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a83e:	4620      	mov	r0, r4
   1a840:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1a842:	4605      	mov	r5, r0
   1a844:	b128      	cbz	r0, 1a852 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1a846:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1a848:	b11b      	cbz	r3, 1a852 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1a84a:	4602      	mov	r2, r0
   1a84c:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1a84e:	4620      	mov	r0, r4
   1a850:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1a852:	4620      	mov	r0, r4
   1a854:	f7ff ff6e 	bl	1a734 <sensor_unlock>
    return (rc);
}
   1a858:	4628      	mov	r0, r5
   1a85a:	b009      	add	sp, #36	; 0x24
   1a85c:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1a85e:	f06f 0503 	mvn.w	r5, #3
   1a862:	e7f6      	b.n	1a852 <sensor_read+0x52>
   1a864:	0001a547 	.word	0x0001a547

0001a868 <sensor_mgr_poll_bytype>:
{
   1a868:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a86a:	b085      	sub	sp, #20
   1a86c:	4616      	mov	r6, r2
   1a86e:	461f      	mov	r7, r3
   1a870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1a872:	b10c      	cbz	r4, 1a878 <sensor_mgr_poll_bytype+0x10>
   1a874:	8aa3      	ldrh	r3, [r4, #20]
   1a876:	b9cb      	cbnz	r3, 1a8ac <sensor_mgr_poll_bytype+0x44>
   1a878:	4632      	mov	r2, r6
   1a87a:	463b      	mov	r3, r7
   1a87c:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1a87e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a882:	9102      	str	r1, [sp, #8]
   1a884:	2100      	movs	r1, #0
   1a886:	9101      	str	r1, [sp, #4]
   1a888:	9100      	str	r1, [sp, #0]
   1a88a:	f7ff ffb9 	bl	1a800 <sensor_read>
        sensor_lock(sensor);
   1a88e:	4628      	mov	r0, r5
   1a890:	f7ff ff44 	bl	1a71c <sensor_lock>
        if (stt) {
   1a894:	b12c      	cbz	r4, 1a8a2 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1a896:	8aa3      	ldrh	r3, [r4, #20]
   1a898:	b91b      	cbnz	r3, 1a8a2 <sensor_mgr_poll_bytype+0x3a>
   1a89a:	8a63      	ldrh	r3, [r4, #18]
   1a89c:	b10b      	cbz	r3, 1a8a2 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1a89e:	3b01      	subs	r3, #1
   1a8a0:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1a8a2:	4628      	mov	r0, r5
   1a8a4:	f7ff ff46 	bl	1a734 <sensor_unlock>
}
   1a8a8:	b005      	add	sp, #20
   1a8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1a8ac:	3b01      	subs	r3, #1
   1a8ae:	82a3      	strh	r3, [r4, #20]
}
   1a8b0:	e7fa      	b.n	1a8a8 <sensor_mgr_poll_bytype+0x40>

0001a8b2 <sensor_poll_per_type_trait>:
{
   1a8b2:	b570      	push	{r4, r5, r6, lr}
   1a8b4:	b082      	sub	sp, #8
   1a8b6:	4605      	mov	r5, r0
   1a8b8:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1a8ba:	f7ff ff2f 	bl	1a71c <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1a8be:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1a8c0:	e007      	b.n	1a8d2 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1a8c2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a8c6:	9601      	str	r6, [sp, #4]
   1a8c8:	9400      	str	r4, [sp, #0]
   1a8ca:	4628      	mov	r0, r5
   1a8cc:	f7ff ffcc 	bl	1a868 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1a8d0:	6a24      	ldr	r4, [r4, #32]
   1a8d2:	2c00      	cmp	r4, #0
   1a8d4:	d1f5      	bne.n	1a8c2 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1a8d6:	4628      	mov	r0, r5
   1a8d8:	f7ff ff2c 	bl	1a734 <sensor_unlock>
}
   1a8dc:	b002      	add	sp, #8
   1a8de:	bd70      	pop	{r4, r5, r6, pc}

0001a8e0 <sensor_mgr_wakeup_event>:
{
   1a8e0:	b570      	push	{r4, r5, r6, lr}
   1a8e2:	b084      	sub	sp, #16
    now = os_time_get();
   1a8e4:	f7fe fc92 	bl	1920c <os_time_get>
   1a8e8:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1a8ea:	f7ff fea7 	bl	1a63c <sensor_mgr_lock>
   1a8ee:	e012      	b.n	1a916 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1a8f0:	4620      	mov	r0, r4
   1a8f2:	f7ff ff1f 	bl	1a734 <sensor_unlock>
            sensor_mgr_unlock();
   1a8f6:	f7ff feaf 	bl	1a658 <sensor_mgr_unlock>
}
   1a8fa:	b004      	add	sp, #16
   1a8fc:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1a8fe:	4632      	mov	r2, r6
   1a900:	4629      	mov	r1, r5
   1a902:	4620      	mov	r0, r4
   1a904:	f7ff ffd5 	bl	1a8b2 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1a908:	4629      	mov	r1, r5
   1a90a:	4620      	mov	r0, r4
   1a90c:	f7ff ff17 	bl	1a73e <sensor_update_nextrun>
        sensor_unlock(cursor);
   1a910:	4620      	mov	r0, r4
   1a912:	f7ff ff0f 	bl	1a734 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1a916:	a903      	add	r1, sp, #12
   1a918:	4628      	mov	r0, r5
   1a91a:	f7ff ff39 	bl	1a790 <sensor_find_min_nextrun_sensor>
   1a91e:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1a920:	f7ff fefc 	bl	1a71c <sensor_lock>
        if (!cursor->s_poll_rate) {
   1a924:	6a23      	ldr	r3, [r4, #32]
   1a926:	2b00      	cmp	r3, #0
   1a928:	d0e2      	beq.n	1a8f0 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1a92a:	9e03      	ldr	r6, [sp, #12]
   1a92c:	b96e      	cbnz	r6, 1a94a <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1a92e:	4620      	mov	r0, r4
   1a930:	f7ff fde6 	bl	1a500 <sensor_type_traits_empty>
   1a934:	2800      	cmp	r0, #0
   1a936:	d0e2      	beq.n	1a8fe <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1a938:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1a93c:	9501      	str	r5, [sp, #4]
   1a93e:	2100      	movs	r1, #0
   1a940:	9100      	str	r1, [sp, #0]
   1a942:	4620      	mov	r0, r4
   1a944:	f7ff ff90 	bl	1a868 <sensor_mgr_poll_bytype>
   1a948:	e7de      	b.n	1a908 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1a94a:	f7ff fe85 	bl	1a658 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1a94e:	9903      	ldr	r1, [sp, #12]
   1a950:	4801      	ldr	r0, [pc, #4]	; (1a958 <sensor_mgr_wakeup_event+0x78>)
   1a952:	f7fd fbe3 	bl	1811c <os_callout_reset>
   1a956:	e7d0      	b.n	1a8fa <sensor_mgr_wakeup_event+0x1a>
   1a958:	2000defc 	.word	0x2000defc

0001a95c <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1a95c:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1a95e:	2101      	movs	r1, #1
   1a960:	4806      	ldr	r0, [pc, #24]	; (1a97c <init_sensor_coap+0x20>)
   1a962:	f7fe faf1 	bl	18f48 <os_sem_init>
    assert(rc == OS_OK);
   1a966:	b918      	cbnz	r0, 1a970 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1a968:	4b05      	ldr	r3, [pc, #20]	; (1a980 <init_sensor_coap+0x24>)
   1a96a:	2201      	movs	r2, #1
   1a96c:	701a      	strb	r2, [r3, #0]
}
   1a96e:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1a970:	2300      	movs	r3, #0
   1a972:	461a      	mov	r2, r3
   1a974:	4619      	mov	r1, r3
   1a976:	4618      	mov	r0, r3
   1a978:	f7fd fa2a 	bl	17dd0 <__assert_func>
   1a97c:	2000da80 	.word	0x2000da80
   1a980:	2000da88 	.word	0x2000da88

0001a984 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1a984:	4b04      	ldr	r3, [pc, #16]	; (1a998 <is_sensor_node+0x14>)
   1a986:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a98a:	4313      	orrs	r3, r2
   1a98c:	d101      	bne.n	1a992 <is_sensor_node+0xe>
    return false;
   1a98e:	2000      	movs	r0, #0
}
   1a990:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1a992:	2001      	movs	r0, #1
   1a994:	4770      	bx	lr
   1a996:	bf00      	nop
   1a998:	2000daa0 	.word	0x2000daa0

0001a99c <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1a99c:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1a99e:	4b16      	ldr	r3, [pc, #88]	; (1a9f8 <get_hardware_id+0x5c>)
   1a9a0:	681b      	ldr	r3, [r3, #0]
   1a9a2:	b10b      	cbz	r3, 1a9a8 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1a9a4:	4815      	ldr	r0, [pc, #84]	; (1a9fc <get_hardware_id+0x60>)
   1a9a6:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1a9a8:	f000 fcee 	bl	1b388 <hal_bsp_hw_id_len>
   1a9ac:	4b12      	ldr	r3, [pc, #72]	; (1a9f8 <get_hardware_id+0x5c>)
   1a9ae:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1a9b0:	280b      	cmp	r0, #11
   1a9b2:	d914      	bls.n	1a9de <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1a9b4:	210c      	movs	r1, #12
   1a9b6:	4811      	ldr	r0, [pc, #68]	; (1a9fc <get_hardware_id+0x60>)
   1a9b8:	f000 fce8 	bl	1b38c <hal_bsp_hw_id>
   1a9bc:	4b0e      	ldr	r3, [pc, #56]	; (1a9f8 <get_hardware_id+0x5c>)
   1a9be:	6018      	str	r0, [r3, #0]
   1a9c0:	2800      	cmp	r0, #0
   1a9c2:	dd12      	ble.n	1a9ea <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1a9c4:	490e      	ldr	r1, [pc, #56]	; (1aa00 <get_hardware_id+0x64>)
   1a9c6:	480f      	ldr	r0, [pc, #60]	; (1aa04 <get_hardware_id+0x68>)
   1a9c8:	f7fc fb3a 	bl	17040 <console_printf>
   1a9cc:	4b0a      	ldr	r3, [pc, #40]	; (1a9f8 <get_hardware_id+0x5c>)
   1a9ce:	6819      	ldr	r1, [r3, #0]
   1a9d0:	480a      	ldr	r0, [pc, #40]	; (1a9fc <get_hardware_id+0x60>)
   1a9d2:	f7fc fac5 	bl	16f60 <console_dump>
   1a9d6:	480c      	ldr	r0, [pc, #48]	; (1aa08 <get_hardware_id+0x6c>)
   1a9d8:	f7fc fb32 	bl	17040 <console_printf>
   1a9dc:	e7e2      	b.n	1a9a4 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1a9de:	2300      	movs	r3, #0
   1a9e0:	461a      	mov	r2, r3
   1a9e2:	4619      	mov	r1, r3
   1a9e4:	4618      	mov	r0, r3
   1a9e6:	f7fd f9f3 	bl	17dd0 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1a9ea:	2300      	movs	r3, #0
   1a9ec:	461a      	mov	r2, r3
   1a9ee:	4619      	mov	r1, r3
   1a9f0:	4618      	mov	r0, r3
   1a9f2:	f7fd f9ed 	bl	17dd0 <__assert_func>
   1a9f6:	bf00      	nop
   1a9f8:	2000da98 	.word	0x2000da98
   1a9fc:	2000da8c 	.word	0x2000da8c
   1aa00:	0001f480 	.word	0x0001f480
   1aa04:	0001f438 	.word	0x0001f438
   1aa08:	0001f598 	.word	0x0001f598

0001aa0c <is_collector_node>:
bool is_collector_node(void) {
   1aa0c:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1aa0e:	f7ff ffc5 	bl	1a99c <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1aa12:	220c      	movs	r2, #12
   1aa14:	4903      	ldr	r1, [pc, #12]	; (1aa24 <is_collector_node+0x18>)
   1aa16:	f7fe fdad 	bl	19574 <memcmp>
   1aa1a:	b108      	cbz	r0, 1aa20 <is_collector_node+0x14>
    return false; 
   1aa1c:	2000      	movs	r0, #0
}
   1aa1e:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1aa20:	2001      	movs	r0, #1
   1aa22:	e7fc      	b.n	1aa1e <is_collector_node+0x12>
   1aa24:	0001f3f0 	.word	0x0001f3f0

0001aa28 <is_standalone_node>:
bool is_standalone_node(void) {
   1aa28:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1aa2a:	f7ff ffef 	bl	1aa0c <is_collector_node>
   1aa2e:	b928      	cbnz	r0, 1aa3c <is_standalone_node+0x14>
   1aa30:	4604      	mov	r4, r0
   1aa32:	f7ff ffa7 	bl	1a984 <is_sensor_node>
   1aa36:	b910      	cbnz	r0, 1aa3e <is_standalone_node+0x16>
   1aa38:	2401      	movs	r4, #1
   1aa3a:	e000      	b.n	1aa3e <is_standalone_node+0x16>
    return false;
   1aa3c:	2400      	movs	r4, #0
}
   1aa3e:	4620      	mov	r0, r4
   1aa40:	bd10      	pop	{r4, pc}
	...

0001aa44 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1aa44:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aa46:	2400      	movs	r4, #0
   1aa48:	2c04      	cmp	r4, #4
   1aa4a:	dc15      	bgt.n	1aa78 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1aa4c:	4b23      	ldr	r3, [pc, #140]	; (1aadc <sensor_network_init+0x98>)
   1aa4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa56:	4922      	ldr	r1, [pc, #136]	; (1aae0 <sensor_network_init+0x9c>)
   1aa58:	4822      	ldr	r0, [pc, #136]	; (1aae4 <sensor_network_init+0xa0>)
   1aa5a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1aa5e:	f000 fcaf 	bl	1b3c0 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1aa62:	3001      	adds	r0, #1
   1aa64:	280b      	cmp	r0, #11
   1aa66:	dc01      	bgt.n	1aa6c <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aa68:	3401      	adds	r4, #1
   1aa6a:	e7ed      	b.n	1aa48 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1aa6c:	2300      	movs	r3, #0
   1aa6e:	461a      	mov	r2, r3
   1aa70:	4619      	mov	r1, r3
   1aa72:	4618      	mov	r0, r3
   1aa74:	f7fd f9ac 	bl	17dd0 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1aa78:	f7ff ff90 	bl	1a99c <get_hardware_id>
   1aa7c:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aa7e:	2400      	movs	r4, #0
   1aa80:	2c04      	cmp	r4, #4
   1aa82:	dc19      	bgt.n	1aab8 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1aa84:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1aa88:	0093      	lsls	r3, r2, #2
   1aa8a:	220c      	movs	r2, #12
   1aa8c:	4916      	ldr	r1, [pc, #88]	; (1aae8 <sensor_network_init+0xa4>)
   1aa8e:	4419      	add	r1, r3
   1aa90:	4628      	mov	r0, r5
   1aa92:	f7fe fd6f 	bl	19574 <memcmp>
   1aa96:	b108      	cbz	r0, 1aa9c <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aa98:	3401      	adds	r4, #1
   1aa9a:	e7f1      	b.n	1aa80 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1aa9c:	4b0f      	ldr	r3, [pc, #60]	; (1aadc <sensor_network_init+0x98>)
   1aa9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1aaa2:	e9d3 0100 	ldrd	r0, r1, [r3]
   1aaa6:	4b11      	ldr	r3, [pc, #68]	; (1aaec <sensor_network_init+0xa8>)
   1aaa8:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1aaac:	1c63      	adds	r3, r4, #1
   1aaae:	4a10      	ldr	r2, [pc, #64]	; (1aaf0 <sensor_network_init+0xac>)
   1aab0:	4910      	ldr	r1, [pc, #64]	; (1aaf4 <sensor_network_init+0xb0>)
   1aab2:	4811      	ldr	r0, [pc, #68]	; (1aaf8 <sensor_network_init+0xb4>)
   1aab4:	f7fc fac4 	bl	17040 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1aab8:	f7ff ffa8 	bl	1aa0c <is_collector_node>
   1aabc:	b940      	cbnz	r0, 1aad0 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1aabe:	f7ff ffb3 	bl	1aa28 <is_standalone_node>
   1aac2:	b150      	cbz	r0, 1aada <sensor_network_init+0x96>
   1aac4:	4a0a      	ldr	r2, [pc, #40]	; (1aaf0 <sensor_network_init+0xac>)
   1aac6:	490b      	ldr	r1, [pc, #44]	; (1aaf4 <sensor_network_init+0xb0>)
   1aac8:	480c      	ldr	r0, [pc, #48]	; (1aafc <sensor_network_init+0xb8>)
   1aaca:	f7fc fab9 	bl	17040 <console_printf>
}
   1aace:	e004      	b.n	1aada <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1aad0:	4a07      	ldr	r2, [pc, #28]	; (1aaf0 <sensor_network_init+0xac>)
   1aad2:	4908      	ldr	r1, [pc, #32]	; (1aaf4 <sensor_network_init+0xb0>)
   1aad4:	480a      	ldr	r0, [pc, #40]	; (1ab00 <sensor_network_init+0xbc>)
   1aad6:	f7fc fab3 	bl	17040 <console_printf>
}
   1aada:	bd38      	pop	{r3, r4, r5, pc}
   1aadc:	0001f498 	.word	0x0001f498
   1aae0:	0001f440 	.word	0x0001f440
   1aae4:	20000130 	.word	0x20000130
   1aae8:	0001f3fc 	.word	0x0001f3fc
   1aaec:	2000daa0 	.word	0x2000daa0
   1aaf0:	0001f448 	.word	0x0001f448
   1aaf4:	0001f480 	.word	0x0001f480
   1aaf8:	0001f450 	.word	0x0001f450
   1aafc:	0001f470 	.word	0x0001f470
   1ab00:	0001f460 	.word	0x0001f460

0001ab04 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1ab04:	b530      	push	{r4, r5, lr}
   1ab06:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1ab08:	2200      	movs	r2, #0
   1ab0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ab0e:	4810      	ldr	r0, [pc, #64]	; (1ab50 <config_device+0x4c>)
   1ab10:	f7fd fc2c 	bl	1836c <os_dev_open>
    assert(dev != NULL);
   1ab14:	b178      	cbz	r0, 1ab36 <config_device+0x32>
   1ab16:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1ab18:	4668      	mov	r0, sp
   1ab1a:	f000 f86c 	bl	1abf6 <temp_stub_default_cfg>
    assert(rc == 0);
   1ab1e:	b980      	cbnz	r0, 1ab42 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1ab20:	4669      	mov	r1, sp
   1ab22:	4620      	mov	r0, r4
   1ab24:	f000 f900 	bl	1ad28 <temp_stub_config>
   1ab28:	4605      	mov	r5, r0
    os_dev_close(dev);
   1ab2a:	4620      	mov	r0, r4
   1ab2c:	f7fd fc40 	bl	183b0 <os_dev_close>
    return rc;
}
   1ab30:	4628      	mov	r0, r5
   1ab32:	b003      	add	sp, #12
   1ab34:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1ab36:	2300      	movs	r3, #0
   1ab38:	461a      	mov	r2, r3
   1ab3a:	4619      	mov	r1, r3
   1ab3c:	4618      	mov	r0, r3
   1ab3e:	f7fd f947 	bl	17dd0 <__assert_func>
    assert(rc == 0);
   1ab42:	2300      	movs	r3, #0
   1ab44:	461a      	mov	r2, r3
   1ab46:	4619      	mov	r1, r3
   1ab48:	4618      	mov	r0, r3
   1ab4a:	f7fd f941 	bl	17dd0 <__assert_func>
   1ab4e:	bf00      	nop
   1ab50:	0001f4c0 	.word	0x0001f4c0

0001ab54 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1ab54:	b510      	push	{r4, lr}
   1ab56:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1ab58:	4c10      	ldr	r4, [pc, #64]	; (1ab9c <temp_stub_create+0x48>)
   1ab5a:	4621      	mov	r1, r4
   1ab5c:	4810      	ldr	r0, [pc, #64]	; (1aba0 <temp_stub_create+0x4c>)
   1ab5e:	f7fc fa6f 	bl	17040 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1ab62:	4b10      	ldr	r3, [pc, #64]	; (1aba4 <temp_stub_create+0x50>)
   1ab64:	9301      	str	r3, [sp, #4]
   1ab66:	4b10      	ldr	r3, [pc, #64]	; (1aba8 <temp_stub_create+0x54>)
   1ab68:	9300      	str	r3, [sp, #0]
   1ab6a:	2300      	movs	r3, #0
   1ab6c:	2201      	movs	r2, #1
   1ab6e:	4621      	mov	r1, r4
   1ab70:	480e      	ldr	r0, [pc, #56]	; (1abac <temp_stub_create+0x58>)
   1ab72:	f7fd fbb5 	bl	182e0 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1ab76:	b920      	cbnz	r0, 1ab82 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1ab78:	f7ff ffc4 	bl	1ab04 <config_device>
    assert(rc == 0);
   1ab7c:	b938      	cbnz	r0, 1ab8e <temp_stub_create+0x3a>
}
   1ab7e:	b002      	add	sp, #8
   1ab80:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1ab82:	2300      	movs	r3, #0
   1ab84:	461a      	mov	r2, r3
   1ab86:	4619      	mov	r1, r3
   1ab88:	4618      	mov	r0, r3
   1ab8a:	f7fd f921 	bl	17dd0 <__assert_func>
    assert(rc == 0);
   1ab8e:	2300      	movs	r3, #0
   1ab90:	461a      	mov	r2, r3
   1ab92:	4619      	mov	r1, r3
   1ab94:	4618      	mov	r0, r3
   1ab96:	f7fd f91b 	bl	17dd0 <__assert_func>
   1ab9a:	bf00      	nop
   1ab9c:	0001f4c0 	.word	0x0001f4c0
   1aba0:	0001f4cc 	.word	0x0001f4cc
   1aba4:	2000dae0 	.word	0x2000dae0
   1aba8:	0001ac05 	.word	0x0001ac05
   1abac:	2000daf8 	.word	0x2000daf8

0001abb0 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1abb0:	2000      	movs	r0, #0
   1abb2:	4770      	bx	lr

0001abb4 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1abb4:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1abb8:	2100      	movs	r1, #0
   1abba:	ea50 0301 	orrs.w	r3, r0, r1
   1abbe:	d004      	beq.n	1abca <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1abc0:	9b00      	ldr	r3, [sp, #0]
   1abc2:	2201      	movs	r2, #1
   1abc4:	701a      	strb	r2, [r3, #0]
    return (0);
   1abc6:	2000      	movs	r0, #0
   1abc8:	4770      	bx	lr
err:
    return (rc);
   1abca:	f06f 0001 	mvn.w	r0, #1
}
   1abce:	4770      	bx	lr

0001abd0 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1abd0:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1abd2:	b120      	cbz	r0, 1abde <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1abd4:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1abd8:	d007      	beq.n	1abea <temp_stub_open+0x1a>
}
   1abda:	2000      	movs	r0, #0
   1abdc:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1abde:	2300      	movs	r3, #0
   1abe0:	461a      	mov	r2, r3
   1abe2:	4619      	mov	r1, r3
   1abe4:	4618      	mov	r0, r3
   1abe6:	f7fd f8f3 	bl	17dd0 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1abea:	2300      	movs	r3, #0
   1abec:	461a      	mov	r2, r3
   1abee:	4619      	mov	r1, r3
   1abf0:	4618      	mov	r0, r3
   1abf2:	f7fd f8ed 	bl	17dd0 <__assert_func>

0001abf6 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1abf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1abfa:	2300      	movs	r3, #0
   1abfc:	e9c0 2300 	strd	r2, r3, [r0]
}
   1ac00:	2000      	movs	r0, #0
   1ac02:	4770      	bx	lr

0001ac04 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1ac06:	b379      	cbz	r1, 1ac68 <temp_stub_init+0x64>
   1ac08:	460d      	mov	r5, r1
   1ac0a:	b380      	cbz	r0, 1ac6e <temp_stub_init+0x6a>
   1ac0c:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1ac0e:	30b0      	adds	r0, #176	; 0xb0
   1ac10:	f7ff fff1 	bl	1abf6 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1ac14:	4603      	mov	r3, r0
   1ac16:	b108      	cbz	r0, 1ac1c <temp_stub_init+0x18>
}
   1ac18:	4618      	mov	r0, r3
   1ac1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1ac1c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1ac20:	4621      	mov	r1, r4
   1ac22:	4630      	mov	r0, r6
   1ac24:	f7ff fddd 	bl	1a7e2 <sensor_init>
    if (rc != 0) { goto err; }
   1ac28:	4603      	mov	r3, r0
   1ac2a:	2800      	cmp	r0, #0
   1ac2c:	d1f4      	bne.n	1ac18 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1ac2e:	4b11      	ldr	r3, [pc, #68]	; (1ac74 <temp_stub_init+0x70>)
   1ac30:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1ac32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1ac36:	2300      	movs	r3, #0
   1ac38:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1ac3c:	682a      	ldr	r2, [r5, #0]
   1ac3e:	686f      	ldr	r7, [r5, #4]
   1ac40:	68a8      	ldr	r0, [r5, #8]
   1ac42:	68e9      	ldr	r1, [r5, #12]
   1ac44:	6722      	str	r2, [r4, #112]	; 0x70
   1ac46:	6767      	str	r7, [r4, #116]	; 0x74
   1ac48:	67a0      	str	r0, [r4, #120]	; 0x78
   1ac4a:	67e1      	str	r1, [r4, #124]	; 0x7c
   1ac4c:	692a      	ldr	r2, [r5, #16]
   1ac4e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1ac52:	4630      	mov	r0, r6
   1ac54:	f7ff fdae 	bl	1a7b4 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1ac58:	4603      	mov	r3, r0
   1ac5a:	2800      	cmp	r0, #0
   1ac5c:	d1dc      	bne.n	1ac18 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1ac5e:	4a06      	ldr	r2, [pc, #24]	; (1ac78 <temp_stub_init+0x74>)
   1ac60:	6022      	str	r2, [r4, #0]
   1ac62:	4a06      	ldr	r2, [pc, #24]	; (1ac7c <temp_stub_init+0x78>)
   1ac64:	60e2      	str	r2, [r4, #12]
    return (0);
   1ac66:	e7d7      	b.n	1ac18 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1ac68:	f06f 0308 	mvn.w	r3, #8
   1ac6c:	e7d4      	b.n	1ac18 <temp_stub_init+0x14>
   1ac6e:	f06f 0308 	mvn.w	r3, #8
   1ac72:	e7d1      	b.n	1ac18 <temp_stub_init+0x14>
   1ac74:	0001f4dc 	.word	0x0001f4dc
   1ac78:	0001abd1 	.word	0x0001abd1
   1ac7c:	0001abb1 	.word	0x0001abb1

0001ac80 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1ac80:	b538      	push	{r3, r4, r5, lr}
   1ac82:	460d      	mov	r5, r1
   1ac84:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1ac86:	4808      	ldr	r0, [pc, #32]	; (1aca8 <temp_stub_get_raw_temperature+0x28>)
   1ac88:	f7fc f9da 	bl	17040 <console_printf>
    assert(temp_sum);
   1ac8c:	b134      	cbz	r4, 1ac9c <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1ac8e:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1ac92:	fb01 f105 	mul.w	r1, r1, r5
   1ac96:	6021      	str	r1, [r4, #0]
}
   1ac98:	2000      	movs	r0, #0
   1ac9a:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1ac9c:	2300      	movs	r3, #0
   1ac9e:	461a      	mov	r2, r3
   1aca0:	4619      	mov	r1, r3
   1aca2:	4618      	mov	r0, r3
   1aca4:	f7fd f894 	bl	17dd0 <__assert_func>
   1aca8:	0001f504 	.word	0x0001f504

0001acac <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1acac:	b530      	push	{r4, r5, lr}
   1acae:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1acb0:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1acb4:	2500      	movs	r5, #0
   1acb6:	ea54 0305 	orrs.w	r3, r4, r5
   1acba:	d032      	beq.n	1ad22 <temp_stub_sensor_read+0x76>
   1acbc:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1acbe:	6805      	ldr	r5, [r0, #0]
   1acc0:	b165      	cbz	r5, 1acdc <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1acc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1acc6:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1acc8:	2200      	movs	r2, #0
   1acca:	4611      	mov	r1, r2
   1accc:	4628      	mov	r0, r5
   1acce:	f7ff ff7f 	bl	1abd0 <temp_stub_open>
        if (rc) { goto err; }
   1acd2:	4603      	mov	r3, r0
   1acd4:	b140      	cbz	r0, 1ace8 <temp_stub_sensor_read+0x3c>
}
   1acd6:	4618      	mov	r0, r3
   1acd8:	b007      	add	sp, #28
   1acda:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1acdc:	2300      	movs	r3, #0
   1acde:	461a      	mov	r2, r3
   1ace0:	4619      	mov	r1, r3
   1ace2:	4618      	mov	r0, r3
   1ace4:	f7fd f874 	bl	17dd0 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1ace8:	2300      	movs	r3, #0
   1acea:	aa03      	add	r2, sp, #12
   1acec:	2101      	movs	r1, #1
   1acee:	4628      	mov	r0, r5
   1acf0:	f7ff ffc6 	bl	1ac80 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1acf4:	4603      	mov	r3, r0
   1acf6:	2800      	cmp	r0, #0
   1acf8:	d1ed      	bne.n	1acd6 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1acfa:	9a03      	ldr	r2, [sp, #12]
   1acfc:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1acfe:	2201      	movs	r2, #1
   1ad00:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1ad04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ad06:	2a00      	cmp	r2, #0
   1ad08:	d0e5      	beq.n	1acd6 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1ad0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1ad0e:	2300      	movs	r3, #0
   1ad10:	e9cd 2300 	strd	r2, r3, [sp]
   1ad14:	aa04      	add	r2, sp, #16
   1ad16:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ad18:	4620      	mov	r0, r4
   1ad1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad1c:	4798      	blx	r3
   1ad1e:	4603      	mov	r3, r0
   1ad20:	e7d9      	b.n	1acd6 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1ad22:	f06f 0301 	mvn.w	r3, #1
   1ad26:	e7d6      	b.n	1acd6 <temp_stub_sensor_read+0x2a>

0001ad28 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1ad28:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1ad2a:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1ad2e:	d009      	beq.n	1ad44 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1ad30:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1ad34:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1ad38:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ad3c:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1ad40:	2000      	movs	r0, #0
   1ad42:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1ad44:	2300      	movs	r3, #0
   1ad46:	461a      	mov	r2, r3
   1ad48:	4619      	mov	r1, r3
   1ad4a:	4618      	mov	r0, r3
   1ad4c:	f7fd f840 	bl	17dd0 <__assert_func>

0001ad50 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1ad50:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1ad52:	e002      	b.n	1ad5a <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1ad54:	4618      	mov	r0, r3
   1ad56:	f000 f85b 	bl	1ae10 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1ad5a:	4808      	ldr	r0, [pc, #32]	; (1ad7c <oc_buffer_tx+0x2c>)
   1ad5c:	f7fd fc03 	bl	18566 <os_mqueue_get>
   1ad60:	4603      	mov	r3, r0
   1ad62:	b148      	cbz	r0, 1ad78 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1ad64:	2200      	movs	r2, #0
   1ad66:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1ad68:	7e1a      	ldrb	r2, [r3, #24]
   1ad6a:	f012 0f08 	tst.w	r2, #8
   1ad6e:	d0f1      	beq.n	1ad54 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1ad70:	4618      	mov	r0, r3
   1ad72:	f000 f85d 	bl	1ae30 <oc_send_multicast_message>
   1ad76:	e7f0      	b.n	1ad5a <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1ad78:	bd08      	pop	{r3, pc}
   1ad7a:	bf00      	nop
   1ad7c:	2000dbd0 	.word	0x2000dbd0

0001ad80 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1ad80:	b500      	push	{lr}
   1ad82:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1ad84:	4808      	ldr	r0, [pc, #32]	; (1ada8 <oc_buffer_rx+0x28>)
   1ad86:	f7fd fbee 	bl	18566 <os_mqueue_get>
   1ad8a:	9001      	str	r0, [sp, #4]
   1ad8c:	b140      	cbz	r0, 1ada0 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1ad8e:	a801      	add	r0, sp, #4
   1ad90:	f000 faa2 	bl	1b2d8 <__wrap_coap_receive>
#endif
        if (m) {
   1ad94:	9801      	ldr	r0, [sp, #4]
   1ad96:	2800      	cmp	r0, #0
   1ad98:	d0f4      	beq.n	1ad84 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1ad9a:	f7fd fc59 	bl	18650 <os_mbuf_free_chain>
   1ad9e:	e7f1      	b.n	1ad84 <oc_buffer_rx+0x4>
        }
    }
}
   1ada0:	b003      	add	sp, #12
   1ada2:	f85d fb04 	ldr.w	pc, [sp], #4
   1ada6:	bf00      	nop
   1ada8:	2000dbb8 	.word	0x2000dbb8

0001adac <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1adac:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1adae:	2200      	movs	r2, #0
   1adb0:	4904      	ldr	r1, [pc, #16]	; (1adc4 <oc_buffer_init+0x18>)
   1adb2:	4805      	ldr	r0, [pc, #20]	; (1adc8 <oc_buffer_init+0x1c>)
   1adb4:	f7fd fbce 	bl	18554 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1adb8:	2200      	movs	r2, #0
   1adba:	4904      	ldr	r1, [pc, #16]	; (1adcc <oc_buffer_init+0x20>)
   1adbc:	4804      	ldr	r0, [pc, #16]	; (1add0 <oc_buffer_init+0x24>)
   1adbe:	f7fd fbc9 	bl	18554 <os_mqueue_init>
}
   1adc2:	bd08      	pop	{r3, pc}
   1adc4:	0001ad81 	.word	0x0001ad81
   1adc8:	2000dbb8 	.word	0x2000dbb8
   1adcc:	0001ad51 	.word	0x0001ad51
   1add0:	2000dbd0 	.word	0x2000dbd0

0001add4 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1add4:	b500      	push	{lr}
   1add6:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1add8:	4b07      	ldr	r3, [pc, #28]	; (1adf8 <oc_ri_mem_init+0x24>)
   1adda:	9300      	str	r3, [sp, #0]
   1addc:	4b07      	ldr	r3, [pc, #28]	; (1adfc <oc_ri_mem_init+0x28>)
   1adde:	2264      	movs	r2, #100	; 0x64
   1ade0:	2102      	movs	r1, #2
   1ade2:	4807      	ldr	r0, [pc, #28]	; (1ae00 <oc_ri_mem_init+0x2c>)
   1ade4:	f7fd fd3c 	bl	18860 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1ade8:	f000 f860 	bl	1aeac <oc_rep_init>
#endif
    oc_buffer_init();
   1adec:	f7ff ffde 	bl	1adac <oc_buffer_init>
}
   1adf0:	b003      	add	sp, #12
   1adf2:	f85d fb04 	ldr.w	pc, [sp], #4
   1adf6:	bf00      	nop
   1adf8:	0001f51c 	.word	0x0001f51c
   1adfc:	2000dbe8 	.word	0x2000dbe8
   1ae00:	2000dcb0 	.word	0x2000dcb0

0001ae04 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1ae04:	4b01      	ldr	r3, [pc, #4]	; (1ae0c <oc_evq_set+0x8>)
   1ae06:	6018      	str	r0, [r3, #0]
}
   1ae08:	4770      	bx	lr
   1ae0a:	bf00      	nop
   1ae0c:	2000dccc 	.word	0x2000dccc

0001ae10 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1ae10:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1ae12:	7e03      	ldrb	r3, [r0, #24]
   1ae14:	f003 0307 	and.w	r3, r3, #7
   1ae18:	4a04      	ldr	r2, [pc, #16]	; (1ae2c <oc_send_buffer+0x1c>)
   1ae1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1ae1e:	b113      	cbz	r3, 1ae26 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1ae20:	68db      	ldr	r3, [r3, #12]
   1ae22:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1ae24:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1ae26:	f7fd fc13 	bl	18650 <os_mbuf_free_chain>
}
   1ae2a:	e7fb      	b.n	1ae24 <oc_send_buffer+0x14>
   1ae2c:	2000df60 	.word	0x2000df60

0001ae30 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae34:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1ae36:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1ae38:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1ae3a:	e002      	b.n	1ae42 <oc_send_multicast_message+0x12>
   1ae3c:	4635      	mov	r5, r6
   1ae3e:	3401      	adds	r4, #1
   1ae40:	462e      	mov	r6, r5
   1ae42:	2c07      	cmp	r4, #7
   1ae44:	dc12      	bgt.n	1ae6c <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1ae46:	4b0c      	ldr	r3, [pc, #48]	; (1ae78 <oc_send_multicast_message+0x48>)
   1ae48:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1ae4c:	2d00      	cmp	r5, #0
   1ae4e:	d0f5      	beq.n	1ae3c <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1ae50:	2e00      	cmp	r6, #0
   1ae52:	d0f4      	beq.n	1ae3e <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1ae54:	4638      	mov	r0, r7
   1ae56:	f7fd fc6b 	bl	18730 <os_mbuf_dup>
   1ae5a:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1ae5c:	6933      	ldr	r3, [r6, #16]
   1ae5e:	4638      	mov	r0, r7
   1ae60:	4798      	blx	r3
            if (!n) {
   1ae62:	f1b8 0f00 	cmp.w	r8, #0
   1ae66:	d005      	beq.n	1ae74 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1ae68:	4647      	mov	r7, r8
   1ae6a:	e7e8      	b.n	1ae3e <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1ae6c:	b116      	cbz	r6, 1ae74 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1ae6e:	6933      	ldr	r3, [r6, #16]
   1ae70:	4638      	mov	r0, r7
   1ae72:	4798      	blx	r3
    }
}
   1ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae78:	2000df60 	.word	0x2000df60

0001ae7c <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1ae7c:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1ae7e:	4b07      	ldr	r3, [pc, #28]	; (1ae9c <oc_init+0x20>)
   1ae80:	781b      	ldrb	r3, [r3, #0]
   1ae82:	b133      	cbz	r3, 1ae92 <oc_init+0x16>
    oc_ri_mem_init();
   1ae84:	f7ff ffa6 	bl	1add4 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1ae88:	f7fd fb60 	bl	1854c <os_eventq_dflt_get>
   1ae8c:	f7ff ffba 	bl	1ae04 <oc_evq_set>
}
   1ae90:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ae92:	461a      	mov	r2, r3
   1ae94:	4619      	mov	r1, r3
   1ae96:	4618      	mov	r0, r3
   1ae98:	f7fc ff9a 	bl	17dd0 <__assert_func>
   1ae9c:	2000ddbc 	.word	0x2000ddbc

0001aea0 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1aea0:	4770      	bx	lr

0001aea2 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1aea2:	4770      	bx	lr

0001aea4 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1aea4:	4770      	bx	lr

0001aea6 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1aea6:	4770      	bx	lr

0001aea8 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1aea8:	4770      	bx	lr
	...

0001aeac <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1aeac:	b500      	push	{lr}
   1aeae:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1aeb0:	4b05      	ldr	r3, [pc, #20]	; (1aec8 <oc_rep_init+0x1c>)
   1aeb2:	9300      	str	r3, [sp, #0]
   1aeb4:	4b05      	ldr	r3, [pc, #20]	; (1aecc <oc_rep_init+0x20>)
   1aeb6:	2218      	movs	r2, #24
   1aeb8:	2102      	movs	r1, #2
   1aeba:	4805      	ldr	r0, [pc, #20]	; (1aed0 <oc_rep_init+0x24>)
   1aebc:	f7fd fcd0 	bl	18860 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1aec0:	b003      	add	sp, #12
   1aec2:	f85d fb04 	ldr.w	pc, [sp], #4
   1aec6:	bf00      	nop
   1aec8:	0001f528 	.word	0x0001f528
   1aecc:	2000dcec 	.word	0x2000dcec
   1aed0:	2000dcd0 	.word	0x2000dcd0

0001aed4 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1aed4:	b570      	push	{r4, r5, r6, lr}
   1aed6:	b086      	sub	sp, #24
   1aed8:	4605      	mov	r5, r0
   1aeda:	460e      	mov	r6, r1
   1aedc:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1aede:	2300      	movs	r3, #0
   1aee0:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1aee2:	f000 f9ad 	bl	1b240 <mfg_init>

    mfg_open(&reader);
   1aee6:	a801      	add	r0, sp, #4
   1aee8:	f000 f9c6 	bl	1b278 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1aeec:	6823      	ldr	r3, [r4, #0]
   1aeee:	42ab      	cmp	r3, r5
   1aef0:	da29      	bge.n	1af46 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1aef2:	2102      	movs	r1, #2
   1aef4:	a801      	add	r0, sp, #4
   1aef6:	f000 f98c 	bl	1b212 <mfg_seek_next_with_type>
   1aefa:	4603      	mov	r3, r0
        switch (rc) {
   1aefc:	f110 0f0f 	cmn.w	r0, #15
   1af00:	d003      	beq.n	1af0a <flash_map_read_mfg+0x36>
   1af02:	b120      	cbz	r0, 1af0e <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1af04:	4618      	mov	r0, r3
   1af06:	b006      	add	sp, #24
   1af08:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1af0a:	2300      	movs	r3, #0
   1af0c:	e7fa      	b.n	1af04 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1af0e:	a903      	add	r1, sp, #12
   1af10:	a801      	add	r0, sp, #4
   1af12:	f000 f98b 	bl	1b22c <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1af16:	4603      	mov	r3, r0
   1af18:	2800      	cmp	r0, #0
   1af1a:	d1f3      	bne.n	1af04 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1af1c:	6823      	ldr	r3, [r4, #0]
   1af1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1af22:	009a      	lsls	r2, r3, #2
   1af24:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1af26:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1af2a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1af2c:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1af30:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1af32:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1af36:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1af38:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1af3c:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1af3e:	6823      	ldr	r3, [r4, #0]
   1af40:	3301      	adds	r3, #1
   1af42:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1af44:	e7d2      	b.n	1aeec <flash_map_read_mfg+0x18>
            return -1;
   1af46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1af4a:	e7db      	b.n	1af04 <flash_map_read_mfg+0x30>

0001af4c <flash_area_open>:
{
   1af4c:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1af4e:	4b0d      	ldr	r3, [pc, #52]	; (1af84 <flash_area_open+0x38>)
   1af50:	681d      	ldr	r5, [r3, #0]
   1af52:	b1a5      	cbz	r5, 1af7e <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1af54:	2300      	movs	r3, #0
   1af56:	4a0c      	ldr	r2, [pc, #48]	; (1af88 <flash_area_open+0x3c>)
   1af58:	6812      	ldr	r2, [r2, #0]
   1af5a:	429a      	cmp	r2, r3
   1af5c:	dd0b      	ble.n	1af76 <flash_area_open+0x2a>
        area = flash_map + i;
   1af5e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1af62:	00a2      	lsls	r2, r4, #2
   1af64:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1af66:	5caa      	ldrb	r2, [r5, r2]
   1af68:	4282      	cmp	r2, r0
   1af6a:	d001      	beq.n	1af70 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1af6c:	3301      	adds	r3, #1
   1af6e:	e7f2      	b.n	1af56 <flash_area_open+0xa>
            *fap = area;
   1af70:	600c      	str	r4, [r1, #0]
            return 0;
   1af72:	2000      	movs	r0, #0
   1af74:	e001      	b.n	1af7a <flash_area_open+0x2e>
    return SYS_ENOENT;
   1af76:	f06f 0003 	mvn.w	r0, #3
}
   1af7a:	bc30      	pop	{r4, r5}
   1af7c:	4770      	bx	lr
        return SYS_EACCES;
   1af7e:	f06f 0006 	mvn.w	r0, #6
   1af82:	e7fa      	b.n	1af7a <flash_area_open+0x2e>
   1af84:	2000df84 	.word	0x2000df84
   1af88:	2000df80 	.word	0x2000df80

0001af8c <flash_area_read>:
{
   1af8c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1af8e:	6884      	ldr	r4, [r0, #8]
   1af90:	428c      	cmp	r4, r1
   1af92:	d308      	bcc.n	1afa6 <flash_area_read+0x1a>
   1af94:	18cd      	adds	r5, r1, r3
   1af96:	42ac      	cmp	r4, r5
   1af98:	d308      	bcc.n	1afac <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1af9a:	6844      	ldr	r4, [r0, #4]
   1af9c:	4421      	add	r1, r4
   1af9e:	7840      	ldrb	r0, [r0, #1]
   1afa0:	f000 f9c8 	bl	1b334 <hal_flash_read>
}
   1afa4:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1afa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1afaa:	e7fb      	b.n	1afa4 <flash_area_read+0x18>
   1afac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1afb0:	e7f8      	b.n	1afa4 <flash_area_read+0x18>
	...

0001afb4 <flash_map_init>:

void
flash_map_init(void)
{
   1afb4:	b510      	push	{r4, lr}
   1afb6:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1afb8:	4b14      	ldr	r3, [pc, #80]	; (1b00c <flash_map_init+0x58>)
   1afba:	781b      	ldrb	r3, [r3, #0]
   1afbc:	b303      	cbz	r3, 1b000 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1afbe:	f000 f9a5 	bl	1b30c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1afc2:	b138      	cbz	r0, 1afd4 <flash_map_init+0x20>
   1afc4:	2000      	movs	r0, #0
   1afc6:	9000      	str	r0, [sp, #0]
   1afc8:	4b11      	ldr	r3, [pc, #68]	; (1b010 <flash_map_init+0x5c>)
   1afca:	681c      	ldr	r4, [r3, #0]
   1afcc:	4603      	mov	r3, r0
   1afce:	4602      	mov	r2, r0
   1afd0:	4601      	mov	r1, r0
   1afd2:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1afd4:	4b0f      	ldr	r3, [pc, #60]	; (1b014 <flash_map_init+0x60>)
   1afd6:	4a10      	ldr	r2, [pc, #64]	; (1b018 <flash_map_init+0x64>)
   1afd8:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1afda:	4b10      	ldr	r3, [pc, #64]	; (1b01c <flash_map_init+0x68>)
   1afdc:	2206      	movs	r2, #6
   1afde:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1afe0:	aa03      	add	r2, sp, #12
   1afe2:	490f      	ldr	r1, [pc, #60]	; (1b020 <flash_map_init+0x6c>)
   1afe4:	200a      	movs	r0, #10
   1afe6:	f7ff ff75 	bl	1aed4 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1afea:	b938      	cbnz	r0, 1affc <flash_map_init+0x48>
   1afec:	9b03      	ldr	r3, [sp, #12]
   1afee:	2b00      	cmp	r3, #0
   1aff0:	dd04      	ble.n	1affc <flash_map_init+0x48>
        flash_map = mfg_areas;
   1aff2:	4a08      	ldr	r2, [pc, #32]	; (1b014 <flash_map_init+0x60>)
   1aff4:	490a      	ldr	r1, [pc, #40]	; (1b020 <flash_map_init+0x6c>)
   1aff6:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1aff8:	4a08      	ldr	r2, [pc, #32]	; (1b01c <flash_map_init+0x68>)
   1affa:	6013      	str	r3, [r2, #0]
    }
}
   1affc:	b004      	add	sp, #16
   1affe:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b000:	461a      	mov	r2, r3
   1b002:	4619      	mov	r1, r3
   1b004:	4618      	mov	r0, r3
   1b006:	f7fc fee3 	bl	17dd0 <__assert_func>
   1b00a:	bf00      	nop
   1b00c:	2000ddbc 	.word	0x2000ddbc
   1b010:	20000104 	.word	0x20000104
   1b014:	2000df84 	.word	0x2000df84
   1b018:	0001f534 	.word	0x0001f534
   1b01c:	2000df80 	.word	0x2000df80
   1b020:	2000dd1c 	.word	0x2000dd1c

0001b024 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1b024:	4770      	bx	lr
	...

0001b028 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1b028:	b530      	push	{r4, r5, lr}
   1b02a:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1b02c:	7885      	ldrb	r5, [r0, #2]
   1b02e:	4b21      	ldr	r3, [pc, #132]	; (1b0b4 <mfg_seek_next_aux+0x8c>)
   1b030:	681b      	ldr	r3, [r3, #0]
   1b032:	429d      	cmp	r5, r3
   1b034:	da32      	bge.n	1b09c <mfg_seek_next_aux+0x74>
   1b036:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1b038:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1b03c:	0093      	lsls	r3, r2, #2
   1b03e:	a901      	add	r1, sp, #4
   1b040:	4a1d      	ldr	r2, [pc, #116]	; (1b0b8 <mfg_seek_next_aux+0x90>)
   1b042:	5cd0      	ldrb	r0, [r2, r3]
   1b044:	f7ff ff82 	bl	1af4c <flash_area_open>
    if (rc != 0) {
   1b048:	bb58      	cbnz	r0, 1b0a2 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1b04a:	6862      	ldr	r2, [r4, #4]
   1b04c:	b9c2      	cbnz	r2, 1b080 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1b04e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1b052:	00aa      	lsls	r2, r5, #2
   1b054:	4b18      	ldr	r3, [pc, #96]	; (1b0b8 <mfg_seek_next_aux+0x90>)
   1b056:	4413      	add	r3, r2
   1b058:	685b      	ldr	r3, [r3, #4]
   1b05a:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1b05c:	6861      	ldr	r1, [r4, #4]
   1b05e:	9801      	ldr	r0, [sp, #4]
   1b060:	6883      	ldr	r3, [r0, #8]
   1b062:	3b08      	subs	r3, #8
   1b064:	4299      	cmp	r1, r3
   1b066:	d310      	bcc.n	1b08a <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1b068:	78a3      	ldrb	r3, [r4, #2]
   1b06a:	1c59      	adds	r1, r3, #1
   1b06c:	4a11      	ldr	r2, [pc, #68]	; (1b0b4 <mfg_seek_next_aux+0x8c>)
   1b06e:	6812      	ldr	r2, [r2, #0]
   1b070:	4291      	cmp	r1, r2
   1b072:	da19      	bge.n	1b0a8 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1b074:	2200      	movs	r2, #0
   1b076:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1b078:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1b07a:	f06f 0305 	mvn.w	r3, #5
   1b07e:	e015      	b.n	1b0ac <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1b080:	7863      	ldrb	r3, [r4, #1]
   1b082:	4413      	add	r3, r2
   1b084:	3302      	adds	r3, #2
   1b086:	6063      	str	r3, [r4, #4]
   1b088:	e7e8      	b.n	1b05c <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1b08a:	2302      	movs	r3, #2
   1b08c:	4622      	mov	r2, r4
   1b08e:	f7ff ff7d 	bl	1af8c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1b092:	4603      	mov	r3, r0
   1b094:	b150      	cbz	r0, 1b0ac <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1b096:	f06f 0304 	mvn.w	r3, #4
   1b09a:	e007      	b.n	1b0ac <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1b09c:	f06f 0301 	mvn.w	r3, #1
   1b0a0:	e004      	b.n	1b0ac <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1b0a2:	f06f 0304 	mvn.w	r3, #4
   1b0a6:	e001      	b.n	1b0ac <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1b0a8:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1b0ac:	4618      	mov	r0, r3
   1b0ae:	b003      	add	sp, #12
   1b0b0:	bd30      	pop	{r4, r5, pc}
   1b0b2:	bf00      	nop
   1b0b4:	2000ddb0 	.word	0x2000ddb0
   1b0b8:	2000dd98 	.word	0x2000dd98

0001b0bc <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1b0bc:	b530      	push	{r4, r5, lr}
   1b0be:	b085      	sub	sp, #20
   1b0c0:	4605      	mov	r5, r0
   1b0c2:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1b0c4:	a903      	add	r1, sp, #12
   1b0c6:	f7ff ff41 	bl	1af4c <flash_area_open>
    if (rc != 0) {
   1b0ca:	b9e8      	cbnz	r0, 1b108 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1b0cc:	9803      	ldr	r0, [sp, #12]
   1b0ce:	6881      	ldr	r1, [r0, #8]
   1b0d0:	2308      	movs	r3, #8
   1b0d2:	aa01      	add	r2, sp, #4
   1b0d4:	3908      	subs	r1, #8
   1b0d6:	f7ff ff59 	bl	1af8c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1b0da:	4601      	mov	r1, r0
   1b0dc:	b9b8      	cbnz	r0, 1b10e <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1b0de:	9a02      	ldr	r2, [sp, #8]
   1b0e0:	4b11      	ldr	r3, [pc, #68]	; (1b128 <mfg_read_mmr+0x6c>)
   1b0e2:	429a      	cmp	r2, r3
   1b0e4:	d116      	bne.n	1b114 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1b0e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b0ea:	2b02      	cmp	r3, #2
   1b0ec:	d115      	bne.n	1b11a <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1b0ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b0f2:	9b03      	ldr	r3, [sp, #12]
   1b0f4:	689b      	ldr	r3, [r3, #8]
   1b0f6:	429a      	cmp	r2, r3
   1b0f8:	d812      	bhi.n	1b120 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1b0fa:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1b0fc:	7025      	strb	r5, [r4, #0]
   1b0fe:	6063      	str	r3, [r4, #4]
   1b100:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1b102:	4608      	mov	r0, r1
   1b104:	b005      	add	sp, #20
   1b106:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1b108:	f06f 0104 	mvn.w	r1, #4
   1b10c:	e7f9      	b.n	1b102 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1b10e:	f06f 0104 	mvn.w	r1, #4
   1b112:	e7f6      	b.n	1b102 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b114:	f06f 0108 	mvn.w	r1, #8
   1b118:	e7f3      	b.n	1b102 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1b11a:	f06f 010b 	mvn.w	r1, #11
   1b11e:	e7f0      	b.n	1b102 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b120:	f06f 0108 	mvn.w	r1, #8
   1b124:	e7ed      	b.n	1b102 <mfg_read_mmr+0x46>
   1b126:	bf00      	nop
   1b128:	3bb2a269 	.word	0x3bb2a269

0001b12c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1b12c:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b12e:	2300      	movs	r3, #0
   1b130:	4a11      	ldr	r2, [pc, #68]	; (1b178 <mfg_read_next_mmr+0x4c>)
   1b132:	6812      	ldr	r2, [r2, #0]
   1b134:	429a      	cmp	r2, r3
   1b136:	dd08      	ble.n	1b14a <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1b138:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b13c:	008a      	lsls	r2, r1, #2
   1b13e:	490f      	ldr	r1, [pc, #60]	; (1b17c <mfg_read_next_mmr+0x50>)
   1b140:	5c8a      	ldrb	r2, [r1, r2]
   1b142:	4282      	cmp	r2, r0
   1b144:	d011      	beq.n	1b16a <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b146:	3301      	adds	r3, #1
   1b148:	e7f2      	b.n	1b130 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1b14a:	2a01      	cmp	r2, #1
   1b14c:	dc11      	bgt.n	1b172 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1b14e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b152:	0093      	lsls	r3, r2, #2
   1b154:	4909      	ldr	r1, [pc, #36]	; (1b17c <mfg_read_next_mmr+0x50>)
   1b156:	4419      	add	r1, r3
   1b158:	f7ff ffb0 	bl	1b0bc <mfg_read_mmr>
    if (rc != 0) {
   1b15c:	4603      	mov	r3, r0
   1b15e:	b930      	cbnz	r0, 1b16e <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1b160:	4905      	ldr	r1, [pc, #20]	; (1b178 <mfg_read_next_mmr+0x4c>)
   1b162:	680a      	ldr	r2, [r1, #0]
   1b164:	3201      	adds	r2, #1
   1b166:	600a      	str	r2, [r1, #0]
    return 0;
   1b168:	e001      	b.n	1b16e <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1b16a:	f06f 030a 	mvn.w	r3, #10
}
   1b16e:	4618      	mov	r0, r3
   1b170:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1b172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b176:	e7fa      	b.n	1b16e <mfg_read_next_mmr+0x42>
   1b178:	2000ddb0 	.word	0x2000ddb0
   1b17c:	2000dd98 	.word	0x2000dd98

0001b180 <mfg_open_flash_area>:
{
   1b180:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b182:	7883      	ldrb	r3, [r0, #2]
   1b184:	4a0b      	ldr	r2, [pc, #44]	; (1b1b4 <mfg_open_flash_area+0x34>)
   1b186:	6812      	ldr	r2, [r2, #0]
   1b188:	4293      	cmp	r3, r2
   1b18a:	da0a      	bge.n	1b1a2 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1b18c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b190:	009a      	lsls	r2, r3, #2
   1b192:	4b09      	ldr	r3, [pc, #36]	; (1b1b8 <mfg_open_flash_area+0x38>)
   1b194:	5c98      	ldrb	r0, [r3, r2]
   1b196:	f7ff fed9 	bl	1af4c <flash_area_open>
    if (rc != 0) {
   1b19a:	4603      	mov	r3, r0
   1b19c:	b938      	cbnz	r0, 1b1ae <mfg_open_flash_area+0x2e>
}
   1b19e:	4618      	mov	r0, r3
   1b1a0:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b1a2:	2300      	movs	r3, #0
   1b1a4:	461a      	mov	r2, r3
   1b1a6:	4619      	mov	r1, r3
   1b1a8:	4618      	mov	r0, r3
   1b1aa:	f7fc fe11 	bl	17dd0 <__assert_func>
        return SYS_EIO;
   1b1ae:	f06f 0304 	mvn.w	r3, #4
   1b1b2:	e7f4      	b.n	1b19e <mfg_open_flash_area+0x1e>
   1b1b4:	2000ddb0 	.word	0x2000ddb0
   1b1b8:	2000dd98 	.word	0x2000dd98

0001b1bc <mfg_read_tlv_body>:
{
   1b1bc:	b570      	push	{r4, r5, r6, lr}
   1b1be:	b082      	sub	sp, #8
   1b1c0:	4606      	mov	r6, r0
   1b1c2:	460c      	mov	r4, r1
   1b1c4:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1b1c6:	a901      	add	r1, sp, #4
   1b1c8:	f7ff ffda 	bl	1b180 <mfg_open_flash_area>
    if (rc != 0) {
   1b1cc:	4603      	mov	r3, r0
   1b1ce:	b110      	cbz	r0, 1b1d6 <mfg_read_tlv_body+0x1a>
}
   1b1d0:	4618      	mov	r0, r3
   1b1d2:	b002      	add	sp, #8
   1b1d4:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1b1d6:	462a      	mov	r2, r5
   1b1d8:	2100      	movs	r1, #0
   1b1da:	4620      	mov	r0, r4
   1b1dc:	f7fe f9fb 	bl	195d6 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1b1e0:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1b1e2:	6871      	ldr	r1, [r6, #4]
   1b1e4:	42ab      	cmp	r3, r5
   1b1e6:	bfa8      	it	ge
   1b1e8:	462b      	movge	r3, r5
   1b1ea:	4622      	mov	r2, r4
   1b1ec:	3102      	adds	r1, #2
   1b1ee:	9801      	ldr	r0, [sp, #4]
   1b1f0:	f7ff fecc 	bl	1af8c <flash_area_read>
    if (rc != 0) {
   1b1f4:	4603      	mov	r3, r0
   1b1f6:	2800      	cmp	r0, #0
   1b1f8:	d0ea      	beq.n	1b1d0 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1b1fa:	f06f 0304 	mvn.w	r3, #4
   1b1fe:	e7e7      	b.n	1b1d0 <mfg_read_tlv_body+0x14>

0001b200 <mfg_seek_next>:
{
   1b200:	b510      	push	{r4, lr}
   1b202:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1b204:	4620      	mov	r0, r4
   1b206:	f7ff ff0f 	bl	1b028 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1b20a:	f110 0f06 	cmn.w	r0, #6
   1b20e:	d0f9      	beq.n	1b204 <mfg_seek_next+0x4>
}
   1b210:	bd10      	pop	{r4, pc}

0001b212 <mfg_seek_next_with_type>:
{
   1b212:	b538      	push	{r3, r4, r5, lr}
   1b214:	4604      	mov	r4, r0
   1b216:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1b218:	4620      	mov	r0, r4
   1b21a:	f7ff fff1 	bl	1b200 <mfg_seek_next>
        if (rc != 0) {
   1b21e:	4602      	mov	r2, r0
   1b220:	b910      	cbnz	r0, 1b228 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1b222:	7823      	ldrb	r3, [r4, #0]
   1b224:	42ab      	cmp	r3, r5
   1b226:	d1f7      	bne.n	1b218 <mfg_seek_next_with_type+0x6>
}
   1b228:	4610      	mov	r0, r2
   1b22a:	bd38      	pop	{r3, r4, r5, pc}

0001b22c <mfg_read_tlv_flash_area>:
{
   1b22c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1b22e:	220a      	movs	r2, #10
   1b230:	f7ff ffc4 	bl	1b1bc <mfg_read_tlv_body>
}
   1b234:	bd08      	pop	{r3, pc}

0001b236 <mfg_read_tlv_mmr_ref>:
{
   1b236:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1b238:	2201      	movs	r2, #1
   1b23a:	f7ff ffbf 	bl	1b1bc <mfg_read_tlv_body>
}
   1b23e:	bd08      	pop	{r3, pc}

0001b240 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1b240:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1b242:	4b0b      	ldr	r3, [pc, #44]	; (1b270 <mfg_init+0x30>)
   1b244:	781b      	ldrb	r3, [r3, #0]
   1b246:	b94b      	cbnz	r3, 1b25c <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1b248:	4b09      	ldr	r3, [pc, #36]	; (1b270 <mfg_init+0x30>)
   1b24a:	2201      	movs	r2, #1
   1b24c:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b24e:	4b09      	ldr	r3, [pc, #36]	; (1b274 <mfg_init+0x34>)
   1b250:	781b      	ldrb	r3, [r3, #0]
   1b252:	b123      	cbz	r3, 1b25e <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1b254:	2000      	movs	r0, #0
   1b256:	f7ff ff69 	bl	1b12c <mfg_read_next_mmr>
    if (rc != 0) {
   1b25a:	b128      	cbz	r0, 1b268 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1b25c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b25e:	461a      	mov	r2, r3
   1b260:	4619      	mov	r1, r3
   1b262:	4618      	mov	r0, r3
   1b264:	f7fc fdb4 	bl	17dd0 <__assert_func>
    rc = mfg_read_mmr_refs();
   1b268:	f000 f80e 	bl	1b288 <mfg_read_mmr_refs>
err:
   1b26c:	e7f6      	b.n	1b25c <mfg_init+0x1c>
   1b26e:	bf00      	nop
   1b270:	2000dd94 	.word	0x2000dd94
   1b274:	2000ddbc 	.word	0x2000ddbc

0001b278 <mfg_open>:
{
   1b278:	b510      	push	{r4, lr}
   1b27a:	4604      	mov	r4, r0
    mfg_init();
   1b27c:	f7ff ffe0 	bl	1b240 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1b280:	2300      	movs	r3, #0
   1b282:	6023      	str	r3, [r4, #0]
   1b284:	6063      	str	r3, [r4, #4]
}
   1b286:	bd10      	pop	{r4, pc}

0001b288 <mfg_read_mmr_refs>:
{
   1b288:	b500      	push	{lr}
   1b28a:	b085      	sub	sp, #20
    mfg_open(&reader);
   1b28c:	a801      	add	r0, sp, #4
   1b28e:	f7ff fff3 	bl	1b278 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1b292:	2104      	movs	r1, #4
   1b294:	eb0d 0001 	add.w	r0, sp, r1
   1b298:	f7ff ffbb 	bl	1b212 <mfg_seek_next_with_type>
   1b29c:	4603      	mov	r3, r0
        switch (rc) {
   1b29e:	f110 0f0f 	cmn.w	r0, #15
   1b2a2:	d004      	beq.n	1b2ae <mfg_read_mmr_refs+0x26>
   1b2a4:	b128      	cbz	r0, 1b2b2 <mfg_read_mmr_refs+0x2a>
}
   1b2a6:	4618      	mov	r0, r3
   1b2a8:	b005      	add	sp, #20
   1b2aa:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1b2ae:	2300      	movs	r3, #0
   1b2b0:	e7f9      	b.n	1b2a6 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1b2b2:	a903      	add	r1, sp, #12
   1b2b4:	a801      	add	r0, sp, #4
   1b2b6:	f7ff ffbe 	bl	1b236 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1b2ba:	4603      	mov	r3, r0
   1b2bc:	2800      	cmp	r0, #0
   1b2be:	d1f2      	bne.n	1b2a6 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1b2c0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b2c4:	f7ff ff32 	bl	1b12c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1b2c8:	4603      	mov	r3, r0
   1b2ca:	2800      	cmp	r0, #0
   1b2cc:	d0e1      	beq.n	1b292 <mfg_read_mmr_refs+0xa>
   1b2ce:	f110 0f0b 	cmn.w	r0, #11
   1b2d2:	d0de      	beq.n	1b292 <mfg_read_mmr_refs+0xa>
   1b2d4:	e7e7      	b.n	1b2a6 <mfg_read_mmr_refs+0x1e>
	...

0001b2d8 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1b2d8:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1b2da:	4803      	ldr	r0, [pc, #12]	; (1b2e8 <__wrap_coap_receive+0x10>)
   1b2dc:	f7fb feb0 	bl	17040 <console_printf>
    return -1;
}
   1b2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b2e4:	bd08      	pop	{r3, pc}
   1b2e6:	bf00      	nop
   1b2e8:	0001f57c 	.word	0x0001f57c

0001b2ec <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1b2ec:	4770      	bx	lr

0001b2ee <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1b2ee:	6843      	ldr	r3, [r0, #4]
   1b2f0:	428b      	cmp	r3, r1
   1b2f2:	d808      	bhi.n	1b306 <hal_flash_check_addr+0x18>
   1b2f4:	6882      	ldr	r2, [r0, #8]
   1b2f6:	4413      	add	r3, r2
   1b2f8:	428b      	cmp	r3, r1
   1b2fa:	d301      	bcc.n	1b300 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1b2fc:	2000      	movs	r0, #0
}
   1b2fe:	4770      	bx	lr
        return SYS_EINVAL;
   1b300:	f06f 0001 	mvn.w	r0, #1
   1b304:	4770      	bx	lr
   1b306:	f06f 0001 	mvn.w	r0, #1
   1b30a:	4770      	bx	lr

0001b30c <hal_flash_init>:
{
   1b30c:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1b30e:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1b310:	462c      	mov	r4, r5
   1b312:	e001      	b.n	1b318 <hal_flash_init+0xc>
   1b314:	3401      	adds	r4, #1
   1b316:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1b318:	4620      	mov	r0, r4
   1b31a:	f7fe fce3 	bl	19ce4 <hal_bsp_flash_dev>
        if (!hf) {
   1b31e:	b138      	cbz	r0, 1b330 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1b320:	6802      	ldr	r2, [r0, #0]
   1b322:	6952      	ldr	r2, [r2, #20]
   1b324:	4790      	blx	r2
   1b326:	2800      	cmp	r0, #0
   1b328:	d0f4      	beq.n	1b314 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1b32a:	f06f 0504 	mvn.w	r5, #4
   1b32e:	e7f1      	b.n	1b314 <hal_flash_init+0x8>
}
   1b330:	4628      	mov	r0, r5
   1b332:	bd38      	pop	{r3, r4, r5, pc}

0001b334 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1b334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b338:	460d      	mov	r5, r1
   1b33a:	4690      	mov	r8, r2
   1b33c:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1b33e:	f7fe fcd1 	bl	19ce4 <hal_bsp_flash_dev>
    if (!hf) {
   1b342:	b1c0      	cbz	r0, 1b376 <hal_flash_read+0x42>
   1b344:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1b346:	4629      	mov	r1, r5
   1b348:	f7ff ffd1 	bl	1b2ee <hal_flash_check_addr>
   1b34c:	b9b0      	cbnz	r0, 1b37c <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1b34e:	19a9      	adds	r1, r5, r6
   1b350:	4620      	mov	r0, r4
   1b352:	f7ff ffcc 	bl	1b2ee <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1b356:	b9a0      	cbnz	r0, 1b382 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1b358:	6823      	ldr	r3, [r4, #0]
   1b35a:	681f      	ldr	r7, [r3, #0]
   1b35c:	4633      	mov	r3, r6
   1b35e:	4642      	mov	r2, r8
   1b360:	4629      	mov	r1, r5
   1b362:	4620      	mov	r0, r4
   1b364:	47b8      	blx	r7
    if (rc != 0) {
   1b366:	4603      	mov	r3, r0
   1b368:	b910      	cbnz	r0, 1b370 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1b36a:	4618      	mov	r0, r3
   1b36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1b370:	f06f 0304 	mvn.w	r3, #4
   1b374:	e7f9      	b.n	1b36a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b376:	f06f 0301 	mvn.w	r3, #1
   1b37a:	e7f6      	b.n	1b36a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b37c:	f06f 0301 	mvn.w	r3, #1
   1b380:	e7f3      	b.n	1b36a <hal_flash_read+0x36>
   1b382:	f06f 0301 	mvn.w	r3, #1
   1b386:	e7f0      	b.n	1b36a <hal_flash_read+0x36>

0001b388 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1b388:	2010      	movs	r0, #16
   1b38a:	4770      	bx	lr

0001b38c <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1b38c:	b570      	push	{r4, r5, r6, lr}
   1b38e:	4606      	mov	r6, r0
   1b390:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1b392:	460d      	mov	r5, r1
   1b394:	2908      	cmp	r1, #8
   1b396:	bf28      	it	cs
   1b398:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1b39a:	462a      	mov	r2, r5
   1b39c:	4906      	ldr	r1, [pc, #24]	; (1b3b8 <hal_bsp_hw_id+0x2c>)
   1b39e:	f7fe f90d 	bl	195bc <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1b3a2:	1b64      	subs	r4, r4, r5
   1b3a4:	2c08      	cmp	r4, #8
   1b3a6:	bf28      	it	cs
   1b3a8:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1b3aa:	4622      	mov	r2, r4
   1b3ac:	4903      	ldr	r1, [pc, #12]	; (1b3bc <hal_bsp_hw_id+0x30>)
   1b3ae:	1970      	adds	r0, r6, r5
   1b3b0:	f7fe f904 	bl	195bc <memcpy>

    return len + cnt;
}
   1b3b4:	1928      	adds	r0, r5, r4
   1b3b6:	bd70      	pop	{r4, r5, r6, pc}
   1b3b8:	10000060 	.word	0x10000060
   1b3bc:	100000a4 	.word	0x100000a4

0001b3c0 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1b3c0:	b40e      	push	{r1, r2, r3}
   1b3c2:	b500      	push	{lr}
   1b3c4:	b082      	sub	sp, #8
   1b3c6:	ab03      	add	r3, sp, #12
   1b3c8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1b3cc:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1b3ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b3d2:	f7fe fbef 	bl	19bb4 <vsnprintf>
	va_end(ap);

	return rv;
}
   1b3d6:	b002      	add	sp, #8
   1b3d8:	f85d eb04 	ldr.w	lr, [sp], #4
   1b3dc:	b003      	add	sp, #12
   1b3de:	4770      	bx	lr

0001b3e0 <__aeabi_uldivmod>:
   1b3e0:	b953      	cbnz	r3, 1b3f8 <__aeabi_uldivmod+0x18>
   1b3e2:	b94a      	cbnz	r2, 1b3f8 <__aeabi_uldivmod+0x18>
   1b3e4:	2900      	cmp	r1, #0
   1b3e6:	bf08      	it	eq
   1b3e8:	2800      	cmpeq	r0, #0
   1b3ea:	bf1c      	itt	ne
   1b3ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1b3f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b3f4:	f000 b972 	b.w	1b6dc <__aeabi_idiv0>
   1b3f8:	f1ad 0c08 	sub.w	ip, sp, #8
   1b3fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1b400:	f000 f806 	bl	1b410 <__udivmoddi4>
   1b404:	f8dd e004 	ldr.w	lr, [sp, #4]
   1b408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b40c:	b004      	add	sp, #16
   1b40e:	4770      	bx	lr

0001b410 <__udivmoddi4>:
   1b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b414:	9e08      	ldr	r6, [sp, #32]
   1b416:	4604      	mov	r4, r0
   1b418:	4688      	mov	r8, r1
   1b41a:	2b00      	cmp	r3, #0
   1b41c:	d14b      	bne.n	1b4b6 <__udivmoddi4+0xa6>
   1b41e:	428a      	cmp	r2, r1
   1b420:	4615      	mov	r5, r2
   1b422:	d967      	bls.n	1b4f4 <__udivmoddi4+0xe4>
   1b424:	fab2 f282 	clz	r2, r2
   1b428:	b14a      	cbz	r2, 1b43e <__udivmoddi4+0x2e>
   1b42a:	f1c2 0720 	rsb	r7, r2, #32
   1b42e:	fa01 f302 	lsl.w	r3, r1, r2
   1b432:	fa20 f707 	lsr.w	r7, r0, r7
   1b436:	4095      	lsls	r5, r2
   1b438:	ea47 0803 	orr.w	r8, r7, r3
   1b43c:	4094      	lsls	r4, r2
   1b43e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b442:	0c23      	lsrs	r3, r4, #16
   1b444:	fbb8 f7fe 	udiv	r7, r8, lr
   1b448:	fa1f fc85 	uxth.w	ip, r5
   1b44c:	fb0e 8817 	mls	r8, lr, r7, r8
   1b450:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1b454:	fb07 f10c 	mul.w	r1, r7, ip
   1b458:	4299      	cmp	r1, r3
   1b45a:	d909      	bls.n	1b470 <__udivmoddi4+0x60>
   1b45c:	18eb      	adds	r3, r5, r3
   1b45e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1b462:	f080 811b 	bcs.w	1b69c <__udivmoddi4+0x28c>
   1b466:	4299      	cmp	r1, r3
   1b468:	f240 8118 	bls.w	1b69c <__udivmoddi4+0x28c>
   1b46c:	3f02      	subs	r7, #2
   1b46e:	442b      	add	r3, r5
   1b470:	1a5b      	subs	r3, r3, r1
   1b472:	b2a4      	uxth	r4, r4
   1b474:	fbb3 f0fe 	udiv	r0, r3, lr
   1b478:	fb0e 3310 	mls	r3, lr, r0, r3
   1b47c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1b480:	fb00 fc0c 	mul.w	ip, r0, ip
   1b484:	45a4      	cmp	ip, r4
   1b486:	d909      	bls.n	1b49c <__udivmoddi4+0x8c>
   1b488:	192c      	adds	r4, r5, r4
   1b48a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b48e:	f080 8107 	bcs.w	1b6a0 <__udivmoddi4+0x290>
   1b492:	45a4      	cmp	ip, r4
   1b494:	f240 8104 	bls.w	1b6a0 <__udivmoddi4+0x290>
   1b498:	3802      	subs	r0, #2
   1b49a:	442c      	add	r4, r5
   1b49c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1b4a0:	eba4 040c 	sub.w	r4, r4, ip
   1b4a4:	2700      	movs	r7, #0
   1b4a6:	b11e      	cbz	r6, 1b4b0 <__udivmoddi4+0xa0>
   1b4a8:	40d4      	lsrs	r4, r2
   1b4aa:	2300      	movs	r3, #0
   1b4ac:	e9c6 4300 	strd	r4, r3, [r6]
   1b4b0:	4639      	mov	r1, r7
   1b4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b4b6:	428b      	cmp	r3, r1
   1b4b8:	d909      	bls.n	1b4ce <__udivmoddi4+0xbe>
   1b4ba:	2e00      	cmp	r6, #0
   1b4bc:	f000 80eb 	beq.w	1b696 <__udivmoddi4+0x286>
   1b4c0:	2700      	movs	r7, #0
   1b4c2:	e9c6 0100 	strd	r0, r1, [r6]
   1b4c6:	4638      	mov	r0, r7
   1b4c8:	4639      	mov	r1, r7
   1b4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b4ce:	fab3 f783 	clz	r7, r3
   1b4d2:	2f00      	cmp	r7, #0
   1b4d4:	d147      	bne.n	1b566 <__udivmoddi4+0x156>
   1b4d6:	428b      	cmp	r3, r1
   1b4d8:	d302      	bcc.n	1b4e0 <__udivmoddi4+0xd0>
   1b4da:	4282      	cmp	r2, r0
   1b4dc:	f200 80fa 	bhi.w	1b6d4 <__udivmoddi4+0x2c4>
   1b4e0:	1a84      	subs	r4, r0, r2
   1b4e2:	eb61 0303 	sbc.w	r3, r1, r3
   1b4e6:	2001      	movs	r0, #1
   1b4e8:	4698      	mov	r8, r3
   1b4ea:	2e00      	cmp	r6, #0
   1b4ec:	d0e0      	beq.n	1b4b0 <__udivmoddi4+0xa0>
   1b4ee:	e9c6 4800 	strd	r4, r8, [r6]
   1b4f2:	e7dd      	b.n	1b4b0 <__udivmoddi4+0xa0>
   1b4f4:	b902      	cbnz	r2, 1b4f8 <__udivmoddi4+0xe8>
   1b4f6:	deff      	udf	#255	; 0xff
   1b4f8:	fab2 f282 	clz	r2, r2
   1b4fc:	2a00      	cmp	r2, #0
   1b4fe:	f040 808f 	bne.w	1b620 <__udivmoddi4+0x210>
   1b502:	1b49      	subs	r1, r1, r5
   1b504:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b508:	fa1f f885 	uxth.w	r8, r5
   1b50c:	2701      	movs	r7, #1
   1b50e:	fbb1 fcfe 	udiv	ip, r1, lr
   1b512:	0c23      	lsrs	r3, r4, #16
   1b514:	fb0e 111c 	mls	r1, lr, ip, r1
   1b518:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b51c:	fb08 f10c 	mul.w	r1, r8, ip
   1b520:	4299      	cmp	r1, r3
   1b522:	d907      	bls.n	1b534 <__udivmoddi4+0x124>
   1b524:	18eb      	adds	r3, r5, r3
   1b526:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1b52a:	d202      	bcs.n	1b532 <__udivmoddi4+0x122>
   1b52c:	4299      	cmp	r1, r3
   1b52e:	f200 80cd 	bhi.w	1b6cc <__udivmoddi4+0x2bc>
   1b532:	4684      	mov	ip, r0
   1b534:	1a59      	subs	r1, r3, r1
   1b536:	b2a3      	uxth	r3, r4
   1b538:	fbb1 f0fe 	udiv	r0, r1, lr
   1b53c:	fb0e 1410 	mls	r4, lr, r0, r1
   1b540:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1b544:	fb08 f800 	mul.w	r8, r8, r0
   1b548:	45a0      	cmp	r8, r4
   1b54a:	d907      	bls.n	1b55c <__udivmoddi4+0x14c>
   1b54c:	192c      	adds	r4, r5, r4
   1b54e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b552:	d202      	bcs.n	1b55a <__udivmoddi4+0x14a>
   1b554:	45a0      	cmp	r8, r4
   1b556:	f200 80b6 	bhi.w	1b6c6 <__udivmoddi4+0x2b6>
   1b55a:	4618      	mov	r0, r3
   1b55c:	eba4 0408 	sub.w	r4, r4, r8
   1b560:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1b564:	e79f      	b.n	1b4a6 <__udivmoddi4+0x96>
   1b566:	f1c7 0c20 	rsb	ip, r7, #32
   1b56a:	40bb      	lsls	r3, r7
   1b56c:	fa22 fe0c 	lsr.w	lr, r2, ip
   1b570:	ea4e 0e03 	orr.w	lr, lr, r3
   1b574:	fa01 f407 	lsl.w	r4, r1, r7
   1b578:	fa20 f50c 	lsr.w	r5, r0, ip
   1b57c:	fa21 f30c 	lsr.w	r3, r1, ip
   1b580:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1b584:	4325      	orrs	r5, r4
   1b586:	fbb3 f9f8 	udiv	r9, r3, r8
   1b58a:	0c2c      	lsrs	r4, r5, #16
   1b58c:	fb08 3319 	mls	r3, r8, r9, r3
   1b590:	fa1f fa8e 	uxth.w	sl, lr
   1b594:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1b598:	fb09 f40a 	mul.w	r4, r9, sl
   1b59c:	429c      	cmp	r4, r3
   1b59e:	fa02 f207 	lsl.w	r2, r2, r7
   1b5a2:	fa00 f107 	lsl.w	r1, r0, r7
   1b5a6:	d90b      	bls.n	1b5c0 <__udivmoddi4+0x1b0>
   1b5a8:	eb1e 0303 	adds.w	r3, lr, r3
   1b5ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1b5b0:	f080 8087 	bcs.w	1b6c2 <__udivmoddi4+0x2b2>
   1b5b4:	429c      	cmp	r4, r3
   1b5b6:	f240 8084 	bls.w	1b6c2 <__udivmoddi4+0x2b2>
   1b5ba:	f1a9 0902 	sub.w	r9, r9, #2
   1b5be:	4473      	add	r3, lr
   1b5c0:	1b1b      	subs	r3, r3, r4
   1b5c2:	b2ad      	uxth	r5, r5
   1b5c4:	fbb3 f0f8 	udiv	r0, r3, r8
   1b5c8:	fb08 3310 	mls	r3, r8, r0, r3
   1b5cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1b5d0:	fb00 fa0a 	mul.w	sl, r0, sl
   1b5d4:	45a2      	cmp	sl, r4
   1b5d6:	d908      	bls.n	1b5ea <__udivmoddi4+0x1da>
   1b5d8:	eb1e 0404 	adds.w	r4, lr, r4
   1b5dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b5e0:	d26b      	bcs.n	1b6ba <__udivmoddi4+0x2aa>
   1b5e2:	45a2      	cmp	sl, r4
   1b5e4:	d969      	bls.n	1b6ba <__udivmoddi4+0x2aa>
   1b5e6:	3802      	subs	r0, #2
   1b5e8:	4474      	add	r4, lr
   1b5ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1b5ee:	fba0 8902 	umull	r8, r9, r0, r2
   1b5f2:	eba4 040a 	sub.w	r4, r4, sl
   1b5f6:	454c      	cmp	r4, r9
   1b5f8:	46c2      	mov	sl, r8
   1b5fa:	464b      	mov	r3, r9
   1b5fc:	d354      	bcc.n	1b6a8 <__udivmoddi4+0x298>
   1b5fe:	d051      	beq.n	1b6a4 <__udivmoddi4+0x294>
   1b600:	2e00      	cmp	r6, #0
   1b602:	d069      	beq.n	1b6d8 <__udivmoddi4+0x2c8>
   1b604:	ebb1 050a 	subs.w	r5, r1, sl
   1b608:	eb64 0403 	sbc.w	r4, r4, r3
   1b60c:	fa04 fc0c 	lsl.w	ip, r4, ip
   1b610:	40fd      	lsrs	r5, r7
   1b612:	40fc      	lsrs	r4, r7
   1b614:	ea4c 0505 	orr.w	r5, ip, r5
   1b618:	e9c6 5400 	strd	r5, r4, [r6]
   1b61c:	2700      	movs	r7, #0
   1b61e:	e747      	b.n	1b4b0 <__udivmoddi4+0xa0>
   1b620:	f1c2 0320 	rsb	r3, r2, #32
   1b624:	fa20 f703 	lsr.w	r7, r0, r3
   1b628:	4095      	lsls	r5, r2
   1b62a:	fa01 f002 	lsl.w	r0, r1, r2
   1b62e:	fa21 f303 	lsr.w	r3, r1, r3
   1b632:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b636:	4338      	orrs	r0, r7
   1b638:	0c01      	lsrs	r1, r0, #16
   1b63a:	fbb3 f7fe 	udiv	r7, r3, lr
   1b63e:	fa1f f885 	uxth.w	r8, r5
   1b642:	fb0e 3317 	mls	r3, lr, r7, r3
   1b646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1b64a:	fb07 f308 	mul.w	r3, r7, r8
   1b64e:	428b      	cmp	r3, r1
   1b650:	fa04 f402 	lsl.w	r4, r4, r2
   1b654:	d907      	bls.n	1b666 <__udivmoddi4+0x256>
   1b656:	1869      	adds	r1, r5, r1
   1b658:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1b65c:	d22f      	bcs.n	1b6be <__udivmoddi4+0x2ae>
   1b65e:	428b      	cmp	r3, r1
   1b660:	d92d      	bls.n	1b6be <__udivmoddi4+0x2ae>
   1b662:	3f02      	subs	r7, #2
   1b664:	4429      	add	r1, r5
   1b666:	1acb      	subs	r3, r1, r3
   1b668:	b281      	uxth	r1, r0
   1b66a:	fbb3 f0fe 	udiv	r0, r3, lr
   1b66e:	fb0e 3310 	mls	r3, lr, r0, r3
   1b672:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1b676:	fb00 f308 	mul.w	r3, r0, r8
   1b67a:	428b      	cmp	r3, r1
   1b67c:	d907      	bls.n	1b68e <__udivmoddi4+0x27e>
   1b67e:	1869      	adds	r1, r5, r1
   1b680:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1b684:	d217      	bcs.n	1b6b6 <__udivmoddi4+0x2a6>
   1b686:	428b      	cmp	r3, r1
   1b688:	d915      	bls.n	1b6b6 <__udivmoddi4+0x2a6>
   1b68a:	3802      	subs	r0, #2
   1b68c:	4429      	add	r1, r5
   1b68e:	1ac9      	subs	r1, r1, r3
   1b690:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1b694:	e73b      	b.n	1b50e <__udivmoddi4+0xfe>
   1b696:	4637      	mov	r7, r6
   1b698:	4630      	mov	r0, r6
   1b69a:	e709      	b.n	1b4b0 <__udivmoddi4+0xa0>
   1b69c:	4607      	mov	r7, r0
   1b69e:	e6e7      	b.n	1b470 <__udivmoddi4+0x60>
   1b6a0:	4618      	mov	r0, r3
   1b6a2:	e6fb      	b.n	1b49c <__udivmoddi4+0x8c>
   1b6a4:	4541      	cmp	r1, r8
   1b6a6:	d2ab      	bcs.n	1b600 <__udivmoddi4+0x1f0>
   1b6a8:	ebb8 0a02 	subs.w	sl, r8, r2
   1b6ac:	eb69 020e 	sbc.w	r2, r9, lr
   1b6b0:	3801      	subs	r0, #1
   1b6b2:	4613      	mov	r3, r2
   1b6b4:	e7a4      	b.n	1b600 <__udivmoddi4+0x1f0>
   1b6b6:	4660      	mov	r0, ip
   1b6b8:	e7e9      	b.n	1b68e <__udivmoddi4+0x27e>
   1b6ba:	4618      	mov	r0, r3
   1b6bc:	e795      	b.n	1b5ea <__udivmoddi4+0x1da>
   1b6be:	4667      	mov	r7, ip
   1b6c0:	e7d1      	b.n	1b666 <__udivmoddi4+0x256>
   1b6c2:	4681      	mov	r9, r0
   1b6c4:	e77c      	b.n	1b5c0 <__udivmoddi4+0x1b0>
   1b6c6:	3802      	subs	r0, #2
   1b6c8:	442c      	add	r4, r5
   1b6ca:	e747      	b.n	1b55c <__udivmoddi4+0x14c>
   1b6cc:	f1ac 0c02 	sub.w	ip, ip, #2
   1b6d0:	442b      	add	r3, r5
   1b6d2:	e72f      	b.n	1b534 <__udivmoddi4+0x124>
   1b6d4:	4638      	mov	r0, r7
   1b6d6:	e708      	b.n	1b4ea <__udivmoddi4+0xda>
   1b6d8:	4637      	mov	r7, r6
   1b6da:	e6e9      	b.n	1b4b0 <__udivmoddi4+0xa0>

0001b6dc <__aeabi_idiv0>:
   1b6dc:	4770      	bx	lr
   1b6de:	bf00      	nop

0001b6e0 <__aeabi_memclr>:
   1b6e0:	2200      	movs	r2, #0
   1b6e2:	f000 b803 	b.w	1b6ec <__aeabi_memset>
   1b6e6:	bf00      	nop

0001b6e8 <__aeabi_memcpy>:
   1b6e8:	f7fd bf68 	b.w	195bc <memcpy>

0001b6ec <__aeabi_memset>:
   1b6ec:	b470      	push	{r4, r5, r6}
   1b6ee:	0784      	lsls	r4, r0, #30
   1b6f0:	d046      	beq.n	1b780 <__aeabi_memset+0x94>
   1b6f2:	1e4c      	subs	r4, r1, #1
   1b6f4:	2900      	cmp	r1, #0
   1b6f6:	d041      	beq.n	1b77c <__aeabi_memset+0x90>
   1b6f8:	b2d5      	uxtb	r5, r2
   1b6fa:	4603      	mov	r3, r0
   1b6fc:	e002      	b.n	1b704 <__aeabi_memset+0x18>
   1b6fe:	1e61      	subs	r1, r4, #1
   1b700:	b3e4      	cbz	r4, 1b77c <__aeabi_memset+0x90>
   1b702:	460c      	mov	r4, r1
   1b704:	f803 5b01 	strb.w	r5, [r3], #1
   1b708:	0799      	lsls	r1, r3, #30
   1b70a:	d1f8      	bne.n	1b6fe <__aeabi_memset+0x12>
   1b70c:	2c03      	cmp	r4, #3
   1b70e:	d92e      	bls.n	1b76e <__aeabi_memset+0x82>
   1b710:	b2d5      	uxtb	r5, r2
   1b712:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1b716:	2c0f      	cmp	r4, #15
   1b718:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1b71c:	d919      	bls.n	1b752 <__aeabi_memset+0x66>
   1b71e:	4626      	mov	r6, r4
   1b720:	f103 0110 	add.w	r1, r3, #16
   1b724:	3e10      	subs	r6, #16
   1b726:	2e0f      	cmp	r6, #15
   1b728:	f841 5c10 	str.w	r5, [r1, #-16]
   1b72c:	f841 5c0c 	str.w	r5, [r1, #-12]
   1b730:	f841 5c08 	str.w	r5, [r1, #-8]
   1b734:	f841 5c04 	str.w	r5, [r1, #-4]
   1b738:	f101 0110 	add.w	r1, r1, #16
   1b73c:	d8f2      	bhi.n	1b724 <__aeabi_memset+0x38>
   1b73e:	f1a4 0110 	sub.w	r1, r4, #16
   1b742:	f021 010f 	bic.w	r1, r1, #15
   1b746:	f004 040f 	and.w	r4, r4, #15
   1b74a:	3110      	adds	r1, #16
   1b74c:	2c03      	cmp	r4, #3
   1b74e:	440b      	add	r3, r1
   1b750:	d90d      	bls.n	1b76e <__aeabi_memset+0x82>
   1b752:	461e      	mov	r6, r3
   1b754:	4621      	mov	r1, r4
   1b756:	3904      	subs	r1, #4
   1b758:	2903      	cmp	r1, #3
   1b75a:	f846 5b04 	str.w	r5, [r6], #4
   1b75e:	d8fa      	bhi.n	1b756 <__aeabi_memset+0x6a>
   1b760:	1f21      	subs	r1, r4, #4
   1b762:	f021 0103 	bic.w	r1, r1, #3
   1b766:	3104      	adds	r1, #4
   1b768:	440b      	add	r3, r1
   1b76a:	f004 0403 	and.w	r4, r4, #3
   1b76e:	b12c      	cbz	r4, 1b77c <__aeabi_memset+0x90>
   1b770:	b2d2      	uxtb	r2, r2
   1b772:	441c      	add	r4, r3
   1b774:	f803 2b01 	strb.w	r2, [r3], #1
   1b778:	42a3      	cmp	r3, r4
   1b77a:	d1fb      	bne.n	1b774 <__aeabi_memset+0x88>
   1b77c:	bc70      	pop	{r4, r5, r6}
   1b77e:	4770      	bx	lr
   1b780:	460c      	mov	r4, r1
   1b782:	4603      	mov	r3, r0
   1b784:	e7c2      	b.n	1b70c <__aeabi_memset+0x20>
   1b786:	5344      	.short	0x5344
   1b788:	61662050 	.word	0x61662050
   1b78c:	43546c69 	.word	0x43546c69
   1b790:	61662048 	.word	0x61662048
   1b794:	45476c69 	.word	0x45476c69
   1b798:	61662054 	.word	0x61662054
   1b79c:	55526c69 	.word	0x55526c69
   1b7a0:	6166204e 	.word	0x6166204e
   1b7a4:	6c69      	.short	0x6c69
   1b7a6:	7572      	.short	0x7572
   1b7a8:	612f7473 	.word	0x612f7473
   1b7ac:	732f7070 	.word	0x732f7070
   1b7b0:	6c2f6372 	.word	0x6c2f6372
   1b7b4:	722e6269 	.word	0x722e6269
   1b7b8:	00000073 	.word	0x00000073
   1b7bc:	0001b7a6 	.word	0x0001b7a6
   1b7c0:	00000013 	.word	0x00000013
   1b7c4:	0000005b 	.word	0x0000005b
   1b7c8:	00000005 	.word	0x00000005
   1b7cc:	0001b7a6 	.word	0x0001b7a6
   1b7d0:	00000013 	.word	0x00000013
   1b7d4:	00000064 	.word	0x00000064
   1b7d8:	00000005 	.word	0x00000005
   1b7dc:	50494843 	.word	0x50494843
   1b7e0:	61662038 	.word	0x61662038
   1b7e4:	00006c69 	.word	0x00006c69
   1b7e8:	0001b7a6 	.word	0x0001b7a6
   1b7ec:	00000013 	.word	0x00000013
   1b7f0:	00000076 	.word	0x00000076
   1b7f4:	00000005 	.word	0x00000005
   1b7f8:	0001b7a6 	.word	0x0001b7a6
   1b7fc:	00000013 	.word	0x00000013
   1b800:	0000007c 	.word	0x0000007c
   1b804:	0000000d 	.word	0x0000000d
   1b808:	0001b7a6 	.word	0x0001b7a6
   1b80c:	00000013 	.word	0x00000013
   1b810:	0000007b 	.word	0x0000007b
   1b814:	00000009 	.word	0x00000009
   1b818:	696e6170 	.word	0x696e6170
   1b81c:	2063      	.short	0x2063
   1b81e:	6f6e      	.short	0x6f6e
   1b820:	636f6c20 	.word	0x636f6c20
   1b824:	0a          	.byte	0x0a
   1b825:	61          	.byte	0x61
   1b826:	2074      	.short	0x2074
   1b828:	6e696c20 	.word	0x6e696c20
   1b82c:	2065      	.short	0x2065
   1b82e:	000a      	.short	0x000a
   1b830:	0001b7a6 	.word	0x0001b7a6
   1b834:	00000013 	.word	0x00000013
   1b838:	00000094 	.word	0x00000094
   1b83c:	00000014 	.word	0x00000014
   1b840:	00008827 	.word	0x00008827
   1b844:	00000004 	.word	0x00000004
   1b848:	00000004 	.word	0x00000004
   1b84c:	00008a91 	.word	0x00008a91
   1b850:	00000000 	.word	0x00000000
   1b854:	0001b850 	.word	0x0001b850
   1b858:	0001b854 	.word	0x0001b854
   1b85c:	65737361 	.word	0x65737361
   1b860:	6f697472 	.word	0x6f697472
   1b864:	6166206e 	.word	0x6166206e
   1b868:	64656c69 	.word	0x64656c69
   1b86c:	2860203a 	.word	0x2860203a
   1b870:	7466656c 	.word	0x7466656c
   1b874:	203d3d20 	.word	0x203d3d20
   1b878:	68676972 	.word	0x68676972
   1b87c:	0a602974 	.word	0x0a602974
   1b880:	656c2020 	.word	0x656c2020
   1b884:	203a7466 	.word	0x203a7466
   1b888:	60          	.byte	0x60
   1b889:	60          	.byte	0x60
   1b88a:	0a2c      	.short	0x0a2c
   1b88c:	67697220 	.word	0x67697220
   1b890:	203a7468 	.word	0x203a7468
   1b894:	60          	.byte	0x60
   1b895:	60          	.byte	0x60
   1b896:	203a      	.short	0x203a
   1b898:	0001b85c 	.word	0x0001b85c
   1b89c:	0000002d 	.word	0x0000002d
   1b8a0:	0001b889 	.word	0x0001b889
   1b8a4:	0000000c 	.word	0x0000000c
   1b8a8:	0001b895 	.word	0x0001b895
   1b8ac:	00000003 	.word	0x00000003
   1b8b0:	0001b898 	.word	0x0001b898
   1b8b4:	6e206f6e 	.word	0x6e206f6e
   1b8b8:	006c6c75 	.word	0x006c6c75
   1b8bc:	0001b8b4 	.word	0x0001b8b4
   1b8c0:	00000007 	.word	0x00000007
   1b8c4:	0001b8bc 	.word	0x0001b8bc
   1b8c8:	0001b8c8 	.word	0x0001b8c8
   1b8cc:	74737572 	.word	0x74737572
   1b8d0:	6e796d2f 	.word	0x6e796d2f
   1b8d4:	2f747765 	.word	0x2f747765
   1b8d8:	2f637273 	.word	0x2f637273
   1b8dc:	2e62696c 	.word	0x2e62696c
   1b8e0:	00007372 	.word	0x00007372
   1b8e4:	0001b8cc 	.word	0x0001b8cc
   1b8e8:	00000016 	.word	0x00000016
   1b8ec:	000000db 	.word	0x000000db
   1b8f0:	00000011 	.word	0x00000011
   1b8f4:	00008d4d 	.word	0x00008d4d
   1b8f8:	00000004 	.word	0x00000004
   1b8fc:	00000004 	.word	0x00000004
   1b900:	00008a91 	.word	0x00008a91
   1b904:	65737361 	.word	0x65737361
   1b908:	6f697472 	.word	0x6f697472
   1b90c:	6166206e 	.word	0x6166206e
   1b910:	64656c69 	.word	0x64656c69
   1b914:	2860203a 	.word	0x2860203a
   1b918:	7466656c 	.word	0x7466656c
   1b91c:	203d3d20 	.word	0x203d3d20
   1b920:	68676972 	.word	0x68676972
   1b924:	0a602974 	.word	0x0a602974
   1b928:	656c2020 	.word	0x656c2020
   1b92c:	203a7466 	.word	0x203a7466
   1b930:	60          	.byte	0x60
   1b931:	60          	.byte	0x60
   1b932:	0a2c      	.short	0x0a2c
   1b934:	67697220 	.word	0x67697220
   1b938:	203a7468 	.word	0x203a7468
   1b93c:	60          	.byte	0x60
   1b93d:	60          	.byte	0x60
   1b93e:	203a      	.short	0x203a
   1b940:	0001b904 	.word	0x0001b904
   1b944:	0000002d 	.word	0x0000002d
   1b948:	0001b931 	.word	0x0001b931
   1b94c:	0000000c 	.word	0x0000000c
   1b950:	0001b93d 	.word	0x0001b93d
   1b954:	00000003 	.word	0x00000003
   1b958:	0001b940 	.word	0x0001b940
   1b95c:	74736564 	.word	0x74736564
   1b960:	74616e69 	.word	0x74616e69
   1b964:	206e6f69 	.word	0x206e6f69
   1b968:	20646e61 	.word	0x20646e61
   1b96c:	72756f73 	.word	0x72756f73
   1b970:	73206563 	.word	0x73206563
   1b974:	6563696c 	.word	0x6563696c
   1b978:	61682073 	.word	0x61682073
   1b97c:	64206576 	.word	0x64206576
   1b980:	65666669 	.word	0x65666669
   1b984:	746e6572 	.word	0x746e6572
   1b988:	6e656c20 	.word	0x6e656c20
   1b98c:	73687467 	.word	0x73687467
   1b990:	0001b95c 	.word	0x0001b95c
   1b994:	00000034 	.word	0x00000034
   1b998:	0001b990 	.word	0x0001b990
   1b99c:	0001b99c 	.word	0x0001b99c
   1b9a0:	7375722f 	.word	0x7375722f
   1b9a4:	352f6374 	.word	0x352f6374
   1b9a8:	66613765 	.word	0x66613765
   1b9ac:	39363634 	.word	0x39363634
   1b9b0:	65303866 	.word	0x65303866
   1b9b4:	38366635 	.word	0x38366635
   1b9b8:	31343132 	.word	0x31343132
   1b9bc:	30353066 	.word	0x30353066
   1b9c0:	61333931 	.word	0x61333931
   1b9c4:	39373662 	.word	0x39373662
   1b9c8:	62646661 	.word	0x62646661
   1b9cc:	2f316234 	.word	0x2f316234
   1b9d0:	2f637273 	.word	0x2f637273
   1b9d4:	6362696c 	.word	0x6362696c
   1b9d8:	2f65726f 	.word	0x2f65726f
   1b9dc:	7263616d 	.word	0x7263616d
   1b9e0:	6d2f736f 	.word	0x6d2f736f
   1b9e4:	722e646f 	.word	0x722e646f
   1b9e8:	00000073 	.word	0x00000073
   1b9ec:	0001b9a0 	.word	0x0001b9a0
   1b9f0:	00000049 	.word	0x00000049
   1b9f4:	00000012 	.word	0x00000012
   1b9f8:	0000000d 	.word	0x0000000d
   1b9fc:	656d6f53 	.word	0x656d6f53
   1ba00:	656e6f4e 	.word	0x656e6f4e
   1ba04:	00008d45 	.word	0x00008d45
   1ba08:	00000004 	.word	0x00000004
   1ba0c:	00000004 	.word	0x00000004
   1ba10:	00009323 	.word	0x00009323
   1ba14:	00000060 	.word	0x00000060
   1ba18:	0001ba14 	.word	0x0001ba14
   1ba1c:	20697073 	.word	0x20697073
   1ba20:	73756c66 	.word	0x73756c66
   1ba24:	61662068 	.word	0x61662068
   1ba28:	6c69      	.short	0x6c69
   1ba2a:	552f      	.short	0x552f
   1ba2c:	73726573 	.word	0x73726573
   1ba30:	70754c2f 	.word	0x70754c2f
   1ba34:	502f7970 	.word	0x502f7970
   1ba38:	54656e69 	.word	0x54656e69
   1ba3c:	2f656d69 	.word	0x2f656d69
   1ba40:	656e6970 	.word	0x656e6970
   1ba44:	656d6974 	.word	0x656d6974
   1ba48:	7375722d 	.word	0x7375722d
   1ba4c:	796d2d74 	.word	0x796d2d74
   1ba50:	7477656e 	.word	0x7477656e
   1ba54:	7375722f 	.word	0x7375722f
   1ba58:	74732f74 	.word	0x74732f74
   1ba5c:	35333737 	.word	0x35333737
   1ba60:	64636c2d 	.word	0x64636c2d
   1ba64:	7461622d 	.word	0x7461622d
   1ba68:	722d6863 	.word	0x722d6863
   1ba6c:	72732f73 	.word	0x72732f73
   1ba70:	696c2f63 	.word	0x696c2f63
   1ba74:	73722e62 	.word	0x73722e62
   1ba78:	20697073 	.word	0x20697073
   1ba7c:	61746164 	.word	0x61746164
   1ba80:	69616620 	.word	0x69616620
   1ba84:	0000006c 	.word	0x0000006c
   1ba88:	0001ba2a 	.word	0x0001ba2a
   1ba8c:	0000004e 	.word	0x0000004e
   1ba90:	000000b0 	.word	0x000000b0
   1ba94:	00000009 	.word	0x00000009
   1ba98:	0001ba2a 	.word	0x0001ba2a
   1ba9c:	0000004e 	.word	0x0000004e
   1baa0:	00000098 	.word	0x00000098
   1baa4:	0000000d 	.word	0x0000000d
   1baa8:	20697073 	.word	0x20697073
   1baac:	20646d63 	.word	0x20646d63
   1bab0:	6c696166 	.word	0x6c696166
   1bab4:	0001ba2a 	.word	0x0001ba2a
   1bab8:	0000004e 	.word	0x0000004e
   1babc:	00000097 	.word	0x00000097
   1bac0:	00000009 	.word	0x00000009
   1bac4:	0001ba2a 	.word	0x0001ba2a
   1bac8:	0000004e 	.word	0x0000004e
   1bacc:	0000009d 	.word	0x0000009d
   1bad0:	00000011 	.word	0x00000011
   1bad4:	0001ba2a 	.word	0x0001ba2a
   1bad8:	0000004e 	.word	0x0000004e
   1badc:	0000009c 	.word	0x0000009c
   1bae0:	0000000d 	.word	0x0000000d
   1bae4:	0001ba2a 	.word	0x0001ba2a
   1bae8:	0000004e 	.word	0x0000004e
   1baec:	000000c5 	.word	0x000000c5
   1baf0:	0000002d 	.word	0x0000002d
   1baf4:	0001ba2a 	.word	0x0001ba2a
   1baf8:	0000004e 	.word	0x0000004e
   1bafc:	000000c9 	.word	0x000000c9
   1bb00:	0000002d 	.word	0x0000002d
   1bb04:	0001ba2a 	.word	0x0001ba2a
   1bb08:	0000004e 	.word	0x0000004e
   1bb0c:	000000d8 	.word	0x000000d8
   1bb10:	00000019 	.word	0x00000019
	...

0001bb20 <str.0>:
   1bb20:	65747461 2074706d 61206f74 77206464     attempt to add w
   1bb30:	20687469 7265766f 776f6c66 0001ba2a     ith overflow*...
   1bb40:	0000004e 000000d9 00000019 0001ba2a     N...........*...
   1bb50:	0000004e 000000db 00000019 0001ba2a     N...........*...
   1bb60:	0000004e 000000dc 00000019 20697073     N...........spi 
   1bb70:	74696e69 69616620 0000006c 0001ba2a     init fail...*...
   1bb80:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1bb90:	0001bb8c 012d2c01 00002d2c 0001bb94     .....,-.,-......
   1bba0:	00000007 0001bba0 008402a2 0001bba8     ................
   1bbb0:	000000c5 0001bbb0 0000000a 0001bbb8     ................
   1bbc0:	00002a8a 0001bbc0 0000ee8a 0001bbc8     .*..............
   1bbd0:	0000000e 0001bbd0 00000000 0001bbd8     ................
   1bbe0:	00000008 0001bbe0 00000005 0001bbe8     ................
   1bbf0:	0001ba2a 0000004e 00000088 00000009     *...N...........
   1bc00:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1bc10:	00000a72 00000000 0001bc14 65737361     r...........asse
   1bc20:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1bc30:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1bc40:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1bc50:	203a7468 203a6060 0001bc1c 0000002d     ht: ``: ....-...
   1bc60:	0001bc49 0000000c 0001bc55 00000003     I.......U.......
   1bc70:	0001bc58 20515249 74696e69 69616620     X...IRQ init fai
   1bc80:	0000006c 0001bc74 0000000d 0001bc84     l...t...........
   1bc90:	0001bc90 74737572 7070612f 6372732f     ....rust/app/src
   1bca0:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1bcb0:	0001bc94 0000001c 0000003f 00000005     ........?.......
   1bcc0:	20633269 72646461 0001bc94 0000001c     i2c addr........
   1bcd0:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1bce0:	61662061 00006c69 0001bc94 0000001c     a fail..........
   1bcf0:	00000056 00000009 0001bc94 0000001c     V...............
   1bd00:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1bd10:	61646863 66206174 006c6961 0001bc94     chdata fail.....
   1bd20:	0000001c 00000089 00000005 0001bc94     ................
   1bd30:	0000001c 00000095 00000037 00000000     ........7.......

0001bd40 <str.0>:
   1bd40:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1bd50:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1bd60:	00000077 0001bc94 0000001c 00000095     w...............
   1bd70:	00000024 00000000 00000000 00000000     $...............

0001bd80 <str.1>:
   1bd80:	65747461 2074706d 61206f74 77206464     attempt to add w
   1bd90:	20687469 7265766f 776f6c66 0001bc94     ith overflow....
   1bda0:	0000001c 00000095 00000020 0001bc94     ........ .......
   1bdb0:	0000001c 00000099 00000009 0001bc94     ................
   1bdc0:	0000001c 0000009a 00000037 0001bc94     ........7.......
   1bdd0:	0000001c 0000009a 00000023 0001bc94     ........#.......
   1bde0:	0000001c 0000009a 0000001f 0001bc94     ................
   1bdf0:	0000001c 0000009b 00000037 0001bc94     ........7.......
   1be00:	0000001c 0000009b 00000023 0001bc94     ........#.......
   1be10:	0000001c 0000009b 0000001f 0001bc94     ................
   1be20:	0000001c 0000009c 00000009 0001bc94     ................
   1be30:	0000001c 0000009e 00000037 0001bc94     ........7.......
   1be40:	0000001c 0000009e 00000023 0001bc94     ........#.......
   1be50:	0000001c 0000009e 0000001f 0001bc94     ................
   1be60:	0000001c 0000009f 00000037 0001bc94     ........7.......
   1be70:	0000001c 0000009f 00000023 0001bc94     ........#.......
   1be80:	0000001c 0000009f 0000001f 0001bc94     ................
   1be90:	0000001c 000000a0 00000009 0001bc94     ................
   1bea0:	0000001c 000000a4 00000030 0001bc94     ........0.......
   1beb0:	0000001c 000000a4 0000001a 0001bc94     ................
   1bec0:	0000001c 000000a4 00000016 0001bc94     ................
   1bed0:	0000001c 000000a3 00000009 0001bc94     ................
   1bee0:	0000001c 000000a6 00000030 0001bc94     ........0.......
   1bef0:	0000001c 000000a6 0000001a 0001bc94     ................
   1bf00:	0000001c 000000a6 00000016 0001bc94     ................
   1bf10:	0000001c 000000a5 00000009 0001bc94     ................
   1bf20:	0000001c 000000aa 0000002d 0001bc94     ........-.......
   1bf30:	0000001c 000000aa 0000001a 0001bc94     ................
   1bf40:	0000001c 000000aa 00000016 0001bc94     ................
   1bf50:	0000001c 000000a9 00000009 0001bc94     ................
   1bf60:	0000001c 000000ac 0000002d 0001bc94     ........-.......
   1bf70:	0000001c 000000ac 0000001a 0001bc94     ................
   1bf80:	0000001c 000000ac 00000016 0001bc94     ................
   1bf90:	0000001c 000000ab 00000009 0001bc94     ................
   1bfa0:	0000001c 000000af 0000000d 0001bc94     ................
   1bfb0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1bfc0:	00667562 0001bc94 0000001c 000000f1     buf.............
   1bfd0:	00000005 0001bc94 0000001c 000000f2     ................
   1bfe0:	0000000d 0001bc94 0000001c 000000f2     ................
   1bff0:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1c000:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1c010:	00000000 0001c008 00000006 0001c010     ................
   1c020:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1c030:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1c040:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1c050:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1c060:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1c070:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1c080:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1c090:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1c0a0:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1c0b0:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1c0c0:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1c0d0:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1c0e0:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1c0f0:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1c100:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1c110:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1c120:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1c130:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1c140:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1c150:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1c160:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1c170:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1c180:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1c190:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1c1a0:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1c1b0:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1c1c0:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1c1d0:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1c1e0:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1c1f0:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1c200:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1c210:	00007f00 01010100 03030303 203f0000     ..............? 
   1c220:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1c230:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1c240:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1c250:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1c260:	00000000 ff000000 00ff0000 f71410f7     ................
   1c270:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1c280:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1c290:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1c2a0:	00000000 ff000000 00ff0000 302000be     .............. 0
   1c2b0:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1c2c0:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1c2d0:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1c2e0:	00000000 ff000000 00ff0000 fc00fe00     ................
   1c2f0:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1c300:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1c310:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1c320:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1c330:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1c340:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1c350:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1c360:	8686fe86 868686fe 10101010 18181010     ................
   1c370:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1c380:	869292ee 82fe8686 86868686 8686827c     ............|...
   1c390:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1c3a0:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1c3b0:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1c3c0:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1c3d0:	fe80f01e 00000000 00000606 c0606000     .............``.
   1c3e0:	00000000 18180000 18001818 180cc67c     ............|...
   1c3f0:	00001800 0000fefe 868682fe 0808fe86     ................
   1c400:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1c410:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1c420:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1c430:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1c440:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1c450:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1c460:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1c470:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1c480:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1c490:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1c4a0:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1c4b0:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1c4c0:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1c4d0:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1c4e0:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1c4f0:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1c500:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1c510:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1c520:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1c530:	ffa8a8a8 00000000 00000000 00000000     ................
   1c540:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1c550:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1c560:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1c570:	38706968 0073722e 0001c562 00000015     hip8.rs.b.......
   1c580:	0000004b 00000005 0001c562 00000015     K.......b.......
   1c590:	0000009f 00000018 00000000 00000000     ................

0001c5a0 <str.0>:
   1c5a0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1c5b0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1c5c0:	00000077 0001c562 00000015 000000a0     w...b...........
   1c5d0:	00000017 0001c562 00000015 000000a1     ....b...........
   1c5e0:	00000021 00000000 00000000 00000000     !...............

0001c5f0 <str.1>:
   1c5f0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1c600:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1c610:	00000077 0001c562 00000015 000000a1     w...b...........
   1c620:	00000020 00000000 00000000 00000000      ...............

0001c630 <str.2>:
   1c630:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c640:	20687469 7265766f 776f6c66 0001c562     ith overflowb...
   1c650:	00000015 000000a1 00000019 0001c562     ............b...
   1c660:	00000015 000000a2 00000021 0001c562     ........!...b...
   1c670:	00000015 000000a2 00000020 0001c562     ........ ...b...
   1c680:	00000015 000000a2 0000001a 7265766f     ............over
   1c690:	776f6c66 73746573 20657a69 666f5f78     flowsetsize x_of
   1c6a0:	74657366 666f5f79 74657366 0001c562     fsety_offsetb...
   1c6b0:	00000015 000000a3 00000009 766f2078     ............x ov
   1c6c0:	6c667265 0000776f 0001c562 00000015     erflow..b.......
   1c6d0:	000000b3 00000009 766f2079 6c667265     ........y overfl
   1c6e0:	0000776f 0001c562 00000015 000000b4     ow..b...........
   1c6f0:	00000009 0001c562 00000015 000000b5     ....b...........
   1c700:	00000023 0001c562 00000015 000000b5     #...b...........
   1c710:	00000011 0001c562 00000015 000000b7     ....b...........
   1c720:	00000010 0001c562 00000015 000000ba     ....b...........
   1c730:	00000009 0001c562 00000015 000000bf     ....b...........
   1c740:	0000000d 0001c562 00000015 000000c4     ....b...........
   1c750:	00000011 0001c562 00000015 000000c9     ....b...........
   1c760:	00000015 0001c562 00000015 000000dc     ....b...........
   1c770:	00000015 0001c562 00000015 000000dd     ....b...........
   1c780:	00000016 0001c562 00000015 00000111     ....b...........
   1c790:	00000009 0001c562 00000015 00000112     ....b...........
   1c7a0:	00000009 0001c562 00000015 00000113     ....b...........
   1c7b0:	00000015 0001c562 00000015 00000113     ....b...........
   1c7c0:	00000011 0001c562 00000015 00000114     ....b...........
   1c7d0:	00000012 20746573 65786970 6620736c     ....set pixels f
   1c7e0:	656c6961 00000064 0001c562 00000015     ailed...b.......
   1c7f0:	0000011c 0000000d 0001c562 00000015     ........b.......
   1c800:	00000124 00000015 0001c562 00000015     $.......b.......
   1c810:	00000125 00000016 0001c562 00000015     %.......b.......
   1c820:	00000149 00000009 0001c562 00000015     I.......b.......
   1c830:	0000014a 00000009 0001c562 00000015     J.......b.......
   1c840:	0000014b 00000015 0001c562 00000015     K.......b.......
   1c850:	0000014b 00000011 0001c562 00000015     K.......b.......
   1c860:	0000014c 00000012 000a202c 0001c562     L......., ..b...
   1c870:	00000015 00000172 00000012 50494843     ....r.......CHIP
   1c880:	6f742038 20686375 20746f6e 646e6168     8 touch not hand
   1c890:	0a64656c 6c6c6163 60206465 6974704f     led.called `Opti
   1c8a0:	3a3a6e6f 72776e75 29287061 6e6f2060     on::unwrap()` on
   1c8b0:	60206120 656e6f4e 61762060 7365756c      a `None` values
   1c8c0:	66206970 6873756c 69616620 73552f6c     pi flush fail/Us
   1c8d0:	2f737265 7070754c 69502f79 6954656e     ers/Luppy/PineTi
   1c8e0:	702f656d 74656e69 2d656d69 74737572     me/pinetime-rust
   1c8f0:	6e796d2d 2f747765 74737572 3774732f     -mynewt/rust/st7
   1c900:	2d353337 2d64636c 63746162 73722d68     735-lcd-batch-rs
   1c910:	6372732f 62696c2f 0073722e 0001c8cd     /src/lib.rs.....
   1c920:	0000004e 000000fe 00000009 0001c8cd     N...............
   1c930:	0000004e 000000f3 00000009 6573552f     N.........../Use
   1c940:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1c950:	69676572 79727473 6372732f 7469672f     registry/src/git
   1c960:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1c970:	65396264 33323863 62696c2f 70696863     db9ec823/libchip
   1c980:	2e302d38 2f322e31 2f637273 2e62696c     8-0.1.2/src/lib.
   1c990:	00007372 0001c93c 00000056 0000009d     rs..<...V.......
   1c9a0:	00000014 0001c93c 00000056 000000d4     ....<...V.......
   1c9b0:	00000011 0001c93c 00000056 000000d5     ....<...V.......
   1c9c0:	0000001a 00000000 00000000 00000000     ................

0001c9d0 <str.0>:
   1c9d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c9e0:	20687469 7265766f 776f6c66 0001c93c     ith overflow<...
   1c9f0:	00000056 000000d5 00000011 00000005     V...............
   1ca00:	0001c9fc 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1ca10:	0000005d 0001ca04 00000001 0001ca05     ]...............
   1ca20:	0000000c 0001ca14 00000000 00000020     ............ ...
   1ca30:	00000008 00000002 00000000 00000000     ................
   1ca40:	00000004 00000003 0001ca28 6362696c     ........(...libc
   1ca50:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1ca60:	6e6e6e20 00000040 00000020 0001ca4c      nnn@... ...L...
   1ca70:	00000008 0001ca4c 00000008 0001c93c     ....L.......<...
   1ca80:	00000056 000001a1 0001ca6c 0001c93c     V.......l...<...
   1ca90:	00000056 000001a3 0000001d 0001c93c     V...........<...
   1caa0:	00000056 000001a4 0000002a 0001c93c     V.......*...<...
   1cab0:	00000056 000001a4 00000021 0001c93c     V.......!...<...
   1cac0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1cad0:	5d495b20 7856202c 0001ca04 00000001      [I], Vx........
   1cae0:	0001cacc 0000000c 0001cad8 0001ca4c     ............L...
   1caf0:	00000008 0001ca4c 00000008 0001c93c     ....L.......<...
   1cb00:	00000056 0000019a 0001caec 0001c93c     V...........<...
   1cb10:	00000056 0000019c 0000001d 0001c93c     V...........<...
   1cb20:	00000056 0000019d 00000035 0001c93c     V.......5...<...
   1cb30:	00000056 0000019d 0000001e 0001c93c     V...........<...
   1cb40:	00000056 0000019d 00000015 444c205d     V...........] LD
   1cb50:	202c4220 00007856 0001ca04 00000001      B, Vx..........
   1cb60:	0001cb4c 0000000a 0001cb58 0001ca4c     L.......X...L...
   1cb70:	00000008 0001ca4c 00000008 0001c93c     ....L.......<...
   1cb80:	00000056 00000193 0001cb6c 0001c93c     V.......l...<...
   1cb90:	00000056 00000194 0000001b 0001c93c     V...........<...
   1cba0:	00000056 00000195 00000011 0001c93c     V...........<...
   1cbb0:	00000056 00000196 0000001a 0001c93c     V...........<...
   1cbc0:	00000056 00000196 00000011 0001c93c     V...........<...
   1cbd0:	00000056 00000197 0000001a 0001c93c     V...........<...
   1cbe0:	00000056 00000197 00000011 444c205d     V...........] LD
   1cbf0:	202c4620 00007856 0001ca04 00000001      F, Vx..........
   1cc00:	0001cbec 0000000a 0001cbf8 0001ca4c     ............L...
   1cc10:	00000008 0001ca4c 00000008 0001c93c     ....L.......<...
   1cc20:	00000056 0000018f 0001cc0c 0001c93c     V...........<...
   1cc30:	00000056 00000190 0000001b 0001c93c     V...........<...
   1cc40:	00000056 00000190 0000001a 00000000     V...............

0001cc50 <str.1>:
   1cc50:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1cc60:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1cc70:	41205d77 49204444 7856202c 0001ca04     w] ADD I, Vx....
   1cc80:	00000001 0001cc71 0000000b 0001cc7c     ....q.......|...
   1cc90:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1cca0:	0001c93c 00000056 0000018b 0001cc90     <...V...........
   1ccb0:	0001c93c 00000056 0000018c 0000002e     <...V...........
   1ccc0:	444c205d 2c545320 00785620 0001ca04     ] LD ST, Vx.....
   1ccd0:	00000001 0001ccc0 0000000b 0001cccc     ................
   1cce0:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1ccf0:	0001c93c 00000056 00000187 0001cce0     <...V...........
   1cd00:	0001c93c 00000056 00000188 0000001b     <...V...........
   1cd10:	444c205d 2c544420 00785620 0001ca04     ] LD DT, Vx.....
   1cd20:	00000001 0001cd10 0000000b 0001cd1c     ................
   1cd30:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1cd40:	0001c93c 00000056 00000183 0001cd30     <...V.......0...
   1cd50:	0001c93c 00000056 00000184 0000001b     <...V...........
   1cd60:	444c205d 2c785620 00004b20 0001ca04     ] LD Vx, K......
   1cd70:	00000001 0001cd60 0000000a 0001cd6c     ....`.......l...
   1cd80:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1cd90:	0001c93c 00000056 0000017f 0001cd80     <...V...........
   1cda0:	0001c93c 00000056 00000180 00000011     <...V...........
   1cdb0:	444c205d 2c785620 00544420 0001ca04     ] LD Vx, DT.....
   1cdc0:	00000001 0001cdb0 0000000b 0001cdbc     ................
   1cdd0:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1cde0:	0001c93c 00000056 0000017b 0001cdd0     <...V...{.......
   1cdf0:	0001c93c 00000056 0000017c 00000011     <...V...|.......
   1ce00:	4b53205d 5620504e 00000078 0001ca04     ] SKNP Vx.......
   1ce10:	00000001 0001ce00 00000009 0001ce0c     ................
   1ce20:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1ce30:	0001c93c 00000056 00000175 0001ce20     <...V...u... ...
   1ce40:	0001c93c 00000056 00000176 00000021     <...V...v...!...
   1ce50:	0001ca04 00000001 0001ca54 00000008     ........T.......
   1ce60:	0001ce50 0001ca4c 00000008 0001ca4c     P...L.......L...
   1ce70:	00000008 0001c93c 00000056 0000016f     ....<...V...o...
   1ce80:	0001ce64 0001c93c 00000056 00000170     d...<...V...p...
   1ce90:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1cea0:	006e202c 0001ca04 00000001 0001ce94     , n.............
   1ceb0:	0000000f 0001cea4 0001ca4c 00000008     ........L.......
   1cec0:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1ced0:	00000156 0001ceb8 0001c93c 00000056     V.......<...V...
   1cee0:	00000157 0000001d 0001c93c 00000056     W.......<...V...
   1cef0:	00000158 0000001d 0001c93c 00000056     X.......<...V...
   1cf00:	0000015e 00000026 0001c93c 00000056     ^...&...<...V...
   1cf10:	0000015e 0000001d 0001c93c 00000056     ^.......<...V...
   1cf20:	00000160 00000021 00000000 00000000     `...!...........

0001cf30 <str.2>:
   1cf30:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1cf40:	6574616c 65687420 6d657220 646e6961     late the remaind
   1cf50:	77207265 20687469 69642061 6f736976     er with a diviso
   1cf60:	666f2072 72657a20 0000006f 0001c93c     r of zero...<...
   1cf70:	00000056 00000163 00000025 0001c93c     V...c...%...<...
   1cf80:	00000056 00000165 0000002d 00000000     V...e...-.......

0001cf90 <str.3>:
   1cf90:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1cfa0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1cfb0:	00000077 0001c93c 00000056 00000165     w...<...V...e...
   1cfc0:	00000028 00000000 00000000 00000000     (...............

0001cfd0 <str.4>:
   1cfd0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1cfe0:	66656c20 69772074 6f206874 66726576      left with overf
   1cff0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1d000:	0001ca04 00000001 0001cff3 0000000c     ................
   1d010:	0001d000 0001ca4c 00000008 0001ca4c     ....L.......L...
   1d020:	00000008 0001c93c 00000056 00000152     ....<...V...R...
   1d030:	0001d014 0001c93c 00000056 00000153     ....<...V...S...
   1d040:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1d050:	0001ca04 00000001 0001d044 0000000c     ........D.......
   1d060:	0001d050 0001ca4c 00000008 0001ca4c     P...L.......L...
   1d070:	00000008 0001c93c 00000056 0000014e     ....<...V...N...
   1d080:	0001d064 444c205d 202c4920 006e6e6e     d...] LD I, nnn.
   1d090:	0001ca04 00000001 0001d084 0000000b     ................
   1d0a0:	0001d090 0001ca4c 00000008 0001ca4c     ....L.......L...
   1d0b0:	00000008 0001c93c 00000056 0000014a     ....<...V...J...
   1d0c0:	0001d0a4 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1d0d0:	0001ca04 00000001 0001d0c4 0000000c     ................
   1d0e0:	0001d0d0 0001ca4c 00000008 0001ca4c     ....L.......L...
   1d0f0:	00000008 0001c93c 00000056 00000144     ....<...V...D...
   1d100:	0001d0e4 0001c93c 00000056 00000145     ....<...V...E...
   1d110:	00000014 0001c93c 00000056 00000145     ....<...V...E...
   1d120:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1d130:	0001ca04 00000001 0001d124 0000000c     ........$.......
   1d140:	0001d130 0001ca4c 00000008 0001ca4c     0...L.......L...
   1d150:	00000008 0001c93c 00000056 0000013f     ....<...V...?...
   1d160:	0001d144 0001c93c 00000056 00000140     D...<...V...@...
   1d170:	00000020 0001c93c 00000056 00000141      ...<...V...A...
   1d180:	0000001d 0001c93c 00000056 00000141     ....<...V...A...
   1d190:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1d1a0:	00000079 0001ca04 00000001 0001d194     y...............
   1d1b0:	0000000d 0001d1a4 0001ca4c 00000008     ........L.......
   1d1c0:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d1d0:	00000139 0001d1b8 0001c93c 00000056     9.......<...V...
   1d1e0:	0000013a 0000001e 0001c93c 00000056     :.......<...V...
   1d1f0:	0000013a 00000038 0001c93c 00000056     :...8...<...V...
   1d200:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1d210:	7956202c 0001ca04 00000001 0001d208     , Vy............
   1d220:	0000000c 0001d214 0001ca4c 00000008     ........L.......
   1d230:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d240:	00000134 0001d228 0001c93c 00000056     4...(...<...V...
   1d250:	00000135 0000001f 0001c93c 00000056     5.......<...V...
   1d260:	00000136 0000001d 0001c93c 00000056     6.......<...V...
   1d270:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1d280:	7956202c 0001ca04 00000001 0001d278     , Vy........x...
   1d290:	0000000c 0001d284 0001ca4c 00000008     ........L.......
   1d2a0:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d2b0:	0000012e 0001d298 0001c93c 00000056     ........<...V...
   1d2c0:	0000012f 0000001e 0001c93c 00000056     /.......<...V...
   1d2d0:	0000012f 00000038 0001c93c 00000056     /...8...<...V...
   1d2e0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1d2f0:	7956202c 0001ca04 00000001 0001d2e8     , Vy............
   1d300:	0000000c 0001d2f4 0001ca4c 00000008     ........L.......
   1d310:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d320:	00000128 0001d308 0001c93c 00000056     (.......<...V...
   1d330:	00000129 0000001e 0001c93c 00000056     ).......<...V...
   1d340:	00000129 00000038 0001c93c 00000056     )...8...<...V...
   1d350:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1d360:	7956202c 0001ca04 00000001 0001d358     , Vy........X...
   1d370:	0000000c 0001d364 0001ca4c 00000008     ....d...L.......
   1d380:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d390:	00000124 0001d378 0001c93c 00000056     $...x...<...V...
   1d3a0:	00000125 0000001e 0001c93c 00000056     %.......<...V...
   1d3b0:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1d3c0:	7956202c 0001ca04 00000001 0001d3b8     , Vy............
   1d3d0:	0000000c 0001d3c4 0001ca4c 00000008     ........L.......
   1d3e0:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d3f0:	00000120 0001d3d8 0001c93c 00000056      .......<...V...
   1d400:	00000121 0000001e 0001c93c 00000056     !.......<...V...
   1d410:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1d420:	00795620 0001ca04 00000001 0001d418      Vy.............
   1d430:	0000000b 0001d424 0001ca4c 00000008     ....$...L.......
   1d440:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d450:	0000011c 0001d438 0001c93c 00000056     ....8...<...V...
   1d460:	0000011d 0000001e 0001c93c 00000056     ........<...V...
   1d470:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1d480:	00795620 0001ca04 00000001 0001d478      Vy.........x...
   1d490:	0000000b 0001d484 0001ca4c 00000008     ........L.......
   1d4a0:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d4b0:	00000118 0001d498 0001c93c 00000056     ........<...V...
   1d4c0:	00000119 0000001d 0001c93c 00000056     ........<...V...
   1d4d0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1d4e0:	6b6b202c 0001ca04 00000001 0001d4d8     , kk............
   1d4f0:	0000000c 0001d4e4 0001ca4c 00000008     ........L.......
   1d500:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d510:	00000114 0001d4f8 0001c93c 00000056     ........<...V...
   1d520:	00000115 0000001d 0001c93c 00000056     ........<...V...
   1d530:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1d540:	006b6b20 0001ca04 00000001 0001d538      kk.........8...
   1d550:	0000000b 0001d544 0001ca4c 00000008     ....D...L.......
   1d560:	0001ca4c 00000008 0001c93c 00000056     L.......<...V...
   1d570:	00000110 0001d558 0001c93c 00000056     ....X...<...V...
   1d580:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1d590:	706f2064 0000203a 0001ca04 00000001     d op: ..........
   1d5a0:	0001d588 0000000e 0001d598 00000000     ................
   1d5b0:	00000020 00000008 00000002 00000000      ...............
   1d5c0:	00000000 00000004 00000003 00000001     ................
   1d5d0:	00000020 00000008 00000002 00000000      ...............
   1d5e0:	00000000 00000004 00000003 0001d5ac     ................
   1d5f0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1d600:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1d610:	0001d5f0 0000001e 00000005 00000032     ............2...
   1d620:	4553205d 2c785620 00795620 0001ca04     ] SE Vx, Vy.....
   1d630:	00000001 0001d620 0000000b 0001d62c     .... .......,...
   1d640:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1d650:	0001c93c 00000056 0000010a 0001d640     <...V.......@...
   1d660:	0001c93c 00000056 0000010b 00000014     <...V...........
   1d670:	0001c93c 00000056 0000010b 00000021     <...V.......!...
   1d680:	4e53205d 78562045 6b6b202c 0001ca04     ] SNE Vx, kk....
   1d690:	00000001 0001d680 0000000c 0001d68c     ................
   1d6a0:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1d6b0:	0001c93c 00000056 00000104 0001d6a0     <...V...........
   1d6c0:	0001c93c 00000056 00000105 00000014     <...V...........
   1d6d0:	4553205d 20785620 00006b6b 0001ca04     ] SE Vx kk......
   1d6e0:	00000001 0001d6d0 0000000a 0001d6dc     ................
   1d6f0:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1d700:	0001c93c 00000056 000000fe 0001d6f0     <...V...........
   1d710:	0001c93c 00000056 000000ff 00000014     <...V...........
   1d720:	4143205d 6e204c4c 00006e6e 0001ca04     ] CALL nnn......
   1d730:	00000001 0001d720 0000000a 0001d72c     .... .......,...
   1d740:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1d750:	0001c93c 00000056 000000f9 0001d740     <...V.......@...
   1d760:	0001ca04 00000001 0001ca5c 00000008     ........\.......
   1d770:	0001d760 0001ca4c 00000008 0001ca4c     `...L.......L...
   1d780:	00000008 0001c93c 00000056 000000f5     ....<...V.......
   1d790:	0001d774 5953205d 6e6e2053 0000006e     t...] SYS nnn...
   1d7a0:	0001ca04 00000001 0001d794 00000009     ................
   1d7b0:	0001d7a0 0001ca4c 00000008 0001ca4c     ....L.......L...
   1d7c0:	00000008 0001c93c 00000056 000000f1     ....<...V.......
   1d7d0:	0001d7b4 20746f6e 6c706d69 6e656d65     ....not implemen
   1d7e0:	00646574 0001d5f0 0000001e 00000002     ted.............
   1d7f0:	00000002 4552205d 00000054 0001ca04     ....] RET.......
   1d800:	00000001 0001d7f4 00000005 0001d7fc     ................
   1d810:	0001ca4c 00000008 0001ca4c 00000008     L.......L.......
   1d820:	0001c93c 00000056 000000ec 0001d810     <...V...........
   1d830:	4c43205d 00000053 0001ca04 00000001     ] CLS...........
   1d840:	0001d830 00000005 0001d838 0001ca4c     0.......8...L...
   1d850:	00000008 0001ca4c 00000008 0001c93c     ....L.......<...
   1d860:	00000056 000000e5 0001d84c 0001c93c     V.......L...<...
   1d870:	00000056 00000093 0000001b 0001c93c     V...........<...
   1d880:	00000056 00000097 00000009 0001c93c     V...........<...
   1d890:	00000056 000000bb 0000000d 0001c93c     V...........<...
   1d8a0:	00000056 000000be 0000000d              V...........

0001d8ac <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1d8ac:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1d8bc:	f010f010 10f09090 f080f010 80f0f010     ................
   1d8cc:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1d8dc:	90f0f010 e09090f0 e090e090 808080f0     ................
   1d8ec:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1d8fc:	72656874 73692065 206f6e20 68637573     there is no such
   1d90c:	69687420 6120676e 6e612073 71636120      thing as an acq
   1d91c:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1d92c:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1d93c:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1d94c:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1d95c:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1d96c:	2f736f72 2e646f6d 00007372 0001d92d     ros/mod.rs..-...
   1d97c:	00000049 0000000a 00000009 72656874     I...........ther
   1d98c:	73692065 206f6e20 68637573 69687420     e is no such thi
   1d99c:	6120676e 20612073 656c6572 20657361     ng as a release 
   1d9ac:	64616f6c 000117e1 00000000 00000001     load............
   1d9bc:	00011ba1 00011bad 00011bb7 0001d9b0     ................
   1d9cc:	000117e1 00000000 00000001 00011ba1     ................
   1d9dc:	00011bad 00011bb7                       ........

0001d9e4 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1d9e4:	00697073 0001bc14 65737361 6f697472     spi.....assertio
   1d9f4:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1da04:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1da14:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1da24:	203a6060 0001d9ec 0000002d 0001da19     ``: ....-.......
   1da34:	0000000c 0001da25 00000003 0001da28     ....%.......(...
   1da44:	20697073 666e6f63 66206769 006c6961     spi config fail.
   1da54:	0001da44 0000000f 0001da54 0001da60     D.......T...`...
   1da64:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   1da74:	2e697073 00007372 0001da64 00000016     spi.rs..d.......
   1da84:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   1da94:	006c6961 0001da8c 0000000b 0001da98     ail.............
   1daa4:	0001da64 00000016 00000057 00000005     d.......W.......
   1dab4:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1dac4:	0001dab4 0000000f 0001dac4 0001da64     ............d...
   1dad4:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   1dae4:	69616620 0000006c 0001dae0 00000009      fail...........
   1daf4:	0001daec 0001da64 00000016 0000005b     ....d.......[...
   1db04:	00000040 0001da64 00000016 0000005c     @...d.......\...
   1db14:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   1db24:	0001db18 0000000b 0001db24 0001da64     ........$...d...
   1db34:	00000016 00000065 00000005 206d6573     ....e.......sem 
   1db44:	6c696166 20697073 6c696166 0001db40     failspi fail@...
   1db54:	00000008 0001db50 0001da64 00000016     ....P...d.......
   1db64:	00000069 00000005 0001da64 00000016     i.......d.......
   1db74:	0000006d 00000005 00000000 0001d9e4     m...............
   1db84:	00000004 0001db7c 6e657665 66207174     ....|...eventq f
   1db94:	006c6961 0001da64 00000016 00000081     ail.d...........
   1dba4:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   1dbb4:	0001da64 00000016 00000097 00000005     d...............
   1dbc4:	0001da64 00000016 00000099 00000016     d...............
	...

0001dbe0 <str.0>:
   1dbe0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dbf0:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   1dc00:	7265766f 776f6c66 0001da64 00000016     overflowd.......
   1dc10:	00000099 00000005 0001da64 00000016     ........d.......
   1dc20:	000000a8 00000012 0001da64 00000016     ........d.......
   1dc30:	000000c1 00000035 00000000 00000000     ....5...........

0001dc40 <str.1>:
   1dc40:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dc50:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dc60:	00000077 0001da64 00000016 000000c4     w...d...........
   1dc70:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   1dc80:	0001da64 00000016 00000101 00000011     d...............
   1dc90:	0001da64 00000016 00000111 00000015     d...............

0001dca0 <str.2>:
   1dca0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dcb0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dcc0:	00000077 0001da64 00000016 0000010f     w...d...........
   1dcd0:	00000011 0001da64 00000016 00000117     ....d...........
   1dce0:	00000011 0001da64 00000016 00000124     ....d.......$...
   1dcf0:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1dd00:	0001da64 00000016 0000012b 00000005     d.......+.......
   1dd10:	0001db48 00000008 0001dd10 0001da64     H...........d...
   1dd20:	00000016 00000141 00000009 0001da64     ....A.......d...
   1dd30:	00000016 0000014a 00000009 0001da64     ....J.......d...
   1dd40:	00000016 0000014e 00000030 0001da64     ....N...0...d...
   1dd50:	00000016 0000015a 00000005 0001da64     ....Z.......d...
   1dd60:	00000016 0000015f 00000017 0001bc14     ...._...........
   1dd70:	65737361 6f697472 6166206e 64656c69     assertion failed
   1dd80:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1dd90:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1dda0:	67697220 203a7468 203a6060 0001dd70      right: ``: p...
   1ddb0:	0000002d 0001dd9d 0000000c 0001dda9     -...............
   1ddc0:	00000003 0001ddac 20697073 666e6f63     ........spi conf
   1ddd0:	66206769 006c6961 0001ddc8 0000000f     ig fail.........
   1dde0:	0001ddd8 0001dde4 74737572 6e796d2f     ........rust/myn
   1ddf0:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1de00:	0001dde8 00000016 00000016 00000009     ................
   1de10:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1de20:	0001de10 0000000f 0001de20 0001dde8     ........ .......
   1de30:	00000016 00000019 00000009 20697073     ............spi 
   1de40:	74696e69 69616620 0000006c 0001de3c     init fail...<...
   1de50:	0000000d 0001de4c 0001dde8 00000016     ....L...........
   1de60:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1de70:	0000006c 0001de68 00000009 0001de74     l...h.......t...
   1de80:	0001dde8 00000016 00000045 00000009     ........E.......
   1de90:	0001dde8 00000016 0000006c 0000001b     ........l.......

0001dea0 <str.0>:
   1dea0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1deb0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dec0:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   1ded0:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   1dee0:	6e6f4e60 76206065 65756c61 00002928     `None` value()..
   1def0:	0000a48b 00000000 00000001 00013fcb     .............?..
   1df00:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1df10:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1df20:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1df30:	39393236 65396264 33323863 6165682f     6299db9ec823/hea
   1df40:	73656c70 2e302d73 2f312e35 2f637273     pless-0.5.1/src/
   1df50:	2e636576 00007372 0001df00 00000056     vec.rs......V...
   1df60:	00000066 00000009 00000000 00000000     f...............

0001df70 <str.0>:
   1df70:	65747461 2074706d 61206f74 77206464     attempt to add w
   1df80:	20687469 7265766f 776f6c66 0001df00     ith overflow....
   1df90:	00000056 0000003e 0000000c 0001df00     V...>...........
   1dfa0:	00000056 0000007e 00000011 00000000     V...~...........

0001dfb0 <str.1>:
   1dfb0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dfc0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dfd0:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1dfe0:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1dff0:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1e000:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1e010:	20736920 00000000 00000020 00000008      is .... .......
   1e020:	00000002 00000000 00000000 00000002     ................
   1e030:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1e040:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1e050:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1e060:	00000002 00000000 00000002 00000000     ................
   1e070:	00000003 00000000 00000020 00000008     ........ .......
   1e080:	00000002 00000000 00000001 00000001     ................
   1e090:	00000003 002e2e60 0001e095 00000002     ....`...........
   1e0a0:	65726c61 20796461 72726f62 6465776f     already borrowed
   1e0b0:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1e0c0:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1e0d0:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001e0e0 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1e0e0:	00010201 00000000 00000000 00000000     ................
   1e0f0:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1e100:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1e110:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1e120:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1e130:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1e140:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1e150:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1e160:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1e170:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1e180:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1e190:	656e6f4e 61762060 3a65756c 00000020     None` value: ...
   1e1a0:	0001dfd4 00000000 0001e19b 00000002     ................
   1e1b0:	00014eff 00000000 00000001 00014f4f     .N..........OO..
   1e1c0:	74756220 65687420 646e6920 69207865      but the index i
   1e1d0:	00002073 0001dff4 00000020 0001e1c0     s ...... .......
   1e1e0:	00000012 00014eff 0000000c 00000004     .....N..........
   1e1f0:	0001515f 000154b5 00015565 202c0a2c     _Q...T..eU..,., 
   1e200:	2c280a28 30783029 30313030 30333032     (.(,)0x000102030
   1e210:	30353034 30373036 31393038 31313130     4050607080910111
   1e220:	31333132 31353134 31373136 32393138     2131415161718192
   1e230:	32313230 32333232 32353234 32373236     0212223242526272
   1e240:	33393238 33313330 33333332 33353334     8293031323334353
   1e250:	33373336 34393338 34313430 34333432     6373839404142434
   1e260:	34353434 34373436 35393438 35313530     4454647484950515
   1e270:	35333532 35353534 35373536 36393538     2535455565758596
   1e280:	36313630 36333632 36353634 36373636     0616263646566676
   1e290:	37393638 37313730 37333732 37353734     8697071727374757
   1e2a0:	37373736 38393738 38313830 38333832     6777879808182838
   1e2b0:	38353834 38373836 39393838 39313930     4858687888990919
   1e2c0:	39333932 39353934 39373936 00393938     293949596979899.
   1e2d0:	00014eff 00000004 00000004 00015589     .N...........U..
   1e2e0:	0001558f 00015595 2f637273 6362696c     .U...U..src/libc
   1e2f0:	2f65726f 2f746d66 2e646f6d 00007372     ore/fmt/mod.rs..
   1e300:	0001e2e8 00000016 0000043b 00000011     ........;.......
   1e310:	0001e2e8 00000016 00000445 00000024     ........E...$...
   1e320:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   1e330:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   1e340:	6f207475 61722066 2065676e 20726f66     ut of range for 
   1e350:	63696c73 666f2065 6e656c20 20687467     slice of length 
   1e360:	0001e338 00000006 0001e33e 00000022     8.......>..."...
   1e370:	0001e320 00000018 00000a72 00000005      .......r.......
   1e380:	63696c73 6e692065 20786564 72617473     slice index star
   1e390:	61207374 62202074 65207475 2073646e     ts at  but ends 
   1e3a0:	00207461 0001e380 00000016 0001e396     at .............
   1e3b0:	0000000d 0001e320 00000018 00000a78     .... .......x...
   1e3c0:	00000005 696e6966 64656873 73796168     ....finishedhays
   1e3d0:	6b636174 79622820 20736574 6167654e     tack (bytes Nega
   1e3e0:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   1e3f0:	6c617267 61706e55 64656b63 69666e49     gralUnpackedInfi
   1e400:	6574696e 756e694d 77615273 7265764f     niteMinusRawOver
   1e410:	776f6c66 6b636162 72657469 6f746e49     flowbackiterInto
   1e420:	72657449 61636f6c 6e6f6974 61636f4c     IterlocationLoca
   1e430:	6e6f6974 72616573 72656863 69736f70     tionsearcherposi
   1e440:	6e6f6974 74697263 736f705f 656e694c     tioncrit_posLine
   1e450:	796e4173 57776152 72656b61 6f6c6c41     sAnyRawWakerAllo
   1e460:	72724563 38746e69 745f3478 2f637273     cErrint8x4_tsrc/
   1e470:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   1e480:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   1e490:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   1e4a0:	2073646e 6020666f 0001e487 0000000b     nds of `........
   1e4b0:	0001e492 00000016 0001e094 00000001     ................
   1e4c0:	0001e46c 00000016 00000853 00000009     l.......S.......
   1e4d0:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   1e4e0:	0001e4d0 0000000e 0001e104 00000004     ................
   1e4f0:	0001e0b0 00000010 0001e094 00000001     ................
   1e500:	0001e46c 00000016 00000857 00000005     l.......W.......
   1e510:	0001e46c 00000016 00000868 0000000e     l.......h.......
   1e520:	20736920 20746f6e 68632061 62207261      is not a char b
   1e530:	646e756f 3b797261 20746920 69207369     oundary; it is i
   1e540:	6469736e 20292065 6020666f 0001e487     nside ) of `....
   1e550:	0000000b 0001e520 00000026 0001e3d4     .... ...&.......
   1e560:	00000008 0001e546 00000006 0001e094     ....F...........
   1e570:	00000001 0001e46c 00000016 0000086a     ....l.......j...
   1e580:	00000005 0001e034 00000020 0000001a     ....4... .......
   1e590:	00000028 05030100 03060605 08080607     (...............
   1e5a0:	1c0a1109 140c190b 0d0e120d 0310040f     ................
   1e5b0:	09131212 05170116 03190218 021c071a     ................
   1e5c0:	161f011d 042b0320 0b2d022c 0330012e     .... .+.,.-...0.
   1e5d0:	01320231 02a902a7 08ab04aa 05fb02fa     1.2.............
   1e5e0:	03fe04fd 78ad09ff a28d8b79 8b585730     .......xy...0WX.
   1e5f0:	1d1c908c 4b0f0edd 2efcfb4c 5d5c3f2f     .......KL.../?\]
   1e600:	84e2b55f 92918e8d bbbab1a9 cac9c6c5     _...............
   1e610:	ffe5e4de 12110400 37343129 493d3b3a     ........)147:;=I
   1e620:	8e845d4a b4b1a992 cac6bbba e5e4cfce     J]..............
   1e630:	0e0d0400 31291211 453b3a34 5e4a4946     ......)14:;EFIJ^
   1e640:	91846564 cec99d9b 29110dcf 64574945     de.........)EIWd
   1e650:	a9918d65 c5bbbab4 e5e4dfc9 110d04f0     e...............
   1e660:	65644945 b2848180 d5bfbebc 83f1f0d7     EIde............
   1e670:	a6a48b85 c7c5bfbe dbdacfce cdbd9848     ............H...
   1e680:	49cfcec6 59574f4e 8e895f5e b7b6b18f     ...INOWY^_......
   1e690:	c7c6c1bf 171611d7 f7f65c5b 0d80fffe     ........[\......
   1e6a0:	dfde716d 6e1f0f0e 5f1d1c6f afae7e7d     mq.....no.._}~..
   1e6b0:	16fabcbb 461f1e17 584f4e47 7e5e5c5a     .......FGNOXZ\^~
   1e6c0:	d4c5b57f f1f0dcd5 8f7372f5 97967574     .........rs.tu..
   1e6d0:	2e265f2f b7afa72f d7cfc7bf 97409adf     /_&./.........@.
   1e6e0:	1f8f3098 ffcec1c0 5b5a4f4e 100f0807     .0......NOZ[....
   1e6f0:	efee2f27 3d376f6e 9045423f 53fffe91     '/..no7=?BE....S
   1e700:	c9c87567 d9d8d1d0 00fffee7 82225f20     gu.......... _".
   1e710:	448204df 06041b08 0eac8111 1e35ab80     ...D..........5.
   1e720:	03e08015 04010819 0434042f 07010307     ......../.4.....
   1e730:	0a110706 07120f50 04020855 03090a1c     ....P...U.......
   1e740:	03070308 03030302 0305040c 0e01060b     ................
   1e750:	033a0515 05060711 07570710 0d150702     ..:.......W.....
   1e760:	03430450 0401032d 0c0f0611 251d043a     P.C.-.......:..%
   1e770:	046d205f c880256a 03b08205 fd82061a     _ m.j%..........
   1e780:	15075903 1409170b 6a0c140c 1a060a06     .Y.........j....
   1e790:	2b075906 2c0a4605 01040c04 2c0b3103     .Y.+.F.,.....1.,
   1e7a0:	0b061a04 06ac8003 411f060a 032d044c     ...........AL.-.
   1e7b0:	033c0874 073c030f 052b0838 1811ff82     t.<...<.8.+.....
   1e7c0:	2d112f08 21102003 048c800f 0b199782     ./.-. .!........
   1e7d0:	05948815 073b052f 09180e02 7430b080     ..../.;.......0t
   1e7e0:	1ad6800c ff80050c 05b68005 c69b0c24     ............$...
   1e7f0:	1030d20a 37038d84 145c8109 8008b880     ..0....7..\.....
   1e800:	043530c7 0838060a 060c0846 031e0b74     .05...8.F...t...
   1e810:	0959045a 1c188380 4809160a 068a8008     Z.Y........H....
   1e820:	170ca4ab 04a13104 0726da81 8005050c     .....1....&.....
   1e830:	6d8111a5 2a287810 80044c06 be80048d     ...m.x(*.L......
   1e840:	0f031b03 0106000d 04010301 09080802     ................
   1e850:	0b050a02 11011002 13051204 15021411     ................
   1e860:	19021702 1d051c04 6a012408 bc026b03     .........$.j.k..
   1e870:	d402d102 d609d50c da02d702 e105e001     ................
   1e880:	ee02e802 f904f020 0c02fa06 4e3e3b27     .... .......';>N
   1e890:	9e9e8f4f 0907069f 563e3d36 04d1d0f3     O.......6=>V....
   1e8a0:	37361814 35bd5756 12e0cfce 9e8e8987     ..67VW.5........
   1e8b0:	110e0d04 34312912 4946453a 644f4e4a     .....)14:EFIJNOd
   1e8c0:	b65c5a65 a81c1bb7 09d9d8a9 a8919037     eZ\.........7...
   1e8d0:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   1e8e0:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   1e8f0:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   1e900:	c53f3e25 232004c6 33282625 4a483a38     %>?... #%&(38:HJ
   1e910:	5553504c 5c5a5856 6563605e 78736b66     LPSUVXZ\^`cefksx
   1e920:	a48a7f7d c0b0afaa a3720cd0 6ecccba4     }.........r....n
   1e930:	7b225e6f 2d040305 01046503 82802e2f     o^"{...-.e../...
   1e940:	0f31031d 0924041c 052b051e 2a0e0444     ..1...$...+.D..*
   1e950:	2406aa80 28042404 010b3408 37819080     ...$.$.(.4.....7
   1e960:	080a1609 03399880 30090863 03210516     ......9.c..0..!.
   1e970:	4001051b 054b0438 070a042f 20400709     ...@8.K./.....@ 
   1e980:	090c0427 053a0336 0c04071a 37495007     '...6.:......PI7
   1e990:	07330d33 810a082e 81801f26 802a0828     3.3.....&...(.*.
   1e9a0:	4e091786 430f1e04 0a07190e 27094706     ...N...C.....G.'
   1e9b0:	3f0b7509 3b062a41 51060a05 10050106     .u.?A*.;...Q....
   1e9c0:	8b800503 08482060 5ea6800a 0a0b4522     ....` H....^"E..
   1e9d0:	39130d06 2c360a07 c0801004 0c53643c     ...9..6,....<dS.
   1e9e0:	45a08001 5308481b 0781391d 031d0a46     ...E.H.S.9..F...
   1e9f0:	03374947 060a080e 810a0739 c7801936     GI7.....9...6...
   1ea00:	9b830d32 800b7566 84bc8ac4 82d18f2f     2...fu....../...
   1ea10:	82b9a147 042a0739 0a266002 05280a46     G...9.*..`&.F.(.
   1ea20:	5bb08213 39044b65 04401107 08f8971c     ...[eK.9..@.....
   1ea30:	0da5f382 03311f81 81080411 6b04898c     ......1........k
   1ea40:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   1ea50:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   1ea60:	802b5085 1a032dd5 70810204 8501053a     .P+..-.....p:...
   1ea70:	29d78000 040a044c 44118302 c2803d4c     ...)L......DL=..
   1ea80:	0401063c 341b0555 2c0e8102 560c6404     <...U..4...,.d.V
   1ea90:	5d030d0a 1d393d03 09042c0d 060e0207     ...].=9..,......
   1eaa0:	d6839a80 0b030d0a 590c7405 0c140c07     .........t.Y....
   1eab0:	0a083804 1e082806 31037752 0ca68003     .8...(..Rw.1....
   1eac0:	05030414 85060d03 6372736a 62696c2f     ........jsrc/lib
   1ead0:	65726f63 696e752f 65646f63 646f6d2f     core/unicode/mod
   1eae0:	0073722e 0001eac9 0000001a 00000038     .rs.........8...
   1eaf0:	0000000f 0001eac9 0000001a 00000039     ............9...
   1eb00:	00000010                                ....

0001eb04 <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   1eb04:	1b150f04 17120319 0e000011 00000016     ................
	...
   1eb2c:	00130600 00000000 00000000 00000000     ................
   1eb3c:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   1eb5c:	01050000 00000000 00000000 00000000     ................
   1eb6c:	00000000 10000000 00000000 0009000b     ................
   1eb7c:	                                         ...

0001eb7f <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   1eb9b:	00120f00 00000000 00000000 00000000     ................
   1ebab:	0000001f 00000000 00000000 00000000     ................
   1ebbb:	1d664649 00000000 00000000 00000000     IFf.............
   1ebcb:	00003e8a 00000000 00000000 4b000000     .>.............K
   1ebdb:	00000053 00000000 00000000 42236700     S............g#B
	...
   1ebf7:	0000003d 00230000 00000000 00000000     =.....#.........
   1ec07:	2d000075 00000000 00000000 00000000     u..-............
   1ec17:	003c4e82 00000000 00000000 63000000     .N<............c
   1ec27:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   1ec37:	00000300 00000000 00000000 0000002f     ............/...
   1ec47:	00000000 00001000 13000000 00000800     ................
	...
   1ec5f:	43000000 89007200 00000000 00000000     ...C.r..........
   1ec6f:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   1ec7f:	00210000 00000000 00000000 00000000     ..!.............
   1ec8f:	4100000a 00000000 00000000 00000000     ...A............
   1ec9f:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   1ecaf:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   1ecbf:	00000031 00000053 3a000000 00000000     1...S......:....
   1eccf:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   1ecdf:	0017003b 00000000 00000000 00000000     ;...............
   1ecef:	57000055 83000000 00000000 00000000     U..W............
   1ecff:	00000059 26000000 00161b6e 00000000     Y......&n.......
   1ed0f:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   1ed1f:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   1ed2f:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   1ed3f:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   1ed4f:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   1ed5f:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

0001ed70 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   1ed78:	00000001 00000000 0000000d 00000000     ................
   1ed88:	0000001c 00000000 00000040 00000000     ........@.......
   1ed98:	000000b6 00000000 000000bf 00000000     ................
   1eda8:	000003f8 00000000 000007f0 00000000     ................
   1edb8:	000007ff 00000000 00001000 00000000     ................
   1edc8:	00001e00 00000000 00003800 00000000     .........8......
   1edd8:	00003f00 00000000 00007f80 00000000     .?..............
   1ede8:	00008000 00000000 0001ffc0 00000000     ................
   1edf8:	0003ff80 00000000 00078000 00000000     ................
   1ee08:	007f0000 00000000 00802001 00000000     ......... ......
   1ee18:	00a30000 00000000 037ffc00 00000000     ................
   1ee28:	06000000 00000000 07ff0000 00000000     ................
   1ee38:	09800000 00000000 0e000000 00000000     ................
   1ee48:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   1ee58:	200ffe40 00000000 30000001 00000000     @.. .......0....
   1ee68:	40000000 00000000 4000005c 00000000     ...@....\..@....
   1ee78:	60000000 00000000 805c8400 00000000     ...`......\.....
   1ee88:	c0000000 00000000 e0000000 00000000     ................
   1ee98:	00000000 00000001 0cf00000 00000001     ................
   1eea8:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   1eeb8:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   1eec8:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   1eed8:	00000000 00000060 00000844 00000060     ....`...D...`...
   1eee8:	00000000 000000f0 00000060 00000200     ........`.......
   1eef8:	f9ffff7f 000007db 80000000 000007f8     ................
   1ef08:	e0000000 00000fbc 00000000 00002120     ............ !..
   1ef18:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   1ef28:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   1ef38:	00000000 00003fc0 00000000 0000f000     .....?..........
   1ef48:	00000000 0000fc00 f8000010 0000fffe     ................
   1ef58:	0000ffff 0000ffff ffffffff 0000ffff     ................
   1ef68:	fffff800 00010000 00000000 0001ffc0     ................
   1ef78:	ffff0000 0001ffff 00000000 00030000     ................
   1ef88:	00000000 00038000 00000000 0003a340     ............@...
   1ef98:	00000000 00080000 000c0000 000c0000     ................
   1efa8:	00000004 000ff800 00000000 00180000     ................
   1efb8:	001c0000 001c0000 c3000000 001e0001     ................
   1efc8:	00000000 001f0000 00800001 001f1fc0     ................
   1efd8:	00000007 001fef80 ffffffff 00201fff     .............. .
   1efe8:	00023986 00230000 00000002 00403000     .9....#......0@.
   1eff8:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   1f008:	00000000 007f0000 00000000 00bf2800     .............(..
   1f018:	00000000 00cff000 03000000 02a00000     ................
   1f028:	fff70000 031021fd 00000003 06780000     .....!........x.
   1f038:	00000000 06ff8000 00000000 07c00000     ................
   1f048:	00000000 07f20000 00000000 0e040187     ................
   1f058:	00000006 10000000 00001008 10000000     ................
   1f068:	00000007 14000000 0000000f 17f00000     ................
   1f078:	00000000 1ff20000 feffe0df 1fffffff     ................
   1f088:	00000000 20000000 00000000 200ff800     ....... ....... 
   1f098:	00000007 33c80000 00000000 3fb00000     .......3.......?
   1f0a8:	00000000 3ff78000 00000004 40000000     .......?.......@
   1f0b8:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   1f0c8:	00000002 50000000 00000003 58000000     .......P.......X
   1f0d8:	00000000 66fde000 000007fe 79f80000     .......f.......y
   1f0e8:	00000003 7fc00000 00000000 7ffe0000     ................
   1f0f8:	00000000 7fff0000 00000000 80000000     ................
   1f108:	0000007f 80000000 00000030 8003ffff     ........0.......
   1f118:	0000f06e 87000000 00000002 90000000     n...............
   1f128:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   1f138:	00000000 a7f80000 00000000 b03c8000     ..............<.
   1f148:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   1f158:	fffe0000 bfffffff 00000011 c0000000     ................
   1f168:	00000000 c19d0000 00000002 d0000000     ................
   1f178:	00000000 f807c3a0 ffffffff f87fffff     ................
   1f188:	ffffffff fbffffff 000021be fc00000c     .........!......
   1f198:	00000000 ff000000 00000002 ff000000     ................
   1f1a8:	00020000 ffff0000 fff80000 fffffffb     ................
   1f1b8:	00000000 ffffffff ffffffff ffffffff     ................
   1f1c8:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

0001f1d8 <nrf52_hal_i2cs>:
   1f1d8:	00000000 20000108                       ....... 

0001f1e0 <nrf52_hal_spis>:
   1f1e0:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   1f1f0:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   1f200:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   1f210:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   1f220:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   1f230:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   1f240:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   1f250:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   1f260:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   1f270:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   1f280:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   1f290:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   1f2a0:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   1f2b0:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   1f2c0:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   1f2d0:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   1f2e0:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   1f2f0:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   1f300:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   1f310:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   1f320:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   1f330:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   1f340:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   1f350:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   1f360:	00000000 656c6469 00000000 7379736d     ....idle....msys
   1f370:	0000315f                                _1..

0001f374 <MemFile_methods>:
   1f374:	00019c05 00000000                       ........

0001f37c <stdout>:
   1f37c:	20000124                                $.. 

0001f380 <nrf52k_flash_dev>:
   1f380:	0001f398 00000000 00080000 00000080     ................
   1f390:	00000001 000000ff                       ........

0001f398 <nrf52k_flash_funcs>:
   1f398:	00019e71 00019da1 00019d29 00019d81     q.......).......
   1f3a8:	00000000 00019d7d 00000000              ....}.......

0001f3b4 <nrf52_hal_timers>:
   1f3b4:	2000ded0 00000000 00000000 00000000     ... ............
	...

0001f3cc <hal_i2c1_cfg>:
   1f3cc:	00000007 00000006 00000064              ........d...

0001f3d8 <os_bsp_spi0m_cfg>:
   1f3d8:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   1f3e8:	7476655f 00000073                       _evts...

0001f3f0 <COLLECTOR_NODE_HW_ID>:
   1f3f0:	066aff57 50547878 67242949              W.j.xxTPI)$g

0001f3fc <SENSOR_NODE_HW_IDS>:
   1f3fc:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   1f40c:	08070605 020b0a09 04030201 08070605     ................
   1f41c:	030b0a09 04030201 08070605 040b0a09     ................
   1f42c:	04030201 08070605 050b0a09 77687325     ............%shw
   1f43c:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   1f44c:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   1f45c:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   1f46c:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   1f47c:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   1f48c:	0a732520 00000000 00000000               %s.........

0001f498 <sensor_node_addresses>:
   1f498:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   1f4a8:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   1f4b8:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   1f4c8:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   1f4d8:	00000a73                                s...

0001f4dc <g_temp_stub_sensor_driver>:
   1f4dc:	0001acad 0001abb5 00000000 00000000     ................
	...
   1f504:	20425453 64616572 6d657420 65732070     STB read temp se
   1f514:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   1f524:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0001f534 <sysflash_map_dflt>:
	...
   1f53c:	00004000 00000001 00008000 00073c00     .@...........<..
   1f54c:	00000002 0007bc00 00000400 00000003     ................
   1f55c:	0007c000 00001000 00000010 00004000     .............@..
   1f56c:	00004000 00000011 0007d000 00003000     .@...........0..
   1f57c:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   1f58c:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  95636	    108	  57144	 152888	  25538	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
