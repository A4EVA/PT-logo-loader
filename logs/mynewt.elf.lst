
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x00015068 vaddr 0x00005068 paddr 0x00005068 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00005080 memsz 0x00005080 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x00005080 align 2**16
         filesz 0x00000084 memsz 0x00006228 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00005068  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00005068  00005068  0002015c  2**0  CONTENTS
  2 .ARM.exidx         00000018  00005068  00005068  00015068  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  0002015c  2**0  CONTENTS
  5 .data              00000084  200000d8  00005080  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  2000015c  2000015c  0002015c  2**0  CONTENTS
  7 .bss               000061a4  2000015c  00005104  0002015c  2**2  ALLOC
  8 .stack_dummy       000001b0  20006300  20006300  00020160  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  00020310  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  0002033f  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203be  2**0  CONTENTS, READONLY
 12 .debug_line        0000efb4  00000000  00000000  000203c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        00024ff9  00000000  00000000  0002f376  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      000066eb  00000000  00000000  0005436f  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     000011d0  00000000  00000000  0005aa60  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00005ab4  00000000  00000000  0005bc30  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000d88b  00000000  00000000  000616e4  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      00000fb8  00000000  00000000  0006ef6f  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       00002eb8  00000000  00000000  0006ff28  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005068 l    d  .ARM.extab	00000000 .ARM.extab
00005068 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
2000015c l    d  .bssnz	00000000 .bssnz
2000015c l    d  .bss	00000000 .bss
20006300 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001ec l     F .text	0000003c errata_16
00000228 l     F .text	0000004c errata_31
00000274 l     F .text	0000003c errata_32
000002b0 l     F .text	0000004c errata_36
000002fc l     F .text	0000003c errata_37
00000338 l     F .text	0000003c errata_57
00000374 l     F .text	0000003c errata_66
000003b0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 display_image.c
00000658 l     F .text	0000001e hard_reset
00000678 l     F .text	00000018 delay_ms
00000690 l     F .text	0000003a transmit_spi
000006ca l     F .text	0000001a write_data
000006e4 l     F .text	0000004e write_command
00000734 l     F .text	0000014c init_display
00000880 l     F .text	00000028 set_orientation
00004bf4 l     O .text	00000004 CASET1_PARA.7811
00004bf8 l     O .text	00000004 CASET2_PARA.7814
00004bfc l     O .text	00000001 COLMOD_PARA.7833
00004c00 l     O .text	00000003 FRMCTR1_PARA.7821
00004c04 l     O .text	00000003 FRMCTR2_PARA.7822
00004c08 l     O .text	00000006 FRMCTR3_PARA.7823
00004c10 l     O .text	00000001 INVCTR_PARA.7824
00004c14 l     O .text	00000001 MADCTL1_PARA.7831
00004c18 l     O .text	00000003 PWCTR1_PARA.7825
00004c1c l     O .text	00000001 PWCTR2_PARA.7826
00004c20 l     O .text	00000002 PWCTR3_PARA.7827
00004c24 l     O .text	00000002 PWCTR4_PARA.7828
00004c28 l     O .text	00000002 PWCTR5_PARA.7829
00004c2c l     O .text	00000028 RAMWR1_PARA.7813
00004c54 l     O .text	00000028 RAMWR2_PARA.7816
00004c7c l     O .text	00000004 RASET1_PARA.7812
00004c80 l     O .text	00000004 RASET2_PARA.7815
00004c84 l     O .text	00000001 VMCTR1_PARA.7830
00000000 l    df *ABS*	00000000 hal_bsp.c
00004cb4 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
000009cc l     F .text	00000014 hal_spiflash_sector_info
000009e0 l     F .text	0000002e spiflash_release_power_down_generic
00000a0e l     F .text	00000008 spiflash_delay_us
00000ab0 l     F .text	00000050 spiflash_wait_ready_till
00000b16 l     F .text	0000006a hal_spiflash_read
00000ba0 l     F .text	000000c8 hal_spiflash_write
00000c68 l     F .text	00000078 spiflash_execute_erase
00000ce0 l     F .text	0000002c spiflash_erase_cmd
00000d1a l     F .text	00000008 hal_spiflash_erase_sector
00000dec l     F .text	00000008 hal_spiflash_erase
00000e58 l     F .text	0000003e hal_spiflash_init
00004cec l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
00004cbc l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000e9c l     F .text	00000028 nrf52k_flash_wait_ready
00000ec4 l     F .text	00000054 nrf52k_flash_erase_sector
00000f18 l     F .text	00000004 nrf52k_flash_init
00000f1c l     F .text	00000020 nrf52k_flash_sector_info
00000f3c l     F .text	000000d0 nrf52k_flash_write
0000100c l     F .text	0000000e nrf52k_flash_read
00004d20 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
00001074 l     F .text	0000006e nrf52_irqm_handler
000010fc l     F .text	00000014 hal_spi_stop_transfer
00001110 l     F .text	0000004a hal_spi_config_slave
0000115c l     F .text	000000b8 hal_spi_init_master
00001214 l     F .text	000000de hal_spi_config_master
00004d3c l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
0000156a l     F .text	0000000e nrf52_hal_wdt_default_handler
00001578 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00001610 l     F .text	00000034 nrf52_periph_create_timers
00001644 l     F .text	00000020 nrf52_periph_create_spi
00004d48 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
00001670 l     F .text	0000000a nrf_read_timer_cntr
0000167c l     F .text	000000b4 nrf_timer_set_ocmp
00001730 l     F .text	0000000a nrf_timer_disable_ocmp
0000173a l     F .text	0000000a nrf_rtc_disable_ocmp
00001744 l     F .text	00000054 hal_timer_read_bsptimer
00001798 l     F .text	00000076 hal_timer_chk_queue
0000180e l     F .text	0000002c hal_timer_irq_handler
00004d4c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_msys.c
00001aec l     F .text	00000010 os_msys_find_biggest_pool
00001afc l     F .text	0000002c os_msys_find_pool
00001b74 l     F .text	00000044 os_msys_init_once
2000015c l     O .bss	00004900 os_msys_1_data
20004a5c l     O .bss	0000000c os_msys_1_mbuf_pool
20004a68 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00001dc4 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 HAL_CM4.o
00001f04 l       .text	00000000 SVC_User
00001f22 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00001fa8 l       .text	00000000 test1
00001f9c l       .text	00000000 loop1
00001fae l       .text	00000000 res1
00001fca l       .text	00000000 test2
00001fd2 l       .text	00000000 done
00001fbe l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001fde l       .text	00000000 test1
00001fda l       .text	00000000 loop1
00001fec l       .text	00000000 test2
00001fe8 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 console.c
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
00002098 l     F .text	00000024 __semihost
000020bc l     F .text	00000010 debugger_connected
000020cc l     F .text	0000002e semihost_write
000021a0 l     F .text	0000001c semihosting_console_write_ch
20004a88 l     O .bss	00000004 semihost_mbuf
20000148 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
20004a8c l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 flash_map.c
00002204 l     F .text	00000078 flash_map_read_mfg
20004a90 l     O .bss	00000078 mfg_areas.7780
00000000 l    df *ABS*	00000000 mfg.c
00002428 l     F .text	00000094 mfg_seek_next_aux
000024bc l     F .text	00000070 mfg_read_mmr
0000252c l     F .text	00000054 mfg_read_next_mmr
00002580 l     F .text	0000003c mfg_open_flash_area
000025bc l     F .text	00000044 mfg_read_tlv_body
00002674 l     F .text	0000004e mfg_read_mmr_refs
20004b08 l     O .bss	00000001 mfg_initialized
20004b0c l     O .bss	00000018 mfg_mmrs
20004b24 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 sysinit.c
000026c2 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 loader.c
000026f8 l     F .text	00000040 boot_is_header_valid
00002738 l     F .text	0000001c boot_write_sz
00002754 l     F .text	0000009c boot_read_image_size
000027f0 l     F .text	00000054 boot_check_header_erased
00002844 l     F .text	00000048 boot_initialize_area
0000288c l     F .text	0000003a boot_read_sectors
000028c8 l     F .text	00000034 boot_image_check
000028fc l     F .text	0000007e boot_validate_slot
0000297a l     F .text	00000038 boot_validated_swap_type
000029b2 l     F .text	00000036 boot_read_image_headers
00002a20 l     F .text	0000009c boot_swap_image
00002abc l     F .text	00000078 boot_complete_partial_swap
00002b34 l     F .text	00000058 boot_perform_update
00002b8c l     F .text	000000be boot_prepare_image_for_update
20004b28 l     O .bss	0000006c boot_data
20004b94 l     O .bss	00000400 buf.4971
20004f94 l     O .bss	00000600 primary_slot_sectors.5011
20005594 l     O .bss	00000600 scratch_sectors.5013
20005b94 l     O .bss	00000600 secondary_slot_sectors.5012
20006194 l     O .bss	00000100 tmpbuf.4904
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
0000302e l     F .text	0000002e boot_copy_sz
0000305c l     F .text	00000332 boot_swap_sectors
00004f2c l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
00003676 l     F .text	0000000c boot_flag_decode
00003684 l     F .text	00000018 boot_magic_decode
0000369c l     F .text	00000060 boot_find_status
000036fc l     F .text	0000006a boot_write_trailer
00003766 l     F .text	00000016 boot_write_trailer_flag
00004f50 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00003a40 l     F .text	0000007e bootutil_img_hash
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00004f64 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
000040a8 l     F .text	0000001e hal_flash_check_addr
20006294 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 tinyprintf.c
0000433a l     F .text	000000c0 ui2a
000043fa l     F .text	00000020 i2a
0000441a l     F .text	00000030 a2d
0000444a l     F .text	00000036 a2i
00004480 l     F .text	0000002a putf
000044ac l     F .text	0000011c putchw
000045c8 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 mynewt.c
000048c8 l     F .text	00000004 stdin_read
000048cc l     F .text	00000010 stdout_write
20000150 l     O .data	00000004 _stdin
20000154 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0000214c g     F .text	00000054 console_buffer
20006300 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
200062e0 g     O .bss	00000008 g_os_mempool_list
00000144  w    F .text	00000002 RTC0_IRQHandler
000037f4 g     F .text	000000c0 boot_read_swap_state
00002e3c g     F .text	00000010 boot_go
200000d8 g       .data	00000000 __data_start__
00004d08 g     O .text	00000018 nrf52k_flash_dev
00004890 g     F .text	00000024 printf
00005064 g     O .text	00000004 stdout
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00001052 g     F .text	00000022 hal_gpio_write
00003dbc g     F .text	00000128 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
0000184c g     F .text	00000060 hal_timer_init
00002612 g     F .text	0000001a mfg_seek_next_with_type
00001560 g     F .text	0000000a hal_system_start
00003940 g     F .text	00000044 boot_write_swap_info
000040ee g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
0000377c g     F .text	00000020 boot_magic_compatible_check
00001f52 g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
0000183c g     F .text	00000010 nrf52_timer0_irq_handler
00001ea0 g     F .text	00000026 os_memblock_put
00000144  w    F .text	00000002 PWM1_IRQHandler
00001bc8 g     F .text	00000028 os_msys_get_pkthdr
200062f8 g     O .bss	00000004 flash_map
000042a8 g     F .text	00000030 hal_flash_is_erased
00001f28 g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
00005080 g       .ARM.exidx	00000000 __exidx_end
00003d0c g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000174 g     F .text	0000002c hal_system_reset
20000148 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
00005080 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
0000235e g     F .text	00000026 flash_area_write
2000015c g       .bssnz	00000000 __bssnz_start__
00000d5e g     F .text	0000008e spiflash_erase
00001c40 g     F .text	00000002 os_time_delay
00000144  w    F .text	00000002 PDM_IRQHandler
00002e4c g     F .text	00000084 swap_erase_trailer_sectors
00002d14 g     F .text	00000128 context_boot_go
0000348e g     F .text	000000e0 boot_slots_compatible
0000262c g     F .text	0000000a mfg_read_tlv_flash_area
000021f8 g     F .text	0000000c console_get_ticks
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
00001c42 g     F .text	0000000a timer_handler
000035f8 g     F .text	0000007e swap_run
00001fd8 g     F .text	0000001a memcpy
00001598 g     F .text	00000078 hal_watchdog_init
00001ab8 g     F .text	0000000c os_cputime_init
00002ff4 g     F .text	0000003a swap_set_image_ok
000048dc g     F .text	00000000 .hidden __aeabi_uldivmod
000042d8 g     F .text	00000062 hal_flash_isempty
00000000 g       *ABS*	00000000 _imghdr_size
200062f0 g     O .bss	00000004 console_is_midline
00001cd0 g     F .text	00000014 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00002338 g     F .text	00000026 flash_area_read
000019d4 g     F .text	0000004c __assert_func
000010e4 g     F .text	00000018 nrf52_spi0_irq_handler
0000013c  w    F .text	00000002 UsageFault_Handler
00000d42 g     F .text	0000001c spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000462c g     F .text	0000025c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
2000015c g       .bss	00000000 __bss_start__
00000164 g     F .text	00000010 hal_debugger_connected
00004164 g     F .text	00000074 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
0000490c g     F .text	000002cc .hidden __udivmoddi4
000037ae g     F .text	0000001e boot_status_entries
0000379c g     F .text	00000008 boot_status_sz
200062e8 g     O .bss	00000004 g_current_task
00001c4c g     F .text	0000000c os_arch_save_sr
0000338e g     F .text	00000034 boot_read_image_header
00003904 g     F .text	00000020 boot_write_magic
00001e3c g     F .text	00000014 os_mempool_init
00000df4 g     F .text	00000064 spiflash_identify
00001ace g     F .text	00000016 os_cputime_delay_ticks
200062f4 g     O .bss	00000001 g_console_input_ignore
00005068 g       .text	00000000 __exidx_start
00002cb2 g     F .text	00000008 boot_erase_region
00003570 g     F .text	00000088 swap_status_source
00001d1c g     F .text	000000a8 os_mbuf_append
00002636 g     F .text	0000000a mfg_read_tlv_mmr_ref
00001ec8 g     F .text	00000014 os_set_env
00000978 g     F .text	00000014 hal_bsp_flash_dev
00001664 g     F .text	0000000c nrf52_periph_create
000023aa g     F .text	0000000a flash_area_align
00002144 g     F .text	00000008 disable_buffer
00002050 g     F .text	00000048 console_printf
00002048 g     F .text	00000008 console_blocking_mode
00000144  w    F .text	00000002 I2S_IRQHandler
000005da g     F .text	00000002 _init
000041d8 g     F .text	000000d0 hal_flash_erase
000037ee g     F .text	00000006 boot_swap_info_off
00003984 g     F .text	00000022 boot_write_swap_size
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
00002c4a g     F .text	00000068 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
000039a8 g     F .text	00000098 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
000038d4 g     F .text	00000030 boot_read_swap_size
00002fd6 g     F .text	0000001e swap_set_copy_done
000008a8 g     F .text	000000d0 display_image
00001c5e g     F .text	0000000a os_mbuf_pool_init
00001f5e g     F .text	0000001e os_default_irq_asm
00002f5a g     F .text	0000007c swap_read_status
00002640 g     F .text	00000024 mfg_init
00000148 g     F .text	00000010 _sbrkInit
2000015c g       .bssnz	00000000 __bssnz_end__
000023cc g     F .text	0000005c flash_map_init
000048b4 g     F .text	00000014 vprintf
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000033c4 g     F .text	000000b0 swap_read_status_bytes
00000144  w    F .text	00000002 PWM2_IRQHandler
2000015c g       .data	00000000 __data_end__
00003f6a g     F .text	0000013e mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
200062dc g     O .bss	00000004 g_os_time
000013e0 g     F .text	00000060 hal_spi_init
20006300 g       .bss	00000000 __bss_end__
00001c68 g     F .text	00000032 os_mbuf_get
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00000a9a g     F .text	00000016 spiflash_device_ready
00001bb8 g     F .text	00000010 os_msys_reset
00000144 g     F .text	00000002 Default_Handler
000005cc g     F .text	0000000e _start
00003924 g     F .text	0000000e boot_write_copy_done
00003474 g     F .text	0000001a boot_status_internal_off
00001edc g     F .text	00000006 os_arch_init_task_stack
00004f40 g     O .text	00000010 boot_img_magic
0000101a g     F .text	00000038 hal_gpio_init_out
2000014c g     O .data	00000004 sysinit_panic_cb
00001e50 g     F .text	00000032 os_memblock_get
000026c8 g     F .text	00000030 mem_init_mbuf_pool
000029fc g     F .text	00000022 boot_status_is_reset
00001a20 g     F .text	00000098 os_default_irq
00000d0c g     F .text	0000000e spiflash_sector_erase
000023b4 g     F .text	0000000a flash_area_erased_val
00002ed0 g     F .text	0000008a swap_status_init
200062ec g     O .bss	00000004 g_os_last_ctx_sw_time
00001f90 g     F .text	00000048 memcmp
00004bd8  w    F .text	00000002 .hidden __aeabi_ldiv0
000018ac g     F .text	000000f8 hal_timer_config
00003cfa g     F .text	00000012 flash_area_id_from_multi_image_slot
000029e8 g     F .text	00000014 boot_status_reset
00002cbc g     F .text	00000058 boot_copy_region
00001b28 g     F .text	0000004c os_msys_register
0000227c g     F .text	00000040 flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
000038b4 g     F .text	00000020 boot_read_swap_state_by_id
00001ff2 g     F .text	00000038 memset
00000000 g       .text	000000d8 __isr_vector
000005e4 g     F .text	00000074 main
00001488 g     F .text	0000002c hal_spi_set_txrx_cb
000021bc g     F .text	0000003c console_out_nolock
00000a16 g     F .text	0000005a spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
00001ee2 g     F .text	00000046 SVC_Handler
0000410e g     F .text	00000054 hal_flash_read
000019a4 g     F .text	00000030 hal_timer_read
00002384 g     F .text	00000026 flash_area_erase
20006298 g     O .bss	00000028 nrf52_hal_spi0
00001d08 g     F .text	00000014 os_mbuf_len
200062f5 g     O .bss	00000001 g_silence_console
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
200062fc g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00002600 g     F .text	00000012 mfg_seek_next
000023be g     F .text	0000000e flash_area_read_is_empty
0000202a g     F .text	0000001e console_write
000037cc g     F .text	00000022 boot_status_off
0000040c g     F .text	000001c0 SystemInit
00001ac4 g     F .text	0000000a os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
000040fe g     F .text	00000010 hal_flash_erased_val
00003abe g     F .text	000000ba bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
00001440 g     F .text	00000048 hal_spi_tx_val
00000b80 g     F .text	00000020 spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
000020fc g     F .text	00000048 console_flush
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
000012f4 g     F .text	00000038 hal_spi_config
000022bc g     F .text	0000007c flash_area_to_sectors
00004ee4 g     O .text	00000048 sysflash_map_dflt
200062c0 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
0000132c g     F .text	0000004c hal_spi_enable
00001ae4 g     F .text	00000008 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
00000b00 g     F .text	00000016 spiflash_wait_ready
00000d32 g     F .text	00000010 spiflash_block_64k_erase
00002664 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
00000998 g     F .text	00000034 NVIC_Relocate
20004a84 g     O .bss	00000004 os_flags
00001c58 g     F .text	00000006 os_arch_restore_sr
2000fe50 g       *ABS*	000001b0 __StackLimit
00003ee4 g     F .text	00000086 mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000003fc g     F .text	00000010 SystemCoreClockUpdate
00001ce4 g     F .text	00000024 os_mbuf_free_chain
00001bf0 g     F .text	00000034 os_msys_init
00001c24 g     F .text	0000000c os_time_get
000014b4 g     F .text	000000ac hal_spi_txrx
00001c9a g     F .text	00000036 os_mbuf_get_pkthdr
00004bd8  w    F .text	00000002 .hidden __aeabi_idiv0
00003b78 g     F .text	000000ca bootutil_tlv_iter_begin
00000e96 g     F .text	00000006 _exit
000001a0 g     F .text	0000004c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
00000a70 g     F .text	0000002a spiflash_read_status
00001e82 g     F .text	0000001e os_memblock_put_from_cb
00001c30 g     F .text	00000010 os_time_advance
000040c6 g     F .text	00000028 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000098c g     F .text	0000000c hal_bsp_init
00001378 g     F .text	00000068 hal_spi_disable
000005dc g     F .text	00000006 flash_device_base
00000d22 g     F .text	00000010 spiflash_block_32k_erase
00004888 g     F .text	00000008 vfprintf
000037a4 g     F .text	0000000a boot_trailer_sz
00003c42 g     F .text	000000b8 bootutil_tlv_iter_next
00003932 g     F .text	0000000e boot_write_image_ok
00003d18 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       8:	00000135 	.word	0x00000135
       c:	00000137 	.word	0x00000137
	...
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      2c:	00001ee3 	.word	0x00001ee3
	...
      38:	00001f29 	.word	0x00001f29
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      3c:	00001f53 	.word	0x00001f53
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      48:	00000145 	.word	0x00000145
      4c:	00000145 	.word	0x00000145
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      50:	00000145 	.word	0x00000145
      54:	00000145 	.word	0x00000145
      58:	00000145 	.word	0x00000145
      5c:	00000145 	.word	0x00000145
      60:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
                break;
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      74:	00000145 	.word	0x00000145
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	2000015c 	.word	0x2000015c
    ldr     r3, =__bss_end__
     114:	20006300 	.word	0x20006300
    ldr    r1, =__etext
     118:	00005080 	.word	0x00005080
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	2000015c 	.word	0x2000015c
    LDR     R0, =__HeapBase
     124:	20006300 	.word	0x20006300
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	0000040d 	.word	0x0000040d
    LDR     R0, =_start
     130:	000005cd 	.word	0x000005cd

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
     14a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
     14c:	6059      	str	r1, [r3, #4]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b02      	ldr	r3, [pc, #8]	; (170 <hal_debugger_connected+0xc>)
     166:	6818      	ldr	r0, [r3, #0]
}
     168:	f000 0001 	and.w	r0, r0, #1
     16c:	4770      	bx	lr
     16e:	bf00      	nop
     170:	e000edf0 	.word	0xe000edf0

00000174 <hal_system_reset>:
{
     174:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
     176:	f7ff fff5 	bl	164 <hal_debugger_connected>
     17a:	b100      	cbz	r0, 17e <hal_system_reset+0xa>
            asm("bkpt");
     17c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     17e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     182:	4905      	ldr	r1, [pc, #20]	; (198 <hal_system_reset+0x24>)
     184:	68ca      	ldr	r2, [r1, #12]
     186:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     18a:	4b04      	ldr	r3, [pc, #16]	; (19c <hal_system_reset+0x28>)
     18c:	4313      	orrs	r3, r2
     18e:	60cb      	str	r3, [r1, #12]
     190:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     194:	bf00      	nop
     196:	e7fd      	b.n	194 <hal_system_reset+0x20>
     198:	e000ed00 	.word	0xe000ed00
     19c:	05fa0004 	.word	0x05fa0004

000001a0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <Stack_Size+0x38>)
     1aa:	4013      	ands	r3, r2
     1ac:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1b0:	d018      	beq.n	1e4 <Stack_Size+0x34>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1b6:	2201      	movs	r2, #1
     1b8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1ba:	2100      	movs	r1, #0
     1bc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     1ce:	2b00      	cmp	r3, #0
     1d0:	d0f9      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1d6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <Stack_Size+0x38>)
     1dc:	4013      	ands	r3, r2
     1de:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1e2:	d1f0      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1e4:	4770      	bx	lr
     1e6:	bf00      	nop
     1e8:	00010003 	.word	0x00010003

000001ec <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1ec:	4b0b      	ldr	r3, [pc, #44]	; (21c <errata_16+0x30>)
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b06      	cmp	r3, #6
     1f2:	d001      	beq.n	1f8 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     1f4:	2000      	movs	r0, #0
     1f6:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1f8:	4b09      	ldr	r3, [pc, #36]	; (220 <errata_16+0x34>)
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	f013 0f0f 	tst.w	r3, #15
     200:	d107      	bne.n	212 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <errata_16+0x38>)
     204:	681b      	ldr	r3, [r3, #0]
     206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     20a:	2b30      	cmp	r3, #48	; 0x30
     20c:	d003      	beq.n	216 <errata_16+0x2a>
    return false;
     20e:	2000      	movs	r0, #0
     210:	4770      	bx	lr
     212:	2000      	movs	r0, #0
     214:	4770      	bx	lr
            return true;
     216:	2001      	movs	r0, #1
}
     218:	4770      	bx	lr
     21a:	bf00      	nop
     21c:	f0000fe0 	.word	0xf0000fe0
     220:	f0000fe4 	.word	0xf0000fe4
     224:	f0000fe8 	.word	0xf0000fe8

00000228 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     228:	4b0f      	ldr	r3, [pc, #60]	; (268 <errata_31+0x40>)
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	2b06      	cmp	r3, #6
     22e:	d001      	beq.n	234 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     230:	2000      	movs	r0, #0
     232:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     234:	4b0d      	ldr	r3, [pc, #52]	; (26c <errata_31+0x44>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	f013 0f0f 	tst.w	r3, #15
     23c:	d10b      	bne.n	256 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     23e:	4b0c      	ldr	r3, [pc, #48]	; (270 <errata_31+0x48>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     246:	2b30      	cmp	r3, #48	; 0x30
     248:	d007      	beq.n	25a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     24a:	2b40      	cmp	r3, #64	; 0x40
     24c:	d007      	beq.n	25e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     24e:	2b50      	cmp	r3, #80	; 0x50
     250:	d007      	beq.n	262 <errata_31+0x3a>
    return false;
     252:	2000      	movs	r0, #0
     254:	4770      	bx	lr
     256:	2000      	movs	r0, #0
     258:	4770      	bx	lr
            return true;
     25a:	2001      	movs	r0, #1
     25c:	4770      	bx	lr
            return true;
     25e:	2001      	movs	r0, #1
     260:	4770      	bx	lr
            return true;
     262:	2001      	movs	r0, #1
}
     264:	4770      	bx	lr
     266:	bf00      	nop
     268:	f0000fe0 	.word	0xf0000fe0
     26c:	f0000fe4 	.word	0xf0000fe4
     270:	f0000fe8 	.word	0xf0000fe8

00000274 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     274:	4b0b      	ldr	r3, [pc, #44]	; (2a4 <errata_32+0x30>)
     276:	781b      	ldrb	r3, [r3, #0]
     278:	2b06      	cmp	r3, #6
     27a:	d001      	beq.n	280 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     27c:	2000      	movs	r0, #0
     27e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <errata_32+0x34>)
     282:	681b      	ldr	r3, [r3, #0]
     284:	f013 0f0f 	tst.w	r3, #15
     288:	d107      	bne.n	29a <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     28a:	4b08      	ldr	r3, [pc, #32]	; (2ac <errata_32+0x38>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     292:	2b30      	cmp	r3, #48	; 0x30
     294:	d003      	beq.n	29e <errata_32+0x2a>
    return false;
     296:	2000      	movs	r0, #0
     298:	4770      	bx	lr
     29a:	2000      	movs	r0, #0
     29c:	4770      	bx	lr
            return true;
     29e:	2001      	movs	r0, #1
}
     2a0:	4770      	bx	lr
     2a2:	bf00      	nop
     2a4:	f0000fe0 	.word	0xf0000fe0
     2a8:	f0000fe4 	.word	0xf0000fe4
     2ac:	f0000fe8 	.word	0xf0000fe8

000002b0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2b0:	4b0f      	ldr	r3, [pc, #60]	; (2f0 <errata_36+0x40>)
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	2b06      	cmp	r3, #6
     2b6:	d001      	beq.n	2bc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     2b8:	2000      	movs	r0, #0
     2ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <errata_36+0x44>)
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	f013 0f0f 	tst.w	r3, #15
     2c4:	d10b      	bne.n	2de <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     2c6:	4b0c      	ldr	r3, [pc, #48]	; (2f8 <errata_36+0x48>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2ce:	2b30      	cmp	r3, #48	; 0x30
     2d0:	d007      	beq.n	2e2 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     2d2:	2b40      	cmp	r3, #64	; 0x40
     2d4:	d007      	beq.n	2e6 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d6:	2b50      	cmp	r3, #80	; 0x50
     2d8:	d007      	beq.n	2ea <errata_36+0x3a>
    return false;
     2da:	2000      	movs	r0, #0
     2dc:	4770      	bx	lr
     2de:	2000      	movs	r0, #0
     2e0:	4770      	bx	lr
            return true;
     2e2:	2001      	movs	r0, #1
     2e4:	4770      	bx	lr
            return true;
     2e6:	2001      	movs	r0, #1
     2e8:	4770      	bx	lr
            return true;
     2ea:	2001      	movs	r0, #1
}
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop
     2f0:	f0000fe0 	.word	0xf0000fe0
     2f4:	f0000fe4 	.word	0xf0000fe4
     2f8:	f0000fe8 	.word	0xf0000fe8

000002fc <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2fc:	4b0b      	ldr	r3, [pc, #44]	; (32c <errata_37+0x30>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	2b06      	cmp	r3, #6
     302:	d001      	beq.n	308 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     304:	2000      	movs	r0, #0
     306:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <errata_37+0x34>)
     30a:	681b      	ldr	r3, [r3, #0]
     30c:	f013 0f0f 	tst.w	r3, #15
     310:	d107      	bne.n	322 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     312:	4b08      	ldr	r3, [pc, #32]	; (334 <errata_37+0x38>)
     314:	681b      	ldr	r3, [r3, #0]
     316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     31a:	2b30      	cmp	r3, #48	; 0x30
     31c:	d003      	beq.n	326 <errata_37+0x2a>
    return false;
     31e:	2000      	movs	r0, #0
     320:	4770      	bx	lr
     322:	2000      	movs	r0, #0
     324:	4770      	bx	lr
            return true;
     326:	2001      	movs	r0, #1
}
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	f0000fe0 	.word	0xf0000fe0
     330:	f0000fe4 	.word	0xf0000fe4
     334:	f0000fe8 	.word	0xf0000fe8

00000338 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     338:	4b0b      	ldr	r3, [pc, #44]	; (368 <errata_57+0x30>)
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	2b06      	cmp	r3, #6
     33e:	d001      	beq.n	344 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <errata_57+0x34>)
     346:	681b      	ldr	r3, [r3, #0]
     348:	f013 0f0f 	tst.w	r3, #15
     34c:	d107      	bne.n	35e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     34e:	4b08      	ldr	r3, [pc, #32]	; (370 <errata_57+0x38>)
     350:	681b      	ldr	r3, [r3, #0]
     352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     356:	2b30      	cmp	r3, #48	; 0x30
     358:	d003      	beq.n	362 <errata_57+0x2a>
    return false;
     35a:	2000      	movs	r0, #0
     35c:	4770      	bx	lr
     35e:	2000      	movs	r0, #0
     360:	4770      	bx	lr
            return true;
     362:	2001      	movs	r0, #1
}
     364:	4770      	bx	lr
     366:	bf00      	nop
     368:	f0000fe0 	.word	0xf0000fe0
     36c:	f0000fe4 	.word	0xf0000fe4
     370:	f0000fe8 	.word	0xf0000fe8

00000374 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     374:	4b0b      	ldr	r3, [pc, #44]	; (3a4 <errata_66+0x30>)
     376:	781b      	ldrb	r3, [r3, #0]
     378:	2b06      	cmp	r3, #6
     37a:	d001      	beq.n	380 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     37c:	2000      	movs	r0, #0
     37e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <errata_66+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f013 0f0f 	tst.w	r3, #15
     388:	d107      	bne.n	39a <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     38a:	4b08      	ldr	r3, [pc, #32]	; (3ac <errata_66+0x38>)
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     392:	2b50      	cmp	r3, #80	; 0x50
     394:	d003      	beq.n	39e <errata_66+0x2a>
    return false;
     396:	2000      	movs	r0, #0
     398:	4770      	bx	lr
     39a:	2000      	movs	r0, #0
     39c:	4770      	bx	lr
            return true;
     39e:	2001      	movs	r0, #1
}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	f0000fe0 	.word	0xf0000fe0
     3a8:	f0000fe4 	.word	0xf0000fe4
     3ac:	f0000fe8 	.word	0xf0000fe8

000003b0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3b0:	4b0f      	ldr	r3, [pc, #60]	; (3f0 <errata_108+0x40>)
     3b2:	781b      	ldrb	r3, [r3, #0]
     3b4:	2b06      	cmp	r3, #6
     3b6:	d001      	beq.n	3bc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     3b8:	2000      	movs	r0, #0
     3ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3bc:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <errata_108+0x44>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f013 0f0f 	tst.w	r3, #15
     3c4:	d10b      	bne.n	3de <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     3c6:	4b0c      	ldr	r3, [pc, #48]	; (3f8 <errata_108+0x48>)
     3c8:	681b      	ldr	r3, [r3, #0]
     3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     3ce:	2b30      	cmp	r3, #48	; 0x30
     3d0:	d007      	beq.n	3e2 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     3d2:	2b40      	cmp	r3, #64	; 0x40
     3d4:	d007      	beq.n	3e6 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     3d6:	2b50      	cmp	r3, #80	; 0x50
     3d8:	d007      	beq.n	3ea <errata_108+0x3a>
    return false;
     3da:	2000      	movs	r0, #0
     3dc:	4770      	bx	lr
     3de:	2000      	movs	r0, #0
     3e0:	4770      	bx	lr
            return true;
     3e2:	2001      	movs	r0, #1
     3e4:	4770      	bx	lr
            return true;
     3e6:	2001      	movs	r0, #1
     3e8:	4770      	bx	lr
            return true;
     3ea:	2001      	movs	r0, #1
}
     3ec:	4770      	bx	lr
     3ee:	bf00      	nop
     3f0:	f0000fe0 	.word	0xf0000fe0
     3f4:	f0000fe4 	.word	0xf0000fe4
     3f8:	f0000fe8 	.word	0xf0000fe8

000003fc <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <SystemCoreClockUpdate+0x8>)
     3fe:	4a02      	ldr	r2, [pc, #8]	; (408 <SystemCoreClockUpdate+0xc>)
     400:	601a      	str	r2, [r3, #0]
}
     402:	4770      	bx	lr
     404:	200000e4 	.word	0x200000e4
     408:	03d09000 	.word	0x03d09000

0000040c <SystemInit>:
{
     40c:	b508      	push	{r3, lr}
    if (errata_16()){
     40e:	f7ff feed 	bl	1ec <errata_16>
     412:	b110      	cbz	r0, 41a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     414:	4b60      	ldr	r3, [pc, #384]	; (598 <SystemInit+0x18c>)
     416:	4a61      	ldr	r2, [pc, #388]	; (59c <SystemInit+0x190>)
     418:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     41a:	f7ff ff05 	bl	228 <errata_31>
     41e:	b128      	cbz	r0, 42c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     420:	4b5f      	ldr	r3, [pc, #380]	; (5a0 <SystemInit+0x194>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	f3c3 3342 	ubfx	r3, r3, #13, #3
     428:	4a5e      	ldr	r2, [pc, #376]	; (5a4 <SystemInit+0x198>)
     42a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     42c:	f7ff ff22 	bl	274 <errata_32>
     430:	b120      	cbz	r0, 43c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     432:	4a5d      	ldr	r2, [pc, #372]	; (5a8 <SystemInit+0x19c>)
     434:	68d3      	ldr	r3, [r2, #12]
     436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     43a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     43c:	f7ff ff38 	bl	2b0 <errata_36>
     440:	b140      	cbz	r0, 454 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     446:	2200      	movs	r2, #0
     448:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     44c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     450:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     454:	f7ff ff52 	bl	2fc <errata_37>
     458:	b110      	cbz	r0, 460 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     45a:	4b54      	ldr	r3, [pc, #336]	; (5ac <SystemInit+0x1a0>)
     45c:	2203      	movs	r2, #3
     45e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     460:	f7ff ff6a 	bl	338 <errata_57>
     464:	b158      	cbz	r0, 47e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     466:	4b52      	ldr	r3, [pc, #328]	; (5b0 <SystemInit+0x1a4>)
     468:	2205      	movs	r2, #5
     46a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     46c:	3378      	adds	r3, #120	; 0x78
     46e:	2201      	movs	r2, #1
     470:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     472:	3b70      	subs	r3, #112	; 0x70
     474:	2200      	movs	r2, #0
     476:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     478:	3b04      	subs	r3, #4
     47a:	223f      	movs	r2, #63	; 0x3f
     47c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
     47e:	f7ff ff79 	bl	374 <errata_66>
     482:	2800      	cmp	r0, #0
     484:	d046      	beq.n	514 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     48a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     48e:	4b49      	ldr	r3, [pc, #292]	; (5b4 <SystemInit+0x1a8>)
     490:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     494:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     498:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     49c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     4a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     4a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     4a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     4ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     4b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     4b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     4b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     4bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     4c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     4c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     4c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     4cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     4d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     4d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     4d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     4dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     4e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     4e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     4e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     4ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     4f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     4f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     4f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     4fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     500:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     504:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     508:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     50c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     510:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     514:	f7ff ff4c 	bl	3b0 <errata_108>
     518:	b128      	cbz	r0, 526 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <SystemInit+0x1ac>)
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     522:	4a26      	ldr	r2, [pc, #152]	; (5bc <SystemInit+0x1b0>)
     524:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     526:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     52a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     52e:	f013 0f01 	tst.w	r3, #1
     532:	d104      	bne.n	53e <SystemInit+0x132>
    SystemCoreClockUpdate();
     534:	f7ff ff62 	bl	3fc <SystemCoreClockUpdate>
    NVIC_Relocate();
     538:	f000 fa2e 	bl	998 <NVIC_Relocate>
}
     53c:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     53e:	4b20      	ldr	r3, [pc, #128]	; (5c0 <SystemInit+0x1b4>)
     540:	2201      	movs	r2, #1
     542:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     546:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <SystemInit+0x1b4>)
     548:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     54c:	2b00      	cmp	r3, #0
     54e:	d0fa      	beq.n	546 <SystemInit+0x13a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     550:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     554:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     558:	f023 0301 	bic.w	r3, r3, #1
     55c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     560:	4b17      	ldr	r3, [pc, #92]	; (5c0 <SystemInit+0x1b4>)
     562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     566:	2b00      	cmp	r3, #0
     568:	d0fa      	beq.n	560 <SystemInit+0x154>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     56a:	4b15      	ldr	r3, [pc, #84]	; (5c0 <SystemInit+0x1b4>)
     56c:	2200      	movs	r2, #0
     56e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     572:	4b13      	ldr	r3, [pc, #76]	; (5c0 <SystemInit+0x1b4>)
     574:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     578:	2b00      	cmp	r3, #0
     57a:	d0fa      	beq.n	572 <SystemInit+0x166>
     57c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     580:	4910      	ldr	r1, [pc, #64]	; (5c4 <SystemInit+0x1b8>)
     582:	68ca      	ldr	r2, [r1, #12]
     584:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <SystemInit+0x1bc>)
     58a:	4313      	orrs	r3, r2
     58c:	60cb      	str	r3, [r1, #12]
     58e:	f3bf 8f4f 	dsb	sy
    __NOP();
     592:	bf00      	nop
     594:	e7fd      	b.n	592 <SystemInit+0x186>
     596:	bf00      	nop
     598:	4007c074 	.word	0x4007c074
     59c:	baadf00d 	.word	0xbaadf00d
     5a0:	10000244 	.word	0x10000244
     5a4:	4000053c 	.word	0x4000053c
     5a8:	e000edf0 	.word	0xe000edf0
     5ac:	400005a0 	.word	0x400005a0
     5b0:	40005610 	.word	0x40005610
     5b4:	4000c000 	.word	0x4000c000
     5b8:	10000258 	.word	0x10000258
     5bc:	40000ee4 	.word	0x40000ee4
     5c0:	4001e000 	.word	0x4001e000
     5c4:	e000ed00 	.word	0xe000ed00
     5c8:	05fa0004 	.word	0x05fa0004

000005cc <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
     5cc:	b508      	push	{r3, lr}
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     5ce:	2100      	movs	r1, #0
     5d0:	4608      	mov	r0, r1
     5d2:	f000 f807 	bl	5e4 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     5d6:	f000 fc5e 	bl	e96 <_exit>

000005da <_init>:
}

void
_init(void)
{
}
     5da:	4770      	bx	lr

000005dc <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     5dc:	2000      	movs	r0, #0
     5de:	6008      	str	r0, [r1, #0]
    return 0;
}
     5e0:	4770      	bx	lr
	...

000005e4 <main>:
void os_msys_init(void); ////
void display_image(void); ////

int
main(void)
{
     5e4:	b500      	push	{lr}
     5e6:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     5e8:	f000 f9d0 	bl	98c <hal_bsp_init>

    ////
    os_msys_init(); 
     5ec:	f001 fb00 	bl	1bf0 <os_msys_init>
    console_printf("Starting MCUBoot...\n"); console_flush();
     5f0:	4818      	ldr	r0, [pc, #96]	; (654 <main+0x70>)
     5f2:	f001 fd2d 	bl	2050 <console_printf>
     5f6:	f001 fd81 	bl	20fc <console_flush>
    display_image();
     5fa:	f000 f955 	bl	8a8 <display_image>
    ////

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     5fe:	f247 5030 	movw	r0, #30000	; 0x7530
     602:	f000 ffc9 	bl	1598 <hal_watchdog_init>
    assert(rc == 0);
     606:	b128      	cbz	r0, 614 <main+0x30>
     608:	2300      	movs	r3, #0
     60a:	461a      	mov	r2, r3
     60c:	4619      	mov	r1, r3
     60e:	4618      	mov	r0, r3
     610:	f001 f9e0 	bl	19d4 <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     614:	f001 feda 	bl	23cc <flash_map_init>
#endif

    rc = boot_go(&rsp);
     618:	a801      	add	r0, sp, #4
     61a:	f002 fc0f 	bl	2e3c <boot_go>
    assert(rc == 0);
     61e:	b128      	cbz	r0, 62c <main+0x48>
     620:	2300      	movs	r3, #0
     622:	461a      	mov	r2, r3
     624:	4619      	mov	r1, r3
     626:	4618      	mov	r0, r3
     628:	f001 f9d4 	bl	19d4 <__assert_func>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     62c:	4669      	mov	r1, sp
     62e:	f89d 0008 	ldrb.w	r0, [sp, #8]
     632:	f7ff ffd3 	bl	5dc <flash_device_base>
    assert(rc == 0);
     636:	b128      	cbz	r0, 644 <main+0x60>
     638:	2300      	movs	r3, #0
     63a:	461a      	mov	r2, r3
     63c:	4619      	mov	r1, r3
     63e:	4618      	mov	r0, r3
     640:	f001 f9c8 	bl	19d4 <__assert_func>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     644:	9803      	ldr	r0, [sp, #12]
     646:	9b00      	ldr	r3, [sp, #0]
     648:	4418      	add	r0, r3
                              rsp.br_hdr->ih_hdr_size));
     64a:	9b01      	ldr	r3, [sp, #4]
     64c:	891b      	ldrh	r3, [r3, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     64e:	4418      	add	r0, r3
     650:	f000 ff86 	bl	1560 <hal_system_start>
     654:	00004bdc 	.word	0x00004bdc

00000658 <hard_reset>:
    delay_ms(200);
    return 0;
}

/// Reset the display controller
static int hard_reset(void) {
     658:	b508      	push	{r3, lr}
    hal_gpio_write(DISPLAY_RST, 1);
     65a:	2101      	movs	r1, #1
     65c:	201a      	movs	r0, #26
     65e:	f000 fcf8 	bl	1052 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 0);
     662:	2100      	movs	r1, #0
     664:	201a      	movs	r0, #26
     666:	f000 fcf4 	bl	1052 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 1);
     66a:	2101      	movs	r1, #1
     66c:	201a      	movs	r0, #26
     66e:	f000 fcf0 	bl	1052 <hal_gpio_write>
    return 0;
}
     672:	2000      	movs	r0, #0
     674:	bd08      	pop	{r3, pc}
	...

00000678 <delay_ms>:
    hal_gpio_write(DISPLAY_CS, 1);
    return 0;
}

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
     678:	b508      	push	{r3, lr}
    uint32_t delay_ticks = ms * OS_TICKS_PER_SEC / 1000;
     67a:	01c0      	lsls	r0, r0, #7
     67c:	4b03      	ldr	r3, [pc, #12]	; (68c <delay_ms+0x14>)
     67e:	fba3 3000 	umull	r3, r0, r3, r0
    os_time_delay(delay_ticks);
     682:	0980      	lsrs	r0, r0, #6
     684:	f001 fadc 	bl	1c40 <os_time_delay>
}
     688:	bd08      	pop	{r3, pc}
     68a:	bf00      	nop
     68c:	10624dd3 	.word	0x10624dd3

00000690 <transmit_spi>:
    if (len == 0) { return 0; }
     690:	b909      	cbnz	r1, 696 <transmit_spi+0x6>
}
     692:	2000      	movs	r0, #0
     694:	4770      	bx	lr
static int transmit_spi(const uint8_t *data, uint16_t len) {
     696:	b538      	push	{r3, r4, r5, lr}
     698:	460d      	mov	r5, r1
     69a:	4604      	mov	r4, r0
    hal_gpio_write(DISPLAY_CS, 0);
     69c:	2100      	movs	r1, #0
     69e:	2019      	movs	r0, #25
     6a0:	f000 fcd7 	bl	1052 <hal_gpio_write>
    int rc = hal_spi_txrx(DISPLAY_SPI, 
     6a4:	462b      	mov	r3, r5
     6a6:	2200      	movs	r2, #0
     6a8:	4621      	mov	r1, r4
     6aa:	4610      	mov	r0, r2
     6ac:	f000 ff02 	bl	14b4 <hal_spi_txrx>
    assert(rc == 0);
     6b0:	b928      	cbnz	r0, 6be <transmit_spi+0x2e>
    hal_gpio_write(DISPLAY_CS, 1);
     6b2:	2101      	movs	r1, #1
     6b4:	2019      	movs	r0, #25
     6b6:	f000 fccc 	bl	1052 <hal_gpio_write>
}
     6ba:	2000      	movs	r0, #0
     6bc:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
     6be:	2300      	movs	r3, #0
     6c0:	461a      	mov	r2, r3
     6c2:	4619      	mov	r1, r3
     6c4:	4618      	mov	r0, r3
     6c6:	f001 f985 	bl	19d4 <__assert_func>

000006ca <write_data>:
static int write_data(const uint8_t *data, uint16_t len) {
     6ca:	b538      	push	{r3, r4, r5, lr}
     6cc:	4604      	mov	r4, r0
     6ce:	460d      	mov	r5, r1
    hal_gpio_write(DISPLAY_DC, 1);
     6d0:	2101      	movs	r1, #1
     6d2:	2012      	movs	r0, #18
     6d4:	f000 fcbd 	bl	1052 <hal_gpio_write>
    transmit_spi(data, len);
     6d8:	4629      	mov	r1, r5
     6da:	4620      	mov	r0, r4
     6dc:	f7ff ffd8 	bl	690 <transmit_spi>
}
     6e0:	2000      	movs	r0, #0
     6e2:	bd38      	pop	{r3, r4, r5, pc}

000006e4 <write_command>:
static int write_command(uint8_t command, const uint8_t *params, uint16_t len) {
     6e4:	b570      	push	{r4, r5, r6, lr}
     6e6:	b082      	sub	sp, #8
     6e8:	460d      	mov	r5, r1
     6ea:	4616      	mov	r6, r2
     6ec:	ac02      	add	r4, sp, #8
     6ee:	f804 0d01 	strb.w	r0, [r4, #-1]!
    hal_gpio_write(DISPLAY_DC, 0);
     6f2:	2100      	movs	r1, #0
     6f4:	2012      	movs	r0, #18
     6f6:	f000 fcac 	bl	1052 <hal_gpio_write>
    int rc = transmit_spi(&command, 1);
     6fa:	2101      	movs	r1, #1
     6fc:	4620      	mov	r0, r4
     6fe:	f7ff ffc7 	bl	690 <transmit_spi>
    assert(rc == 0);
     702:	b920      	cbnz	r0, 70e <write_command+0x2a>
    if (params != NULL && len > 0) {
     704:	b105      	cbz	r5, 708 <write_command+0x24>
     706:	b946      	cbnz	r6, 71a <write_command+0x36>
}
     708:	2000      	movs	r0, #0
     70a:	b002      	add	sp, #8
     70c:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
     70e:	2300      	movs	r3, #0
     710:	461a      	mov	r2, r3
     712:	4619      	mov	r1, r3
     714:	4618      	mov	r0, r3
     716:	f001 f95d 	bl	19d4 <__assert_func>
        rc = write_data(params, len);
     71a:	4631      	mov	r1, r6
     71c:	4628      	mov	r0, r5
     71e:	f7ff ffd4 	bl	6ca <write_data>
        assert(rc == 0);
     722:	2800      	cmp	r0, #0
     724:	d0f0      	beq.n	708 <write_command+0x24>
     726:	2300      	movs	r3, #0
     728:	461a      	mov	r2, r3
     72a:	4619      	mov	r1, r3
     72c:	4618      	mov	r0, r3
     72e:	f001 f951 	bl	19d4 <__assert_func>
	...

00000734 <init_display>:
static int init_display(void) {
     734:	b508      	push	{r3, lr}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
     736:	2101      	movs	r1, #1
     738:	201a      	movs	r0, #26
     73a:	f000 fc6e 	bl	101a <hal_gpio_init_out>
     73e:	2800      	cmp	r0, #0
     740:	d16e      	bne.n	820 <init_display+0xec>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
     742:	2101      	movs	r1, #1
     744:	2019      	movs	r0, #25
     746:	f000 fc68 	bl	101a <hal_gpio_init_out>
     74a:	2800      	cmp	r0, #0
     74c:	d16e      	bne.n	82c <init_display+0xf8>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
     74e:	2100      	movs	r1, #0
     750:	2012      	movs	r0, #18
     752:	f000 fc62 	bl	101a <hal_gpio_init_out>
     756:	2800      	cmp	r0, #0
     758:	d16e      	bne.n	838 <init_display+0x104>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
     75a:	2100      	movs	r1, #0
     75c:	2017      	movs	r0, #23
     75e:	f000 fc5c 	bl	101a <hal_gpio_init_out>
     762:	2800      	cmp	r0, #0
     764:	d16e      	bne.n	844 <init_display+0x110>
    hard_reset();
     766:	f7ff ff77 	bl	658 <hard_reset>
    write_command(SWRESET, NULL, 0);
     76a:	2200      	movs	r2, #0
     76c:	4611      	mov	r1, r2
     76e:	2001      	movs	r0, #1
     770:	f7ff ffb8 	bl	6e4 <write_command>
    delay_ms(200);
     774:	20c8      	movs	r0, #200	; 0xc8
     776:	f7ff ff7f 	bl	678 <delay_ms>
    write_command(SLPOUT, NULL, 0);
     77a:	2200      	movs	r2, #0
     77c:	4611      	mov	r1, r2
     77e:	2011      	movs	r0, #17
     780:	f7ff ffb0 	bl	6e4 <write_command>
    delay_ms(200);
     784:	20c8      	movs	r0, #200	; 0xc8
     786:	f7ff ff77 	bl	678 <delay_ms>
    write_command(FRMCTR1, FRMCTR1_PARA, sizeof(FRMCTR1_PARA));
     78a:	2203      	movs	r2, #3
     78c:	4930      	ldr	r1, [pc, #192]	; (850 <init_display+0x11c>)
     78e:	20b1      	movs	r0, #177	; 0xb1
     790:	f7ff ffa8 	bl	6e4 <write_command>
    write_command(FRMCTR2, FRMCTR2_PARA, sizeof(FRMCTR2_PARA));
     794:	2203      	movs	r2, #3
     796:	492f      	ldr	r1, [pc, #188]	; (854 <init_display+0x120>)
     798:	20b2      	movs	r0, #178	; 0xb2
     79a:	f7ff ffa3 	bl	6e4 <write_command>
    write_command(FRMCTR3, FRMCTR3_PARA, sizeof(FRMCTR3_PARA));
     79e:	2206      	movs	r2, #6
     7a0:	492d      	ldr	r1, [pc, #180]	; (858 <init_display+0x124>)
     7a2:	20b3      	movs	r0, #179	; 0xb3
     7a4:	f7ff ff9e 	bl	6e4 <write_command>
    write_command(INVCTR, INVCTR_PARA, sizeof(INVCTR_PARA));
     7a8:	2201      	movs	r2, #1
     7aa:	492c      	ldr	r1, [pc, #176]	; (85c <init_display+0x128>)
     7ac:	20b4      	movs	r0, #180	; 0xb4
     7ae:	f7ff ff99 	bl	6e4 <write_command>
    write_command(PWCTR1, PWCTR1_PARA, sizeof(PWCTR1_PARA));
     7b2:	2203      	movs	r2, #3
     7b4:	492a      	ldr	r1, [pc, #168]	; (860 <init_display+0x12c>)
     7b6:	20c0      	movs	r0, #192	; 0xc0
     7b8:	f7ff ff94 	bl	6e4 <write_command>
    write_command(PWCTR2, PWCTR2_PARA, sizeof(PWCTR2_PARA));
     7bc:	2201      	movs	r2, #1
     7be:	4929      	ldr	r1, [pc, #164]	; (864 <init_display+0x130>)
     7c0:	20c1      	movs	r0, #193	; 0xc1
     7c2:	f7ff ff8f 	bl	6e4 <write_command>
    write_command(PWCTR3, PWCTR3_PARA, sizeof(PWCTR3_PARA));
     7c6:	2202      	movs	r2, #2
     7c8:	4927      	ldr	r1, [pc, #156]	; (868 <init_display+0x134>)
     7ca:	20c2      	movs	r0, #194	; 0xc2
     7cc:	f7ff ff8a 	bl	6e4 <write_command>
    write_command(PWCTR4, PWCTR4_PARA, sizeof(PWCTR4_PARA));
     7d0:	2202      	movs	r2, #2
     7d2:	4926      	ldr	r1, [pc, #152]	; (86c <init_display+0x138>)
     7d4:	20c3      	movs	r0, #195	; 0xc3
     7d6:	f7ff ff85 	bl	6e4 <write_command>
    write_command(PWCTR5, PWCTR5_PARA, sizeof(PWCTR5_PARA));
     7da:	2202      	movs	r2, #2
     7dc:	4924      	ldr	r1, [pc, #144]	; (870 <init_display+0x13c>)
     7de:	20c4      	movs	r0, #196	; 0xc4
     7e0:	f7ff ff80 	bl	6e4 <write_command>
    write_command(VMCTR1, VMCTR1_PARA, sizeof(VMCTR1_PARA));
     7e4:	2201      	movs	r2, #1
     7e6:	4923      	ldr	r1, [pc, #140]	; (874 <init_display+0x140>)
     7e8:	20c5      	movs	r0, #197	; 0xc5
     7ea:	f7ff ff7b 	bl	6e4 <write_command>
        write_command(INVON, NULL, 0);
     7ee:	2200      	movs	r2, #0
     7f0:	4611      	mov	r1, r2
     7f2:	2021      	movs	r0, #33	; 0x21
     7f4:	f7ff ff76 	bl	6e4 <write_command>
        write_command(MADCTL, MADCTL1_PARA, sizeof(MADCTL1_PARA));
     7f8:	2201      	movs	r2, #1
     7fa:	491f      	ldr	r1, [pc, #124]	; (878 <init_display+0x144>)
     7fc:	2036      	movs	r0, #54	; 0x36
     7fe:	f7ff ff71 	bl	6e4 <write_command>
    write_command(COLMOD, COLMOD_PARA, sizeof(COLMOD_PARA));
     802:	2201      	movs	r2, #1
     804:	491d      	ldr	r1, [pc, #116]	; (87c <init_display+0x148>)
     806:	203a      	movs	r0, #58	; 0x3a
     808:	f7ff ff6c 	bl	6e4 <write_command>
    write_command(DISPON, NULL, 0);
     80c:	2200      	movs	r2, #0
     80e:	4611      	mov	r1, r2
     810:	2029      	movs	r0, #41	; 0x29
     812:	f7ff ff67 	bl	6e4 <write_command>
    delay_ms(200);
     816:	20c8      	movs	r0, #200	; 0xc8
     818:	f7ff ff2e 	bl	678 <delay_ms>
}
     81c:	2000      	movs	r0, #0
     81e:	bd08      	pop	{r3, pc}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
     820:	2300      	movs	r3, #0
     822:	461a      	mov	r2, r3
     824:	4619      	mov	r1, r3
     826:	4618      	mov	r0, r3
     828:	f001 f8d4 	bl	19d4 <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
     82c:	2300      	movs	r3, #0
     82e:	461a      	mov	r2, r3
     830:	4619      	mov	r1, r3
     832:	4618      	mov	r0, r3
     834:	f001 f8ce 	bl	19d4 <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
     838:	2300      	movs	r3, #0
     83a:	461a      	mov	r2, r3
     83c:	4619      	mov	r1, r3
     83e:	4618      	mov	r0, r3
     840:	f001 f8c8 	bl	19d4 <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
     844:	2300      	movs	r3, #0
     846:	461a      	mov	r2, r3
     848:	4619      	mov	r1, r3
     84a:	4618      	mov	r0, r3
     84c:	f001 f8c2 	bl	19d4 <__assert_func>
     850:	00004c00 	.word	0x00004c00
     854:	00004c04 	.word	0x00004c04
     858:	00004c08 	.word	0x00004c08
     85c:	00004c10 	.word	0x00004c10
     860:	00004c18 	.word	0x00004c18
     864:	00004c1c 	.word	0x00004c1c
     868:	00004c20 	.word	0x00004c20
     86c:	00004c24 	.word	0x00004c24
     870:	00004c28 	.word	0x00004c28
     874:	00004c84 	.word	0x00004c84
     878:	00004c14 	.word	0x00004c14
     87c:	00004bfc 	.word	0x00004bfc

00000880 <set_orientation>:
static int set_orientation(uint8_t orientation) {
     880:	b500      	push	{lr}
     882:	b083      	sub	sp, #12
        uint8_t orientation_para[1] = { orientation };
     884:	a902      	add	r1, sp, #8
     886:	f801 0d04 	strb.w	r0, [r1, #-4]!
        int rc = write_command(MADCTL, orientation_para, 1);
     88a:	2201      	movs	r2, #1
     88c:	2036      	movs	r0, #54	; 0x36
     88e:	f7ff ff29 	bl	6e4 <write_command>
        assert(rc == 0);
     892:	b918      	cbnz	r0, 89c <set_orientation+0x1c>
}
     894:	2000      	movs	r0, #0
     896:	b003      	add	sp, #12
     898:	f85d fb04 	ldr.w	pc, [sp], #4
        assert(rc == 0);
     89c:	2300      	movs	r3, #0
     89e:	461a      	mov	r2, r3
     8a0:	4619      	mov	r1, r3
     8a2:	4618      	mov	r0, r3
     8a4:	f001 f896 	bl	19d4 <__assert_func>

000008a8 <display_image>:
int display_image(void) {
     8a8:	b508      	push	{r3, lr}
    console_printf("Displaying image...\n"); console_flush();
     8aa:	482b      	ldr	r0, [pc, #172]	; (958 <display_image+0xb0>)
     8ac:	f001 fbd0 	bl	2050 <console_printf>
     8b0:	f001 fc24 	bl	20fc <console_flush>
    int rc = init_display();  assert(rc == 0);
     8b4:	f7ff ff3e 	bl	734 <init_display>
     8b8:	2800      	cmp	r0, #0
     8ba:	d141      	bne.n	940 <display_image+0x98>
    rc = set_orientation(Landscape);  assert(rc == 0);
     8bc:	2060      	movs	r0, #96	; 0x60
     8be:	f7ff ffdf 	bl	880 <set_orientation>
     8c2:	2800      	cmp	r0, #0
     8c4:	d142      	bne.n	94c <display_image+0xa4>
    write_command(CASET, NULL, 0);
     8c6:	2200      	movs	r2, #0
     8c8:	4611      	mov	r1, r2
     8ca:	202a      	movs	r0, #42	; 0x2a
     8cc:	f7ff ff0a 	bl	6e4 <write_command>
    write_data(CASET1_PARA, sizeof(CASET1_PARA));
     8d0:	2104      	movs	r1, #4
     8d2:	4822      	ldr	r0, [pc, #136]	; (95c <display_image+0xb4>)
     8d4:	f7ff fef9 	bl	6ca <write_data>
    write_command(RASET, NULL, 0);
     8d8:	2200      	movs	r2, #0
     8da:	4611      	mov	r1, r2
     8dc:	202b      	movs	r0, #43	; 0x2b
     8de:	f7ff ff01 	bl	6e4 <write_command>
    write_data(RASET1_PARA, sizeof(RASET1_PARA));
     8e2:	2104      	movs	r1, #4
     8e4:	481e      	ldr	r0, [pc, #120]	; (960 <display_image+0xb8>)
     8e6:	f7ff fef0 	bl	6ca <write_data>
    write_command(RAMWR, NULL, 0);
     8ea:	2200      	movs	r2, #0
     8ec:	4611      	mov	r1, r2
     8ee:	202c      	movs	r0, #44	; 0x2c
     8f0:	f7ff fef8 	bl	6e4 <write_command>
    write_data(RAMWR1_PARA, sizeof(RAMWR1_PARA));
     8f4:	2128      	movs	r1, #40	; 0x28
     8f6:	481b      	ldr	r0, [pc, #108]	; (964 <display_image+0xbc>)
     8f8:	f7ff fee7 	bl	6ca <write_data>
    write_command(CASET, NULL, 0);
     8fc:	2200      	movs	r2, #0
     8fe:	4611      	mov	r1, r2
     900:	202a      	movs	r0, #42	; 0x2a
     902:	f7ff feef 	bl	6e4 <write_command>
    write_data(CASET2_PARA, sizeof(CASET2_PARA));
     906:	2104      	movs	r1, #4
     908:	4817      	ldr	r0, [pc, #92]	; (968 <display_image+0xc0>)
     90a:	f7ff fede 	bl	6ca <write_data>
    write_command(RASET, NULL, 0);
     90e:	2200      	movs	r2, #0
     910:	4611      	mov	r1, r2
     912:	202b      	movs	r0, #43	; 0x2b
     914:	f7ff fee6 	bl	6e4 <write_command>
    write_data(RASET2_PARA, sizeof(RASET2_PARA));
     918:	2104      	movs	r1, #4
     91a:	4814      	ldr	r0, [pc, #80]	; (96c <display_image+0xc4>)
     91c:	f7ff fed5 	bl	6ca <write_data>
    write_command(RAMWR, NULL, 0);
     920:	2200      	movs	r2, #0
     922:	4611      	mov	r1, r2
     924:	202c      	movs	r0, #44	; 0x2c
     926:	f7ff fedd 	bl	6e4 <write_command>
    write_data(RAMWR2_PARA, sizeof(RAMWR2_PARA));
     92a:	2128      	movs	r1, #40	; 0x28
     92c:	4810      	ldr	r0, [pc, #64]	; (970 <display_image+0xc8>)
     92e:	f7ff fecc 	bl	6ca <write_data>
    console_printf("Image displayed\n"); console_flush();
     932:	4810      	ldr	r0, [pc, #64]	; (974 <display_image+0xcc>)
     934:	f001 fb8c 	bl	2050 <console_printf>
     938:	f001 fbe0 	bl	20fc <console_flush>
}
     93c:	2000      	movs	r0, #0
     93e:	bd08      	pop	{r3, pc}
    int rc = init_display();  assert(rc == 0);
     940:	2300      	movs	r3, #0
     942:	461a      	mov	r2, r3
     944:	4619      	mov	r1, r3
     946:	4618      	mov	r0, r3
     948:	f001 f844 	bl	19d4 <__assert_func>
    rc = set_orientation(Landscape);  assert(rc == 0);
     94c:	2300      	movs	r3, #0
     94e:	461a      	mov	r2, r3
     950:	4619      	mov	r1, r3
     952:	4618      	mov	r0, r3
     954:	f001 f83e 	bl	19d4 <__assert_func>
     958:	00004c88 	.word	0x00004c88
     95c:	00004bf4 	.word	0x00004bf4
     960:	00004c7c 	.word	0x00004c7c
     964:	00004c2c 	.word	0x00004c2c
     968:	00004bf8 	.word	0x00004bf8
     96c:	00004c80 	.word	0x00004c80
     970:	00004c54 	.word	0x00004c54
     974:	00004ca0 	.word	0x00004ca0

00000978 <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     978:	2801      	cmp	r0, #1
     97a:	d803      	bhi.n	984 <hal_bsp_flash_dev+0xc>
        return NULL;
    }
    return flash_devs[id];
     97c:	4b02      	ldr	r3, [pc, #8]	; (988 <hal_bsp_flash_dev+0x10>)
     97e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     982:	4770      	bx	lr
        return NULL;
     984:	2000      	movs	r0, #0
}
     986:	4770      	bx	lr
     988:	00004cb4 	.word	0x00004cb4

0000098c <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     98c:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     98e:	f7ff fc07 	bl	1a0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
     992:	f000 fe67 	bl	1664 <nrf52_periph_create>
}
     996:	bd08      	pop	{r3, pc}

00000998 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     998:	4a09      	ldr	r2, [pc, #36]	; (9c0 <NVIC_Relocate+0x28>)
     99a:	4b0a      	ldr	r3, [pc, #40]	; (9c4 <NVIC_Relocate+0x2c>)
     99c:	429a      	cmp	r2, r3
     99e:	d00a      	beq.n	9b6 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     9a0:	2300      	movs	r3, #0
     9a2:	e006      	b.n	9b2 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     9a4:	4a07      	ldr	r2, [pc, #28]	; (9c4 <NVIC_Relocate+0x2c>)
     9a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     9aa:	4a05      	ldr	r2, [pc, #20]	; (9c0 <NVIC_Relocate+0x28>)
     9ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     9b0:	3301      	adds	r3, #1
     9b2:	2b35      	cmp	r3, #53	; 0x35
     9b4:	ddf6      	ble.n	9a4 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     9b6:	4a02      	ldr	r2, [pc, #8]	; (9c0 <NVIC_Relocate+0x28>)
     9b8:	4b03      	ldr	r3, [pc, #12]	; (9c8 <NVIC_Relocate+0x30>)
     9ba:	609a      	str	r2, [r3, #8]
#endif
}
     9bc:	4770      	bx	lr
     9be:	bf00      	nop
     9c0:	20000000 	.word	0x20000000
     9c4:	00000000 	.word	0x00000000
     9c8:	e000ed00 	.word	0xe000ed00

000009cc <hal_spiflash_sector_info>:
}

static int
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
     9cc:	b410      	push	{r4}
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     9ce:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
     9d0:	fb01 f104 	mul.w	r1, r1, r4
     9d4:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     9d6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     9d8:	601a      	str	r2, [r3, #0]
    return 0;
}
     9da:	2000      	movs	r0, #0
     9dc:	bc10      	pop	{r4}
     9de:	4770      	bx	lr

000009e0 <spiflash_release_power_down_generic>:
{
     9e0:	b530      	push	{r4, r5, lr}
     9e2:	b083      	sub	sp, #12
     9e4:	4605      	mov	r5, r0
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     9e6:	ac02      	add	r4, sp, #8
     9e8:	23ab      	movs	r3, #171	; 0xab
     9ea:	f804 3d04 	strb.w	r3, [r4, #-4]!
    hal_gpio_write(dev->ss_pin, 0);
     9ee:	2100      	movs	r1, #0
     9f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
     9f2:	f000 fb2e 	bl	1052 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     9f6:	2301      	movs	r3, #1
     9f8:	4622      	mov	r2, r4
     9fa:	4621      	mov	r1, r4
     9fc:	6a28      	ldr	r0, [r5, #32]
     9fe:	f000 fd59 	bl	14b4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     a02:	2101      	movs	r1, #1
     a04:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     a06:	f000 fb24 	bl	1052 <hal_gpio_write>
}
     a0a:	b003      	add	sp, #12
     a0c:	bd30      	pop	{r4, r5, pc}

00000a0e <spiflash_delay_us>:
{
     a0e:	b508      	push	{r3, lr}
    os_cputime_delay_usecs(usecs);
     a10:	f001 f868 	bl	1ae4 <os_cputime_delay_usecs>
}
     a14:	bd08      	pop	{r3, pc}

00000a16 <spiflash_read_jedec_id>:
{
     a16:	b5f0      	push	{r4, r5, r6, r7, lr}
     a18:	b083      	sub	sp, #12
     a1a:	4604      	mov	r4, r0
     a1c:	460f      	mov	r7, r1
     a1e:	4616      	mov	r6, r2
     a20:	461d      	mov	r5, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     a22:	239f      	movs	r3, #159	; 0x9f
     a24:	f88d 3004 	strb.w	r3, [sp, #4]
     a28:	2100      	movs	r1, #0
     a2a:	f88d 1005 	strb.w	r1, [sp, #5]
     a2e:	f88d 1006 	strb.w	r1, [sp, #6]
     a32:	f88d 1007 	strb.w	r1, [sp, #7]
    hal_gpio_write(dev->ss_pin, 0);
     a36:	6a80      	ldr	r0, [r0, #40]	; 0x28
     a38:	f000 fb0b 	bl	1052 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     a3c:	2304      	movs	r3, #4
     a3e:	eb0d 0203 	add.w	r2, sp, r3
     a42:	4611      	mov	r1, r2
     a44:	6a20      	ldr	r0, [r4, #32]
     a46:	f000 fd35 	bl	14b4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     a4a:	2101      	movs	r1, #1
     a4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     a4e:	f000 fb00 	bl	1052 <hal_gpio_write>
    if (manufacturer) {
     a52:	b117      	cbz	r7, a5a <spiflash_read_jedec_id+0x44>
        *manufacturer = cmd[1];
     a54:	f89d 3005 	ldrb.w	r3, [sp, #5]
     a58:	703b      	strb	r3, [r7, #0]
    if (memory_type) {
     a5a:	b116      	cbz	r6, a62 <spiflash_read_jedec_id+0x4c>
        *memory_type = cmd[2];
     a5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a60:	7033      	strb	r3, [r6, #0]
    if (capacity) {
     a62:	b115      	cbz	r5, a6a <spiflash_read_jedec_id+0x54>
        *capacity = cmd[3];
     a64:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a68:	702b      	strb	r3, [r5, #0]
}
     a6a:	2000      	movs	r0, #0
     a6c:	b003      	add	sp, #12
     a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a70 <spiflash_read_status>:
{
     a70:	b538      	push	{r3, r4, r5, lr}
     a72:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     a74:	2100      	movs	r1, #0
     a76:	6a80      	ldr	r0, [r0, #40]	; 0x28
     a78:	f000 faeb 	bl	1052 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     a7c:	2105      	movs	r1, #5
     a7e:	6a20      	ldr	r0, [r4, #32]
     a80:	f000 fcde 	bl	1440 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     a84:	21ff      	movs	r1, #255	; 0xff
     a86:	6a20      	ldr	r0, [r4, #32]
     a88:	f000 fcda 	bl	1440 <hal_spi_tx_val>
     a8c:	b2c5      	uxtb	r5, r0
    hal_gpio_write(dev->ss_pin, 1);
     a8e:	2101      	movs	r1, #1
     a90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     a92:	f000 fade 	bl	1052 <hal_gpio_write>
}
     a96:	4628      	mov	r0, r5
     a98:	bd38      	pop	{r3, r4, r5, pc}

00000a9a <spiflash_device_ready>:
{
     a9a:	b510      	push	{r4, lr}
     a9c:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     a9e:	f7ff ffe7 	bl	a70 <spiflash_read_status>
     aa2:	f080 0001 	eor.w	r0, r0, #1
     aa6:	f000 0001 	and.w	r0, r0, #1
     aaa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     aae:	bd10      	pop	{r4, pc}

00000ab0 <spiflash_wait_ready_till>:
    if (dev->ready) {
     ab0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     ab4:	b9eb      	cbnz	r3, af2 <spiflash_wait_ready_till+0x42>
{
     ab6:	b570      	push	{r4, r5, r6, lr}
     ab8:	4604      	mov	r4, r0
     aba:	460e      	mov	r6, r1
     abc:	4615      	mov	r5, r2
    if (step_us < MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL)) {
     abe:	2a09      	cmp	r2, #9
     ac0:	d904      	bls.n	acc <spiflash_wait_ready_till+0x1c>
    } else if (step_us > 1000000) {
     ac2:	4b0e      	ldr	r3, [pc, #56]	; (afc <spiflash_wait_ready_till+0x4c>)
     ac4:	429a      	cmp	r2, r3
     ac6:	d902      	bls.n	ace <spiflash_wait_ready_till+0x1e>
        step_us = 1000000;
     ac8:	4d0c      	ldr	r5, [pc, #48]	; (afc <spiflash_wait_ready_till+0x4c>)
     aca:	e000      	b.n	ace <spiflash_wait_ready_till+0x1e>
        step_us = MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL);
     acc:	250a      	movs	r5, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     ace:	f000 fff9 	bl	1ac4 <os_cputime_get32>
     ad2:	4406      	add	r6, r0
        if (spiflash_device_ready(dev)) {
     ad4:	4620      	mov	r0, r4
     ad6:	f7ff ffe0 	bl	a9a <spiflash_device_ready>
     ada:	b960      	cbnz	r0, af6 <spiflash_wait_ready_till+0x46>
        spiflash_delay_us(step_us);
     adc:	4628      	mov	r0, r5
     ade:	f7ff ff96 	bl	a0e <spiflash_delay_us>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     ae2:	f000 ffef 	bl	1ac4 <os_cputime_get32>
     ae6:	1b80      	subs	r0, r0, r6
     ae8:	2800      	cmp	r0, #0
     aea:	dbf3      	blt.n	ad4 <spiflash_wait_ready_till+0x24>
    int rc = -1;
     aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     af0:	e002      	b.n	af8 <spiflash_wait_ready_till+0x48>
        return 0;
     af2:	2000      	movs	r0, #0
}
     af4:	4770      	bx	lr
            rc = 0;
     af6:	2000      	movs	r0, #0
}
     af8:	bd70      	pop	{r4, r5, r6, pc}
     afa:	bf00      	nop
     afc:	000f4240 	.word	0x000f4240

00000b00 <spiflash_wait_ready>:
{
     b00:	b508      	push	{r3, lr}
    return spiflash_wait_ready_till(dev, timeout_ms * 1000, timeout_ms * 10);
     b02:	eb01 0381 	add.w	r3, r1, r1, lsl #2
     b06:	005a      	lsls	r2, r3, #1
     b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     b0c:	fb03 f101 	mul.w	r1, r3, r1
     b10:	f7ff ffce 	bl	ab0 <spiflash_wait_ready_till>
}
     b14:	bd08      	pop	{r3, pc}

00000b16 <hal_spiflash_read>:
{
     b16:	b570      	push	{r4, r5, r6, lr}
     b18:	b082      	sub	sp, #8
     b1a:	4605      	mov	r5, r0
     b1c:	4616      	mov	r6, r2
     b1e:	461c      	mov	r4, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     b20:	2303      	movs	r3, #3
     b22:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     b26:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     b2a:	f88d 3005 	strb.w	r3, [sp, #5]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     b2e:	f3c1 2307 	ubfx	r3, r1, #8, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     b32:	f88d 3006 	strb.w	r3, [sp, #6]
     b36:	f88d 1007 	strb.w	r1, [sp, #7]
    err = spiflash_wait_ready(dev, 100);
     b3a:	2164      	movs	r1, #100	; 0x64
     b3c:	f7ff ffe0 	bl	b00 <spiflash_wait_ready>
    if (!err) {
     b40:	b900      	cbnz	r0, b44 <hal_spiflash_read+0x2e>
        if (len > 0) {
     b42:	b914      	cbnz	r4, b4a <hal_spiflash_read+0x34>
}
     b44:	2000      	movs	r0, #0
     b46:	b002      	add	sp, #8
     b48:	bd70      	pop	{r4, r5, r6, pc}
    hal_gpio_write(dev->ss_pin, 0);
     b4a:	2100      	movs	r1, #0
     b4c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     b4e:	f000 fa80 	bl	1052 <hal_gpio_write>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     b52:	2304      	movs	r3, #4
     b54:	2200      	movs	r2, #0
     b56:	eb0d 0103 	add.w	r1, sp, r3
     b5a:	6a28      	ldr	r0, [r5, #32]
     b5c:	f000 fcaa 	bl	14b4 <hal_spi_txrx>
            memset(buf, 0xFF, len);
     b60:	4622      	mov	r2, r4
     b62:	21ff      	movs	r1, #255	; 0xff
     b64:	4630      	mov	r0, r6
     b66:	f001 fa44 	bl	1ff2 <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     b6a:	4623      	mov	r3, r4
     b6c:	4632      	mov	r2, r6
     b6e:	4631      	mov	r1, r6
     b70:	6a28      	ldr	r0, [r5, #32]
     b72:	f000 fc9f 	bl	14b4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     b76:	2101      	movs	r1, #1
     b78:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     b7a:	f000 fa6a 	bl	1052 <hal_gpio_write>
     b7e:	e7e1      	b.n	b44 <hal_spiflash_read+0x2e>

00000b80 <spiflash_write_enable>:
{
     b80:	b510      	push	{r4, lr}
     b82:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     b84:	2100      	movs	r1, #0
     b86:	6a80      	ldr	r0, [r0, #40]	; 0x28
     b88:	f000 fa63 	bl	1052 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     b8c:	2106      	movs	r1, #6
     b8e:	6a20      	ldr	r0, [r4, #32]
     b90:	f000 fc56 	bl	1440 <hal_spi_tx_val>
    hal_gpio_write(dev->ss_pin, 1);
     b94:	2101      	movs	r1, #1
     b96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     b98:	f000 fa5b 	bl	1052 <hal_gpio_write>
}
     b9c:	2000      	movs	r0, #0
     b9e:	bd10      	pop	{r4, pc}

00000ba0 <hal_spiflash_write>:
{
     ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ba4:	b082      	sub	sp, #8
     ba6:	4605      	mov	r5, r0
     ba8:	460e      	mov	r6, r1
     baa:	4690      	mov	r8, r2
     bac:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     bae:	2300      	movs	r3, #0
     bb0:	9301      	str	r3, [sp, #4]
     bb2:	2302      	movs	r3, #2
     bb4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (spiflash_wait_ready(dev, 100) != 0) {
     bb8:	2164      	movs	r1, #100	; 0x64
     bba:	f7ff ffa1 	bl	b00 <spiflash_wait_ready>
     bbe:	2800      	cmp	r0, #0
     bc0:	d14a      	bne.n	c58 <hal_spiflash_write+0xb8>
     bc2:	4603      	mov	r3, r0
    pp_time_typical = dev->characteristics->tbp1.typical;
     bc4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
     bc6:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
    pp_time_maximum = dev->characteristics->tpp.maximum;
     bca:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if (pp_time_maximum < pp_time_typical) {
     bce:	45d1      	cmp	r9, sl
     bd0:	d840      	bhi.n	c54 <hal_spiflash_write+0xb4>
    while (len) {
     bd2:	2f00      	cmp	r7, #0
     bd4:	d042      	beq.n	c5c <hal_spiflash_write+0xbc>
        spiflash_write_enable(dev);
     bd6:	4628      	mov	r0, r5
     bd8:	f7ff ffd2 	bl	b80 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     bdc:	f3c6 4307 	ubfx	r3, r6, #16, #8
     be0:	f88d 3005 	strb.w	r3, [sp, #5]
        cmd[2] = (uint8_t)(addr >> 8);
     be4:	f3c6 2307 	ubfx	r3, r6, #8, #8
     be8:	f88d 3006 	strb.w	r3, [sp, #6]
        cmd[3] = (uint8_t)(addr);
     bec:	f88d 6007 	strb.w	r6, [sp, #7]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     bf0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     bf2:	425c      	negs	r4, r3
     bf4:	4034      	ands	r4, r6
     bf6:	441c      	add	r4, r3
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     bf8:	1ba4      	subs	r4, r4, r6
     bfa:	42bc      	cmp	r4, r7
     bfc:	bf28      	it	cs
     bfe:	463c      	movcs	r4, r7
    hal_gpio_write(dev->ss_pin, 0);
     c00:	2100      	movs	r1, #0
     c02:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     c04:	f000 fa25 	bl	1052 <hal_gpio_write>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     c08:	2304      	movs	r3, #4
     c0a:	2200      	movs	r2, #0
     c0c:	eb0d 0103 	add.w	r1, sp, r3
     c10:	6a28      	ldr	r0, [r5, #32]
     c12:	f000 fc4f 	bl	14b4 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     c16:	4623      	mov	r3, r4
     c18:	2200      	movs	r2, #0
     c1a:	4641      	mov	r1, r8
     c1c:	6a28      	ldr	r0, [r5, #32]
     c1e:	f000 fc49 	bl	14b4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     c22:	2101      	movs	r1, #1
     c24:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     c26:	f000 fa14 	bl	1052 <hal_gpio_write>
        dev->ready = false;
     c2a:	2300      	movs	r3, #0
     c2c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        spiflash_delay_us(pp_time_typical);
     c30:	4648      	mov	r0, r9
     c32:	f7ff feec 	bl	a0e <spiflash_delay_us>
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     c36:	ebaa 0109 	sub.w	r1, sl, r9
     c3a:	4a0a      	ldr	r2, [pc, #40]	; (c64 <hal_spiflash_write+0xc4>)
     c3c:	fba2 3201 	umull	r3, r2, r2, r1
     c40:	08d2      	lsrs	r2, r2, #3
     c42:	4628      	mov	r0, r5
     c44:	f7ff ff34 	bl	ab0 <spiflash_wait_ready_till>
        if (rc) {
     c48:	4603      	mov	r3, r0
     c4a:	b938      	cbnz	r0, c5c <hal_spiflash_write+0xbc>
        addr += to_write;
     c4c:	4426      	add	r6, r4
        u8buf += to_write;
     c4e:	44a0      	add	r8, r4
        len -= to_write;
     c50:	1b3f      	subs	r7, r7, r4
     c52:	e7be      	b.n	bd2 <hal_spiflash_write+0x32>
        pp_time_maximum = pp_time_typical;
     c54:	46ca      	mov	sl, r9
     c56:	e7bc      	b.n	bd2 <hal_spiflash_write+0x32>
        rc = -1;
     c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
     c5c:	4618      	mov	r0, r3
     c5e:	b002      	add	sp, #8
     c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c64:	cccccccd 	.word	0xcccccccd

00000c68 <spiflash_execute_erase>:
{
     c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c6a:	4604      	mov	r4, r0
     c6c:	460d      	mov	r5, r1
     c6e:	4617      	mov	r7, r2
     c70:	461e      	mov	r6, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     c72:	2164      	movs	r1, #100	; 0x64
     c74:	f7ff ff44 	bl	b00 <spiflash_wait_ready>
     c78:	bb68      	cbnz	r0, cd6 <spiflash_execute_erase+0x6e>
    spiflash_write_enable(dev);
     c7a:	4620      	mov	r0, r4
     c7c:	f7ff ff80 	bl	b80 <spiflash_write_enable>
    spiflash_read_status(dev);
     c80:	4620      	mov	r0, r4
     c82:	f7ff fef5 	bl	a70 <spiflash_read_status>
    hal_gpio_write(dev->ss_pin, 0);
     c86:	2100      	movs	r1, #0
     c88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     c8a:	f000 f9e2 	bl	1052 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     c8e:	463b      	mov	r3, r7
     c90:	2200      	movs	r2, #0
     c92:	4629      	mov	r1, r5
     c94:	6a20      	ldr	r0, [r4, #32]
     c96:	f000 fc0d 	bl	14b4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     c9a:	2101      	movs	r1, #1
     c9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     c9e:	f000 f9d8 	bl	1052 <hal_gpio_write>
    dev->ready = false;
     ca2:	2300      	movs	r3, #0
     ca4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     ca8:	f000 ff0c 	bl	1ac4 <os_cputime_get32>
     cac:	4605      	mov	r5, r0
    spiflash_delay_us(delay_spec->typical);
     cae:	6830      	ldr	r0, [r6, #0]
     cb0:	f7ff fead 	bl	a0e <spiflash_delay_us>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     cb4:	f000 ff06 	bl	1ac4 <os_cputime_get32>
     cb8:	1b40      	subs	r0, r0, r5
    if (wait_time_us > delay_spec->maximum) {
     cba:	6871      	ldr	r1, [r6, #4]
     cbc:	4281      	cmp	r1, r0
     cbe:	d308      	bcc.n	cd2 <spiflash_execute_erase+0x6a>
        wait_time_us = delay_spec->maximum - wait_time_us;
     cc0:	1a09      	subs	r1, r1, r0
    rc = spiflash_wait_ready_till(dev, wait_time_us, wait_time_us / 50);
     cc2:	4a06      	ldr	r2, [pc, #24]	; (cdc <spiflash_execute_erase+0x74>)
     cc4:	fba2 3201 	umull	r3, r2, r2, r1
     cc8:	0912      	lsrs	r2, r2, #4
     cca:	4620      	mov	r0, r4
     ccc:	f7ff fef0 	bl	ab0 <spiflash_wait_ready_till>
}
     cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wait_time_us = 0;
     cd2:	2100      	movs	r1, #0
     cd4:	e7f5      	b.n	cc2 <spiflash_execute_erase+0x5a>
        rc = -1;
     cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     cda:	e7f9      	b.n	cd0 <spiflash_execute_erase+0x68>
     cdc:	51eb851f 	.word	0x51eb851f

00000ce0 <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     ce0:	b500      	push	{lr}
     ce2:	b083      	sub	sp, #12
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     ce4:	f88d 1004 	strb.w	r1, [sp, #4]
     ce8:	f3c2 4107 	ubfx	r1, r2, #16, #8
     cec:	f88d 1005 	strb.w	r1, [sp, #5]
     cf0:	f3c2 2107 	ubfx	r1, r2, #8, #8
     cf4:	f88d 1006 	strb.w	r1, [sp, #6]
     cf8:	f88d 2007 	strb.w	r2, [sp, #7]
                       (uint8_t)addr };
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     cfc:	2204      	movs	r2, #4
     cfe:	eb0d 0102 	add.w	r1, sp, r2
     d02:	f7ff ffb1 	bl	c68 <spiflash_execute_erase>

}
     d06:	b003      	add	sp, #12
     d08:	f85d fb04 	ldr.w	pc, [sp], #4

00000d0c <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
     d0c:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     d0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     d10:	460a      	mov	r2, r1
     d12:	2120      	movs	r1, #32
     d14:	f7ff ffe4 	bl	ce0 <spiflash_erase_cmd>
                              &dev->characteristics->tse);
}
     d18:	bd08      	pop	{r3, pc}

00000d1a <hal_spiflash_erase_sector>:
{
     d1a:	b508      	push	{r3, lr}
    return spiflash_sector_erase(dev, addr);
     d1c:	f7ff fff6 	bl	d0c <spiflash_sector_erase>
}
     d20:	bd08      	pop	{r3, pc}

00000d22 <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     d22:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
                              &dev->characteristics->tbe1);
     d24:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     d26:	3308      	adds	r3, #8
     d28:	460a      	mov	r2, r1
     d2a:	2152      	movs	r1, #82	; 0x52
     d2c:	f7ff ffd8 	bl	ce0 <spiflash_erase_cmd>
}
     d30:	bd08      	pop	{r3, pc}

00000d32 <spiflash_block_64k_erase>:
#endif

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     d32:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
                              &dev->characteristics->tbe2);
     d34:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     d36:	3310      	adds	r3, #16
     d38:	460a      	mov	r2, r1
     d3a:	21d8      	movs	r1, #216	; 0xd8
     d3c:	f7ff ffd0 	bl	ce0 <spiflash_erase_cmd>
}
     d40:	bd08      	pop	{r3, pc}

00000d42 <spiflash_chip_erase>:
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     d42:	b500      	push	{lr}
     d44:	b083      	sub	sp, #12
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     d46:	a902      	add	r1, sp, #8
     d48:	2360      	movs	r3, #96	; 0x60
     d4a:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
                                  &dev->characteristics->tce);
     d4e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_execute_erase(dev, buf, sizeof(buf),
     d50:	3318      	adds	r3, #24
     d52:	2201      	movs	r2, #1
     d54:	f7ff ff88 	bl	c68 <spiflash_execute_erase>
}
     d58:	b003      	add	sp, #12
     d5a:	f85d fb04 	ldr.w	pc, [sp], #4

00000d5e <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     d5e:	b570      	push	{r4, r5, r6, lr}
     d60:	4606      	mov	r6, r0
     d62:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     d64:	460c      	mov	r4, r1
     d66:	b911      	cbnz	r1, d6e <spiflash_erase+0x10>
     d68:	6883      	ldr	r3, [r0, #8]
     d6a:	4293      	cmp	r3, r2
     d6c:	d005      	beq.n	d7a <spiflash_erase+0x1c>
        return spiflash_chip_erase(dev);
    }
    address &= ~0xFFFU;
     d6e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
     d72:	f024 040f 	bic.w	r4, r4, #15
    int rc = 0;
     d76:	2300      	movs	r3, #0
    while (size) {
     d78:	e01c      	b.n	db4 <spiflash_erase+0x56>
        return spiflash_chip_erase(dev);
     d7a:	f7ff ffe2 	bl	d42 <spiflash_chip_erase>
     d7e:	4603      	mov	r3, r0
     d80:	e010      	b.n	da4 <spiflash_erase+0x46>
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
            /* 64 KB erase if possible */
            rc = spiflash_block_64k_erase(dev, address);
     d82:	4621      	mov	r1, r4
     d84:	4630      	mov	r0, r6
     d86:	f7ff ffd4 	bl	d32 <spiflash_block_64k_erase>
            if (rc) {
     d8a:	4603      	mov	r3, r0
     d8c:	b950      	cbnz	r0, da4 <spiflash_erase+0x46>
                goto err;
            }
            address += 0x10000;
     d8e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     d92:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     d96:	e00d      	b.n	db4 <spiflash_erase+0x56>
        }
#endif
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
            /* 32 KB erase if possible */
            rc = spiflash_block_32k_erase(dev, address);
     d98:	4621      	mov	r1, r4
     d9a:	4630      	mov	r0, r6
     d9c:	f7ff ffc1 	bl	d22 <spiflash_block_32k_erase>
            if (rc) {
     da0:	4603      	mov	r3, r0
     da2:	b108      	cbz	r0, da8 <spiflash_erase+0x4a>
            size = 0;
        }
    }
err:
    return rc;
}
     da4:	4618      	mov	r0, r3
     da6:	bd70      	pop	{r4, r5, r6, pc}
            address += 0x8000;
     da8:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     dac:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     db0:	e000      	b.n	db4 <spiflash_erase+0x56>
            size = 0;
     db2:	2500      	movs	r5, #0
    while (size) {
     db4:	2d00      	cmp	r5, #0
     db6:	d0f5      	beq.n	da4 <spiflash_erase+0x46>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     db8:	b2a3      	uxth	r3, r4
     dba:	b913      	cbnz	r3, dc2 <spiflash_erase+0x64>
     dbc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     dc0:	d2df      	bcs.n	d82 <spiflash_erase+0x24>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     dc2:	f3c4 030e 	ubfx	r3, r4, #0, #15
     dc6:	b913      	cbnz	r3, dce <spiflash_erase+0x70>
     dc8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     dcc:	d2e4      	bcs.n	d98 <spiflash_erase+0x3a>
        rc = spiflash_sector_erase(dev, address);
     dce:	4621      	mov	r1, r4
     dd0:	4630      	mov	r0, r6
     dd2:	f7ff ff9b 	bl	d0c <spiflash_sector_erase>
        if (rc) {
     dd6:	4603      	mov	r3, r0
     dd8:	2800      	cmp	r0, #0
     dda:	d1e3      	bne.n	da4 <spiflash_erase+0x46>
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     ddc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     de0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     de4:	d9e5      	bls.n	db2 <spiflash_erase+0x54>
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     de6:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     dea:	e7e3      	b.n	db4 <spiflash_erase+0x56>

00000dec <hal_spiflash_erase>:
{
     dec:	b508      	push	{r3, lr}
    return spiflash_erase(dev, address, size);
     dee:	f7ff ffb6 	bl	d5e <spiflash_erase>
}
     df2:	bd08      	pop	{r3, pc}

00000df4 <spiflash_identify>:

int
spiflash_identify(struct spiflash_dev *dev)
{
     df4:	b570      	push	{r4, r5, r6, lr}
     df6:	b082      	sub	sp, #8
     df8:	4606      	mov	r6, r0
    int i;
    int j;
    uint8_t manufacturer = 0;
     dfa:	2300      	movs	r3, #0
     dfc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t memory_type = 0;
     e00:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t capacity = 0;
     e04:	ac02      	add	r4, sp, #8
     e06:	f804 3d03 	strb.w	r3, [r4, #-3]!

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     e0a:	4d12      	ldr	r5, [pc, #72]	; (e54 <spiflash_identify+0x60>)
     e0c:	686b      	ldr	r3, [r5, #4]
     e0e:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     e10:	4623      	mov	r3, r4
     e12:	f10d 0206 	add.w	r2, sp, #6
     e16:	f10d 0107 	add.w	r1, sp, #7
     e1a:	4630      	mov	r0, r6
     e1c:	f7ff fdfb 	bl	a16 <spiflash_read_jedec_id>
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     e20:	782a      	ldrb	r2, [r5, #0]
     e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e26:	429a      	cmp	r2, r3
     e28:	d10e      	bne.n	e48 <spiflash_identify+0x54>
     e2a:	786a      	ldrb	r2, [r5, #1]
     e2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e30:	429a      	cmp	r2, r3
     e32:	d109      	bne.n	e48 <spiflash_identify+0x54>
     e34:	78aa      	ldrb	r2, [r5, #2]
     e36:	f89d 3005 	ldrb.w	r3, [sp, #5]
     e3a:	429a      	cmp	r2, r3
     e3c:	d104      	bne.n	e48 <spiflash_identify+0x54>
            memory_type != supported_chips[0].fc_jedec_id.ji_type ||
            capacity != supported_chips[0].fc_jedec_id.ji_capacity) {
            rc = -1;
            goto err;
        }
        dev->flash_chip = &supported_chips[0];
     e3e:	4b05      	ldr	r3, [pc, #20]	; (e54 <spiflash_identify+0x60>)
     e40:	63b3      	str	r3, [r6, #56]	; 0x38
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     e42:	2000      	movs	r0, #0
     e44:	b002      	add	sp, #8
     e46:	bd70      	pop	{r4, r5, r6, pc}
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     e48:	2300      	movs	r3, #0
     e4a:	461a      	mov	r2, r3
     e4c:	4619      	mov	r1, r3
     e4e:	4618      	mov	r0, r3
     e50:	f000 fdc0 	bl	19d4 <__assert_func>
     e54:	20000128 	.word	0x20000128

00000e58 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     e58:	b510      	push	{r4, lr}
     e5a:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     e5c:	2101      	movs	r1, #1
     e5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     e60:	f000 f8db 	bl	101a <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     e64:	6a20      	ldr	r0, [r4, #32]
     e66:	f000 fa87 	bl	1378 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     e6a:	f104 0118 	add.w	r1, r4, #24
     e6e:	6a20      	ldr	r0, [r4, #32]
     e70:	f000 fa40 	bl	12f4 <hal_spi_config>
    if (rc) {
     e74:	4603      	mov	r3, r0
     e76:	b108      	cbz	r0, e7c <hal_spiflash_init+0x24>
    hal_spi_enable(dev->spi_num);
#endif
    rc = spiflash_identify(dev);

    return rc;
}
     e78:	4618      	mov	r0, r3
     e7a:	bd10      	pop	{r4, pc}
    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     e7c:	2200      	movs	r2, #0
     e7e:	4611      	mov	r1, r2
     e80:	6a20      	ldr	r0, [r4, #32]
     e82:	f000 fb01 	bl	1488 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     e86:	6a20      	ldr	r0, [r4, #32]
     e88:	f000 fa50 	bl	132c <hal_spi_enable>
    rc = spiflash_identify(dev);
     e8c:	4620      	mov	r0, r4
     e8e:	f7ff ffb1 	bl	df4 <spiflash_identify>
     e92:	4603      	mov	r3, r0
    return rc;
     e94:	e7f0      	b.n	e78 <hal_spiflash_init+0x20>

00000e96 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     e96:	b508      	push	{r3, lr}
    hal_system_reset();
     e98:	f7ff f96c 	bl	174 <hal_system_reset>

00000e9c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     e9c:	2300      	movs	r3, #0
     e9e:	4a07      	ldr	r2, [pc, #28]	; (ebc <nrf52k_flash_wait_ready+0x20>)
     ea0:	4293      	cmp	r3, r2
     ea2:	dc06      	bgt.n	eb2 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     ea4:	4a06      	ldr	r2, [pc, #24]	; (ec0 <nrf52k_flash_wait_ready+0x24>)
     ea6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     eaa:	2a01      	cmp	r2, #1
     eac:	d004      	beq.n	eb8 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
     eae:	3301      	adds	r3, #1
     eb0:	e7f5      	b.n	e9e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
     eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     eb6:	4770      	bx	lr
            return 0;
     eb8:	2000      	movs	r0, #0
}
     eba:	4770      	bx	lr
     ebc:	0001869f 	.word	0x0001869f
     ec0:	4001e000 	.word	0x4001e000

00000ec4 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     ec4:	b538      	push	{r3, r4, r5, lr}
     ec6:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     ec8:	f7ff ffe8 	bl	e9c <nrf52k_flash_wait_ready>
     ecc:	b9f0      	cbnz	r0, f0c <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ece:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     ed2:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     ed4:	4b0f      	ldr	r3, [pc, #60]	; (f14 <nrf52k_flash_erase_sector+0x50>)
     ed6:	2202      	movs	r2, #2
     ed8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     edc:	f7ff ffde 	bl	e9c <nrf52k_flash_wait_ready>
     ee0:	b148      	cbz	r0, ef6 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
     ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     ee6:	4a0b      	ldr	r2, [pc, #44]	; (f14 <nrf52k_flash_erase_sector+0x50>)
     ee8:	2100      	movs	r1, #0
     eea:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     eee:	b904      	cbnz	r4, ef2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
     ef0:	b662      	cpsie	i
    return rc;
}
     ef2:	4618      	mov	r0, r3
     ef4:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
     ef6:	4b07      	ldr	r3, [pc, #28]	; (f14 <nrf52k_flash_erase_sector+0x50>)
     ef8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     efc:	f7ff ffce 	bl	e9c <nrf52k_flash_wait_ready>
     f00:	4603      	mov	r3, r0
     f02:	2800      	cmp	r0, #0
     f04:	d0ef      	beq.n	ee6 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
     f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f0a:	e7ec      	b.n	ee6 <nrf52k_flash_erase_sector+0x22>
        return -1;
     f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f10:	e7ef      	b.n	ef2 <nrf52k_flash_erase_sector+0x2e>
     f12:	bf00      	nop
     f14:	4001e000 	.word	0x4001e000

00000f18 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     f18:	2000      	movs	r0, #0
     f1a:	4770      	bx	lr

00000f1c <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     f1c:	297f      	cmp	r1, #127	; 0x7f
     f1e:	dc06      	bgt.n	f2e <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     f20:	0309      	lsls	r1, r1, #12
     f22:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f28:	601a      	str	r2, [r3, #0]
}
     f2a:	2000      	movs	r0, #0
     f2c:	4770      	bx	lr
{
     f2e:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     f30:	2300      	movs	r3, #0
     f32:	461a      	mov	r2, r3
     f34:	4619      	mov	r1, r3
     f36:	4618      	mov	r0, r3
     f38:	f000 fd4c 	bl	19d4 <__assert_func>

00000f3c <nrf52k_flash_write>:
{
     f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f40:	b082      	sub	sp, #8
     f42:	460d      	mov	r5, r1
     f44:	4616      	mov	r6, r2
     f46:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
     f48:	f7ff ffa8 	bl	e9c <nrf52k_flash_wait_ready>
     f4c:	2800      	cmp	r0, #0
     f4e:	d158      	bne.n	1002 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f50:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     f54:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     f56:	4b2c      	ldr	r3, [pc, #176]	; (1008 <nrf52k_flash_write+0xcc>)
     f58:	2201      	movs	r2, #1
     f5a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     f5e:	f015 0803 	ands.w	r8, r5, #3
     f62:	d10b      	bne.n	f7c <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
     f64:	2c03      	cmp	r4, #3
     f66:	d925      	bls.n	fb4 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
     f68:	f7ff ff98 	bl	e9c <nrf52k_flash_wait_ready>
     f6c:	2800      	cmp	r0, #0
     f6e:	d139      	bne.n	fe4 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
     f70:	f856 3b04 	ldr.w	r3, [r6], #4
     f74:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     f78:	3c04      	subs	r4, #4
     f7a:	e7f3      	b.n	f64 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
     f7c:	f7ff ff8e 	bl	e9c <nrf52k_flash_wait_ready>
     f80:	bb68      	cbnz	r0, fde <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
     f82:	f025 0a03 	bic.w	sl, r5, #3
     f86:	f8da 3000 	ldr.w	r3, [sl]
     f8a:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     f8c:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     f90:	45a1      	cmp	r9, r4
     f92:	d900      	bls.n	f96 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
     f94:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     f96:	464a      	mov	r2, r9
     f98:	4631      	mov	r1, r6
     f9a:	ab01      	add	r3, sp, #4
     f9c:	eb03 0008 	add.w	r0, r3, r8
     fa0:	f001 f81a 	bl	1fd8 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     faa:	444d      	add	r5, r9
        num_bytes -= cnt;
     fac:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     fb0:	444e      	add	r6, r9
     fb2:	e7d7      	b.n	f64 <nrf52k_flash_write+0x28>
    if (num_bytes) {
     fb4:	b164      	cbz	r4, fd0 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
     fb6:	682b      	ldr	r3, [r5, #0]
     fb8:	a802      	add	r0, sp, #8
     fba:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     fbe:	4622      	mov	r2, r4
     fc0:	4631      	mov	r1, r6
     fc2:	f001 f809 	bl	1fd8 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     fc6:	f7ff ff69 	bl	e9c <nrf52k_flash_wait_ready>
     fca:	b9b8      	cbnz	r0, ffc <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
     fcc:	9b01      	ldr	r3, [sp, #4]
     fce:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
     fd0:	f7ff ff64 	bl	e9c <nrf52k_flash_wait_ready>
     fd4:	4603      	mov	r3, r0
     fd6:	b138      	cbz	r0, fe8 <nrf52k_flash_write+0xac>
        rc = -1;
     fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     fdc:	e004      	b.n	fe8 <nrf52k_flash_write+0xac>
    int rc = -1;
     fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     fe2:	e001      	b.n	fe8 <nrf52k_flash_write+0xac>
     fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     fe8:	4a07      	ldr	r2, [pc, #28]	; (1008 <nrf52k_flash_write+0xcc>)
     fea:	2100      	movs	r1, #0
     fec:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     ff0:	b907      	cbnz	r7, ff4 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
     ff2:	b662      	cpsie	i
}
     ff4:	4618      	mov	r0, r3
     ff6:	b002      	add	sp, #8
     ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1000:	e7f2      	b.n	fe8 <nrf52k_flash_write+0xac>
        return -1;
    1002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1006:	e7f5      	b.n	ff4 <nrf52k_flash_write+0xb8>
    1008:	4001e000 	.word	0x4001e000

0000100c <nrf52k_flash_read>:
{
    100c:	b508      	push	{r3, lr}
    100e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
    1010:	461a      	mov	r2, r3
    1012:	f000 ffe1 	bl	1fd8 <memcpy>
}
    1016:	2000      	movs	r0, #0
    1018:	bd08      	pop	{r3, pc}

0000101a <hal_gpio_init_out>:
{
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
    101a:	b999      	cbnz	r1, 1044 <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
    101c:	2301      	movs	r3, #1
    101e:	4083      	lsls	r3, r0
    1020:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1024:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    1028:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    102c:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
    1030:	2103      	movs	r1, #3
    1032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
    1036:	2301      	movs	r3, #1
    1038:	fa03 f000 	lsl.w	r0, r3, r0
    103c:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518

    return 0;
}
    1040:	2000      	movs	r0, #0
    1042:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
    1044:	2301      	movs	r3, #1
    1046:	4083      	lsls	r3, r0
    1048:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    104c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    1050:	e7ea      	b.n	1028 <hal_gpio_init_out+0xe>

00001052 <hal_gpio_write>:
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
    1052:	b939      	cbnz	r1, 1064 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
    1054:	2301      	movs	r3, #1
    1056:	fa03 f000 	lsl.w	r0, r3, r0
    105a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    105e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
    1062:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
    1064:	2301      	movs	r3, #1
    1066:	fa03 f000 	lsl.w	r0, r3, r0
    106a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    106e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    1072:	4770      	bx	lr

00001074 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
    1074:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
    1076:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
    1078:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    107c:	b32b      	cbz	r3, 10ca <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
    107e:	2300      	movs	r3, #0
    1080:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
    1084:	7843      	ldrb	r3, [r0, #1]
    1086:	b303      	cbz	r3, 10ca <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
    1088:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
    108c:	88c3      	ldrh	r3, [r0, #6]
    108e:	fa13 f382 	uxtah	r3, r3, r2
    1092:	b29b      	uxth	r3, r3
    1094:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
    1096:	8881      	ldrh	r1, [r0, #4]
    1098:	428b      	cmp	r3, r1
    109a:	d217      	bcs.n	10cc <nrf52_irqm_handler+0x58>
    109c:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
    109e:	6984      	ldr	r4, [r0, #24]
    10a0:	4414      	add	r4, r2
    10a2:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
    10a4:	1acb      	subs	r3, r1, r3
    10a6:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
    10a8:	2bff      	cmp	r3, #255	; 0xff
    10aa:	bf28      	it	cs
    10ac:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
    10ae:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
    10b2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
    10b6:	69c1      	ldr	r1, [r0, #28]
    10b8:	b129      	cbz	r1, 10c6 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
    10ba:	440a      	add	r2, r1
    10bc:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
    10be:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
    10c2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
    10c6:	2301      	movs	r3, #1
    10c8:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
    10ca:	bd38      	pop	{r3, r4, r5, pc}
    10cc:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
    10ce:	6a03      	ldr	r3, [r0, #32]
    10d0:	b10b      	cbz	r3, 10d6 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
    10d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
    10d4:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
    10d6:	2300      	movs	r3, #0
    10d8:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
    10da:	2340      	movs	r3, #64	; 0x40
    10dc:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    10e0:	e7f3      	b.n	10ca <nrf52_irqm_handler+0x56>
	...

000010e4 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
    10e4:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
    10e6:	4b04      	ldr	r3, [pc, #16]	; (10f8 <nrf52_spi0_irq_handler+0x14>)
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	b103      	cbz	r3, 10ee <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
    10ec:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
    10ee:	4802      	ldr	r0, [pc, #8]	; (10f8 <nrf52_spi0_irq_handler+0x14>)
    10f0:	f7ff ffc0 	bl	1074 <nrf52_irqm_handler>
}
    10f4:	e7fa      	b.n	10ec <nrf52_spi0_irq_handler+0x8>
    10f6:	bf00      	nop
    10f8:	20006298 	.word	0x20006298

000010fc <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
    10fc:	2301      	movs	r3, #1
    10fe:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
    1100:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    1104:	2b00      	cmp	r3, #0
    1106:	d0fb      	beq.n	1100 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
    1108:	2300      	movs	r3, #0
    110a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
    110e:	4770      	bx	lr

00001110 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
    1110:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
    1112:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
    1114:	780b      	ldrb	r3, [r1, #0]
    1116:	2b03      	cmp	r3, #3
    1118:	d80c      	bhi.n	1134 <hal_spi_config_slave+0x24>
    111a:	e8df f003 	tbb	[pc, r3]
    111e:	0e02      	.short	0x0e02
    1120:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
    1122:	2300      	movs	r3, #0
    rc = 0;
    1124:	4618      	mov	r0, r3
    1126:	e00a      	b.n	113e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
    1128:	2304      	movs	r3, #4
    rc = 0;
    112a:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
    112c:	e007      	b.n	113e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
    112e:	2306      	movs	r3, #6
    rc = 0;
    1130:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
    1132:	e004      	b.n	113e <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
    1134:	2300      	movs	r3, #0
            rc = EINVAL;
    1136:	2016      	movs	r0, #22
            break;
    1138:	e001      	b.n	113e <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
    113a:	2302      	movs	r3, #2
    rc = 0;
    113c:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
    113e:	784c      	ldrb	r4, [r1, #1]
    1140:	2c01      	cmp	r4, #1
    1142:	d005      	beq.n	1150 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
    1144:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
    1148:	788b      	ldrb	r3, [r1, #2]
    114a:	b923      	cbnz	r3, 1156 <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
    114c:	bc10      	pop	{r4}
    114e:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    1150:	f043 0301 	orr.w	r3, r3, #1
    1154:	e7f6      	b.n	1144 <hal_spi_config_slave+0x34>
            rc = EINVAL;
    1156:	2016      	movs	r0, #22
    return rc;
    1158:	e7f8      	b.n	114c <hal_spi_config_slave+0x3c>
	...

0000115c <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
    115c:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
    115e:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
    1160:	2501      	movs	r5, #1
    1162:	409d      	lsls	r5, r3
    1164:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    1168:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
    116c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1170:	2503      	movs	r5, #3
    1172:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
    1176:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
    1178:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    117c:	2500      	movs	r5, #0
    117e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
    1182:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
    1184:	780c      	ldrb	r4, [r1, #0]
    1186:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
    118a:	784c      	ldrb	r4, [r1, #1]
    118c:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
    1190:	7889      	ldrb	r1, [r1, #2]
    1192:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    1196:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    119a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
    119e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    11a2:	4919      	ldr	r1, [pc, #100]	; (1208 <hal_spi_init_master+0xac>)
    11a4:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    11a6:	3310      	adds	r3, #16
    11a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    11ac:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
    11b0:	42ab      	cmp	r3, r5
    11b2:	db22      	blt.n	11fa <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    11b8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    11bc:	22e0      	movs	r2, #224	; 0xe0
    11be:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
    11c2:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
    11c6:	2b00      	cmp	r3, #0
    11c8:	db08      	blt.n	11dc <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11ca:	f003 011f 	and.w	r1, r3, #31
    11ce:	095b      	lsrs	r3, r3, #5
    11d0:	2201      	movs	r2, #1
    11d2:	408a      	lsls	r2, r1
    11d4:	3360      	adds	r3, #96	; 0x60
    11d6:	490d      	ldr	r1, [pc, #52]	; (120c <hal_spi_init_master+0xb0>)
    11d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
    11dc:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
    11e0:	2b00      	cmp	r3, #0
    11e2:	db07      	blt.n	11f4 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11e4:	f003 011f 	and.w	r1, r3, #31
    11e8:	095b      	lsrs	r3, r3, #5
    11ea:	2201      	movs	r2, #1
    11ec:	408a      	lsls	r2, r1
    11ee:	4907      	ldr	r1, [pc, #28]	; (120c <hal_spi_init_master+0xb0>)
    11f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
    11f4:	2000      	movs	r0, #0
    11f6:	bc30      	pop	{r4, r5}
    11f8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11fa:	f003 030f 	and.w	r3, r3, #15
    11fe:	4a04      	ldr	r2, [pc, #16]	; (1210 <hal_spi_init_master+0xb4>)
    1200:	441a      	add	r2, r3
    1202:	23e0      	movs	r3, #224	; 0xe0
    1204:	7613      	strb	r3, [r2, #24]
    1206:	e7dc      	b.n	11c2 <hal_spi_init_master+0x66>
    1208:	e000ed00 	.word	0xe000ed00
    120c:	e000e100 	.word	0xe000e100
    1210:	e000ecfc 	.word	0xe000ecfc

00001214 <hal_spi_config_master>:
{
    1214:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
    1216:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
    1218:	680c      	ldr	r4, [r1, #0]
    121a:	684b      	ldr	r3, [r1, #4]
    121c:	6084      	str	r4, [r0, #8]
    121e:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
    1220:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
    1224:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
    1228:	7808      	ldrb	r0, [r1, #0]
    122a:	2801      	cmp	r0, #1
    122c:	d916      	bls.n	125c <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
    122e:	2001      	movs	r0, #1
    1230:	4098      	lsls	r0, r3
    1232:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    1236:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
    123a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    123e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    1242:	2403      	movs	r4, #3
    1244:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
    1248:	788b      	ldrb	r3, [r1, #2]
    124a:	b973      	cbnz	r3, 126a <hal_spi_config_master+0x56>
    rc = 0;
    124c:	2000      	movs	r0, #0
    switch (settings->data_mode) {
    124e:	780b      	ldrb	r3, [r1, #0]
    1250:	2b03      	cmp	r3, #3
    1252:	d812      	bhi.n	127a <hal_spi_config_master+0x66>
    1254:	e8df f003 	tbb	[pc, r3]
    1258:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
    125c:	2001      	movs	r0, #1
    125e:	4098      	lsls	r0, r3
    1260:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    1264:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    1268:	e7e7      	b.n	123a <hal_spi_config_master+0x26>
            rc = EINVAL;
    126a:	2016      	movs	r0, #22
    126c:	e7ef      	b.n	124e <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    126e:	2300      	movs	r3, #0
    1270:	e007      	b.n	1282 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
    1272:	2304      	movs	r3, #4
            break;
    1274:	e005      	b.n	1282 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
    1276:	2306      	movs	r3, #6
            break;
    1278:	e003      	b.n	1282 <hal_spi_config_master+0x6e>
            nrf_config = 0;
    127a:	2300      	movs	r3, #0
            rc = EINVAL;
    127c:	2016      	movs	r0, #22
            break;
    127e:	e000      	b.n	1282 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    1280:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
    1282:	784c      	ldrb	r4, [r1, #1]
    1284:	2c01      	cmp	r4, #1
    1286:	d010      	beq.n	12aa <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
    1288:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
    128c:	684b      	ldr	r3, [r1, #4]
    128e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    1292:	d022      	beq.n	12da <hal_spi_config_master+0xc6>
    1294:	d80c      	bhi.n	12b0 <hal_spi_config_master+0x9c>
    1296:	2bfa      	cmp	r3, #250	; 0xfa
    1298:	d028      	beq.n	12ec <hal_spi_config_master+0xd8>
    129a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    129e:	d019      	beq.n	12d4 <hal_spi_config_master+0xc0>
    12a0:	2b7d      	cmp	r3, #125	; 0x7d
    12a2:	d011      	beq.n	12c8 <hal_spi_config_master+0xb4>
            frequency = 0;
    12a4:	2300      	movs	r3, #0
            rc = EINVAL;
    12a6:	2016      	movs	r0, #22
            break;
    12a8:	e010      	b.n	12cc <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
    12aa:	f043 0301 	orr.w	r3, r3, #1
    12ae:	e7eb      	b.n	1288 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
    12b0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    12b4:	d014      	beq.n	12e0 <hal_spi_config_master+0xcc>
    12b6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
    12ba:	d014      	beq.n	12e6 <hal_spi_config_master+0xd2>
    12bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    12c0:	d1f0      	bne.n	12a4 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
    12c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
    12c6:	e001      	b.n	12cc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
    12c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
    12cc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
    12d0:	bc10      	pop	{r4}
    12d2:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
    12d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
    12d8:	e7f8      	b.n	12cc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
    12da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
    12de:	e7f5      	b.n	12cc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
    12e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
    12e4:	e7f2      	b.n	12cc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
    12e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
    12ea:	e7ef      	b.n	12cc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
    12ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    12f0:	e7ec      	b.n	12cc <hal_spi_config_master+0xb8>
	...

000012f4 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    12f4:	2802      	cmp	r0, #2
    12f6:	dc10      	bgt.n	131a <hal_spi_config+0x26>
{
    12f8:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    12fa:	4b0b      	ldr	r3, [pc, #44]	; (1328 <hal_spi_config+0x34>)
    12fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1300:	b168      	cbz	r0, 131e <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    1302:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
    1304:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    1308:	b95b      	cbnz	r3, 1322 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    130a:	7803      	ldrb	r3, [r0, #0]
    130c:	b113      	cbz	r3, 1314 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
    130e:	f7ff feff 	bl	1110 <hal_spi_config_slave>
    }

err:
    return (rc);
}
    1312:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
    1314:	f7ff ff7e 	bl	1214 <hal_spi_config_master>
    1318:	e7fb      	b.n	1312 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    131a:	2016      	movs	r0, #22
}
    131c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    131e:	2016      	movs	r0, #22
    1320:	e7f7      	b.n	1312 <hal_spi_config+0x1e>
        return -1;
    1322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1326:	e7f4      	b.n	1312 <hal_spi_config+0x1e>
    1328:	00004d3c 	.word	0x00004d3c

0000132c <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    132c:	2802      	cmp	r0, #2
    132e:	dc1b      	bgt.n	1368 <hal_spi_enable+0x3c>
    1330:	4b10      	ldr	r3, [pc, #64]	; (1374 <hal_spi_enable+0x48>)
    1332:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1336:	b1cb      	cbz	r3, 136c <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1338:	781a      	ldrb	r2, [r3, #0]
    133a:	b17a      	cbz	r2, 135c <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
    133c:	6a1a      	ldr	r2, [r3, #32]
    133e:	b1ba      	cbz	r2, 1370 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
    1340:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
    1342:	2000      	movs	r0, #0
    1344:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    1348:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    134c:	f240 4202 	movw	r2, #1026	; 0x402
    1350:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    1354:	2202      	movs	r2, #2
    1356:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    135a:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
    135c:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    135e:	2201      	movs	r2, #1
    1360:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
    1364:	2000      	movs	r0, #0
    1366:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1368:	2016      	movs	r0, #22
    136a:	4770      	bx	lr
    136c:	2016      	movs	r0, #22
    136e:	4770      	bx	lr
            rc = EINVAL;
    1370:	2016      	movs	r0, #22

err:
    return rc;
}
    1372:	4770      	bx	lr
    1374:	00004d3c 	.word	0x00004d3c

00001378 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1378:	2802      	cmp	r0, #2
    137a:	dc2a      	bgt.n	13d2 <hal_spi_disable+0x5a>
{
    137c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    137e:	4b17      	ldr	r3, [pc, #92]	; (13dc <hal_spi_disable+0x64>)
    1380:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1384:	b33c      	cbz	r4, 13d6 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1386:	7823      	ldrb	r3, [r4, #0]
    1388:	b9ab      	cbnz	r3, 13b6 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
    138a:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1390:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
    1394:	7863      	ldrb	r3, [r4, #1]
    1396:	b943      	cbnz	r3, 13aa <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
    1398:	2300      	movs	r3, #0
    139a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
    139e:	2000      	movs	r0, #0
    13a0:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
    13a2:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
    13a4:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
    13a6:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
    13a8:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
    13aa:	4628      	mov	r0, r5
    13ac:	f7ff fea6 	bl	10fc <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
    13b0:	2300      	movs	r3, #0
    13b2:	7063      	strb	r3, [r4, #1]
    13b4:	e7f0      	b.n	1398 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
    13b6:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    13b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    13bc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
    13c0:	2300      	movs	r3, #0
    13c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    13c6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
    13ca:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    13ce:	70e3      	strb	r3, [r4, #3]
    13d0:	e7e5      	b.n	139e <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    13d2:	2016      	movs	r0, #22
}
    13d4:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    13d6:	2016      	movs	r0, #22
    return rc;
    13d8:	e7e6      	b.n	13a8 <hal_spi_disable+0x30>
    13da:	bf00      	nop
    13dc:	00004d3c 	.word	0x00004d3c

000013e0 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    13e0:	2802      	cmp	r0, #2
    13e2:	dc1d      	bgt.n	1420 <hal_spi_init+0x40>
{
    13e4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    13e6:	4b13      	ldr	r3, [pc, #76]	; (1434 <hal_spi_init+0x54>)
    13e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    13ec:	b1d4      	cbz	r4, 1424 <hal_spi_init+0x44>
    if (cfg == NULL) {
    13ee:	b1d9      	cbz	r1, 1428 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
    13f0:	2a01      	cmp	r2, #1
    13f2:	d81b      	bhi.n	142c <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
    13f4:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
    13f6:	b9d8      	cbnz	r0, 1430 <hal_spi_init+0x50>
    13f8:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
    13fa:	2303      	movs	r3, #3
    13fc:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
    13fe:	b94a      	cbnz	r2, 1414 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
    1400:	4b0d      	ldr	r3, [pc, #52]	; (1438 <hal_spi_init+0x58>)
    1402:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
    1404:	f7ff ffb8 	bl	1378 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
    1408:	4a0c      	ldr	r2, [pc, #48]	; (143c <hal_spi_init+0x5c>)
    140a:	4629      	mov	r1, r5
    140c:	4620      	mov	r0, r4
    140e:	f7ff fea5 	bl	115c <hal_spi_init_master>
    1412:	e00c      	b.n	142e <hal_spi_init+0x4e>
            assert(0);
    1414:	2300      	movs	r3, #0
    1416:	461a      	mov	r2, r3
    1418:	4619      	mov	r1, r3
    141a:	4618      	mov	r0, r3
    141c:	f000 fada 	bl	19d4 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1420:	2016      	movs	r0, #22
}
    1422:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1424:	2016      	movs	r0, #22
    1426:	e002      	b.n	142e <hal_spi_init+0x4e>
    rc = EINVAL;
    1428:	2016      	movs	r0, #22
    142a:	e000      	b.n	142e <hal_spi_init+0x4e>
    142c:	2016      	movs	r0, #22
}
    142e:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
    1430:	2016      	movs	r0, #22
    return (rc);
    1432:	e7fc      	b.n	142e <hal_spi_init+0x4e>
    1434:	00004d3c 	.word	0x00004d3c
    1438:	40003000 	.word	0x40003000
    143c:	000010e5 	.word	0x000010e5

00001440 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    1440:	2802      	cmp	r0, #2
    1442:	dc17      	bgt.n	1474 <hal_spi_tx_val+0x34>
    1444:	4b0f      	ldr	r3, [pc, #60]	; (1484 <hal_spi_tx_val+0x44>)
    1446:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    144a:	b1ab      	cbz	r3, 1478 <hal_spi_tx_val+0x38>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    144c:	781a      	ldrb	r2, [r3, #0]
    144e:	b9aa      	cbnz	r2, 147c <hal_spi_tx_val+0x3c>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
    1450:	691a      	ldr	r2, [r3, #16]
        spi->EVENTS_READY = 0;
    1452:	2300      	movs	r3, #0
    1454:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        spi->TXD = (uint8_t)val;
    1458:	b2c9      	uxtb	r1, r1
    145a:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
    145e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    1462:	2b00      	cmp	r3, #0
    1464:	d0fb      	beq.n	145e <hal_spi_tx_val+0x1e>
        spi->EVENTS_READY = 0;
    1466:	2300      	movs	r3, #0
    1468:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
    146c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    1470:	b280      	uxth	r0, r0
    1472:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
    1474:	2016      	movs	r0, #22
    1476:	4770      	bx	lr
    1478:	2016      	movs	r0, #22
    147a:	4770      	bx	lr
        retval = 0xFFFF;
    147c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1480:	4770      	bx	lr
    1482:	bf00      	nop
    1484:	00004d3c 	.word	0x00004d3c

00001488 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1488:	2802      	cmp	r0, #2
    148a:	dc0a      	bgt.n	14a2 <hal_spi_set_txrx_cb+0x1a>
    148c:	4b08      	ldr	r3, [pc, #32]	; (14b0 <hal_spi_set_txrx_cb+0x28>)
    148e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1492:	b143      	cbz	r3, 14a6 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    1494:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
    1496:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
    149a:	b930      	cbnz	r0, 14aa <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
    149c:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
    149e:	625a      	str	r2, [r3, #36]	; 0x24
    14a0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    14a2:	2016      	movs	r0, #22
    14a4:	4770      	bx	lr
    14a6:	2016      	movs	r0, #22
    14a8:	4770      	bx	lr
        rc = -1;
    14aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
    14ae:	4770      	bx	lr
    14b0:	00004d3c 	.word	0x00004d3c

000014b4 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
    14b4:	2b00      	cmp	r3, #0
    14b6:	d046      	beq.n	1546 <hal_spi_txrx+0x92>
{
    14b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ba:	460d      	mov	r5, r1
    14bc:	4617      	mov	r7, r2
    14be:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    14c0:	2802      	cmp	r0, #2
    14c2:	dc42      	bgt.n	154a <hal_spi_txrx+0x96>
    14c4:	4b25      	ldr	r3, [pc, #148]	; (155c <hal_spi_txrx+0xa8>)
    14c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    14ca:	2b00      	cmp	r3, #0
    14cc:	d03f      	beq.n	154e <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    14ce:	781a      	ldrb	r2, [r3, #0]
    14d0:	2a00      	cmp	r2, #0
    14d2:	d13e      	bne.n	1552 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    14d4:	2900      	cmp	r1, #0
    14d6:	d03e      	beq.n	1556 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
    14d8:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
    14da:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
    14de:	2b07      	cmp	r3, #7
    14e0:	d004      	beq.n	14ec <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
    14e2:	b95b      	cbnz	r3, 14fc <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    14e4:	2301      	movs	r3, #1
    14e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    14ea:	e007      	b.n	14fc <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
    14ec:	f7ff ff44 	bl	1378 <hal_spi_disable>
    14f0:	e7f8      	b.n	14e4 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
    14f2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
    14f6:	2300      	movs	r3, #0
    14f8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
    14fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1500:	2b00      	cmp	r3, #0
    1502:	d1f6      	bne.n	14f2 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
    1504:	782b      	ldrb	r3, [r5, #0]
    1506:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
    150a:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
    150c:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
    150e:	2200      	movs	r2, #0
    1510:	e00d      	b.n	152e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
    1512:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1516:	2b00      	cmp	r3, #0
    1518:	d0fb      	beq.n	1512 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
    151a:	2300      	movs	r3, #0
    151c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
    1520:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    1524:	b2db      	uxtb	r3, r3
            if (rxbuf) {
    1526:	b10f      	cbz	r7, 152c <hal_spi_txrx+0x78>
                *rxd = rxval;
    1528:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
    152c:	3201      	adds	r2, #1
    152e:	42b2      	cmp	r2, r6
    1530:	da07      	bge.n	1542 <hal_spi_txrx+0x8e>
            if (txcnt) {
    1532:	2900      	cmp	r1, #0
    1534:	d0ed      	beq.n	1512 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
    1536:	786b      	ldrb	r3, [r5, #1]
    1538:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
    153c:	3901      	subs	r1, #1
                ++txd;
    153e:	3501      	adds	r5, #1
    1540:	e7e7      	b.n	1512 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
    1542:	2000      	movs	r0, #0
    }

err:
    return rc;
}
    1544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
    1546:	2016      	movs	r0, #22
}
    1548:	4770      	bx	lr
    return rc;
    154a:	2016      	movs	r0, #22
    154c:	e7fa      	b.n	1544 <hal_spi_txrx+0x90>
    154e:	2016      	movs	r0, #22
    1550:	e7f8      	b.n	1544 <hal_spi_txrx+0x90>
    1552:	2016      	movs	r0, #22
    1554:	e7f6      	b.n	1544 <hal_spi_txrx+0x90>
    1556:	2016      	movs	r0, #22
    1558:	e7f4      	b.n	1544 <hal_spi_txrx+0x90>
    155a:	bf00      	nop
    155c:	00004d3c 	.word	0x00004d3c

00001560 <hal_system_start>:
                  //// /* 1st word is stack pointer */ ////TODO
                  //// "    msr  psp, %0       \n" ////TODO
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
    1560:	6803      	ldr	r3, [r0, #0]
    1562:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
    1564:	f383 8808 	msr	MSP, r3
    1568:	4710      	bx	r2

0000156a <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
    156a:	b508      	push	{r3, lr}
    assert(0);
    156c:	2300      	movs	r3, #0
    156e:	461a      	mov	r2, r3
    1570:	4619      	mov	r1, r3
    1572:	4618      	mov	r0, r3
    1574:	f000 fa2e 	bl	19d4 <__assert_func>

00001578 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    1578:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
    157a:	4b06      	ldr	r3, [pc, #24]	; (1594 <nrf52_wdt_irq_handler+0x1c>)
    157c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    1580:	f013 0f01 	tst.w	r3, #1
    1584:	d100      	bne.n	1588 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
    1586:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
    1588:	4b02      	ldr	r3, [pc, #8]	; (1594 <nrf52_wdt_irq_handler+0x1c>)
    158a:	2200      	movs	r2, #0
    158c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
    1590:	f7ff ffeb 	bl	156a <nrf52_hal_wdt_default_handler>
    1594:	40010000 	.word	0x40010000

00001598 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    1598:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
    159a:	4b17      	ldr	r3, [pc, #92]	; (15f8 <hal_watchdog_init+0x60>)
    159c:	2201      	movs	r2, #1
    159e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
    15a2:	4b16      	ldr	r3, [pc, #88]	; (15fc <hal_watchdog_init+0x64>)
    15a4:	4298      	cmp	r0, r3
    15a6:	d821      	bhi.n	15ec <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
    15a8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    15ac:	0153      	lsls	r3, r2, #5
    15ae:	4a14      	ldr	r2, [pc, #80]	; (1600 <hal_watchdog_init+0x68>)
    15b0:	fba2 2303 	umull	r2, r3, r2, r3
    15b4:	08db      	lsrs	r3, r3, #3
    15b6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    15ba:	4b0f      	ldr	r3, [pc, #60]	; (15f8 <hal_watchdog_init+0x60>)
    15bc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
    15c0:	4a10      	ldr	r2, [pc, #64]	; (1604 <hal_watchdog_init+0x6c>)
    15c2:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    15c4:	4910      	ldr	r1, [pc, #64]	; (1608 <hal_watchdog_init+0x70>)
    15c6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15ca:	4a10      	ldr	r2, [pc, #64]	; (160c <hal_watchdog_init+0x74>)
    15cc:	21e0      	movs	r1, #224	; 0xe0
    15ce:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    15d6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15da:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
    15dc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    15e0:	f042 0201 	orr.w	r2, r2, #1
    15e4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
    15e8:	2000      	movs	r0, #0
    15ea:	bd08      	pop	{r3, pc}
        assert(0);
    15ec:	2300      	movs	r3, #0
    15ee:	461a      	mov	r2, r3
    15f0:	4619      	mov	r1, r3
    15f2:	4618      	mov	r0, r3
    15f4:	f000 f9ee 	bl	19d4 <__assert_func>
    15f8:	40010000 	.word	0x40010000
    15fc:	02aaaaaa 	.word	0x02aaaaaa
    1600:	10624dd3 	.word	0x10624dd3
    1604:	e000ed00 	.word	0xe000ed00
    1608:	00001579 	.word	0x00001579
    160c:	e000e100 	.word	0xe000e100

00001610 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
    1610:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
    1612:	2100      	movs	r1, #0
    1614:	4608      	mov	r0, r1
    1616:	f000 f919 	bl	184c <hal_timer_init>
    assert(rc == 0);
    161a:	b920      	cbnz	r0, 1626 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    161c:	4808      	ldr	r0, [pc, #32]	; (1640 <nrf52_periph_create_timers+0x30>)
    161e:	f000 fa4b 	bl	1ab8 <os_cputime_init>
    assert(rc == 0);
    1622:	b930      	cbnz	r0, 1632 <nrf52_periph_create_timers+0x22>
#endif
}
    1624:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    1626:	2300      	movs	r3, #0
    1628:	461a      	mov	r2, r3
    162a:	4619      	mov	r1, r3
    162c:	4618      	mov	r0, r3
    162e:	f000 f9d1 	bl	19d4 <__assert_func>
    assert(rc == 0);
    1632:	2300      	movs	r3, #0
    1634:	461a      	mov	r2, r3
    1636:	4619      	mov	r1, r3
    1638:	4618      	mov	r0, r3
    163a:	f000 f9cb 	bl	19d4 <__assert_func>
    163e:	bf00      	nop
    1640:	000f4240 	.word	0x000f4240

00001644 <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
    1644:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    1646:	2200      	movs	r2, #0
    1648:	4905      	ldr	r1, [pc, #20]	; (1660 <nrf52_periph_create_spi+0x1c>)
    164a:	4610      	mov	r0, r2
    164c:	f7ff fec8 	bl	13e0 <hal_spi_init>
    assert(rc == 0);
    1650:	b900      	cbnz	r0, 1654 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
    1652:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    1654:	2300      	movs	r3, #0
    1656:	461a      	mov	r2, r3
    1658:	4619      	mov	r1, r3
    165a:	4618      	mov	r0, r3
    165c:	f000 f9ba 	bl	19d4 <__assert_func>
    1660:	00004d48 	.word	0x00004d48

00001664 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
    1664:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
    1666:	f7ff ffd3 	bl	1610 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    166a:	f7ff ffeb 	bl	1644 <nrf52_periph_create_spi>
}
    166e:	bd08      	pop	{r3, pc}

00001670 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1670:	2301      	movs	r3, #1
    1672:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1674:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
    1678:	4770      	bx	lr
	...

0000167c <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
    167c:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
    167e:	7883      	ldrb	r3, [r0, #2]
    1680:	b393      	cbz	r3, 16e8 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    1682:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1684:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1688:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
    168c:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
    168e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    1692:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    1696:	b11d      	cbz	r5, 16a0 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
    1698:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
    169c:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
    16a0:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
    16a2:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
    16a4:	2b02      	cmp	r3, #2
    16a6:	dc0e      	bgt.n	16c6 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    16a8:	7842      	ldrb	r2, [r0, #1]
    16aa:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    16ac:	2b00      	cmp	r3, #0
    16ae:	db15      	blt.n	16dc <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16b0:	f002 021f 	and.w	r2, r2, #31
    16b4:	095b      	lsrs	r3, r3, #5
    16b6:	2101      	movs	r1, #1
    16b8:	fa01 f202 	lsl.w	r2, r1, r2
    16bc:	3340      	adds	r3, #64	; 0x40
    16be:	491b      	ldr	r1, [pc, #108]	; (172c <nrf_timer_set_ocmp+0xb0>)
    16c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    16c4:	e00a      	b.n	16dc <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
    16c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    16ca:	d208      	bcs.n	16de <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    16cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    16d0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    16d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    16d8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
    16dc:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    16de:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
    16e2:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
    16e6:	e7f5      	b.n	16d4 <nrf_timer_set_ocmp+0x58>
    16e8:	460d      	mov	r5, r1
    16ea:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
    16ec:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    16ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    16f2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    16f6:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    16fa:	2200      	movs	r2, #0
    16fc:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1700:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    1704:	f7ff ffb4 	bl	1670 <nrf_read_timer_cntr>
    1708:	1b40      	subs	r0, r0, r5
    170a:	2800      	cmp	r0, #0
    170c:	dbe6      	blt.n	16dc <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    170e:	7862      	ldrb	r2, [r4, #1]
    1710:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1712:	2b00      	cmp	r3, #0
    1714:	dbe2      	blt.n	16dc <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1716:	f002 021f 	and.w	r2, r2, #31
    171a:	095b      	lsrs	r3, r3, #5
    171c:	2101      	movs	r1, #1
    171e:	fa01 f202 	lsl.w	r2, r1, r2
    1722:	3340      	adds	r3, #64	; 0x40
    1724:	4901      	ldr	r1, [pc, #4]	; (172c <nrf_timer_set_ocmp+0xb0>)
    1726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    172a:	e7d7      	b.n	16dc <nrf_timer_set_ocmp+0x60>
    172c:	e000e100 	.word	0xe000e100

00001730 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1734:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    1738:	4770      	bx	lr

0000173a <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    173a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    173e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    1742:	4770      	bx	lr

00001744 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
    1744:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    1746:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1748:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    174c:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    174e:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
    1750:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
    1754:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    1758:	b1ad      	cbz	r5, 1786 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
    175a:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
    175e:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
    1760:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    1764:	2500      	movs	r5, #0
    1766:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    176a:	7840      	ldrb	r0, [r0, #1]
    176c:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    176e:	42aa      	cmp	r2, r5
    1770:	db09      	blt.n	1786 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1772:	f000 001f 	and.w	r0, r0, #31
    1776:	0952      	lsrs	r2, r2, #5
    1778:	2501      	movs	r5, #1
    177a:	fa05 f000 	lsl.w	r0, r5, r0
    177e:	3240      	adds	r2, #64	; 0x40
    1780:	4d04      	ldr	r5, [pc, #16]	; (1794 <hal_timer_read_bsptimer+0x50>)
    1782:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
    1786:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
    178a:	b904      	cbnz	r4, 178e <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
    178c:	b662      	cpsie	i

    return tcntr;
}
    178e:	bc30      	pop	{r4, r5}
    1790:	4770      	bx	lr
    1792:	bf00      	nop
    1794:	e000e100 	.word	0xe000e100

00001798 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    179c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    17a0:	b672      	cpsid	i
    17a2:	e013      	b.n	17cc <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    17a4:	6928      	ldr	r0, [r5, #16]
    17a6:	f7ff ff63 	bl	1670 <nrf_read_timer_cntr>
            delta = 0;
    17aa:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
    17ac:	68e3      	ldr	r3, [r4, #12]
    17ae:	1ac0      	subs	r0, r0, r3
    17b0:	4290      	cmp	r0, r2
    17b2:	db19      	blt.n	17e8 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    17b4:	6923      	ldr	r3, [r4, #16]
    17b6:	b1a3      	cbz	r3, 17e2 <hal_timer_chk_queue+0x4a>
    17b8:	6962      	ldr	r2, [r4, #20]
    17ba:	615a      	str	r2, [r3, #20]
    17bc:	6963      	ldr	r3, [r4, #20]
    17be:	6922      	ldr	r2, [r4, #16]
    17c0:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    17c2:	2300      	movs	r3, #0
    17c4:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    17c6:	6863      	ldr	r3, [r4, #4]
    17c8:	68a0      	ldr	r0, [r4, #8]
    17ca:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    17cc:	696c      	ldr	r4, [r5, #20]
    17ce:	b15c      	cbz	r4, 17e8 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
    17d0:	78ab      	ldrb	r3, [r5, #2]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d0e6      	beq.n	17a4 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    17d6:	4628      	mov	r0, r5
    17d8:	f7ff ffb4 	bl	1744 <hal_timer_read_bsptimer>
            delta = -3;
    17dc:	f06f 0202 	mvn.w	r2, #2
    17e0:	e7e4      	b.n	17ac <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    17e2:	6963      	ldr	r3, [r4, #20]
    17e4:	61ab      	str	r3, [r5, #24]
    17e6:	e7e9      	b.n	17bc <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    17e8:	696b      	ldr	r3, [r5, #20]
    if (timer) {
    17ea:	b133      	cbz	r3, 17fa <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    17ec:	68d9      	ldr	r1, [r3, #12]
    17ee:	4628      	mov	r0, r5
    17f0:	f7ff ff44 	bl	167c <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
    17f4:	b906      	cbnz	r6, 17f8 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
    17f6:	b662      	cpsie	i
}
    17f8:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
    17fa:	78ab      	ldrb	r3, [r5, #2]
    17fc:	b11b      	cbz	r3, 1806 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
    17fe:	6928      	ldr	r0, [r5, #16]
    1800:	f7ff ff9b 	bl	173a <nrf_rtc_disable_ocmp>
    1804:	e7f6      	b.n	17f4 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
    1806:	6928      	ldr	r0, [r5, #16]
    1808:	f7ff ff92 	bl	1730 <nrf_timer_disable_ocmp>
    180c:	e7f2      	b.n	17f4 <hal_timer_chk_queue+0x5c>

0000180e <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
    180e:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
    1810:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    1812:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
    1816:	b113      	cbz	r3, 181e <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    1818:	2300      	movs	r3, #0
    181a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
    181e:	6883      	ldr	r3, [r0, #8]
    1820:	3301      	adds	r3, #1
    1822:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    1824:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
    1828:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    182c:	d100      	bne.n	1830 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
    182e:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
    1830:	f7ff ffb2 	bl	1798 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    1834:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
    1838:	e7f9      	b.n	182e <hal_timer_irq_handler+0x20>
	...

0000183c <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    183c:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
    183e:	4802      	ldr	r0, [pc, #8]	; (1848 <nrf52_timer0_irq_handler+0xc>)
    1840:	f7ff ffe5 	bl	180e <hal_timer_irq_handler>
}
    1844:	bd08      	pop	{r3, pc}
    1846:	bf00      	nop
    1848:	200062c0 	.word	0x200062c0

0000184c <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    184c:	2805      	cmp	r0, #5
    184e:	dc1c      	bgt.n	188a <hal_timer_init+0x3e>
    1850:	4b12      	ldr	r3, [pc, #72]	; (189c <hal_timer_init+0x50>)
    1852:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1856:	b1d3      	cbz	r3, 188e <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    1858:	781a      	ldrb	r2, [r3, #0]
    185a:	b9d2      	cbnz	r2, 1892 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    185c:	b9d8      	cbnz	r0, 1896 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    185e:	4a10      	ldr	r2, [pc, #64]	; (18a0 <hal_timer_init+0x54>)
    1860:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    1862:	2208      	movs	r2, #8
    1864:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1866:	4b0f      	ldr	r3, [pc, #60]	; (18a4 <hal_timer_init+0x58>)
    1868:	f44f 7280 	mov.w	r2, #256	; 0x100
    186c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1870:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1874:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1878:	22e0      	movs	r2, #224	; 0xe0
    187a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    187e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
    1882:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1884:	4a08      	ldr	r2, [pc, #32]	; (18a8 <hal_timer_init+0x5c>)
    1886:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
    1888:	4770      	bx	lr

err:
    return rc;
    188a:	2016      	movs	r0, #22
    188c:	4770      	bx	lr
    188e:	2016      	movs	r0, #22
    1890:	4770      	bx	lr
    1892:	2016      	movs	r0, #22
    1894:	4770      	bx	lr
    1896:	2016      	movs	r0, #22
}
    1898:	4770      	bx	lr
    189a:	bf00      	nop
    189c:	00004d4c 	.word	0x00004d4c
    18a0:	40008000 	.word	0x40008000
    18a4:	e000e100 	.word	0xe000e100
    18a8:	0000183d 	.word	0x0000183d

000018ac <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    18ac:	2805      	cmp	r0, #5
    18ae:	dc65      	bgt.n	197c <hal_timer_config+0xd0>
    18b0:	4b39      	ldr	r3, [pc, #228]	; (1998 <hal_timer_config+0xec>)
    18b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    18b6:	2800      	cmp	r0, #0
    18b8:	d062      	beq.n	1980 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    18ba:	4b38      	ldr	r3, [pc, #224]	; (199c <hal_timer_config+0xf0>)
    18bc:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    18c0:	7803      	ldrb	r3, [r0, #0]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d15e      	bne.n	1984 <hal_timer_config+0xd8>
    18c6:	2900      	cmp	r1, #0
    18c8:	d05e      	beq.n	1988 <hal_timer_config+0xdc>
    18ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    18ce:	d85d      	bhi.n	198c <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
    18d0:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    18d2:	2a00      	cmp	r2, #0
    18d4:	d05c      	beq.n	1990 <hal_timer_config+0xe4>
{
    18d6:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    18d8:	2901      	cmp	r1, #1
    18da:	d013      	beq.n	1904 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    18dc:	2301      	movs	r3, #1
    18de:	2b09      	cmp	r3, #9
    18e0:	d810      	bhi.n	1904 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
    18e2:	2201      	movs	r2, #1
    18e4:	409a      	lsls	r2, r3
    18e6:	428a      	cmp	r2, r1
    18e8:	d202      	bcs.n	18f0 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    18ea:	3301      	adds	r3, #1
    18ec:	b2db      	uxtb	r3, r3
    18ee:	e7f6      	b.n	18de <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
    18f0:	1e5c      	subs	r4, r3, #1
    18f2:	2501      	movs	r5, #1
    18f4:	fa05 f404 	lsl.w	r4, r5, r4
    18f8:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
    18fa:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
    18fc:	428c      	cmp	r4, r1
    18fe:	d201      	bcs.n	1904 <hal_timer_config+0x58>
                    prescaler -= 1;
    1900:	3b01      	subs	r3, #1
    1902:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    1904:	4a25      	ldr	r2, [pc, #148]	; (199c <hal_timer_config+0xf0>)
    1906:	411a      	asrs	r2, r3
    1908:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
    190a:	2201      	movs	r2, #1
    190c:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    190e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1912:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    1914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1918:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    191c:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
    1920:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    1924:	d00c      	beq.n	1940 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    192a:	2100      	movs	r1, #0
    192c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1930:	2101      	movs	r1, #1
    1932:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    1934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1938:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    193c:	2a00      	cmp	r2, #0
    193e:	d0f9      	beq.n	1934 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
    1940:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    1942:	2101      	movs	r1, #1
    1944:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
    1946:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    1948:	2500      	movs	r5, #0
    194a:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    194e:	2503      	movs	r5, #3
    1950:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    1954:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    1958:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    195a:	7842      	ldrb	r2, [r0, #1]
    195c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    195e:	2b00      	cmp	r3, #0
    1960:	db07      	blt.n	1972 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1962:	f002 021f 	and.w	r2, r2, #31
    1966:	095b      	lsrs	r3, r3, #5
    1968:	fa01 f202 	lsl.w	r2, r1, r2
    196c:	490c      	ldr	r1, [pc, #48]	; (19a0 <hal_timer_config+0xf4>)
    196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    1972:	b97c      	cbnz	r4, 1994 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
    1974:	b662      	cpsie	i

    return 0;
    1976:	2000      	movs	r0, #0

err:
    return rc;
}
    1978:	bc30      	pop	{r4, r5}
    197a:	4770      	bx	lr
    return rc;
    197c:	2016      	movs	r0, #22
    197e:	4770      	bx	lr
    1980:	2016      	movs	r0, #22
    1982:	4770      	bx	lr
    1984:	2016      	movs	r0, #22
    1986:	4770      	bx	lr
    1988:	2016      	movs	r0, #22
    198a:	4770      	bx	lr
    198c:	2016      	movs	r0, #22
    198e:	4770      	bx	lr
    1990:	2016      	movs	r0, #22
}
    1992:	4770      	bx	lr
    return 0;
    1994:	2000      	movs	r0, #0
    1996:	e7ef      	b.n	1978 <hal_timer_config+0xcc>
    1998:	00004d4c 	.word	0x00004d4c
    199c:	00f42400 	.word	0x00f42400
    19a0:	e000e100 	.word	0xe000e100

000019a4 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
    19a4:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    19a6:	2805      	cmp	r0, #5
    19a8:	dc0c      	bgt.n	19c4 <hal_timer_read+0x20>
    19aa:	4b09      	ldr	r3, [pc, #36]	; (19d0 <hal_timer_read+0x2c>)
    19ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19b0:	b140      	cbz	r0, 19c4 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
    19b2:	7883      	ldrb	r3, [r0, #2]
    19b4:	b91b      	cbnz	r3, 19be <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    19b6:	6900      	ldr	r0, [r0, #16]
    19b8:	f7ff fe5a 	bl	1670 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    19bc:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    19be:	f7ff fec1 	bl	1744 <hal_timer_read_bsptimer>
    19c2:	e7fb      	b.n	19bc <hal_timer_read+0x18>
    assert(0);
    19c4:	2300      	movs	r3, #0
    19c6:	461a      	mov	r2, r3
    19c8:	4619      	mov	r1, r3
    19ca:	4618      	mov	r0, r3
    19cc:	f000 f802 	bl	19d4 <__assert_func>
    19d0:	00004d4c 	.word	0x00004d4c

000019d4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    19d4:	b508      	push	{r3, lr}
    19d6:	4675      	mov	r5, lr
    19d8:	4604      	mov	r4, r0
    19da:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    19dc:	f000 f936 	bl	1c4c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    19e0:	f000 fb32 	bl	2048 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    19e4:	b18c      	cbz	r4, 1a0a <__assert_func+0x36>
    19e6:	4633      	mov	r3, r6
    19e8:	4622      	mov	r2, r4
    19ea:	4629      	mov	r1, r5
    19ec:	4809      	ldr	r0, [pc, #36]	; (1a14 <__assert_func+0x40>)
    19ee:	f000 fb2f 	bl	2050 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    19f2:	f7fe fbb7 	bl	164 <hal_debugger_connected>
    19f6:	b100      	cbz	r0, 19fa <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    19f8:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    19fa:	4b07      	ldr	r3, [pc, #28]	; (1a18 <__assert_func+0x44>)
    19fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1a00:	605a      	str	r2, [r3, #4]
    asm("isb");
    1a02:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    1a06:	f7fe fbb5 	bl	174 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    1a0a:	4629      	mov	r1, r5
    1a0c:	4803      	ldr	r0, [pc, #12]	; (1a1c <__assert_func+0x48>)
    1a0e:	f000 fb1f 	bl	2050 <console_printf>
    1a12:	e7ee      	b.n	19f2 <__assert_func+0x1e>
    1a14:	00004d74 	.word	0x00004d74
    1a18:	e000ed00 	.word	0xe000ed00
    1a1c:	00004d64 	.word	0x00004d64

00001a20 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    1a20:	b500      	push	{lr}
    1a22:	b083      	sub	sp, #12
    1a24:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    1a26:	f000 fb0f 	bl	2048 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    1a2a:	4d1b      	ldr	r5, [pc, #108]	; (1a98 <os_default_irq+0x78>)
    1a2c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    1a2e:	6822      	ldr	r2, [r4, #0]
    1a30:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1a34:	4819      	ldr	r0, [pc, #100]	; (1a9c <os_default_irq+0x7c>)
    1a36:	f000 fb0b 	bl	2050 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    1a3a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    1a3c:	6883      	ldr	r3, [r0, #8]
    1a3e:	6842      	ldr	r2, [r0, #4]
    1a40:	6801      	ldr	r1, [r0, #0]
    1a42:	68c0      	ldr	r0, [r0, #12]
    1a44:	9000      	str	r0, [sp, #0]
    1a46:	4816      	ldr	r0, [pc, #88]	; (1aa0 <os_default_irq+0x80>)
    1a48:	f000 fb02 	bl	2050 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    1a4c:	6923      	ldr	r3, [r4, #16]
    1a4e:	9300      	str	r3, [sp, #0]
    1a50:	68e3      	ldr	r3, [r4, #12]
    1a52:	68a2      	ldr	r2, [r4, #8]
    1a54:	6861      	ldr	r1, [r4, #4]
    1a56:	4813      	ldr	r0, [pc, #76]	; (1aa4 <os_default_irq+0x84>)
    1a58:	f000 fafa 	bl	2050 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    1a5c:	6a23      	ldr	r3, [r4, #32]
    1a5e:	9300      	str	r3, [sp, #0]
    1a60:	69e3      	ldr	r3, [r4, #28]
    1a62:	69a2      	ldr	r2, [r4, #24]
    1a64:	6961      	ldr	r1, [r4, #20]
    1a66:	4810      	ldr	r0, [pc, #64]	; (1aa8 <os_default_irq+0x88>)
    1a68:	f000 faf2 	bl	2050 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    1a6c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    1a6e:	6983      	ldr	r3, [r0, #24]
    1a70:	6942      	ldr	r2, [r0, #20]
    1a72:	6901      	ldr	r1, [r0, #16]
    1a74:	69c0      	ldr	r0, [r0, #28]
    1a76:	9000      	str	r0, [sp, #0]
    1a78:	480c      	ldr	r0, [pc, #48]	; (1aac <os_default_irq+0x8c>)
    1a7a:	f000 fae9 	bl	2050 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    1a7e:	6869      	ldr	r1, [r5, #4]
    1a80:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1a82:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1a84:	480a      	ldr	r0, [pc, #40]	; (1ab0 <os_default_irq+0x90>)
    1a86:	f000 fae3 	bl	2050 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    1a8a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    1a8c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    1a8e:	4809      	ldr	r0, [pc, #36]	; (1ab4 <os_default_irq+0x94>)
    1a90:	f000 fade 	bl	2050 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    1a94:	f7fe fb6e 	bl	174 <hal_system_reset>
    1a98:	e000ed00 	.word	0xe000ed00
    1a9c:	00004d8c 	.word	0x00004d8c
    1aa0:	00004dc0 	.word	0x00004dc0
    1aa4:	00004df4 	.word	0x00004df4
    1aa8:	00004e28 	.word	0x00004e28
    1aac:	00004e5c 	.word	0x00004e5c
    1ab0:	00004e90 	.word	0x00004e90
    1ab4:	00004eb8 	.word	0x00004eb8

00001ab8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    1ab8:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    1aba:	4601      	mov	r1, r0
    1abc:	2000      	movs	r0, #0
    1abe:	f7ff fef5 	bl	18ac <hal_timer_config>
    return rc;
}
    1ac2:	bd08      	pop	{r3, pc}

00001ac4 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    1ac4:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    1ac6:	2000      	movs	r0, #0
    1ac8:	f7ff ff6c 	bl	19a4 <hal_timer_read>
    return cpu_time;
}
    1acc:	bd08      	pop	{r3, pc}

00001ace <os_cputime_delay_ticks>:
{
    1ace:	b510      	push	{r4, lr}
    1ad0:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    1ad2:	f7ff fff7 	bl	1ac4 <os_cputime_get32>
    1ad6:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    1ad8:	f7ff fff4 	bl	1ac4 <os_cputime_get32>
    1adc:	1b00      	subs	r0, r0, r4
    1ade:	2800      	cmp	r0, #0
    1ae0:	dbfa      	blt.n	1ad8 <os_cputime_delay_ticks+0xa>
}
    1ae2:	bd10      	pop	{r4, pc}

00001ae4 <os_cputime_delay_usecs>:
{
    1ae4:	b508      	push	{r3, lr}
    os_cputime_delay_ticks(ticks);
    1ae6:	f7ff fff2 	bl	1ace <os_cputime_delay_ticks>
}
    1aea:	bd08      	pop	{r3, pc}

00001aec <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    1aec:	4b02      	ldr	r3, [pc, #8]	; (1af8 <os_msys_find_biggest_pool+0xc>)
    1aee:	6818      	ldr	r0, [r3, #0]
    1af0:	b108      	cbz	r0, 1af6 <os_msys_find_biggest_pool+0xa>
    1af2:	6858      	ldr	r0, [r3, #4]
    1af4:	3808      	subs	r0, #8
}
    1af6:	4770      	bx	lr
    1af8:	20000138 	.word	0x20000138

00001afc <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1afc:	4b09      	ldr	r3, [pc, #36]	; (1b24 <os_msys_find_pool+0x28>)
    1afe:	6819      	ldr	r1, [r3, #0]
    1b00:	460b      	mov	r3, r1
    1b02:	b123      	cbz	r3, 1b0e <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
    1b04:	881a      	ldrh	r2, [r3, #0]
    1b06:	4282      	cmp	r2, r0
    1b08:	d201      	bcs.n	1b0e <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1b0a:	689b      	ldr	r3, [r3, #8]
    1b0c:	e7f9      	b.n	1b02 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
    1b0e:	b10b      	cbz	r3, 1b14 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    1b10:	4618      	mov	r0, r3
    1b12:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    1b14:	b119      	cbz	r1, 1b1e <os_msys_find_pool+0x22>
    1b16:	4b03      	ldr	r3, [pc, #12]	; (1b24 <os_msys_find_pool+0x28>)
    1b18:	685b      	ldr	r3, [r3, #4]
    1b1a:	3b08      	subs	r3, #8
    1b1c:	e7f8      	b.n	1b10 <os_msys_find_pool+0x14>
    1b1e:	460b      	mov	r3, r1
    return (pool);
    1b20:	e7f6      	b.n	1b10 <os_msys_find_pool+0x14>
    1b22:	bf00      	nop
    1b24:	20000138 	.word	0x20000138

00001b28 <os_msys_register>:
{
    1b28:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1b2a:	4b11      	ldr	r3, [pc, #68]	; (1b70 <os_msys_register+0x48>)
    1b2c:	681d      	ldr	r5, [r3, #0]
    1b2e:	462b      	mov	r3, r5
    prev = NULL;
    1b30:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1b32:	b133      	cbz	r3, 1b42 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    1b34:	8801      	ldrh	r1, [r0, #0]
    1b36:	881a      	ldrh	r2, [r3, #0]
    1b38:	4291      	cmp	r1, r2
    1b3a:	d302      	bcc.n	1b42 <os_msys_register+0x1a>
        prev = pool;
    1b3c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1b3e:	689b      	ldr	r3, [r3, #8]
    1b40:	e7f7      	b.n	1b32 <os_msys_register+0xa>
    if (prev) {
    1b42:	b15c      	cbz	r4, 1b5c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    1b44:	68a3      	ldr	r3, [r4, #8]
    1b46:	6083      	str	r3, [r0, #8]
    1b48:	b11b      	cbz	r3, 1b52 <os_msys_register+0x2a>
    1b4a:	60a0      	str	r0, [r4, #8]
}
    1b4c:	2000      	movs	r0, #0
    1b4e:	bc30      	pop	{r4, r5}
    1b50:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    1b52:	f100 0308 	add.w	r3, r0, #8
    1b56:	4a06      	ldr	r2, [pc, #24]	; (1b70 <os_msys_register+0x48>)
    1b58:	6053      	str	r3, [r2, #4]
    1b5a:	e7f6      	b.n	1b4a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    1b5c:	6085      	str	r5, [r0, #8]
    1b5e:	b115      	cbz	r5, 1b66 <os_msys_register+0x3e>
    1b60:	4b03      	ldr	r3, [pc, #12]	; (1b70 <os_msys_register+0x48>)
    1b62:	6018      	str	r0, [r3, #0]
    1b64:	e7f2      	b.n	1b4c <os_msys_register+0x24>
    1b66:	f100 0308 	add.w	r3, r0, #8
    1b6a:	4a01      	ldr	r2, [pc, #4]	; (1b70 <os_msys_register+0x48>)
    1b6c:	6053      	str	r3, [r2, #4]
    1b6e:	e7f7      	b.n	1b60 <os_msys_register+0x38>
    1b70:	20000138 	.word	0x20000138

00001b74 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    1b74:	b530      	push	{r4, r5, lr}
    1b76:	b083      	sub	sp, #12
    1b78:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    1b7a:	9d07      	ldr	r5, [sp, #28]
    1b7c:	9501      	str	r5, [sp, #4]
    1b7e:	9d06      	ldr	r5, [sp, #24]
    1b80:	9500      	str	r5, [sp, #0]
    1b82:	f000 fda1 	bl	26c8 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    1b86:	b138      	cbz	r0, 1b98 <os_msys_init_once+0x24>
    1b88:	2000      	movs	r0, #0
    1b8a:	9000      	str	r0, [sp, #0]
    1b8c:	4b09      	ldr	r3, [pc, #36]	; (1bb4 <os_msys_init_once+0x40>)
    1b8e:	681d      	ldr	r5, [r3, #0]
    1b90:	4603      	mov	r3, r0
    1b92:	4602      	mov	r2, r0
    1b94:	4601      	mov	r1, r0
    1b96:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    1b98:	4620      	mov	r0, r4
    1b9a:	f7ff ffc5 	bl	1b28 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1b9e:	b138      	cbz	r0, 1bb0 <os_msys_init_once+0x3c>
    1ba0:	2000      	movs	r0, #0
    1ba2:	9000      	str	r0, [sp, #0]
    1ba4:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <os_msys_init_once+0x40>)
    1ba6:	681c      	ldr	r4, [r3, #0]
    1ba8:	4603      	mov	r3, r0
    1baa:	4602      	mov	r2, r0
    1bac:	4601      	mov	r1, r0
    1bae:	47a0      	blx	r4
}
    1bb0:	b003      	add	sp, #12
    1bb2:	bd30      	pop	{r4, r5, pc}
    1bb4:	2000014c 	.word	0x2000014c

00001bb8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    1bb8:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <os_msys_reset+0xc>)
    1bba:	2200      	movs	r2, #0
    1bbc:	601a      	str	r2, [r3, #0]
    1bbe:	605b      	str	r3, [r3, #4]
}
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop
    1bc4:	20000138 	.word	0x20000138

00001bc8 <os_msys_get_pkthdr>:
{
    1bc8:	b510      	push	{r4, lr}
    1bca:	460c      	mov	r4, r1
    if (dsize == 0) {
    1bcc:	b930      	cbnz	r0, 1bdc <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    1bce:	f7ff ff8d 	bl	1aec <os_msys_find_biggest_pool>
    if (!pool) {
    1bd2:	b158      	cbz	r0, 1bec <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    1bd4:	b2e1      	uxtb	r1, r4
    1bd6:	f000 f860 	bl	1c9a <os_mbuf_get_pkthdr>
}
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	f101 0308 	add.w	r3, r1, #8
    1be0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    1be2:	4403      	add	r3, r0
    1be4:	b298      	uxth	r0, r3
    1be6:	f7ff ff89 	bl	1afc <os_msys_find_pool>
    1bea:	e7f2      	b.n	1bd2 <os_msys_get_pkthdr+0xa>
    return (NULL);
    1bec:	2000      	movs	r0, #0
    1bee:	e7f4      	b.n	1bda <os_msys_get_pkthdr+0x12>

00001bf0 <os_msys_init>:

void
os_msys_init(void)
{
    1bf0:	b500      	push	{lr}
    1bf2:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    1bf4:	f7ff ffe0 	bl	1bb8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    1bf8:	4b06      	ldr	r3, [pc, #24]	; (1c14 <os_msys_init+0x24>)
    1bfa:	9301      	str	r3, [sp, #4]
    1bfc:	f44f 7392 	mov.w	r3, #292	; 0x124
    1c00:	9300      	str	r3, [sp, #0]
    1c02:	2340      	movs	r3, #64	; 0x40
    1c04:	4a04      	ldr	r2, [pc, #16]	; (1c18 <os_msys_init+0x28>)
    1c06:	4905      	ldr	r1, [pc, #20]	; (1c1c <os_msys_init+0x2c>)
    1c08:	4805      	ldr	r0, [pc, #20]	; (1c20 <os_msys_init+0x30>)
    1c0a:	f7ff ffb3 	bl	1b74 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    1c0e:	b003      	add	sp, #12
    1c10:	f85d fb04 	ldr.w	pc, [sp], #4
    1c14:	00004ed4 	.word	0x00004ed4
    1c18:	20004a5c 	.word	0x20004a5c
    1c1c:	20004a68 	.word	0x20004a68
    1c20:	2000015c 	.word	0x2000015c

00001c24 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1c24:	4b01      	ldr	r3, [pc, #4]	; (1c2c <os_time_get+0x8>)
    1c26:	6818      	ldr	r0, [r3, #0]
    1c28:	4770      	bx	lr
    1c2a:	bf00      	nop
    1c2c:	200062dc 	.word	0x200062dc

00001c30 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    1c30:	4a02      	ldr	r2, [pc, #8]	; (1c3c <os_time_advance+0xc>)
    1c32:	6813      	ldr	r3, [r2, #0]
    1c34:	4418      	add	r0, r3
    1c36:	6010      	str	r0, [r2, #0]
}
    1c38:	4770      	bx	lr
    1c3a:	bf00      	nop
    1c3c:	200062dc 	.word	0x200062dc

00001c40 <os_time_delay>:

void
os_time_delay(os_time_t osticks)
{
}
    1c40:	4770      	bx	lr

00001c42 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    1c42:	b508      	push	{r3, lr}
    os_time_advance(1);
    1c44:	2001      	movs	r0, #1
    1c46:	f7ff fff3 	bl	1c30 <os_time_advance>
}
    1c4a:	bd08      	pop	{r3, pc}

00001c4c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c4c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1c50:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    1c52:	f000 0001 	and.w	r0, r0, #1
    1c56:	4770      	bx	lr

00001c58 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    1c58:	b900      	cbnz	r0, 1c5c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    1c5a:	b662      	cpsie	i
        __enable_irq();
    }
}
    1c5c:	4770      	bx	lr

00001c5e <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    1c5e:	3a10      	subs	r2, #16
    1c60:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    1c62:	6041      	str	r1, [r0, #4]

    return (0);
}
    1c64:	2000      	movs	r0, #0
    1c66:	4770      	bx	lr

00001c68 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    1c68:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    1c6a:	8803      	ldrh	r3, [r0, #0]
    1c6c:	428b      	cmp	r3, r1
    1c6e:	d312      	bcc.n	1c96 <os_mbuf_get+0x2e>
    1c70:	460d      	mov	r5, r1
    1c72:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    1c74:	6840      	ldr	r0, [r0, #4]
    1c76:	f000 f8eb 	bl	1e50 <os_memblock_get>
    if (!om) {
    1c7a:	4603      	mov	r3, r0
    1c7c:	b148      	cbz	r0, 1c92 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    1c7e:	2200      	movs	r2, #0
    1c80:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
    1c82:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
    1c84:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
    1c86:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    1c88:	f100 0110 	add.w	r1, r0, #16
    1c8c:	4429      	add	r1, r5
    1c8e:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
    1c90:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    1c92:	4618      	mov	r0, r3
    1c94:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1c96:	2300      	movs	r3, #0
    return om;
    1c98:	e7fb      	b.n	1c92 <os_mbuf_get+0x2a>

00001c9a <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    1c9a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    1c9c:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    1ca0:	8803      	ldrh	r3, [r0, #0]
    1ca2:	42ab      	cmp	r3, r5
    1ca4:	d310      	bcc.n	1cc8 <os_mbuf_get_pkthdr+0x2e>
    1ca6:	2dff      	cmp	r5, #255	; 0xff
    1ca8:	d810      	bhi.n	1ccc <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    1caa:	2100      	movs	r1, #0
    1cac:	f7ff ffdc 	bl	1c68 <os_mbuf_get>
    if (om) {
    1cb0:	4603      	mov	r3, r0
    1cb2:	b138      	cbz	r0, 1cc4 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
    1cb4:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
    1cb6:	6802      	ldr	r2, [r0, #0]
    1cb8:	4415      	add	r5, r2
    1cba:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    1cbc:	2200      	movs	r2, #0
    1cbe:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
    1cc0:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    1cc2:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    1cc4:	4618      	mov	r0, r3
    1cc6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1cc8:	2300      	movs	r3, #0
    1cca:	e7fb      	b.n	1cc4 <os_mbuf_get_pkthdr+0x2a>
    1ccc:	2300      	movs	r3, #0
    return om;
    1cce:	e7f9      	b.n	1cc4 <os_mbuf_get_pkthdr+0x2a>

00001cd0 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    1cd0:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    1cd2:	6883      	ldr	r3, [r0, #8]
    1cd4:	b123      	cbz	r3, 1ce0 <os_mbuf_free+0x10>
    1cd6:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    1cd8:	6858      	ldr	r0, [r3, #4]
    1cda:	f000 f8e1 	bl	1ea0 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    1cde:	bd08      	pop	{r3, pc}
    rc = 0;
    1ce0:	2000      	movs	r0, #0
    return (rc);
    1ce2:	e7fc      	b.n	1cde <os_mbuf_free+0xe>

00001ce4 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    1ce4:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    1ce6:	b160      	cbz	r0, 1d02 <os_mbuf_free_chain+0x1e>
{
    1ce8:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    1cea:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    1cec:	4618      	mov	r0, r3
    1cee:	f7ff ffef 	bl	1cd0 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    1cf2:	4623      	mov	r3, r4
        if (rc != 0) {
    1cf4:	4602      	mov	r2, r0
    1cf6:	b910      	cbnz	r0, 1cfe <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    1cf8:	2c00      	cmp	r4, #0
    1cfa:	d1f6      	bne.n	1cea <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    1cfc:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    1cfe:	4610      	mov	r0, r2
    1d00:	bd10      	pop	{r4, pc}
    rc = 0;
    1d02:	2200      	movs	r2, #0
}
    1d04:	4610      	mov	r0, r2
    1d06:	4770      	bx	lr

00001d08 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
    1d08:	2300      	movs	r3, #0
    while (om != NULL) {
    1d0a:	e003      	b.n	1d14 <os_mbuf_len+0xc>
        len += om->om_len;
    1d0c:	88c2      	ldrh	r2, [r0, #6]
    1d0e:	4413      	add	r3, r2
    1d10:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
    1d12:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
    1d14:	2800      	cmp	r0, #0
    1d16:	d1f9      	bne.n	1d0c <os_mbuf_len+0x4>
    }

    return len;
}
    1d18:	4618      	mov	r0, r3
    1d1a:	4770      	bx	lr

00001d1c <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    1d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    1d20:	2800      	cmp	r0, #0
    1d22:	d04d      	beq.n	1dc0 <os_mbuf_append+0xa4>
    1d24:	460f      	mov	r7, r1
    1d26:	4691      	mov	r9, r2
    1d28:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    1d2a:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    1d2e:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    1d30:	e000      	b.n	1d34 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
    1d32:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    1d34:	68eb      	ldr	r3, [r5, #12]
    1d36:	2b00      	cmp	r3, #0
    1d38:	d1fb      	bne.n	1d32 <os_mbuf_append+0x16>
    }

    remainder = len;
    1d3a:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    1d3c:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    1d3e:	f105 0410 	add.w	r4, r5, #16
    1d42:	881b      	ldrh	r3, [r3, #0]
    1d44:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    1d46:	6828      	ldr	r0, [r5, #0]
    1d48:	88eb      	ldrh	r3, [r5, #6]
    1d4a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    1d4c:	1a24      	subs	r4, r4, r0
    1d4e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    1d50:	b164      	cbz	r4, 1d6c <os_mbuf_append+0x50>
        if (space > remainder) {
    1d52:	454c      	cmp	r4, r9
    1d54:	dd00      	ble.n	1d58 <os_mbuf_append+0x3c>
            space = remainder;
    1d56:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    1d58:	4622      	mov	r2, r4
    1d5a:	4639      	mov	r1, r7
    1d5c:	f000 f93c 	bl	1fd8 <memcpy>

        last->om_len += space;
    1d60:	88eb      	ldrh	r3, [r5, #6]
    1d62:	4423      	add	r3, r4
    1d64:	80eb      	strh	r3, [r5, #6]
        data += space;
    1d66:	4427      	add	r7, r4
        remainder -= space;
    1d68:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    1d6c:	2e00      	cmp	r6, #0
    1d6e:	dd16      	ble.n	1d9e <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
    1d70:	2100      	movs	r1, #0
    1d72:	4640      	mov	r0, r8
    1d74:	f7ff ff78 	bl	1c68 <os_mbuf_get>
        if (!new) {
    1d78:	4604      	mov	r4, r0
    1d7a:	b180      	cbz	r0, 1d9e <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    1d7c:	f8b8 2000 	ldrh.w	r2, [r8]
    1d80:	42b2      	cmp	r2, r6
    1d82:	bfa8      	it	ge
    1d84:	4632      	movge	r2, r6
    1d86:	b292      	uxth	r2, r2
    1d88:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    1d8a:	4639      	mov	r1, r7
    1d8c:	6800      	ldr	r0, [r0, #0]
    1d8e:	f000 f923 	bl	1fd8 <memcpy>
        data += new->om_len;
    1d92:	88e3      	ldrh	r3, [r4, #6]
    1d94:	441f      	add	r7, r3
        remainder -= new->om_len;
    1d96:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
    1d98:	60ec      	str	r4, [r5, #12]
        last = new;
    1d9a:	4625      	mov	r5, r4
    1d9c:	e7e6      	b.n	1d6c <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    1d9e:	f89a 3005 	ldrb.w	r3, [sl, #5]
    1da2:	2b07      	cmp	r3, #7
    1da4:	d907      	bls.n	1db6 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    1da6:	eba9 0906 	sub.w	r9, r9, r6
    1daa:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    1dae:	fa13 f989 	uxtah	r9, r3, r9
    1db2:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    1db6:	b106      	cbz	r6, 1dba <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
    1db8:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
    1dba:	4630      	mov	r0, r6
    1dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    1dc0:	2602      	movs	r6, #2
    1dc2:	e7fa      	b.n	1dba <os_mbuf_append+0x9e>

00001dc4 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    1dc4:	2800      	cmp	r0, #0
    1dc6:	d031      	beq.n	1e2c <os_mempool_init_internal+0x68>
{
    1dc8:	b430      	push	{r4, r5}
    1dca:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    1dcc:	2a00      	cmp	r2, #0
    1dce:	d02f      	beq.n	1e30 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    1dd0:	b1bb      	cbz	r3, 1e02 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    1dd2:	b113      	cbz	r3, 1dda <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    1dd4:	f013 0f03 	tst.w	r3, #3
    1dd8:	d12c      	bne.n	1e34 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    1dda:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    1ddc:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    1dde:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    1de0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1de4:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    1de6:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    1de8:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    1dea:	9802      	ldr	r0, [sp, #8]
    1dec:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    1dee:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    1df0:	b199      	cbz	r1, 1e1a <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    1df2:	f012 0f03 	tst.w	r2, #3
    1df6:	d002      	beq.n	1dfe <os_mempool_init_internal+0x3a>
    1df8:	f022 0203 	bic.w	r2, r2, #3
    1dfc:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    1dfe:	2001      	movs	r0, #1
    1e00:	e007      	b.n	1e12 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    1e02:	2900      	cmp	r1, #0
    1e04:	d0e5      	beq.n	1dd2 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    1e06:	2003      	movs	r0, #3
    1e08:	e00e      	b.n	1e28 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    1e0a:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    1e0c:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    1e0e:	3001      	adds	r0, #1
            block_addr += true_block_size;
    1e10:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    1e12:	4281      	cmp	r1, r0
    1e14:	dcf9      	bgt.n	1e0a <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    1e16:	2200      	movs	r2, #0
    1e18:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    1e1a:	2000      	movs	r0, #0
    1e1c:	6120      	str	r0, [r4, #16]
    1e1e:	4b06      	ldr	r3, [pc, #24]	; (1e38 <os_mempool_init_internal+0x74>)
    1e20:	685a      	ldr	r2, [r3, #4]
    1e22:	6014      	str	r4, [r2, #0]
    1e24:	3410      	adds	r4, #16
    1e26:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    1e28:	bc30      	pop	{r4, r5}
    1e2a:	4770      	bx	lr
        return OS_INVALID_PARM;
    1e2c:	2003      	movs	r0, #3
}
    1e2e:	4770      	bx	lr
        return OS_INVALID_PARM;
    1e30:	2003      	movs	r0, #3
    1e32:	e7f9      	b.n	1e28 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    1e34:	2004      	movs	r0, #4
    1e36:	e7f7      	b.n	1e28 <os_mempool_init_internal+0x64>
    1e38:	200062e0 	.word	0x200062e0

00001e3c <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    1e3c:	b510      	push	{r4, lr}
    1e3e:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    1e40:	2400      	movs	r4, #0
    1e42:	9401      	str	r4, [sp, #4]
    1e44:	9c04      	ldr	r4, [sp, #16]
    1e46:	9400      	str	r4, [sp, #0]
    1e48:	f7ff ffbc 	bl	1dc4 <os_mempool_init_internal>
}
    1e4c:	b002      	add	sp, #8
    1e4e:	bd10      	pop	{r4, pc}

00001e50 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    1e50:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    1e52:	b1a0      	cbz	r0, 1e7e <os_memblock_get+0x2e>
    1e54:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    1e56:	f7ff fef9 	bl	1c4c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    1e5a:	88e3      	ldrh	r3, [r4, #6]
    1e5c:	b153      	cbz	r3, 1e74 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    1e5e:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    1e60:	682a      	ldr	r2, [r5, #0]
    1e62:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    1e64:	3b01      	subs	r3, #1
    1e66:	b29b      	uxth	r3, r3
    1e68:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    1e6a:	8922      	ldrh	r2, [r4, #8]
    1e6c:	4293      	cmp	r3, r2
    1e6e:	d202      	bcs.n	1e76 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    1e70:	8123      	strh	r3, [r4, #8]
    1e72:	e000      	b.n	1e76 <os_memblock_get+0x26>
    block = NULL;
    1e74:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    1e76:	f7ff feef 	bl	1c58 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    1e7a:	4628      	mov	r0, r5
    1e7c:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    1e7e:	2500      	movs	r5, #0
    return (void *)block;
    1e80:	e7fb      	b.n	1e7a <os_memblock_get+0x2a>

00001e82 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    1e82:	b538      	push	{r3, r4, r5, lr}
    1e84:	4604      	mov	r4, r0
    1e86:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    1e88:	f7ff fee0 	bl	1c4c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    1e8c:	6963      	ldr	r3, [r4, #20]
    1e8e:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    1e90:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    1e92:	88e3      	ldrh	r3, [r4, #6]
    1e94:	3301      	adds	r3, #1
    1e96:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    1e98:	f7ff fede 	bl	1c58 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    1e9c:	2000      	movs	r0, #0
    1e9e:	bd38      	pop	{r3, r4, r5, pc}

00001ea0 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    1ea0:	b168      	cbz	r0, 1ebe <os_memblock_put+0x1e>
{
    1ea2:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    1ea4:	b169      	cbz	r1, 1ec2 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    1ea6:	7a83      	ldrb	r3, [r0, #10]
    1ea8:	f013 0f01 	tst.w	r3, #1
    1eac:	d004      	beq.n	1eb8 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    1eae:	69c3      	ldr	r3, [r0, #28]
    1eb0:	b113      	cbz	r3, 1eb8 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    1eb2:	6a02      	ldr	r2, [r0, #32]
    1eb4:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    1eb6:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    1eb8:	f7ff ffe3 	bl	1e82 <os_memblock_put_from_cb>
    1ebc:	e7fb      	b.n	1eb6 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    1ebe:	2003      	movs	r0, #3
}
    1ec0:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    1ec2:	2003      	movs	r0, #3
    1ec4:	e7f7      	b.n	1eb6 <os_memblock_put+0x16>
	...

00001ec8 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    1ec8:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    1ecc:	482b      	ldr	r0, [pc, #172]	; (1f7c <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    1ece:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    1ed0:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    1ed2:	f380 8814 	msr	CONTROL, r0
        ISB
    1ed6:	f3bf 8f6f 	isb	sy
        BX      LR
    1eda:	4770      	bx	lr

00001edc <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    1edc:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    1ee0:	4770      	bx	lr

00001ee2 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    1ee2:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    1ee6:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    1ee8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    1eec:	b951      	cbnz	r1, 1f04 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1eee:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1ef2:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1ef4:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    1efa:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    1efe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    1f02:	4770      	bx	lr

00001f04 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1f04:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    1f06:	4a1e      	ldr	r2, [pc, #120]	; (1f80 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    1f08:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    1f0a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    1f0c:	d809      	bhi.n	1f22 <SVC_Done>

        LDR     R4,=SVC_Table-4
    1f0e:	4c1d      	ldr	r4, [pc, #116]	; (1f84 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    1f10:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1f14:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1f18:	47a0      	blx	r4

        MRS     R12,PSP
    1f1a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    1f1e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00001f22 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    1f26:	4770      	bx	lr

00001f28 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1f28:	4b17      	ldr	r3, [pc, #92]	; (1f88 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    1f2a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1f2c:	4b17      	ldr	r3, [pc, #92]	; (1f8c <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    1f2e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    1f30:	4291      	cmp	r1, r2
        IT      EQ
    1f32:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    1f34:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    1f36:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    1f3a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    1f3e:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    1f42:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    1f44:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    1f48:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    1f4c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    1f50:	4770      	bx	lr

00001f52 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1f52:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    1f54:	f7ff fe75 	bl	1c42 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    1f5c:	4770      	bx	lr

00001f5e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    1f5e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    1f62:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    1f64:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    1f68:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    1f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    1f70:	4668      	mov	r0, sp
        BL      os_default_irq
    1f72:	f7ff fd55 	bl	1a20 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    1f76:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    1f7a:	4770      	bx	lr
        LDR     R0,=os_flags
    1f7c:	20004a84 	.word	0x20004a84
        LDR     R2,=SVC_Count
    1f80:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    1f84:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1f88:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    1f8c:	200062e8 	.word	0x200062e8

00001f90 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    1f90:	b470      	push	{r4, r5, r6}
    1f92:	f04f 0500 	mov.w	r5, #0
    1f96:	f022 0603 	bic.w	r6, r2, #3
    1f9a:	e005      	b.n	1fa8 <test1>

00001f9c <loop1>:
    1f9c:	5943      	ldr	r3, [r0, r5]
    1f9e:	594c      	ldr	r4, [r1, r5]
    1fa0:	42a3      	cmp	r3, r4
    1fa2:	d104      	bne.n	1fae <res1>
    1fa4:	f105 0504 	add.w	r5, r5, #4

00001fa8 <test1>:
    1fa8:	42b5      	cmp	r5, r6
    1faa:	d1f7      	bne.n	1f9c <loop1>
    1fac:	e00d      	b.n	1fca <test2>

00001fae <res1>:
    1fae:	ba1b      	rev	r3, r3
    1fb0:	ba24      	rev	r4, r4
    1fb2:	1b1b      	subs	r3, r3, r4
    1fb4:	bf8c      	ite	hi
    1fb6:	2301      	movhi	r3, #1
    1fb8:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1fbc:	e009      	b.n	1fd2 <done>

00001fbe <loop2>:
    1fbe:	5d43      	ldrb	r3, [r0, r5]
    1fc0:	5d4c      	ldrb	r4, [r1, r5]
    1fc2:	1b1b      	subs	r3, r3, r4
    1fc4:	d105      	bne.n	1fd2 <done>
    1fc6:	f105 0501 	add.w	r5, r5, #1

00001fca <test2>:
    1fca:	4295      	cmp	r5, r2
    1fcc:	d1f7      	bne.n	1fbe <loop2>
    1fce:	f04f 0300 	mov.w	r3, #0

00001fd2 <done>:
    1fd2:	4618      	mov	r0, r3
    1fd4:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    1fd6:	4770      	bx	lr

00001fd8 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    1fd8:	e001      	b.n	1fde <test1>

00001fda <loop1>:
    1fda:	588b      	ldr	r3, [r1, r2]
    1fdc:	5083      	str	r3, [r0, r2]

00001fde <test1>:
    1fde:	3a04      	subs	r2, #4
    1fe0:	d5fb      	bpl.n	1fda <loop1>
    1fe2:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    1fe6:	e001      	b.n	1fec <test2>

00001fe8 <loop2>:
    1fe8:	5c8b      	ldrb	r3, [r1, r2]
    1fea:	5483      	strb	r3, [r0, r2]

00001fec <test2>:
    1fec:	3a01      	subs	r2, #1
    1fee:	d5fb      	bpl.n	1fe8 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    1ff0:	4770      	bx	lr

00001ff2 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    1ff2:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1ff4:	4605      	mov	r5, r0
    1ff6:	b2c9      	uxtb	r1, r1
    1ff8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1ffc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    2000:	18ab      	adds	r3, r5, r2
    2002:	2403      	movs	r4, #3
    2004:	4023      	ands	r3, r4
    2006:	1ad3      	subs	r3, r2, r3
    2008:	d40b      	bmi.n	2022 <memset+0x30>
    200a:	e001      	b.n	2010 <memset+0x1e>
    200c:	3a01      	subs	r2, #1
    200e:	54a9      	strb	r1, [r5, r2]
    2010:	429a      	cmp	r2, r3
    2012:	d1fb      	bne.n	200c <memset+0x1a>
    2014:	e000      	b.n	2018 <memset+0x26>
    2016:	50a9      	str	r1, [r5, r2]
    2018:	3a04      	subs	r2, #4
    201a:	d5fc      	bpl.n	2016 <memset+0x24>
    201c:	3204      	adds	r2, #4
    201e:	e000      	b.n	2022 <memset+0x30>
    2020:	54a9      	strb	r1, [r5, r2]
    2022:	3a01      	subs	r2, #1
    2024:	d5fc      	bpl.n	2020 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    2026:	bc30      	pop	{r4, r5}
    2028:	4770      	bx	lr

0000202a <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    202a:	b570      	push	{r4, r5, r6, lr}
    202c:	4606      	mov	r6, r0
    202e:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
    2030:	2400      	movs	r4, #0
    2032:	42ac      	cmp	r4, r5
    2034:	da07      	bge.n	2046 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    2036:	5d30      	ldrb	r0, [r6, r4]
    2038:	f000 f8c0 	bl	21bc <console_out_nolock>
    203c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2040:	d001      	beq.n	2046 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
    2042:	3401      	adds	r4, #1
    2044:	e7f5      	b.n	2032 <console_write+0x8>
    }
}
    2046:	bd70      	pop	{r4, r5, r6, pc}

00002048 <console_blocking_mode>:

void console_blocking_mode(void) {
    2048:	b508      	push	{r3, lr}
    disable_buffer();
    204a:	f000 f87b 	bl	2144 <disable_buffer>
}
    204e:	bd08      	pop	{r3, pc}

00002050 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    2050:	b40f      	push	{r0, r1, r2, r3}
    2052:	b510      	push	{r4, lr}
    2054:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    2056:	f000 f8cf 	bl	21f8 <console_get_ticks>
    205a:	b160      	cbz	r0, 2076 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    205c:	4b0c      	ldr	r3, [pc, #48]	; (2090 <console_printf+0x40>)
    205e:	681b      	ldr	r3, [r3, #0]
    2060:	b10b      	cbz	r3, 2066 <console_printf+0x16>
    num_chars = 0;
    2062:	2400      	movs	r4, #0
    2064:	e008      	b.n	2078 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    2066:	f7ff fddd 	bl	1c24 <os_time_get>
    206a:	4601      	mov	r1, r0
    206c:	4809      	ldr	r0, [pc, #36]	; (2094 <console_printf+0x44>)
    206e:	f002 fc0f 	bl	4890 <printf>
    2072:	4604      	mov	r4, r0
    2074:	e000      	b.n	2078 <console_printf+0x28>
    num_chars = 0;
    2076:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
    2078:	a905      	add	r1, sp, #20
    207a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    207c:	9804      	ldr	r0, [sp, #16]
    207e:	f002 fc19 	bl	48b4 <vprintf>
    va_end(args);

    return num_chars;
}
    2082:	4420      	add	r0, r4
    2084:	b002      	add	sp, #8
    2086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    208a:	b004      	add	sp, #16
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	200062f0 	.word	0x200062f0
    2094:	00004edc 	.word	0x00004edc

00002098 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
    2098:	4b07      	ldr	r3, [pc, #28]	; (20b8 <__semihost+0x20>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	b143      	cbz	r3, 20b0 <__semihost+0x18>
static int __semihost(int command, void* message) {
    209e:	b410      	push	{r4}
    20a0:	4602      	mov	r2, r0
    20a2:	460c      	mov	r4, r1
    __asm( 
    20a4:	4610      	mov	r0, r2
    20a6:	4621      	mov	r1, r4
    20a8:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
    20aa:	2000      	movs	r0, #0
}
    20ac:	bc10      	pop	{r4}
    20ae:	4770      	bx	lr
    if (!log_enabled) return -1;
    20b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    20b4:	4770      	bx	lr
    20b6:	bf00      	nop
    20b8:	20000148 	.word	0x20000148

000020bc <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    20bc:	4b02      	ldr	r3, [pc, #8]	; (20c8 <debugger_connected+0xc>)
    20be:	6818      	ldr	r0, [r3, #0]
}
    20c0:	f000 0001 	and.w	r0, r0, #1
    20c4:	4770      	bx	lr
    20c6:	bf00      	nop
    20c8:	e000edf0 	.word	0xe000edf0

000020cc <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
    20cc:	b570      	push	{r4, r5, r6, lr}
    20ce:	b084      	sub	sp, #16
    20d0:	4606      	mov	r6, r0
    20d2:	460d      	mov	r5, r1
    20d4:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
    20d6:	f7ff fff1 	bl	20bc <debugger_connected>
    20da:	4603      	mov	r3, r0
    20dc:	b108      	cbz	r0, 20e2 <semihost_write+0x16>
    if (length == 0) { return 0; }
    20de:	b91c      	cbnz	r4, 20e8 <semihost_write+0x1c>
    20e0:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
    20e2:	4618      	mov	r0, r3
    20e4:	b004      	add	sp, #16
    20e6:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
    20e8:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
    20ea:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
    20ec:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
    20ee:	a901      	add	r1, sp, #4
    20f0:	2005      	movs	r0, #5
    20f2:	f7ff ffd1 	bl	2098 <__semihost>
    20f6:	4603      	mov	r3, r0
    20f8:	e7f3      	b.n	20e2 <semihost_write+0x16>
	...

000020fc <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    20fc:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    20fe:	4b0e      	ldr	r3, [pc, #56]	; (2138 <console_flush+0x3c>)
    2100:	781b      	ldrb	r3, [r3, #0]
    2102:	b1bb      	cbz	r3, 2134 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    2104:	4b0d      	ldr	r3, [pc, #52]	; (213c <console_flush+0x40>)
    2106:	681d      	ldr	r5, [r3, #0]
    2108:	b1a5      	cbz	r5, 2134 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    210a:	4b0d      	ldr	r3, [pc, #52]	; (2140 <console_flush+0x44>)
    210c:	685b      	ldr	r3, [r3, #4]
    210e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    2112:	b97b      	cbnz	r3, 2134 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    2114:	4b09      	ldr	r3, [pc, #36]	; (213c <console_flush+0x40>)
    2116:	2200      	movs	r2, #0
    2118:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
    211a:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
    211c:	e005      	b.n	212a <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
    211e:	88e2      	ldrh	r2, [r4, #6]
    2120:	6821      	ldr	r1, [r4, #0]
    2122:	2002      	movs	r0, #2
    2124:	f7ff ffd2 	bl	20cc <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    2128:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
    212a:	2c00      	cmp	r4, #0
    212c:	d1f7      	bne.n	211e <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    212e:	4628      	mov	r0, r5
    2130:	f7ff fdd8 	bl	1ce4 <os_mbuf_free_chain>
}
    2134:	bd38      	pop	{r3, r4, r5, pc}
    2136:	bf00      	nop
    2138:	20000148 	.word	0x20000148
    213c:	20004a88 	.word	0x20004a88
    2140:	e000ed00 	.word	0xe000ed00

00002144 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    2144:	b508      	push	{r3, lr}
    2146:	f7ff ffd9 	bl	20fc <console_flush>
    214a:	bd08      	pop	{r3, pc}

0000214c <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
    214c:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    214e:	4b12      	ldr	r3, [pc, #72]	; (2198 <console_buffer+0x4c>)
    2150:	781b      	ldrb	r3, [r3, #0]
    2152:	b903      	cbnz	r3, 2156 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
    2154:	bd38      	pop	{r3, r4, r5, pc}
    2156:	460d      	mov	r5, r1
    2158:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
    215a:	f7ff ffaf 	bl	20bc <debugger_connected>
    215e:	2800      	cmp	r0, #0
    2160:	d0f8      	beq.n	2154 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
    2162:	4b0e      	ldr	r3, [pc, #56]	; (219c <console_buffer+0x50>)
    2164:	681b      	ldr	r3, [r3, #0]
    2166:	b173      	cbz	r3, 2186 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    2168:	4b0c      	ldr	r3, [pc, #48]	; (219c <console_buffer+0x50>)
    216a:	6818      	ldr	r0, [r3, #0]
    216c:	f7ff fdcc 	bl	1d08 <os_mbuf_len>
    2170:	4428      	add	r0, r5
    2172:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2176:	d2ed      	bcs.n	2154 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    2178:	b2aa      	uxth	r2, r5
    217a:	4621      	mov	r1, r4
    217c:	4b07      	ldr	r3, [pc, #28]	; (219c <console_buffer+0x50>)
    217e:	6818      	ldr	r0, [r3, #0]
    2180:	f7ff fdcc 	bl	1d1c <os_mbuf_append>
    2184:	e7e6      	b.n	2154 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
    2186:	2100      	movs	r1, #0
    2188:	b2a8      	uxth	r0, r5
    218a:	f7ff fd1d 	bl	1bc8 <os_msys_get_pkthdr>
    218e:	4b03      	ldr	r3, [pc, #12]	; (219c <console_buffer+0x50>)
    2190:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    2192:	2800      	cmp	r0, #0
    2194:	d1e8      	bne.n	2168 <console_buffer+0x1c>
    2196:	e7dd      	b.n	2154 <console_buffer+0x8>
    2198:	20000148 	.word	0x20000148
    219c:	20004a88 	.word	0x20004a88

000021a0 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
    21a0:	b500      	push	{lr}
    21a2:	b083      	sub	sp, #12
    21a4:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
    21a8:	280d      	cmp	r0, #13
    21aa:	d004      	beq.n	21b6 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    21ac:	2101      	movs	r1, #1
    21ae:	f10d 0007 	add.w	r0, sp, #7
    21b2:	f7ff ffcb 	bl	214c <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
    21b6:	b003      	add	sp, #12
    21b8:	f85d fb04 	ldr.w	pc, [sp], #4

000021bc <console_out_nolock>:

int console_out_nolock(int character) {
    21bc:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
    21be:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
    21c0:	4b0b      	ldr	r3, [pc, #44]	; (21f0 <console_out_nolock+0x34>)
    21c2:	781b      	ldrb	r3, [r3, #0]
    21c4:	b953      	cbnz	r3, 21dc <console_out_nolock+0x20>
    21c6:	4604      	mov	r4, r0
    if ('\n' == c) {
    21c8:	2d0a      	cmp	r5, #10
    21ca:	d009      	beq.n	21e0 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
    21cc:	4b09      	ldr	r3, [pc, #36]	; (21f4 <console_out_nolock+0x38>)
    21ce:	2201      	movs	r2, #1
    21d0:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
    21d2:	4628      	mov	r0, r5
    21d4:	f7ff ffe4 	bl	21a0 <semihosting_console_write_ch>
    return character;
    21d8:	4620      	mov	r0, r4
}
    21da:	bd38      	pop	{r3, r4, r5, pc}
    21dc:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
    21de:	e7fc      	b.n	21da <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
    21e0:	200d      	movs	r0, #13
    21e2:	f7ff ffdd 	bl	21a0 <semihosting_console_write_ch>
        console_is_midline = 0;
    21e6:	4b03      	ldr	r3, [pc, #12]	; (21f4 <console_out_nolock+0x38>)
    21e8:	2200      	movs	r2, #0
    21ea:	601a      	str	r2, [r3, #0]
    21ec:	e7f1      	b.n	21d2 <console_out_nolock+0x16>
    21ee:	bf00      	nop
    21f0:	200062f5 	.word	0x200062f5
    21f4:	200062f0 	.word	0x200062f0

000021f8 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    21f8:	4b01      	ldr	r3, [pc, #4]	; (2200 <console_get_ticks+0x8>)
    21fa:	7818      	ldrb	r0, [r3, #0]
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop
    2200:	20004a8c 	.word	0x20004a8c

00002204 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
    2204:	b570      	push	{r4, r5, r6, lr}
    2206:	b086      	sub	sp, #24
    2208:	4605      	mov	r5, r0
    220a:	460e      	mov	r6, r1
    220c:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
    220e:	2300      	movs	r3, #0
    2210:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
    2212:	f000 fa15 	bl	2640 <mfg_init>

    mfg_open(&reader);
    2216:	a801      	add	r0, sp, #4
    2218:	f000 fa24 	bl	2664 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
    221c:	6823      	ldr	r3, [r4, #0]
    221e:	42ab      	cmp	r3, r5
    2220:	da29      	bge.n	2276 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    2222:	2102      	movs	r1, #2
    2224:	a801      	add	r0, sp, #4
    2226:	f000 f9f4 	bl	2612 <mfg_seek_next_with_type>
    222a:	4603      	mov	r3, r0
        switch (rc) {
    222c:	f110 0f0f 	cmn.w	r0, #15
    2230:	d003      	beq.n	223a <flash_map_read_mfg+0x36>
    2232:	b120      	cbz	r0, 223e <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
    2234:	4618      	mov	r0, r3
    2236:	b006      	add	sp, #24
    2238:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    223a:	2300      	movs	r3, #0
    223c:	e7fa      	b.n	2234 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    223e:	a903      	add	r1, sp, #12
    2240:	a801      	add	r0, sp, #4
    2242:	f000 f9f3 	bl	262c <mfg_read_tlv_flash_area>
        if (rc != 0) {
    2246:	4603      	mov	r3, r0
    2248:	2800      	cmp	r0, #0
    224a:	d1f3      	bne.n	2234 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
    224c:	6823      	ldr	r3, [r4, #0]
    224e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2252:	009a      	lsls	r2, r3, #2
    2254:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
    2256:	f89d 100c 	ldrb.w	r1, [sp, #12]
    225a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
    225c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    2260:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    2262:	f8dd 200e 	ldr.w	r2, [sp, #14]
    2266:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    2268:	f8dd 2012 	ldr.w	r2, [sp, #18]
    226c:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
    226e:	6823      	ldr	r3, [r4, #0]
    2270:	3301      	adds	r3, #1
    2272:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
    2274:	e7d2      	b.n	221c <flash_map_read_mfg+0x18>
            return -1;
    2276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    227a:	e7db      	b.n	2234 <flash_map_read_mfg+0x30>

0000227c <flash_area_open>:
{
    227c:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
    227e:	4b0d      	ldr	r3, [pc, #52]	; (22b4 <flash_area_open+0x38>)
    2280:	681d      	ldr	r5, [r3, #0]
    2282:	b1a5      	cbz	r5, 22ae <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
    2284:	2300      	movs	r3, #0
    2286:	4a0c      	ldr	r2, [pc, #48]	; (22b8 <flash_area_open+0x3c>)
    2288:	6812      	ldr	r2, [r2, #0]
    228a:	429a      	cmp	r2, r3
    228c:	dd0b      	ble.n	22a6 <flash_area_open+0x2a>
        area = flash_map + i;
    228e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    2292:	00a2      	lsls	r2, r4, #2
    2294:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
    2296:	5caa      	ldrb	r2, [r5, r2]
    2298:	4282      	cmp	r2, r0
    229a:	d001      	beq.n	22a0 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
    229c:	3301      	adds	r3, #1
    229e:	e7f2      	b.n	2286 <flash_area_open+0xa>
            *fap = area;
    22a0:	600c      	str	r4, [r1, #0]
            return 0;
    22a2:	2000      	movs	r0, #0
    22a4:	e001      	b.n	22aa <flash_area_open+0x2e>
    return SYS_ENOENT;
    22a6:	f06f 0003 	mvn.w	r0, #3
}
    22aa:	bc30      	pop	{r4, r5}
    22ac:	4770      	bx	lr
        return SYS_EACCES;
    22ae:	f06f 0006 	mvn.w	r0, #6
    22b2:	e7fa      	b.n	22aa <flash_area_open+0x2e>
    22b4:	200062f8 	.word	0x200062f8
    22b8:	200062fc 	.word	0x200062fc

000022bc <flash_area_to_sectors>:
{
    22bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22c0:	b084      	sub	sp, #16
    22c2:	460f      	mov	r7, r1
    22c4:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    22c6:	fa5f f980 	uxtb.w	r9, r0
    22ca:	a903      	add	r1, sp, #12
    22cc:	4648      	mov	r0, r9
    22ce:	f7ff ffd5 	bl	227c <flash_area_open>
    if (rc != 0) {
    22d2:	4680      	mov	r8, r0
    22d4:	b118      	cbz	r0, 22de <flash_area_to_sectors+0x22>
}
    22d6:	4640      	mov	r0, r8
    22d8:	b004      	add	sp, #16
    22da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    22de:	2300      	movs	r3, #0
    22e0:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    22e2:	9b03      	ldr	r3, [sp, #12]
    22e4:	7858      	ldrb	r0, [r3, #1]
    22e6:	f7fe fb47 	bl	978 <hal_bsp_flash_dev>
    22ea:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    22ec:	4644      	mov	r4, r8
    22ee:	e003      	b.n	22f8 <flash_area_to_sectors+0x3c>
            (*cnt)++;
    22f0:	683b      	ldr	r3, [r7, #0]
    22f2:	3301      	adds	r3, #1
    22f4:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    22f6:	3401      	adds	r4, #1
    22f8:	68eb      	ldr	r3, [r5, #12]
    22fa:	42a3      	cmp	r3, r4
    22fc:	ddeb      	ble.n	22d6 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    22fe:	682b      	ldr	r3, [r5, #0]
    2300:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    2304:	ab01      	add	r3, sp, #4
    2306:	aa02      	add	r2, sp, #8
    2308:	4621      	mov	r1, r4
    230a:	4628      	mov	r0, r5
    230c:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    230e:	9903      	ldr	r1, [sp, #12]
    2310:	684b      	ldr	r3, [r1, #4]
    2312:	9a02      	ldr	r2, [sp, #8]
    2314:	4293      	cmp	r3, r2
    2316:	d8ee      	bhi.n	22f6 <flash_area_to_sectors+0x3a>
    2318:	6889      	ldr	r1, [r1, #8]
    231a:	440b      	add	r3, r1
    231c:	429a      	cmp	r2, r3
    231e:	d2ea      	bcs.n	22f6 <flash_area_to_sectors+0x3a>
            if (ret) {
    2320:	2e00      	cmp	r6, #0
    2322:	d0e5      	beq.n	22f0 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    2324:	f886 9000 	strb.w	r9, [r6]
                ret->fa_device_id = fa->fa_device_id;
    2328:	9b03      	ldr	r3, [sp, #12]
    232a:	785b      	ldrb	r3, [r3, #1]
    232c:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    232e:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    2330:	9b01      	ldr	r3, [sp, #4]
    2332:	60b3      	str	r3, [r6, #8]
                ret++;
    2334:	360c      	adds	r6, #12
    2336:	e7db      	b.n	22f0 <flash_area_to_sectors+0x34>

00002338 <flash_area_read>:
{
    2338:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    233a:	6884      	ldr	r4, [r0, #8]
    233c:	428c      	cmp	r4, r1
    233e:	d308      	bcc.n	2352 <flash_area_read+0x1a>
    2340:	18cd      	adds	r5, r1, r3
    2342:	42ac      	cmp	r4, r5
    2344:	d308      	bcc.n	2358 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    2346:	6844      	ldr	r4, [r0, #4]
    2348:	4421      	add	r1, r4
    234a:	7840      	ldrb	r0, [r0, #1]
    234c:	f001 fedf 	bl	410e <hal_flash_read>
}
    2350:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    2352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2356:	e7fb      	b.n	2350 <flash_area_read+0x18>
    2358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    235c:	e7f8      	b.n	2350 <flash_area_read+0x18>

0000235e <flash_area_write>:
{
    235e:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    2360:	6884      	ldr	r4, [r0, #8]
    2362:	428c      	cmp	r4, r1
    2364:	d308      	bcc.n	2378 <flash_area_write+0x1a>
    2366:	18cd      	adds	r5, r1, r3
    2368:	42ac      	cmp	r4, r5
    236a:	d308      	bcc.n	237e <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    236c:	6844      	ldr	r4, [r0, #4]
    236e:	4421      	add	r1, r4
    2370:	7840      	ldrb	r0, [r0, #1]
    2372:	f001 fef7 	bl	4164 <hal_flash_write>
}
    2376:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    2378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    237c:	e7fb      	b.n	2376 <flash_area_write+0x18>
    237e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2382:	e7f8      	b.n	2376 <flash_area_write+0x18>

00002384 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    2384:	6883      	ldr	r3, [r0, #8]
    2386:	428b      	cmp	r3, r1
    2388:	d309      	bcc.n	239e <flash_area_erase+0x1a>
{
    238a:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    238c:	188c      	adds	r4, r1, r2
    238e:	42a3      	cmp	r3, r4
    2390:	d308      	bcc.n	23a4 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    2392:	6843      	ldr	r3, [r0, #4]
    2394:	4419      	add	r1, r3
    2396:	7840      	ldrb	r0, [r0, #1]
    2398:	f001 ff1e 	bl	41d8 <hal_flash_erase>
}
    239c:	bd10      	pop	{r4, pc}
        return -1;
    239e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    23a2:	4770      	bx	lr
        return -1;
    23a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    23a8:	e7f8      	b.n	239c <flash_area_erase+0x18>

000023aa <flash_area_align>:
{
    23aa:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    23ac:	7840      	ldrb	r0, [r0, #1]
    23ae:	f001 fe9e 	bl	40ee <hal_flash_align>
}
    23b2:	bd08      	pop	{r3, pc}

000023b4 <flash_area_erased_val>:
{
    23b4:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    23b6:	7840      	ldrb	r0, [r0, #1]
    23b8:	f001 fea1 	bl	40fe <hal_flash_erased_val>
}
    23bc:	bd08      	pop	{r3, pc}

000023be <flash_area_read_is_empty>:
{
    23be:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    23c0:	6844      	ldr	r4, [r0, #4]
    23c2:	4421      	add	r1, r4
    23c4:	7840      	ldrb	r0, [r0, #1]
    23c6:	f001 ff87 	bl	42d8 <hal_flash_isempty>
}
    23ca:	bd10      	pop	{r4, pc}

000023cc <flash_map_init>:

void
flash_map_init(void)
{
    23cc:	b510      	push	{r4, lr}
    23ce:	b084      	sub	sp, #16
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    23d0:	f001 fe79 	bl	40c6 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    23d4:	b138      	cbz	r0, 23e6 <flash_map_init+0x1a>
    23d6:	2000      	movs	r0, #0
    23d8:	9000      	str	r0, [sp, #0]
    23da:	4b0e      	ldr	r3, [pc, #56]	; (2414 <flash_map_init+0x48>)
    23dc:	681c      	ldr	r4, [r3, #0]
    23de:	4603      	mov	r3, r0
    23e0:	4602      	mov	r2, r0
    23e2:	4601      	mov	r1, r0
    23e4:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    23e6:	4b0c      	ldr	r3, [pc, #48]	; (2418 <flash_map_init+0x4c>)
    23e8:	4a0c      	ldr	r2, [pc, #48]	; (241c <flash_map_init+0x50>)
    23ea:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    23ec:	4b0c      	ldr	r3, [pc, #48]	; (2420 <flash_map_init+0x54>)
    23ee:	2206      	movs	r2, #6
    23f0:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
    23f2:	aa03      	add	r2, sp, #12
    23f4:	490b      	ldr	r1, [pc, #44]	; (2424 <flash_map_init+0x58>)
    23f6:	200a      	movs	r0, #10
    23f8:	f7ff ff04 	bl	2204 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
    23fc:	b938      	cbnz	r0, 240e <flash_map_init+0x42>
    23fe:	9b03      	ldr	r3, [sp, #12]
    2400:	2b00      	cmp	r3, #0
    2402:	dd04      	ble.n	240e <flash_map_init+0x42>
        flash_map = mfg_areas;
    2404:	4a04      	ldr	r2, [pc, #16]	; (2418 <flash_map_init+0x4c>)
    2406:	4907      	ldr	r1, [pc, #28]	; (2424 <flash_map_init+0x58>)
    2408:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
    240a:	4a05      	ldr	r2, [pc, #20]	; (2420 <flash_map_init+0x54>)
    240c:	6013      	str	r3, [r2, #0]
    }
}
    240e:	b004      	add	sp, #16
    2410:	bd10      	pop	{r4, pc}
    2412:	bf00      	nop
    2414:	2000014c 	.word	0x2000014c
    2418:	200062f8 	.word	0x200062f8
    241c:	00004ee4 	.word	0x00004ee4
    2420:	200062fc 	.word	0x200062fc
    2424:	20004a90 	.word	0x20004a90

00002428 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    2428:	b530      	push	{r4, r5, lr}
    242a:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    242c:	7885      	ldrb	r5, [r0, #2]
    242e:	4b21      	ldr	r3, [pc, #132]	; (24b4 <mfg_seek_next_aux+0x8c>)
    2430:	681b      	ldr	r3, [r3, #0]
    2432:	429d      	cmp	r5, r3
    2434:	da32      	bge.n	249c <mfg_seek_next_aux+0x74>
    2436:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    2438:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    243c:	0093      	lsls	r3, r2, #2
    243e:	a901      	add	r1, sp, #4
    2440:	4a1d      	ldr	r2, [pc, #116]	; (24b8 <mfg_seek_next_aux+0x90>)
    2442:	5cd0      	ldrb	r0, [r2, r3]
    2444:	f7ff ff1a 	bl	227c <flash_area_open>
    if (rc != 0) {
    2448:	bb58      	cbnz	r0, 24a2 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    244a:	6862      	ldr	r2, [r4, #4]
    244c:	b9c2      	cbnz	r2, 2480 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    244e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2452:	00aa      	lsls	r2, r5, #2
    2454:	4b18      	ldr	r3, [pc, #96]	; (24b8 <mfg_seek_next_aux+0x90>)
    2456:	4413      	add	r3, r2
    2458:	685b      	ldr	r3, [r3, #4]
    245a:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    245c:	6861      	ldr	r1, [r4, #4]
    245e:	9801      	ldr	r0, [sp, #4]
    2460:	6883      	ldr	r3, [r0, #8]
    2462:	3b08      	subs	r3, #8
    2464:	4299      	cmp	r1, r3
    2466:	d310      	bcc.n	248a <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    2468:	78a3      	ldrb	r3, [r4, #2]
    246a:	1c59      	adds	r1, r3, #1
    246c:	4a11      	ldr	r2, [pc, #68]	; (24b4 <mfg_seek_next_aux+0x8c>)
    246e:	6812      	ldr	r2, [r2, #0]
    2470:	4291      	cmp	r1, r2
    2472:	da19      	bge.n	24a8 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    2474:	2200      	movs	r2, #0
    2476:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    2478:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    247a:	f06f 0305 	mvn.w	r3, #5
    247e:	e015      	b.n	24ac <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    2480:	7863      	ldrb	r3, [r4, #1]
    2482:	4413      	add	r3, r2
    2484:	3302      	adds	r3, #2
    2486:	6063      	str	r3, [r4, #4]
    2488:	e7e8      	b.n	245c <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    248a:	2302      	movs	r3, #2
    248c:	4622      	mov	r2, r4
    248e:	f7ff ff53 	bl	2338 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    2492:	4603      	mov	r3, r0
    2494:	b150      	cbz	r0, 24ac <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    2496:	f06f 0304 	mvn.w	r3, #4
    249a:	e007      	b.n	24ac <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    249c:	f06f 0301 	mvn.w	r3, #1
    24a0:	e004      	b.n	24ac <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    24a2:	f06f 0304 	mvn.w	r3, #4
    24a6:	e001      	b.n	24ac <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    24a8:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    24ac:	4618      	mov	r0, r3
    24ae:	b003      	add	sp, #12
    24b0:	bd30      	pop	{r4, r5, pc}
    24b2:	bf00      	nop
    24b4:	20004b24 	.word	0x20004b24
    24b8:	20004b0c 	.word	0x20004b0c

000024bc <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    24bc:	b530      	push	{r4, r5, lr}
    24be:	b085      	sub	sp, #20
    24c0:	4605      	mov	r5, r0
    24c2:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    24c4:	a903      	add	r1, sp, #12
    24c6:	f7ff fed9 	bl	227c <flash_area_open>
    if (rc != 0) {
    24ca:	b9e8      	cbnz	r0, 2508 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    24cc:	9803      	ldr	r0, [sp, #12]
    24ce:	6881      	ldr	r1, [r0, #8]
    24d0:	2308      	movs	r3, #8
    24d2:	aa01      	add	r2, sp, #4
    24d4:	3908      	subs	r1, #8
    24d6:	f7ff ff2f 	bl	2338 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    24da:	4601      	mov	r1, r0
    24dc:	b9b8      	cbnz	r0, 250e <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    24de:	9a02      	ldr	r2, [sp, #8]
    24e0:	4b11      	ldr	r3, [pc, #68]	; (2528 <mfg_read_mmr+0x6c>)
    24e2:	429a      	cmp	r2, r3
    24e4:	d116      	bne.n	2514 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    24e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    24ea:	2b02      	cmp	r3, #2
    24ec:	d115      	bne.n	251a <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    24ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    24f2:	9b03      	ldr	r3, [sp, #12]
    24f4:	689b      	ldr	r3, [r3, #8]
    24f6:	429a      	cmp	r2, r3
    24f8:	d812      	bhi.n	2520 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    24fa:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    24fc:	7025      	strb	r5, [r4, #0]
    24fe:	6063      	str	r3, [r4, #4]
    2500:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    2502:	4608      	mov	r0, r1
    2504:	b005      	add	sp, #20
    2506:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    2508:	f06f 0104 	mvn.w	r1, #4
    250c:	e7f9      	b.n	2502 <mfg_read_mmr+0x46>
        return SYS_EIO;
    250e:	f06f 0104 	mvn.w	r1, #4
    2512:	e7f6      	b.n	2502 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    2514:	f06f 0108 	mvn.w	r1, #8
    2518:	e7f3      	b.n	2502 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    251a:	f06f 010b 	mvn.w	r1, #11
    251e:	e7f0      	b.n	2502 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    2520:	f06f 0108 	mvn.w	r1, #8
    2524:	e7ed      	b.n	2502 <mfg_read_mmr+0x46>
    2526:	bf00      	nop
    2528:	3bb2a269 	.word	0x3bb2a269

0000252c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    252c:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    252e:	2300      	movs	r3, #0
    2530:	4a11      	ldr	r2, [pc, #68]	; (2578 <mfg_read_next_mmr+0x4c>)
    2532:	6812      	ldr	r2, [r2, #0]
    2534:	429a      	cmp	r2, r3
    2536:	dd08      	ble.n	254a <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    2538:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    253c:	008a      	lsls	r2, r1, #2
    253e:	490f      	ldr	r1, [pc, #60]	; (257c <mfg_read_next_mmr+0x50>)
    2540:	5c8a      	ldrb	r2, [r1, r2]
    2542:	4282      	cmp	r2, r0
    2544:	d011      	beq.n	256a <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    2546:	3301      	adds	r3, #1
    2548:	e7f2      	b.n	2530 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    254a:	2a01      	cmp	r2, #1
    254c:	dc11      	bgt.n	2572 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    254e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2552:	0093      	lsls	r3, r2, #2
    2554:	4909      	ldr	r1, [pc, #36]	; (257c <mfg_read_next_mmr+0x50>)
    2556:	4419      	add	r1, r3
    2558:	f7ff ffb0 	bl	24bc <mfg_read_mmr>
    if (rc != 0) {
    255c:	4603      	mov	r3, r0
    255e:	b930      	cbnz	r0, 256e <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    2560:	4905      	ldr	r1, [pc, #20]	; (2578 <mfg_read_next_mmr+0x4c>)
    2562:	680a      	ldr	r2, [r1, #0]
    2564:	3201      	adds	r2, #1
    2566:	600a      	str	r2, [r1, #0]
    return 0;
    2568:	e001      	b.n	256e <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    256a:	f06f 030a 	mvn.w	r3, #10
}
    256e:	4618      	mov	r0, r3
    2570:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    2572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2576:	e7fa      	b.n	256e <mfg_read_next_mmr+0x42>
    2578:	20004b24 	.word	0x20004b24
    257c:	20004b0c 	.word	0x20004b0c

00002580 <mfg_open_flash_area>:
{
    2580:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    2582:	7883      	ldrb	r3, [r0, #2]
    2584:	4a0b      	ldr	r2, [pc, #44]	; (25b4 <mfg_open_flash_area+0x34>)
    2586:	6812      	ldr	r2, [r2, #0]
    2588:	4293      	cmp	r3, r2
    258a:	da0a      	bge.n	25a2 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    258c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2590:	009a      	lsls	r2, r3, #2
    2592:	4b09      	ldr	r3, [pc, #36]	; (25b8 <mfg_open_flash_area+0x38>)
    2594:	5c98      	ldrb	r0, [r3, r2]
    2596:	f7ff fe71 	bl	227c <flash_area_open>
    if (rc != 0) {
    259a:	4603      	mov	r3, r0
    259c:	b938      	cbnz	r0, 25ae <mfg_open_flash_area+0x2e>
}
    259e:	4618      	mov	r0, r3
    25a0:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    25a2:	2300      	movs	r3, #0
    25a4:	461a      	mov	r2, r3
    25a6:	4619      	mov	r1, r3
    25a8:	4618      	mov	r0, r3
    25aa:	f7ff fa13 	bl	19d4 <__assert_func>
        return SYS_EIO;
    25ae:	f06f 0304 	mvn.w	r3, #4
    25b2:	e7f4      	b.n	259e <mfg_open_flash_area+0x1e>
    25b4:	20004b24 	.word	0x20004b24
    25b8:	20004b0c 	.word	0x20004b0c

000025bc <mfg_read_tlv_body>:
{
    25bc:	b570      	push	{r4, r5, r6, lr}
    25be:	b082      	sub	sp, #8
    25c0:	4606      	mov	r6, r0
    25c2:	460c      	mov	r4, r1
    25c4:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    25c6:	a901      	add	r1, sp, #4
    25c8:	f7ff ffda 	bl	2580 <mfg_open_flash_area>
    if (rc != 0) {
    25cc:	4603      	mov	r3, r0
    25ce:	b110      	cbz	r0, 25d6 <mfg_read_tlv_body+0x1a>
}
    25d0:	4618      	mov	r0, r3
    25d2:	b002      	add	sp, #8
    25d4:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    25d6:	462a      	mov	r2, r5
    25d8:	2100      	movs	r1, #0
    25da:	4620      	mov	r0, r4
    25dc:	f7ff fd09 	bl	1ff2 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    25e0:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    25e2:	6871      	ldr	r1, [r6, #4]
    25e4:	42ab      	cmp	r3, r5
    25e6:	bfa8      	it	ge
    25e8:	462b      	movge	r3, r5
    25ea:	4622      	mov	r2, r4
    25ec:	3102      	adds	r1, #2
    25ee:	9801      	ldr	r0, [sp, #4]
    25f0:	f7ff fea2 	bl	2338 <flash_area_read>
    if (rc != 0) {
    25f4:	4603      	mov	r3, r0
    25f6:	2800      	cmp	r0, #0
    25f8:	d0ea      	beq.n	25d0 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    25fa:	f06f 0304 	mvn.w	r3, #4
    25fe:	e7e7      	b.n	25d0 <mfg_read_tlv_body+0x14>

00002600 <mfg_seek_next>:
{
    2600:	b510      	push	{r4, lr}
    2602:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    2604:	4620      	mov	r0, r4
    2606:	f7ff ff0f 	bl	2428 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    260a:	f110 0f06 	cmn.w	r0, #6
    260e:	d0f9      	beq.n	2604 <mfg_seek_next+0x4>
}
    2610:	bd10      	pop	{r4, pc}

00002612 <mfg_seek_next_with_type>:
{
    2612:	b538      	push	{r3, r4, r5, lr}
    2614:	4604      	mov	r4, r0
    2616:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    2618:	4620      	mov	r0, r4
    261a:	f7ff fff1 	bl	2600 <mfg_seek_next>
        if (rc != 0) {
    261e:	4602      	mov	r2, r0
    2620:	b910      	cbnz	r0, 2628 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    2622:	7823      	ldrb	r3, [r4, #0]
    2624:	42ab      	cmp	r3, r5
    2626:	d1f7      	bne.n	2618 <mfg_seek_next_with_type+0x6>
}
    2628:	4610      	mov	r0, r2
    262a:	bd38      	pop	{r3, r4, r5, pc}

0000262c <mfg_read_tlv_flash_area>:
{
    262c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    262e:	220a      	movs	r2, #10
    2630:	f7ff ffc4 	bl	25bc <mfg_read_tlv_body>
}
    2634:	bd08      	pop	{r3, pc}

00002636 <mfg_read_tlv_mmr_ref>:
{
    2636:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    2638:	2201      	movs	r2, #1
    263a:	f7ff ffbf 	bl	25bc <mfg_read_tlv_body>
}
    263e:	bd08      	pop	{r3, pc}

00002640 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    2640:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    2642:	4b07      	ldr	r3, [pc, #28]	; (2660 <mfg_init+0x20>)
    2644:	781b      	ldrb	r3, [r3, #0]
    2646:	b103      	cbz	r3, 264a <mfg_init+0xa>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
    2648:	bd08      	pop	{r3, pc}
    mfg_initialized = true;
    264a:	4b05      	ldr	r3, [pc, #20]	; (2660 <mfg_init+0x20>)
    264c:	2201      	movs	r2, #1
    264e:	701a      	strb	r2, [r3, #0]
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    2650:	2000      	movs	r0, #0
    2652:	f7ff ff6b 	bl	252c <mfg_read_next_mmr>
    if (rc != 0) {
    2656:	2800      	cmp	r0, #0
    2658:	d1f6      	bne.n	2648 <mfg_init+0x8>
    rc = mfg_read_mmr_refs();
    265a:	f000 f80b 	bl	2674 <mfg_read_mmr_refs>
err:
    265e:	e7f3      	b.n	2648 <mfg_init+0x8>
    2660:	20004b08 	.word	0x20004b08

00002664 <mfg_open>:
{
    2664:	b510      	push	{r4, lr}
    2666:	4604      	mov	r4, r0
    mfg_init();
    2668:	f7ff ffea 	bl	2640 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    266c:	2300      	movs	r3, #0
    266e:	6023      	str	r3, [r4, #0]
    2670:	6063      	str	r3, [r4, #4]
}
    2672:	bd10      	pop	{r4, pc}

00002674 <mfg_read_mmr_refs>:
{
    2674:	b500      	push	{lr}
    2676:	b085      	sub	sp, #20
    mfg_open(&reader);
    2678:	a801      	add	r0, sp, #4
    267a:	f7ff fff3 	bl	2664 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    267e:	2104      	movs	r1, #4
    2680:	eb0d 0001 	add.w	r0, sp, r1
    2684:	f7ff ffc5 	bl	2612 <mfg_seek_next_with_type>
    2688:	4603      	mov	r3, r0
        switch (rc) {
    268a:	f110 0f0f 	cmn.w	r0, #15
    268e:	d004      	beq.n	269a <mfg_read_mmr_refs+0x26>
    2690:	b128      	cbz	r0, 269e <mfg_read_mmr_refs+0x2a>
}
    2692:	4618      	mov	r0, r3
    2694:	b005      	add	sp, #20
    2696:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    269a:	2300      	movs	r3, #0
    269c:	e7f9      	b.n	2692 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    269e:	a903      	add	r1, sp, #12
    26a0:	a801      	add	r0, sp, #4
    26a2:	f7ff ffc8 	bl	2636 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    26a6:	4603      	mov	r3, r0
    26a8:	2800      	cmp	r0, #0
    26aa:	d1f2      	bne.n	2692 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    26ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
    26b0:	f7ff ff3c 	bl	252c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    26b4:	4603      	mov	r3, r0
    26b6:	2800      	cmp	r0, #0
    26b8:	d0e1      	beq.n	267e <mfg_read_mmr_refs+0xa>
    26ba:	f110 0f0b 	cmn.w	r0, #11
    26be:	d0de      	beq.n	267e <mfg_read_mmr_refs+0xa>
    26c0:	e7e7      	b.n	2692 <mfg_read_mmr_refs+0x1e>

000026c2 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    26c2:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    26c4:	f7ff f986 	bl	19d4 <__assert_func>

000026c8 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	b082      	sub	sp, #8
    26cc:	460c      	mov	r4, r1
    26ce:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    26d0:	b29d      	uxth	r5, r3
    26d2:	9b07      	ldr	r3, [sp, #28]
    26d4:	9300      	str	r3, [sp, #0]
    26d6:	4603      	mov	r3, r0
    26d8:	9a06      	ldr	r2, [sp, #24]
    26da:	4629      	mov	r1, r5
    26dc:	4620      	mov	r0, r4
    26de:	f7ff fbad 	bl	1e3c <os_mempool_init>
    if (rc != 0) {
    26e2:	b108      	cbz	r0, 26e8 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    26e4:	b002      	add	sp, #8
    26e6:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    26e8:	462b      	mov	r3, r5
    26ea:	9a06      	ldr	r2, [sp, #24]
    26ec:	b292      	uxth	r2, r2
    26ee:	4621      	mov	r1, r4
    26f0:	4630      	mov	r0, r6
    26f2:	f7ff fab4 	bl	1c5e <os_mbuf_pool_init>
    26f6:	e7f5      	b.n	26e4 <mem_init_mbuf_pool+0x1c>

000026f8 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    26f8:	6802      	ldr	r2, [r0, #0]
    26fa:	4b0e      	ldr	r3, [pc, #56]	; (2734 <boot_is_header_valid+0x3c>)
    26fc:	429a      	cmp	r2, r3
    26fe:	d001      	beq.n	2704 <boot_is_header_valid+0xc>
        return false;
    2700:	2000      	movs	r0, #0
    2702:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2704:	68c2      	ldr	r2, [r0, #12]
    2706:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    2708:	43d8      	mvns	r0, r3
    270a:	4282      	cmp	r2, r0
    270c:	d80a      	bhi.n	2724 <boot_is_header_valid+0x2c>
{
    270e:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    2710:	18d4      	adds	r4, r2, r3
        return true;
    2712:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2714:	b110      	cbz	r0, 271c <boot_is_header_valid+0x24>
        return false;
    }

    if (size >= fap->fa_size) {
    2716:	688b      	ldr	r3, [r1, #8]
    2718:	42a3      	cmp	r3, r4
    271a:	d901      	bls.n	2720 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    271c:	bc10      	pop	{r4}
    271e:	4770      	bx	lr
        return false;
    2720:	2000      	movs	r0, #0
    2722:	e7fb      	b.n	271c <boot_is_header_valid+0x24>
        return false;
    2724:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2726:	b110      	cbz	r0, 272e <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    2728:	688b      	ldr	r3, [r1, #8]
    272a:	42a3      	cmp	r3, r4
    272c:	d900      	bls.n	2730 <boot_is_header_valid+0x38>
}
    272e:	4770      	bx	lr
        return false;
    2730:	2000      	movs	r0, #0
    2732:	e7fc      	b.n	272e <boot_is_header_valid+0x36>
    2734:	96f3b83d 	.word	0x96f3b83d

00002738 <boot_write_sz>:
{
    2738:	b538      	push	{r3, r4, r5, lr}
    273a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    273c:	6a00      	ldr	r0, [r0, #32]
    273e:	f7ff fe34 	bl	23aa <flash_area_align>
    2742:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    2744:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2746:	f7ff fe30 	bl	23aa <flash_area_align>
    if (align > elem_sz) {
    274a:	4285      	cmp	r5, r0
    274c:	d200      	bcs.n	2750 <boot_write_sz+0x18>
}
    274e:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    2750:	4628      	mov	r0, r5
    return elem_sz;
    2752:	e7fc      	b.n	274e <boot_write_sz+0x16>

00002754 <boot_read_image_size>:
{
    2754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2758:	b082      	sub	sp, #8
    275a:	4680      	mov	r8, r0
    275c:	460d      	mov	r5, r1
    275e:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2760:	2000      	movs	r0, #0
    2762:	f001 faca 	bl	3cfa <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2766:	a901      	add	r1, sp, #4
    2768:	b2c0      	uxtb	r0, r0
    276a:	f7ff fd87 	bl	227c <flash_area_open>
    if (rc != 0) {
    276e:	b120      	cbz	r0, 277a <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    2770:	2401      	movs	r4, #1
}
    2772:	4620      	mov	r0, r4
    2774:	b002      	add	sp, #8
    2776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    277a:	232c      	movs	r3, #44	; 0x2c
    277c:	fb03 8305 	mla	r3, r3, r5, r8
    2780:	891e      	ldrh	r6, [r3, #8]
    2782:	68db      	ldr	r3, [r3, #12]
    2784:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    2786:	2304      	movs	r3, #4
    2788:	466a      	mov	r2, sp
    278a:	4631      	mov	r1, r6
    278c:	9801      	ldr	r0, [sp, #4]
    278e:	f7ff fdd3 	bl	2338 <flash_area_read>
    2792:	4604      	mov	r4, r0
    2794:	bb30      	cbnz	r0, 27e4 <boot_read_image_size+0x90>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    2796:	232c      	movs	r3, #44	; 0x2c
    2798:	fb03 8505 	mla	r5, r3, r5, r8
    279c:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    279e:	f8bd 2000 	ldrh.w	r2, [sp]
    27a2:	f646 1308 	movw	r3, #26888	; 0x6908
    27a6:	429a      	cmp	r2, r3
    27a8:	d00c      	beq.n	27c4 <boot_read_image_size+0x70>
    } else if (protect_tlv_size != 0) {
    27aa:	b9ed      	cbnz	r5, 27e8 <boot_read_image_size+0x94>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    27ac:	f8bd 2000 	ldrh.w	r2, [sp]
    27b0:	f646 1307 	movw	r3, #26887	; 0x6907
    27b4:	429a      	cmp	r2, r3
    27b6:	d119      	bne.n	27ec <boot_read_image_size+0x98>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    27b8:	442e      	add	r6, r5
    27ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    27be:	441e      	add	r6, r3
    27c0:	603e      	str	r6, [r7, #0]
    27c2:	e7d6      	b.n	2772 <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    27c4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    27c8:	428d      	cmp	r5, r1
    27ca:	d001      	beq.n	27d0 <boot_read_image_size+0x7c>
            rc = BOOT_EBADIMAGE;
    27cc:	2403      	movs	r4, #3
    27ce:	e7d0      	b.n	2772 <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    27d0:	2304      	movs	r3, #4
    27d2:	466a      	mov	r2, sp
    27d4:	4431      	add	r1, r6
    27d6:	9801      	ldr	r0, [sp, #4]
    27d8:	f7ff fdae 	bl	2338 <flash_area_read>
    27dc:	2800      	cmp	r0, #0
    27de:	d0e5      	beq.n	27ac <boot_read_image_size+0x58>
            rc = BOOT_EFLASH;
    27e0:	2401      	movs	r4, #1
    27e2:	e7c6      	b.n	2772 <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    27e4:	2401      	movs	r4, #1
    27e6:	e7c4      	b.n	2772 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    27e8:	2403      	movs	r4, #3
    27ea:	e7c2      	b.n	2772 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    27ec:	2403      	movs	r4, #3
    return rc;
    27ee:	e7c0      	b.n	2772 <boot_read_image_size+0x1e>

000027f0 <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    27f0:	b570      	push	{r4, r5, r6, lr}
    27f2:	b082      	sub	sp, #8
    27f4:	4606      	mov	r6, r0
    27f6:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    27f8:	2000      	movs	r0, #0
    27fa:	f001 fa7e 	bl	3cfa <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    27fe:	a901      	add	r1, sp, #4
    2800:	b2c0      	uxtb	r0, r0
    2802:	f7ff fd3b 	bl	227c <flash_area_open>
    if (rc != 0) {
    2806:	b9d0      	cbnz	r0, 283e <boot_check_header_erased+0x4e>
    2808:	4605      	mov	r5, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    280a:	9801      	ldr	r0, [sp, #4]
    280c:	f7ff fdd2 	bl	23b4 <flash_area_erased_val>
    2810:	b2c0      	uxtb	r0, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2812:	212c      	movs	r1, #44	; 0x2c
    2814:	fb01 6104 	mla	r1, r1, r4, r6
    for (i = 0; i < len; i++) {
    2818:	2300      	movs	r3, #0
    281a:	2b03      	cmp	r3, #3
    281c:	d805      	bhi.n	282a <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    281e:	5cca      	ldrb	r2, [r1, r3]
    2820:	4290      	cmp	r0, r2
    2822:	d107      	bne.n	2834 <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    2824:	3301      	adds	r3, #1
    2826:	b2db      	uxtb	r3, r3
    2828:	e7f7      	b.n	281a <boot_check_header_erased+0x2a>
    return true;
    282a:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    282c:	b123      	cbz	r3, 2838 <boot_check_header_erased+0x48>
        return -1;
    }

    return 0;
}
    282e:	4628      	mov	r0, r5
    2830:	b002      	add	sp, #8
    2832:	bd70      	pop	{r4, r5, r6, pc}
            return false;
    2834:	2300      	movs	r3, #0
    2836:	e7f9      	b.n	282c <boot_check_header_erased+0x3c>
        return -1;
    2838:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    283c:	e7f7      	b.n	282e <boot_check_header_erased+0x3e>
        return -1;
    283e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2842:	e7f4      	b.n	282e <boot_check_header_erased+0x3e>

00002844 <boot_initialize_area>:
{
    2844:	b510      	push	{r4, lr}
    2846:	b082      	sub	sp, #8
    2848:	4604      	mov	r4, r0
    284a:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    284c:	2380      	movs	r3, #128	; 0x80
    284e:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    2850:	2901      	cmp	r1, #1
    2852:	d006      	beq.n	2862 <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    2854:	2902      	cmp	r1, #2
    2856:	d00b      	beq.n	2870 <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    2858:	2903      	cmp	r1, #3
    285a:	d010      	beq.n	287e <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    285c:	2001      	movs	r0, #1
}
    285e:	b002      	add	sp, #8
    2860:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2862:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2864:	a901      	add	r1, sp, #4
    2866:	f7ff fd29 	bl	22bc <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    286a:	9b01      	ldr	r3, [sp, #4]
    286c:	62a3      	str	r3, [r4, #40]	; 0x28
    286e:	e7f6      	b.n	285e <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2870:	6d22      	ldr	r2, [r4, #80]	; 0x50
    2872:	a901      	add	r1, sp, #4
    2874:	f7ff fd22 	bl	22bc <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    2878:	9b01      	ldr	r3, [sp, #4]
    287a:	6563      	str	r3, [r4, #84]	; 0x54
    287c:	e7ef      	b.n	285e <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    287e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    2880:	a901      	add	r1, sp, #4
    2882:	f7ff fd1b 	bl	22bc <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    2886:	9b01      	ldr	r3, [sp, #4]
    2888:	6623      	str	r3, [r4, #96]	; 0x60
    288a:	e7e8      	b.n	285e <boot_initialize_area+0x1a>

0000288c <boot_read_sectors>:
{
    288c:	b538      	push	{r3, r4, r5, lr}
    288e:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    2890:	2101      	movs	r1, #1
    2892:	f7ff ffd7 	bl	2844 <boot_initialize_area>
    if (rc != 0) {
    2896:	b110      	cbz	r0, 289e <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    2898:	2401      	movs	r4, #1
}
    289a:	4620      	mov	r0, r4
    289c:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    289e:	2102      	movs	r1, #2
    28a0:	4628      	mov	r0, r5
    28a2:	f7ff ffcf 	bl	2844 <boot_initialize_area>
    if (rc != 0) {
    28a6:	b108      	cbz	r0, 28ac <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    28a8:	2401      	movs	r4, #1
    28aa:	e7f6      	b.n	289a <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    28ac:	2103      	movs	r1, #3
    28ae:	4628      	mov	r0, r5
    28b0:	f7ff ffc8 	bl	2844 <boot_initialize_area>
    if (rc != 0) {
    28b4:	4604      	mov	r4, r0
    28b6:	b108      	cbz	r0, 28bc <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    28b8:	2401      	movs	r4, #1
    28ba:	e7ee      	b.n	289a <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    28bc:	4628      	mov	r0, r5
    28be:	f7ff ff3b 	bl	2738 <boot_write_sz>
    28c2:	66a8      	str	r0, [r5, #104]	; 0x68
    return 0;
    28c4:	e7e9      	b.n	289a <boot_read_sectors+0xe>
	...

000028c8 <boot_image_check>:
{
    28c8:	b500      	push	{lr}
    28ca:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    28cc:	2000      	movs	r0, #0
    28ce:	9004      	str	r0, [sp, #16]
    28d0:	9003      	str	r0, [sp, #12]
    28d2:	9002      	str	r0, [sp, #8]
    28d4:	f44f 7380 	mov.w	r3, #256	; 0x100
    28d8:	9301      	str	r3, [sp, #4]
    28da:	4b07      	ldr	r3, [pc, #28]	; (28f8 <boot_image_check+0x30>)
    28dc:	9300      	str	r3, [sp, #0]
    28de:	4613      	mov	r3, r2
    28e0:	460a      	mov	r2, r1
    28e2:	4601      	mov	r1, r0
    28e4:	f001 f8eb 	bl	3abe <bootutil_img_validate>
    28e8:	4603      	mov	r3, r0
    28ea:	b918      	cbnz	r0, 28f4 <boot_image_check+0x2c>
}
    28ec:	4618      	mov	r0, r3
    28ee:	b007      	add	sp, #28
    28f0:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
    28f4:	2303      	movs	r3, #3
    28f6:	e7f9      	b.n	28ec <boot_image_check+0x24>
    28f8:	20006194 	.word	0x20006194

000028fc <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    28fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2900:	b082      	sub	sp, #8
    2902:	4605      	mov	r5, r0
    2904:	460c      	mov	r4, r1
    2906:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2908:	2000      	movs	r0, #0
    290a:	f001 f9f6 	bl	3cfa <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    290e:	a901      	add	r1, sp, #4
    2910:	b2c0      	uxtb	r0, r0
    2912:	f7ff fcb3 	bl	227c <flash_area_open>
    if (rc != 0) {
    2916:	bb30      	cbnz	r0, 2966 <boot_validate_slot+0x6a>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    2918:	202c      	movs	r0, #44	; 0x2c
    291a:	fb00 5604 	mla	r6, r0, r4, r5
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
    291e:	4621      	mov	r1, r4
    2920:	4628      	mov	r0, r5
    2922:	f7ff ff65 	bl	27f0 <boot_check_header_erased>
    2926:	b308      	cbz	r0, 296c <boot_validate_slot+0x70>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    2928:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    292a:	f013 0f10 	tst.w	r3, #16
    292e:	d122      	bne.n	2976 <boot_validate_slot+0x7a>
            goto out;
        }
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2930:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2934:	4641      	mov	r1, r8
    2936:	4630      	mov	r0, r6
    2938:	f7ff fede 	bl	26f8 <boot_is_header_valid>
    293c:	b910      	cbnz	r0, 2944 <boot_validate_slot+0x48>
        if (slot != BOOT_PRIMARY_SLOT) {
    293e:	b95c      	cbnz	r4, 2958 <boot_validate_slot+0x5c>
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        rc = 1;
    2940:	2301      	movs	r3, #1
    2942:	e014      	b.n	296e <boot_validate_slot+0x72>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2944:	463b      	mov	r3, r7
    2946:	4642      	mov	r2, r8
    2948:	4631      	mov	r1, r6
    294a:	4628      	mov	r0, r5
    294c:	f7ff ffbc 	bl	28c8 <boot_image_check>
    2950:	4603      	mov	r3, r0
    2952:	2800      	cmp	r0, #0
    2954:	d1f3      	bne.n	293e <boot_validate_slot+0x42>
    2956:	e00a      	b.n	296e <boot_validate_slot+0x72>
            flash_area_erase(fap, 0, fap->fa_size);
    2958:	9801      	ldr	r0, [sp, #4]
    295a:	6882      	ldr	r2, [r0, #8]
    295c:	2100      	movs	r1, #0
    295e:	f7ff fd11 	bl	2384 <flash_area_erase>
        rc = 1;
    2962:	2301      	movs	r3, #1
    2964:	e003      	b.n	296e <boot_validate_slot+0x72>
        return -1;
    2966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    296a:	e000      	b.n	296e <boot_validate_slot+0x72>
        rc = 1;
    296c:	2301      	movs	r3, #1
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    296e:	4618      	mov	r0, r3
    2970:	b002      	add	sp, #8
    2972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
    2976:	2301      	movs	r3, #1
    2978:	e7f9      	b.n	296e <boot_validate_slot+0x72>

0000297a <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    297a:	b570      	push	{r4, r5, r6, lr}
    297c:	4605      	mov	r5, r0
    297e:	460e      	mov	r6, r1
    int swap_type;
    int rc;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    2980:	2000      	movs	r0, #0
    2982:	f001 f811 	bl	39a8 <boot_swap_type_multi>
    2986:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    2988:	2802      	cmp	r0, #2
    298a:	d005      	beq.n	2998 <boot_validated_swap_type+0x1e>
    298c:	2804      	cmp	r0, #4
    298e:	d003      	beq.n	2998 <boot_validated_swap_type+0x1e>
    2990:	2803      	cmp	r0, #3
    2992:	d001      	beq.n	2998 <boot_validated_swap_type+0x1e>
            swap_type = BOOT_SWAP_TYPE_FAIL;
        }
    }

    return swap_type;
}
    2994:	4620      	mov	r0, r4
    2996:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    2998:	4632      	mov	r2, r6
    299a:	2101      	movs	r1, #1
    299c:	4628      	mov	r0, r5
    299e:	f7ff ffad 	bl	28fc <boot_validate_slot>
        if (rc == 1) {
    29a2:	2801      	cmp	r0, #1
    29a4:	d003      	beq.n	29ae <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    29a6:	2800      	cmp	r0, #0
    29a8:	d0f4      	beq.n	2994 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    29aa:	2405      	movs	r4, #5
    return swap_type;
    29ac:	e7f2      	b.n	2994 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    29ae:	4604      	mov	r4, r0
    29b0:	e7f0      	b.n	2994 <boot_validated_swap_type+0x1a>

000029b2 <boot_read_image_headers>:
{
    29b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29b4:	4605      	mov	r5, r0
    29b6:	460f      	mov	r7, r1
    29b8:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    29ba:	2400      	movs	r4, #0
    29bc:	2c01      	cmp	r4, #1
    29be:	dc10      	bgt.n	29e2 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    29c0:	4633      	mov	r3, r6
    29c2:	222c      	movs	r2, #44	; 0x2c
    29c4:	fb02 5204 	mla	r2, r2, r4, r5
    29c8:	4621      	mov	r1, r4
    29ca:	4628      	mov	r0, r5
    29cc:	f000 fcdf 	bl	338e <boot_read_image_header>
        if (rc != 0) {
    29d0:	4603      	mov	r3, r0
    29d2:	b908      	cbnz	r0, 29d8 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    29d4:	3401      	adds	r4, #1
    29d6:	e7f1      	b.n	29bc <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    29d8:	2c00      	cmp	r4, #0
    29da:	dd03      	ble.n	29e4 <boot_read_image_headers+0x32>
    29dc:	b917      	cbnz	r7, 29e4 <boot_read_image_headers+0x32>
                return 0;
    29de:	2300      	movs	r3, #0
    29e0:	e000      	b.n	29e4 <boot_read_image_headers+0x32>
    return 0;
    29e2:	2300      	movs	r3, #0
}
    29e4:	4618      	mov	r0, r3
    29e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000029e8 <boot_status_reset>:
    bs->use_scratch = 0;
    29e8:	2300      	movs	r3, #0
    29ea:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    29ec:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    29ee:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    29f0:	2301      	movs	r3, #1
    29f2:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    29f4:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    29f6:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    29f8:	71c3      	strb	r3, [r0, #7]
}
    29fa:	4770      	bx	lr

000029fc <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    29fc:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    29fe:	2b01      	cmp	r3, #1
    2a00:	d001      	beq.n	2a06 <boot_status_is_reset+0xa>
    2a02:	2000      	movs	r0, #0
    2a04:	4770      	bx	lr
    2a06:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2a08:	2b01      	cmp	r3, #1
    2a0a:	d001      	beq.n	2a10 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    2a0c:	2000      	movs	r0, #0
    2a0e:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    2a10:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2a12:	2b01      	cmp	r3, #1
    2a14:	d001      	beq.n	2a1a <boot_status_is_reset+0x1e>
    2a16:	2000      	movs	r0, #0
    2a18:	4770      	bx	lr
    2a1a:	2001      	movs	r0, #1
}
    2a1c:	4770      	bx	lr
	...

00002a20 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2a20:	b530      	push	{r4, r5, lr}
    2a22:	b083      	sub	sp, #12
    2a24:	4605      	mov	r5, r0
    2a26:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    2a28:	2300      	movs	r3, #0
    2a2a:	9300      	str	r3, [sp, #0]
    2a2c:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    2a2e:	4608      	mov	r0, r1
    2a30:	f7ff ffe4 	bl	29fc <boot_status_is_reset>
    2a34:	2800      	cmp	r0, #0
    2a36:	d030      	beq.n	2a9a <boot_swap_image+0x7a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2a38:	682a      	ldr	r2, [r5, #0]
    2a3a:	4b1f      	ldr	r3, [pc, #124]	; (2ab8 <boot_swap_image+0x98>)
    2a3c:	429a      	cmp	r2, r3
    2a3e:	d012      	beq.n	2a66 <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2a40:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2a42:	4b1d      	ldr	r3, [pc, #116]	; (2ab8 <boot_swap_image+0x98>)
    2a44:	429a      	cmp	r2, r3
    2a46:	d01b      	beq.n	2a80 <boot_swap_image+0x60>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    2a48:	9b01      	ldr	r3, [sp, #4]
    2a4a:	9a00      	ldr	r2, [sp, #0]
    2a4c:	4293      	cmp	r3, r2
    2a4e:	d900      	bls.n	2a52 <boot_swap_image+0x32>
            copy_size = size;
    2a50:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    2a52:	9b00      	ldr	r3, [sp, #0]
    2a54:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    2a56:	9a00      	ldr	r2, [sp, #0]
    2a58:	4621      	mov	r1, r4
    2a5a:	4628      	mov	r0, r5
    2a5c:	f000 fdcc 	bl	35f8 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    2a60:	2000      	movs	r0, #0
    2a62:	b003      	add	sp, #12
    2a64:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    2a66:	466a      	mov	r2, sp
    2a68:	2100      	movs	r1, #0
    2a6a:	4628      	mov	r0, r5
    2a6c:	f7ff fe72 	bl	2754 <boot_read_image_size>
            assert(rc == 0);
    2a70:	2800      	cmp	r0, #0
    2a72:	d0e5      	beq.n	2a40 <boot_swap_image+0x20>
    2a74:	2300      	movs	r3, #0
    2a76:	461a      	mov	r2, r3
    2a78:	4619      	mov	r1, r3
    2a7a:	4618      	mov	r0, r3
    2a7c:	f7fe ffaa 	bl	19d4 <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    2a80:	aa01      	add	r2, sp, #4
    2a82:	2101      	movs	r1, #1
    2a84:	4628      	mov	r0, r5
    2a86:	f7ff fe65 	bl	2754 <boot_read_image_size>
            assert(rc == 0);
    2a8a:	2800      	cmp	r0, #0
    2a8c:	d0dc      	beq.n	2a48 <boot_swap_image+0x28>
    2a8e:	2300      	movs	r3, #0
    2a90:	461a      	mov	r2, r3
    2a92:	4619      	mov	r1, r3
    2a94:	4618      	mov	r0, r3
    2a96:	f7fe ff9d 	bl	19d4 <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    2a9a:	f104 0108 	add.w	r1, r4, #8
    2a9e:	2000      	movs	r0, #0
    2aa0:	f000 ff18 	bl	38d4 <boot_read_swap_size>
        assert(rc == 0);
    2aa4:	b910      	cbnz	r0, 2aac <boot_swap_image+0x8c>
        copy_size = bs->swap_size;
    2aa6:	68a3      	ldr	r3, [r4, #8]
    2aa8:	9300      	str	r3, [sp, #0]
    2aaa:	e7d4      	b.n	2a56 <boot_swap_image+0x36>
        assert(rc == 0);
    2aac:	2300      	movs	r3, #0
    2aae:	461a      	mov	r2, r3
    2ab0:	4619      	mov	r1, r3
    2ab2:	4618      	mov	r0, r3
    2ab4:	f7fe ff8e 	bl	19d4 <__assert_func>
    2ab8:	96f3b83d 	.word	0x96f3b83d

00002abc <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    2abc:	b538      	push	{r3, r4, r5, lr}
    2abe:	4605      	mov	r5, r0
    2ac0:	460c      	mov	r4, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    2ac2:	f7ff ffad 	bl	2a20 <boot_swap_image>
    assert(rc == 0);
    2ac6:	b9a8      	cbnz	r0, 2af4 <boot_complete_partial_swap+0x38>
    2ac8:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    2aca:	79e3      	ldrb	r3, [r4, #7]
    2acc:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    2ad0:	79e3      	ldrb	r3, [r4, #7]
    2ad2:	3b03      	subs	r3, #3
    2ad4:	b2db      	uxtb	r3, r3
    2ad6:	2b01      	cmp	r3, #1
    2ad8:	d912      	bls.n	2b00 <boot_complete_partial_swap+0x44>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    2ada:	79e3      	ldrb	r3, [r4, #7]
    2adc:	2b02      	cmp	r3, #2
    2ade:	d019      	beq.n	2b14 <boot_complete_partial_swap+0x58>
    2ae0:	2b04      	cmp	r3, #4
    2ae2:	d017      	beq.n	2b14 <boot_complete_partial_swap+0x58>
    2ae4:	2b03      	cmp	r3, #3
    2ae6:	d015      	beq.n	2b14 <boot_complete_partial_swap+0x58>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2ae8:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2aec:	2bff      	cmp	r3, #255	; 0xff
    2aee:	d01b      	beq.n	2b28 <boot_complete_partial_swap+0x6c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    2af0:	4610      	mov	r0, r2
    2af2:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2af4:	2300      	movs	r3, #0
    2af6:	461a      	mov	r2, r3
    2af8:	4619      	mov	r1, r3
    2afa:	4618      	mov	r0, r3
    2afc:	f7fe ff6a 	bl	19d4 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2b00:	2000      	movs	r0, #0
    2b02:	f000 fa77 	bl	2ff4 <swap_set_image_ok>
        if (rc != 0) {
    2b06:	4602      	mov	r2, r0
    2b08:	2800      	cmp	r0, #0
    2b0a:	d0e6      	beq.n	2ada <boot_complete_partial_swap+0x1e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2b0c:	23ff      	movs	r3, #255	; 0xff
    2b0e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    2b12:	e7e2      	b.n	2ada <boot_complete_partial_swap+0x1e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2b14:	2000      	movs	r0, #0
    2b16:	f000 fa5e 	bl	2fd6 <swap_set_copy_done>
        if (rc != 0) {
    2b1a:	4602      	mov	r2, r0
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d0e3      	beq.n	2ae8 <boot_complete_partial_swap+0x2c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2b20:	23ff      	movs	r3, #255	; 0xff
    2b22:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    2b26:	e7df      	b.n	2ae8 <boot_complete_partial_swap+0x2c>
        assert(0);
    2b28:	2300      	movs	r3, #0
    2b2a:	461a      	mov	r2, r3
    2b2c:	4619      	mov	r1, r3
    2b2e:	4618      	mov	r0, r3
    2b30:	f7fe ff50 	bl	19d4 <__assert_func>

00002b34 <boot_perform_update>:
{
    2b34:	b538      	push	{r3, r4, r5, lr}
    2b36:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    2b38:	f7ff ff72 	bl	2a20 <boot_swap_image>
    assert(rc == 0);
    2b3c:	b9b0      	cbnz	r0, 2b6c <boot_perform_update+0x38>
    2b3e:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    2b40:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    2b44:	1ee3      	subs	r3, r4, #3
    2b46:	b2db      	uxtb	r3, r3
    2b48:	2b01      	cmp	r3, #1
    2b4a:	d915      	bls.n	2b78 <boot_perform_update+0x44>
    if (BOOT_IS_UPGRADE(swap_type)) {
    2b4c:	2c02      	cmp	r4, #2
    2b4e:	d003      	beq.n	2b58 <boot_perform_update+0x24>
    2b50:	2c04      	cmp	r4, #4
    2b52:	d001      	beq.n	2b58 <boot_perform_update+0x24>
    2b54:	2c03      	cmp	r4, #3
    2b56:	d107      	bne.n	2b68 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2b58:	2000      	movs	r0, #0
    2b5a:	f000 fa3c 	bl	2fd6 <swap_set_copy_done>
        if (rc != 0) {
    2b5e:	4602      	mov	r2, r0
    2b60:	b110      	cbz	r0, 2b68 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2b62:	23ff      	movs	r3, #255	; 0xff
    2b64:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    2b68:	4610      	mov	r0, r2
    2b6a:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2b6c:	2300      	movs	r3, #0
    2b6e:	461a      	mov	r2, r3
    2b70:	4619      	mov	r1, r3
    2b72:	4618      	mov	r0, r3
    2b74:	f7fe ff2e 	bl	19d4 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2b78:	2000      	movs	r0, #0
    2b7a:	f000 fa3b 	bl	2ff4 <swap_set_image_ok>
        if (rc != 0) {
    2b7e:	4602      	mov	r2, r0
    2b80:	2800      	cmp	r0, #0
    2b82:	d0e3      	beq.n	2b4c <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    2b84:	24ff      	movs	r4, #255	; 0xff
    2b86:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    2b8a:	e7e1      	b.n	2b50 <boot_perform_update+0x1c>

00002b8c <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    2b8c:	b538      	push	{r3, r4, r5, lr}
    2b8e:	4604      	mov	r4, r0
    2b90:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    2b92:	f7ff fe7b 	bl	288c <boot_read_sectors>
    if (rc != 0) {
    2b96:	b118      	cbz	r0, 2ba0 <boot_prepare_image_for_update+0x14>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
                     " - too small?", BOOT_MAX_IMG_SECTORS);
        /* Unable to determine sector layout, continue with next image
         * if there is one.
         */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2b98:	2301      	movs	r3, #1
    2b9a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    }
}
    2b9e:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_read_image_headers(state, false, NULL);
    2ba0:	2200      	movs	r2, #0
    2ba2:	4611      	mov	r1, r2
    2ba4:	4620      	mov	r0, r4
    2ba6:	f7ff ff04 	bl	29b2 <boot_read_image_headers>
    if (rc != 0) {
    2baa:	b118      	cbz	r0, 2bb4 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2bac:	2301      	movs	r3, #1
    2bae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    2bb2:	e7f4      	b.n	2b9e <boot_prepare_image_for_update+0x12>
    if (boot_slots_compatible(state)) {
    2bb4:	4620      	mov	r0, r4
    2bb6:	f000 fc6a 	bl	348e <boot_slots_compatible>
    2bba:	b918      	cbnz	r0, 2bc4 <boot_prepare_image_for_update+0x38>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2bbc:	2301      	movs	r3, #1
    2bbe:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2bc2:	e7ec      	b.n	2b9e <boot_prepare_image_for_update+0x12>
        boot_status_reset(bs);
    2bc4:	4628      	mov	r0, r5
    2bc6:	f7ff ff0f 	bl	29e8 <boot_status_reset>
        rc = swap_read_status(state, bs);
    2bca:	4629      	mov	r1, r5
    2bcc:	4620      	mov	r0, r4
    2bce:	f000 f9c4 	bl	2f5a <swap_read_status>
        if (rc != 0) {
    2bd2:	b980      	cbnz	r0, 2bf6 <boot_prepare_image_for_update+0x6a>
        if (!boot_status_is_reset(bs)) {
    2bd4:	4628      	mov	r0, r5
    2bd6:	f7ff ff11 	bl	29fc <boot_status_is_reset>
    2bda:	b180      	cbz	r0, 2bfe <boot_prepare_image_for_update+0x72>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    2bdc:	79eb      	ldrb	r3, [r5, #7]
    2bde:	2b01      	cmp	r3, #1
    2be0:	d028      	beq.n	2c34 <boot_prepare_image_for_update+0xa8>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    2be2:	462a      	mov	r2, r5
    2be4:	2101      	movs	r1, #1
    2be6:	4620      	mov	r0, r4
    2be8:	f7ff fe88 	bl	28fc <boot_validate_slot>
    2bec:	b348      	cbz	r0, 2c42 <boot_prepare_image_for_update+0xb6>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    2bee:	2305      	movs	r3, #5
    2bf0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2bf4:	e7d3      	b.n	2b9e <boot_prepare_image_for_update+0x12>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2bf6:	2301      	movs	r3, #1
    2bf8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    2bfc:	e7cf      	b.n	2b9e <boot_prepare_image_for_update+0x12>
            rc = boot_complete_partial_swap(state, bs);
    2bfe:	4629      	mov	r1, r5
    2c00:	4620      	mov	r0, r4
    2c02:	f7ff ff5b 	bl	2abc <boot_complete_partial_swap>
            assert(rc == 0);
    2c06:	b948      	cbnz	r0, 2c1c <boot_prepare_image_for_update+0x90>
            rc = boot_read_image_headers(state, false, bs);
    2c08:	462a      	mov	r2, r5
    2c0a:	2100      	movs	r1, #0
    2c0c:	4620      	mov	r0, r4
    2c0e:	f7ff fed0 	bl	29b2 <boot_read_image_headers>
            assert(rc == 0);
    2c12:	b948      	cbnz	r0, 2c28 <boot_prepare_image_for_update+0x9c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2c14:	2301      	movs	r3, #1
    2c16:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2c1a:	e7c0      	b.n	2b9e <boot_prepare_image_for_update+0x12>
            assert(rc == 0);
    2c1c:	2300      	movs	r3, #0
    2c1e:	461a      	mov	r2, r3
    2c20:	4619      	mov	r1, r3
    2c22:	4618      	mov	r0, r3
    2c24:	f7fe fed6 	bl	19d4 <__assert_func>
            assert(rc == 0);
    2c28:	2300      	movs	r3, #0
    2c2a:	461a      	mov	r2, r3
    2c2c:	4619      	mov	r1, r3
    2c2e:	4618      	mov	r0, r3
    2c30:	f7fe fed0 	bl	19d4 <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    2c34:	4629      	mov	r1, r5
    2c36:	4620      	mov	r0, r4
    2c38:	f7ff fe9f 	bl	297a <boot_validated_swap_type>
    2c3c:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    2c40:	e7ad      	b.n	2b9e <boot_prepare_image_for_update+0x12>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    2c42:	79eb      	ldrb	r3, [r5, #7]
    2c44:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2c48:	e7a9      	b.n	2b9e <boot_prepare_image_for_update+0x12>

00002c4a <boot_write_status>:
{
    2c4a:	b570      	push	{r4, r5, r6, lr}
    2c4c:	b084      	sub	sp, #16
    2c4e:	4606      	mov	r6, r0
    2c50:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    2c52:	798b      	ldrb	r3, [r1, #6]
    2c54:	b143      	cbz	r3, 2c68 <boot_write_status+0x1e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    2c56:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    2c58:	a903      	add	r1, sp, #12
    2c5a:	f7ff fb0f 	bl	227c <flash_area_open>
    if (rc != 0) {
    2c5e:	b128      	cbz	r0, 2c6c <boot_write_status+0x22>
        rc = BOOT_EFLASH;
    2c60:	2301      	movs	r3, #1
}
    2c62:	4618      	mov	r0, r3
    2c64:	b004      	add	sp, #16
    2c66:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    2c68:	2001      	movs	r0, #1
    2c6a:	e7f5      	b.n	2c58 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    2c6c:	9803      	ldr	r0, [sp, #12]
    2c6e:	f000 fdad 	bl	37cc <boot_status_off>
    2c72:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    2c74:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    2c76:	4620      	mov	r0, r4
    2c78:	f000 fbfc 	bl	3474 <boot_status_internal_off>
    off = boot_status_off(fap) +
    2c7c:	4405      	add	r5, r0
    align = flash_area_align(fap);
    2c7e:	9803      	ldr	r0, [sp, #12]
    2c80:	f7ff fb93 	bl	23aa <flash_area_align>
    2c84:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    2c86:	9803      	ldr	r0, [sp, #12]
    2c88:	f7ff fb94 	bl	23b4 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    2c8c:	2208      	movs	r2, #8
    2c8e:	b2c1      	uxtb	r1, r0
    2c90:	a801      	add	r0, sp, #4
    2c92:	f7ff f9ae 	bl	1ff2 <memset>
    buf[0] = bs->state;
    2c96:	7923      	ldrb	r3, [r4, #4]
    2c98:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    2c9c:	4633      	mov	r3, r6
    2c9e:	aa01      	add	r2, sp, #4
    2ca0:	4629      	mov	r1, r5
    2ca2:	9803      	ldr	r0, [sp, #12]
    2ca4:	f7ff fb5b 	bl	235e <flash_area_write>
    if (rc != 0) {
    2ca8:	4603      	mov	r3, r0
    2caa:	2800      	cmp	r0, #0
    2cac:	d0d9      	beq.n	2c62 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    2cae:	2301      	movs	r3, #1
    2cb0:	e7d7      	b.n	2c62 <boot_write_status+0x18>

00002cb2 <boot_erase_region>:
{
    2cb2:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    2cb4:	f7ff fb66 	bl	2384 <flash_area_erase>
}
    2cb8:	bd08      	pop	{r3, pc}
	...

00002cbc <boot_copy_region>:
{
    2cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cc0:	4688      	mov	r8, r1
    2cc2:	4692      	mov	sl, r2
    2cc4:	461f      	mov	r7, r3
    2cc6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    2cca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    2ccc:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    2cce:	e00f      	b.n	2cf0 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    2cd0:	4623      	mov	r3, r4
    2cd2:	4a0f      	ldr	r2, [pc, #60]	; (2d10 <boot_copy_region+0x54>)
    2cd4:	19e9      	adds	r1, r5, r7
    2cd6:	4640      	mov	r0, r8
    2cd8:	f7ff fb2e 	bl	2338 <flash_area_read>
        if (rc != 0) {
    2cdc:	b9a0      	cbnz	r0, 2d08 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    2cde:	4623      	mov	r3, r4
    2ce0:	4a0b      	ldr	r2, [pc, #44]	; (2d10 <boot_copy_region+0x54>)
    2ce2:	eb05 0109 	add.w	r1, r5, r9
    2ce6:	4650      	mov	r0, sl
    2ce8:	f7ff fb39 	bl	235e <flash_area_write>
        if (rc != 0) {
    2cec:	b970      	cbnz	r0, 2d0c <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    2cee:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    2cf0:	42b5      	cmp	r5, r6
    2cf2:	d206      	bcs.n	2d02 <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    2cf4:	1b74      	subs	r4, r6, r5
    2cf6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2cfa:	d9e9      	bls.n	2cd0 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    2cfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2d00:	e7e6      	b.n	2cd0 <boot_copy_region+0x14>
    return 0;
    2d02:	2000      	movs	r0, #0
}
    2d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    2d08:	2001      	movs	r0, #1
    2d0a:	e7fb      	b.n	2d04 <boot_copy_region+0x48>
            return BOOT_EFLASH;
    2d0c:	2001      	movs	r0, #1
    2d0e:	e7f9      	b.n	2d04 <boot_copy_region+0x48>
    2d10:	20004b94 	.word	0x20004b94

00002d14 <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    2d14:	b570      	push	{r4, r5, r6, lr}
    2d16:	b084      	sub	sp, #16
    2d18:	4604      	mov	r4, r0
    2d1a:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    2d1c:	226c      	movs	r2, #108	; 0x6c
    2d1e:	2100      	movs	r1, #0
    2d20:	f7ff f967 	bl	1ff2 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    2d24:	4b41      	ldr	r3, [pc, #260]	; (2e2c <context_boot_go+0x118>)
    2d26:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    2d28:	4b41      	ldr	r3, [pc, #260]	; (2e30 <context_boot_go+0x11c>)
    2d2a:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    2d2c:	4b41      	ldr	r3, [pc, #260]	; (2e34 <context_boot_go+0x120>)
    2d2e:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2d30:	2500      	movs	r5, #0
    2d32:	2d01      	cmp	r5, #1
    2d34:	d814      	bhi.n	2d60 <context_boot_go+0x4c>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2d36:	4629      	mov	r1, r5
    2d38:	2000      	movs	r0, #0
    2d3a:	f000 ffde 	bl	3cfa <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    2d3e:	212c      	movs	r1, #44	; 0x2c
    2d40:	fb01 f105 	mul.w	r1, r1, r5
    2d44:	3120      	adds	r1, #32
    2d46:	4421      	add	r1, r4
    2d48:	b2c0      	uxtb	r0, r0
    2d4a:	f7ff fa97 	bl	227c <flash_area_open>
            assert(rc == 0);
    2d4e:	b908      	cbnz	r0, 2d54 <context_boot_go+0x40>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2d50:	3501      	adds	r5, #1
    2d52:	e7ee      	b.n	2d32 <context_boot_go+0x1e>
            assert(rc == 0);
    2d54:	2300      	movs	r3, #0
    2d56:	461a      	mov	r2, r3
    2d58:	4619      	mov	r1, r3
    2d5a:	4618      	mov	r0, r3
    2d5c:	f7fe fe3a 	bl	19d4 <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    2d60:	f104 0158 	add.w	r1, r4, #88	; 0x58
    2d64:	2003      	movs	r0, #3
    2d66:	f7ff fa89 	bl	227c <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    2d6a:	4605      	mov	r5, r0
    2d6c:	b978      	cbnz	r0, 2d8e <context_boot_go+0x7a>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    2d6e:	4669      	mov	r1, sp
    2d70:	4620      	mov	r0, r4
    2d72:	f7ff ff0b 	bl	2b8c <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    2d76:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    2d7a:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    2d7e:	3b01      	subs	r3, #1
    2d80:	2b04      	cmp	r3, #4
    2d82:	d82d      	bhi.n	2de0 <context_boot_go+0xcc>
    2d84:	e8df f003 	tbb	[pc, r3]
    2d88:	0909090f 	.word	0x0909090f
    2d8c:	22          	.byte	0x22
    2d8d:	00          	.byte	0x00
        assert(rc == 0);
    2d8e:	2300      	movs	r3, #0
    2d90:	461a      	mov	r2, r3
    2d92:	4619      	mov	r1, r3
    2d94:	4618      	mov	r0, r3
    2d96:	f7fe fe1d 	bl	19d4 <__assert_func>
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    2d9a:	4669      	mov	r1, sp
    2d9c:	4620      	mov	r0, r4
    2d9e:	f7ff fec9 	bl	2b34 <boot_perform_update>
            assert(rc == 0);
    2da2:	4605      	mov	r5, r0
    2da4:	b960      	cbnz	r0, 2dc0 <context_boot_go+0xac>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2da6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2daa:	2bff      	cmp	r3, #255	; 0xff
    2dac:	d01c      	beq.n	2de8 <context_boot_go+0xd4>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    2dae:	2b01      	cmp	r3, #1
    2db0:	d120      	bne.n	2df4 <context_boot_go+0xe0>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    2db2:	6822      	ldr	r2, [r4, #0]
    2db4:	4b20      	ldr	r3, [pc, #128]	; (2e38 <context_boot_go+0x124>)
    2db6:	429a      	cmp	r2, r3
    2db8:	d025      	beq.n	2e06 <context_boot_go+0xf2>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    2dba:	2503      	movs	r5, #3
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2dbc:	2300      	movs	r3, #0
    2dbe:	e030      	b.n	2e22 <context_boot_go+0x10e>
            assert(rc == 0);
    2dc0:	2300      	movs	r3, #0
    2dc2:	461a      	mov	r2, r3
    2dc4:	4619      	mov	r1, r3
    2dc6:	4618      	mov	r0, r3
    2dc8:	f7fe fe04 	bl	19d4 <__assert_func>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2dcc:	2000      	movs	r0, #0
    2dce:	f000 f911 	bl	2ff4 <swap_set_image_ok>
            if (rc != 0) {
    2dd2:	4605      	mov	r5, r0
    2dd4:	2800      	cmp	r0, #0
    2dd6:	d0e6      	beq.n	2da6 <context_boot_go+0x92>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2dd8:	23ff      	movs	r3, #255	; 0xff
    2dda:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2dde:	e7e2      	b.n	2da6 <context_boot_go+0x92>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2de0:	23ff      	movs	r3, #255	; 0xff
    2de2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2de6:	e7de      	b.n	2da6 <context_boot_go+0x92>
            assert(0);
    2de8:	2300      	movs	r3, #0
    2dea:	461a      	mov	r2, r3
    2dec:	4619      	mov	r1, r3
    2dee:	4618      	mov	r0, r3
    2df0:	f7fe fdf0 	bl	19d4 <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    2df4:	466a      	mov	r2, sp
    2df6:	2100      	movs	r1, #0
    2df8:	4620      	mov	r0, r4
    2dfa:	f7ff fdda 	bl	29b2 <boot_read_image_headers>
            if (rc != 0) {
    2dfe:	4605      	mov	r5, r0
    2e00:	2800      	cmp	r0, #0
    2e02:	d1db      	bne.n	2dbc <context_boot_go+0xa8>
    2e04:	e7d5      	b.n	2db2 <context_boot_go+0x9e>
    memset(&bs, 0, sizeof(struct boot_status));
    2e06:	2300      	movs	r3, #0
    2e08:	9300      	str	r3, [sp, #0]
    2e0a:	9301      	str	r3, [sp, #4]
    2e0c:	9302      	str	r3, [sp, #8]
    2e0e:	9303      	str	r3, [sp, #12]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    2e10:	6a23      	ldr	r3, [r4, #32]
    2e12:	785b      	ldrb	r3, [r3, #1]
    2e14:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    2e16:	6a23      	ldr	r3, [r4, #32]
    2e18:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    2e1a:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    2e1c:	6034      	str	r4, [r6, #0]
    2e1e:	e7cd      	b.n	2dbc <context_boot_go+0xa8>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2e20:	3301      	adds	r3, #1
    2e22:	2b01      	cmp	r3, #1
    2e24:	d9fc      	bls.n	2e20 <context_boot_go+0x10c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    2e26:	4628      	mov	r0, r5
    2e28:	b004      	add	sp, #16
    2e2a:	bd70      	pop	{r4, r5, r6, pc}
    2e2c:	20004f94 	.word	0x20004f94
    2e30:	20005b94 	.word	0x20005b94
    2e34:	20005594 	.word	0x20005594
    2e38:	96f3b83d 	.word	0x96f3b83d

00002e3c <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    2e3c:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    2e3e:	4601      	mov	r1, r0
    2e40:	4801      	ldr	r0, [pc, #4]	; (2e48 <boot_go+0xc>)
    2e42:	f7ff ff67 	bl	2d14 <context_boot_go>
}
    2e46:	bd08      	pop	{r3, pc}
    2e48:	20004b28 	.word	0x20004b28

00002e4c <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    2e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e50:	4606      	mov	r6, r0
    2e52:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    2e54:	2100      	movs	r1, #0
    2e56:	4608      	mov	r0, r1
    2e58:	f000 ff4f 	bl	3cfa <flash_area_id_from_multi_image_slot>
    2e5c:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    2e5e:	2101      	movs	r1, #1
    2e60:	2000      	movs	r0, #0
    2e62:	f000 ff4a 	bl	3cfa <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    2e66:	783b      	ldrb	r3, [r7, #0]
    2e68:	42a3      	cmp	r3, r4
    2e6a:	d029      	beq.n	2ec0 <swap_erase_trailer_sectors+0x74>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    2e6c:	4283      	cmp	r3, r0
    2e6e:	d001      	beq.n	2e74 <swap_erase_trailer_sectors+0x28>
        slot = BOOT_SECONDARY_SLOT;
    } else {
        return BOOT_EFLASH;
    2e70:	2301      	movs	r3, #1
    2e72:	e022      	b.n	2eba <swap_erase_trailer_sectors+0x6e>
        slot = BOOT_SECONDARY_SLOT;
    2e74:	2301      	movs	r3, #1
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    2e76:	4698      	mov	r8, r3
    return BOOT_IMG(state, slot).num_sectors;
    2e78:	222c      	movs	r2, #44	; 0x2c
    2e7a:	fb02 6303 	mla	r3, r2, r3, r6
    2e7e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2e80:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    2e82:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    2e84:	f000 fc8e 	bl	37a4 <boot_trailer_sz>
    2e88:	4681      	mov	r9, r0
    total_sz = 0;
    2e8a:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2e8c:	232c      	movs	r3, #44	; 0x2c
    2e8e:	fb03 6308 	mla	r3, r3, r8, r6
    2e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2e94:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2e98:	008b      	lsls	r3, r1, #2
    2e9a:	4413      	add	r3, r2
    2e9c:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2ea0:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    2ea2:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    2ea4:	4652      	mov	r2, sl
    2ea6:	1ac9      	subs	r1, r1, r3
    2ea8:	4638      	mov	r0, r7
    2eaa:	f7ff ff02 	bl	2cb2 <boot_erase_region>
        assert(rc == 0);
    2eae:	4603      	mov	r3, r0
    2eb0:	b940      	cbnz	r0, 2ec4 <swap_erase_trailer_sectors+0x78>

        sector--;
    2eb2:	3c01      	subs	r4, #1
        total_sz += sz;
    2eb4:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    2eb6:	45a9      	cmp	r9, r5
    2eb8:	d8e8      	bhi.n	2e8c <swap_erase_trailer_sectors+0x40>

    return rc;
}
    2eba:	4618      	mov	r0, r3
    2ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    2ec0:	2300      	movs	r3, #0
    2ec2:	e7d8      	b.n	2e76 <swap_erase_trailer_sectors+0x2a>
        assert(rc == 0);
    2ec4:	2300      	movs	r3, #0
    2ec6:	461a      	mov	r2, r3
    2ec8:	4619      	mov	r1, r3
    2eca:	4618      	mov	r0, r3
    2ecc:	f7fe fd82 	bl	19d4 <__assert_func>

00002ed0 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    2ed0:	b530      	push	{r4, r5, lr}
    2ed2:	b083      	sub	sp, #12
    2ed4:	460c      	mov	r4, r1
    2ed6:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2ed8:	4669      	mov	r1, sp
    2eda:	2002      	movs	r0, #2
    2edc:	f000 fcea 	bl	38b4 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    2ee0:	b990      	cbnz	r0, 2f08 <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    2ee2:	79e9      	ldrb	r1, [r5, #7]
    2ee4:	2901      	cmp	r1, #1
    2ee6:	d115      	bne.n	2f14 <swap_status_init+0x44>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    2ee8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2eec:	2b01      	cmp	r3, #1
    2eee:	d01d      	beq.n	2f2c <swap_status_init+0x5c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    2ef0:	68a9      	ldr	r1, [r5, #8]
    2ef2:	4620      	mov	r0, r4
    2ef4:	f000 fd46 	bl	3984 <boot_write_swap_size>
    assert(rc == 0);
    2ef8:	bb18      	cbnz	r0, 2f42 <swap_status_init+0x72>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    2efa:	4620      	mov	r0, r4
    2efc:	f000 fd02 	bl	3904 <boot_write_magic>
    assert(rc == 0);
    2f00:	bb28      	cbnz	r0, 2f4e <swap_status_init+0x7e>

    return 0;
}
    2f02:	2000      	movs	r0, #0
    2f04:	b003      	add	sp, #12
    2f06:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    2f08:	2300      	movs	r3, #0
    2f0a:	461a      	mov	r2, r3
    2f0c:	4619      	mov	r1, r3
    2f0e:	4618      	mov	r0, r3
    2f10:	f7fe fd60 	bl	19d4 <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    2f14:	2200      	movs	r2, #0
    2f16:	4620      	mov	r0, r4
    2f18:	f000 fd12 	bl	3940 <boot_write_swap_info>
        assert(rc == 0);
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d0e3      	beq.n	2ee8 <swap_status_init+0x18>
    2f20:	2300      	movs	r3, #0
    2f22:	461a      	mov	r2, r3
    2f24:	4619      	mov	r1, r3
    2f26:	4618      	mov	r0, r3
    2f28:	f7fe fd54 	bl	19d4 <__assert_func>
        rc = boot_write_image_ok(fap);
    2f2c:	4620      	mov	r0, r4
    2f2e:	f000 fd00 	bl	3932 <boot_write_image_ok>
        assert(rc == 0);
    2f32:	2800      	cmp	r0, #0
    2f34:	d0dc      	beq.n	2ef0 <swap_status_init+0x20>
    2f36:	2300      	movs	r3, #0
    2f38:	461a      	mov	r2, r3
    2f3a:	4619      	mov	r1, r3
    2f3c:	4618      	mov	r0, r3
    2f3e:	f7fe fd49 	bl	19d4 <__assert_func>
    assert(rc == 0);
    2f42:	2300      	movs	r3, #0
    2f44:	461a      	mov	r2, r3
    2f46:	4619      	mov	r1, r3
    2f48:	4618      	mov	r0, r3
    2f4a:	f7fe fd43 	bl	19d4 <__assert_func>
    assert(rc == 0);
    2f4e:	2300      	movs	r3, #0
    2f50:	461a      	mov	r2, r3
    2f52:	4619      	mov	r1, r3
    2f54:	4618      	mov	r0, r3
    2f56:	f7fe fd3d 	bl	19d4 <__assert_func>

00002f5a <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    2f5a:	b570      	push	{r4, r5, r6, lr}
    2f5c:	b082      	sub	sp, #8
    2f5e:	4606      	mov	r6, r0
    2f60:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    2f62:	f000 fb05 	bl	3570 <swap_status_source>
    2f66:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    2f68:	2801      	cmp	r0, #1
    2f6a:	d009      	beq.n	2f80 <swap_read_status+0x26>
    2f6c:	4604      	mov	r4, r0
    2f6e:	2802      	cmp	r0, #2
    2f70:	d00f      	beq.n	2f92 <swap_read_status+0x38>
    2f72:	b158      	cbz	r0, 2f8c <swap_read_status+0x32>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    2f74:	2300      	movs	r3, #0
    2f76:	461a      	mov	r2, r3
    2f78:	4619      	mov	r1, r3
    2f7a:	4618      	mov	r0, r3
    2f7c:	f7fe fd2a 	bl	19d4 <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    2f80:	2003      	movs	r0, #3
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    2f82:	a901      	add	r1, sp, #4
    2f84:	f7ff f97a 	bl	227c <flash_area_open>
    if (rc != 0) {
    2f88:	b128      	cbz	r0, 2f96 <swap_read_status+0x3c>
        return BOOT_EFLASH;
    2f8a:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    2f8c:	4620      	mov	r0, r4
    2f8e:	b002      	add	sp, #8
    2f90:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    2f92:	2001      	movs	r0, #1
    2f94:	e7f5      	b.n	2f82 <swap_read_status+0x28>
    rc = swap_read_status_bytes(fap, state, bs);
    2f96:	462a      	mov	r2, r5
    2f98:	4631      	mov	r1, r6
    2f9a:	9801      	ldr	r0, [sp, #4]
    2f9c:	f000 fa12 	bl	33c4 <swap_read_status_bytes>
    if (rc == 0) {
    2fa0:	4604      	mov	r4, r0
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d1f2      	bne.n	2f8c <swap_read_status+0x32>
        off = boot_swap_info_off(fap);
    2fa6:	9801      	ldr	r0, [sp, #4]
    2fa8:	f000 fc21 	bl	37ee <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2fac:	2301      	movs	r3, #1
    2fae:	f10d 0203 	add.w	r2, sp, #3
    2fb2:	4601      	mov	r1, r0
    2fb4:	9801      	ldr	r0, [sp, #4]
    2fb6:	f7ff fa02 	bl	23be <flash_area_read_is_empty>
        if (rc == 1) {
    2fba:	2801      	cmp	r0, #1
    2fbc:	d006      	beq.n	2fcc <swap_read_status+0x72>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2fbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2fc2:	f003 030f 	and.w	r3, r3, #15
    2fc6:	71eb      	strb	r3, [r5, #7]
    2fc8:	4604      	mov	r4, r0
    2fca:	e7df      	b.n	2f8c <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    2fcc:	2301      	movs	r3, #1
    2fce:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    2fd2:	4620      	mov	r0, r4
    2fd4:	e7f3      	b.n	2fbe <swap_read_status+0x64>

00002fd6 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    2fd6:	b500      	push	{lr}
    2fd8:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2fda:	a901      	add	r1, sp, #4
    2fdc:	2001      	movs	r0, #1
    2fde:	f7ff f94d 	bl	227c <flash_area_open>
            &fap);
    if (rc != 0) {
    2fe2:	b118      	cbz	r0, 2fec <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    2fe4:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    2fe6:	b003      	add	sp, #12
    2fe8:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    2fec:	9801      	ldr	r0, [sp, #4]
    2fee:	f000 fc99 	bl	3924 <boot_write_copy_done>
    return rc;
    2ff2:	e7f8      	b.n	2fe6 <swap_set_copy_done+0x10>

00002ff4 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    2ff4:	b500      	push	{lr}
    2ff6:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2ff8:	a903      	add	r1, sp, #12
    2ffa:	2001      	movs	r0, #1
    2ffc:	f7ff f93e 	bl	227c <flash_area_open>
            &fap);
    if (rc != 0) {
    3000:	b120      	cbz	r0, 300c <swap_set_image_ok+0x18>
        return BOOT_EFLASH;
    3002:	2301      	movs	r3, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    3004:	4618      	mov	r0, r3
    3006:	b005      	add	sp, #20
    3008:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    300c:	a901      	add	r1, sp, #4
    300e:	9803      	ldr	r0, [sp, #12]
    3010:	f000 fbf0 	bl	37f4 <boot_read_swap_state>
    if (rc != 0) {
    3014:	4603      	mov	r3, r0
    3016:	b940      	cbnz	r0, 302a <swap_set_image_ok+0x36>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    3018:	f89d 2007 	ldrb.w	r2, [sp, #7]
    301c:	2a03      	cmp	r2, #3
    301e:	d1f1      	bne.n	3004 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    3020:	9803      	ldr	r0, [sp, #12]
    3022:	f000 fc86 	bl	3932 <boot_write_image_ok>
    3026:	4603      	mov	r3, r0
    3028:	e7ec      	b.n	3004 <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    302a:	2301      	movs	r3, #1
    302c:	e7ea      	b.n	3004 <swap_set_image_ok+0x10>

0000302e <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    302e:	b4f0      	push	{r4, r5, r6, r7}
    3030:	4606      	mov	r6, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    3032:	6d83      	ldr	r3, [r0, #88]	; 0x58
    3034:	689f      	ldr	r7, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    3036:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    3038:	2900      	cmp	r1, #0
    303a:	db0b      	blt.n	3054 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    303c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    303e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    3042:	00ac      	lsls	r4, r5, #2
    3044:	4423      	add	r3, r4
    3046:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3048:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    304a:	429f      	cmp	r7, r3
    304c:	d302      	bcc.n	3054 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    304e:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    3050:	4618      	mov	r0, r3
    3052:	e7f1      	b.n	3038 <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    3054:	3101      	adds	r1, #1
    3056:	6011      	str	r1, [r2, #0]
    return sz;
}
    3058:	bcf0      	pop	{r4, r5, r6, r7}
    305a:	4770      	bx	lr

0000305c <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3060:	b088      	sub	sp, #32
    3062:	460f      	mov	r7, r1
    3064:	4615      	mov	r5, r2
    3066:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3068:	6a52      	ldr	r2, [r2, #36]	; 0x24
    306a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    306e:	0083      	lsls	r3, r0, #2
    3070:	4413      	add	r3, r2
    3072:	685e      	ldr	r6, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    3074:	6853      	ldr	r3, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3076:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    3078:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    307a:	f000 fb93 	bl	37a4 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    307e:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    3080:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    3082:	eb07 0c06 	add.w	ip, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3086:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    308c:	009a      	lsls	r2, r3, #2
    308e:	440a      	add	r2, r1
    3090:	6853      	ldr	r3, [r2, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    3092:	684a      	ldr	r2, [r1, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3094:	1a9b      	subs	r3, r3, r2
    3096:	459c      	cmp	ip, r3
    3098:	d923      	bls.n	30e2 <boot_swap_sectors+0x86>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    309a:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    309e:	6823      	ldr	r3, [r4, #0]
    30a0:	2b01      	cmp	r3, #1
    30a2:	d020      	beq.n	30e6 <boot_swap_sectors+0x8a>
    30a4:	2300      	movs	r3, #0
    30a6:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    30a8:	a907      	add	r1, sp, #28
    30aa:	2001      	movs	r0, #1
    30ac:	f7ff f8e6 	bl	227c <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    30b0:	b9f8      	cbnz	r0, 30f2 <boot_swap_sectors+0x96>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    30b2:	a906      	add	r1, sp, #24
    30b4:	2002      	movs	r0, #2
    30b6:	f7ff f8e1 	bl	227c <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    30ba:	bb00      	cbnz	r0, 30fe <boot_swap_sectors+0xa2>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    30bc:	a905      	add	r1, sp, #20
    30be:	2003      	movs	r0, #3
    30c0:	f7ff f8dc 	bl	227c <flash_area_open>
    assert (rc == 0);
    30c4:	bb08      	cbnz	r0, 310a <boot_swap_sectors+0xae>

    if (bs->state == BOOT_STATUS_STATE_0) {
    30c6:	7923      	ldrb	r3, [r4, #4]
    30c8:	2b01      	cmp	r3, #1
    30ca:	d024      	beq.n	3116 <boot_swap_sectors+0xba>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    30cc:	7923      	ldrb	r3, [r4, #4]
    30ce:	2b02      	cmp	r3, #2
    30d0:	f000 8083 	beq.w	31da <boot_swap_sectors+0x17e>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    30d4:	7923      	ldrb	r3, [r4, #4]
    30d6:	2b03      	cmp	r3, #3
    30d8:	f000 80bb 	beq.w	3252 <boot_swap_sectors+0x1f6>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    30dc:	b008      	add	sp, #32
    30de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    30e2:	46b8      	mov	r8, r7
    30e4:	e7db      	b.n	309e <boot_swap_sectors+0x42>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    30e6:	45b8      	cmp	r8, r7
    30e8:	d001      	beq.n	30ee <boot_swap_sectors+0x92>
    30ea:	2301      	movs	r3, #1
    30ec:	e7db      	b.n	30a6 <boot_swap_sectors+0x4a>
    30ee:	2300      	movs	r3, #0
    30f0:	e7d9      	b.n	30a6 <boot_swap_sectors+0x4a>
    assert (rc == 0);
    30f2:	2300      	movs	r3, #0
    30f4:	461a      	mov	r2, r3
    30f6:	4619      	mov	r1, r3
    30f8:	4618      	mov	r0, r3
    30fa:	f7fe fc6b 	bl	19d4 <__assert_func>
    assert (rc == 0);
    30fe:	2300      	movs	r3, #0
    3100:	461a      	mov	r2, r3
    3102:	4619      	mov	r1, r3
    3104:	4618      	mov	r0, r3
    3106:	f7fe fc65 	bl	19d4 <__assert_func>
    assert (rc == 0);
    310a:	2300      	movs	r3, #0
    310c:	461a      	mov	r2, r3
    310e:	4619      	mov	r1, r3
    3110:	4618      	mov	r0, r3
    3112:	f7fe fc5f 	bl	19d4 <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    3116:	9805      	ldr	r0, [sp, #20]
    3118:	6882      	ldr	r2, [r0, #8]
    311a:	2100      	movs	r1, #0
    311c:	f7ff fdc9 	bl	2cb2 <boot_erase_region>
        assert(rc == 0);
    3120:	b9e0      	cbnz	r0, 315c <boot_swap_sectors+0x100>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    3122:	6823      	ldr	r3, [r4, #0]
    3124:	2b01      	cmp	r3, #1
    3126:	d01f      	beq.n	3168 <boot_swap_sectors+0x10c>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    3128:	f8cd 8004 	str.w	r8, [sp, #4]
    312c:	2300      	movs	r3, #0
    312e:	9300      	str	r3, [sp, #0]
    3130:	4633      	mov	r3, r6
    3132:	9a05      	ldr	r2, [sp, #20]
    3134:	9906      	ldr	r1, [sp, #24]
    3136:	4628      	mov	r0, r5
    3138:	f7ff fdc0 	bl	2cbc <boot_copy_region>
        assert(rc == 0);
    313c:	2800      	cmp	r0, #0
    313e:	d146      	bne.n	31ce <boot_swap_sectors+0x172>
        rc = boot_write_status(state, bs);
    3140:	4621      	mov	r1, r4
    3142:	4628      	mov	r0, r5
    3144:	f7ff fd81 	bl	2c4a <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    3148:	2302      	movs	r3, #2
    314a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    314c:	2800      	cmp	r0, #0
    314e:	d0bd      	beq.n	30cc <boot_swap_sectors+0x70>
    3150:	2300      	movs	r3, #0
    3152:	461a      	mov	r2, r3
    3154:	4619      	mov	r1, r3
    3156:	4618      	mov	r0, r3
    3158:	f7fe fc3c 	bl	19d4 <__assert_func>
        assert(rc == 0);
    315c:	2300      	movs	r3, #0
    315e:	461a      	mov	r2, r3
    3160:	4619      	mov	r1, r3
    3162:	4618      	mov	r0, r3
    3164:	f7fe fc36 	bl	19d4 <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    3168:	4622      	mov	r2, r4
    316a:	9905      	ldr	r1, [sp, #20]
    316c:	4628      	mov	r0, r5
    316e:	f7ff feaf 	bl	2ed0 <swap_status_init>
            assert(rc == 0);
    3172:	b9d0      	cbnz	r0, 31aa <boot_swap_sectors+0x14e>
            if (!bs->use_scratch) {
    3174:	79a3      	ldrb	r3, [r4, #6]
    3176:	2b00      	cmp	r3, #0
    3178:	d1d6      	bne.n	3128 <boot_swap_sectors+0xcc>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    317a:	9907      	ldr	r1, [sp, #28]
    317c:	4628      	mov	r0, r5
    317e:	f7ff fe65 	bl	2e4c <swap_erase_trailer_sectors>
                assert(rc == 0);
    3182:	b9c0      	cbnz	r0, 31b6 <boot_swap_sectors+0x15a>
                rc = swap_status_init(state, fap_primary_slot, bs);
    3184:	4622      	mov	r2, r4
    3186:	9907      	ldr	r1, [sp, #28]
    3188:	4628      	mov	r0, r5
    318a:	f7ff fea1 	bl	2ed0 <swap_status_init>
                assert(rc == 0);
    318e:	b9c0      	cbnz	r0, 31c2 <boot_swap_sectors+0x166>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    3190:	9805      	ldr	r0, [sp, #20]
    3192:	6882      	ldr	r2, [r0, #8]
    3194:	2100      	movs	r1, #0
    3196:	f7ff fd8c 	bl	2cb2 <boot_erase_region>
                assert(rc == 0);
    319a:	2800      	cmp	r0, #0
    319c:	d0c4      	beq.n	3128 <boot_swap_sectors+0xcc>
    319e:	2300      	movs	r3, #0
    31a0:	461a      	mov	r2, r3
    31a2:	4619      	mov	r1, r3
    31a4:	4618      	mov	r0, r3
    31a6:	f7fe fc15 	bl	19d4 <__assert_func>
            assert(rc == 0);
    31aa:	2300      	movs	r3, #0
    31ac:	461a      	mov	r2, r3
    31ae:	4619      	mov	r1, r3
    31b0:	4618      	mov	r0, r3
    31b2:	f7fe fc0f 	bl	19d4 <__assert_func>
                assert(rc == 0);
    31b6:	2300      	movs	r3, #0
    31b8:	461a      	mov	r2, r3
    31ba:	4619      	mov	r1, r3
    31bc:	4618      	mov	r0, r3
    31be:	f7fe fc09 	bl	19d4 <__assert_func>
                assert(rc == 0);
    31c2:	2300      	movs	r3, #0
    31c4:	461a      	mov	r2, r3
    31c6:	4619      	mov	r1, r3
    31c8:	4618      	mov	r0, r3
    31ca:	f7fe fc03 	bl	19d4 <__assert_func>
        assert(rc == 0);
    31ce:	2300      	movs	r3, #0
    31d0:	461a      	mov	r2, r3
    31d2:	4619      	mov	r1, r3
    31d4:	4618      	mov	r0, r3
    31d6:	f7fe fbfd 	bl	19d4 <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    31da:	463a      	mov	r2, r7
    31dc:	4631      	mov	r1, r6
    31de:	9806      	ldr	r0, [sp, #24]
    31e0:	f7ff fd67 	bl	2cb2 <boot_erase_region>
        assert(rc == 0);
    31e4:	b9e8      	cbnz	r0, 3222 <boot_swap_sectors+0x1c6>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    31e6:	f8cd 8004 	str.w	r8, [sp, #4]
    31ea:	9600      	str	r6, [sp, #0]
    31ec:	4633      	mov	r3, r6
    31ee:	9a06      	ldr	r2, [sp, #24]
    31f0:	9907      	ldr	r1, [sp, #28]
    31f2:	4628      	mov	r0, r5
    31f4:	f7ff fd62 	bl	2cbc <boot_copy_region>
        assert(rc == 0);
    31f8:	b9c8      	cbnz	r0, 322e <boot_swap_sectors+0x1d2>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    31fa:	6823      	ldr	r3, [r4, #0]
    31fc:	2b01      	cmp	r3, #1
    31fe:	d101      	bne.n	3204 <boot_swap_sectors+0x1a8>
    3200:	79a3      	ldrb	r3, [r4, #6]
    3202:	b1d3      	cbz	r3, 323a <boot_swap_sectors+0x1de>
        rc = boot_write_status(state, bs);
    3204:	4621      	mov	r1, r4
    3206:	4628      	mov	r0, r5
    3208:	f7ff fd1f 	bl	2c4a <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    320c:	2303      	movs	r3, #3
    320e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3210:	2800      	cmp	r0, #0
    3212:	f43f af5f 	beq.w	30d4 <boot_swap_sectors+0x78>
    3216:	2300      	movs	r3, #0
    3218:	461a      	mov	r2, r3
    321a:	4619      	mov	r1, r3
    321c:	4618      	mov	r0, r3
    321e:	f7fe fbd9 	bl	19d4 <__assert_func>
        assert(rc == 0);
    3222:	2300      	movs	r3, #0
    3224:	461a      	mov	r2, r3
    3226:	4619      	mov	r1, r3
    3228:	4618      	mov	r0, r3
    322a:	f7fe fbd3 	bl	19d4 <__assert_func>
        assert(rc == 0);
    322e:	2300      	movs	r3, #0
    3230:	461a      	mov	r2, r3
    3232:	4619      	mov	r1, r3
    3234:	4618      	mov	r0, r3
    3236:	f7fe fbcd 	bl	19d4 <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    323a:	9906      	ldr	r1, [sp, #24]
    323c:	4628      	mov	r0, r5
    323e:	f7ff fe05 	bl	2e4c <swap_erase_trailer_sectors>
            assert(rc == 0);
    3242:	2800      	cmp	r0, #0
    3244:	d0de      	beq.n	3204 <boot_swap_sectors+0x1a8>
    3246:	2300      	movs	r3, #0
    3248:	461a      	mov	r2, r3
    324a:	4619      	mov	r1, r3
    324c:	4618      	mov	r0, r3
    324e:	f7fe fbc1 	bl	19d4 <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    3252:	463a      	mov	r2, r7
    3254:	4631      	mov	r1, r6
    3256:	9807      	ldr	r0, [sp, #28]
    3258:	f7ff fd2b 	bl	2cb2 <boot_erase_region>
        assert(rc == 0);
    325c:	2800      	cmp	r0, #0
    325e:	d15b      	bne.n	3318 <boot_swap_sectors+0x2bc>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    3260:	f8cd 8004 	str.w	r8, [sp, #4]
    3264:	9600      	str	r6, [sp, #0]
    3266:	2300      	movs	r3, #0
    3268:	9a07      	ldr	r2, [sp, #28]
    326a:	9905      	ldr	r1, [sp, #20]
    326c:	4628      	mov	r0, r5
    326e:	f7ff fd25 	bl	2cbc <boot_copy_region>
        assert(rc == 0);
    3272:	2800      	cmp	r0, #0
    3274:	d156      	bne.n	3324 <boot_swap_sectors+0x2c8>
        if (bs->use_scratch) {
    3276:	79a3      	ldrb	r3, [r4, #6]
    3278:	2b00      	cmp	r3, #0
    327a:	d02e      	beq.n	32da <boot_swap_sectors+0x27e>
            scratch_trailer_off = boot_status_off(fap_scratch);
    327c:	9805      	ldr	r0, [sp, #20]
    327e:	f000 faa5 	bl	37cc <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    3282:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    3284:	6eab      	ldr	r3, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    3286:	005b      	lsls	r3, r3, #1
    3288:	9301      	str	r3, [sp, #4]
    328a:	9600      	str	r6, [sp, #0]
    328c:	4603      	mov	r3, r0
    328e:	9a07      	ldr	r2, [sp, #28]
    3290:	9905      	ldr	r1, [sp, #20]
    3292:	4628      	mov	r0, r5
    3294:	f7ff fd12 	bl	2cbc <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    3298:	2800      	cmp	r0, #0
    329a:	d149      	bne.n	3330 <boot_swap_sectors+0x2d4>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    329c:	a903      	add	r1, sp, #12
    329e:	2003      	movs	r0, #3
    32a0:	f000 fb08 	bl	38b4 <boot_read_swap_state_by_id>
            assert(rc == 0);
    32a4:	2800      	cmp	r0, #0
    32a6:	d149      	bne.n	333c <boot_swap_sectors+0x2e0>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    32a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    32ac:	2b01      	cmp	r3, #1
    32ae:	d04b      	beq.n	3348 <boot_swap_sectors+0x2ec>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    32b0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    32b4:	2901      	cmp	r1, #1
    32b6:	d005      	beq.n	32c4 <boot_swap_sectors+0x268>
                rc = boot_write_swap_info(fap_primary_slot,
    32b8:	2200      	movs	r2, #0
    32ba:	9807      	ldr	r0, [sp, #28]
    32bc:	f000 fb40 	bl	3940 <boot_write_swap_info>
                assert(rc == 0);
    32c0:	2800      	cmp	r0, #0
    32c2:	d14c      	bne.n	335e <boot_swap_sectors+0x302>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    32c4:	68a1      	ldr	r1, [r4, #8]
    32c6:	9807      	ldr	r0, [sp, #28]
    32c8:	f000 fb5c 	bl	3984 <boot_write_swap_size>
            assert(rc == 0);
    32cc:	2800      	cmp	r0, #0
    32ce:	d14c      	bne.n	336a <boot_swap_sectors+0x30e>
            rc = boot_write_magic(fap_primary_slot);
    32d0:	9807      	ldr	r0, [sp, #28]
    32d2:	f000 fb17 	bl	3904 <boot_write_magic>
            assert(rc == 0);
    32d6:	2800      	cmp	r0, #0
    32d8:	d14d      	bne.n	3376 <boot_swap_sectors+0x31a>
        erase_scratch = bs->use_scratch;
    32da:	79a6      	ldrb	r6, [r4, #6]
        bs->use_scratch = 0;
    32dc:	2300      	movs	r3, #0
    32de:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    32e0:	4621      	mov	r1, r4
    32e2:	4628      	mov	r0, r5
    32e4:	f7ff fcb1 	bl	2c4a <boot_write_status>
        bs->idx++;
    32e8:	6823      	ldr	r3, [r4, #0]
    32ea:	3301      	adds	r3, #1
    32ec:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    32ee:	2301      	movs	r3, #1
    32f0:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    32f2:	2800      	cmp	r0, #0
    32f4:	d145      	bne.n	3382 <boot_swap_sectors+0x326>
        if (erase_scratch) {
    32f6:	2e00      	cmp	r6, #0
    32f8:	f43f aef0 	beq.w	30dc <boot_swap_sectors+0x80>
            rc = boot_erase_region(fap_scratch, 0, sz);
    32fc:	463a      	mov	r2, r7
    32fe:	2100      	movs	r1, #0
    3300:	9805      	ldr	r0, [sp, #20]
    3302:	f7ff fcd6 	bl	2cb2 <boot_erase_region>
            assert(rc == 0);
    3306:	2800      	cmp	r0, #0
    3308:	f43f aee8 	beq.w	30dc <boot_swap_sectors+0x80>
    330c:	2300      	movs	r3, #0
    330e:	461a      	mov	r2, r3
    3310:	4619      	mov	r1, r3
    3312:	4618      	mov	r0, r3
    3314:	f7fe fb5e 	bl	19d4 <__assert_func>
        assert(rc == 0);
    3318:	2300      	movs	r3, #0
    331a:	461a      	mov	r2, r3
    331c:	4619      	mov	r1, r3
    331e:	4618      	mov	r0, r3
    3320:	f7fe fb58 	bl	19d4 <__assert_func>
        assert(rc == 0);
    3324:	2300      	movs	r3, #0
    3326:	461a      	mov	r2, r3
    3328:	4619      	mov	r1, r3
    332a:	4618      	mov	r0, r3
    332c:	f7fe fb52 	bl	19d4 <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    3330:	2300      	movs	r3, #0
    3332:	461a      	mov	r2, r3
    3334:	4619      	mov	r1, r3
    3336:	4618      	mov	r0, r3
    3338:	f7fe fb4c 	bl	19d4 <__assert_func>
            assert(rc == 0);
    333c:	2300      	movs	r3, #0
    333e:	461a      	mov	r2, r3
    3340:	4619      	mov	r1, r3
    3342:	4618      	mov	r0, r3
    3344:	f7fe fb46 	bl	19d4 <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    3348:	9807      	ldr	r0, [sp, #28]
    334a:	f000 faf2 	bl	3932 <boot_write_image_ok>
                assert(rc == 0);
    334e:	2800      	cmp	r0, #0
    3350:	d0ae      	beq.n	32b0 <boot_swap_sectors+0x254>
    3352:	2300      	movs	r3, #0
    3354:	461a      	mov	r2, r3
    3356:	4619      	mov	r1, r3
    3358:	4618      	mov	r0, r3
    335a:	f7fe fb3b 	bl	19d4 <__assert_func>
                assert(rc == 0);
    335e:	2300      	movs	r3, #0
    3360:	461a      	mov	r2, r3
    3362:	4619      	mov	r1, r3
    3364:	4618      	mov	r0, r3
    3366:	f7fe fb35 	bl	19d4 <__assert_func>
            assert(rc == 0);
    336a:	2300      	movs	r3, #0
    336c:	461a      	mov	r2, r3
    336e:	4619      	mov	r1, r3
    3370:	4618      	mov	r0, r3
    3372:	f7fe fb2f 	bl	19d4 <__assert_func>
            assert(rc == 0);
    3376:	2300      	movs	r3, #0
    3378:	461a      	mov	r2, r3
    337a:	4619      	mov	r1, r3
    337c:	4618      	mov	r0, r3
    337e:	f7fe fb29 	bl	19d4 <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    3382:	2300      	movs	r3, #0
    3384:	461a      	mov	r2, r3
    3386:	4619      	mov	r1, r3
    3388:	4618      	mov	r0, r3
    338a:	f7fe fb23 	bl	19d4 <__assert_func>

0000338e <boot_read_image_header>:
{
    338e:	b510      	push	{r4, lr}
    3390:	b082      	sub	sp, #8
    3392:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    3394:	2000      	movs	r0, #0
    3396:	f000 fcb0 	bl	3cfa <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    339a:	a901      	add	r1, sp, #4
    339c:	b2c0      	uxtb	r0, r0
    339e:	f7fe ff6d 	bl	227c <flash_area_open>
    if (rc != 0) {
    33a2:	b118      	cbz	r0, 33ac <boot_read_image_header+0x1e>
        rc = BOOT_EFLASH;
    33a4:	2301      	movs	r3, #1
}
    33a6:	4618      	mov	r0, r3
    33a8:	b002      	add	sp, #8
    33aa:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    33ac:	2320      	movs	r3, #32
    33ae:	4622      	mov	r2, r4
    33b0:	2100      	movs	r1, #0
    33b2:	9801      	ldr	r0, [sp, #4]
    33b4:	f7fe ffc0 	bl	2338 <flash_area_read>
    if (rc != 0) {
    33b8:	4603      	mov	r3, r0
    33ba:	2800      	cmp	r0, #0
    33bc:	d0f3      	beq.n	33a6 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    33be:	2301      	movs	r3, #1
    33c0:	e7f1      	b.n	33a6 <boot_read_image_header+0x18>
	...

000033c4 <swap_read_status_bytes>:
{
    33c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33c8:	b083      	sub	sp, #12
    33ca:	4606      	mov	r6, r0
    33cc:	4689      	mov	r9, r1
    33ce:	4693      	mov	fp, r2
    off = boot_status_off(fap);
    33d0:	f000 f9fc 	bl	37cc <boot_status_off>
    33d4:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    33d6:	4631      	mov	r1, r6
    33d8:	2000      	movs	r0, #0
    33da:	f000 f9e8 	bl	37ae <boot_status_entries>
    if (max_entries < 0) {
    33de:	1e07      	subs	r7, r0, #0
    33e0:	db3f      	blt.n	3462 <swap_read_status_bytes+0x9e>
    for (i = 0; i < max_entries; i++) {
    33e2:	2400      	movs	r4, #0
    found_idx = 0;
    33e4:	46a2      	mov	sl, r4
    found = 0;
    33e6:	4625      	mov	r5, r4
    33e8:	e007      	b.n	33fa <swap_read_status_bytes+0x36>
            if (found && !found_idx) {
    33ea:	b12d      	cbz	r5, 33f8 <swap_read_status_bytes+0x34>
    33ec:	f1ba 0f00 	cmp.w	sl, #0
    33f0:	d102      	bne.n	33f8 <swap_read_status_bytes+0x34>
                found_idx = i;
    33f2:	46a2      	mov	sl, r4
    33f4:	e000      	b.n	33f8 <swap_read_status_bytes+0x34>
            found = 1;
    33f6:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
    33f8:	3401      	adds	r4, #1
    33fa:	42bc      	cmp	r4, r7
    33fc:	da14      	bge.n	3428 <swap_read_status_bytes+0x64>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    33fe:	f8d9 1068 	ldr.w	r1, [r9, #104]	; 0x68
    3402:	2301      	movs	r3, #1
    3404:	f10d 0207 	add.w	r2, sp, #7
    3408:	fb01 8104 	mla	r1, r1, r4, r8
    340c:	4630      	mov	r0, r6
    340e:	f7fe ffd6 	bl	23be <flash_area_read_is_empty>
        if (rc < 0) {
    3412:	2800      	cmp	r0, #0
    3414:	db27      	blt.n	3466 <swap_read_status_bytes+0xa2>
        if (rc == 1) {
    3416:	2801      	cmp	r0, #1
    3418:	d0e7      	beq.n	33ea <swap_read_status_bytes+0x26>
        } else if (!found) {
    341a:	2d00      	cmp	r5, #0
    341c:	d0eb      	beq.n	33f6 <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    341e:	f1ba 0f00 	cmp.w	sl, #0
    3422:	d0e9      	beq.n	33f8 <swap_read_status_bytes+0x34>
            invalid = 1;
    3424:	4629      	mov	r1, r5
    3426:	e000      	b.n	342a <swap_read_status_bytes+0x66>
    invalid = 0;
    3428:	2100      	movs	r1, #0
    if (invalid) {
    342a:	b9a1      	cbnz	r1, 3456 <swap_read_status_bytes+0x92>
    if (found) {
    342c:	b1e5      	cbz	r5, 3468 <swap_read_status_bytes+0xa4>
        if (!found_idx) {
    342e:	f1ba 0f00 	cmp.w	sl, #0
    3432:	d000      	beq.n	3436 <swap_read_status_bytes+0x72>
    3434:	4654      	mov	r4, sl
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    3436:	4b0e      	ldr	r3, [pc, #56]	; (3470 <swap_read_status_bytes+0xac>)
    3438:	fb83 2304 	smull	r2, r3, r3, r4
    343c:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    3440:	1c5a      	adds	r2, r3, #1
    3442:	f8cb 2000 	str.w	r2, [fp]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    3446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    344a:	1ae2      	subs	r2, r4, r3
    344c:	1c53      	adds	r3, r2, #1
    344e:	f88b 3004 	strb.w	r3, [fp, #4]
    return 0;
    3452:	460d      	mov	r5, r1
    3454:	e008      	b.n	3468 <swap_read_status_bytes+0xa4>
        assert(0);
    3456:	2300      	movs	r3, #0
    3458:	461a      	mov	r2, r3
    345a:	4619      	mov	r1, r3
    345c:	4618      	mov	r0, r3
    345e:	f7fe fab9 	bl	19d4 <__assert_func>
        return BOOT_EBADARGS;
    3462:	2507      	movs	r5, #7
    3464:	e000      	b.n	3468 <swap_read_status_bytes+0xa4>
            return BOOT_EFLASH;
    3466:	2501      	movs	r5, #1
}
    3468:	4628      	mov	r0, r5
    346a:	b003      	add	sp, #12
    346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3470:	55555556 	.word	0x55555556

00003474 <boot_status_internal_off>:
{
    3474:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    3476:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    347a:	6803      	ldr	r3, [r0, #0]
    347c:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    347e:	7902      	ldrb	r2, [r0, #4]
    3480:	3a01      	subs	r2, #1
    3482:	fb01 f102 	mul.w	r1, r1, r2
}
    3486:	fb03 1004 	mla	r0, r3, r4, r1
    348a:	bc10      	pop	{r4}
    348c:	4770      	bx	lr

0000348e <boot_slots_compatible>:
{
    348e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return BOOT_IMG(state, slot).num_sectors;
    3492:	6a86      	ldr	r6, [r0, #40]	; 0x28
    3494:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    3498:	2e80      	cmp	r6, #128	; 0x80
    349a:	d859      	bhi.n	3550 <boot_slots_compatible+0xc2>
    349c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    34a0:	d859      	bhi.n	3556 <boot_slots_compatible+0xc8>
    34a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
    34a4:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    34a8:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    34aa:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    34ac:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    34ae:	46a9      	mov	r9, r5
    i = sz0 = primary_slot_sz = 0;
    34b0:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    34b2:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    34b4:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    34b6:	e013      	b.n	34e0 <boot_slots_compatible+0x52>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    34b8:	6a47      	ldr	r7, [r0, #36]	; 0x24
    34ba:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    34be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    34c2:	4457      	add	r7, sl
    34c4:	68bf      	ldr	r7, [r7, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    34c6:	443b      	add	r3, r7
    34c8:	6d07      	ldr	r7, [r0, #80]	; 0x50
    34ca:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    34ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    34d2:	4457      	add	r7, sl
    34d4:	68bf      	ldr	r7, [r7, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    34d6:	443a      	add	r2, r7
            i++;
    34d8:	3101      	adds	r1, #1
            j++;
    34da:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    34dc:	4293      	cmp	r3, r2
    34de:	d021      	beq.n	3524 <boot_slots_compatible+0x96>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    34e0:	42b1      	cmp	r1, r6
    34e2:	d301      	bcc.n	34e8 <boot_slots_compatible+0x5a>
    34e4:	4564      	cmp	r4, ip
    34e6:	d227      	bcs.n	3538 <boot_slots_compatible+0xaa>
        if (sz0 == sz1) {
    34e8:	4293      	cmp	r3, r2
    34ea:	d0e5      	beq.n	34b8 <boot_slots_compatible+0x2a>
        } else if (sz0 < sz1) {
    34ec:	4293      	cmp	r3, r2
    34ee:	d20c      	bcs.n	350a <boot_slots_compatible+0x7c>
    34f0:	6a47      	ldr	r7, [r0, #36]	; 0x24
    34f2:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    34f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    34fa:	4457      	add	r7, sl
    34fc:	68bf      	ldr	r7, [r7, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    34fe:	443b      	add	r3, r7
            if (smaller == 2) {
    3500:	2d02      	cmp	r5, #2
    3502:	d02a      	beq.n	355a <boot_slots_compatible+0xcc>
            i++;
    3504:	3101      	adds	r1, #1
            smaller = 1;
    3506:	2501      	movs	r5, #1
    3508:	e7e8      	b.n	34dc <boot_slots_compatible+0x4e>
    350a:	6d07      	ldr	r7, [r0, #80]	; 0x50
    350c:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    3510:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3514:	4457      	add	r7, sl
    3516:	68bf      	ldr	r7, [r7, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    3518:	443a      	add	r2, r7
            if (smaller == 1) {
    351a:	2d01      	cmp	r5, #1
    351c:	d01f      	beq.n	355e <boot_slots_compatible+0xd0>
            j++;
    351e:	3401      	adds	r4, #1
            smaller = 2;
    3520:	2502      	movs	r5, #2
    3522:	e7db      	b.n	34dc <boot_slots_compatible+0x4e>
            primary_slot_sz += sz0;
    3524:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    3526:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    3528:	4543      	cmp	r3, r8
    352a:	d81a      	bhi.n	3562 <boot_slots_compatible+0xd4>
    352c:	4542      	cmp	r2, r8
    352e:	d81a      	bhi.n	3566 <boot_slots_compatible+0xd8>
            smaller = sz0 = sz1 = 0;
    3530:	2500      	movs	r5, #0
    3532:	462a      	mov	r2, r5
    3534:	462b      	mov	r3, r5
    3536:	e7d3      	b.n	34e0 <boot_slots_compatible+0x52>
    if ((i != num_sectors_primary) ||
    3538:	42b1      	cmp	r1, r6
    353a:	d001      	beq.n	3540 <boot_slots_compatible+0xb2>
        return 0;
    353c:	2000      	movs	r0, #0
    353e:	e008      	b.n	3552 <boot_slots_compatible+0xc4>
    if ((i != num_sectors_primary) ||
    3540:	4564      	cmp	r4, ip
    3542:	d001      	beq.n	3548 <boot_slots_compatible+0xba>
        return 0;
    3544:	2000      	movs	r0, #0
    3546:	e004      	b.n	3552 <boot_slots_compatible+0xc4>
        (j != num_sectors_secondary) ||
    3548:	45ce      	cmp	lr, r9
    354a:	d00e      	beq.n	356a <boot_slots_compatible+0xdc>
        return 0;
    354c:	2000      	movs	r0, #0
    354e:	e000      	b.n	3552 <boot_slots_compatible+0xc4>
        return 0;
    3550:	2000      	movs	r0, #0
}
    3552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
    3556:	2000      	movs	r0, #0
    3558:	e7fb      	b.n	3552 <boot_slots_compatible+0xc4>
                return 0;
    355a:	2000      	movs	r0, #0
    355c:	e7f9      	b.n	3552 <boot_slots_compatible+0xc4>
                return 0;
    355e:	2000      	movs	r0, #0
    3560:	e7f7      	b.n	3552 <boot_slots_compatible+0xc4>
                return 0;
    3562:	2000      	movs	r0, #0
    3564:	e7f5      	b.n	3552 <boot_slots_compatible+0xc4>
    3566:	2000      	movs	r0, #0
    3568:	e7f3      	b.n	3552 <boot_slots_compatible+0xc4>
    return 1;
    356a:	2001      	movs	r0, #1
    356c:	e7f1      	b.n	3552 <boot_slots_compatible+0xc4>
	...

00003570 <swap_status_source>:
{
    3570:	b530      	push	{r4, r5, lr}
    3572:	b085      	sub	sp, #20
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3574:	4669      	mov	r1, sp
    3576:	2001      	movs	r0, #1
    3578:	f000 f99c 	bl	38b4 <boot_read_swap_state_by_id>
    assert(rc == 0);
    357c:	b938      	cbnz	r0, 358e <swap_status_source+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    357e:	a902      	add	r1, sp, #8
    3580:	2003      	movs	r0, #3
    3582:	f000 f997 	bl	38b4 <boot_read_swap_state_by_id>
    assert(rc == 0);
    3586:	4605      	mov	r5, r0
    3588:	b938      	cbnz	r0, 359a <swap_status_source+0x2a>
    358a:	2400      	movs	r4, #0
    358c:	e00c      	b.n	35a8 <swap_status_source+0x38>
    assert(rc == 0);
    358e:	2300      	movs	r3, #0
    3590:	461a      	mov	r2, r3
    3592:	4619      	mov	r1, r3
    3594:	4618      	mov	r0, r3
    3596:	f7fe fa1d 	bl	19d4 <__assert_func>
    assert(rc == 0);
    359a:	2300      	movs	r3, #0
    359c:	461a      	mov	r2, r3
    359e:	4619      	mov	r1, r3
    35a0:	4618      	mov	r0, r3
    35a2:	f7fe fa17 	bl	19d4 <__assert_func>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    35a6:	3401      	adds	r4, #1
    35a8:	2c03      	cmp	r4, #3
    35aa:	d820      	bhi.n	35ee <swap_status_source+0x7e>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    35ac:	f89d 1000 	ldrb.w	r1, [sp]
    35b0:	4b10      	ldr	r3, [pc, #64]	; (35f4 <swap_status_source+0x84>)
    35b2:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    35b6:	f000 f8e1 	bl	377c <boot_magic_compatible_check>
    35ba:	2800      	cmp	r0, #0
    35bc:	d0f3      	beq.n	35a6 <swap_status_source+0x36>
            boot_magic_compatible_check(table->bst_magic_scratch,
    35be:	4b0d      	ldr	r3, [pc, #52]	; (35f4 <swap_status_source+0x84>)
    35c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    35c4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    35c8:	7858      	ldrb	r0, [r3, #1]
    35ca:	f000 f8d7 	bl	377c <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    35ce:	2800      	cmp	r0, #0
    35d0:	d0e9      	beq.n	35a6 <swap_status_source+0x36>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    35d2:	4b08      	ldr	r3, [pc, #32]	; (35f4 <swap_status_source+0x84>)
    35d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    35d8:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    35da:	2b04      	cmp	r3, #4
    35dc:	d003      	beq.n	35e6 <swap_status_source+0x76>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    35de:	f89d 2002 	ldrb.w	r2, [sp, #2]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    35e2:	4293      	cmp	r3, r2
    35e4:	d1df      	bne.n	35a6 <swap_status_source+0x36>
            source = table->bst_status_source;
    35e6:	4b03      	ldr	r3, [pc, #12]	; (35f4 <swap_status_source+0x84>)
    35e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    35ec:	78e5      	ldrb	r5, [r4, #3]
}
    35ee:	4628      	mov	r0, r5
    35f0:	b005      	add	sp, #20
    35f2:	bd30      	pop	{r4, r5, pc}
    35f4:	00004f2c 	.word	0x00004f2c

000035f8 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    35f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fa:	b083      	sub	sp, #12
    35fc:	4605      	mov	r5, r0
    35fe:	460e      	mov	r6, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    3600:	2000      	movs	r0, #0
    primary_slot_size = 0;
    3602:	4603      	mov	r3, r0
    last_sector_idx = 0;
    3604:	4601      	mov	r1, r0
    3606:	e000      	b.n	360a <swap_run+0x12>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    3608:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
    360a:	4293      	cmp	r3, r2
    360c:	d301      	bcc.n	3612 <swap_run+0x1a>
    360e:	4283      	cmp	r3, r0
    3610:	d207      	bcs.n	3622 <swap_run+0x2a>
    3612:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    3614:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3618:	ea4f 078c 	mov.w	r7, ip, lsl #2
    361c:	443c      	add	r4, r7
    361e:	68a4      	ldr	r4, [r4, #8]
           primary_slot_size += boot_img_sector_size(state,
    3620:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
    3622:	4290      	cmp	r0, r2
    3624:	d301      	bcc.n	362a <swap_run+0x32>
    3626:	4283      	cmp	r3, r0
    3628:	d907      	bls.n	363a <swap_run+0x42>
    362a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    362c:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3630:	ea4f 078c 	mov.w	r7, ip, lsl #2
    3634:	443c      	add	r4, r7
    3636:	68a4      	ldr	r4, [r4, #8]
           secondary_slot_size += boot_img_sector_size(state,
    3638:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
    363a:	4293      	cmp	r3, r2
    363c:	d3e4      	bcc.n	3608 <swap_run+0x10>
    363e:	4290      	cmp	r0, r2
    3640:	d3e2      	bcc.n	3608 <swap_run+0x10>
                secondary_slot_size >= copy_size &&
    3642:	4283      	cmp	r3, r0
    3644:	d1e0      	bne.n	3608 <swap_run+0x10>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    3646:	2400      	movs	r4, #0
    3648:	e002      	b.n	3650 <swap_run+0x58>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    364a:	9901      	ldr	r1, [sp, #4]
    364c:	3901      	subs	r1, #1
        swap_idx++;
    364e:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    3650:	2900      	cmp	r1, #0
    3652:	db0e      	blt.n	3672 <swap_run+0x7a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    3654:	aa01      	add	r2, sp, #4
    3656:	4628      	mov	r0, r5
    3658:	f7ff fce9 	bl	302e <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    365c:	6833      	ldr	r3, [r6, #0]
    365e:	3b01      	subs	r3, #1
    3660:	42a3      	cmp	r3, r4
    3662:	d8f2      	bhi.n	364a <swap_run+0x52>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    3664:	4633      	mov	r3, r6
    3666:	462a      	mov	r2, r5
    3668:	4601      	mov	r1, r0
    366a:	9801      	ldr	r0, [sp, #4]
    366c:	f7ff fcf6 	bl	305c <boot_swap_sectors>
    3670:	e7eb      	b.n	364a <swap_run+0x52>
    }

}
    3672:	b003      	add	sp, #12
    3674:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003676 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    3676:	2801      	cmp	r0, #1
    3678:	d101      	bne.n	367e <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
    367a:	2001      	movs	r0, #1
}
    367c:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    367e:	2002      	movs	r0, #2
    3680:	4770      	bx	lr
	...

00003684 <boot_magic_decode>:
{
    3684:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    3686:	2210      	movs	r2, #16
    3688:	4903      	ldr	r1, [pc, #12]	; (3698 <boot_magic_decode+0x14>)
    368a:	f7fe fc81 	bl	1f90 <memcmp>
    368e:	b908      	cbnz	r0, 3694 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    3690:	2001      	movs	r0, #1
}
    3692:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    3694:	2002      	movs	r0, #2
    3696:	e7fc      	b.n	3692 <boot_magic_decode+0xe>
    3698:	00004f40 	.word	0x00004f40

0000369c <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    369c:	b530      	push	{r4, r5, lr}
    369e:	b087      	sub	sp, #28
    36a0:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    36a2:	4b14      	ldr	r3, [pc, #80]	; (36f4 <boot_find_status+0x58>)
    36a4:	881b      	ldrh	r3, [r3, #0]
    36a6:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    36aa:	2400      	movs	r4, #0
    36ac:	e000      	b.n	36b0 <boot_find_status+0x14>
    36ae:	3401      	adds	r4, #1
    36b0:	2c01      	cmp	r4, #1
    36b2:	d81a      	bhi.n	36ea <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    36b4:	4629      	mov	r1, r5
    36b6:	ab06      	add	r3, sp, #24
    36b8:	4423      	add	r3, r4
    36ba:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    36be:	f7fe fddd 	bl	227c <flash_area_open>
        if (rc != 0) {
    36c2:	4603      	mov	r3, r0
    36c4:	b998      	cbnz	r0, 36ee <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    36c6:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    36c8:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    36ca:	2310      	movs	r3, #16
    36cc:	aa02      	add	r2, sp, #8
    36ce:	3910      	subs	r1, #16
    36d0:	f7fe fe32 	bl	2338 <flash_area_read>
        if (rc != 0) {
    36d4:	4603      	mov	r3, r0
    36d6:	b950      	cbnz	r0, 36ee <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    36d8:	2210      	movs	r2, #16
    36da:	4907      	ldr	r1, [pc, #28]	; (36f8 <boot_find_status+0x5c>)
    36dc:	a802      	add	r0, sp, #8
    36de:	f7fe fc57 	bl	1f90 <memcmp>
    36e2:	4603      	mov	r3, r0
    36e4:	2800      	cmp	r0, #0
    36e6:	d1e2      	bne.n	36ae <boot_find_status+0x12>
    36e8:	e001      	b.n	36ee <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    36ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    36ee:	4618      	mov	r0, r3
    36f0:	b007      	add	sp, #28
    36f2:	bd30      	pop	{r4, r5, pc}
    36f4:	00004f3c 	.word	0x00004f3c
    36f8:	00004f40 	.word	0x00004f40

000036fc <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    36fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3700:	b083      	sub	sp, #12
    3702:	4606      	mov	r6, r0
    3704:	460f      	mov	r7, r1
    3706:	4690      	mov	r8, r2
    3708:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    370a:	f7fe fe4e 	bl	23aa <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    370e:	2c08      	cmp	r4, #8
    3710:	d823      	bhi.n	375a <boot_write_trailer+0x5e>
    3712:	4605      	mov	r5, r0
    3714:	2808      	cmp	r0, #8
    3716:	d823      	bhi.n	3760 <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    3718:	4630      	mov	r0, r6
    371a:	f7fe fe4b 	bl	23b4 <flash_area_erased_val>
    371e:	4681      	mov	r9, r0
    if (align < inlen) {
    3720:	42a5      	cmp	r5, r4
    3722:	d200      	bcs.n	3726 <boot_write_trailer+0x2a>
        align = inlen;
    3724:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
    3726:	4622      	mov	r2, r4
    3728:	4641      	mov	r1, r8
    372a:	4668      	mov	r0, sp
    372c:	f7fe fc54 	bl	1fd8 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    3730:	1b2a      	subs	r2, r5, r4
    3732:	fa5f f189 	uxtb.w	r1, r9
    3736:	eb0d 0004 	add.w	r0, sp, r4
    373a:	f7fe fc5a 	bl	1ff2 <memset>

    rc = flash_area_write(fap, off, buf, align);
    373e:	462b      	mov	r3, r5
    3740:	466a      	mov	r2, sp
    3742:	4639      	mov	r1, r7
    3744:	4630      	mov	r0, r6
    3746:	f7fe fe0a 	bl	235e <flash_area_write>
    if (rc != 0) {
    374a:	4603      	mov	r3, r0
    374c:	b918      	cbnz	r0, 3756 <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
    374e:	4618      	mov	r0, r3
    3750:	b003      	add	sp, #12
    3752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    3756:	2301      	movs	r3, #1
    3758:	e7f9      	b.n	374e <boot_write_trailer+0x52>
        return -1;
    375a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    375e:	e7f6      	b.n	374e <boot_write_trailer+0x52>
    3760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3764:	e7f3      	b.n	374e <boot_write_trailer+0x52>

00003766 <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    3766:	b510      	push	{r4, lr}
    3768:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    376a:	ac02      	add	r4, sp, #8
    376c:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    3770:	2301      	movs	r3, #1
    3772:	4622      	mov	r2, r4
    3774:	f7ff ffc2 	bl	36fc <boot_write_trailer>
}
    3778:	b002      	add	sp, #8
    377a:	bd10      	pop	{r4, pc}

0000377c <boot_magic_compatible_check>:
    switch (tbl_val) {
    377c:	2804      	cmp	r0, #4
    377e:	d00b      	beq.n	3798 <boot_magic_compatible_check+0x1c>
    3780:	2805      	cmp	r0, #5
    3782:	d104      	bne.n	378e <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    3784:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    3788:	bf18      	it	ne
    378a:	2001      	movne	r0, #1
    378c:	4770      	bx	lr
        return tbl_val == val;
    378e:	4288      	cmp	r0, r1
    3790:	bf14      	ite	ne
    3792:	2000      	movne	r0, #0
    3794:	2001      	moveq	r0, #1
    3796:	4770      	bx	lr
        return 1;
    3798:	2001      	movs	r0, #1
}
    379a:	4770      	bx	lr

0000379c <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    379c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    37a0:	01d8      	lsls	r0, r3, #7
}
    37a2:	4770      	bx	lr

000037a4 <boot_trailer_sz>:
{
    37a4:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    37a6:	f7ff fff9 	bl	379c <boot_status_sz>
}
    37aa:	3030      	adds	r0, #48	; 0x30
    37ac:	bd08      	pop	{r3, pc}

000037ae <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    37ae:	780b      	ldrb	r3, [r1, #0]
    37b0:	2b03      	cmp	r3, #3
    37b2:	d006      	beq.n	37c2 <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    37b4:	3b01      	subs	r3, #1
    37b6:	b2db      	uxtb	r3, r3
    37b8:	2b01      	cmp	r3, #1
    37ba:	d804      	bhi.n	37c6 <boot_status_entries+0x18>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    37bc:	f44f 70c0 	mov.w	r0, #384	; 0x180
    37c0:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    37c2:	2003      	movs	r0, #3
    37c4:	4770      	bx	lr
    return -1;
    37c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    37ca:	4770      	bx	lr

000037cc <boot_status_off>:
{
    37cc:	b510      	push	{r4, lr}
    37ce:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    37d0:	f7fe fdeb 	bl	23aa <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    37d4:	f7ff ffe6 	bl	37a4 <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    37d8:	68a3      	ldr	r3, [r4, #8]
    37da:	4283      	cmp	r3, r0
    37dc:	d301      	bcc.n	37e2 <boot_status_off+0x16>
}
    37de:	1a18      	subs	r0, r3, r0
    37e0:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    37e2:	2300      	movs	r3, #0
    37e4:	461a      	mov	r2, r3
    37e6:	4619      	mov	r1, r3
    37e8:	4618      	mov	r0, r3
    37ea:	f7fe f8f3 	bl	19d4 <__assert_func>

000037ee <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    37ee:	6880      	ldr	r0, [r0, #8]
}
    37f0:	3828      	subs	r0, #40	; 0x28
    37f2:	4770      	bx	lr

000037f4 <boot_read_swap_state>:
{
    37f4:	b530      	push	{r4, r5, lr}
    37f6:	b087      	sub	sp, #28
    37f8:	4604      	mov	r4, r0
    37fa:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    37fc:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    37fe:	2310      	movs	r3, #16
    3800:	aa02      	add	r2, sp, #8
    3802:	3910      	subs	r1, #16
    3804:	f7fe fddb 	bl	23be <flash_area_read_is_empty>
    if (rc < 0) {
    3808:	2800      	cmp	r0, #0
    380a:	db4a      	blt.n	38a2 <boot_read_swap_state+0xae>
    if (rc == 1) {
    380c:	2801      	cmp	r0, #1
    380e:	d03e      	beq.n	388e <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
    3810:	a802      	add	r0, sp, #8
    3812:	f7ff ff37 	bl	3684 <boot_magic_decode>
    3816:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
    3818:	4620      	mov	r0, r4
    381a:	f7ff ffe8 	bl	37ee <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    381e:	2301      	movs	r3, #1
    3820:	f10d 0207 	add.w	r2, sp, #7
    3824:	4601      	mov	r1, r0
    3826:	4620      	mov	r0, r4
    3828:	f7fe fdc9 	bl	23be <flash_area_read_is_empty>
    if (rc < 0) {
    382c:	2800      	cmp	r0, #0
    382e:	db3b      	blt.n	38a8 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3830:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3834:	f003 020f 	and.w	r2, r3, #15
    3838:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    383a:	091b      	lsrs	r3, r3, #4
    383c:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    383e:	2801      	cmp	r0, #1
    3840:	d001      	beq.n	3846 <boot_read_swap_state+0x52>
    3842:	2a04      	cmp	r2, #4
    3844:	d903      	bls.n	384e <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3846:	2301      	movs	r3, #1
    3848:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    384a:	2300      	movs	r3, #0
    384c:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    384e:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    3850:	2301      	movs	r3, #1
    3852:	1caa      	adds	r2, r5, #2
    3854:	3920      	subs	r1, #32
    3856:	4620      	mov	r0, r4
    3858:	f7fe fdb1 	bl	23be <flash_area_read_is_empty>
    if (rc < 0) {
    385c:	2800      	cmp	r0, #0
    385e:	db25      	blt.n	38ac <boot_read_swap_state+0xb8>
    if (rc == 1) {
    3860:	2801      	cmp	r0, #1
    3862:	d017      	beq.n	3894 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    3864:	78a8      	ldrb	r0, [r5, #2]
    3866:	f7ff ff06 	bl	3676 <boot_flag_decode>
    386a:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    386c:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    386e:	2301      	movs	r3, #1
    3870:	1cea      	adds	r2, r5, #3
    3872:	3918      	subs	r1, #24
    3874:	4620      	mov	r0, r4
    3876:	f7fe fda2 	bl	23be <flash_area_read_is_empty>
    if (rc < 0) {
    387a:	2800      	cmp	r0, #0
    387c:	db18      	blt.n	38b0 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    387e:	2801      	cmp	r0, #1
    3880:	d00b      	beq.n	389a <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    3882:	78e8      	ldrb	r0, [r5, #3]
    3884:	f7ff fef7 	bl	3676 <boot_flag_decode>
    3888:	70e8      	strb	r0, [r5, #3]
    return 0;
    388a:	2000      	movs	r0, #0
    388c:	e00a      	b.n	38a4 <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
    388e:	2303      	movs	r3, #3
    3890:	702b      	strb	r3, [r5, #0]
    3892:	e7c1      	b.n	3818 <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
    3894:	2303      	movs	r3, #3
    3896:	70ab      	strb	r3, [r5, #2]
    3898:	e7e8      	b.n	386c <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
    389a:	2303      	movs	r3, #3
    389c:	70eb      	strb	r3, [r5, #3]
    return 0;
    389e:	2000      	movs	r0, #0
    38a0:	e000      	b.n	38a4 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    38a2:	2001      	movs	r0, #1
}
    38a4:	b007      	add	sp, #28
    38a6:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    38a8:	2001      	movs	r0, #1
    38aa:	e7fb      	b.n	38a4 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    38ac:	2001      	movs	r0, #1
    38ae:	e7f9      	b.n	38a4 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    38b0:	2001      	movs	r0, #1
    38b2:	e7f7      	b.n	38a4 <boot_read_swap_state+0xb0>

000038b4 <boot_read_swap_state_by_id>:
{
    38b4:	b510      	push	{r4, lr}
    38b6:	b082      	sub	sp, #8
    38b8:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    38ba:	a901      	add	r1, sp, #4
    38bc:	b2c0      	uxtb	r0, r0
    38be:	f7fe fcdd 	bl	227c <flash_area_open>
    if (rc != 0) {
    38c2:	b110      	cbz	r0, 38ca <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    38c4:	2001      	movs	r0, #1
}
    38c6:	b002      	add	sp, #8
    38c8:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    38ca:	4621      	mov	r1, r4
    38cc:	9801      	ldr	r0, [sp, #4]
    38ce:	f7ff ff91 	bl	37f4 <boot_read_swap_state>
    return rc;
    38d2:	e7f8      	b.n	38c6 <boot_read_swap_state_by_id+0x12>

000038d4 <boot_read_swap_size>:
{
    38d4:	b530      	push	{r4, r5, lr}
    38d6:	b083      	sub	sp, #12
    38d8:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    38da:	a901      	add	r1, sp, #4
    38dc:	f7ff fede 	bl	369c <boot_find_status>
    if (rc == 0) {
    38e0:	4603      	mov	r3, r0
    38e2:	b110      	cbz	r0, 38ea <boot_read_swap_size+0x16>
}
    38e4:	4618      	mov	r0, r3
    38e6:	b003      	add	sp, #12
    38e8:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    38ea:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    38ec:	4628      	mov	r0, r5
    38ee:	f7ff ff7e 	bl	37ee <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    38f2:	2304      	movs	r3, #4
    38f4:	4622      	mov	r2, r4
    38f6:	f1a0 0108 	sub.w	r1, r0, #8
    38fa:	4628      	mov	r0, r5
    38fc:	f7fe fd1c 	bl	2338 <flash_area_read>
    3900:	4603      	mov	r3, r0
    return rc;
    3902:	e7ef      	b.n	38e4 <boot_read_swap_size+0x10>

00003904 <boot_write_magic>:
{
    3904:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    3906:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3908:	2310      	movs	r3, #16
    390a:	4a05      	ldr	r2, [pc, #20]	; (3920 <boot_write_magic+0x1c>)
    390c:	3910      	subs	r1, #16
    390e:	f7fe fd26 	bl	235e <flash_area_write>
    if (rc != 0) {
    3912:	4603      	mov	r3, r0
    3914:	b908      	cbnz	r0, 391a <boot_write_magic+0x16>
}
    3916:	4618      	mov	r0, r3
    3918:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    391a:	2301      	movs	r3, #1
    391c:	e7fb      	b.n	3916 <boot_write_magic+0x12>
    391e:	bf00      	nop
    3920:	00004f40 	.word	0x00004f40

00003924 <boot_write_copy_done>:

int
boot_write_copy_done(const struct flash_area *fap)
{
    3924:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    3926:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    3928:	2201      	movs	r2, #1
    392a:	3920      	subs	r1, #32
    392c:	f7ff ff1b 	bl	3766 <boot_write_trailer_flag>
}
    3930:	bd08      	pop	{r3, pc}

00003932 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    3932:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    3934:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    3936:	2201      	movs	r2, #1
    3938:	3918      	subs	r1, #24
    393a:	f7ff ff14 	bl	3766 <boot_write_trailer_flag>
}
    393e:	bd08      	pop	{r3, pc}

00003940 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    3940:	b530      	push	{r4, r5, lr}
    3942:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    3944:	2a0e      	cmp	r2, #14
    3946:	d811      	bhi.n	396c <boot_write_swap_info+0x2c>
    3948:	4605      	mov	r5, r0
    394a:	290e      	cmp	r1, #14
    394c:	d814      	bhi.n	3978 <boot_write_swap_info+0x38>
    394e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3952:	ac02      	add	r4, sp, #8
    3954:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
    3958:	f7ff ff49 	bl	37ee <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    395c:	2301      	movs	r3, #1
    395e:	4622      	mov	r2, r4
    3960:	4601      	mov	r1, r0
    3962:	4628      	mov	r0, r5
    3964:	f7ff feca 	bl	36fc <boot_write_trailer>
}
    3968:	b003      	add	sp, #12
    396a:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    396c:	2300      	movs	r3, #0
    396e:	461a      	mov	r2, r3
    3970:	4619      	mov	r1, r3
    3972:	4618      	mov	r0, r3
    3974:	f7fe f82e 	bl	19d4 <__assert_func>
    3978:	2300      	movs	r3, #0
    397a:	461a      	mov	r2, r3
    397c:	4619      	mov	r1, r3
    397e:	4618      	mov	r0, r3
    3980:	f7fe f828 	bl	19d4 <__assert_func>

00003984 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    3984:	b530      	push	{r4, r5, lr}
    3986:	b083      	sub	sp, #12
    3988:	4605      	mov	r5, r0
    398a:	ac02      	add	r4, sp, #8
    398c:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    3990:	f7ff ff2d 	bl	37ee <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    3994:	2304      	movs	r3, #4
    3996:	4622      	mov	r2, r4
    3998:	f1a0 0108 	sub.w	r1, r0, #8
    399c:	4628      	mov	r0, r5
    399e:	f7ff fead 	bl	36fc <boot_write_trailer>
}
    39a2:	b003      	add	sp, #12
    39a4:	bd30      	pop	{r4, r5, pc}
	...

000039a8 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    39a8:	b530      	push	{r4, r5, lr}
    39aa:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    39ac:	a902      	add	r1, sp, #8
    39ae:	2001      	movs	r0, #1
    39b0:	f7ff ff80 	bl	38b4 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    39b4:	2800      	cmp	r0, #0
    39b6:	d13c      	bne.n	3a32 <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    39b8:	4669      	mov	r1, sp
    39ba:	2002      	movs	r0, #2
    39bc:	f7ff ff7a 	bl	38b4 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    39c0:	2800      	cmp	r0, #0
    39c2:	d139      	bne.n	3a38 <boot_swap_type_multi+0x90>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    39c4:	2400      	movs	r4, #0
    39c6:	e007      	b.n	39d8 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    39c8:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    39ca:	2b04      	cmp	r3, #4
    39cc:	d028      	beq.n	3a20 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    39ce:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    39d2:	4293      	cmp	r3, r2
    39d4:	d024      	beq.n	3a20 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    39d6:	3401      	adds	r4, #1
    39d8:	2c02      	cmp	r4, #2
    39da:	d828      	bhi.n	3a2e <boot_swap_type_multi+0x86>
        table = boot_swap_tables + i;
    39dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    39e0:	0053      	lsls	r3, r2, #1
    39e2:	4a16      	ldr	r2, [pc, #88]	; (3a3c <boot_swap_type_multi+0x94>)
    39e4:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    39e6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    39ea:	5cd0      	ldrb	r0, [r2, r3]
    39ec:	f7ff fec6 	bl	377c <boot_magic_compatible_check>
    39f0:	2800      	cmp	r0, #0
    39f2:	d0f0      	beq.n	39d6 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    39f4:	f89d 1000 	ldrb.w	r1, [sp]
    39f8:	7868      	ldrb	r0, [r5, #1]
    39fa:	f7ff febf 	bl	377c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    39fe:	2800      	cmp	r0, #0
    3a00:	d0e9      	beq.n	39d6 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3a02:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    3a04:	2b04      	cmp	r3, #4
    3a06:	d003      	beq.n	3a10 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3a08:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3a0c:	4293      	cmp	r3, r2
    3a0e:	d1e2      	bne.n	39d6 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3a10:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3a12:	2b04      	cmp	r3, #4
    3a14:	d0d8      	beq.n	39c8 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3a16:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3a1a:	4293      	cmp	r3, r2
    3a1c:	d1db      	bne.n	39d6 <boot_swap_type_multi+0x2e>
    3a1e:	e7d3      	b.n	39c8 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    3a20:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    3a22:	1e83      	subs	r3, r0, #2
    3a24:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3a26:	2b02      	cmp	r3, #2
    3a28:	d904      	bls.n	3a34 <boot_swap_type_multi+0x8c>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    3a2a:	20ff      	movs	r0, #255	; 0xff
    3a2c:	e002      	b.n	3a34 <boot_swap_type_multi+0x8c>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    3a2e:	2001      	movs	r0, #1
    3a30:	e000      	b.n	3a34 <boot_swap_type_multi+0x8c>
        return BOOT_SWAP_TYPE_PANIC;
    3a32:	20ff      	movs	r0, #255	; 0xff
}
    3a34:	b005      	add	sp, #20
    3a36:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    3a38:	20ff      	movs	r0, #255	; 0xff
    3a3a:	e7fb      	b.n	3a34 <boot_swap_type_multi+0x8c>
    3a3c:	00004f50 	.word	0x00004f50

00003a40 <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    3a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a44:	b09d      	sub	sp, #116	; 0x74
    3a46:	4615      	mov	r5, r2
    3a48:	4699      	mov	r9, r3
    3a4a:	9f24      	ldr	r7, [sp, #144]	; 0x90
    3a4c:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    3a50:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    3a52:	a801      	add	r0, sp, #4
    3a54:	f000 f95a 	bl	3d0c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    3a58:	2100      	movs	r1, #0
    3a5a:	a801      	add	r0, sp, #4
    3a5c:	f000 f95c 	bl	3d18 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    3a60:	b114      	cbz	r4, 3a68 <bootutil_img_hash+0x28>
    3a62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3a64:	2b00      	cmp	r3, #0
    3a66:	dc06      	bgt.n	3a76 <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    3a68:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    3a6a:	68ee      	ldr	r6, [r5, #12]
    3a6c:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    3a6e:	896e      	ldrh	r6, [r5, #10]
    3a70:	441e      	add	r6, r3

    for (off = 0; off < size; off += blk_sz) {
    3a72:	2500      	movs	r5, #0
    3a74:	e013      	b.n	3a9e <bootutil_img_hash+0x5e>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    3a76:	461a      	mov	r2, r3
    3a78:	4621      	mov	r1, r4
    3a7a:	a801      	add	r0, sp, #4
    3a7c:	f000 fa32 	bl	3ee4 <mbedtls_sha256_update_ret>
    3a80:	e7f2      	b.n	3a68 <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    3a82:	4623      	mov	r3, r4
    3a84:	463a      	mov	r2, r7
    3a86:	4629      	mov	r1, r5
    3a88:	4648      	mov	r0, r9
    3a8a:	f7fe fc55 	bl	2338 <flash_area_read>
        if (rc) {
    3a8e:	4603      	mov	r3, r0
    3a90:	b988      	cbnz	r0, 3ab6 <bootutil_img_hash+0x76>
    3a92:	4622      	mov	r2, r4
    3a94:	4639      	mov	r1, r7
    3a96:	a801      	add	r0, sp, #4
    3a98:	f000 fa24 	bl	3ee4 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    3a9c:	4425      	add	r5, r4
    3a9e:	42b5      	cmp	r5, r6
    3aa0:	d204      	bcs.n	3aac <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    3aa2:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    3aa4:	4544      	cmp	r4, r8
    3aa6:	d9ec      	bls.n	3a82 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    3aa8:	4644      	mov	r4, r8
    3aaa:	e7ea      	b.n	3a82 <bootutil_img_hash+0x42>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    3aac:	9926      	ldr	r1, [sp, #152]	; 0x98
    3aae:	a801      	add	r0, sp, #4
    3ab0:	f000 fa5b 	bl	3f6a <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
    3ab4:	2300      	movs	r3, #0
}
    3ab6:	4618      	mov	r0, r3
    3ab8:	b01d      	add	sp, #116	; 0x74
    3aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003abe <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    3abe:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ac0:	b09f      	sub	sp, #124	; 0x7c
    3ac2:	4617      	mov	r7, r2
    3ac4:	461e      	mov	r6, r3
    3ac6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    3ac8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    3aca:	9404      	str	r4, [sp, #16]
    3acc:	9c26      	ldr	r4, [sp, #152]	; 0x98
    3ace:	9403      	str	r4, [sp, #12]
    3ad0:	ac06      	add	r4, sp, #24
    3ad2:	9402      	str	r4, [sp, #8]
    3ad4:	9c25      	ldr	r4, [sp, #148]	; 0x94
    3ad6:	9401      	str	r4, [sp, #4]
    3ad8:	9c24      	ldr	r4, [sp, #144]	; 0x90
    3ada:	9400      	str	r4, [sp, #0]
    3adc:	f7ff ffb0 	bl	3a40 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    3ae0:	4604      	mov	r4, r0
    3ae2:	2800      	cmp	r0, #0
    3ae4:	d140      	bne.n	3b68 <bootutil_img_validate+0xaa>
        return rc;
    }

    if (out_hash) {
    3ae6:	b155      	cbz	r5, 3afe <bootutil_img_validate+0x40>
        memcpy(out_hash, hash, 32);
    3ae8:	ac06      	add	r4, sp, #24
    3aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3aec:	6028      	str	r0, [r5, #0]
    3aee:	6069      	str	r1, [r5, #4]
    3af0:	60aa      	str	r2, [r5, #8]
    3af2:	60eb      	str	r3, [r5, #12]
    3af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3af6:	6128      	str	r0, [r5, #16]
    3af8:	6169      	str	r1, [r5, #20]
    3afa:	61aa      	str	r2, [r5, #24]
    3afc:	61eb      	str	r3, [r5, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    3afe:	2300      	movs	r3, #0
    3b00:	9300      	str	r3, [sp, #0]
    3b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3b06:	4632      	mov	r2, r6
    3b08:	4639      	mov	r1, r7
    3b0a:	a816      	add	r0, sp, #88	; 0x58
    3b0c:	f000 f834 	bl	3b78 <bootutil_tlv_iter_begin>
    if (rc) {
    3b10:	4604      	mov	r4, r0
    3b12:	bb48      	cbnz	r0, 3b68 <bootutil_img_validate+0xaa>
    int sha256_valid = 0;
    3b14:	4605      	mov	r5, r0
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    3b16:	ab1c      	add	r3, sp, #112	; 0x70
    3b18:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    3b1c:	a91d      	add	r1, sp, #116	; 0x74
    3b1e:	a816      	add	r0, sp, #88	; 0x58
    3b20:	f000 f88f 	bl	3c42 <bootutil_tlv_iter_next>
        if (rc < 0) {
    3b24:	2800      	cmp	r0, #0
    3b26:	db1d      	blt.n	3b64 <bootutil_img_validate+0xa6>
            return -1;
        } else if (rc > 0) {
    3b28:	dc18      	bgt.n	3b5c <bootutil_img_validate+0x9e>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    3b2a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    3b2e:	2b10      	cmp	r3, #16
    3b30:	d1f1      	bne.n	3b16 <bootutil_img_validate+0x58>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    3b32:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    3b36:	2b20      	cmp	r3, #32
    3b38:	d119      	bne.n	3b6e <bootutil_img_validate+0xb0>
                return -1;
            }
            rc = flash_area_read(fap, off, buf, sizeof hash);
    3b3a:	aa0e      	add	r2, sp, #56	; 0x38
    3b3c:	991d      	ldr	r1, [sp, #116]	; 0x74
    3b3e:	4630      	mov	r0, r6
    3b40:	f7fe fbfa 	bl	2338 <flash_area_read>
            if (rc) {
    3b44:	b9b0      	cbnz	r0, 3b74 <bootutil_img_validate+0xb6>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
    3b46:	2220      	movs	r2, #32
    3b48:	a90e      	add	r1, sp, #56	; 0x38
    3b4a:	a806      	add	r0, sp, #24
    3b4c:	f7fe fa20 	bl	1f90 <memcmp>
                return -1;
            }

            sha256_valid = 1;
    3b50:	2501      	movs	r5, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    3b52:	2800      	cmp	r0, #0
    3b54:	d0df      	beq.n	3b16 <bootutil_img_validate+0x58>
                return -1;
    3b56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3b5a:	e005      	b.n	3b68 <bootutil_img_validate+0xaa>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
    3b5c:	b925      	cbnz	r5, 3b68 <bootutil_img_validate+0xaa>
        return -1;
    3b5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3b62:	e001      	b.n	3b68 <bootutil_img_validate+0xaa>
            return -1;
    3b64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    3b68:	4620      	mov	r0, r4
    3b6a:	b01f      	add	sp, #124	; 0x7c
    3b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    3b6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3b72:	e7f9      	b.n	3b68 <bootutil_img_validate+0xaa>
                return rc;
    3b74:	4604      	mov	r4, r0
    3b76:	e7f7      	b.n	3b68 <bootutil_img_validate+0xaa>

00003b78 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    3b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b7c:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    3b7e:	2800      	cmp	r0, #0
    3b80:	d04a      	beq.n	3c18 <bootutil_tlv_iter_begin+0xa0>
    3b82:	4605      	mov	r5, r0
    3b84:	2900      	cmp	r1, #0
    3b86:	d04a      	beq.n	3c1e <bootutil_tlv_iter_begin+0xa6>
    3b88:	2a00      	cmp	r2, #0
    3b8a:	d04b      	beq.n	3c24 <bootutil_tlv_iter_begin+0xac>
    3b8c:	4699      	mov	r9, r3
    3b8e:	4617      	mov	r7, r2
    3b90:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    3b92:	890e      	ldrh	r6, [r1, #8]
    3b94:	68cb      	ldr	r3, [r1, #12]
    3b96:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    3b98:	2304      	movs	r3, #4
    3b9a:	eb0d 0203 	add.w	r2, sp, r3
    3b9e:	4631      	mov	r1, r6
    3ba0:	4638      	mov	r0, r7
    3ba2:	f7fe fbc9 	bl	2338 <flash_area_read>
    3ba6:	4680      	mov	r8, r0
    3ba8:	2800      	cmp	r0, #0
    3baa:	d13e      	bne.n	3c2a <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    3bac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3bb0:	f646 1308 	movw	r3, #26888	; 0x6908
    3bb4:	429a      	cmp	r2, r3
    3bb6:	d01e      	beq.n	3bf6 <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    3bb8:	8963      	ldrh	r3, [r4, #10]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d13b      	bne.n	3c36 <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    3bbe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3bc2:	f646 1307 	movw	r3, #26887	; 0x6907
    3bc6:	429a      	cmp	r2, r3
    3bc8:	d138      	bne.n	3c3c <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    3bca:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    3bcc:	606f      	str	r7, [r5, #4]
    it->type = type;
    3bce:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    3bd2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3bd6:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    3bd8:	8963      	ldrh	r3, [r4, #10]
    3bda:	4433      	add	r3, r6
    3bdc:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    3bde:	8963      	ldrh	r3, [r4, #10]
    3be0:	4433      	add	r3, r6
    3be2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3be6:	4413      	add	r3, r2
    3be8:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    3bea:	3604      	adds	r6, #4
    3bec:	612e      	str	r6, [r5, #16]
    return 0;
}
    3bee:	4640      	mov	r0, r8
    3bf0:	b003      	add	sp, #12
    3bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    3bf6:	8963      	ldrh	r3, [r4, #10]
    3bf8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3bfc:	428b      	cmp	r3, r1
    3bfe:	d117      	bne.n	3c30 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    3c00:	2304      	movs	r3, #4
    3c02:	eb0d 0203 	add.w	r2, sp, r3
    3c06:	4431      	add	r1, r6
    3c08:	4638      	mov	r0, r7
    3c0a:	f7fe fb95 	bl	2338 <flash_area_read>
    3c0e:	2800      	cmp	r0, #0
    3c10:	d0d5      	beq.n	3bbe <bootutil_tlv_iter_begin+0x46>
            return -1;
    3c12:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c16:	e7ea      	b.n	3bee <bootutil_tlv_iter_begin+0x76>
        return -1;
    3c18:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c1c:	e7e7      	b.n	3bee <bootutil_tlv_iter_begin+0x76>
    3c1e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c22:	e7e4      	b.n	3bee <bootutil_tlv_iter_begin+0x76>
    3c24:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c28:	e7e1      	b.n	3bee <bootutil_tlv_iter_begin+0x76>
        return -1;
    3c2a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c2e:	e7de      	b.n	3bee <bootutil_tlv_iter_begin+0x76>
            return -1;
    3c30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c34:	e7db      	b.n	3bee <bootutil_tlv_iter_begin+0x76>
        return -1;
    3c36:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c3a:	e7d8      	b.n	3bee <bootutil_tlv_iter_begin+0x76>
        return -1;
    3c3c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3c40:	e7d5      	b.n	3bee <bootutil_tlv_iter_begin+0x76>

00003c42 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3c42:	2800      	cmp	r0, #0
    3c44:	d04d      	beq.n	3ce2 <bootutil_tlv_iter_next+0xa0>
{
    3c46:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c48:	b083      	sub	sp, #12
    3c4a:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3c4c:	6800      	ldr	r0, [r0, #0]
    3c4e:	2800      	cmp	r0, #0
    3c50:	d04b      	beq.n	3cea <bootutil_tlv_iter_next+0xa8>
    3c52:	461d      	mov	r5, r3
    3c54:	4616      	mov	r6, r2
    3c56:	460f      	mov	r7, r1
    3c58:	6863      	ldr	r3, [r4, #4]
    3c5a:	bb0b      	cbnz	r3, 3ca0 <bootutil_tlv_iter_next+0x5e>
        return -1;
    3c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3c60:	e03a      	b.n	3cd8 <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    3c62:	2304      	movs	r3, #4
    3c64:	eb0d 0203 	add.w	r2, sp, r3
    3c68:	6921      	ldr	r1, [r4, #16]
    3c6a:	6860      	ldr	r0, [r4, #4]
    3c6c:	f7fe fb64 	bl	2338 <flash_area_read>
        if (rc) {
    3c70:	4601      	mov	r1, r0
    3c72:	2800      	cmp	r0, #0
    3c74:	d13c      	bne.n	3cf0 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    3c76:	7aa3      	ldrb	r3, [r4, #10]
    3c78:	b11b      	cbz	r3, 3c82 <bootutil_tlv_iter_next+0x40>
    3c7a:	6922      	ldr	r2, [r4, #16]
    3c7c:	68e3      	ldr	r3, [r4, #12]
    3c7e:	429a      	cmp	r2, r3
    3c80:	d239      	bcs.n	3cf6 <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    3c82:	8923      	ldrh	r3, [r4, #8]
    3c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3c88:	4293      	cmp	r3, r2
    3c8a:	d017      	beq.n	3cbc <bootutil_tlv_iter_next+0x7a>
    3c8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3c90:	4293      	cmp	r3, r2
    3c92:	d013      	beq.n	3cbc <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    3c94:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    3c98:	6923      	ldr	r3, [r4, #16]
    3c9a:	4418      	add	r0, r3
    3c9c:	3004      	adds	r0, #4
    3c9e:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    3ca0:	6920      	ldr	r0, [r4, #16]
    3ca2:	6963      	ldr	r3, [r4, #20]
    3ca4:	4298      	cmp	r0, r3
    3ca6:	d21a      	bcs.n	3cde <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    3ca8:	6823      	ldr	r3, [r4, #0]
    3caa:	895b      	ldrh	r3, [r3, #10]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d0d8      	beq.n	3c62 <bootutil_tlv_iter_next+0x20>
    3cb0:	68e3      	ldr	r3, [r4, #12]
    3cb2:	4283      	cmp	r3, r0
    3cb4:	d1d5      	bne.n	3c62 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    3cb6:	3004      	adds	r0, #4
    3cb8:	6120      	str	r0, [r4, #16]
    3cba:	e7d2      	b.n	3c62 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    3cbc:	b115      	cbz	r5, 3cc4 <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    3cbe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    3cc2:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    3cc4:	6923      	ldr	r3, [r4, #16]
    3cc6:	3304      	adds	r3, #4
    3cc8:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    3cca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3cce:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    3cd0:	6922      	ldr	r2, [r4, #16]
    3cd2:	4413      	add	r3, r2
    3cd4:	3304      	adds	r3, #4
    3cd6:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    3cd8:	4608      	mov	r0, r1
    3cda:	b003      	add	sp, #12
    3cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    3cde:	2101      	movs	r1, #1
    3ce0:	e7fa      	b.n	3cd8 <bootutil_tlv_iter_next+0x96>
        return -1;
    3ce2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    3ce6:	4608      	mov	r0, r1
    3ce8:	4770      	bx	lr
        return -1;
    3cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3cee:	e7f3      	b.n	3cd8 <bootutil_tlv_iter_next+0x96>
            return -1;
    3cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3cf4:	e7f0      	b.n	3cd8 <bootutil_tlv_iter_next+0x96>
            return 1;
    3cf6:	2101      	movs	r1, #1
    3cf8:	e7ee      	b.n	3cd8 <bootutil_tlv_iter_next+0x96>

00003cfa <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    3cfa:	b119      	cbz	r1, 3d04 <flash_area_id_from_multi_image_slot+0xa>
    3cfc:	2901      	cmp	r1, #1
    3cfe:	d003      	beq.n	3d08 <flash_area_id_from_multi_image_slot+0xe>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    3d00:	20ff      	movs	r0, #255	; 0xff
    3d02:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    3d04:	2001      	movs	r0, #1
    3d06:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    3d08:	2002      	movs	r0, #2
}
    3d0a:	4770      	bx	lr

00003d0c <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    3d0c:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    3d0e:	226c      	movs	r2, #108	; 0x6c
    3d10:	2100      	movs	r1, #0
    3d12:	f7fe f96e 	bl	1ff2 <memset>
}
    3d16:	bd08      	pop	{r3, pc}

00003d18 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
    3d18:	2300      	movs	r3, #0
    3d1a:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3d1c:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3d1e:	460b      	mov	r3, r1
    3d20:	b1e1      	cbz	r1, 3d5c <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    3d22:	4a19      	ldr	r2, [pc, #100]	; (3d88 <mbedtls_sha256_starts_ret+0x70>)
    3d24:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    3d26:	4a19      	ldr	r2, [pc, #100]	; (3d8c <mbedtls_sha256_starts_ret+0x74>)
    3d28:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    3d2a:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3d2e:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3d32:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    3d36:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    3d38:	4a15      	ldr	r2, [pc, #84]	; (3d90 <mbedtls_sha256_starts_ret+0x78>)
    3d3a:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    3d3c:	4a15      	ldr	r2, [pc, #84]	; (3d94 <mbedtls_sha256_starts_ret+0x7c>)
    3d3e:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    3d40:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3d44:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    3d48:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    3d4c:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3d4e:	4a12      	ldr	r2, [pc, #72]	; (3d98 <mbedtls_sha256_starts_ret+0x80>)
    3d50:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3d52:	4a12      	ldr	r2, [pc, #72]	; (3d9c <mbedtls_sha256_starts_ret+0x84>)
    3d54:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    3d56:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    3d58:	2000      	movs	r0, #0
    3d5a:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    3d5c:	4a10      	ldr	r2, [pc, #64]	; (3da0 <mbedtls_sha256_starts_ret+0x88>)
    3d5e:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    3d60:	4a10      	ldr	r2, [pc, #64]	; (3da4 <mbedtls_sha256_starts_ret+0x8c>)
    3d62:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    3d64:	4a10      	ldr	r2, [pc, #64]	; (3da8 <mbedtls_sha256_starts_ret+0x90>)
    3d66:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    3d68:	4a10      	ldr	r2, [pc, #64]	; (3dac <mbedtls_sha256_starts_ret+0x94>)
    3d6a:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    3d6c:	4a10      	ldr	r2, [pc, #64]	; (3db0 <mbedtls_sha256_starts_ret+0x98>)
    3d6e:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    3d70:	4a10      	ldr	r2, [pc, #64]	; (3db4 <mbedtls_sha256_starts_ret+0x9c>)
    3d72:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    3d74:	4a10      	ldr	r2, [pc, #64]	; (3db8 <mbedtls_sha256_starts_ret+0xa0>)
    3d76:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3d78:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    3d7c:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    3d80:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    3d84:	6242      	str	r2, [r0, #36]	; 0x24
    3d86:	e7e6      	b.n	3d56 <mbedtls_sha256_starts_ret+0x3e>
    3d88:	c1059ed8 	.word	0xc1059ed8
    3d8c:	367cd507 	.word	0x367cd507
    3d90:	f70e5939 	.word	0xf70e5939
    3d94:	ffc00b31 	.word	0xffc00b31
    3d98:	64f98fa7 	.word	0x64f98fa7
    3d9c:	befa4fa4 	.word	0xbefa4fa4
    3da0:	6a09e667 	.word	0x6a09e667
    3da4:	bb67ae85 	.word	0xbb67ae85
    3da8:	3c6ef372 	.word	0x3c6ef372
    3dac:	a54ff53a 	.word	0xa54ff53a
    3db0:	510e527f 	.word	0x510e527f
    3db4:	9b05688c 	.word	0x9b05688c
    3db8:	1f83d9ab 	.word	0x1f83d9ab

00003dbc <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3dc0:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
    3dc2:	2300      	movs	r3, #0
    3dc4:	e005      	b.n	3dd2 <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
    3dc6:	1c9a      	adds	r2, r3, #2
    3dc8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3dcc:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    3dd0:	3301      	adds	r3, #1
    3dd2:	2b07      	cmp	r3, #7
    3dd4:	d9f7      	bls.n	3dc6 <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    3dd6:	2200      	movs	r2, #0
    3dd8:	e04b      	b.n	3e72 <mbedtls_internal_sha256_process+0xb6>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
    3dda:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    3dde:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    3de2:	7863      	ldrb	r3, [r4, #1]
    3de4:	041b      	lsls	r3, r3, #16
    3de6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3dea:	78a5      	ldrb	r5, [r4, #2]
    3dec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3df0:	78e4      	ldrb	r4, [r4, #3]
    3df2:	4323      	orrs	r3, r4
    3df4:	ac08      	add	r4, sp, #32
    3df6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    3dfa:	9b07      	ldr	r3, [sp, #28]
    3dfc:	9c04      	ldr	r4, [sp, #16]
    3dfe:	ea4f 25f4 	mov.w	r5, r4, ror #11
    3e02:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    3e06:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    3e0a:	442b      	add	r3, r5
    3e0c:	9e06      	ldr	r6, [sp, #24]
    3e0e:	9f05      	ldr	r7, [sp, #20]
    3e10:	ea86 0507 	eor.w	r5, r6, r7
    3e14:	4025      	ands	r5, r4
    3e16:	4075      	eors	r5, r6
    3e18:	442b      	add	r3, r5
    3e1a:	4d31      	ldr	r5, [pc, #196]	; (3ee0 <mbedtls_internal_sha256_process+0x124>)
    3e1c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    3e20:	442b      	add	r3, r5
    3e22:	ad08      	add	r5, sp, #32
    3e24:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    3e28:	442b      	add	r3, r5
    3e2a:	f8dd e000 	ldr.w	lr, [sp]
    3e2e:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    3e32:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    3e36:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    3e3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
    3e3e:	ea0e 0508 	and.w	r5, lr, r8
    3e42:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3e46:	ea4e 0a08 	orr.w	sl, lr, r8
    3e4a:	ea09 0a0a 	and.w	sl, r9, sl
    3e4e:	ea45 050a 	orr.w	r5, r5, sl
    3e52:	44ac      	add	ip, r5
    3e54:	9d03      	ldr	r5, [sp, #12]
    3e56:	441d      	add	r5, r3
    3e58:	4463      	add	r3, ip

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    3e5a:	9607      	str	r6, [sp, #28]
    3e5c:	9706      	str	r7, [sp, #24]
    3e5e:	9405      	str	r4, [sp, #20]
    3e60:	9504      	str	r5, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    3e62:	f8cd 900c 	str.w	r9, [sp, #12]
    3e66:	f8cd 8008 	str.w	r8, [sp, #8]
    3e6a:	f8cd e004 	str.w	lr, [sp, #4]
    3e6e:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
    3e70:	3201      	adds	r2, #1
    3e72:	2a3f      	cmp	r2, #63	; 0x3f
    3e74:	d822      	bhi.n	3ebc <mbedtls_internal_sha256_process+0x100>
        if( i < 16 )
    3e76:	2a0f      	cmp	r2, #15
    3e78:	d9af      	bls.n	3dda <mbedtls_internal_sha256_process+0x1e>
            R( i );
    3e7a:	1e93      	subs	r3, r2, #2
    3e7c:	ac08      	add	r4, sp, #32
    3e7e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    3e82:	ea4f 43f5 	mov.w	r3, r5, ror #19
    3e86:	ea83 4375 	eor.w	r3, r3, r5, ror #17
    3e8a:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
    3e8e:	1fd5      	subs	r5, r2, #7
    3e90:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    3e94:	442b      	add	r3, r5
    3e96:	f1a2 050f 	sub.w	r5, r2, #15
    3e9a:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
    3e9e:	ea4f 45b6 	mov.w	r5, r6, ror #18
    3ea2:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
    3ea6:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
    3eaa:	442b      	add	r3, r5
    3eac:	f1a2 0510 	sub.w	r5, r2, #16
    3eb0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    3eb4:	442b      	add	r3, r5
    3eb6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    3eba:	e79e      	b.n	3dfa <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3ebc:	2300      	movs	r3, #0
    3ebe:	e008      	b.n	3ed2 <mbedtls_internal_sha256_process+0x116>
        ctx->state[i] += A[i];
    3ec0:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
    3ec4:	1c99      	adds	r1, r3, #2
    3ec6:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    3eca:	4422      	add	r2, r4
    3ecc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    3ed0:	3301      	adds	r3, #1
    3ed2:	2b07      	cmp	r3, #7
    3ed4:	d9f4      	bls.n	3ec0 <mbedtls_internal_sha256_process+0x104>

    return( 0 );
}
    3ed6:	2000      	movs	r0, #0
    3ed8:	b048      	add	sp, #288	; 0x120
    3eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ede:	bf00      	nop
    3ee0:	00004f64 	.word	0x00004f64

00003ee4 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    3ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    3ee8:	b3da      	cbz	r2, 3f62 <mbedtls_sha256_update_ret+0x7e>
    3eea:	4606      	mov	r6, r0
    3eec:	460d      	mov	r5, r1
    3eee:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    3ef0:	6803      	ldr	r3, [r0, #0]
    3ef2:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    3ef6:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    3efa:	4413      	add	r3, r2
    3efc:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    3efe:	4293      	cmp	r3, r2
    3f00:	d202      	bcs.n	3f08 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    3f02:	6843      	ldr	r3, [r0, #4]
    3f04:	3301      	adds	r3, #1
    3f06:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    3f08:	b10f      	cbz	r7, 3f0e <mbedtls_sha256_update_ret+0x2a>
    3f0a:	4544      	cmp	r4, r8
    3f0c:	d20a      	bcs.n	3f24 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    3f0e:	2c3f      	cmp	r4, #63	; 0x3f
    3f10:	d91b      	bls.n	3f4a <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    3f12:	4629      	mov	r1, r5
    3f14:	4630      	mov	r0, r6
    3f16:	f7ff ff51 	bl	3dbc <mbedtls_internal_sha256_process>
    3f1a:	4603      	mov	r3, r0
    3f1c:	bb10      	cbnz	r0, 3f64 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    3f1e:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    3f20:	3c40      	subs	r4, #64	; 0x40
    3f22:	e7f4      	b.n	3f0e <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    3f24:	f106 0928 	add.w	r9, r6, #40	; 0x28
    3f28:	4642      	mov	r2, r8
    3f2a:	4629      	mov	r1, r5
    3f2c:	eb09 0007 	add.w	r0, r9, r7
    3f30:	f7fe f852 	bl	1fd8 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3f34:	4649      	mov	r1, r9
    3f36:	4630      	mov	r0, r6
    3f38:	f7ff ff40 	bl	3dbc <mbedtls_internal_sha256_process>
    3f3c:	4603      	mov	r3, r0
    3f3e:	b988      	cbnz	r0, 3f64 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    3f40:	4445      	add	r5, r8
        ilen  -= fill;
    3f42:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    3f46:	2700      	movs	r7, #0
    3f48:	e7e1      	b.n	3f0e <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    3f4a:	b90c      	cbnz	r4, 3f50 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    3f4c:	2300      	movs	r3, #0
    3f4e:	e009      	b.n	3f64 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    3f50:	f106 0028 	add.w	r0, r6, #40	; 0x28
    3f54:	4622      	mov	r2, r4
    3f56:	4629      	mov	r1, r5
    3f58:	4438      	add	r0, r7
    3f5a:	f7fe f83d 	bl	1fd8 <memcpy>
    return( 0 );
    3f5e:	2300      	movs	r3, #0
    3f60:	e000      	b.n	3f64 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    3f62:	2300      	movs	r3, #0
}
    3f64:	4618      	mov	r0, r3
    3f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003f6a <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    3f6a:	b570      	push	{r4, r5, r6, lr}
    3f6c:	4604      	mov	r4, r0
    3f6e:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    3f70:	6803      	ldr	r3, [r0, #0]
    3f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    3f76:	1c58      	adds	r0, r3, #1
    3f78:	4423      	add	r3, r4
    3f7a:	2280      	movs	r2, #128	; 0x80
    3f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    3f80:	2838      	cmp	r0, #56	; 0x38
    3f82:	d87b      	bhi.n	407c <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    3f84:	f104 0328 	add.w	r3, r4, #40	; 0x28
    3f88:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    3f8c:	2100      	movs	r1, #0
    3f8e:	4418      	add	r0, r3
    3f90:	f7fe f82f 	bl	1ff2 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    3f94:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    3f96:	6863      	ldr	r3, [r4, #4]
    3f98:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    3f9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    3f9e:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    3fa0:	0e19      	lsrs	r1, r3, #24
    3fa2:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    3fa6:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3faa:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    3fae:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3fb2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    3fb6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3fba:	0e13      	lsrs	r3, r2, #24
    3fbc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3fc0:	f3c2 4307 	ubfx	r3, r2, #16, #8
    3fc4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    3fc8:	f3c2 2307 	ubfx	r3, r2, #8, #8
    3fcc:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    3fd0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3fd4:	f104 0128 	add.w	r1, r4, #40	; 0x28
    3fd8:	4620      	mov	r0, r4
    3fda:	f7ff feef 	bl	3dbc <mbedtls_internal_sha256_process>
    3fde:	4603      	mov	r3, r0
    3fe0:	2800      	cmp	r0, #0
    3fe2:	d159      	bne.n	4098 <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    3fe4:	7ae2      	ldrb	r2, [r4, #11]
    3fe6:	702a      	strb	r2, [r5, #0]
    3fe8:	7aa2      	ldrb	r2, [r4, #10]
    3fea:	706a      	strb	r2, [r5, #1]
    3fec:	7a62      	ldrb	r2, [r4, #9]
    3fee:	70aa      	strb	r2, [r5, #2]
    3ff0:	7a22      	ldrb	r2, [r4, #8]
    3ff2:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    3ff4:	7be2      	ldrb	r2, [r4, #15]
    3ff6:	712a      	strb	r2, [r5, #4]
    3ff8:	7ba2      	ldrb	r2, [r4, #14]
    3ffa:	716a      	strb	r2, [r5, #5]
    3ffc:	7b62      	ldrb	r2, [r4, #13]
    3ffe:	71aa      	strb	r2, [r5, #6]
    4000:	7b22      	ldrb	r2, [r4, #12]
    4002:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    4004:	7ce2      	ldrb	r2, [r4, #19]
    4006:	722a      	strb	r2, [r5, #8]
    4008:	7ca2      	ldrb	r2, [r4, #18]
    400a:	726a      	strb	r2, [r5, #9]
    400c:	7c62      	ldrb	r2, [r4, #17]
    400e:	72aa      	strb	r2, [r5, #10]
    4010:	7c22      	ldrb	r2, [r4, #16]
    4012:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    4014:	7de2      	ldrb	r2, [r4, #23]
    4016:	732a      	strb	r2, [r5, #12]
    4018:	7da2      	ldrb	r2, [r4, #22]
    401a:	736a      	strb	r2, [r5, #13]
    401c:	7d62      	ldrb	r2, [r4, #21]
    401e:	73aa      	strb	r2, [r5, #14]
    4020:	7d22      	ldrb	r2, [r4, #20]
    4022:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    4024:	7ee2      	ldrb	r2, [r4, #27]
    4026:	742a      	strb	r2, [r5, #16]
    4028:	7ea2      	ldrb	r2, [r4, #26]
    402a:	746a      	strb	r2, [r5, #17]
    402c:	7e62      	ldrb	r2, [r4, #25]
    402e:	74aa      	strb	r2, [r5, #18]
    4030:	7e22      	ldrb	r2, [r4, #24]
    4032:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    4034:	7fe2      	ldrb	r2, [r4, #31]
    4036:	752a      	strb	r2, [r5, #20]
    4038:	7fa2      	ldrb	r2, [r4, #30]
    403a:	756a      	strb	r2, [r5, #21]
    403c:	7f62      	ldrb	r2, [r4, #29]
    403e:	75aa      	strb	r2, [r5, #22]
    4040:	7f22      	ldrb	r2, [r4, #28]
    4042:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    4044:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    4048:	762a      	strb	r2, [r5, #24]
    404a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    404e:	766a      	strb	r2, [r5, #25]
    4050:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    4054:	76aa      	strb	r2, [r5, #26]
    4056:	f894 2020 	ldrb.w	r2, [r4, #32]
    405a:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    405c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    405e:	b9da      	cbnz	r2, 4098 <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    4060:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    4064:	772b      	strb	r3, [r5, #28]
    4066:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    406a:	776b      	strb	r3, [r5, #29]
    406c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4070:	77ab      	strb	r3, [r5, #30]
    4072:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    4076:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    4078:	4613      	mov	r3, r2
    407a:	e00d      	b.n	4098 <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    407c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    4080:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    4084:	2100      	movs	r1, #0
    4086:	4430      	add	r0, r6
    4088:	f7fd ffb3 	bl	1ff2 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    408c:	4631      	mov	r1, r6
    408e:	4620      	mov	r0, r4
    4090:	f7ff fe94 	bl	3dbc <mbedtls_internal_sha256_process>
    4094:	4603      	mov	r3, r0
    4096:	b108      	cbz	r0, 409c <mbedtls_sha256_finish_ret+0x132>
}
    4098:	4618      	mov	r0, r3
    409a:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    409c:	2238      	movs	r2, #56	; 0x38
    409e:	2100      	movs	r1, #0
    40a0:	4630      	mov	r0, r6
    40a2:	f7fd ffa6 	bl	1ff2 <memset>
    40a6:	e775      	b.n	3f94 <mbedtls_sha256_finish_ret+0x2a>

000040a8 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    40a8:	6843      	ldr	r3, [r0, #4]
    40aa:	428b      	cmp	r3, r1
    40ac:	d808      	bhi.n	40c0 <hal_flash_check_addr+0x18>
    40ae:	6882      	ldr	r2, [r0, #8]
    40b0:	4413      	add	r3, r2
    40b2:	428b      	cmp	r3, r1
    40b4:	d301      	bcc.n	40ba <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
    40b6:	2000      	movs	r0, #0
}
    40b8:	4770      	bx	lr
        return SYS_EINVAL;
    40ba:	f06f 0001 	mvn.w	r0, #1
    40be:	4770      	bx	lr
    40c0:	f06f 0001 	mvn.w	r0, #1
    40c4:	4770      	bx	lr

000040c6 <hal_flash_init>:
{
    40c6:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    40c8:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
    40ca:	462c      	mov	r4, r5
    40cc:	e001      	b.n	40d2 <hal_flash_init+0xc>
    40ce:	3401      	adds	r4, #1
    40d0:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    40d2:	4620      	mov	r0, r4
    40d4:	f7fc fc50 	bl	978 <hal_bsp_flash_dev>
        if (!hf) {
    40d8:	b138      	cbz	r0, 40ea <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
    40da:	6802      	ldr	r2, [r0, #0]
    40dc:	6952      	ldr	r2, [r2, #20]
    40de:	4790      	blx	r2
    40e0:	2800      	cmp	r0, #0
    40e2:	d0f4      	beq.n	40ce <hal_flash_init+0x8>
            rc = SYS_EIO;
    40e4:	f06f 0504 	mvn.w	r5, #4
    40e8:	e7f1      	b.n	40ce <hal_flash_init+0x8>
}
    40ea:	4628      	mov	r0, r5
    40ec:	bd38      	pop	{r3, r4, r5, pc}

000040ee <hal_flash_align>:
{
    40ee:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    40f0:	f7fc fc42 	bl	978 <hal_bsp_flash_dev>
    if (!hf) {
    40f4:	b108      	cbz	r0, 40fa <hal_flash_align+0xc>
    return hf->hf_align;
    40f6:	7c00      	ldrb	r0, [r0, #16]
}
    40f8:	bd08      	pop	{r3, pc}
        return 1;
    40fa:	2001      	movs	r0, #1
    40fc:	e7fc      	b.n	40f8 <hal_flash_align+0xa>

000040fe <hal_flash_erased_val>:
{
    40fe:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    4100:	f7fc fc3a 	bl	978 <hal_bsp_flash_dev>
    if (!hf) {
    4104:	b108      	cbz	r0, 410a <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    4106:	7d00      	ldrb	r0, [r0, #20]
}
    4108:	bd08      	pop	{r3, pc}
        return 1;
    410a:	2001      	movs	r0, #1
    410c:	e7fc      	b.n	4108 <hal_flash_erased_val+0xa>

0000410e <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    410e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4112:	460d      	mov	r5, r1
    4114:	4690      	mov	r8, r2
    4116:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    4118:	f7fc fc2e 	bl	978 <hal_bsp_flash_dev>
    if (!hf) {
    411c:	b1c0      	cbz	r0, 4150 <hal_flash_read+0x42>
    411e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    4120:	4629      	mov	r1, r5
    4122:	f7ff ffc1 	bl	40a8 <hal_flash_check_addr>
    4126:	b9b0      	cbnz	r0, 4156 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
    4128:	19a9      	adds	r1, r5, r6
    412a:	4620      	mov	r0, r4
    412c:	f7ff ffbc 	bl	40a8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    4130:	b9a0      	cbnz	r0, 415c <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    4132:	6823      	ldr	r3, [r4, #0]
    4134:	681f      	ldr	r7, [r3, #0]
    4136:	4633      	mov	r3, r6
    4138:	4642      	mov	r2, r8
    413a:	4629      	mov	r1, r5
    413c:	4620      	mov	r0, r4
    413e:	47b8      	blx	r7
    if (rc != 0) {
    4140:	4603      	mov	r3, r0
    4142:	b910      	cbnz	r0, 414a <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
    4144:	4618      	mov	r0, r3
    4146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    414a:	f06f 0304 	mvn.w	r3, #4
    414e:	e7f9      	b.n	4144 <hal_flash_read+0x36>
        return SYS_EINVAL;
    4150:	f06f 0301 	mvn.w	r3, #1
    4154:	e7f6      	b.n	4144 <hal_flash_read+0x36>
        return SYS_EINVAL;
    4156:	f06f 0301 	mvn.w	r3, #1
    415a:	e7f3      	b.n	4144 <hal_flash_read+0x36>
    415c:	f06f 0301 	mvn.w	r3, #1
    4160:	e7f0      	b.n	4144 <hal_flash_read+0x36>
	...

00004164 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    4164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4168:	4605      	mov	r5, r0
    416a:	460e      	mov	r6, r1
    416c:	4690      	mov	r8, r2
    416e:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    4170:	f7fc fc02 	bl	978 <hal_bsp_flash_dev>
    if (!hf) {
    4174:	b310      	cbz	r0, 41bc <hal_flash_write+0x58>
    4176:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    4178:	4631      	mov	r1, r6
    417a:	f7ff ff95 	bl	40a8 <hal_flash_check_addr>
    417e:	bb00      	cbnz	r0, 41c2 <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    4180:	19f1      	adds	r1, r6, r7
    4182:	4620      	mov	r0, r4
    4184:	f7ff ff90 	bl	40a8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    4188:	b9f0      	cbnz	r0, 41c8 <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    418a:	08eb      	lsrs	r3, r5, #3
    418c:	4a11      	ldr	r2, [pc, #68]	; (41d4 <hal_flash_write+0x70>)
    418e:	5cd3      	ldrb	r3, [r2, r3]
    4190:	f005 0507 	and.w	r5, r5, #7
    4194:	fa43 f505 	asr.w	r5, r3, r5
    4198:	f015 0f01 	tst.w	r5, #1
    419c:	d117      	bne.n	41ce <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    419e:	6823      	ldr	r3, [r4, #0]
    41a0:	685d      	ldr	r5, [r3, #4]
    41a2:	463b      	mov	r3, r7
    41a4:	4642      	mov	r2, r8
    41a6:	4631      	mov	r1, r6
    41a8:	4620      	mov	r0, r4
    41aa:	47a8      	blx	r5
    if (rc != 0) {
    41ac:	4603      	mov	r3, r0
    41ae:	b910      	cbnz	r0, 41b6 <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    41b0:	4618      	mov	r0, r3
    41b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    41b6:	f06f 0304 	mvn.w	r3, #4
    41ba:	e7f9      	b.n	41b0 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    41bc:	f06f 0301 	mvn.w	r3, #1
    41c0:	e7f6      	b.n	41b0 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    41c2:	f06f 0301 	mvn.w	r3, #1
    41c6:	e7f3      	b.n	41b0 <hal_flash_write+0x4c>
    41c8:	f06f 0301 	mvn.w	r3, #1
    41cc:	e7f0      	b.n	41b0 <hal_flash_write+0x4c>
        return SYS_EACCES;
    41ce:	f06f 0306 	mvn.w	r3, #6
    41d2:	e7ed      	b.n	41b0 <hal_flash_write+0x4c>
    41d4:	20006294 	.word	0x20006294

000041d8 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    41d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41dc:	b083      	sub	sp, #12
    41de:	4605      	mov	r5, r0
    41e0:	460e      	mov	r6, r1
    41e2:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    41e4:	f7fc fbc8 	bl	978 <hal_bsp_flash_dev>
    if (!hf) {
    41e8:	2800      	cmp	r0, #0
    41ea:	d04b      	beq.n	4284 <hal_flash_erase+0xac>
    41ec:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    41ee:	4631      	mov	r1, r6
    41f0:	f7ff ff5a 	bl	40a8 <hal_flash_check_addr>
    41f4:	2800      	cmp	r0, #0
    41f6:	d148      	bne.n	428a <hal_flash_erase+0xb2>
      hal_flash_check_addr(hf, address + num_bytes)) {
    41f8:	eb06 0708 	add.w	r7, r6, r8
    41fc:	4639      	mov	r1, r7
    41fe:	4620      	mov	r0, r4
    4200:	f7ff ff52 	bl	40a8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    4204:	2800      	cmp	r0, #0
    4206:	d143      	bne.n	4290 <hal_flash_erase+0xb8>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    4208:	08eb      	lsrs	r3, r5, #3
    420a:	4a26      	ldr	r2, [pc, #152]	; (42a4 <hal_flash_erase+0xcc>)
    420c:	5cd3      	ldrb	r3, [r2, r3]
    420e:	f005 0507 	and.w	r5, r5, #7
    4212:	fa43 f505 	asr.w	r5, r3, r5
    4216:	f015 0501 	ands.w	r5, r5, #1
    421a:	d13c      	bne.n	4296 <hal_flash_erase+0xbe>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    421c:	42b7      	cmp	r7, r6
    421e:	d93d      	bls.n	429c <hal_flash_erase+0xc4>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    4220:	6823      	ldr	r3, [r4, #0]
    4222:	699b      	ldr	r3, [r3, #24]
    4224:	b363      	cbz	r3, 4280 <hal_flash_erase+0xa8>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    4226:	4642      	mov	r2, r8
    4228:	4631      	mov	r1, r6
    422a:	4620      	mov	r0, r4
    422c:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    422e:	4628      	mov	r0, r5
    4230:	b003      	add	sp, #12
    4232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
    4236:	2300      	movs	r3, #0
    4238:	461a      	mov	r2, r3
    423a:	4619      	mov	r1, r3
    423c:	4618      	mov	r0, r3
    423e:	f7fd fbc9 	bl	19d4 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    4242:	f108 0801 	add.w	r8, r8, #1
    4246:	68e3      	ldr	r3, [r4, #12]
    4248:	4543      	cmp	r3, r8
    424a:	ddf0      	ble.n	422e <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    424c:	6823      	ldr	r3, [r4, #0]
    424e:	f8d3 900c 	ldr.w	r9, [r3, #12]
    4252:	466b      	mov	r3, sp
    4254:	aa01      	add	r2, sp, #4
    4256:	4641      	mov	r1, r8
    4258:	4620      	mov	r0, r4
    425a:	47c8      	blx	r9
            assert(rc == 0);
    425c:	2800      	cmp	r0, #0
    425e:	d1ea      	bne.n	4236 <hal_flash_erase+0x5e>
            end_area = start + size;
    4260:	9901      	ldr	r1, [sp, #4]
    4262:	9b00      	ldr	r3, [sp, #0]
    4264:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    4266:	429e      	cmp	r6, r3
    4268:	d2eb      	bcs.n	4242 <hal_flash_erase+0x6a>
    426a:	428f      	cmp	r7, r1
    426c:	d9e9      	bls.n	4242 <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    426e:	6823      	ldr	r3, [r4, #0]
    4270:	689b      	ldr	r3, [r3, #8]
    4272:	4620      	mov	r0, r4
    4274:	4798      	blx	r3
    4276:	2800      	cmp	r0, #0
    4278:	d0e3      	beq.n	4242 <hal_flash_erase+0x6a>
                    return SYS_EIO;
    427a:	f06f 0504 	mvn.w	r5, #4
    427e:	e7d6      	b.n	422e <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    4280:	46a8      	mov	r8, r5
    4282:	e7e0      	b.n	4246 <hal_flash_erase+0x6e>
        return SYS_EINVAL;
    4284:	f06f 0501 	mvn.w	r5, #1
    4288:	e7d1      	b.n	422e <hal_flash_erase+0x56>
        return SYS_EINVAL;
    428a:	f06f 0501 	mvn.w	r5, #1
    428e:	e7ce      	b.n	422e <hal_flash_erase+0x56>
    4290:	f06f 0501 	mvn.w	r5, #1
    4294:	e7cb      	b.n	422e <hal_flash_erase+0x56>
        return SYS_EACCES;
    4296:	f06f 0506 	mvn.w	r5, #6
    429a:	e7c8      	b.n	422e <hal_flash_erase+0x56>
        return SYS_EINVAL;
    429c:	f06f 0501 	mvn.w	r5, #1
    42a0:	e7c5      	b.n	422e <hal_flash_erase+0x56>
    42a2:	bf00      	nop
    42a4:	20006294 	.word	0x20006294

000042a8 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    42a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42aa:	4604      	mov	r4, r0
    42ac:	4616      	mov	r6, r2
    42ae:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    42b0:	6807      	ldr	r7, [r0, #0]
    42b2:	683f      	ldr	r7, [r7, #0]
    42b4:	47b8      	blx	r7
    if (rc != 0) {
    42b6:	b960      	cbnz	r0, 42d2 <hal_flash_is_erased+0x2a>
    42b8:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    42ba:	2300      	movs	r3, #0
    42bc:	42ab      	cmp	r3, r5
    42be:	d205      	bcs.n	42cc <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
    42c0:	5cf1      	ldrb	r1, [r6, r3]
    42c2:	7d22      	ldrb	r2, [r4, #20]
    42c4:	4291      	cmp	r1, r2
    42c6:	d102      	bne.n	42ce <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
    42c8:	3301      	adds	r3, #1
    42ca:	e7f7      	b.n	42bc <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
    42cc:	2701      	movs	r7, #1
}
    42ce:	4638      	mov	r0, r7
    42d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    42d2:	f06f 0704 	mvn.w	r7, #4
    42d6:	e7fa      	b.n	42ce <hal_flash_is_erased+0x26>

000042d8 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    42d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42dc:	460d      	mov	r5, r1
    42de:	4690      	mov	r8, r2
    42e0:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    42e2:	f7fc fb49 	bl	978 <hal_bsp_flash_dev>
    if (!hf) {
    42e6:	b1f8      	cbz	r0, 4328 <hal_flash_isempty+0x50>
    42e8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    42ea:	4629      	mov	r1, r5
    42ec:	f7ff fedc 	bl	40a8 <hal_flash_check_addr>
    42f0:	b9e8      	cbnz	r0, 432e <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
    42f2:	19a9      	adds	r1, r5, r6
    42f4:	4620      	mov	r0, r4
    42f6:	f7ff fed7 	bl	40a8 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    42fa:	b9d8      	cbnz	r0, 4334 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    42fc:	6823      	ldr	r3, [r4, #0]
    42fe:	691f      	ldr	r7, [r3, #16]
    4300:	b15f      	cbz	r7, 431a <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    4302:	4633      	mov	r3, r6
    4304:	4642      	mov	r2, r8
    4306:	4629      	mov	r1, r5
    4308:	4620      	mov	r0, r4
    430a:	47b8      	blx	r7
        if (rc < 0) {
    430c:	2800      	cmp	r0, #0
    430e:	db01      	blt.n	4314 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    4310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
    4314:	f06f 0004 	mvn.w	r0, #4
    4318:	e7fa      	b.n	4310 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    431a:	4633      	mov	r3, r6
    431c:	4642      	mov	r2, r8
    431e:	4629      	mov	r1, r5
    4320:	4620      	mov	r0, r4
    4322:	f7ff ffc1 	bl	42a8 <hal_flash_is_erased>
    4326:	e7f3      	b.n	4310 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    4328:	f06f 0001 	mvn.w	r0, #1
    432c:	e7f0      	b.n	4310 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    432e:	f06f 0001 	mvn.w	r0, #1
    4332:	e7ed      	b.n	4310 <hal_flash_isempty+0x38>
    4334:	f06f 0001 	mvn.w	r0, #1
    4338:	e7ea      	b.n	4310 <hal_flash_isempty+0x38>

0000433a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    433a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    433e:	b082      	sub	sp, #8
    4340:	e9cd 0100 	strd	r0, r1, [sp]
    4344:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    4346:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
    434a:	2401      	movs	r4, #1
    434c:	2500      	movs	r5, #0
    while (num / d >= p->base)
    434e:	e004      	b.n	435a <ui2a+0x20>
        d *= p->base;
    4350:	fb06 f305 	mul.w	r3, r6, r5
    4354:	fba4 4506 	umull	r4, r5, r4, r6
    4358:	441d      	add	r5, r3
    while (num / d >= p->base)
    435a:	4622      	mov	r2, r4
    435c:	462b      	mov	r3, r5
    435e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4362:	f000 fabb 	bl	48dc <__aeabi_uldivmod>
    4366:	f899 6003 	ldrb.w	r6, [r9, #3]
    436a:	2700      	movs	r7, #0
    436c:	42b9      	cmp	r1, r7
    436e:	bf08      	it	eq
    4370:	42b0      	cmpeq	r0, r6
    4372:	d2ed      	bcs.n	4350 <ui2a+0x16>
    int n = 0;
    4374:	f04f 0a00 	mov.w	sl, #0
    4378:	e007      	b.n	438a <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    437a:	2330      	movs	r3, #48	; 0x30
    437c:	441e      	add	r6, r3
    437e:	f888 6000 	strb.w	r6, [r8]
            ++n;
    4382:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    4386:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
    438a:	ea54 0305 	orrs.w	r3, r4, r5
    438e:	d02e      	beq.n	43ee <ui2a+0xb4>
        unsigned long long  dgt = num / d;
    4390:	4622      	mov	r2, r4
    4392:	462b      	mov	r3, r5
    4394:	e9dd 0100 	ldrd	r0, r1, [sp]
    4398:	f000 faa0 	bl	48dc <__aeabi_uldivmod>
    439c:	4606      	mov	r6, r0
    439e:	460f      	mov	r7, r1
        num %= d;
    43a0:	4622      	mov	r2, r4
    43a2:	462b      	mov	r3, r5
    43a4:	e9dd 0100 	ldrd	r0, r1, [sp]
    43a8:	f000 fa98 	bl	48dc <__aeabi_uldivmod>
    43ac:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
    43b0:	f899 2003 	ldrb.w	r2, [r9, #3]
    43b4:	2300      	movs	r3, #0
    43b6:	4620      	mov	r0, r4
    43b8:	4629      	mov	r1, r5
    43ba:	f000 fa8f 	bl	48dc <__aeabi_uldivmod>
    43be:	4604      	mov	r4, r0
    43c0:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    43c2:	f1ba 0f00 	cmp.w	sl, #0
    43c6:	d105      	bne.n	43d4 <ui2a+0x9a>
    43c8:	ea56 0307 	orrs.w	r3, r6, r7
    43cc:	d102      	bne.n	43d4 <ui2a+0x9a>
    43ce:	ea54 0305 	orrs.w	r3, r4, r5
    43d2:	d1da      	bne.n	438a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    43d4:	2f00      	cmp	r7, #0
    43d6:	bf08      	it	eq
    43d8:	2e0a      	cmpeq	r6, #10
    43da:	d3ce      	bcc.n	437a <ui2a+0x40>
    43dc:	f899 3002 	ldrb.w	r3, [r9, #2]
    43e0:	f013 0f04 	tst.w	r3, #4
    43e4:	d001      	beq.n	43ea <ui2a+0xb0>
    43e6:	2337      	movs	r3, #55	; 0x37
    43e8:	e7c8      	b.n	437c <ui2a+0x42>
    43ea:	2357      	movs	r3, #87	; 0x57
    43ec:	e7c6      	b.n	437c <ui2a+0x42>
        }
    }
    *bf = 0;
    43ee:	2300      	movs	r3, #0
    43f0:	f888 3000 	strb.w	r3, [r8]
}
    43f4:	b002      	add	sp, #8
    43f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000043fa <i2a>:

static void i2a(long long int num, struct param *p)
{
    43fa:	b508      	push	{r3, lr}
    if (num < 0) {
    43fc:	2800      	cmp	r0, #0
    43fe:	f171 0300 	sbcs.w	r3, r1, #0
    4402:	db02      	blt.n	440a <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    4404:	f7ff ff99 	bl	433a <ui2a>
}
    4408:	bd08      	pop	{r3, pc}
        num = -num;
    440a:	4240      	negs	r0, r0
    440c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    4410:	7893      	ldrb	r3, [r2, #2]
    4412:	f043 0301 	orr.w	r3, r3, #1
    4416:	7093      	strb	r3, [r2, #2]
    4418:	e7f4      	b.n	4404 <i2a+0xa>

0000441a <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    441a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    441e:	b2db      	uxtb	r3, r3
    4420:	2b09      	cmp	r3, #9
    4422:	d90b      	bls.n	443c <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    4424:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    4428:	b2db      	uxtb	r3, r3
    442a:	2b05      	cmp	r3, #5
    442c:	d908      	bls.n	4440 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    442e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    4432:	b2db      	uxtb	r3, r3
    4434:	2b05      	cmp	r3, #5
    4436:	d805      	bhi.n	4444 <a2d+0x2a>
        return ch - 'A' + 10;
    4438:	3837      	subs	r0, #55	; 0x37
    443a:	4770      	bx	lr
        return ch - '0';
    443c:	3830      	subs	r0, #48	; 0x30
    443e:	4770      	bx	lr
        return ch - 'a' + 10;
    4440:	3857      	subs	r0, #87	; 0x57
    4442:	4770      	bx	lr
    else
        return -1;
    4444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4448:	4770      	bx	lr

0000444a <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    444a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    444e:	4605      	mov	r5, r0
    4450:	4688      	mov	r8, r1
    4452:	4617      	mov	r7, r2
    4454:	4699      	mov	r9, r3
    const char *p = *src;
    4456:	680c      	ldr	r4, [r1, #0]
    int num = 0;
    4458:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    445a:	4628      	mov	r0, r5
    445c:	f7ff ffdd 	bl	441a <a2d>
    4460:	2800      	cmp	r0, #0
    4462:	db06      	blt.n	4472 <a2i+0x28>
        if (digit > base)
    4464:	42b8      	cmp	r0, r7
    4466:	dc04      	bgt.n	4472 <a2i+0x28>
            break;
        num = num * base + digit;
    4468:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
    446c:	7825      	ldrb	r5, [r4, #0]
    446e:	3401      	adds	r4, #1
    4470:	e7f3      	b.n	445a <a2i+0x10>
    }
    *src = p;
    4472:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
    4476:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
    447a:	4628      	mov	r0, r5
    447c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004480 <putf>:

static int putf(FILE *putp, char c)
{
    4480:	b500      	push	{lr}
    4482:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    4484:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    4488:	6803      	ldr	r3, [r0, #0]
    448a:	681b      	ldr	r3, [r3, #0]
    448c:	b14b      	cbz	r3, 44a2 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    448e:	2201      	movs	r2, #1
    4490:	f10d 0107 	add.w	r1, sp, #7
    4494:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    4496:	2801      	cmp	r0, #1
    4498:	d005      	beq.n	44a6 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
    449a:	2000      	movs	r0, #0
    else
        return 1;
}
    449c:	b003      	add	sp, #12
    449e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    44a2:	2000      	movs	r0, #0
    44a4:	e7fa      	b.n	449c <putf+0x1c>
        return 1;
    44a6:	2001      	movs	r0, #1
    44a8:	e7f8      	b.n	449c <putf+0x1c>
	...

000044ac <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    44ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44b0:	4606      	mov	r6, r0
    44b2:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    44b4:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    44b6:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    44b8:	e001      	b.n	44be <putchw+0x12>
        n--;
    44ba:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    44bc:	4613      	mov	r3, r2
    44be:	1c5a      	adds	r2, r3, #1
    44c0:	781b      	ldrb	r3, [r3, #0]
    44c2:	b10b      	cbz	r3, 44c8 <putchw+0x1c>
    44c4:	2c00      	cmp	r4, #0
    44c6:	dcf8      	bgt.n	44ba <putchw+0xe>
    if (p->sign)
    44c8:	78bb      	ldrb	r3, [r7, #2]
    44ca:	f013 0f01 	tst.w	r3, #1
    44ce:	d000      	beq.n	44d2 <putchw+0x26>
        n--;
    44d0:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    44d2:	887b      	ldrh	r3, [r7, #2]
    44d4:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    44d8:	b29b      	uxth	r3, r3
    44da:	f241 0202 	movw	r2, #4098	; 0x1002
    44de:	4293      	cmp	r3, r2
    44e0:	d01c      	beq.n	451c <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
    44e2:	f640 0202 	movw	r2, #2050	; 0x802
    44e6:	4293      	cmp	r3, r2
    44e8:	d01a      	beq.n	4520 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    44ea:	683b      	ldr	r3, [r7, #0]
    44ec:	4d35      	ldr	r5, [pc, #212]	; (45c4 <putchw+0x118>)
    44ee:	401d      	ands	r5, r3
    44f0:	b1f5      	cbz	r5, 4530 <putchw+0x84>
    unsigned written = 0;
    44f2:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    44f4:	78bb      	ldrb	r3, [r7, #2]
    44f6:	f013 0f01 	tst.w	r3, #1
    44fa:	d11f      	bne.n	453c <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    44fc:	887b      	ldrh	r3, [r7, #2]
    44fe:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    4502:	b29b      	uxth	r3, r3
    4504:	f241 0202 	movw	r2, #4098	; 0x1002
    4508:	4293      	cmp	r3, r2
    450a:	d01d      	beq.n	4548 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    450c:	f640 0202 	movw	r2, #2050	; 0x802
    4510:	4293      	cmp	r3, r2
    4512:	d02a      	beq.n	456a <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    4514:	787b      	ldrb	r3, [r7, #1]
    4516:	bba3      	cbnz	r3, 4582 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    4518:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
    451a:	e03d      	b.n	4598 <putchw+0xec>
        n -= 2;
    451c:	3c02      	subs	r4, #2
    451e:	e7e4      	b.n	44ea <putchw+0x3e>
        n--;
    4520:	3c01      	subs	r4, #1
    4522:	e7e2      	b.n	44ea <putchw+0x3e>
            written += putf(putp, ' ');
    4524:	2120      	movs	r1, #32
    4526:	4630      	mov	r0, r6
    4528:	f7ff ffaa 	bl	4480 <putf>
    452c:	4405      	add	r5, r0
        while (n-- > 0)
    452e:	4644      	mov	r4, r8
    4530:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    4534:	2c00      	cmp	r4, #0
    4536:	dcf5      	bgt.n	4524 <putchw+0x78>
    4538:	4644      	mov	r4, r8
    453a:	e7db      	b.n	44f4 <putchw+0x48>
        written += putf(putp, '-');
    453c:	212d      	movs	r1, #45	; 0x2d
    453e:	4630      	mov	r0, r6
    4540:	f7ff ff9e 	bl	4480 <putf>
    4544:	4405      	add	r5, r0
    4546:	e7d9      	b.n	44fc <putchw+0x50>
        written += putf(putp, '0');
    4548:	2130      	movs	r1, #48	; 0x30
    454a:	4630      	mov	r0, r6
    454c:	f7ff ff98 	bl	4480 <putf>
    4550:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    4552:	78bb      	ldrb	r3, [r7, #2]
    4554:	f013 0f04 	tst.w	r3, #4
    4558:	d005      	beq.n	4566 <putchw+0xba>
    455a:	2158      	movs	r1, #88	; 0x58
    455c:	4630      	mov	r0, r6
    455e:	f7ff ff8f 	bl	4480 <putf>
    4562:	4405      	add	r5, r0
    4564:	e7d6      	b.n	4514 <putchw+0x68>
    4566:	2178      	movs	r1, #120	; 0x78
    4568:	e7f8      	b.n	455c <putchw+0xb0>
        written += putf(putp, '0');
    456a:	2130      	movs	r1, #48	; 0x30
    456c:	4630      	mov	r0, r6
    456e:	f7ff ff87 	bl	4480 <putf>
    4572:	4405      	add	r5, r0
    4574:	e7ce      	b.n	4514 <putchw+0x68>
            written += putf(putp, '0');
    4576:	2130      	movs	r1, #48	; 0x30
    4578:	4630      	mov	r0, r6
    457a:	f7ff ff81 	bl	4480 <putf>
    457e:	4405      	add	r5, r0
        while (n-- > 0)
    4580:	4644      	mov	r4, r8
    4582:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    4586:	2c00      	cmp	r4, #0
    4588:	dcf5      	bgt.n	4576 <putchw+0xca>
    458a:	4644      	mov	r4, r8
    458c:	e7c4      	b.n	4518 <putchw+0x6c>
        written += putf(putp, ch);
    458e:	4630      	mov	r0, r6
    4590:	f7ff ff76 	bl	4480 <putf>
    4594:	4405      	add	r5, r0
    while ((ch = *bf++))
    4596:	4643      	mov	r3, r8
    4598:	f103 0801 	add.w	r8, r3, #1
    459c:	7819      	ldrb	r1, [r3, #0]
    459e:	2900      	cmp	r1, #0
    45a0:	d1f5      	bne.n	458e <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    45a2:	78bb      	ldrb	r3, [r7, #2]
    45a4:	f013 0f08 	tst.w	r3, #8
    45a8:	d106      	bne.n	45b8 <putchw+0x10c>
    45aa:	e008      	b.n	45be <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
    45ac:	2120      	movs	r1, #32
    45ae:	4630      	mov	r0, r6
    45b0:	f7ff ff66 	bl	4480 <putf>
    45b4:	4405      	add	r5, r0
        while (n-- > 0)
    45b6:	463c      	mov	r4, r7
    45b8:	1e67      	subs	r7, r4, #1
    45ba:	2c00      	cmp	r4, #0
    45bc:	dcf6      	bgt.n	45ac <putchw+0x100>
    }
    
    return written;
}
    45be:	4628      	mov	r0, r5
    45c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45c4:	0008ff00 	.word	0x0008ff00

000045c8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    45c8:	b160      	cbz	r0, 45e4 <intarg+0x1c>
    45ca:	2801      	cmp	r0, #1
    45cc:	d017      	beq.n	45fe <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
    45ce:	bb19      	cbnz	r1, 4618 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
    45d0:	6813      	ldr	r3, [r2, #0]
    45d2:	3307      	adds	r3, #7
    45d4:	f023 0307 	bic.w	r3, r3, #7
    45d8:	f103 0108 	add.w	r1, r3, #8
    45dc:	6011      	str	r1, [r2, #0]
    45de:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
    45e2:	4770      	bx	lr
        if (sign) {
    45e4:	b129      	cbz	r1, 45f2 <intarg+0x2a>
            val = va_arg(*va, int);
    45e6:	6813      	ldr	r3, [r2, #0]
    45e8:	1d19      	adds	r1, r3, #4
    45ea:	6011      	str	r1, [r2, #0]
    45ec:	6818      	ldr	r0, [r3, #0]
    45ee:	17c1      	asrs	r1, r0, #31
    45f0:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    45f2:	6813      	ldr	r3, [r2, #0]
    45f4:	1d19      	adds	r1, r3, #4
    45f6:	6011      	str	r1, [r2, #0]
    45f8:	6818      	ldr	r0, [r3, #0]
    45fa:	2100      	movs	r1, #0
    45fc:	4770      	bx	lr
        if (sign) {
    45fe:	b129      	cbz	r1, 460c <intarg+0x44>
            val = va_arg(*va, long);
    4600:	6813      	ldr	r3, [r2, #0]
    4602:	1d19      	adds	r1, r3, #4
    4604:	6011      	str	r1, [r2, #0]
    4606:	6818      	ldr	r0, [r3, #0]
    4608:	17c1      	asrs	r1, r0, #31
    460a:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    460c:	6813      	ldr	r3, [r2, #0]
    460e:	1d19      	adds	r1, r3, #4
    4610:	6011      	str	r1, [r2, #0]
    4612:	6818      	ldr	r0, [r3, #0]
    4614:	2100      	movs	r1, #0
    4616:	4770      	bx	lr
            val = va_arg(*va, long long);
    4618:	6813      	ldr	r3, [r2, #0]
    461a:	3307      	adds	r3, #7
    461c:	f023 0307 	bic.w	r3, r3, #7
    4620:	f103 0108 	add.w	r1, r3, #8
    4624:	6011      	str	r1, [r2, #0]
    4626:	e9d3 0100 	ldrd	r0, r1, [r3]
    462a:	4770      	bx	lr

0000462c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    462c:	b570      	push	{r4, r5, r6, lr}
    462e:	b08a      	sub	sp, #40	; 0x28
    4630:	4605      	mov	r5, r0
    4632:	9101      	str	r1, [sp, #4]
    4634:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    4636:	ab02      	add	r3, sp, #8
    4638:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    463a:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
    463c:	9b01      	ldr	r3, [sp, #4]
    463e:	1c5a      	adds	r2, r3, #1
    4640:	9201      	str	r2, [sp, #4]
    4642:	7819      	ldrb	r1, [r3, #0]
    4644:	2900      	cmp	r1, #0
    4646:	f000 811c 	beq.w	4882 <tfp_format+0x256>
        if (ch != '%') {
    464a:	2925      	cmp	r1, #37	; 0x25
    464c:	d004      	beq.n	4658 <tfp_format+0x2c>
            written += putf(putp, ch);
    464e:	4628      	mov	r0, r5
    4650:	f7ff ff16 	bl	4480 <putf>
    4654:	4404      	add	r4, r0
    4656:	e7f1      	b.n	463c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    4658:	2200      	movs	r2, #0
    465a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
    465e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
    4662:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
    4666:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
    466a:	f362 0382 	bfi	r3, r2, #2, #1
    466e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    4672:	9b01      	ldr	r3, [sp, #4]
    4674:	1c5a      	adds	r2, r3, #1
    4676:	9201      	str	r2, [sp, #4]
    4678:	7818      	ldrb	r0, [r3, #0]
    467a:	b128      	cbz	r0, 4688 <tfp_format+0x5c>
                switch (ch) {
    467c:	282d      	cmp	r0, #45	; 0x2d
    467e:	d04e      	beq.n	471e <tfp_format+0xf2>
    4680:	2830      	cmp	r0, #48	; 0x30
    4682:	d03c      	beq.n	46fe <tfp_format+0xd2>
    4684:	2823      	cmp	r0, #35	; 0x23
    4686:	d043      	beq.n	4710 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    4688:	282a      	cmp	r0, #42	; 0x2a
    468a:	d052      	beq.n	4732 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    468c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4690:	b2db      	uxtb	r3, r3
    4692:	2b09      	cmp	r3, #9
    4694:	d961      	bls.n	475a <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    4696:	286c      	cmp	r0, #108	; 0x6c
    4698:	d065      	beq.n	4766 <tfp_format+0x13a>
            lng = 0;
    469a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
    469c:	287a      	cmp	r0, #122	; 0x7a
    469e:	d06f      	beq.n	4780 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
    46a0:	2869      	cmp	r0, #105	; 0x69
    46a2:	f000 808e 	beq.w	47c2 <tfp_format+0x196>
    46a6:	d970      	bls.n	478a <tfp_format+0x15e>
    46a8:	2873      	cmp	r0, #115	; 0x73
    46aa:	f000 80dd 	beq.w	4868 <tfp_format+0x23c>
    46ae:	f200 8099 	bhi.w	47e4 <tfp_format+0x1b8>
    46b2:	286f      	cmp	r0, #111	; 0x6f
    46b4:	f000 80c7 	beq.w	4846 <tfp_format+0x21a>
    46b8:	2870      	cmp	r0, #112	; 0x70
    46ba:	d1bf      	bne.n	463c <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
    46bc:	9b00      	ldr	r3, [sp, #0]
    46be:	1d1a      	adds	r2, r3, #4
    46c0:	9200      	str	r2, [sp, #0]
    46c2:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    46c4:	2310      	movs	r3, #16
    46c6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    46ca:	aa08      	add	r2, sp, #32
    46cc:	2100      	movs	r1, #0
    46ce:	f7ff fe34 	bl	433a <ui2a>
                p.width = 2 * sizeof(void*);
    46d2:	2308      	movs	r3, #8
    46d4:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    46d8:	2301      	movs	r3, #1
    46da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    46de:	2130      	movs	r1, #48	; 0x30
    46e0:	4628      	mov	r0, r5
    46e2:	f7ff fecd 	bl	4480 <putf>
    46e6:	4404      	add	r4, r0
                written += putf(putp, 'x');
    46e8:	2178      	movs	r1, #120	; 0x78
    46ea:	4628      	mov	r0, r5
    46ec:	f7ff fec8 	bl	4480 <putf>
    46f0:	4404      	add	r4, r0
                written += putchw(putp, &p);
    46f2:	a908      	add	r1, sp, #32
    46f4:	4628      	mov	r0, r5
    46f6:	f7ff fed9 	bl	44ac <putchw>
    46fa:	4404      	add	r4, r0
                break;
    46fc:	e79e      	b.n	463c <tfp_format+0x10>
                    if (!p.left) {
    46fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4702:	f013 0f08 	tst.w	r3, #8
    4706:	d1b4      	bne.n	4672 <tfp_format+0x46>
                        p.lz = 1;
    4708:	2301      	movs	r3, #1
    470a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    470e:	e7b0      	b.n	4672 <tfp_format+0x46>
                    p.alt = 1;
    4710:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4714:	f043 0302 	orr.w	r3, r3, #2
    4718:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    471c:	e7a9      	b.n	4672 <tfp_format+0x46>
                    p.left = 1;
    471e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4722:	f043 0308 	orr.w	r3, r3, #8
    4726:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    472a:	2300      	movs	r3, #0
    472c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    4730:	e79f      	b.n	4672 <tfp_format+0x46>
                i = intarg(0, 1, &va);
    4732:	466a      	mov	r2, sp
    4734:	2101      	movs	r1, #1
    4736:	2000      	movs	r0, #0
    4738:	f7ff ff46 	bl	45c8 <intarg>
                if (i > UCHAR_MAX) {
    473c:	28ff      	cmp	r0, #255	; 0xff
    473e:	dd07      	ble.n	4750 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
    4740:	23ff      	movs	r3, #255	; 0xff
    4742:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    4746:	9b01      	ldr	r3, [sp, #4]
    4748:	1c5a      	adds	r2, r3, #1
    474a:	9201      	str	r2, [sp, #4]
    474c:	7818      	ldrb	r0, [r3, #0]
    474e:	e7a2      	b.n	4696 <tfp_format+0x6a>
                } else if (i > 0) {
    4750:	2800      	cmp	r0, #0
    4752:	ddf8      	ble.n	4746 <tfp_format+0x11a>
                    p.width = i;
    4754:	f88d 0020 	strb.w	r0, [sp, #32]
    4758:	e7f5      	b.n	4746 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
    475a:	ab08      	add	r3, sp, #32
    475c:	220a      	movs	r2, #10
    475e:	a901      	add	r1, sp, #4
    4760:	f7ff fe73 	bl	444a <a2i>
    4764:	e797      	b.n	4696 <tfp_format+0x6a>
                ch = *(fmt++);
    4766:	9b01      	ldr	r3, [sp, #4]
    4768:	1c5a      	adds	r2, r3, #1
    476a:	9201      	str	r2, [sp, #4]
    476c:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
    476e:	286c      	cmp	r0, #108	; 0x6c
    4770:	d001      	beq.n	4776 <tfp_format+0x14a>
                lng = 1;
    4772:	2601      	movs	r6, #1
    4774:	e792      	b.n	469c <tfp_format+0x70>
                    ch = *(fmt++);
    4776:	1c9a      	adds	r2, r3, #2
    4778:	9201      	str	r2, [sp, #4]
    477a:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
    477c:	2602      	movs	r6, #2
    477e:	e78d      	b.n	469c <tfp_format+0x70>
                ch = *(fmt++);
    4780:	9b01      	ldr	r3, [sp, #4]
    4782:	1c5a      	adds	r2, r3, #1
    4784:	9201      	str	r2, [sp, #4]
    4786:	7818      	ldrb	r0, [r3, #0]
    4788:	e78a      	b.n	46a0 <tfp_format+0x74>
            switch (ch) {
    478a:	2858      	cmp	r0, #88	; 0x58
    478c:	d040      	beq.n	4810 <tfp_format+0x1e4>
    478e:	d80a      	bhi.n	47a6 <tfp_format+0x17a>
    4790:	2800      	cmp	r0, #0
    4792:	d076      	beq.n	4882 <tfp_format+0x256>
    4794:	2825      	cmp	r0, #37	; 0x25
    4796:	f47f af51 	bne.w	463c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
    479a:	4601      	mov	r1, r0
    479c:	4628      	mov	r0, r5
    479e:	f7ff fe6f 	bl	4480 <putf>
    47a2:	4404      	add	r4, r0
                break;
    47a4:	e74a      	b.n	463c <tfp_format+0x10>
            switch (ch) {
    47a6:	2863      	cmp	r0, #99	; 0x63
    47a8:	d108      	bne.n	47bc <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
    47aa:	9b00      	ldr	r3, [sp, #0]
    47ac:	1d1a      	adds	r2, r3, #4
    47ae:	9200      	str	r2, [sp, #0]
    47b0:	7819      	ldrb	r1, [r3, #0]
    47b2:	4628      	mov	r0, r5
    47b4:	f7ff fe64 	bl	4480 <putf>
    47b8:	4404      	add	r4, r0
                break;
    47ba:	e73f      	b.n	463c <tfp_format+0x10>
            switch (ch) {
    47bc:	2864      	cmp	r0, #100	; 0x64
    47be:	f47f af3d 	bne.w	463c <tfp_format+0x10>
                p.base = 10;
    47c2:	230a      	movs	r3, #10
    47c4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    47c8:	466a      	mov	r2, sp
    47ca:	2101      	movs	r1, #1
    47cc:	4630      	mov	r0, r6
    47ce:	f7ff fefb 	bl	45c8 <intarg>
    47d2:	aa08      	add	r2, sp, #32
    47d4:	f7ff fe11 	bl	43fa <i2a>
                written += putchw(putp, &p);
    47d8:	a908      	add	r1, sp, #32
    47da:	4628      	mov	r0, r5
    47dc:	f7ff fe66 	bl	44ac <putchw>
    47e0:	4404      	add	r4, r0
                break;
    47e2:	e72b      	b.n	463c <tfp_format+0x10>
            switch (ch) {
    47e4:	2875      	cmp	r0, #117	; 0x75
    47e6:	d110      	bne.n	480a <tfp_format+0x1de>
                p.base = 10;
    47e8:	230a      	movs	r3, #10
    47ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    47ee:	466a      	mov	r2, sp
    47f0:	2100      	movs	r1, #0
    47f2:	4630      	mov	r0, r6
    47f4:	f7ff fee8 	bl	45c8 <intarg>
    47f8:	aa08      	add	r2, sp, #32
    47fa:	f7ff fd9e 	bl	433a <ui2a>
                written += putchw(putp, &p);
    47fe:	a908      	add	r1, sp, #32
    4800:	4628      	mov	r0, r5
    4802:	f7ff fe53 	bl	44ac <putchw>
    4806:	4404      	add	r4, r0
                break;
    4808:	e718      	b.n	463c <tfp_format+0x10>
            switch (ch) {
    480a:	2878      	cmp	r0, #120	; 0x78
    480c:	f47f af16 	bne.w	463c <tfp_format+0x10>
                p.base = 16;
    4810:	2310      	movs	r3, #16
    4812:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    4816:	2858      	cmp	r0, #88	; 0x58
    4818:	bf14      	ite	ne
    481a:	2300      	movne	r3, #0
    481c:	2301      	moveq	r3, #1
    481e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    4822:	f363 0282 	bfi	r2, r3, #2, #1
    4826:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    482a:	466a      	mov	r2, sp
    482c:	2100      	movs	r1, #0
    482e:	4630      	mov	r0, r6
    4830:	f7ff feca 	bl	45c8 <intarg>
    4834:	aa08      	add	r2, sp, #32
    4836:	f7ff fd80 	bl	433a <ui2a>
                written += putchw(putp, &p);
    483a:	a908      	add	r1, sp, #32
    483c:	4628      	mov	r0, r5
    483e:	f7ff fe35 	bl	44ac <putchw>
    4842:	4404      	add	r4, r0
                break;
    4844:	e6fa      	b.n	463c <tfp_format+0x10>
                p.base = 8;
    4846:	2308      	movs	r3, #8
    4848:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    484c:	466a      	mov	r2, sp
    484e:	2100      	movs	r1, #0
    4850:	4630      	mov	r0, r6
    4852:	f7ff feb9 	bl	45c8 <intarg>
    4856:	aa08      	add	r2, sp, #32
    4858:	f7ff fd6f 	bl	433a <ui2a>
                written += putchw(putp, &p);
    485c:	a908      	add	r1, sp, #32
    485e:	4628      	mov	r0, r5
    4860:	f7ff fe24 	bl	44ac <putchw>
    4864:	4404      	add	r4, r0
                break;
    4866:	e6e9      	b.n	463c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
    4868:	9b00      	ldr	r3, [sp, #0]
    486a:	1d1a      	adds	r2, r3, #4
    486c:	9200      	str	r2, [sp, #0]
    486e:	681b      	ldr	r3, [r3, #0]
    4870:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    4872:	a908      	add	r1, sp, #32
    4874:	4628      	mov	r0, r5
    4876:	f7ff fe19 	bl	44ac <putchw>
    487a:	4404      	add	r4, r0
                p.bf = bf;
    487c:	ab02      	add	r3, sp, #8
    487e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    4880:	e6dc      	b.n	463c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
    4882:	4620      	mov	r0, r4
    4884:	b00a      	add	sp, #40	; 0x28
    4886:	bd70      	pop	{r4, r5, r6, pc}

00004888 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    4888:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    488a:	f7ff fecf 	bl	462c <tfp_format>
}
    488e:	bd08      	pop	{r3, pc}

00004890 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    4890:	b40f      	push	{r0, r1, r2, r3}
    4892:	b500      	push	{lr}
    4894:	b083      	sub	sp, #12
    4896:	aa04      	add	r2, sp, #16
    4898:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    489c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    489e:	4b04      	ldr	r3, [pc, #16]	; (48b0 <printf+0x20>)
    48a0:	6818      	ldr	r0, [r3, #0]
    48a2:	f7ff fff1 	bl	4888 <vfprintf>
    va_end(va);
    return rv;
}
    48a6:	b003      	add	sp, #12
    48a8:	f85d eb04 	ldr.w	lr, [sp], #4
    48ac:	b004      	add	sp, #16
    48ae:	4770      	bx	lr
    48b0:	00005064 	.word	0x00005064

000048b4 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
    48b4:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
    48b6:	460a      	mov	r2, r1
    48b8:	4601      	mov	r1, r0
    48ba:	4b02      	ldr	r3, [pc, #8]	; (48c4 <vprintf+0x10>)
    48bc:	6818      	ldr	r0, [r3, #0]
    48be:	f7ff ffe3 	bl	4888 <vfprintf>
}
    48c2:	bd08      	pop	{r3, pc}
    48c4:	00005064 	.word	0x00005064

000048c8 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    48c8:	2000      	movs	r0, #0
    48ca:	4770      	bx	lr

000048cc <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    48cc:	b510      	push	{r4, lr}
    48ce:	4608      	mov	r0, r1
    48d0:	4614      	mov	r4, r2
    console_write(bp, n);
    48d2:	4611      	mov	r1, r2
    48d4:	f7fd fba9 	bl	202a <console_write>
    return n;
}
    48d8:	4620      	mov	r0, r4
    48da:	bd10      	pop	{r4, pc}

000048dc <__aeabi_uldivmod>:
    48dc:	b953      	cbnz	r3, 48f4 <__aeabi_uldivmod+0x18>
    48de:	b94a      	cbnz	r2, 48f4 <__aeabi_uldivmod+0x18>
    48e0:	2900      	cmp	r1, #0
    48e2:	bf08      	it	eq
    48e4:	2800      	cmpeq	r0, #0
    48e6:	bf1c      	itt	ne
    48e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    48ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    48f0:	f000 b972 	b.w	4bd8 <__aeabi_idiv0>
    48f4:	f1ad 0c08 	sub.w	ip, sp, #8
    48f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    48fc:	f000 f806 	bl	490c <__udivmoddi4>
    4900:	f8dd e004 	ldr.w	lr, [sp, #4]
    4904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4908:	b004      	add	sp, #16
    490a:	4770      	bx	lr

0000490c <__udivmoddi4>:
    490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4910:	9e08      	ldr	r6, [sp, #32]
    4912:	4604      	mov	r4, r0
    4914:	4688      	mov	r8, r1
    4916:	2b00      	cmp	r3, #0
    4918:	d14b      	bne.n	49b2 <__udivmoddi4+0xa6>
    491a:	428a      	cmp	r2, r1
    491c:	4615      	mov	r5, r2
    491e:	d967      	bls.n	49f0 <__udivmoddi4+0xe4>
    4920:	fab2 f282 	clz	r2, r2
    4924:	b14a      	cbz	r2, 493a <__udivmoddi4+0x2e>
    4926:	f1c2 0720 	rsb	r7, r2, #32
    492a:	fa01 f302 	lsl.w	r3, r1, r2
    492e:	fa20 f707 	lsr.w	r7, r0, r7
    4932:	4095      	lsls	r5, r2
    4934:	ea47 0803 	orr.w	r8, r7, r3
    4938:	4094      	lsls	r4, r2
    493a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    493e:	0c23      	lsrs	r3, r4, #16
    4940:	fbb8 f7fe 	udiv	r7, r8, lr
    4944:	fa1f fc85 	uxth.w	ip, r5
    4948:	fb0e 8817 	mls	r8, lr, r7, r8
    494c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4950:	fb07 f10c 	mul.w	r1, r7, ip
    4954:	4299      	cmp	r1, r3
    4956:	d909      	bls.n	496c <__udivmoddi4+0x60>
    4958:	18eb      	adds	r3, r5, r3
    495a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    495e:	f080 811b 	bcs.w	4b98 <__udivmoddi4+0x28c>
    4962:	4299      	cmp	r1, r3
    4964:	f240 8118 	bls.w	4b98 <__udivmoddi4+0x28c>
    4968:	3f02      	subs	r7, #2
    496a:	442b      	add	r3, r5
    496c:	1a5b      	subs	r3, r3, r1
    496e:	b2a4      	uxth	r4, r4
    4970:	fbb3 f0fe 	udiv	r0, r3, lr
    4974:	fb0e 3310 	mls	r3, lr, r0, r3
    4978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    497c:	fb00 fc0c 	mul.w	ip, r0, ip
    4980:	45a4      	cmp	ip, r4
    4982:	d909      	bls.n	4998 <__udivmoddi4+0x8c>
    4984:	192c      	adds	r4, r5, r4
    4986:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    498a:	f080 8107 	bcs.w	4b9c <__udivmoddi4+0x290>
    498e:	45a4      	cmp	ip, r4
    4990:	f240 8104 	bls.w	4b9c <__udivmoddi4+0x290>
    4994:	3802      	subs	r0, #2
    4996:	442c      	add	r4, r5
    4998:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    499c:	eba4 040c 	sub.w	r4, r4, ip
    49a0:	2700      	movs	r7, #0
    49a2:	b11e      	cbz	r6, 49ac <__udivmoddi4+0xa0>
    49a4:	40d4      	lsrs	r4, r2
    49a6:	2300      	movs	r3, #0
    49a8:	e9c6 4300 	strd	r4, r3, [r6]
    49ac:	4639      	mov	r1, r7
    49ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    49b2:	428b      	cmp	r3, r1
    49b4:	d909      	bls.n	49ca <__udivmoddi4+0xbe>
    49b6:	2e00      	cmp	r6, #0
    49b8:	f000 80eb 	beq.w	4b92 <__udivmoddi4+0x286>
    49bc:	2700      	movs	r7, #0
    49be:	e9c6 0100 	strd	r0, r1, [r6]
    49c2:	4638      	mov	r0, r7
    49c4:	4639      	mov	r1, r7
    49c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    49ca:	fab3 f783 	clz	r7, r3
    49ce:	2f00      	cmp	r7, #0
    49d0:	d147      	bne.n	4a62 <__udivmoddi4+0x156>
    49d2:	428b      	cmp	r3, r1
    49d4:	d302      	bcc.n	49dc <__udivmoddi4+0xd0>
    49d6:	4282      	cmp	r2, r0
    49d8:	f200 80fa 	bhi.w	4bd0 <__udivmoddi4+0x2c4>
    49dc:	1a84      	subs	r4, r0, r2
    49de:	eb61 0303 	sbc.w	r3, r1, r3
    49e2:	2001      	movs	r0, #1
    49e4:	4698      	mov	r8, r3
    49e6:	2e00      	cmp	r6, #0
    49e8:	d0e0      	beq.n	49ac <__udivmoddi4+0xa0>
    49ea:	e9c6 4800 	strd	r4, r8, [r6]
    49ee:	e7dd      	b.n	49ac <__udivmoddi4+0xa0>
    49f0:	b902      	cbnz	r2, 49f4 <__udivmoddi4+0xe8>
    49f2:	deff      	udf	#255	; 0xff
    49f4:	fab2 f282 	clz	r2, r2
    49f8:	2a00      	cmp	r2, #0
    49fa:	f040 808f 	bne.w	4b1c <__udivmoddi4+0x210>
    49fe:	1b49      	subs	r1, r1, r5
    4a00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4a04:	fa1f f885 	uxth.w	r8, r5
    4a08:	2701      	movs	r7, #1
    4a0a:	fbb1 fcfe 	udiv	ip, r1, lr
    4a0e:	0c23      	lsrs	r3, r4, #16
    4a10:	fb0e 111c 	mls	r1, lr, ip, r1
    4a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4a18:	fb08 f10c 	mul.w	r1, r8, ip
    4a1c:	4299      	cmp	r1, r3
    4a1e:	d907      	bls.n	4a30 <__udivmoddi4+0x124>
    4a20:	18eb      	adds	r3, r5, r3
    4a22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    4a26:	d202      	bcs.n	4a2e <__udivmoddi4+0x122>
    4a28:	4299      	cmp	r1, r3
    4a2a:	f200 80cd 	bhi.w	4bc8 <__udivmoddi4+0x2bc>
    4a2e:	4684      	mov	ip, r0
    4a30:	1a59      	subs	r1, r3, r1
    4a32:	b2a3      	uxth	r3, r4
    4a34:	fbb1 f0fe 	udiv	r0, r1, lr
    4a38:	fb0e 1410 	mls	r4, lr, r0, r1
    4a3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4a40:	fb08 f800 	mul.w	r8, r8, r0
    4a44:	45a0      	cmp	r8, r4
    4a46:	d907      	bls.n	4a58 <__udivmoddi4+0x14c>
    4a48:	192c      	adds	r4, r5, r4
    4a4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4a4e:	d202      	bcs.n	4a56 <__udivmoddi4+0x14a>
    4a50:	45a0      	cmp	r8, r4
    4a52:	f200 80b6 	bhi.w	4bc2 <__udivmoddi4+0x2b6>
    4a56:	4618      	mov	r0, r3
    4a58:	eba4 0408 	sub.w	r4, r4, r8
    4a5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4a60:	e79f      	b.n	49a2 <__udivmoddi4+0x96>
    4a62:	f1c7 0c20 	rsb	ip, r7, #32
    4a66:	40bb      	lsls	r3, r7
    4a68:	fa22 fe0c 	lsr.w	lr, r2, ip
    4a6c:	ea4e 0e03 	orr.w	lr, lr, r3
    4a70:	fa01 f407 	lsl.w	r4, r1, r7
    4a74:	fa20 f50c 	lsr.w	r5, r0, ip
    4a78:	fa21 f30c 	lsr.w	r3, r1, ip
    4a7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
    4a80:	4325      	orrs	r5, r4
    4a82:	fbb3 f9f8 	udiv	r9, r3, r8
    4a86:	0c2c      	lsrs	r4, r5, #16
    4a88:	fb08 3319 	mls	r3, r8, r9, r3
    4a8c:	fa1f fa8e 	uxth.w	sl, lr
    4a90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4a94:	fb09 f40a 	mul.w	r4, r9, sl
    4a98:	429c      	cmp	r4, r3
    4a9a:	fa02 f207 	lsl.w	r2, r2, r7
    4a9e:	fa00 f107 	lsl.w	r1, r0, r7
    4aa2:	d90b      	bls.n	4abc <__udivmoddi4+0x1b0>
    4aa4:	eb1e 0303 	adds.w	r3, lr, r3
    4aa8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    4aac:	f080 8087 	bcs.w	4bbe <__udivmoddi4+0x2b2>
    4ab0:	429c      	cmp	r4, r3
    4ab2:	f240 8084 	bls.w	4bbe <__udivmoddi4+0x2b2>
    4ab6:	f1a9 0902 	sub.w	r9, r9, #2
    4aba:	4473      	add	r3, lr
    4abc:	1b1b      	subs	r3, r3, r4
    4abe:	b2ad      	uxth	r5, r5
    4ac0:	fbb3 f0f8 	udiv	r0, r3, r8
    4ac4:	fb08 3310 	mls	r3, r8, r0, r3
    4ac8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    4acc:	fb00 fa0a 	mul.w	sl, r0, sl
    4ad0:	45a2      	cmp	sl, r4
    4ad2:	d908      	bls.n	4ae6 <__udivmoddi4+0x1da>
    4ad4:	eb1e 0404 	adds.w	r4, lr, r4
    4ad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4adc:	d26b      	bcs.n	4bb6 <__udivmoddi4+0x2aa>
    4ade:	45a2      	cmp	sl, r4
    4ae0:	d969      	bls.n	4bb6 <__udivmoddi4+0x2aa>
    4ae2:	3802      	subs	r0, #2
    4ae4:	4474      	add	r4, lr
    4ae6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4aea:	fba0 8902 	umull	r8, r9, r0, r2
    4aee:	eba4 040a 	sub.w	r4, r4, sl
    4af2:	454c      	cmp	r4, r9
    4af4:	46c2      	mov	sl, r8
    4af6:	464b      	mov	r3, r9
    4af8:	d354      	bcc.n	4ba4 <__udivmoddi4+0x298>
    4afa:	d051      	beq.n	4ba0 <__udivmoddi4+0x294>
    4afc:	2e00      	cmp	r6, #0
    4afe:	d069      	beq.n	4bd4 <__udivmoddi4+0x2c8>
    4b00:	ebb1 050a 	subs.w	r5, r1, sl
    4b04:	eb64 0403 	sbc.w	r4, r4, r3
    4b08:	fa04 fc0c 	lsl.w	ip, r4, ip
    4b0c:	40fd      	lsrs	r5, r7
    4b0e:	40fc      	lsrs	r4, r7
    4b10:	ea4c 0505 	orr.w	r5, ip, r5
    4b14:	e9c6 5400 	strd	r5, r4, [r6]
    4b18:	2700      	movs	r7, #0
    4b1a:	e747      	b.n	49ac <__udivmoddi4+0xa0>
    4b1c:	f1c2 0320 	rsb	r3, r2, #32
    4b20:	fa20 f703 	lsr.w	r7, r0, r3
    4b24:	4095      	lsls	r5, r2
    4b26:	fa01 f002 	lsl.w	r0, r1, r2
    4b2a:	fa21 f303 	lsr.w	r3, r1, r3
    4b2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4b32:	4338      	orrs	r0, r7
    4b34:	0c01      	lsrs	r1, r0, #16
    4b36:	fbb3 f7fe 	udiv	r7, r3, lr
    4b3a:	fa1f f885 	uxth.w	r8, r5
    4b3e:	fb0e 3317 	mls	r3, lr, r7, r3
    4b42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4b46:	fb07 f308 	mul.w	r3, r7, r8
    4b4a:	428b      	cmp	r3, r1
    4b4c:	fa04 f402 	lsl.w	r4, r4, r2
    4b50:	d907      	bls.n	4b62 <__udivmoddi4+0x256>
    4b52:	1869      	adds	r1, r5, r1
    4b54:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    4b58:	d22f      	bcs.n	4bba <__udivmoddi4+0x2ae>
    4b5a:	428b      	cmp	r3, r1
    4b5c:	d92d      	bls.n	4bba <__udivmoddi4+0x2ae>
    4b5e:	3f02      	subs	r7, #2
    4b60:	4429      	add	r1, r5
    4b62:	1acb      	subs	r3, r1, r3
    4b64:	b281      	uxth	r1, r0
    4b66:	fbb3 f0fe 	udiv	r0, r3, lr
    4b6a:	fb0e 3310 	mls	r3, lr, r0, r3
    4b6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4b72:	fb00 f308 	mul.w	r3, r0, r8
    4b76:	428b      	cmp	r3, r1
    4b78:	d907      	bls.n	4b8a <__udivmoddi4+0x27e>
    4b7a:	1869      	adds	r1, r5, r1
    4b7c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    4b80:	d217      	bcs.n	4bb2 <__udivmoddi4+0x2a6>
    4b82:	428b      	cmp	r3, r1
    4b84:	d915      	bls.n	4bb2 <__udivmoddi4+0x2a6>
    4b86:	3802      	subs	r0, #2
    4b88:	4429      	add	r1, r5
    4b8a:	1ac9      	subs	r1, r1, r3
    4b8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    4b90:	e73b      	b.n	4a0a <__udivmoddi4+0xfe>
    4b92:	4637      	mov	r7, r6
    4b94:	4630      	mov	r0, r6
    4b96:	e709      	b.n	49ac <__udivmoddi4+0xa0>
    4b98:	4607      	mov	r7, r0
    4b9a:	e6e7      	b.n	496c <__udivmoddi4+0x60>
    4b9c:	4618      	mov	r0, r3
    4b9e:	e6fb      	b.n	4998 <__udivmoddi4+0x8c>
    4ba0:	4541      	cmp	r1, r8
    4ba2:	d2ab      	bcs.n	4afc <__udivmoddi4+0x1f0>
    4ba4:	ebb8 0a02 	subs.w	sl, r8, r2
    4ba8:	eb69 020e 	sbc.w	r2, r9, lr
    4bac:	3801      	subs	r0, #1
    4bae:	4613      	mov	r3, r2
    4bb0:	e7a4      	b.n	4afc <__udivmoddi4+0x1f0>
    4bb2:	4660      	mov	r0, ip
    4bb4:	e7e9      	b.n	4b8a <__udivmoddi4+0x27e>
    4bb6:	4618      	mov	r0, r3
    4bb8:	e795      	b.n	4ae6 <__udivmoddi4+0x1da>
    4bba:	4667      	mov	r7, ip
    4bbc:	e7d1      	b.n	4b62 <__udivmoddi4+0x256>
    4bbe:	4681      	mov	r9, r0
    4bc0:	e77c      	b.n	4abc <__udivmoddi4+0x1b0>
    4bc2:	3802      	subs	r0, #2
    4bc4:	442c      	add	r4, r5
    4bc6:	e747      	b.n	4a58 <__udivmoddi4+0x14c>
    4bc8:	f1ac 0c02 	sub.w	ip, ip, #2
    4bcc:	442b      	add	r3, r5
    4bce:	e72f      	b.n	4a30 <__udivmoddi4+0x124>
    4bd0:	4638      	mov	r0, r7
    4bd2:	e708      	b.n	49e6 <__udivmoddi4+0xda>
    4bd4:	4637      	mov	r7, r6
    4bd6:	e6e9      	b.n	49ac <__udivmoddi4+0xa0>

00004bd8 <__aeabi_idiv0>:
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop
    4bdc:	72617453 	.word	0x72617453
    4be0:	676e6974 	.word	0x676e6974
    4be4:	55434d20 	.word	0x55434d20
    4be8:	746f6f42 	.word	0x746f6f42
    4bec:	0a2e2e2e 	.word	0x0a2e2e2e
    4bf0:	00000000 	.word	0x00000000

00004bf4 <CASET1_PARA.7811>:
    4bf4:	13000000                                ....

00004bf8 <CASET2_PARA.7814>:
    4bf8:	27001400                                ...'

00004bfc <COLMOD_PARA.7833>:
    4bfc:	00000005                                ....

00004c00 <FRMCTR1_PARA.7821>:
    4c00:	002d2c01                                .,-.

00004c04 <FRMCTR2_PARA.7822>:
    4c04:	002d2c01                                .,-.

00004c08 <FRMCTR3_PARA.7823>:
    4c08:	012d2c01 00002d2c                       .,-.,-..

00004c10 <INVCTR_PARA.7824>:
    4c10:	00000007                                ....

00004c14 <MADCTL1_PARA.7831>:
    4c14:	00000000                                ....

00004c18 <PWCTR1_PARA.7825>:
    4c18:	008402a2                                ....

00004c1c <PWCTR2_PARA.7826>:
    4c1c:	000000c5                                ....

00004c20 <PWCTR3_PARA.7827>:
    4c20:	0000000a                                ....

00004c24 <PWCTR4_PARA.7828>:
    4c24:	00002a8a                                .*..

00004c28 <PWCTR5_PARA.7829>:
    4c28:	0000ee8a                                ....

00004c2c <RAMWR1_PARA.7813>:
    4c2c:	e087e087 e087e087 e087e087 e087e087     ................
    4c3c:	e087e087 e087e087 e087e087 e087e087     ................
    4c4c:	e087e087 e087e087                       ........

00004c54 <RAMWR2_PARA.7816>:
    4c54:	e087e087 e087e087 e087e087 e087e087     ................
    4c64:	e087e087 e087e087 e087e087 e087e087     ................
    4c74:	e087e087 e087e087                       ........

00004c7c <RASET1_PARA.7812>:
    4c7c:	00000000                                ....

00004c80 <RASET2_PARA.7815>:
    4c80:	00000000                                ....

00004c84 <VMCTR1_PARA.7830>:
    4c84:	0000000e 70736944 6979616c 6920676e     ....Displaying i
    4c94:	6567616d 0a2e2e2e 00000000 67616d49     mage........Imag
    4ca4:	69642065 616c7073 0a646579 00000000     e displayed.....

00004cb4 <flash_devs>:
    4cb4:	00004d08 200000e8                       .M..... 

00004cbc <spiflash_characteristics>:
    4cbc:	00007530 00061a80 0001d4c0 000c3500     0u...........5..
    4ccc:	000249f0 000f4240 002dc6c0 00989680     .I..@B....-.....
    4cdc:	000002bc 00000bb8 00000014 00000032     ............2...

00004cec <spiflash_flash_funcs>:
    4cec:	00000b17 00000ba1 00000d1b 000009cd     ................
    4cfc:	00000000 00000e59 00000ded              ....Y.......

00004d08 <nrf52k_flash_dev>:
    4d08:	00004d20 00000000 00080000 00000080      M..............
    4d18:	00000001 000000ff                       ........

00004d20 <nrf52k_flash_funcs>:
    4d20:	0000100d 00000f3d 00000ec5 00000f1d     ....=...........
    4d30:	00000000 00000f19 00000000              ............

00004d3c <nrf52_hal_spis>:
    4d3c:	20006298 00000000 00000000              .b. ........

00004d48 <os_bsp_spi0m_cfg>:
    4d48:	00040302                                ....

00004d4c <nrf52_hal_timers>:
    4d4c:	200062c0 00000000 00000000 00000000     .b. ............
	...
    4d64:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
    4d74:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
    4d84:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
    4d94:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
    4da4:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
    4db4:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
    4dc4:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
    4dd4:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
    4de4:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
    4df4:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
    4e04:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
    4e14:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
    4e24:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
    4e34:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
    4e44:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
    4e54:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
    4e64:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
    4e74:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
    4e84:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
    4e94:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
    4ea4:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
    4eb4:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
    4ec4:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
    4ed4:	7379736d 0000315f 6c363025 00002075     msys_1..%06lu ..

00004ee4 <sysflash_map_dflt>:
	...
    4eec:	00006000 00000001 00008000 00074000     .`...........@..
    4efc:	00000102 00000000 00074000 00000003     .........@......
    4f0c:	0007c000 00001000 00000010 00006000     .............`..
    4f1c:	00002000 00000111 00074000 0038c000     . .......@....8.

00004f2c <boot_status_tables>:
    4f2c:	00010501 02030501 01040104 02030403     ................
    4f3c:	00000103                                ....

00004f40 <boot_img_magic>:
    4f40:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00004f50 <boot_swap_tables>:
    4f50:	03040104 01040204 03040104 04030301     ................
    4f60:	00000401                                ....

00004f64 <K>:
    4f64:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    4f74:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    4f84:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    4f94:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    4fa4:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    4fb4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    4fc4:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    4fd4:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    4fe4:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    4ff4:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    5004:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    5014:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    5024:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    5034:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    5044:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    5054:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00005064 <stdout>:
    5064:	20000150                                P.. 

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  20608	    132	  25212	  45952	   b380	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
