
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x000130e0 vaddr 0x000030e0 paddr 0x000030e0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000030f8 memsz 0x000030f8 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x000030f8 align 2**16
         filesz 0x0000001c memsz 0x00001858 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              000030e0  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  000030e0  000030e0  000200f4  2**0  CONTENTS
  2 .ARM.exidx         00000018  000030e0  000030e0  000130e0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  000200f4  2**0  CONTENTS
  5 .data              0000001c  200000d8  000030f8  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  200000f4  200000f4  000200f4  2**0  CONTENTS
  7 .bss               0000183c  200000f4  00003114  000200f4  2**2  ALLOC
  8 .stack_dummy       000001b0  20001930  20001930  000200f8  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  000202a8  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  000202d7  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  00020356  2**0  CONTENTS, READONLY
 12 .debug_line        00009503  00000000  00000000  0002035a  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        00015e10  00000000  00000000  0002985d  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      00004176  00000000  00000000  0003f66d  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00000ae0  00000000  00000000  000437e8  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00003e48  00000000  00000000  000442c8  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000744d  00000000  00000000  00048110  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      000008c8  00000000  00000000  0004f55d  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       00001a8c  00000000  00000000  0004fe28  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000030e0 l    d  .ARM.extab	00000000 .ARM.extab
000030e0 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
200000f4 l    d  .bssnz	00000000 .bssnz
200000f4 l    d  .bss	00000000 .bss
20001930 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001ec l     F .text	0000003c errata_16
00000228 l     F .text	0000004c errata_31
00000274 l     F .text	0000003c errata_32
000002b0 l     F .text	0000004c errata_36
000002fc l     F .text	0000003c errata_37
00000338 l     F .text	0000003c errata_57
00000374 l     F .text	0000003c errata_66
000003b0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000698 l     F .text	00000028 nrf52k_flash_wait_ready
000006c0 l     F .text	00000054 nrf52k_flash_erase_sector
00000714 l     F .text	00000004 nrf52k_flash_init
00000718 l     F .text	00000020 nrf52k_flash_sector_info
00000738 l     F .text	000000d0 nrf52k_flash_write
00000808 l     F .text	0000000e nrf52k_flash_read
00002f2c l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000820 l     F .text	0000000e nrf52_hal_wdt_default_handler
00000830 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
000008c8 l     F .text	00000034 nrf52_periph_create_timers
00000000 l    df *ABS*	00000000 hal_timer.c
00000904 l     F .text	0000000a nrf_read_timer_cntr
00000910 l     F .text	000000b4 nrf_timer_set_ocmp
000009c4 l     F .text	0000000a nrf_timer_disable_ocmp
000009ce l     F .text	0000000a nrf_rtc_disable_ocmp
000009d8 l     F .text	00000054 hal_timer_read_bsptimer
00000a2c l     F .text	00000076 hal_timer_chk_queue
00000aa2 l     F .text	0000002c hal_timer_irq_handler
00002f48 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00000ce4 l       .text	00000000 SVC_User
00000d02 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00000d88 l       .text	00000000 test1
00000d7c l       .text	00000000 loop1
00000d8e l       .text	00000000 res1
00000daa l       .text	00000000 test2
00000db2 l       .text	00000000 done
00000d9e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00000dbe l       .text	00000000 test1
00000dba l       .text	00000000 loop1
00000dcc l       .text	00000000 test2
00000dc8 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 flash_map.c
00000e0a l     F .text	00000078 flash_map_read_mfg
200000f8 l     O .bss	00000078 mfg_areas.7780
00000000 l    df *ABS*	00000000 mfg.c
00001030 l     F .text	00000094 mfg_seek_next_aux
000010c4 l     F .text	00000070 mfg_read_mmr
00001134 l     F .text	00000054 mfg_read_next_mmr
00001188 l     F .text	0000003c mfg_open_flash_area
000011c4 l     F .text	00000044 mfg_read_tlv_body
0000127c l     F .text	0000004e mfg_read_mmr_refs
20000170 l     O .bss	00000001 mfg_initialized
20000174 l     O .bss	00000018 mfg_mmrs
2000018c l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 sysinit.c
000012ca l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
000012d0 l     F .text	00000040 boot_is_header_valid
00001310 l     F .text	0000001c boot_write_sz
0000132c l     F .text	0000009c boot_read_image_size
000013c8 l     F .text	00000054 boot_check_header_erased
0000141c l     F .text	00000048 boot_initialize_area
00001464 l     F .text	0000003a boot_read_sectors
000014a0 l     F .text	00000034 boot_image_check
000014d4 l     F .text	0000007e boot_validate_slot
00001552 l     F .text	00000038 boot_validated_swap_type
0000158a l     F .text	00000036 boot_read_image_headers
000015f8 l     F .text	0000009c boot_swap_image
00001694 l     F .text	00000078 boot_complete_partial_swap
0000170c l     F .text	00000058 boot_perform_update
00001764 l     F .text	000000be boot_prepare_image_for_update
20000190 l     O .bss	0000006c boot_data
200001fc l     O .bss	00000400 buf.4971
200005fc l     O .bss	00000600 primary_slot_sectors.5011
20000bfc l     O .bss	00000600 scratch_sectors.5013
200011fc l     O .bss	00000600 secondary_slot_sectors.5012
200017fc l     O .bss	00000100 tmpbuf.4904
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00001c06 l     F .text	0000002e boot_copy_sz
00001c34 l     F .text	00000332 boot_swap_sectors
00002fa8 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
0000224e l     F .text	0000000c boot_flag_decode
0000225c l     F .text	00000018 boot_magic_decode
00002274 l     F .text	00000060 boot_find_status
000022d4 l     F .text	0000006a boot_write_trailer
0000233e l     F .text	00000016 boot_write_trailer_flag
00002fcc l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00002618 l     F .text	0000007e bootutil_img_hash
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00002fe0 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
00002c80 l     F .text	0000001e hal_flash_check_addr
200018fc l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
20001930 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
00000144  w    F .text	00000002 RTC0_IRQHandler
000023cc g     F .text	000000c0 boot_read_swap_state
00001a14 g     F .text	00000010 boot_go
200000d8 g       .data	00000000 __data_start__
00002f14 g     O .text	00000018 nrf52k_flash_dev
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00002994 g     F .text	00000128 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
00000ae0 g     F .text	00000060 hal_timer_init
0000121a g     F .text	0000001a mfg_seek_next_with_type
00000816 g     F .text	0000000a hal_system_start
00002518 g     F .text	00000044 boot_write_swap_info
00002cc6 g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
00002354 g     F .text	00000020 boot_magic_compatible_check
00000d32 g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
00000ad0 g     F .text	00000010 nrf52_timer0_irq_handler
00000144  w    F .text	00000002 PWM1_IRQHandler
20001928 g     O .bss	00000004 flash_map
00002e80 g     F .text	00000030 hal_flash_is_erased
00000d08 g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
000030f8 g       .ARM.exidx	00000000 __exidx_end
000028e4 g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000174 g     F .text	0000002c hal_system_reset
200000f0 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
000030f8 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
00000f66 g     F .text	00000026 flash_area_write
200000f4 g       .bssnz	00000000 __bssnz_start__
00000144  w    F .text	00000002 PDM_IRQHandler
00001a24 g     F .text	00000084 swap_erase_trailer_sectors
000018ec g     F .text	00000128 context_boot_go
00002066 g     F .text	000000e0 boot_slots_compatible
00001234 g     F .text	0000000a mfg_read_tlv_flash_area
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
00000c80 g     F .text	0000000a timer_handler
000021d0 g     F .text	0000007e swap_run
00000db8 g     F .text	0000001a memcpy
00000850 g     F .text	00000078 hal_watchdog_init
00000c74 g     F .text	0000000c os_cputime_init
00001bcc g     F .text	0000003a swap_set_image_ok
00002eb0 g     F .text	00000062 hal_flash_isempty
00000000 g       *ABS*	00000000 _imghdr_size
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00000f40 g     F .text	00000026 flash_area_read
00000c38 g     F .text	00000024 __assert_func
0000013c  w    F .text	00000002 UsageFault_Handler
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
2000fe50 g       *ABS*	00000000 __HeapLimit
200000f4 g       .bss	00000000 __bss_start__
00000164 g     F .text	00000010 hal_debugger_connected
00002d3c g     F .text	00000074 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00002386 g     F .text	0000001e boot_status_entries
00002374 g     F .text	00000008 boot_status_sz
2000191c g     O .bss	00000004 g_current_task
00000c8a g     F .text	0000000c os_arch_save_sr
00001f66 g     F .text	00000034 boot_read_image_header
000024dc g     F .text	00000020 boot_write_magic
000030e0 g       .text	00000000 __exidx_start
0000188a g     F .text	00000008 boot_erase_region
00002148 g     F .text	00000088 swap_status_source
0000123e g     F .text	0000000a mfg_read_tlv_mmr_ref
00000ca8 g     F .text	00000014 os_set_env
00000640 g     F .text	00000010 hal_bsp_flash_dev
000008fc g     F .text	00000008 nrf52_periph_create
00000fb2 g     F .text	0000000a flash_area_align
00000144  w    F .text	00000002 I2S_IRQHandler
000005da g     F .text	00000002 _init
00002db0 g     F .text	000000d0 hal_flash_erase
000023c6 g     F .text	00000006 boot_swap_info_off
0000255c g     F .text	00000022 boot_write_swap_size
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
00001822 g     F .text	00000068 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
00002580 g     F .text	00000098 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
000024ac g     F .text	00000030 boot_read_swap_size
00001bae g     F .text	0000001e swap_set_copy_done
00000d3e g     F .text	0000001e os_default_irq_asm
00001b32 g     F .text	0000007c swap_read_status
00001248 g     F .text	00000024 mfg_init
00000148 g     F .text	00000010 _sbrkInit
200000f4 g       .bssnz	00000000 __bssnz_end__
00000fd4 g     F .text	0000005c flash_map_init
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00001f9c g     F .text	000000b0 swap_read_status_bytes
00000144  w    F .text	00000002 PWM2_IRQHandler
200000f4 g       .data	00000000 __data_end__
00002b42 g     F .text	0000013e mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
20001924 g     O .bss	00000004 g_os_time
20001930 g       .bss	00000000 __bss_end__
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00000144 g     F .text	00000002 Default_Handler
000005cc g     F .text	0000000e _start
000024fc g     F .text	0000000e boot_write_copy_done
0000204c g     F .text	0000001a boot_status_internal_off
00000cbc g     F .text	00000006 os_arch_init_task_stack
00002fbc g     O .text	00000010 boot_img_magic
200000f0 g     O .data	00000004 sysinit_panic_cb
000015d4 g     F .text	00000022 boot_status_is_reset
00000c5c g     F .text	00000018 os_default_irq
00000fbc g     F .text	0000000a flash_area_erased_val
00001aa8 g     F .text	0000008a swap_status_init
20001920 g     O .bss	00000004 g_os_last_ctx_sw_time
00000d70 g     F .text	00000048 memcmp
00000b40 g     F .text	000000f8 hal_timer_config
000028d2 g     F .text	00000012 flash_area_id_from_multi_image_slot
000015c0 g     F .text	00000014 boot_status_reset
00001894 g     F .text	00000058 boot_copy_region
00000e84 g     F .text	00000040 flash_area_open
00000144  w    F .text	00000002 SAADC_IRQHandler
0000248c g     F .text	00000020 boot_read_swap_state_by_id
00000dd2 g     F .text	00000038 memset
00000000 g       .text	000000d8 __isr_vector
000005e2 g     F .text	0000005e main
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
00000cc2 g     F .text	00000046 SVC_Handler
00002ce6 g     F .text	00000054 hal_flash_read
00000f8c g     F .text	00000026 flash_area_erase
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
2000192c g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00001208 g     F .text	00000012 mfg_seek_next
00000fc6 g     F .text	0000000e flash_area_read_is_empty
000023a4 g     F .text	00000022 boot_status_off
0000040c g     F .text	000001c0 SystemInit
00000144  w    F .text	00000002 RNG_IRQHandler
00002cd6 g     F .text	00000010 hal_flash_erased_val
00002696 g     F .text	000000ba bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
20010000 g       .bss	00000000 __StackTop
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
00000ec4 g     F .text	0000007c flash_area_to_sectors
00002f60 g     O .text	00000048 sysflash_map_dflt
20001900 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
0000126c g     F .text	00000010 mfg_open
200000e8 g     O .data	00000008 g_os_run_list
0000065c g     F .text	00000034 NVIC_Relocate
200000f4 g     O .bss	00000004 os_flags
2000fe50 g       *ABS*	000001b0 __StackLimit
00002abc g     F .text	00000086 mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000003fc g     F .text	00000010 SystemCoreClockUpdate
00002750 g     F .text	000000ca bootutil_tlv_iter_begin
00000690 g     F .text	00000006 _exit
000001a0 g     F .text	0000004c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
00000c98 g     F .text	00000010 os_time_advance
00002c9e g     F .text	00000028 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00000650 g     F .text	0000000c hal_bsp_init
000005dc g     F .text	00000006 flash_device_base
0000237c g     F .text	0000000a boot_trailer_sz
0000281a g     F .text	000000b8 bootutil_tlv_iter_next
0000250a g     F .text	0000000e boot_write_image_ok
000028f0 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       8:	00000135 	.word	0x00000135
       c:	00000137 	.word	0x00000137
	...
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      2c:	00000cc3 	.word	0x00000cc3
	...
      38:	00000d09 	.word	0x00000d09
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      3c:	00000d33 	.word	0x00000d33
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      48:	00000145 	.word	0x00000145
      4c:	00000145 	.word	0x00000145
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      50:	00000145 	.word	0x00000145
      54:	00000145 	.word	0x00000145
      58:	00000145 	.word	0x00000145
      5c:	00000145 	.word	0x00000145
      60:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
                break;
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      74:	00000145 	.word	0x00000145
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	200000f4 	.word	0x200000f4
    ldr     r3, =__bss_end__
     114:	20001930 	.word	0x20001930
    ldr    r1, =__etext
     118:	000030f8 	.word	0x000030f8
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	200000f4 	.word	0x200000f4
    LDR     R0, =__HeapBase
     124:	20001930 	.word	0x20001930
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	0000040d 	.word	0x0000040d
    LDR     R0, =_start
     130:	000005cd 	.word	0x000005cd

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
     14a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
     14c:	6059      	str	r1, [r3, #4]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b02      	ldr	r3, [pc, #8]	; (170 <hal_debugger_connected+0xc>)
     166:	6818      	ldr	r0, [r3, #0]
}
     168:	f000 0001 	and.w	r0, r0, #1
     16c:	4770      	bx	lr
     16e:	bf00      	nop
     170:	e000edf0 	.word	0xe000edf0

00000174 <hal_system_reset>:
{
     174:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
     176:	f7ff fff5 	bl	164 <hal_debugger_connected>
     17a:	b100      	cbz	r0, 17e <hal_system_reset+0xa>
            asm("bkpt");
     17c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     17e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     182:	4905      	ldr	r1, [pc, #20]	; (198 <hal_system_reset+0x24>)
     184:	68ca      	ldr	r2, [r1, #12]
     186:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     18a:	4b04      	ldr	r3, [pc, #16]	; (19c <hal_system_reset+0x28>)
     18c:	4313      	orrs	r3, r2
     18e:	60cb      	str	r3, [r1, #12]
     190:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     194:	bf00      	nop
     196:	e7fd      	b.n	194 <hal_system_reset+0x20>
     198:	e000ed00 	.word	0xe000ed00
     19c:	05fa0004 	.word	0x05fa0004

000001a0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <Stack_Size+0x38>)
     1aa:	4013      	ands	r3, r2
     1ac:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1b0:	d018      	beq.n	1e4 <Stack_Size+0x34>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1b6:	2201      	movs	r2, #1
     1b8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1ba:	2100      	movs	r1, #0
     1bc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     1ce:	2b00      	cmp	r3, #0
     1d0:	d0f9      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1d6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <Stack_Size+0x38>)
     1dc:	4013      	ands	r3, r2
     1de:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1e2:	d1f0      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1e4:	4770      	bx	lr
     1e6:	bf00      	nop
     1e8:	00010003 	.word	0x00010003

000001ec <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1ec:	4b0b      	ldr	r3, [pc, #44]	; (21c <errata_16+0x30>)
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b06      	cmp	r3, #6
     1f2:	d001      	beq.n	1f8 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     1f4:	2000      	movs	r0, #0
     1f6:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1f8:	4b09      	ldr	r3, [pc, #36]	; (220 <errata_16+0x34>)
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	f013 0f0f 	tst.w	r3, #15
     200:	d107      	bne.n	212 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <errata_16+0x38>)
     204:	681b      	ldr	r3, [r3, #0]
     206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     20a:	2b30      	cmp	r3, #48	; 0x30
     20c:	d003      	beq.n	216 <errata_16+0x2a>
    return false;
     20e:	2000      	movs	r0, #0
     210:	4770      	bx	lr
     212:	2000      	movs	r0, #0
     214:	4770      	bx	lr
            return true;
     216:	2001      	movs	r0, #1
}
     218:	4770      	bx	lr
     21a:	bf00      	nop
     21c:	f0000fe0 	.word	0xf0000fe0
     220:	f0000fe4 	.word	0xf0000fe4
     224:	f0000fe8 	.word	0xf0000fe8

00000228 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     228:	4b0f      	ldr	r3, [pc, #60]	; (268 <errata_31+0x40>)
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	2b06      	cmp	r3, #6
     22e:	d001      	beq.n	234 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     230:	2000      	movs	r0, #0
     232:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     234:	4b0d      	ldr	r3, [pc, #52]	; (26c <errata_31+0x44>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	f013 0f0f 	tst.w	r3, #15
     23c:	d10b      	bne.n	256 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     23e:	4b0c      	ldr	r3, [pc, #48]	; (270 <errata_31+0x48>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     246:	2b30      	cmp	r3, #48	; 0x30
     248:	d007      	beq.n	25a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     24a:	2b40      	cmp	r3, #64	; 0x40
     24c:	d007      	beq.n	25e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     24e:	2b50      	cmp	r3, #80	; 0x50
     250:	d007      	beq.n	262 <errata_31+0x3a>
    return false;
     252:	2000      	movs	r0, #0
     254:	4770      	bx	lr
     256:	2000      	movs	r0, #0
     258:	4770      	bx	lr
            return true;
     25a:	2001      	movs	r0, #1
     25c:	4770      	bx	lr
            return true;
     25e:	2001      	movs	r0, #1
     260:	4770      	bx	lr
            return true;
     262:	2001      	movs	r0, #1
}
     264:	4770      	bx	lr
     266:	bf00      	nop
     268:	f0000fe0 	.word	0xf0000fe0
     26c:	f0000fe4 	.word	0xf0000fe4
     270:	f0000fe8 	.word	0xf0000fe8

00000274 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     274:	4b0b      	ldr	r3, [pc, #44]	; (2a4 <errata_32+0x30>)
     276:	781b      	ldrb	r3, [r3, #0]
     278:	2b06      	cmp	r3, #6
     27a:	d001      	beq.n	280 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     27c:	2000      	movs	r0, #0
     27e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <errata_32+0x34>)
     282:	681b      	ldr	r3, [r3, #0]
     284:	f013 0f0f 	tst.w	r3, #15
     288:	d107      	bne.n	29a <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     28a:	4b08      	ldr	r3, [pc, #32]	; (2ac <errata_32+0x38>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     292:	2b30      	cmp	r3, #48	; 0x30
     294:	d003      	beq.n	29e <errata_32+0x2a>
    return false;
     296:	2000      	movs	r0, #0
     298:	4770      	bx	lr
     29a:	2000      	movs	r0, #0
     29c:	4770      	bx	lr
            return true;
     29e:	2001      	movs	r0, #1
}
     2a0:	4770      	bx	lr
     2a2:	bf00      	nop
     2a4:	f0000fe0 	.word	0xf0000fe0
     2a8:	f0000fe4 	.word	0xf0000fe4
     2ac:	f0000fe8 	.word	0xf0000fe8

000002b0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2b0:	4b0f      	ldr	r3, [pc, #60]	; (2f0 <errata_36+0x40>)
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	2b06      	cmp	r3, #6
     2b6:	d001      	beq.n	2bc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     2b8:	2000      	movs	r0, #0
     2ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <errata_36+0x44>)
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	f013 0f0f 	tst.w	r3, #15
     2c4:	d10b      	bne.n	2de <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     2c6:	4b0c      	ldr	r3, [pc, #48]	; (2f8 <errata_36+0x48>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2ce:	2b30      	cmp	r3, #48	; 0x30
     2d0:	d007      	beq.n	2e2 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     2d2:	2b40      	cmp	r3, #64	; 0x40
     2d4:	d007      	beq.n	2e6 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d6:	2b50      	cmp	r3, #80	; 0x50
     2d8:	d007      	beq.n	2ea <errata_36+0x3a>
    return false;
     2da:	2000      	movs	r0, #0
     2dc:	4770      	bx	lr
     2de:	2000      	movs	r0, #0
     2e0:	4770      	bx	lr
            return true;
     2e2:	2001      	movs	r0, #1
     2e4:	4770      	bx	lr
            return true;
     2e6:	2001      	movs	r0, #1
     2e8:	4770      	bx	lr
            return true;
     2ea:	2001      	movs	r0, #1
}
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop
     2f0:	f0000fe0 	.word	0xf0000fe0
     2f4:	f0000fe4 	.word	0xf0000fe4
     2f8:	f0000fe8 	.word	0xf0000fe8

000002fc <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2fc:	4b0b      	ldr	r3, [pc, #44]	; (32c <errata_37+0x30>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	2b06      	cmp	r3, #6
     302:	d001      	beq.n	308 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     304:	2000      	movs	r0, #0
     306:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <errata_37+0x34>)
     30a:	681b      	ldr	r3, [r3, #0]
     30c:	f013 0f0f 	tst.w	r3, #15
     310:	d107      	bne.n	322 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     312:	4b08      	ldr	r3, [pc, #32]	; (334 <errata_37+0x38>)
     314:	681b      	ldr	r3, [r3, #0]
     316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     31a:	2b30      	cmp	r3, #48	; 0x30
     31c:	d003      	beq.n	326 <errata_37+0x2a>
    return false;
     31e:	2000      	movs	r0, #0
     320:	4770      	bx	lr
     322:	2000      	movs	r0, #0
     324:	4770      	bx	lr
            return true;
     326:	2001      	movs	r0, #1
}
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	f0000fe0 	.word	0xf0000fe0
     330:	f0000fe4 	.word	0xf0000fe4
     334:	f0000fe8 	.word	0xf0000fe8

00000338 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     338:	4b0b      	ldr	r3, [pc, #44]	; (368 <errata_57+0x30>)
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	2b06      	cmp	r3, #6
     33e:	d001      	beq.n	344 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <errata_57+0x34>)
     346:	681b      	ldr	r3, [r3, #0]
     348:	f013 0f0f 	tst.w	r3, #15
     34c:	d107      	bne.n	35e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     34e:	4b08      	ldr	r3, [pc, #32]	; (370 <errata_57+0x38>)
     350:	681b      	ldr	r3, [r3, #0]
     352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     356:	2b30      	cmp	r3, #48	; 0x30
     358:	d003      	beq.n	362 <errata_57+0x2a>
    return false;
     35a:	2000      	movs	r0, #0
     35c:	4770      	bx	lr
     35e:	2000      	movs	r0, #0
     360:	4770      	bx	lr
            return true;
     362:	2001      	movs	r0, #1
}
     364:	4770      	bx	lr
     366:	bf00      	nop
     368:	f0000fe0 	.word	0xf0000fe0
     36c:	f0000fe4 	.word	0xf0000fe4
     370:	f0000fe8 	.word	0xf0000fe8

00000374 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     374:	4b0b      	ldr	r3, [pc, #44]	; (3a4 <errata_66+0x30>)
     376:	781b      	ldrb	r3, [r3, #0]
     378:	2b06      	cmp	r3, #6
     37a:	d001      	beq.n	380 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     37c:	2000      	movs	r0, #0
     37e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <errata_66+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f013 0f0f 	tst.w	r3, #15
     388:	d107      	bne.n	39a <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     38a:	4b08      	ldr	r3, [pc, #32]	; (3ac <errata_66+0x38>)
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     392:	2b50      	cmp	r3, #80	; 0x50
     394:	d003      	beq.n	39e <errata_66+0x2a>
    return false;
     396:	2000      	movs	r0, #0
     398:	4770      	bx	lr
     39a:	2000      	movs	r0, #0
     39c:	4770      	bx	lr
            return true;
     39e:	2001      	movs	r0, #1
}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	f0000fe0 	.word	0xf0000fe0
     3a8:	f0000fe4 	.word	0xf0000fe4
     3ac:	f0000fe8 	.word	0xf0000fe8

000003b0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3b0:	4b0f      	ldr	r3, [pc, #60]	; (3f0 <errata_108+0x40>)
     3b2:	781b      	ldrb	r3, [r3, #0]
     3b4:	2b06      	cmp	r3, #6
     3b6:	d001      	beq.n	3bc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     3b8:	2000      	movs	r0, #0
     3ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3bc:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <errata_108+0x44>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f013 0f0f 	tst.w	r3, #15
     3c4:	d10b      	bne.n	3de <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     3c6:	4b0c      	ldr	r3, [pc, #48]	; (3f8 <errata_108+0x48>)
     3c8:	681b      	ldr	r3, [r3, #0]
     3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     3ce:	2b30      	cmp	r3, #48	; 0x30
     3d0:	d007      	beq.n	3e2 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     3d2:	2b40      	cmp	r3, #64	; 0x40
     3d4:	d007      	beq.n	3e6 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     3d6:	2b50      	cmp	r3, #80	; 0x50
     3d8:	d007      	beq.n	3ea <errata_108+0x3a>
    return false;
     3da:	2000      	movs	r0, #0
     3dc:	4770      	bx	lr
     3de:	2000      	movs	r0, #0
     3e0:	4770      	bx	lr
            return true;
     3e2:	2001      	movs	r0, #1
     3e4:	4770      	bx	lr
            return true;
     3e6:	2001      	movs	r0, #1
     3e8:	4770      	bx	lr
            return true;
     3ea:	2001      	movs	r0, #1
}
     3ec:	4770      	bx	lr
     3ee:	bf00      	nop
     3f0:	f0000fe0 	.word	0xf0000fe0
     3f4:	f0000fe4 	.word	0xf0000fe4
     3f8:	f0000fe8 	.word	0xf0000fe8

000003fc <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <SystemCoreClockUpdate+0x8>)
     3fe:	4a02      	ldr	r2, [pc, #8]	; (408 <SystemCoreClockUpdate+0xc>)
     400:	601a      	str	r2, [r3, #0]
}
     402:	4770      	bx	lr
     404:	200000e4 	.word	0x200000e4
     408:	03d09000 	.word	0x03d09000

0000040c <SystemInit>:
{
     40c:	b508      	push	{r3, lr}
    if (errata_16()){
     40e:	f7ff feed 	bl	1ec <errata_16>
     412:	b110      	cbz	r0, 41a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     414:	4b60      	ldr	r3, [pc, #384]	; (598 <SystemInit+0x18c>)
     416:	4a61      	ldr	r2, [pc, #388]	; (59c <SystemInit+0x190>)
     418:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     41a:	f7ff ff05 	bl	228 <errata_31>
     41e:	b128      	cbz	r0, 42c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     420:	4b5f      	ldr	r3, [pc, #380]	; (5a0 <SystemInit+0x194>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	f3c3 3342 	ubfx	r3, r3, #13, #3
     428:	4a5e      	ldr	r2, [pc, #376]	; (5a4 <SystemInit+0x198>)
     42a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     42c:	f7ff ff22 	bl	274 <errata_32>
     430:	b120      	cbz	r0, 43c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     432:	4a5d      	ldr	r2, [pc, #372]	; (5a8 <SystemInit+0x19c>)
     434:	68d3      	ldr	r3, [r2, #12]
     436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     43a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     43c:	f7ff ff38 	bl	2b0 <errata_36>
     440:	b140      	cbz	r0, 454 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     446:	2200      	movs	r2, #0
     448:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     44c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     450:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     454:	f7ff ff52 	bl	2fc <errata_37>
     458:	b110      	cbz	r0, 460 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     45a:	4b54      	ldr	r3, [pc, #336]	; (5ac <SystemInit+0x1a0>)
     45c:	2203      	movs	r2, #3
     45e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     460:	f7ff ff6a 	bl	338 <errata_57>
     464:	b158      	cbz	r0, 47e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     466:	4b52      	ldr	r3, [pc, #328]	; (5b0 <SystemInit+0x1a4>)
     468:	2205      	movs	r2, #5
     46a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     46c:	3378      	adds	r3, #120	; 0x78
     46e:	2201      	movs	r2, #1
     470:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     472:	3b70      	subs	r3, #112	; 0x70
     474:	2200      	movs	r2, #0
     476:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     478:	3b04      	subs	r3, #4
     47a:	223f      	movs	r2, #63	; 0x3f
     47c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
     47e:	f7ff ff79 	bl	374 <errata_66>
     482:	2800      	cmp	r0, #0
     484:	d046      	beq.n	514 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     48a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     48e:	4b49      	ldr	r3, [pc, #292]	; (5b4 <SystemInit+0x1a8>)
     490:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     494:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     498:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     49c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     4a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     4a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     4a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     4ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     4b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     4b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     4b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     4bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     4c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     4c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     4c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     4cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     4d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     4d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     4d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     4dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     4e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     4e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     4e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     4ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     4f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     4f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     4f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     4fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     500:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     504:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     508:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     50c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     510:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     514:	f7ff ff4c 	bl	3b0 <errata_108>
     518:	b128      	cbz	r0, 526 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <SystemInit+0x1ac>)
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     522:	4a26      	ldr	r2, [pc, #152]	; (5bc <SystemInit+0x1b0>)
     524:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     526:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     52a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     52e:	f013 0f01 	tst.w	r3, #1
     532:	d104      	bne.n	53e <SystemInit+0x132>
    SystemCoreClockUpdate();
     534:	f7ff ff62 	bl	3fc <SystemCoreClockUpdate>
    NVIC_Relocate();
     538:	f000 f890 	bl	65c <NVIC_Relocate>
}
     53c:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     53e:	4b20      	ldr	r3, [pc, #128]	; (5c0 <SystemInit+0x1b4>)
     540:	2201      	movs	r2, #1
     542:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     546:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <SystemInit+0x1b4>)
     548:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     54c:	2b00      	cmp	r3, #0
     54e:	d0fa      	beq.n	546 <SystemInit+0x13a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     550:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     554:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     558:	f023 0301 	bic.w	r3, r3, #1
     55c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     560:	4b17      	ldr	r3, [pc, #92]	; (5c0 <SystemInit+0x1b4>)
     562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     566:	2b00      	cmp	r3, #0
     568:	d0fa      	beq.n	560 <SystemInit+0x154>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     56a:	4b15      	ldr	r3, [pc, #84]	; (5c0 <SystemInit+0x1b4>)
     56c:	2200      	movs	r2, #0
     56e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     572:	4b13      	ldr	r3, [pc, #76]	; (5c0 <SystemInit+0x1b4>)
     574:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     578:	2b00      	cmp	r3, #0
     57a:	d0fa      	beq.n	572 <SystemInit+0x166>
     57c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     580:	4910      	ldr	r1, [pc, #64]	; (5c4 <SystemInit+0x1b8>)
     582:	68ca      	ldr	r2, [r1, #12]
     584:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <SystemInit+0x1bc>)
     58a:	4313      	orrs	r3, r2
     58c:	60cb      	str	r3, [r1, #12]
     58e:	f3bf 8f4f 	dsb	sy
    __NOP();
     592:	bf00      	nop
     594:	e7fd      	b.n	592 <SystemInit+0x186>
     596:	bf00      	nop
     598:	4007c074 	.word	0x4007c074
     59c:	baadf00d 	.word	0xbaadf00d
     5a0:	10000244 	.word	0x10000244
     5a4:	4000053c 	.word	0x4000053c
     5a8:	e000edf0 	.word	0xe000edf0
     5ac:	400005a0 	.word	0x400005a0
     5b0:	40005610 	.word	0x40005610
     5b4:	4000c000 	.word	0x4000c000
     5b8:	10000258 	.word	0x10000258
     5bc:	40000ee4 	.word	0x40000ee4
     5c0:	4001e000 	.word	0x4001e000
     5c4:	e000ed00 	.word	0xe000ed00
     5c8:	05fa0004 	.word	0x05fa0004

000005cc <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
     5cc:	b508      	push	{r3, lr}
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     5ce:	2100      	movs	r1, #0
     5d0:	4608      	mov	r0, r1
     5d2:	f000 f806 	bl	5e2 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     5d6:	f000 f85b 	bl	690 <_exit>

000005da <_init>:
}

void
_init(void)
{
}
     5da:	4770      	bx	lr

000005dc <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     5dc:	2000      	movs	r0, #0
     5de:	6008      	str	r0, [r1, #0]
    return 0;
}
     5e0:	4770      	bx	lr

000005e2 <main>:

int
main(void)
{
     5e2:	b500      	push	{lr}
     5e4:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     5e6:	f000 f833 	bl	650 <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     5ea:	f247 5030 	movw	r0, #30000	; 0x7530
     5ee:	f000 f92f 	bl	850 <hal_watchdog_init>
    assert(rc == 0);
     5f2:	b128      	cbz	r0, 600 <main+0x1e>
     5f4:	2300      	movs	r3, #0
     5f6:	461a      	mov	r2, r3
     5f8:	4619      	mov	r1, r3
     5fa:	4618      	mov	r0, r3
     5fc:	f000 fb1c 	bl	c38 <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     600:	f000 fce8 	bl	fd4 <flash_map_init>
#endif

    rc = boot_go(&rsp);
     604:	a801      	add	r0, sp, #4
     606:	f001 fa05 	bl	1a14 <boot_go>
    assert(rc == 0);
     60a:	b128      	cbz	r0, 618 <main+0x36>
     60c:	2300      	movs	r3, #0
     60e:	461a      	mov	r2, r3
     610:	4619      	mov	r1, r3
     612:	4618      	mov	r0, r3
     614:	f000 fb10 	bl	c38 <__assert_func>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     618:	4669      	mov	r1, sp
     61a:	f89d 0008 	ldrb.w	r0, [sp, #8]
     61e:	f7ff ffdd 	bl	5dc <flash_device_base>
    assert(rc == 0);
     622:	b128      	cbz	r0, 630 <main+0x4e>
     624:	2300      	movs	r3, #0
     626:	461a      	mov	r2, r3
     628:	4619      	mov	r1, r3
     62a:	4618      	mov	r0, r3
     62c:	f000 fb04 	bl	c38 <__assert_func>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     630:	9803      	ldr	r0, [sp, #12]
     632:	9b00      	ldr	r3, [sp, #0]
     634:	4418      	add	r0, r3
                              rsp.br_hdr->ih_hdr_size));
     636:	9b01      	ldr	r3, [sp, #4]
     638:	891b      	ldrh	r3, [r3, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     63a:	4418      	add	r0, r3
     63c:	f000 f8eb 	bl	816 <hal_system_start>

00000640 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
     640:	b908      	cbnz	r0, 646 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
     642:	4802      	ldr	r0, [pc, #8]	; (64c <hal_bsp_flash_dev+0xc>)
     644:	4770      	bx	lr
    }

    return NULL;
     646:	2000      	movs	r0, #0
}
     648:	4770      	bx	lr
     64a:	bf00      	nop
     64c:	00002f14 	.word	0x00002f14

00000650 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     650:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     652:	f7ff fda5 	bl	1a0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
     656:	f000 f951 	bl	8fc <nrf52_periph_create>
}
     65a:	bd08      	pop	{r3, pc}

0000065c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     65c:	4a09      	ldr	r2, [pc, #36]	; (684 <NVIC_Relocate+0x28>)
     65e:	4b0a      	ldr	r3, [pc, #40]	; (688 <NVIC_Relocate+0x2c>)
     660:	429a      	cmp	r2, r3
     662:	d00a      	beq.n	67a <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     664:	2300      	movs	r3, #0
     666:	e006      	b.n	676 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     668:	4a07      	ldr	r2, [pc, #28]	; (688 <NVIC_Relocate+0x2c>)
     66a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     66e:	4a05      	ldr	r2, [pc, #20]	; (684 <NVIC_Relocate+0x28>)
     670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     674:	3301      	adds	r3, #1
     676:	2b35      	cmp	r3, #53	; 0x35
     678:	ddf6      	ble.n	668 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     67a:	4a02      	ldr	r2, [pc, #8]	; (684 <NVIC_Relocate+0x28>)
     67c:	4b03      	ldr	r3, [pc, #12]	; (68c <NVIC_Relocate+0x30>)
     67e:	609a      	str	r2, [r3, #8]
#endif
}
     680:	4770      	bx	lr
     682:	bf00      	nop
     684:	20000000 	.word	0x20000000
     688:	00000000 	.word	0x00000000
     68c:	e000ed00 	.word	0xe000ed00

00000690 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     690:	b508      	push	{r3, lr}
    hal_system_reset();
     692:	f7ff fd6f 	bl	174 <hal_system_reset>
	...

00000698 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     698:	2300      	movs	r3, #0
     69a:	4a07      	ldr	r2, [pc, #28]	; (6b8 <nrf52k_flash_wait_ready+0x20>)
     69c:	4293      	cmp	r3, r2
     69e:	dc06      	bgt.n	6ae <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     6a0:	4a06      	ldr	r2, [pc, #24]	; (6bc <nrf52k_flash_wait_ready+0x24>)
     6a2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     6a6:	2a01      	cmp	r2, #1
     6a8:	d004      	beq.n	6b4 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
     6aa:	3301      	adds	r3, #1
     6ac:	e7f5      	b.n	69a <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
     6ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     6b2:	4770      	bx	lr
            return 0;
     6b4:	2000      	movs	r0, #0
}
     6b6:	4770      	bx	lr
     6b8:	0001869f 	.word	0x0001869f
     6bc:	4001e000 	.word	0x4001e000

000006c0 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     6c0:	b538      	push	{r3, r4, r5, lr}
     6c2:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     6c4:	f7ff ffe8 	bl	698 <nrf52k_flash_wait_ready>
     6c8:	b9f0      	cbnz	r0, 708 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6ca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     6ce:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     6d0:	4b0f      	ldr	r3, [pc, #60]	; (710 <nrf52k_flash_erase_sector+0x50>)
     6d2:	2202      	movs	r2, #2
     6d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     6d8:	f7ff ffde 	bl	698 <nrf52k_flash_wait_ready>
     6dc:	b148      	cbz	r0, 6f2 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
     6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     6e2:	4a0b      	ldr	r2, [pc, #44]	; (710 <nrf52k_flash_erase_sector+0x50>)
     6e4:	2100      	movs	r1, #0
     6e6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     6ea:	b904      	cbnz	r4, 6ee <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
     6ec:	b662      	cpsie	i
    return rc;
}
     6ee:	4618      	mov	r0, r3
     6f0:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
     6f2:	4b07      	ldr	r3, [pc, #28]	; (710 <nrf52k_flash_erase_sector+0x50>)
     6f4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     6f8:	f7ff ffce 	bl	698 <nrf52k_flash_wait_ready>
     6fc:	4603      	mov	r3, r0
     6fe:	2800      	cmp	r0, #0
     700:	d0ef      	beq.n	6e2 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
     702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     706:	e7ec      	b.n	6e2 <nrf52k_flash_erase_sector+0x22>
        return -1;
     708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     70c:	e7ef      	b.n	6ee <nrf52k_flash_erase_sector+0x2e>
     70e:	bf00      	nop
     710:	4001e000 	.word	0x4001e000

00000714 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     714:	2000      	movs	r0, #0
     716:	4770      	bx	lr

00000718 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     718:	297f      	cmp	r1, #127	; 0x7f
     71a:	dc06      	bgt.n	72a <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     71c:	0309      	lsls	r1, r1, #12
     71e:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	601a      	str	r2, [r3, #0]
}
     726:	2000      	movs	r0, #0
     728:	4770      	bx	lr
{
     72a:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     72c:	2300      	movs	r3, #0
     72e:	461a      	mov	r2, r3
     730:	4619      	mov	r1, r3
     732:	4618      	mov	r0, r3
     734:	f000 fa80 	bl	c38 <__assert_func>

00000738 <nrf52k_flash_write>:
{
     738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     73c:	b082      	sub	sp, #8
     73e:	460d      	mov	r5, r1
     740:	4616      	mov	r6, r2
     742:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
     744:	f7ff ffa8 	bl	698 <nrf52k_flash_wait_ready>
     748:	2800      	cmp	r0, #0
     74a:	d158      	bne.n	7fe <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     74c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     750:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     752:	4b2c      	ldr	r3, [pc, #176]	; (804 <nrf52k_flash_write+0xcc>)
     754:	2201      	movs	r2, #1
     756:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     75a:	f015 0803 	ands.w	r8, r5, #3
     75e:	d10b      	bne.n	778 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
     760:	2c03      	cmp	r4, #3
     762:	d925      	bls.n	7b0 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
     764:	f7ff ff98 	bl	698 <nrf52k_flash_wait_ready>
     768:	2800      	cmp	r0, #0
     76a:	d139      	bne.n	7e0 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
     76c:	f856 3b04 	ldr.w	r3, [r6], #4
     770:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     774:	3c04      	subs	r4, #4
     776:	e7f3      	b.n	760 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
     778:	f7ff ff8e 	bl	698 <nrf52k_flash_wait_ready>
     77c:	bb68      	cbnz	r0, 7da <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
     77e:	f025 0a03 	bic.w	sl, r5, #3
     782:	f8da 3000 	ldr.w	r3, [sl]
     786:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     788:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     78c:	45a1      	cmp	r9, r4
     78e:	d900      	bls.n	792 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
     790:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     792:	464a      	mov	r2, r9
     794:	4631      	mov	r1, r6
     796:	ab01      	add	r3, sp, #4
     798:	eb03 0008 	add.w	r0, r3, r8
     79c:	f000 fb0c 	bl	db8 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     7a0:	9b01      	ldr	r3, [sp, #4]
     7a2:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     7a6:	444d      	add	r5, r9
        num_bytes -= cnt;
     7a8:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     7ac:	444e      	add	r6, r9
     7ae:	e7d7      	b.n	760 <nrf52k_flash_write+0x28>
    if (num_bytes) {
     7b0:	b164      	cbz	r4, 7cc <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
     7b2:	682b      	ldr	r3, [r5, #0]
     7b4:	a802      	add	r0, sp, #8
     7b6:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     7ba:	4622      	mov	r2, r4
     7bc:	4631      	mov	r1, r6
     7be:	f000 fafb 	bl	db8 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     7c2:	f7ff ff69 	bl	698 <nrf52k_flash_wait_ready>
     7c6:	b9b8      	cbnz	r0, 7f8 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
     7c8:	9b01      	ldr	r3, [sp, #4]
     7ca:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
     7cc:	f7ff ff64 	bl	698 <nrf52k_flash_wait_ready>
     7d0:	4603      	mov	r3, r0
     7d2:	b138      	cbz	r0, 7e4 <nrf52k_flash_write+0xac>
        rc = -1;
     7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     7d8:	e004      	b.n	7e4 <nrf52k_flash_write+0xac>
    int rc = -1;
     7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     7de:	e001      	b.n	7e4 <nrf52k_flash_write+0xac>
     7e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     7e4:	4a07      	ldr	r2, [pc, #28]	; (804 <nrf52k_flash_write+0xcc>)
     7e6:	2100      	movs	r1, #0
     7e8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     7ec:	b907      	cbnz	r7, 7f0 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
     7ee:	b662      	cpsie	i
}
     7f0:	4618      	mov	r0, r3
     7f2:	b002      	add	sp, #8
     7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     7fc:	e7f2      	b.n	7e4 <nrf52k_flash_write+0xac>
        return -1;
     7fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     802:	e7f5      	b.n	7f0 <nrf52k_flash_write+0xb8>
     804:	4001e000 	.word	0x4001e000

00000808 <nrf52k_flash_read>:
{
     808:	b508      	push	{r3, lr}
     80a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     80c:	461a      	mov	r2, r3
     80e:	f000 fad3 	bl	db8 <memcpy>
}
     812:	2000      	movs	r0, #0
     814:	bd08      	pop	{r3, pc}

00000816 <hal_system_start>:
                  //// /* 1st word is stack pointer */ ////TODO
                  //// "    msr  psp, %0       \n" ////TODO
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
     816:	6803      	ldr	r3, [r0, #0]
     818:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
     81a:	f383 8808 	msr	MSP, r3
     81e:	4710      	bx	r2

00000820 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
     820:	b508      	push	{r3, lr}
    assert(0);
     822:	2300      	movs	r3, #0
     824:	461a      	mov	r2, r3
     826:	4619      	mov	r1, r3
     828:	4618      	mov	r0, r3
     82a:	f000 fa05 	bl	c38 <__assert_func>
	...

00000830 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
     830:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     832:	4b06      	ldr	r3, [pc, #24]	; (84c <nrf52_wdt_irq_handler+0x1c>)
     834:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
     838:	f013 0f01 	tst.w	r3, #1
     83c:	d100      	bne.n	840 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
     83e:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
     840:	4b02      	ldr	r3, [pc, #8]	; (84c <nrf52_wdt_irq_handler+0x1c>)
     842:	2200      	movs	r2, #0
     844:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
     848:	f7ff ffea 	bl	820 <nrf52_hal_wdt_default_handler>
     84c:	40010000 	.word	0x40010000

00000850 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
     850:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     852:	4b17      	ldr	r3, [pc, #92]	; (8b0 <hal_watchdog_init+0x60>)
     854:	2201      	movs	r2, #1
     856:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
     85a:	4b16      	ldr	r3, [pc, #88]	; (8b4 <hal_watchdog_init+0x64>)
     85c:	4298      	cmp	r0, r3
     85e:	d821      	bhi.n	8a4 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
     860:	eb00 0240 	add.w	r2, r0, r0, lsl #1
     864:	0153      	lsls	r3, r2, #5
     866:	4a14      	ldr	r2, [pc, #80]	; (8b8 <hal_watchdog_init+0x68>)
     868:	fba2 2303 	umull	r2, r3, r2, r3
     86c:	08db      	lsrs	r3, r3, #3
     86e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     872:	4b0f      	ldr	r3, [pc, #60]	; (8b0 <hal_watchdog_init+0x60>)
     874:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
     878:	4a10      	ldr	r2, [pc, #64]	; (8bc <hal_watchdog_init+0x6c>)
     87a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     87c:	4910      	ldr	r1, [pc, #64]	; (8c0 <hal_watchdog_init+0x70>)
     87e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     882:	4a10      	ldr	r2, [pc, #64]	; (8c4 <hal_watchdog_init+0x74>)
     884:	21e0      	movs	r1, #224	; 0xe0
     886:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     88a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     88e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     892:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
     894:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
     898:	f042 0201 	orr.w	r2, r2, #1
     89c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
     8a0:	2000      	movs	r0, #0
     8a2:	bd08      	pop	{r3, pc}
        assert(0);
     8a4:	2300      	movs	r3, #0
     8a6:	461a      	mov	r2, r3
     8a8:	4619      	mov	r1, r3
     8aa:	4618      	mov	r0, r3
     8ac:	f000 f9c4 	bl	c38 <__assert_func>
     8b0:	40010000 	.word	0x40010000
     8b4:	02aaaaaa 	.word	0x02aaaaaa
     8b8:	10624dd3 	.word	0x10624dd3
     8bc:	e000ed00 	.word	0xe000ed00
     8c0:	00000831 	.word	0x00000831
     8c4:	e000e100 	.word	0xe000e100

000008c8 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
     8c8:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
     8ca:	2100      	movs	r1, #0
     8cc:	4608      	mov	r0, r1
     8ce:	f000 f907 	bl	ae0 <hal_timer_init>
    assert(rc == 0);
     8d2:	b920      	cbnz	r0, 8de <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
     8d4:	4808      	ldr	r0, [pc, #32]	; (8f8 <nrf52_periph_create_timers+0x30>)
     8d6:	f000 f9cd 	bl	c74 <os_cputime_init>
    assert(rc == 0);
     8da:	b930      	cbnz	r0, 8ea <nrf52_periph_create_timers+0x22>
#endif
}
     8dc:	bd08      	pop	{r3, pc}
    assert(rc == 0);
     8de:	2300      	movs	r3, #0
     8e0:	461a      	mov	r2, r3
     8e2:	4619      	mov	r1, r3
     8e4:	4618      	mov	r0, r3
     8e6:	f000 f9a7 	bl	c38 <__assert_func>
    assert(rc == 0);
     8ea:	2300      	movs	r3, #0
     8ec:	461a      	mov	r2, r3
     8ee:	4619      	mov	r1, r3
     8f0:	4618      	mov	r0, r3
     8f2:	f000 f9a1 	bl	c38 <__assert_func>
     8f6:	bf00      	nop
     8f8:	000f4240 	.word	0x000f4240

000008fc <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
     8fc:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
     8fe:	f7ff ffe3 	bl	8c8 <nrf52_periph_create_timers>
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
     902:	bd08      	pop	{r3, pc}

00000904 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
     904:	2301      	movs	r3, #1
     906:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
     908:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
     90c:	4770      	bx	lr
	...

00000910 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
     910:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
     912:	7883      	ldrb	r3, [r0, #2]
     914:	b393      	cbz	r3, 97c <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     916:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     91c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
     920:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
     922:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
     926:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
     92a:	b11d      	cbz	r5, 934 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
     92c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
     930:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
     934:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
     936:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
     938:	2b02      	cmp	r3, #2
     93a:	dc0e      	bgt.n	95a <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     93c:	7842      	ldrb	r2, [r0, #1]
     93e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
     940:	2b00      	cmp	r3, #0
     942:	db15      	blt.n	970 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     944:	f002 021f 	and.w	r2, r2, #31
     948:	095b      	lsrs	r3, r3, #5
     94a:	2101      	movs	r1, #1
     94c:	fa01 f202 	lsl.w	r2, r1, r2
     950:	3340      	adds	r3, #64	; 0x40
     952:	491b      	ldr	r1, [pc, #108]	; (9c0 <nrf_timer_set_ocmp+0xb0>)
     954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     958:	e00a      	b.n	970 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
     95a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     95e:	d208      	bcs.n	972 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
     960:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     964:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     968:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     96c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
     970:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
     972:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
     976:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
     97a:	e7f5      	b.n	968 <nrf_timer_set_ocmp+0x58>
     97c:	460d      	mov	r5, r1
     97e:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
     980:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     982:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     986:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
     98a:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     98e:	2200      	movs	r2, #0
     990:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     994:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
     998:	f7ff ffb4 	bl	904 <nrf_read_timer_cntr>
     99c:	1b40      	subs	r0, r0, r5
     99e:	2800      	cmp	r0, #0
     9a0:	dbe6      	blt.n	970 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     9a2:	7862      	ldrb	r2, [r4, #1]
     9a4:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
     9a6:	2b00      	cmp	r3, #0
     9a8:	dbe2      	blt.n	970 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9aa:	f002 021f 	and.w	r2, r2, #31
     9ae:	095b      	lsrs	r3, r3, #5
     9b0:	2101      	movs	r1, #1
     9b2:	fa01 f202 	lsl.w	r2, r1, r2
     9b6:	3340      	adds	r3, #64	; 0x40
     9b8:	4901      	ldr	r1, [pc, #4]	; (9c0 <nrf_timer_set_ocmp+0xb0>)
     9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     9be:	e7d7      	b.n	970 <nrf_timer_set_ocmp+0x60>
     9c0:	e000e100 	.word	0xe000e100

000009c4 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     9c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     9c8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
     9cc:	4770      	bx	lr

000009ce <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     9ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     9d2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
     9d6:	4770      	bx	lr

000009d8 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
     9d8:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     9da:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     9e0:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
     9e2:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
     9e4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
     9e8:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
     9ec:	b1ad      	cbz	r5, a1a <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
     9ee:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
     9f2:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
     9f4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
     9f8:	2500      	movs	r5, #0
     9fa:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     9fe:	7840      	ldrb	r0, [r0, #1]
     a00:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
     a02:	42aa      	cmp	r2, r5
     a04:	db09      	blt.n	a1a <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a06:	f000 001f 	and.w	r0, r0, #31
     a0a:	0952      	lsrs	r2, r2, #5
     a0c:	2501      	movs	r5, #1
     a0e:	fa05 f000 	lsl.w	r0, r5, r0
     a12:	3240      	adds	r2, #64	; 0x40
     a14:	4d04      	ldr	r5, [pc, #16]	; (a28 <hal_timer_read_bsptimer+0x50>)
     a16:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
     a1a:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
     a1e:	b904      	cbnz	r4, a22 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
     a20:	b662      	cpsie	i

    return tcntr;
}
     a22:	bc30      	pop	{r4, r5}
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	e000e100 	.word	0xe000e100

00000a2c <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
     a2c:	b570      	push	{r4, r5, r6, lr}
     a2e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a30:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     a34:	b672      	cpsid	i
     a36:	e013      	b.n	a60 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
     a38:	6928      	ldr	r0, [r5, #16]
     a3a:	f7ff ff63 	bl	904 <nrf_read_timer_cntr>
            delta = 0;
     a3e:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
     a40:	68e3      	ldr	r3, [r4, #12]
     a42:	1ac0      	subs	r0, r0, r3
     a44:	4290      	cmp	r0, r2
     a46:	db19      	blt.n	a7c <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     a48:	6923      	ldr	r3, [r4, #16]
     a4a:	b1a3      	cbz	r3, a76 <hal_timer_chk_queue+0x4a>
     a4c:	6962      	ldr	r2, [r4, #20]
     a4e:	615a      	str	r2, [r3, #20]
     a50:	6963      	ldr	r3, [r4, #20]
     a52:	6922      	ldr	r2, [r4, #16]
     a54:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
     a56:	2300      	movs	r3, #0
     a58:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
     a5a:	6863      	ldr	r3, [r4, #4]
     a5c:	68a0      	ldr	r0, [r4, #8]
     a5e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
     a60:	696c      	ldr	r4, [r5, #20]
     a62:	b15c      	cbz	r4, a7c <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
     a64:	78ab      	ldrb	r3, [r5, #2]
     a66:	2b00      	cmp	r3, #0
     a68:	d0e6      	beq.n	a38 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
     a6a:	4628      	mov	r0, r5
     a6c:	f7ff ffb4 	bl	9d8 <hal_timer_read_bsptimer>
            delta = -3;
     a70:	f06f 0202 	mvn.w	r2, #2
     a74:	e7e4      	b.n	a40 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     a76:	6963      	ldr	r3, [r4, #20]
     a78:	61ab      	str	r3, [r5, #24]
     a7a:	e7e9      	b.n	a50 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
     a7c:	696b      	ldr	r3, [r5, #20]
    if (timer) {
     a7e:	b133      	cbz	r3, a8e <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
     a80:	68d9      	ldr	r1, [r3, #12]
     a82:	4628      	mov	r0, r5
     a84:	f7ff ff44 	bl	910 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
     a88:	b906      	cbnz	r6, a8c <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
     a8a:	b662      	cpsie	i
}
     a8c:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
     a8e:	78ab      	ldrb	r3, [r5, #2]
     a90:	b11b      	cbz	r3, a9a <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
     a92:	6928      	ldr	r0, [r5, #16]
     a94:	f7ff ff9b 	bl	9ce <nrf_rtc_disable_ocmp>
     a98:	e7f6      	b.n	a88 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
     a9a:	6928      	ldr	r0, [r5, #16]
     a9c:	f7ff ff92 	bl	9c4 <nrf_timer_disable_ocmp>
     aa0:	e7f2      	b.n	a88 <hal_timer_chk_queue+0x5c>

00000aa2 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
     aa2:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
     aa4:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     aa6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
     aaa:	b113      	cbz	r3, ab2 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     aac:	2300      	movs	r3, #0
     aae:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
     ab2:	6883      	ldr	r3, [r0, #8]
     ab4:	3301      	adds	r3, #1
     ab6:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
     ab8:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
     abc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
     ac0:	d100      	bne.n	ac4 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
     ac2:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
     ac4:	f7ff ffb2 	bl	a2c <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     ac8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
     acc:	e7f9      	b.n	ac2 <hal_timer_irq_handler+0x20>
	...

00000ad0 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
     ad0:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
     ad2:	4802      	ldr	r0, [pc, #8]	; (adc <nrf52_timer0_irq_handler+0xc>)
     ad4:	f7ff ffe5 	bl	aa2 <hal_timer_irq_handler>
}
     ad8:	bd08      	pop	{r3, pc}
     ada:	bf00      	nop
     adc:	20001900 	.word	0x20001900

00000ae0 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     ae0:	2805      	cmp	r0, #5
     ae2:	dc1c      	bgt.n	b1e <hal_timer_init+0x3e>
     ae4:	4b12      	ldr	r3, [pc, #72]	; (b30 <hal_timer_init+0x50>)
     ae6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     aea:	b1d3      	cbz	r3, b22 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
     aec:	781a      	ldrb	r2, [r3, #0]
     aee:	b9d2      	cbnz	r2, b26 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
     af0:	b9d8      	cbnz	r0, b2a <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
     af2:	4a10      	ldr	r2, [pc, #64]	; (b34 <hal_timer_init+0x54>)
     af4:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
     af6:	2208      	movs	r2, #8
     af8:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     afa:	4b0f      	ldr	r3, [pc, #60]	; (b38 <hal_timer_init+0x58>)
     afc:	f44f 7280 	mov.w	r2, #256	; 0x100
     b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b08:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b0c:	22e0      	movs	r2, #224	; 0xe0
     b0e:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
     b12:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
     b16:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     b18:	4a08      	ldr	r2, [pc, #32]	; (b3c <hal_timer_init+0x5c>)
     b1a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
     b1c:	4770      	bx	lr

err:
    return rc;
     b1e:	2016      	movs	r0, #22
     b20:	4770      	bx	lr
     b22:	2016      	movs	r0, #22
     b24:	4770      	bx	lr
     b26:	2016      	movs	r0, #22
     b28:	4770      	bx	lr
     b2a:	2016      	movs	r0, #22
}
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop
     b30:	00002f48 	.word	0x00002f48
     b34:	40008000 	.word	0x40008000
     b38:	e000e100 	.word	0xe000e100
     b3c:	00000ad1 	.word	0x00000ad1

00000b40 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     b40:	2805      	cmp	r0, #5
     b42:	dc65      	bgt.n	c10 <hal_timer_config+0xd0>
     b44:	4b39      	ldr	r3, [pc, #228]	; (c2c <hal_timer_config+0xec>)
     b46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     b4a:	2800      	cmp	r0, #0
     b4c:	d062      	beq.n	c14 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
     b4e:	4b38      	ldr	r3, [pc, #224]	; (c30 <hal_timer_config+0xf0>)
     b50:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     b54:	7803      	ldrb	r3, [r0, #0]
     b56:	2b00      	cmp	r3, #0
     b58:	d15e      	bne.n	c18 <hal_timer_config+0xd8>
     b5a:	2900      	cmp	r1, #0
     b5c:	d05e      	beq.n	c1c <hal_timer_config+0xdc>
     b5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     b62:	d85d      	bhi.n	c20 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
     b64:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     b66:	2a00      	cmp	r2, #0
     b68:	d05c      	beq.n	c24 <hal_timer_config+0xe4>
{
     b6a:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
     b6c:	2901      	cmp	r1, #1
     b6e:	d013      	beq.n	b98 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
     b70:	2301      	movs	r3, #1
     b72:	2b09      	cmp	r3, #9
     b74:	d810      	bhi.n	b98 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
     b76:	2201      	movs	r2, #1
     b78:	409a      	lsls	r2, r3
     b7a:	428a      	cmp	r2, r1
     b7c:	d202      	bcs.n	b84 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
     b7e:	3301      	adds	r3, #1
     b80:	b2db      	uxtb	r3, r3
     b82:	e7f6      	b.n	b72 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
     b84:	1e5c      	subs	r4, r3, #1
     b86:	2501      	movs	r5, #1
     b88:	fa05 f404 	lsl.w	r4, r5, r4
     b8c:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
     b8e:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
     b90:	428c      	cmp	r4, r1
     b92:	d201      	bcs.n	b98 <hal_timer_config+0x58>
                    prescaler -= 1;
     b94:	3b01      	subs	r3, #1
     b96:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
     b98:	4a25      	ldr	r2, [pc, #148]	; (c30 <hal_timer_config+0xf0>)
     b9a:	411a      	asrs	r2, r3
     b9c:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
     b9e:	2201      	movs	r2, #1
     ba0:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ba2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     ba6:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
     ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     bac:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
     bb0:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
     bb4:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
     bb8:	d00c      	beq.n	bd4 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     bbe:	2100      	movs	r1, #0
     bc0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
     bc4:	2101      	movs	r1, #1
     bc6:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
     bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     bcc:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
     bd0:	2a00      	cmp	r2, #0
     bd2:	d0f9      	beq.n	bc8 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
     bd4:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
     bd6:	2101      	movs	r1, #1
     bd8:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
     bda:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
     bdc:	2500      	movs	r5, #0
     bde:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
     be2:	2503      	movs	r5, #3
     be4:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
     be8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
     bec:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
     bee:	7842      	ldrb	r2, [r0, #1]
     bf0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
     bf2:	2b00      	cmp	r3, #0
     bf4:	db07      	blt.n	c06 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bf6:	f002 021f 	and.w	r2, r2, #31
     bfa:	095b      	lsrs	r3, r3, #5
     bfc:	fa01 f202 	lsl.w	r2, r1, r2
     c00:	490c      	ldr	r1, [pc, #48]	; (c34 <hal_timer_config+0xf4>)
     c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
     c06:	b97c      	cbnz	r4, c28 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
     c08:	b662      	cpsie	i

    return 0;
     c0a:	2000      	movs	r0, #0

err:
    return rc;
}
     c0c:	bc30      	pop	{r4, r5}
     c0e:	4770      	bx	lr
    return rc;
     c10:	2016      	movs	r0, #22
     c12:	4770      	bx	lr
     c14:	2016      	movs	r0, #22
     c16:	4770      	bx	lr
     c18:	2016      	movs	r0, #22
     c1a:	4770      	bx	lr
     c1c:	2016      	movs	r0, #22
     c1e:	4770      	bx	lr
     c20:	2016      	movs	r0, #22
     c22:	4770      	bx	lr
     c24:	2016      	movs	r0, #22
}
     c26:	4770      	bx	lr
    return 0;
     c28:	2000      	movs	r0, #0
     c2a:	e7ef      	b.n	c0c <hal_timer_config+0xcc>
     c2c:	00002f48 	.word	0x00002f48
     c30:	00f42400 	.word	0x00f42400
     c34:	e000e100 	.word	0xe000e100

00000c38 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
     c38:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
     c3a:	f000 f826 	bl	c8a <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
     c3e:	f7ff fa91 	bl	164 <hal_debugger_connected>
     c42:	b100      	cbz	r0, c46 <__assert_func+0xe>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
     c44:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
     c46:	4b04      	ldr	r3, [pc, #16]	; (c58 <__assert_func+0x20>)
     c48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     c4c:	605a      	str	r2, [r3, #4]
    asm("isb");
     c4e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
     c52:	f7ff fa8f 	bl	174 <hal_system_reset>
     c56:	bf00      	nop
     c58:	e000ed00 	.word	0xe000ed00

00000c5c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
     c5c:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
     c5e:	4b04      	ldr	r3, [pc, #16]	; (c70 <os_default_irq+0x14>)
     c60:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
     c62:	685a      	ldr	r2, [r3, #4]
     c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
     c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
     c6c:	f7ff fa82 	bl	174 <hal_system_reset>
     c70:	e000ed00 	.word	0xe000ed00

00000c74 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
     c74:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
     c76:	4601      	mov	r1, r0
     c78:	2000      	movs	r0, #0
     c7a:	f7ff ff61 	bl	b40 <hal_timer_config>
    return rc;
}
     c7e:	bd08      	pop	{r3, pc}

00000c80 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
     c80:	b508      	push	{r3, lr}
    os_time_advance(1);
     c82:	2001      	movs	r0, #1
     c84:	f000 f808 	bl	c98 <os_time_advance>
}
     c88:	bd08      	pop	{r3, pc}

00000c8a <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c8a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     c8e:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
     c90:	f000 0001 	and.w	r0, r0, #1
     c94:	4770      	bx	lr
	...

00000c98 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
     c98:	4a02      	ldr	r2, [pc, #8]	; (ca4 <os_time_advance+0xc>)
     c9a:	6813      	ldr	r3, [r2, #0]
     c9c:	4418      	add	r0, r3
     c9e:	6010      	str	r0, [r2, #0]
}
     ca0:	4770      	bx	lr
     ca2:	bf00      	nop
     ca4:	20001924 	.word	0x20001924

00000ca8 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
     ca8:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
     cac:	482b      	ldr	r0, [pc, #172]	; (d5c <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
     cae:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
     cb0:	3002      	adds	r0, #2
        MSR     CONTROL,R0
     cb2:	f380 8814 	msr	CONTROL, r0
        ISB
     cb6:	f3bf 8f6f 	isb	sy
        BX      LR
     cba:	4770      	bx	lr

00000cbc <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
     cbc:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
     cc0:	4770      	bx	lr

00000cc2 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
     cc2:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
     cc6:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
     cc8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
     ccc:	b951      	cbnz	r1, ce4 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     cce:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     cd2:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
     cd4:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
     cda:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
     cde:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
     ce2:	4770      	bx	lr

00000ce4 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     ce4:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
     ce6:	4a1e      	ldr	r2, [pc, #120]	; (d60 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
     ce8:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
     cea:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
     cec:	d809      	bhi.n	d02 <SVC_Done>

        LDR     R4,=SVC_Table-4
     cee:	4c1d      	ldr	r4, [pc, #116]	; (d64 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
     cf0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     cf4:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
     cf8:	47a0      	blx	r4

        MRS     R12,PSP
     cfa:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
     cfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00000d02 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
     d06:	4770      	bx	lr

00000d08 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     d08:	4b17      	ldr	r3, [pc, #92]	; (d68 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
     d0a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
     d0c:	4b17      	ldr	r3, [pc, #92]	; (d6c <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
     d0e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
     d10:	4291      	cmp	r1, r2
        IT      EQ
     d12:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
     d14:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
     d16:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
     d1a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
     d1e:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
     d22:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
     d24:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
     d28:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
     d2c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
     d30:	4770      	bx	lr

00000d32 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     d32:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
     d34:	f7ff ffa4 	bl	c80 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
     d3c:	4770      	bx	lr

00000d3e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
     d3e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
     d42:	bf0c      	ite	eq
        MRSEQ   R3,MSP
     d44:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
     d48:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
     d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
     d50:	4668      	mov	r0, sp
        BL      os_default_irq
     d52:	f7ff ff83 	bl	c5c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
     d56:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
     d5a:	4770      	bx	lr
        LDR     R0,=os_flags
     d5c:	200000f4 	.word	0x200000f4
        LDR     R2,=SVC_Count
     d60:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
     d64:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     d68:	200000e8 	.word	0x200000e8
        LDR     R3,=g_current_task      /* Get current task */
     d6c:	2000191c 	.word	0x2000191c

00000d70 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
     d70:	b470      	push	{r4, r5, r6}
     d72:	f04f 0500 	mov.w	r5, #0
     d76:	f022 0603 	bic.w	r6, r2, #3
     d7a:	e005      	b.n	d88 <test1>

00000d7c <loop1>:
     d7c:	5943      	ldr	r3, [r0, r5]
     d7e:	594c      	ldr	r4, [r1, r5]
     d80:	42a3      	cmp	r3, r4
     d82:	d104      	bne.n	d8e <res1>
     d84:	f105 0504 	add.w	r5, r5, #4

00000d88 <test1>:
     d88:	42b5      	cmp	r5, r6
     d8a:	d1f7      	bne.n	d7c <loop1>
     d8c:	e00d      	b.n	daa <test2>

00000d8e <res1>:
     d8e:	ba1b      	rev	r3, r3
     d90:	ba24      	rev	r4, r4
     d92:	1b1b      	subs	r3, r3, r4
     d94:	bf8c      	ite	hi
     d96:	2301      	movhi	r3, #1
     d98:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
     d9c:	e009      	b.n	db2 <done>

00000d9e <loop2>:
     d9e:	5d43      	ldrb	r3, [r0, r5]
     da0:	5d4c      	ldrb	r4, [r1, r5]
     da2:	1b1b      	subs	r3, r3, r4
     da4:	d105      	bne.n	db2 <done>
     da6:	f105 0501 	add.w	r5, r5, #1

00000daa <test2>:
     daa:	4295      	cmp	r5, r2
     dac:	d1f7      	bne.n	d9e <loop2>
     dae:	f04f 0300 	mov.w	r3, #0

00000db2 <done>:
     db2:	4618      	mov	r0, r3
     db4:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
     db6:	4770      	bx	lr

00000db8 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
     db8:	e001      	b.n	dbe <test1>

00000dba <loop1>:
     dba:	588b      	ldr	r3, [r1, r2]
     dbc:	5083      	str	r3, [r0, r2]

00000dbe <test1>:
     dbe:	3a04      	subs	r2, #4
     dc0:	d5fb      	bpl.n	dba <loop1>
     dc2:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
     dc6:	e001      	b.n	dcc <test2>

00000dc8 <loop2>:
     dc8:	5c8b      	ldrb	r3, [r1, r2]
     dca:	5483      	strb	r3, [r0, r2]

00000dcc <test2>:
     dcc:	3a01      	subs	r2, #1
     dce:	d5fb      	bpl.n	dc8 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
     dd0:	4770      	bx	lr

00000dd2 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
     dd2:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
     dd4:	4605      	mov	r5, r0
     dd6:	b2c9      	uxtb	r1, r1
     dd8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     ddc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     de0:	18ab      	adds	r3, r5, r2
     de2:	2403      	movs	r4, #3
     de4:	4023      	ands	r3, r4
     de6:	1ad3      	subs	r3, r2, r3
     de8:	d40b      	bmi.n	e02 <memset+0x30>
     dea:	e001      	b.n	df0 <memset+0x1e>
     dec:	3a01      	subs	r2, #1
     dee:	54a9      	strb	r1, [r5, r2]
     df0:	429a      	cmp	r2, r3
     df2:	d1fb      	bne.n	dec <memset+0x1a>
     df4:	e000      	b.n	df8 <memset+0x26>
     df6:	50a9      	str	r1, [r5, r2]
     df8:	3a04      	subs	r2, #4
     dfa:	d5fc      	bpl.n	df6 <memset+0x24>
     dfc:	3204      	adds	r2, #4
     dfe:	e000      	b.n	e02 <memset+0x30>
     e00:	54a9      	strb	r1, [r5, r2]
     e02:	3a01      	subs	r2, #1
     e04:	d5fc      	bpl.n	e00 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
     e06:	bc30      	pop	{r4, r5}
     e08:	4770      	bx	lr

00000e0a <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
     e0a:	b570      	push	{r4, r5, r6, lr}
     e0c:	b086      	sub	sp, #24
     e0e:	4605      	mov	r5, r0
     e10:	460e      	mov	r6, r1
     e12:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
     e14:	2300      	movs	r3, #0
     e16:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
     e18:	f000 fa16 	bl	1248 <mfg_init>

    mfg_open(&reader);
     e1c:	a801      	add	r0, sp, #4
     e1e:	f000 fa25 	bl	126c <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
     e22:	6823      	ldr	r3, [r4, #0]
     e24:	42ab      	cmp	r3, r5
     e26:	da29      	bge.n	e7c <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
     e28:	2102      	movs	r1, #2
     e2a:	a801      	add	r0, sp, #4
     e2c:	f000 f9f5 	bl	121a <mfg_seek_next_with_type>
     e30:	4603      	mov	r3, r0
        switch (rc) {
     e32:	f110 0f0f 	cmn.w	r0, #15
     e36:	d003      	beq.n	e40 <flash_map_read_mfg+0x36>
     e38:	b120      	cbz	r0, e44 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
     e3a:	4618      	mov	r0, r3
     e3c:	b006      	add	sp, #24
     e3e:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
     e40:	2300      	movs	r3, #0
     e42:	e7fa      	b.n	e3a <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
     e44:	a903      	add	r1, sp, #12
     e46:	a801      	add	r0, sp, #4
     e48:	f000 f9f4 	bl	1234 <mfg_read_tlv_flash_area>
        if (rc != 0) {
     e4c:	4603      	mov	r3, r0
     e4e:	2800      	cmp	r0, #0
     e50:	d1f3      	bne.n	e3a <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
     e52:	6823      	ldr	r3, [r4, #0]
     e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     e58:	009a      	lsls	r2, r3, #2
     e5a:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
     e5c:	f89d 100c 	ldrb.w	r1, [sp, #12]
     e60:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
     e62:	f89d 200d 	ldrb.w	r2, [sp, #13]
     e66:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
     e68:	f8dd 200e 	ldr.w	r2, [sp, #14]
     e6c:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
     e6e:	f8dd 2012 	ldr.w	r2, [sp, #18]
     e72:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
     e74:	6823      	ldr	r3, [r4, #0]
     e76:	3301      	adds	r3, #1
     e78:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
     e7a:	e7d2      	b.n	e22 <flash_map_read_mfg+0x18>
            return -1;
     e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e80:	e7db      	b.n	e3a <flash_map_read_mfg+0x30>
	...

00000e84 <flash_area_open>:
{
     e84:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
     e86:	4b0d      	ldr	r3, [pc, #52]	; (ebc <flash_area_open+0x38>)
     e88:	681d      	ldr	r5, [r3, #0]
     e8a:	b1a5      	cbz	r5, eb6 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
     e8c:	2300      	movs	r3, #0
     e8e:	4a0c      	ldr	r2, [pc, #48]	; (ec0 <flash_area_open+0x3c>)
     e90:	6812      	ldr	r2, [r2, #0]
     e92:	429a      	cmp	r2, r3
     e94:	dd0b      	ble.n	eae <flash_area_open+0x2a>
        area = flash_map + i;
     e96:	eb03 0443 	add.w	r4, r3, r3, lsl #1
     e9a:	00a2      	lsls	r2, r4, #2
     e9c:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
     e9e:	5caa      	ldrb	r2, [r5, r2]
     ea0:	4282      	cmp	r2, r0
     ea2:	d001      	beq.n	ea8 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
     ea4:	3301      	adds	r3, #1
     ea6:	e7f2      	b.n	e8e <flash_area_open+0xa>
            *fap = area;
     ea8:	600c      	str	r4, [r1, #0]
            return 0;
     eaa:	2000      	movs	r0, #0
     eac:	e001      	b.n	eb2 <flash_area_open+0x2e>
    return SYS_ENOENT;
     eae:	f06f 0003 	mvn.w	r0, #3
}
     eb2:	bc30      	pop	{r4, r5}
     eb4:	4770      	bx	lr
        return SYS_EACCES;
     eb6:	f06f 0006 	mvn.w	r0, #6
     eba:	e7fa      	b.n	eb2 <flash_area_open+0x2e>
     ebc:	20001928 	.word	0x20001928
     ec0:	2000192c 	.word	0x2000192c

00000ec4 <flash_area_to_sectors>:
{
     ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ec8:	b084      	sub	sp, #16
     eca:	460f      	mov	r7, r1
     ecc:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
     ece:	fa5f f980 	uxtb.w	r9, r0
     ed2:	a903      	add	r1, sp, #12
     ed4:	4648      	mov	r0, r9
     ed6:	f7ff ffd5 	bl	e84 <flash_area_open>
    if (rc != 0) {
     eda:	4680      	mov	r8, r0
     edc:	b118      	cbz	r0, ee6 <flash_area_to_sectors+0x22>
}
     ede:	4640      	mov	r0, r8
     ee0:	b004      	add	sp, #16
     ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
     ee6:	2300      	movs	r3, #0
     ee8:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
     eea:	9b03      	ldr	r3, [sp, #12]
     eec:	7858      	ldrb	r0, [r3, #1]
     eee:	f7ff fba7 	bl	640 <hal_bsp_flash_dev>
     ef2:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
     ef4:	4644      	mov	r4, r8
     ef6:	e003      	b.n	f00 <flash_area_to_sectors+0x3c>
            (*cnt)++;
     ef8:	683b      	ldr	r3, [r7, #0]
     efa:	3301      	adds	r3, #1
     efc:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
     efe:	3401      	adds	r4, #1
     f00:	68eb      	ldr	r3, [r5, #12]
     f02:	42a3      	cmp	r3, r4
     f04:	ddeb      	ble.n	ede <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
     f06:	682b      	ldr	r3, [r5, #0]
     f08:	f8d3 a00c 	ldr.w	sl, [r3, #12]
     f0c:	ab01      	add	r3, sp, #4
     f0e:	aa02      	add	r2, sp, #8
     f10:	4621      	mov	r1, r4
     f12:	4628      	mov	r0, r5
     f14:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
     f16:	9903      	ldr	r1, [sp, #12]
     f18:	684b      	ldr	r3, [r1, #4]
     f1a:	9a02      	ldr	r2, [sp, #8]
     f1c:	4293      	cmp	r3, r2
     f1e:	d8ee      	bhi.n	efe <flash_area_to_sectors+0x3a>
     f20:	6889      	ldr	r1, [r1, #8]
     f22:	440b      	add	r3, r1
     f24:	429a      	cmp	r2, r3
     f26:	d2ea      	bcs.n	efe <flash_area_to_sectors+0x3a>
            if (ret) {
     f28:	2e00      	cmp	r6, #0
     f2a:	d0e5      	beq.n	ef8 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
     f2c:	f886 9000 	strb.w	r9, [r6]
                ret->fa_device_id = fa->fa_device_id;
     f30:	9b03      	ldr	r3, [sp, #12]
     f32:	785b      	ldrb	r3, [r3, #1]
     f34:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
     f36:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	60b3      	str	r3, [r6, #8]
                ret++;
     f3c:	360c      	adds	r6, #12
     f3e:	e7db      	b.n	ef8 <flash_area_to_sectors+0x34>

00000f40 <flash_area_read>:
{
     f40:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
     f42:	6884      	ldr	r4, [r0, #8]
     f44:	428c      	cmp	r4, r1
     f46:	d308      	bcc.n	f5a <flash_area_read+0x1a>
     f48:	18cd      	adds	r5, r1, r3
     f4a:	42ac      	cmp	r4, r5
     f4c:	d308      	bcc.n	f60 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
     f4e:	6844      	ldr	r4, [r0, #4]
     f50:	4421      	add	r1, r4
     f52:	7840      	ldrb	r0, [r0, #1]
     f54:	f001 fec7 	bl	2ce6 <hal_flash_read>
}
     f58:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
     f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f5e:	e7fb      	b.n	f58 <flash_area_read+0x18>
     f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f64:	e7f8      	b.n	f58 <flash_area_read+0x18>

00000f66 <flash_area_write>:
{
     f66:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
     f68:	6884      	ldr	r4, [r0, #8]
     f6a:	428c      	cmp	r4, r1
     f6c:	d308      	bcc.n	f80 <flash_area_write+0x1a>
     f6e:	18cd      	adds	r5, r1, r3
     f70:	42ac      	cmp	r4, r5
     f72:	d308      	bcc.n	f86 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
     f74:	6844      	ldr	r4, [r0, #4]
     f76:	4421      	add	r1, r4
     f78:	7840      	ldrb	r0, [r0, #1]
     f7a:	f001 fedf 	bl	2d3c <hal_flash_write>
}
     f7e:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
     f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f84:	e7fb      	b.n	f7e <flash_area_write+0x18>
     f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f8a:	e7f8      	b.n	f7e <flash_area_write+0x18>

00000f8c <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
     f8c:	6883      	ldr	r3, [r0, #8]
     f8e:	428b      	cmp	r3, r1
     f90:	d309      	bcc.n	fa6 <flash_area_erase+0x1a>
{
     f92:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
     f94:	188c      	adds	r4, r1, r2
     f96:	42a3      	cmp	r3, r4
     f98:	d308      	bcc.n	fac <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
     f9a:	6843      	ldr	r3, [r0, #4]
     f9c:	4419      	add	r1, r3
     f9e:	7840      	ldrb	r0, [r0, #1]
     fa0:	f001 ff06 	bl	2db0 <hal_flash_erase>
}
     fa4:	bd10      	pop	{r4, pc}
        return -1;
     fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     faa:	4770      	bx	lr
        return -1;
     fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     fb0:	e7f8      	b.n	fa4 <flash_area_erase+0x18>

00000fb2 <flash_area_align>:
{
     fb2:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
     fb4:	7840      	ldrb	r0, [r0, #1]
     fb6:	f001 fe86 	bl	2cc6 <hal_flash_align>
}
     fba:	bd08      	pop	{r3, pc}

00000fbc <flash_area_erased_val>:
{
     fbc:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
     fbe:	7840      	ldrb	r0, [r0, #1]
     fc0:	f001 fe89 	bl	2cd6 <hal_flash_erased_val>
}
     fc4:	bd08      	pop	{r3, pc}

00000fc6 <flash_area_read_is_empty>:
{
     fc6:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
     fc8:	6844      	ldr	r4, [r0, #4]
     fca:	4421      	add	r1, r4
     fcc:	7840      	ldrb	r0, [r0, #1]
     fce:	f001 ff6f 	bl	2eb0 <hal_flash_isempty>
}
     fd2:	bd10      	pop	{r4, pc}

00000fd4 <flash_map_init>:

void
flash_map_init(void)
{
     fd4:	b510      	push	{r4, lr}
     fd6:	b084      	sub	sp, #16
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
     fd8:	f001 fe61 	bl	2c9e <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
     fdc:	b138      	cbz	r0, fee <flash_map_init+0x1a>
     fde:	2000      	movs	r0, #0
     fe0:	9000      	str	r0, [sp, #0]
     fe2:	4b0e      	ldr	r3, [pc, #56]	; (101c <flash_map_init+0x48>)
     fe4:	681c      	ldr	r4, [r3, #0]
     fe6:	4603      	mov	r3, r0
     fe8:	4602      	mov	r2, r0
     fea:	4601      	mov	r1, r0
     fec:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
     fee:	4b0c      	ldr	r3, [pc, #48]	; (1020 <flash_map_init+0x4c>)
     ff0:	4a0c      	ldr	r2, [pc, #48]	; (1024 <flash_map_init+0x50>)
     ff2:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
     ff4:	4b0c      	ldr	r3, [pc, #48]	; (1028 <flash_map_init+0x54>)
     ff6:	2206      	movs	r2, #6
     ff8:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
     ffa:	aa03      	add	r2, sp, #12
     ffc:	490b      	ldr	r1, [pc, #44]	; (102c <flash_map_init+0x58>)
     ffe:	200a      	movs	r0, #10
    1000:	f7ff ff03 	bl	e0a <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
    1004:	b938      	cbnz	r0, 1016 <flash_map_init+0x42>
    1006:	9b03      	ldr	r3, [sp, #12]
    1008:	2b00      	cmp	r3, #0
    100a:	dd04      	ble.n	1016 <flash_map_init+0x42>
        flash_map = mfg_areas;
    100c:	4a04      	ldr	r2, [pc, #16]	; (1020 <flash_map_init+0x4c>)
    100e:	4907      	ldr	r1, [pc, #28]	; (102c <flash_map_init+0x58>)
    1010:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
    1012:	4a05      	ldr	r2, [pc, #20]	; (1028 <flash_map_init+0x54>)
    1014:	6013      	str	r3, [r2, #0]
    }
}
    1016:	b004      	add	sp, #16
    1018:	bd10      	pop	{r4, pc}
    101a:	bf00      	nop
    101c:	200000f0 	.word	0x200000f0
    1020:	20001928 	.word	0x20001928
    1024:	00002f60 	.word	0x00002f60
    1028:	2000192c 	.word	0x2000192c
    102c:	200000f8 	.word	0x200000f8

00001030 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    1030:	b530      	push	{r4, r5, lr}
    1032:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    1034:	7885      	ldrb	r5, [r0, #2]
    1036:	4b21      	ldr	r3, [pc, #132]	; (10bc <mfg_seek_next_aux+0x8c>)
    1038:	681b      	ldr	r3, [r3, #0]
    103a:	429d      	cmp	r5, r3
    103c:	da32      	bge.n	10a4 <mfg_seek_next_aux+0x74>
    103e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    1040:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1044:	0093      	lsls	r3, r2, #2
    1046:	a901      	add	r1, sp, #4
    1048:	4a1d      	ldr	r2, [pc, #116]	; (10c0 <mfg_seek_next_aux+0x90>)
    104a:	5cd0      	ldrb	r0, [r2, r3]
    104c:	f7ff ff1a 	bl	e84 <flash_area_open>
    if (rc != 0) {
    1050:	bb58      	cbnz	r0, 10aa <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    1052:	6862      	ldr	r2, [r4, #4]
    1054:	b9c2      	cbnz	r2, 1088 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    1056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    105a:	00aa      	lsls	r2, r5, #2
    105c:	4b18      	ldr	r3, [pc, #96]	; (10c0 <mfg_seek_next_aux+0x90>)
    105e:	4413      	add	r3, r2
    1060:	685b      	ldr	r3, [r3, #4]
    1062:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    1064:	6861      	ldr	r1, [r4, #4]
    1066:	9801      	ldr	r0, [sp, #4]
    1068:	6883      	ldr	r3, [r0, #8]
    106a:	3b08      	subs	r3, #8
    106c:	4299      	cmp	r1, r3
    106e:	d310      	bcc.n	1092 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    1070:	78a3      	ldrb	r3, [r4, #2]
    1072:	1c59      	adds	r1, r3, #1
    1074:	4a11      	ldr	r2, [pc, #68]	; (10bc <mfg_seek_next_aux+0x8c>)
    1076:	6812      	ldr	r2, [r2, #0]
    1078:	4291      	cmp	r1, r2
    107a:	da19      	bge.n	10b0 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    107c:	2200      	movs	r2, #0
    107e:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    1080:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    1082:	f06f 0305 	mvn.w	r3, #5
    1086:	e015      	b.n	10b4 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    1088:	7863      	ldrb	r3, [r4, #1]
    108a:	4413      	add	r3, r2
    108c:	3302      	adds	r3, #2
    108e:	6063      	str	r3, [r4, #4]
    1090:	e7e8      	b.n	1064 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    1092:	2302      	movs	r3, #2
    1094:	4622      	mov	r2, r4
    1096:	f7ff ff53 	bl	f40 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    109a:	4603      	mov	r3, r0
    109c:	b150      	cbz	r0, 10b4 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    109e:	f06f 0304 	mvn.w	r3, #4
    10a2:	e007      	b.n	10b4 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    10a4:	f06f 0301 	mvn.w	r3, #1
    10a8:	e004      	b.n	10b4 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    10aa:	f06f 0304 	mvn.w	r3, #4
    10ae:	e001      	b.n	10b4 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    10b0:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    10b4:	4618      	mov	r0, r3
    10b6:	b003      	add	sp, #12
    10b8:	bd30      	pop	{r4, r5, pc}
    10ba:	bf00      	nop
    10bc:	2000018c 	.word	0x2000018c
    10c0:	20000174 	.word	0x20000174

000010c4 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    10c4:	b530      	push	{r4, r5, lr}
    10c6:	b085      	sub	sp, #20
    10c8:	4605      	mov	r5, r0
    10ca:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    10cc:	a903      	add	r1, sp, #12
    10ce:	f7ff fed9 	bl	e84 <flash_area_open>
    if (rc != 0) {
    10d2:	b9e8      	cbnz	r0, 1110 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    10d4:	9803      	ldr	r0, [sp, #12]
    10d6:	6881      	ldr	r1, [r0, #8]
    10d8:	2308      	movs	r3, #8
    10da:	aa01      	add	r2, sp, #4
    10dc:	3908      	subs	r1, #8
    10de:	f7ff ff2f 	bl	f40 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    10e2:	4601      	mov	r1, r0
    10e4:	b9b8      	cbnz	r0, 1116 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    10e6:	9a02      	ldr	r2, [sp, #8]
    10e8:	4b11      	ldr	r3, [pc, #68]	; (1130 <mfg_read_mmr+0x6c>)
    10ea:	429a      	cmp	r2, r3
    10ec:	d116      	bne.n	111c <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    10ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    10f2:	2b02      	cmp	r3, #2
    10f4:	d115      	bne.n	1122 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    10f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    10fa:	9b03      	ldr	r3, [sp, #12]
    10fc:	689b      	ldr	r3, [r3, #8]
    10fe:	429a      	cmp	r2, r3
    1100:	d812      	bhi.n	1128 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    1102:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    1104:	7025      	strb	r5, [r4, #0]
    1106:	6063      	str	r3, [r4, #4]
    1108:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    110a:	4608      	mov	r0, r1
    110c:	b005      	add	sp, #20
    110e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    1110:	f06f 0104 	mvn.w	r1, #4
    1114:	e7f9      	b.n	110a <mfg_read_mmr+0x46>
        return SYS_EIO;
    1116:	f06f 0104 	mvn.w	r1, #4
    111a:	e7f6      	b.n	110a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    111c:	f06f 0108 	mvn.w	r1, #8
    1120:	e7f3      	b.n	110a <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    1122:	f06f 010b 	mvn.w	r1, #11
    1126:	e7f0      	b.n	110a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    1128:	f06f 0108 	mvn.w	r1, #8
    112c:	e7ed      	b.n	110a <mfg_read_mmr+0x46>
    112e:	bf00      	nop
    1130:	3bb2a269 	.word	0x3bb2a269

00001134 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    1134:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    1136:	2300      	movs	r3, #0
    1138:	4a11      	ldr	r2, [pc, #68]	; (1180 <mfg_read_next_mmr+0x4c>)
    113a:	6812      	ldr	r2, [r2, #0]
    113c:	429a      	cmp	r2, r3
    113e:	dd08      	ble.n	1152 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    1140:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1144:	008a      	lsls	r2, r1, #2
    1146:	490f      	ldr	r1, [pc, #60]	; (1184 <mfg_read_next_mmr+0x50>)
    1148:	5c8a      	ldrb	r2, [r1, r2]
    114a:	4282      	cmp	r2, r0
    114c:	d011      	beq.n	1172 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    114e:	3301      	adds	r3, #1
    1150:	e7f2      	b.n	1138 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    1152:	2a01      	cmp	r2, #1
    1154:	dc11      	bgt.n	117a <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    1156:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    115a:	0093      	lsls	r3, r2, #2
    115c:	4909      	ldr	r1, [pc, #36]	; (1184 <mfg_read_next_mmr+0x50>)
    115e:	4419      	add	r1, r3
    1160:	f7ff ffb0 	bl	10c4 <mfg_read_mmr>
    if (rc != 0) {
    1164:	4603      	mov	r3, r0
    1166:	b930      	cbnz	r0, 1176 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    1168:	4905      	ldr	r1, [pc, #20]	; (1180 <mfg_read_next_mmr+0x4c>)
    116a:	680a      	ldr	r2, [r1, #0]
    116c:	3201      	adds	r2, #1
    116e:	600a      	str	r2, [r1, #0]
    return 0;
    1170:	e001      	b.n	1176 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    1172:	f06f 030a 	mvn.w	r3, #10
}
    1176:	4618      	mov	r0, r3
    1178:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    117a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    117e:	e7fa      	b.n	1176 <mfg_read_next_mmr+0x42>
    1180:	2000018c 	.word	0x2000018c
    1184:	20000174 	.word	0x20000174

00001188 <mfg_open_flash_area>:
{
    1188:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    118a:	7883      	ldrb	r3, [r0, #2]
    118c:	4a0b      	ldr	r2, [pc, #44]	; (11bc <mfg_open_flash_area+0x34>)
    118e:	6812      	ldr	r2, [r2, #0]
    1190:	4293      	cmp	r3, r2
    1192:	da0a      	bge.n	11aa <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    1194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1198:	009a      	lsls	r2, r3, #2
    119a:	4b09      	ldr	r3, [pc, #36]	; (11c0 <mfg_open_flash_area+0x38>)
    119c:	5c98      	ldrb	r0, [r3, r2]
    119e:	f7ff fe71 	bl	e84 <flash_area_open>
    if (rc != 0) {
    11a2:	4603      	mov	r3, r0
    11a4:	b938      	cbnz	r0, 11b6 <mfg_open_flash_area+0x2e>
}
    11a6:	4618      	mov	r0, r3
    11a8:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    11aa:	2300      	movs	r3, #0
    11ac:	461a      	mov	r2, r3
    11ae:	4619      	mov	r1, r3
    11b0:	4618      	mov	r0, r3
    11b2:	f7ff fd41 	bl	c38 <__assert_func>
        return SYS_EIO;
    11b6:	f06f 0304 	mvn.w	r3, #4
    11ba:	e7f4      	b.n	11a6 <mfg_open_flash_area+0x1e>
    11bc:	2000018c 	.word	0x2000018c
    11c0:	20000174 	.word	0x20000174

000011c4 <mfg_read_tlv_body>:
{
    11c4:	b570      	push	{r4, r5, r6, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	4606      	mov	r6, r0
    11ca:	460c      	mov	r4, r1
    11cc:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    11ce:	a901      	add	r1, sp, #4
    11d0:	f7ff ffda 	bl	1188 <mfg_open_flash_area>
    if (rc != 0) {
    11d4:	4603      	mov	r3, r0
    11d6:	b110      	cbz	r0, 11de <mfg_read_tlv_body+0x1a>
}
    11d8:	4618      	mov	r0, r3
    11da:	b002      	add	sp, #8
    11dc:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    11de:	462a      	mov	r2, r5
    11e0:	2100      	movs	r1, #0
    11e2:	4620      	mov	r0, r4
    11e4:	f7ff fdf5 	bl	dd2 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    11e8:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    11ea:	6871      	ldr	r1, [r6, #4]
    11ec:	42ab      	cmp	r3, r5
    11ee:	bfa8      	it	ge
    11f0:	462b      	movge	r3, r5
    11f2:	4622      	mov	r2, r4
    11f4:	3102      	adds	r1, #2
    11f6:	9801      	ldr	r0, [sp, #4]
    11f8:	f7ff fea2 	bl	f40 <flash_area_read>
    if (rc != 0) {
    11fc:	4603      	mov	r3, r0
    11fe:	2800      	cmp	r0, #0
    1200:	d0ea      	beq.n	11d8 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    1202:	f06f 0304 	mvn.w	r3, #4
    1206:	e7e7      	b.n	11d8 <mfg_read_tlv_body+0x14>

00001208 <mfg_seek_next>:
{
    1208:	b510      	push	{r4, lr}
    120a:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    120c:	4620      	mov	r0, r4
    120e:	f7ff ff0f 	bl	1030 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    1212:	f110 0f06 	cmn.w	r0, #6
    1216:	d0f9      	beq.n	120c <mfg_seek_next+0x4>
}
    1218:	bd10      	pop	{r4, pc}

0000121a <mfg_seek_next_with_type>:
{
    121a:	b538      	push	{r3, r4, r5, lr}
    121c:	4604      	mov	r4, r0
    121e:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    1220:	4620      	mov	r0, r4
    1222:	f7ff fff1 	bl	1208 <mfg_seek_next>
        if (rc != 0) {
    1226:	4602      	mov	r2, r0
    1228:	b910      	cbnz	r0, 1230 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    122a:	7823      	ldrb	r3, [r4, #0]
    122c:	42ab      	cmp	r3, r5
    122e:	d1f7      	bne.n	1220 <mfg_seek_next_with_type+0x6>
}
    1230:	4610      	mov	r0, r2
    1232:	bd38      	pop	{r3, r4, r5, pc}

00001234 <mfg_read_tlv_flash_area>:
{
    1234:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    1236:	220a      	movs	r2, #10
    1238:	f7ff ffc4 	bl	11c4 <mfg_read_tlv_body>
}
    123c:	bd08      	pop	{r3, pc}

0000123e <mfg_read_tlv_mmr_ref>:
{
    123e:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    1240:	2201      	movs	r2, #1
    1242:	f7ff ffbf 	bl	11c4 <mfg_read_tlv_body>
}
    1246:	bd08      	pop	{r3, pc}

00001248 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    1248:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    124a:	4b07      	ldr	r3, [pc, #28]	; (1268 <mfg_init+0x20>)
    124c:	781b      	ldrb	r3, [r3, #0]
    124e:	b103      	cbz	r3, 1252 <mfg_init+0xa>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
    1250:	bd08      	pop	{r3, pc}
    mfg_initialized = true;
    1252:	4b05      	ldr	r3, [pc, #20]	; (1268 <mfg_init+0x20>)
    1254:	2201      	movs	r2, #1
    1256:	701a      	strb	r2, [r3, #0]
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    1258:	2000      	movs	r0, #0
    125a:	f7ff ff6b 	bl	1134 <mfg_read_next_mmr>
    if (rc != 0) {
    125e:	2800      	cmp	r0, #0
    1260:	d1f6      	bne.n	1250 <mfg_init+0x8>
    rc = mfg_read_mmr_refs();
    1262:	f000 f80b 	bl	127c <mfg_read_mmr_refs>
err:
    1266:	e7f3      	b.n	1250 <mfg_init+0x8>
    1268:	20000170 	.word	0x20000170

0000126c <mfg_open>:
{
    126c:	b510      	push	{r4, lr}
    126e:	4604      	mov	r4, r0
    mfg_init();
    1270:	f7ff ffea 	bl	1248 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    1274:	2300      	movs	r3, #0
    1276:	6023      	str	r3, [r4, #0]
    1278:	6063      	str	r3, [r4, #4]
}
    127a:	bd10      	pop	{r4, pc}

0000127c <mfg_read_mmr_refs>:
{
    127c:	b500      	push	{lr}
    127e:	b085      	sub	sp, #20
    mfg_open(&reader);
    1280:	a801      	add	r0, sp, #4
    1282:	f7ff fff3 	bl	126c <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    1286:	2104      	movs	r1, #4
    1288:	eb0d 0001 	add.w	r0, sp, r1
    128c:	f7ff ffc5 	bl	121a <mfg_seek_next_with_type>
    1290:	4603      	mov	r3, r0
        switch (rc) {
    1292:	f110 0f0f 	cmn.w	r0, #15
    1296:	d004      	beq.n	12a2 <mfg_read_mmr_refs+0x26>
    1298:	b128      	cbz	r0, 12a6 <mfg_read_mmr_refs+0x2a>
}
    129a:	4618      	mov	r0, r3
    129c:	b005      	add	sp, #20
    129e:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    12a2:	2300      	movs	r3, #0
    12a4:	e7f9      	b.n	129a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    12a6:	a903      	add	r1, sp, #12
    12a8:	a801      	add	r0, sp, #4
    12aa:	f7ff ffc8 	bl	123e <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    12ae:	4603      	mov	r3, r0
    12b0:	2800      	cmp	r0, #0
    12b2:	d1f2      	bne.n	129a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    12b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    12b8:	f7ff ff3c 	bl	1134 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    12bc:	4603      	mov	r3, r0
    12be:	2800      	cmp	r0, #0
    12c0:	d0e1      	beq.n	1286 <mfg_read_mmr_refs+0xa>
    12c2:	f110 0f0b 	cmn.w	r0, #11
    12c6:	d0de      	beq.n	1286 <mfg_read_mmr_refs+0xa>
    12c8:	e7e7      	b.n	129a <mfg_read_mmr_refs+0x1e>

000012ca <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    12ca:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    12cc:	f7ff fcb4 	bl	c38 <__assert_func>

000012d0 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    12d0:	6802      	ldr	r2, [r0, #0]
    12d2:	4b0e      	ldr	r3, [pc, #56]	; (130c <boot_is_header_valid+0x3c>)
    12d4:	429a      	cmp	r2, r3
    12d6:	d001      	beq.n	12dc <boot_is_header_valid+0xc>
        return false;
    12d8:	2000      	movs	r0, #0
    12da:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    12dc:	68c2      	ldr	r2, [r0, #12]
    12de:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    12e0:	43d8      	mvns	r0, r3
    12e2:	4282      	cmp	r2, r0
    12e4:	d80a      	bhi.n	12fc <boot_is_header_valid+0x2c>
{
    12e6:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    12e8:	18d4      	adds	r4, r2, r3
        return true;
    12ea:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    12ec:	b110      	cbz	r0, 12f4 <boot_is_header_valid+0x24>
        return false;
    }

    if (size >= fap->fa_size) {
    12ee:	688b      	ldr	r3, [r1, #8]
    12f0:	42a3      	cmp	r3, r4
    12f2:	d901      	bls.n	12f8 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    12f4:	bc10      	pop	{r4}
    12f6:	4770      	bx	lr
        return false;
    12f8:	2000      	movs	r0, #0
    12fa:	e7fb      	b.n	12f4 <boot_is_header_valid+0x24>
        return false;
    12fc:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    12fe:	b110      	cbz	r0, 1306 <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    1300:	688b      	ldr	r3, [r1, #8]
    1302:	42a3      	cmp	r3, r4
    1304:	d900      	bls.n	1308 <boot_is_header_valid+0x38>
}
    1306:	4770      	bx	lr
        return false;
    1308:	2000      	movs	r0, #0
    130a:	e7fc      	b.n	1306 <boot_is_header_valid+0x36>
    130c:	96f3b83d 	.word	0x96f3b83d

00001310 <boot_write_sz>:
{
    1310:	b538      	push	{r3, r4, r5, lr}
    1312:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1314:	6a00      	ldr	r0, [r0, #32]
    1316:	f7ff fe4c 	bl	fb2 <flash_area_align>
    131a:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    131c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    131e:	f7ff fe48 	bl	fb2 <flash_area_align>
    if (align > elem_sz) {
    1322:	4285      	cmp	r5, r0
    1324:	d200      	bcs.n	1328 <boot_write_sz+0x18>
}
    1326:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1328:	4628      	mov	r0, r5
    return elem_sz;
    132a:	e7fc      	b.n	1326 <boot_write_sz+0x16>

0000132c <boot_read_image_size>:
{
    132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1330:	b082      	sub	sp, #8
    1332:	4680      	mov	r8, r0
    1334:	460d      	mov	r5, r1
    1336:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1338:	2000      	movs	r0, #0
    133a:	f001 faca 	bl	28d2 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    133e:	a901      	add	r1, sp, #4
    1340:	b2c0      	uxtb	r0, r0
    1342:	f7ff fd9f 	bl	e84 <flash_area_open>
    if (rc != 0) {
    1346:	b120      	cbz	r0, 1352 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    1348:	2401      	movs	r4, #1
}
    134a:	4620      	mov	r0, r4
    134c:	b002      	add	sp, #8
    134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1352:	232c      	movs	r3, #44	; 0x2c
    1354:	fb03 8305 	mla	r3, r3, r5, r8
    1358:	891e      	ldrh	r6, [r3, #8]
    135a:	68db      	ldr	r3, [r3, #12]
    135c:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    135e:	2304      	movs	r3, #4
    1360:	466a      	mov	r2, sp
    1362:	4631      	mov	r1, r6
    1364:	9801      	ldr	r0, [sp, #4]
    1366:	f7ff fdeb 	bl	f40 <flash_area_read>
    136a:	4604      	mov	r4, r0
    136c:	bb30      	cbnz	r0, 13bc <boot_read_image_size+0x90>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    136e:	232c      	movs	r3, #44	; 0x2c
    1370:	fb03 8505 	mla	r5, r3, r5, r8
    1374:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1376:	f8bd 2000 	ldrh.w	r2, [sp]
    137a:	f646 1308 	movw	r3, #26888	; 0x6908
    137e:	429a      	cmp	r2, r3
    1380:	d00c      	beq.n	139c <boot_read_image_size+0x70>
    } else if (protect_tlv_size != 0) {
    1382:	b9ed      	cbnz	r5, 13c0 <boot_read_image_size+0x94>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1384:	f8bd 2000 	ldrh.w	r2, [sp]
    1388:	f646 1307 	movw	r3, #26887	; 0x6907
    138c:	429a      	cmp	r2, r3
    138e:	d119      	bne.n	13c4 <boot_read_image_size+0x98>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    1390:	442e      	add	r6, r5
    1392:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1396:	441e      	add	r6, r3
    1398:	603e      	str	r6, [r7, #0]
    139a:	e7d6      	b.n	134a <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    139c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    13a0:	428d      	cmp	r5, r1
    13a2:	d001      	beq.n	13a8 <boot_read_image_size+0x7c>
            rc = BOOT_EBADIMAGE;
    13a4:	2403      	movs	r4, #3
    13a6:	e7d0      	b.n	134a <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    13a8:	2304      	movs	r3, #4
    13aa:	466a      	mov	r2, sp
    13ac:	4431      	add	r1, r6
    13ae:	9801      	ldr	r0, [sp, #4]
    13b0:	f7ff fdc6 	bl	f40 <flash_area_read>
    13b4:	2800      	cmp	r0, #0
    13b6:	d0e5      	beq.n	1384 <boot_read_image_size+0x58>
            rc = BOOT_EFLASH;
    13b8:	2401      	movs	r4, #1
    13ba:	e7c6      	b.n	134a <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    13bc:	2401      	movs	r4, #1
    13be:	e7c4      	b.n	134a <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    13c0:	2403      	movs	r4, #3
    13c2:	e7c2      	b.n	134a <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    13c4:	2403      	movs	r4, #3
    return rc;
    13c6:	e7c0      	b.n	134a <boot_read_image_size+0x1e>

000013c8 <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	b082      	sub	sp, #8
    13cc:	4606      	mov	r6, r0
    13ce:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    13d0:	2000      	movs	r0, #0
    13d2:	f001 fa7e 	bl	28d2 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    13d6:	a901      	add	r1, sp, #4
    13d8:	b2c0      	uxtb	r0, r0
    13da:	f7ff fd53 	bl	e84 <flash_area_open>
    if (rc != 0) {
    13de:	b9d0      	cbnz	r0, 1416 <boot_check_header_erased+0x4e>
    13e0:	4605      	mov	r5, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    13e2:	9801      	ldr	r0, [sp, #4]
    13e4:	f7ff fdea 	bl	fbc <flash_area_erased_val>
    13e8:	b2c0      	uxtb	r0, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    13ea:	212c      	movs	r1, #44	; 0x2c
    13ec:	fb01 6104 	mla	r1, r1, r4, r6
    for (i = 0; i < len; i++) {
    13f0:	2300      	movs	r3, #0
    13f2:	2b03      	cmp	r3, #3
    13f4:	d805      	bhi.n	1402 <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    13f6:	5cca      	ldrb	r2, [r1, r3]
    13f8:	4290      	cmp	r0, r2
    13fa:	d107      	bne.n	140c <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    13fc:	3301      	adds	r3, #1
    13fe:	b2db      	uxtb	r3, r3
    1400:	e7f7      	b.n	13f2 <boot_check_header_erased+0x2a>
    return true;
    1402:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    1404:	b123      	cbz	r3, 1410 <boot_check_header_erased+0x48>
        return -1;
    }

    return 0;
}
    1406:	4628      	mov	r0, r5
    1408:	b002      	add	sp, #8
    140a:	bd70      	pop	{r4, r5, r6, pc}
            return false;
    140c:	2300      	movs	r3, #0
    140e:	e7f9      	b.n	1404 <boot_check_header_erased+0x3c>
        return -1;
    1410:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1414:	e7f7      	b.n	1406 <boot_check_header_erased+0x3e>
        return -1;
    1416:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    141a:	e7f4      	b.n	1406 <boot_check_header_erased+0x3e>

0000141c <boot_initialize_area>:
{
    141c:	b510      	push	{r4, lr}
    141e:	b082      	sub	sp, #8
    1420:	4604      	mov	r4, r0
    1422:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1424:	2380      	movs	r3, #128	; 0x80
    1426:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    1428:	2901      	cmp	r1, #1
    142a:	d006      	beq.n	143a <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    142c:	2902      	cmp	r1, #2
    142e:	d00b      	beq.n	1448 <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    1430:	2903      	cmp	r1, #3
    1432:	d010      	beq.n	1456 <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    1434:	2001      	movs	r0, #1
}
    1436:	b002      	add	sp, #8
    1438:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    143a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    143c:	a901      	add	r1, sp, #4
    143e:	f7ff fd41 	bl	ec4 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    1442:	9b01      	ldr	r3, [sp, #4]
    1444:	62a3      	str	r3, [r4, #40]	; 0x28
    1446:	e7f6      	b.n	1436 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1448:	6d22      	ldr	r2, [r4, #80]	; 0x50
    144a:	a901      	add	r1, sp, #4
    144c:	f7ff fd3a 	bl	ec4 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    1450:	9b01      	ldr	r3, [sp, #4]
    1452:	6563      	str	r3, [r4, #84]	; 0x54
    1454:	e7ef      	b.n	1436 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1456:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    1458:	a901      	add	r1, sp, #4
    145a:	f7ff fd33 	bl	ec4 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    145e:	9b01      	ldr	r3, [sp, #4]
    1460:	6623      	str	r3, [r4, #96]	; 0x60
    1462:	e7e8      	b.n	1436 <boot_initialize_area+0x1a>

00001464 <boot_read_sectors>:
{
    1464:	b538      	push	{r3, r4, r5, lr}
    1466:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    1468:	2101      	movs	r1, #1
    146a:	f7ff ffd7 	bl	141c <boot_initialize_area>
    if (rc != 0) {
    146e:	b110      	cbz	r0, 1476 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    1470:	2401      	movs	r4, #1
}
    1472:	4620      	mov	r0, r4
    1474:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    1476:	2102      	movs	r1, #2
    1478:	4628      	mov	r0, r5
    147a:	f7ff ffcf 	bl	141c <boot_initialize_area>
    if (rc != 0) {
    147e:	b108      	cbz	r0, 1484 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    1480:	2401      	movs	r4, #1
    1482:	e7f6      	b.n	1472 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    1484:	2103      	movs	r1, #3
    1486:	4628      	mov	r0, r5
    1488:	f7ff ffc8 	bl	141c <boot_initialize_area>
    if (rc != 0) {
    148c:	4604      	mov	r4, r0
    148e:	b108      	cbz	r0, 1494 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    1490:	2401      	movs	r4, #1
    1492:	e7ee      	b.n	1472 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    1494:	4628      	mov	r0, r5
    1496:	f7ff ff3b 	bl	1310 <boot_write_sz>
    149a:	66a8      	str	r0, [r5, #104]	; 0x68
    return 0;
    149c:	e7e9      	b.n	1472 <boot_read_sectors+0xe>
	...

000014a0 <boot_image_check>:
{
    14a0:	b500      	push	{lr}
    14a2:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    14a4:	2000      	movs	r0, #0
    14a6:	9004      	str	r0, [sp, #16]
    14a8:	9003      	str	r0, [sp, #12]
    14aa:	9002      	str	r0, [sp, #8]
    14ac:	f44f 7380 	mov.w	r3, #256	; 0x100
    14b0:	9301      	str	r3, [sp, #4]
    14b2:	4b07      	ldr	r3, [pc, #28]	; (14d0 <boot_image_check+0x30>)
    14b4:	9300      	str	r3, [sp, #0]
    14b6:	4613      	mov	r3, r2
    14b8:	460a      	mov	r2, r1
    14ba:	4601      	mov	r1, r0
    14bc:	f001 f8eb 	bl	2696 <bootutil_img_validate>
    14c0:	4603      	mov	r3, r0
    14c2:	b918      	cbnz	r0, 14cc <boot_image_check+0x2c>
}
    14c4:	4618      	mov	r0, r3
    14c6:	b007      	add	sp, #28
    14c8:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
    14cc:	2303      	movs	r3, #3
    14ce:	e7f9      	b.n	14c4 <boot_image_check+0x24>
    14d0:	200017fc 	.word	0x200017fc

000014d4 <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    14d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14d8:	b082      	sub	sp, #8
    14da:	4605      	mov	r5, r0
    14dc:	460c      	mov	r4, r1
    14de:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    14e0:	2000      	movs	r0, #0
    14e2:	f001 f9f6 	bl	28d2 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    14e6:	a901      	add	r1, sp, #4
    14e8:	b2c0      	uxtb	r0, r0
    14ea:	f7ff fccb 	bl	e84 <flash_area_open>
    if (rc != 0) {
    14ee:	bb30      	cbnz	r0, 153e <boot_validate_slot+0x6a>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    14f0:	202c      	movs	r0, #44	; 0x2c
    14f2:	fb00 5604 	mla	r6, r0, r4, r5
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
    14f6:	4621      	mov	r1, r4
    14f8:	4628      	mov	r0, r5
    14fa:	f7ff ff65 	bl	13c8 <boot_check_header_erased>
    14fe:	b308      	cbz	r0, 1544 <boot_validate_slot+0x70>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    1500:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    1502:	f013 0f10 	tst.w	r3, #16
    1506:	d122      	bne.n	154e <boot_validate_slot+0x7a>
            goto out;
        }
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    1508:	f8dd 8004 	ldr.w	r8, [sp, #4]
    150c:	4641      	mov	r1, r8
    150e:	4630      	mov	r0, r6
    1510:	f7ff fede 	bl	12d0 <boot_is_header_valid>
    1514:	b910      	cbnz	r0, 151c <boot_validate_slot+0x48>
        if (slot != BOOT_PRIMARY_SLOT) {
    1516:	b95c      	cbnz	r4, 1530 <boot_validate_slot+0x5c>
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        rc = 1;
    1518:	2301      	movs	r3, #1
    151a:	e014      	b.n	1546 <boot_validate_slot+0x72>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    151c:	463b      	mov	r3, r7
    151e:	4642      	mov	r2, r8
    1520:	4631      	mov	r1, r6
    1522:	4628      	mov	r0, r5
    1524:	f7ff ffbc 	bl	14a0 <boot_image_check>
    1528:	4603      	mov	r3, r0
    152a:	2800      	cmp	r0, #0
    152c:	d1f3      	bne.n	1516 <boot_validate_slot+0x42>
    152e:	e00a      	b.n	1546 <boot_validate_slot+0x72>
            flash_area_erase(fap, 0, fap->fa_size);
    1530:	9801      	ldr	r0, [sp, #4]
    1532:	6882      	ldr	r2, [r0, #8]
    1534:	2100      	movs	r1, #0
    1536:	f7ff fd29 	bl	f8c <flash_area_erase>
        rc = 1;
    153a:	2301      	movs	r3, #1
    153c:	e003      	b.n	1546 <boot_validate_slot+0x72>
        return -1;
    153e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1542:	e000      	b.n	1546 <boot_validate_slot+0x72>
        rc = 1;
    1544:	2301      	movs	r3, #1
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    1546:	4618      	mov	r0, r3
    1548:	b002      	add	sp, #8
    154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
    154e:	2301      	movs	r3, #1
    1550:	e7f9      	b.n	1546 <boot_validate_slot+0x72>

00001552 <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    1552:	b570      	push	{r4, r5, r6, lr}
    1554:	4605      	mov	r5, r0
    1556:	460e      	mov	r6, r1
    int swap_type;
    int rc;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    1558:	2000      	movs	r0, #0
    155a:	f001 f811 	bl	2580 <boot_swap_type_multi>
    155e:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    1560:	2802      	cmp	r0, #2
    1562:	d005      	beq.n	1570 <boot_validated_swap_type+0x1e>
    1564:	2804      	cmp	r0, #4
    1566:	d003      	beq.n	1570 <boot_validated_swap_type+0x1e>
    1568:	2803      	cmp	r0, #3
    156a:	d001      	beq.n	1570 <boot_validated_swap_type+0x1e>
            swap_type = BOOT_SWAP_TYPE_FAIL;
        }
    }

    return swap_type;
}
    156c:	4620      	mov	r0, r4
    156e:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    1570:	4632      	mov	r2, r6
    1572:	2101      	movs	r1, #1
    1574:	4628      	mov	r0, r5
    1576:	f7ff ffad 	bl	14d4 <boot_validate_slot>
        if (rc == 1) {
    157a:	2801      	cmp	r0, #1
    157c:	d003      	beq.n	1586 <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    157e:	2800      	cmp	r0, #0
    1580:	d0f4      	beq.n	156c <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    1582:	2405      	movs	r4, #5
    return swap_type;
    1584:	e7f2      	b.n	156c <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    1586:	4604      	mov	r4, r0
    1588:	e7f0      	b.n	156c <boot_validated_swap_type+0x1a>

0000158a <boot_read_image_headers>:
{
    158a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    158c:	4605      	mov	r5, r0
    158e:	460f      	mov	r7, r1
    1590:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    1592:	2400      	movs	r4, #0
    1594:	2c01      	cmp	r4, #1
    1596:	dc10      	bgt.n	15ba <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1598:	4633      	mov	r3, r6
    159a:	222c      	movs	r2, #44	; 0x2c
    159c:	fb02 5204 	mla	r2, r2, r4, r5
    15a0:	4621      	mov	r1, r4
    15a2:	4628      	mov	r0, r5
    15a4:	f000 fcdf 	bl	1f66 <boot_read_image_header>
        if (rc != 0) {
    15a8:	4603      	mov	r3, r0
    15aa:	b908      	cbnz	r0, 15b0 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    15ac:	3401      	adds	r4, #1
    15ae:	e7f1      	b.n	1594 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    15b0:	2c00      	cmp	r4, #0
    15b2:	dd03      	ble.n	15bc <boot_read_image_headers+0x32>
    15b4:	b917      	cbnz	r7, 15bc <boot_read_image_headers+0x32>
                return 0;
    15b6:	2300      	movs	r3, #0
    15b8:	e000      	b.n	15bc <boot_read_image_headers+0x32>
    return 0;
    15ba:	2300      	movs	r3, #0
}
    15bc:	4618      	mov	r0, r3
    15be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000015c0 <boot_status_reset>:
    bs->use_scratch = 0;
    15c0:	2300      	movs	r3, #0
    15c2:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    15c4:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    15c6:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    15c8:	2301      	movs	r3, #1
    15ca:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    15cc:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    15ce:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    15d0:	71c3      	strb	r3, [r0, #7]
}
    15d2:	4770      	bx	lr

000015d4 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    15d4:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    15d6:	2b01      	cmp	r3, #1
    15d8:	d001      	beq.n	15de <boot_status_is_reset+0xa>
    15da:	2000      	movs	r0, #0
    15dc:	4770      	bx	lr
    15de:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    15e0:	2b01      	cmp	r3, #1
    15e2:	d001      	beq.n	15e8 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    15e4:	2000      	movs	r0, #0
    15e6:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    15e8:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    15ea:	2b01      	cmp	r3, #1
    15ec:	d001      	beq.n	15f2 <boot_status_is_reset+0x1e>
    15ee:	2000      	movs	r0, #0
    15f0:	4770      	bx	lr
    15f2:	2001      	movs	r0, #1
}
    15f4:	4770      	bx	lr
	...

000015f8 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    15f8:	b530      	push	{r4, r5, lr}
    15fa:	b083      	sub	sp, #12
    15fc:	4605      	mov	r5, r0
    15fe:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    1600:	2300      	movs	r3, #0
    1602:	9300      	str	r3, [sp, #0]
    1604:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    1606:	4608      	mov	r0, r1
    1608:	f7ff ffe4 	bl	15d4 <boot_status_is_reset>
    160c:	2800      	cmp	r0, #0
    160e:	d030      	beq.n	1672 <boot_swap_image+0x7a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    1610:	682a      	ldr	r2, [r5, #0]
    1612:	4b1f      	ldr	r3, [pc, #124]	; (1690 <boot_swap_image+0x98>)
    1614:	429a      	cmp	r2, r3
    1616:	d012      	beq.n	163e <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    1618:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    161a:	4b1d      	ldr	r3, [pc, #116]	; (1690 <boot_swap_image+0x98>)
    161c:	429a      	cmp	r2, r3
    161e:	d01b      	beq.n	1658 <boot_swap_image+0x60>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    1620:	9b01      	ldr	r3, [sp, #4]
    1622:	9a00      	ldr	r2, [sp, #0]
    1624:	4293      	cmp	r3, r2
    1626:	d900      	bls.n	162a <boot_swap_image+0x32>
            copy_size = size;
    1628:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    162a:	9b00      	ldr	r3, [sp, #0]
    162c:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    162e:	9a00      	ldr	r2, [sp, #0]
    1630:	4621      	mov	r1, r4
    1632:	4628      	mov	r0, r5
    1634:	f000 fdcc 	bl	21d0 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    1638:	2000      	movs	r0, #0
    163a:	b003      	add	sp, #12
    163c:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    163e:	466a      	mov	r2, sp
    1640:	2100      	movs	r1, #0
    1642:	4628      	mov	r0, r5
    1644:	f7ff fe72 	bl	132c <boot_read_image_size>
            assert(rc == 0);
    1648:	2800      	cmp	r0, #0
    164a:	d0e5      	beq.n	1618 <boot_swap_image+0x20>
    164c:	2300      	movs	r3, #0
    164e:	461a      	mov	r2, r3
    1650:	4619      	mov	r1, r3
    1652:	4618      	mov	r0, r3
    1654:	f7ff faf0 	bl	c38 <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    1658:	aa01      	add	r2, sp, #4
    165a:	2101      	movs	r1, #1
    165c:	4628      	mov	r0, r5
    165e:	f7ff fe65 	bl	132c <boot_read_image_size>
            assert(rc == 0);
    1662:	2800      	cmp	r0, #0
    1664:	d0dc      	beq.n	1620 <boot_swap_image+0x28>
    1666:	2300      	movs	r3, #0
    1668:	461a      	mov	r2, r3
    166a:	4619      	mov	r1, r3
    166c:	4618      	mov	r0, r3
    166e:	f7ff fae3 	bl	c38 <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    1672:	f104 0108 	add.w	r1, r4, #8
    1676:	2000      	movs	r0, #0
    1678:	f000 ff18 	bl	24ac <boot_read_swap_size>
        assert(rc == 0);
    167c:	b910      	cbnz	r0, 1684 <boot_swap_image+0x8c>
        copy_size = bs->swap_size;
    167e:	68a3      	ldr	r3, [r4, #8]
    1680:	9300      	str	r3, [sp, #0]
    1682:	e7d4      	b.n	162e <boot_swap_image+0x36>
        assert(rc == 0);
    1684:	2300      	movs	r3, #0
    1686:	461a      	mov	r2, r3
    1688:	4619      	mov	r1, r3
    168a:	4618      	mov	r0, r3
    168c:	f7ff fad4 	bl	c38 <__assert_func>
    1690:	96f3b83d 	.word	0x96f3b83d

00001694 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    1694:	b538      	push	{r3, r4, r5, lr}
    1696:	4605      	mov	r5, r0
    1698:	460c      	mov	r4, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    169a:	f7ff ffad 	bl	15f8 <boot_swap_image>
    assert(rc == 0);
    169e:	b9a8      	cbnz	r0, 16cc <boot_complete_partial_swap+0x38>
    16a0:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    16a2:	79e3      	ldrb	r3, [r4, #7]
    16a4:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    16a8:	79e3      	ldrb	r3, [r4, #7]
    16aa:	3b03      	subs	r3, #3
    16ac:	b2db      	uxtb	r3, r3
    16ae:	2b01      	cmp	r3, #1
    16b0:	d912      	bls.n	16d8 <boot_complete_partial_swap+0x44>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    16b2:	79e3      	ldrb	r3, [r4, #7]
    16b4:	2b02      	cmp	r3, #2
    16b6:	d019      	beq.n	16ec <boot_complete_partial_swap+0x58>
    16b8:	2b04      	cmp	r3, #4
    16ba:	d017      	beq.n	16ec <boot_complete_partial_swap+0x58>
    16bc:	2b03      	cmp	r3, #3
    16be:	d015      	beq.n	16ec <boot_complete_partial_swap+0x58>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    16c0:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    16c4:	2bff      	cmp	r3, #255	; 0xff
    16c6:	d01b      	beq.n	1700 <boot_complete_partial_swap+0x6c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    16c8:	4610      	mov	r0, r2
    16ca:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    16cc:	2300      	movs	r3, #0
    16ce:	461a      	mov	r2, r3
    16d0:	4619      	mov	r1, r3
    16d2:	4618      	mov	r0, r3
    16d4:	f7ff fab0 	bl	c38 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    16d8:	2000      	movs	r0, #0
    16da:	f000 fa77 	bl	1bcc <swap_set_image_ok>
        if (rc != 0) {
    16de:	4602      	mov	r2, r0
    16e0:	2800      	cmp	r0, #0
    16e2:	d0e6      	beq.n	16b2 <boot_complete_partial_swap+0x1e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    16e4:	23ff      	movs	r3, #255	; 0xff
    16e6:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    16ea:	e7e2      	b.n	16b2 <boot_complete_partial_swap+0x1e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    16ec:	2000      	movs	r0, #0
    16ee:	f000 fa5e 	bl	1bae <swap_set_copy_done>
        if (rc != 0) {
    16f2:	4602      	mov	r2, r0
    16f4:	2800      	cmp	r0, #0
    16f6:	d0e3      	beq.n	16c0 <boot_complete_partial_swap+0x2c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    16f8:	23ff      	movs	r3, #255	; 0xff
    16fa:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    16fe:	e7df      	b.n	16c0 <boot_complete_partial_swap+0x2c>
        assert(0);
    1700:	2300      	movs	r3, #0
    1702:	461a      	mov	r2, r3
    1704:	4619      	mov	r1, r3
    1706:	4618      	mov	r0, r3
    1708:	f7ff fa96 	bl	c38 <__assert_func>

0000170c <boot_perform_update>:
{
    170c:	b538      	push	{r3, r4, r5, lr}
    170e:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    1710:	f7ff ff72 	bl	15f8 <boot_swap_image>
    assert(rc == 0);
    1714:	b9b0      	cbnz	r0, 1744 <boot_perform_update+0x38>
    1716:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    1718:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    171c:	1ee3      	subs	r3, r4, #3
    171e:	b2db      	uxtb	r3, r3
    1720:	2b01      	cmp	r3, #1
    1722:	d915      	bls.n	1750 <boot_perform_update+0x44>
    if (BOOT_IS_UPGRADE(swap_type)) {
    1724:	2c02      	cmp	r4, #2
    1726:	d003      	beq.n	1730 <boot_perform_update+0x24>
    1728:	2c04      	cmp	r4, #4
    172a:	d001      	beq.n	1730 <boot_perform_update+0x24>
    172c:	2c03      	cmp	r4, #3
    172e:	d107      	bne.n	1740 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    1730:	2000      	movs	r0, #0
    1732:	f000 fa3c 	bl	1bae <swap_set_copy_done>
        if (rc != 0) {
    1736:	4602      	mov	r2, r0
    1738:	b110      	cbz	r0, 1740 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    173a:	23ff      	movs	r3, #255	; 0xff
    173c:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    1740:	4610      	mov	r0, r2
    1742:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    1744:	2300      	movs	r3, #0
    1746:	461a      	mov	r2, r3
    1748:	4619      	mov	r1, r3
    174a:	4618      	mov	r0, r3
    174c:	f7ff fa74 	bl	c38 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    1750:	2000      	movs	r0, #0
    1752:	f000 fa3b 	bl	1bcc <swap_set_image_ok>
        if (rc != 0) {
    1756:	4602      	mov	r2, r0
    1758:	2800      	cmp	r0, #0
    175a:	d0e3      	beq.n	1724 <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    175c:	24ff      	movs	r4, #255	; 0xff
    175e:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    1762:	e7e1      	b.n	1728 <boot_perform_update+0x1c>

00001764 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    1764:	b538      	push	{r3, r4, r5, lr}
    1766:	4604      	mov	r4, r0
    1768:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    176a:	f7ff fe7b 	bl	1464 <boot_read_sectors>
    if (rc != 0) {
    176e:	b118      	cbz	r0, 1778 <boot_prepare_image_for_update+0x14>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
                     " - too small?", BOOT_MAX_IMG_SECTORS);
        /* Unable to determine sector layout, continue with next image
         * if there is one.
         */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1770:	2301      	movs	r3, #1
    1772:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    }
}
    1776:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_read_image_headers(state, false, NULL);
    1778:	2200      	movs	r2, #0
    177a:	4611      	mov	r1, r2
    177c:	4620      	mov	r0, r4
    177e:	f7ff ff04 	bl	158a <boot_read_image_headers>
    if (rc != 0) {
    1782:	b118      	cbz	r0, 178c <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1784:	2301      	movs	r3, #1
    1786:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    178a:	e7f4      	b.n	1776 <boot_prepare_image_for_update+0x12>
    if (boot_slots_compatible(state)) {
    178c:	4620      	mov	r0, r4
    178e:	f000 fc6a 	bl	2066 <boot_slots_compatible>
    1792:	b918      	cbnz	r0, 179c <boot_prepare_image_for_update+0x38>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1794:	2301      	movs	r3, #1
    1796:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    179a:	e7ec      	b.n	1776 <boot_prepare_image_for_update+0x12>
        boot_status_reset(bs);
    179c:	4628      	mov	r0, r5
    179e:	f7ff ff0f 	bl	15c0 <boot_status_reset>
        rc = swap_read_status(state, bs);
    17a2:	4629      	mov	r1, r5
    17a4:	4620      	mov	r0, r4
    17a6:	f000 f9c4 	bl	1b32 <swap_read_status>
        if (rc != 0) {
    17aa:	b980      	cbnz	r0, 17ce <boot_prepare_image_for_update+0x6a>
        if (!boot_status_is_reset(bs)) {
    17ac:	4628      	mov	r0, r5
    17ae:	f7ff ff11 	bl	15d4 <boot_status_is_reset>
    17b2:	b180      	cbz	r0, 17d6 <boot_prepare_image_for_update+0x72>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    17b4:	79eb      	ldrb	r3, [r5, #7]
    17b6:	2b01      	cmp	r3, #1
    17b8:	d028      	beq.n	180c <boot_prepare_image_for_update+0xa8>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    17ba:	462a      	mov	r2, r5
    17bc:	2101      	movs	r1, #1
    17be:	4620      	mov	r0, r4
    17c0:	f7ff fe88 	bl	14d4 <boot_validate_slot>
    17c4:	b348      	cbz	r0, 181a <boot_prepare_image_for_update+0xb6>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    17c6:	2305      	movs	r3, #5
    17c8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    17cc:	e7d3      	b.n	1776 <boot_prepare_image_for_update+0x12>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    17ce:	2301      	movs	r3, #1
    17d0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    17d4:	e7cf      	b.n	1776 <boot_prepare_image_for_update+0x12>
            rc = boot_complete_partial_swap(state, bs);
    17d6:	4629      	mov	r1, r5
    17d8:	4620      	mov	r0, r4
    17da:	f7ff ff5b 	bl	1694 <boot_complete_partial_swap>
            assert(rc == 0);
    17de:	b948      	cbnz	r0, 17f4 <boot_prepare_image_for_update+0x90>
            rc = boot_read_image_headers(state, false, bs);
    17e0:	462a      	mov	r2, r5
    17e2:	2100      	movs	r1, #0
    17e4:	4620      	mov	r0, r4
    17e6:	f7ff fed0 	bl	158a <boot_read_image_headers>
            assert(rc == 0);
    17ea:	b948      	cbnz	r0, 1800 <boot_prepare_image_for_update+0x9c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    17ec:	2301      	movs	r3, #1
    17ee:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    17f2:	e7c0      	b.n	1776 <boot_prepare_image_for_update+0x12>
            assert(rc == 0);
    17f4:	2300      	movs	r3, #0
    17f6:	461a      	mov	r2, r3
    17f8:	4619      	mov	r1, r3
    17fa:	4618      	mov	r0, r3
    17fc:	f7ff fa1c 	bl	c38 <__assert_func>
            assert(rc == 0);
    1800:	2300      	movs	r3, #0
    1802:	461a      	mov	r2, r3
    1804:	4619      	mov	r1, r3
    1806:	4618      	mov	r0, r3
    1808:	f7ff fa16 	bl	c38 <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    180c:	4629      	mov	r1, r5
    180e:	4620      	mov	r0, r4
    1810:	f7ff fe9f 	bl	1552 <boot_validated_swap_type>
    1814:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    1818:	e7ad      	b.n	1776 <boot_prepare_image_for_update+0x12>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    181a:	79eb      	ldrb	r3, [r5, #7]
    181c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1820:	e7a9      	b.n	1776 <boot_prepare_image_for_update+0x12>

00001822 <boot_write_status>:
{
    1822:	b570      	push	{r4, r5, r6, lr}
    1824:	b084      	sub	sp, #16
    1826:	4606      	mov	r6, r0
    1828:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    182a:	798b      	ldrb	r3, [r1, #6]
    182c:	b143      	cbz	r3, 1840 <boot_write_status+0x1e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    182e:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    1830:	a903      	add	r1, sp, #12
    1832:	f7ff fb27 	bl	e84 <flash_area_open>
    if (rc != 0) {
    1836:	b128      	cbz	r0, 1844 <boot_write_status+0x22>
        rc = BOOT_EFLASH;
    1838:	2301      	movs	r3, #1
}
    183a:	4618      	mov	r0, r3
    183c:	b004      	add	sp, #16
    183e:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    1840:	2001      	movs	r0, #1
    1842:	e7f5      	b.n	1830 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    1844:	9803      	ldr	r0, [sp, #12]
    1846:	f000 fdad 	bl	23a4 <boot_status_off>
    184a:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    184c:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    184e:	4620      	mov	r0, r4
    1850:	f000 fbfc 	bl	204c <boot_status_internal_off>
    off = boot_status_off(fap) +
    1854:	4405      	add	r5, r0
    align = flash_area_align(fap);
    1856:	9803      	ldr	r0, [sp, #12]
    1858:	f7ff fbab 	bl	fb2 <flash_area_align>
    185c:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    185e:	9803      	ldr	r0, [sp, #12]
    1860:	f7ff fbac 	bl	fbc <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    1864:	2208      	movs	r2, #8
    1866:	b2c1      	uxtb	r1, r0
    1868:	a801      	add	r0, sp, #4
    186a:	f7ff fab2 	bl	dd2 <memset>
    buf[0] = bs->state;
    186e:	7923      	ldrb	r3, [r4, #4]
    1870:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    1874:	4633      	mov	r3, r6
    1876:	aa01      	add	r2, sp, #4
    1878:	4629      	mov	r1, r5
    187a:	9803      	ldr	r0, [sp, #12]
    187c:	f7ff fb73 	bl	f66 <flash_area_write>
    if (rc != 0) {
    1880:	4603      	mov	r3, r0
    1882:	2800      	cmp	r0, #0
    1884:	d0d9      	beq.n	183a <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    1886:	2301      	movs	r3, #1
    1888:	e7d7      	b.n	183a <boot_write_status+0x18>

0000188a <boot_erase_region>:
{
    188a:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    188c:	f7ff fb7e 	bl	f8c <flash_area_erase>
}
    1890:	bd08      	pop	{r3, pc}
	...

00001894 <boot_copy_region>:
{
    1894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1898:	4688      	mov	r8, r1
    189a:	4692      	mov	sl, r2
    189c:	461f      	mov	r7, r3
    189e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    18a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    18a4:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    18a6:	e00f      	b.n	18c8 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    18a8:	4623      	mov	r3, r4
    18aa:	4a0f      	ldr	r2, [pc, #60]	; (18e8 <boot_copy_region+0x54>)
    18ac:	19e9      	adds	r1, r5, r7
    18ae:	4640      	mov	r0, r8
    18b0:	f7ff fb46 	bl	f40 <flash_area_read>
        if (rc != 0) {
    18b4:	b9a0      	cbnz	r0, 18e0 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    18b6:	4623      	mov	r3, r4
    18b8:	4a0b      	ldr	r2, [pc, #44]	; (18e8 <boot_copy_region+0x54>)
    18ba:	eb05 0109 	add.w	r1, r5, r9
    18be:	4650      	mov	r0, sl
    18c0:	f7ff fb51 	bl	f66 <flash_area_write>
        if (rc != 0) {
    18c4:	b970      	cbnz	r0, 18e4 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    18c6:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    18c8:	42b5      	cmp	r5, r6
    18ca:	d206      	bcs.n	18da <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    18cc:	1b74      	subs	r4, r6, r5
    18ce:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    18d2:	d9e9      	bls.n	18a8 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    18d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    18d8:	e7e6      	b.n	18a8 <boot_copy_region+0x14>
    return 0;
    18da:	2000      	movs	r0, #0
}
    18dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    18e0:	2001      	movs	r0, #1
    18e2:	e7fb      	b.n	18dc <boot_copy_region+0x48>
            return BOOT_EFLASH;
    18e4:	2001      	movs	r0, #1
    18e6:	e7f9      	b.n	18dc <boot_copy_region+0x48>
    18e8:	200001fc 	.word	0x200001fc

000018ec <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    18ec:	b570      	push	{r4, r5, r6, lr}
    18ee:	b084      	sub	sp, #16
    18f0:	4604      	mov	r4, r0
    18f2:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    18f4:	226c      	movs	r2, #108	; 0x6c
    18f6:	2100      	movs	r1, #0
    18f8:	f7ff fa6b 	bl	dd2 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    18fc:	4b41      	ldr	r3, [pc, #260]	; (1a04 <context_boot_go+0x118>)
    18fe:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    1900:	4b41      	ldr	r3, [pc, #260]	; (1a08 <context_boot_go+0x11c>)
    1902:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    1904:	4b41      	ldr	r3, [pc, #260]	; (1a0c <context_boot_go+0x120>)
    1906:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1908:	2500      	movs	r5, #0
    190a:	2d01      	cmp	r5, #1
    190c:	d814      	bhi.n	1938 <context_boot_go+0x4c>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    190e:	4629      	mov	r1, r5
    1910:	2000      	movs	r0, #0
    1912:	f000 ffde 	bl	28d2 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    1916:	212c      	movs	r1, #44	; 0x2c
    1918:	fb01 f105 	mul.w	r1, r1, r5
    191c:	3120      	adds	r1, #32
    191e:	4421      	add	r1, r4
    1920:	b2c0      	uxtb	r0, r0
    1922:	f7ff faaf 	bl	e84 <flash_area_open>
            assert(rc == 0);
    1926:	b908      	cbnz	r0, 192c <context_boot_go+0x40>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1928:	3501      	adds	r5, #1
    192a:	e7ee      	b.n	190a <context_boot_go+0x1e>
            assert(rc == 0);
    192c:	2300      	movs	r3, #0
    192e:	461a      	mov	r2, r3
    1930:	4619      	mov	r1, r3
    1932:	4618      	mov	r0, r3
    1934:	f7ff f980 	bl	c38 <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    1938:	f104 0158 	add.w	r1, r4, #88	; 0x58
    193c:	2003      	movs	r0, #3
    193e:	f7ff faa1 	bl	e84 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    1942:	4605      	mov	r5, r0
    1944:	b978      	cbnz	r0, 1966 <context_boot_go+0x7a>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    1946:	4669      	mov	r1, sp
    1948:	4620      	mov	r0, r4
    194a:	f7ff ff0b 	bl	1764 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    194e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    1952:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    1956:	3b01      	subs	r3, #1
    1958:	2b04      	cmp	r3, #4
    195a:	d82d      	bhi.n	19b8 <context_boot_go+0xcc>
    195c:	e8df f003 	tbb	[pc, r3]
    1960:	0909090f 	.word	0x0909090f
    1964:	22          	.byte	0x22
    1965:	00          	.byte	0x00
        assert(rc == 0);
    1966:	2300      	movs	r3, #0
    1968:	461a      	mov	r2, r3
    196a:	4619      	mov	r1, r3
    196c:	4618      	mov	r0, r3
    196e:	f7ff f963 	bl	c38 <__assert_func>
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    1972:	4669      	mov	r1, sp
    1974:	4620      	mov	r0, r4
    1976:	f7ff fec9 	bl	170c <boot_perform_update>
            assert(rc == 0);
    197a:	4605      	mov	r5, r0
    197c:	b960      	cbnz	r0, 1998 <context_boot_go+0xac>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    197e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1982:	2bff      	cmp	r3, #255	; 0xff
    1984:	d01c      	beq.n	19c0 <context_boot_go+0xd4>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    1986:	2b01      	cmp	r3, #1
    1988:	d120      	bne.n	19cc <context_boot_go+0xe0>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    198a:	6822      	ldr	r2, [r4, #0]
    198c:	4b20      	ldr	r3, [pc, #128]	; (1a10 <context_boot_go+0x124>)
    198e:	429a      	cmp	r2, r3
    1990:	d025      	beq.n	19de <context_boot_go+0xf2>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    1992:	2503      	movs	r5, #3
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1994:	2300      	movs	r3, #0
    1996:	e030      	b.n	19fa <context_boot_go+0x10e>
            assert(rc == 0);
    1998:	2300      	movs	r3, #0
    199a:	461a      	mov	r2, r3
    199c:	4619      	mov	r1, r3
    199e:	4618      	mov	r0, r3
    19a0:	f7ff f94a 	bl	c38 <__assert_func>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    19a4:	2000      	movs	r0, #0
    19a6:	f000 f911 	bl	1bcc <swap_set_image_ok>
            if (rc != 0) {
    19aa:	4605      	mov	r5, r0
    19ac:	2800      	cmp	r0, #0
    19ae:	d0e6      	beq.n	197e <context_boot_go+0x92>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    19b0:	23ff      	movs	r3, #255	; 0xff
    19b2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    19b6:	e7e2      	b.n	197e <context_boot_go+0x92>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    19b8:	23ff      	movs	r3, #255	; 0xff
    19ba:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    19be:	e7de      	b.n	197e <context_boot_go+0x92>
            assert(0);
    19c0:	2300      	movs	r3, #0
    19c2:	461a      	mov	r2, r3
    19c4:	4619      	mov	r1, r3
    19c6:	4618      	mov	r0, r3
    19c8:	f7ff f936 	bl	c38 <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    19cc:	466a      	mov	r2, sp
    19ce:	2100      	movs	r1, #0
    19d0:	4620      	mov	r0, r4
    19d2:	f7ff fdda 	bl	158a <boot_read_image_headers>
            if (rc != 0) {
    19d6:	4605      	mov	r5, r0
    19d8:	2800      	cmp	r0, #0
    19da:	d1db      	bne.n	1994 <context_boot_go+0xa8>
    19dc:	e7d5      	b.n	198a <context_boot_go+0x9e>
    memset(&bs, 0, sizeof(struct boot_status));
    19de:	2300      	movs	r3, #0
    19e0:	9300      	str	r3, [sp, #0]
    19e2:	9301      	str	r3, [sp, #4]
    19e4:	9302      	str	r3, [sp, #8]
    19e6:	9303      	str	r3, [sp, #12]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    19e8:	6a23      	ldr	r3, [r4, #32]
    19ea:	785b      	ldrb	r3, [r3, #1]
    19ec:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    19ee:	6a23      	ldr	r3, [r4, #32]
    19f0:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    19f2:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    19f4:	6034      	str	r4, [r6, #0]
    19f6:	e7cd      	b.n	1994 <context_boot_go+0xa8>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    19f8:	3301      	adds	r3, #1
    19fa:	2b01      	cmp	r3, #1
    19fc:	d9fc      	bls.n	19f8 <context_boot_go+0x10c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    19fe:	4628      	mov	r0, r5
    1a00:	b004      	add	sp, #16
    1a02:	bd70      	pop	{r4, r5, r6, pc}
    1a04:	200005fc 	.word	0x200005fc
    1a08:	200011fc 	.word	0x200011fc
    1a0c:	20000bfc 	.word	0x20000bfc
    1a10:	96f3b83d 	.word	0x96f3b83d

00001a14 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    1a14:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    1a16:	4601      	mov	r1, r0
    1a18:	4801      	ldr	r0, [pc, #4]	; (1a20 <boot_go+0xc>)
    1a1a:	f7ff ff67 	bl	18ec <context_boot_go>
}
    1a1e:	bd08      	pop	{r3, pc}
    1a20:	20000190 	.word	0x20000190

00001a24 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    1a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a28:	4606      	mov	r6, r0
    1a2a:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    1a2c:	2100      	movs	r1, #0
    1a2e:	4608      	mov	r0, r1
    1a30:	f000 ff4f 	bl	28d2 <flash_area_id_from_multi_image_slot>
    1a34:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    1a36:	2101      	movs	r1, #1
    1a38:	2000      	movs	r0, #0
    1a3a:	f000 ff4a 	bl	28d2 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    1a3e:	783b      	ldrb	r3, [r7, #0]
    1a40:	42a3      	cmp	r3, r4
    1a42:	d029      	beq.n	1a98 <swap_erase_trailer_sectors+0x74>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    1a44:	4283      	cmp	r3, r0
    1a46:	d001      	beq.n	1a4c <swap_erase_trailer_sectors+0x28>
        slot = BOOT_SECONDARY_SLOT;
    } else {
        return BOOT_EFLASH;
    1a48:	2301      	movs	r3, #1
    1a4a:	e022      	b.n	1a92 <swap_erase_trailer_sectors+0x6e>
        slot = BOOT_SECONDARY_SLOT;
    1a4c:	2301      	movs	r3, #1
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    1a4e:	4698      	mov	r8, r3
    return BOOT_IMG(state, slot).num_sectors;
    1a50:	222c      	movs	r2, #44	; 0x2c
    1a52:	fb02 6303 	mla	r3, r2, r3, r6
    1a56:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1a58:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1a5a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    1a5c:	f000 fc8e 	bl	237c <boot_trailer_sz>
    1a60:	4681      	mov	r9, r0
    total_sz = 0;
    1a62:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    1a64:	232c      	movs	r3, #44	; 0x2c
    1a66:	fb03 6308 	mla	r3, r3, r8, r6
    1a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a6c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1a70:	008b      	lsls	r3, r1, #2
    1a72:	4413      	add	r3, r2
    1a74:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1a78:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1a7a:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    1a7c:	4652      	mov	r2, sl
    1a7e:	1ac9      	subs	r1, r1, r3
    1a80:	4638      	mov	r0, r7
    1a82:	f7ff ff02 	bl	188a <boot_erase_region>
        assert(rc == 0);
    1a86:	4603      	mov	r3, r0
    1a88:	b940      	cbnz	r0, 1a9c <swap_erase_trailer_sectors+0x78>

        sector--;
    1a8a:	3c01      	subs	r4, #1
        total_sz += sz;
    1a8c:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    1a8e:	45a9      	cmp	r9, r5
    1a90:	d8e8      	bhi.n	1a64 <swap_erase_trailer_sectors+0x40>

    return rc;
}
    1a92:	4618      	mov	r0, r3
    1a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    1a98:	2300      	movs	r3, #0
    1a9a:	e7d8      	b.n	1a4e <swap_erase_trailer_sectors+0x2a>
        assert(rc == 0);
    1a9c:	2300      	movs	r3, #0
    1a9e:	461a      	mov	r2, r3
    1aa0:	4619      	mov	r1, r3
    1aa2:	4618      	mov	r0, r3
    1aa4:	f7ff f8c8 	bl	c38 <__assert_func>

00001aa8 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    1aa8:	b530      	push	{r4, r5, lr}
    1aaa:	b083      	sub	sp, #12
    1aac:	460c      	mov	r4, r1
    1aae:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1ab0:	4669      	mov	r1, sp
    1ab2:	2002      	movs	r0, #2
    1ab4:	f000 fcea 	bl	248c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    1ab8:	b990      	cbnz	r0, 1ae0 <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    1aba:	79e9      	ldrb	r1, [r5, #7]
    1abc:	2901      	cmp	r1, #1
    1abe:	d115      	bne.n	1aec <swap_status_init+0x44>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    1ac0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ac4:	2b01      	cmp	r3, #1
    1ac6:	d01d      	beq.n	1b04 <swap_status_init+0x5c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    1ac8:	68a9      	ldr	r1, [r5, #8]
    1aca:	4620      	mov	r0, r4
    1acc:	f000 fd46 	bl	255c <boot_write_swap_size>
    assert(rc == 0);
    1ad0:	bb18      	cbnz	r0, 1b1a <swap_status_init+0x72>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    1ad2:	4620      	mov	r0, r4
    1ad4:	f000 fd02 	bl	24dc <boot_write_magic>
    assert(rc == 0);
    1ad8:	bb28      	cbnz	r0, 1b26 <swap_status_init+0x7e>

    return 0;
}
    1ada:	2000      	movs	r0, #0
    1adc:	b003      	add	sp, #12
    1ade:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    1ae0:	2300      	movs	r3, #0
    1ae2:	461a      	mov	r2, r3
    1ae4:	4619      	mov	r1, r3
    1ae6:	4618      	mov	r0, r3
    1ae8:	f7ff f8a6 	bl	c38 <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    1aec:	2200      	movs	r2, #0
    1aee:	4620      	mov	r0, r4
    1af0:	f000 fd12 	bl	2518 <boot_write_swap_info>
        assert(rc == 0);
    1af4:	2800      	cmp	r0, #0
    1af6:	d0e3      	beq.n	1ac0 <swap_status_init+0x18>
    1af8:	2300      	movs	r3, #0
    1afa:	461a      	mov	r2, r3
    1afc:	4619      	mov	r1, r3
    1afe:	4618      	mov	r0, r3
    1b00:	f7ff f89a 	bl	c38 <__assert_func>
        rc = boot_write_image_ok(fap);
    1b04:	4620      	mov	r0, r4
    1b06:	f000 fd00 	bl	250a <boot_write_image_ok>
        assert(rc == 0);
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d0dc      	beq.n	1ac8 <swap_status_init+0x20>
    1b0e:	2300      	movs	r3, #0
    1b10:	461a      	mov	r2, r3
    1b12:	4619      	mov	r1, r3
    1b14:	4618      	mov	r0, r3
    1b16:	f7ff f88f 	bl	c38 <__assert_func>
    assert(rc == 0);
    1b1a:	2300      	movs	r3, #0
    1b1c:	461a      	mov	r2, r3
    1b1e:	4619      	mov	r1, r3
    1b20:	4618      	mov	r0, r3
    1b22:	f7ff f889 	bl	c38 <__assert_func>
    assert(rc == 0);
    1b26:	2300      	movs	r3, #0
    1b28:	461a      	mov	r2, r3
    1b2a:	4619      	mov	r1, r3
    1b2c:	4618      	mov	r0, r3
    1b2e:	f7ff f883 	bl	c38 <__assert_func>

00001b32 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    1b32:	b570      	push	{r4, r5, r6, lr}
    1b34:	b082      	sub	sp, #8
    1b36:	4606      	mov	r6, r0
    1b38:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    1b3a:	f000 fb05 	bl	2148 <swap_status_source>
    1b3e:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    1b40:	2801      	cmp	r0, #1
    1b42:	d009      	beq.n	1b58 <swap_read_status+0x26>
    1b44:	4604      	mov	r4, r0
    1b46:	2802      	cmp	r0, #2
    1b48:	d00f      	beq.n	1b6a <swap_read_status+0x38>
    1b4a:	b158      	cbz	r0, 1b64 <swap_read_status+0x32>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    1b4c:	2300      	movs	r3, #0
    1b4e:	461a      	mov	r2, r3
    1b50:	4619      	mov	r1, r3
    1b52:	4618      	mov	r0, r3
    1b54:	f7ff f870 	bl	c38 <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    1b58:	2003      	movs	r0, #3
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    1b5a:	a901      	add	r1, sp, #4
    1b5c:	f7ff f992 	bl	e84 <flash_area_open>
    if (rc != 0) {
    1b60:	b128      	cbz	r0, 1b6e <swap_read_status+0x3c>
        return BOOT_EFLASH;
    1b62:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    1b64:	4620      	mov	r0, r4
    1b66:	b002      	add	sp, #8
    1b68:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    1b6a:	2001      	movs	r0, #1
    1b6c:	e7f5      	b.n	1b5a <swap_read_status+0x28>
    rc = swap_read_status_bytes(fap, state, bs);
    1b6e:	462a      	mov	r2, r5
    1b70:	4631      	mov	r1, r6
    1b72:	9801      	ldr	r0, [sp, #4]
    1b74:	f000 fa12 	bl	1f9c <swap_read_status_bytes>
    if (rc == 0) {
    1b78:	4604      	mov	r4, r0
    1b7a:	2800      	cmp	r0, #0
    1b7c:	d1f2      	bne.n	1b64 <swap_read_status+0x32>
        off = boot_swap_info_off(fap);
    1b7e:	9801      	ldr	r0, [sp, #4]
    1b80:	f000 fc21 	bl	23c6 <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    1b84:	2301      	movs	r3, #1
    1b86:	f10d 0203 	add.w	r2, sp, #3
    1b8a:	4601      	mov	r1, r0
    1b8c:	9801      	ldr	r0, [sp, #4]
    1b8e:	f7ff fa1a 	bl	fc6 <flash_area_read_is_empty>
        if (rc == 1) {
    1b92:	2801      	cmp	r0, #1
    1b94:	d006      	beq.n	1ba4 <swap_read_status+0x72>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    1b96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b9a:	f003 030f 	and.w	r3, r3, #15
    1b9e:	71eb      	strb	r3, [r5, #7]
    1ba0:	4604      	mov	r4, r0
    1ba2:	e7df      	b.n	1b64 <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    1ba4:	2301      	movs	r3, #1
    1ba6:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    1baa:	4620      	mov	r0, r4
    1bac:	e7f3      	b.n	1b96 <swap_read_status+0x64>

00001bae <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    1bae:	b500      	push	{lr}
    1bb0:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1bb2:	a901      	add	r1, sp, #4
    1bb4:	2001      	movs	r0, #1
    1bb6:	f7ff f965 	bl	e84 <flash_area_open>
            &fap);
    if (rc != 0) {
    1bba:	b118      	cbz	r0, 1bc4 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    1bbc:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    1bbe:	b003      	add	sp, #12
    1bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    1bc4:	9801      	ldr	r0, [sp, #4]
    1bc6:	f000 fc99 	bl	24fc <boot_write_copy_done>
    return rc;
    1bca:	e7f8      	b.n	1bbe <swap_set_copy_done+0x10>

00001bcc <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    1bcc:	b500      	push	{lr}
    1bce:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1bd0:	a903      	add	r1, sp, #12
    1bd2:	2001      	movs	r0, #1
    1bd4:	f7ff f956 	bl	e84 <flash_area_open>
            &fap);
    if (rc != 0) {
    1bd8:	b120      	cbz	r0, 1be4 <swap_set_image_ok+0x18>
        return BOOT_EFLASH;
    1bda:	2301      	movs	r3, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    1bdc:	4618      	mov	r0, r3
    1bde:	b005      	add	sp, #20
    1be0:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    1be4:	a901      	add	r1, sp, #4
    1be6:	9803      	ldr	r0, [sp, #12]
    1be8:	f000 fbf0 	bl	23cc <boot_read_swap_state>
    if (rc != 0) {
    1bec:	4603      	mov	r3, r0
    1bee:	b940      	cbnz	r0, 1c02 <swap_set_image_ok+0x36>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    1bf0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1bf4:	2a03      	cmp	r2, #3
    1bf6:	d1f1      	bne.n	1bdc <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    1bf8:	9803      	ldr	r0, [sp, #12]
    1bfa:	f000 fc86 	bl	250a <boot_write_image_ok>
    1bfe:	4603      	mov	r3, r0
    1c00:	e7ec      	b.n	1bdc <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    1c02:	2301      	movs	r3, #1
    1c04:	e7ea      	b.n	1bdc <swap_set_image_ok+0x10>

00001c06 <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    1c06:	b4f0      	push	{r4, r5, r6, r7}
    1c08:	4606      	mov	r6, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    1c0a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1c0c:	689f      	ldr	r7, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    1c0e:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    1c10:	2900      	cmp	r1, #0
    1c12:	db0b      	blt.n	1c2c <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    1c14:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1c16:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    1c1a:	00ac      	lsls	r4, r5, #2
    1c1c:	4423      	add	r3, r4
    1c1e:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    1c20:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    1c22:	429f      	cmp	r7, r3
    1c24:	d302      	bcc.n	1c2c <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    1c26:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    1c28:	4618      	mov	r0, r3
    1c2a:	e7f1      	b.n	1c10 <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    1c2c:	3101      	adds	r1, #1
    1c2e:	6011      	str	r1, [r2, #0]
    return sz;
}
    1c30:	bcf0      	pop	{r4, r5, r6, r7}
    1c32:	4770      	bx	lr

00001c34 <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    1c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c38:	b088      	sub	sp, #32
    1c3a:	460f      	mov	r7, r1
    1c3c:	4615      	mov	r5, r2
    1c3e:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1c42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1c46:	0083      	lsls	r3, r0, #2
    1c48:	4413      	add	r3, r2
    1c4a:	685e      	ldr	r6, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1c4c:	6853      	ldr	r3, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1c4e:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1c50:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    1c52:	f000 fb93 	bl	237c <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    1c56:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1c58:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    1c5a:	eb07 0c06 	add.w	ip, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1c5e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1c60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1c64:	009a      	lsls	r2, r3, #2
    1c66:	440a      	add	r2, r1
    1c68:	6853      	ldr	r3, [r2, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1c6a:	684a      	ldr	r2, [r1, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1c6c:	1a9b      	subs	r3, r3, r2
    1c6e:	459c      	cmp	ip, r3
    1c70:	d923      	bls.n	1cba <boot_swap_sectors+0x86>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    1c72:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1c76:	6823      	ldr	r3, [r4, #0]
    1c78:	2b01      	cmp	r3, #1
    1c7a:	d020      	beq.n	1cbe <boot_swap_sectors+0x8a>
    1c7c:	2300      	movs	r3, #0
    1c7e:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1c80:	a907      	add	r1, sp, #28
    1c82:	2001      	movs	r0, #1
    1c84:	f7ff f8fe 	bl	e84 <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    1c88:	b9f8      	cbnz	r0, 1cca <boot_swap_sectors+0x96>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1c8a:	a906      	add	r1, sp, #24
    1c8c:	2002      	movs	r0, #2
    1c8e:	f7ff f8f9 	bl	e84 <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    1c92:	bb00      	cbnz	r0, 1cd6 <boot_swap_sectors+0xa2>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    1c94:	a905      	add	r1, sp, #20
    1c96:	2003      	movs	r0, #3
    1c98:	f7ff f8f4 	bl	e84 <flash_area_open>
    assert (rc == 0);
    1c9c:	bb08      	cbnz	r0, 1ce2 <boot_swap_sectors+0xae>

    if (bs->state == BOOT_STATUS_STATE_0) {
    1c9e:	7923      	ldrb	r3, [r4, #4]
    1ca0:	2b01      	cmp	r3, #1
    1ca2:	d024      	beq.n	1cee <boot_swap_sectors+0xba>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    1ca4:	7923      	ldrb	r3, [r4, #4]
    1ca6:	2b02      	cmp	r3, #2
    1ca8:	f000 8083 	beq.w	1db2 <boot_swap_sectors+0x17e>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    1cac:	7923      	ldrb	r3, [r4, #4]
    1cae:	2b03      	cmp	r3, #3
    1cb0:	f000 80bb 	beq.w	1e2a <boot_swap_sectors+0x1f6>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    1cb4:	b008      	add	sp, #32
    1cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    1cba:	46b8      	mov	r8, r7
    1cbc:	e7db      	b.n	1c76 <boot_swap_sectors+0x42>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1cbe:	45b8      	cmp	r8, r7
    1cc0:	d001      	beq.n	1cc6 <boot_swap_sectors+0x92>
    1cc2:	2301      	movs	r3, #1
    1cc4:	e7db      	b.n	1c7e <boot_swap_sectors+0x4a>
    1cc6:	2300      	movs	r3, #0
    1cc8:	e7d9      	b.n	1c7e <boot_swap_sectors+0x4a>
    assert (rc == 0);
    1cca:	2300      	movs	r3, #0
    1ccc:	461a      	mov	r2, r3
    1cce:	4619      	mov	r1, r3
    1cd0:	4618      	mov	r0, r3
    1cd2:	f7fe ffb1 	bl	c38 <__assert_func>
    assert (rc == 0);
    1cd6:	2300      	movs	r3, #0
    1cd8:	461a      	mov	r2, r3
    1cda:	4619      	mov	r1, r3
    1cdc:	4618      	mov	r0, r3
    1cde:	f7fe ffab 	bl	c38 <__assert_func>
    assert (rc == 0);
    1ce2:	2300      	movs	r3, #0
    1ce4:	461a      	mov	r2, r3
    1ce6:	4619      	mov	r1, r3
    1ce8:	4618      	mov	r0, r3
    1cea:	f7fe ffa5 	bl	c38 <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    1cee:	9805      	ldr	r0, [sp, #20]
    1cf0:	6882      	ldr	r2, [r0, #8]
    1cf2:	2100      	movs	r1, #0
    1cf4:	f7ff fdc9 	bl	188a <boot_erase_region>
        assert(rc == 0);
    1cf8:	b9e0      	cbnz	r0, 1d34 <boot_swap_sectors+0x100>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    1cfa:	6823      	ldr	r3, [r4, #0]
    1cfc:	2b01      	cmp	r3, #1
    1cfe:	d01f      	beq.n	1d40 <boot_swap_sectors+0x10c>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    1d00:	f8cd 8004 	str.w	r8, [sp, #4]
    1d04:	2300      	movs	r3, #0
    1d06:	9300      	str	r3, [sp, #0]
    1d08:	4633      	mov	r3, r6
    1d0a:	9a05      	ldr	r2, [sp, #20]
    1d0c:	9906      	ldr	r1, [sp, #24]
    1d0e:	4628      	mov	r0, r5
    1d10:	f7ff fdc0 	bl	1894 <boot_copy_region>
        assert(rc == 0);
    1d14:	2800      	cmp	r0, #0
    1d16:	d146      	bne.n	1da6 <boot_swap_sectors+0x172>
        rc = boot_write_status(state, bs);
    1d18:	4621      	mov	r1, r4
    1d1a:	4628      	mov	r0, r5
    1d1c:	f7ff fd81 	bl	1822 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1d20:	2302      	movs	r3, #2
    1d22:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1d24:	2800      	cmp	r0, #0
    1d26:	d0bd      	beq.n	1ca4 <boot_swap_sectors+0x70>
    1d28:	2300      	movs	r3, #0
    1d2a:	461a      	mov	r2, r3
    1d2c:	4619      	mov	r1, r3
    1d2e:	4618      	mov	r0, r3
    1d30:	f7fe ff82 	bl	c38 <__assert_func>
        assert(rc == 0);
    1d34:	2300      	movs	r3, #0
    1d36:	461a      	mov	r2, r3
    1d38:	4619      	mov	r1, r3
    1d3a:	4618      	mov	r0, r3
    1d3c:	f7fe ff7c 	bl	c38 <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    1d40:	4622      	mov	r2, r4
    1d42:	9905      	ldr	r1, [sp, #20]
    1d44:	4628      	mov	r0, r5
    1d46:	f7ff feaf 	bl	1aa8 <swap_status_init>
            assert(rc == 0);
    1d4a:	b9d0      	cbnz	r0, 1d82 <boot_swap_sectors+0x14e>
            if (!bs->use_scratch) {
    1d4c:	79a3      	ldrb	r3, [r4, #6]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d1d6      	bne.n	1d00 <boot_swap_sectors+0xcc>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    1d52:	9907      	ldr	r1, [sp, #28]
    1d54:	4628      	mov	r0, r5
    1d56:	f7ff fe65 	bl	1a24 <swap_erase_trailer_sectors>
                assert(rc == 0);
    1d5a:	b9c0      	cbnz	r0, 1d8e <boot_swap_sectors+0x15a>
                rc = swap_status_init(state, fap_primary_slot, bs);
    1d5c:	4622      	mov	r2, r4
    1d5e:	9907      	ldr	r1, [sp, #28]
    1d60:	4628      	mov	r0, r5
    1d62:	f7ff fea1 	bl	1aa8 <swap_status_init>
                assert(rc == 0);
    1d66:	b9c0      	cbnz	r0, 1d9a <boot_swap_sectors+0x166>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    1d68:	9805      	ldr	r0, [sp, #20]
    1d6a:	6882      	ldr	r2, [r0, #8]
    1d6c:	2100      	movs	r1, #0
    1d6e:	f7ff fd8c 	bl	188a <boot_erase_region>
                assert(rc == 0);
    1d72:	2800      	cmp	r0, #0
    1d74:	d0c4      	beq.n	1d00 <boot_swap_sectors+0xcc>
    1d76:	2300      	movs	r3, #0
    1d78:	461a      	mov	r2, r3
    1d7a:	4619      	mov	r1, r3
    1d7c:	4618      	mov	r0, r3
    1d7e:	f7fe ff5b 	bl	c38 <__assert_func>
            assert(rc == 0);
    1d82:	2300      	movs	r3, #0
    1d84:	461a      	mov	r2, r3
    1d86:	4619      	mov	r1, r3
    1d88:	4618      	mov	r0, r3
    1d8a:	f7fe ff55 	bl	c38 <__assert_func>
                assert(rc == 0);
    1d8e:	2300      	movs	r3, #0
    1d90:	461a      	mov	r2, r3
    1d92:	4619      	mov	r1, r3
    1d94:	4618      	mov	r0, r3
    1d96:	f7fe ff4f 	bl	c38 <__assert_func>
                assert(rc == 0);
    1d9a:	2300      	movs	r3, #0
    1d9c:	461a      	mov	r2, r3
    1d9e:	4619      	mov	r1, r3
    1da0:	4618      	mov	r0, r3
    1da2:	f7fe ff49 	bl	c38 <__assert_func>
        assert(rc == 0);
    1da6:	2300      	movs	r3, #0
    1da8:	461a      	mov	r2, r3
    1daa:	4619      	mov	r1, r3
    1dac:	4618      	mov	r0, r3
    1dae:	f7fe ff43 	bl	c38 <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    1db2:	463a      	mov	r2, r7
    1db4:	4631      	mov	r1, r6
    1db6:	9806      	ldr	r0, [sp, #24]
    1db8:	f7ff fd67 	bl	188a <boot_erase_region>
        assert(rc == 0);
    1dbc:	b9e8      	cbnz	r0, 1dfa <boot_swap_sectors+0x1c6>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    1dbe:	f8cd 8004 	str.w	r8, [sp, #4]
    1dc2:	9600      	str	r6, [sp, #0]
    1dc4:	4633      	mov	r3, r6
    1dc6:	9a06      	ldr	r2, [sp, #24]
    1dc8:	9907      	ldr	r1, [sp, #28]
    1dca:	4628      	mov	r0, r5
    1dcc:	f7ff fd62 	bl	1894 <boot_copy_region>
        assert(rc == 0);
    1dd0:	b9c8      	cbnz	r0, 1e06 <boot_swap_sectors+0x1d2>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    1dd2:	6823      	ldr	r3, [r4, #0]
    1dd4:	2b01      	cmp	r3, #1
    1dd6:	d101      	bne.n	1ddc <boot_swap_sectors+0x1a8>
    1dd8:	79a3      	ldrb	r3, [r4, #6]
    1dda:	b1d3      	cbz	r3, 1e12 <boot_swap_sectors+0x1de>
        rc = boot_write_status(state, bs);
    1ddc:	4621      	mov	r1, r4
    1dde:	4628      	mov	r0, r5
    1de0:	f7ff fd1f 	bl	1822 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    1de4:	2303      	movs	r3, #3
    1de6:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1de8:	2800      	cmp	r0, #0
    1dea:	f43f af5f 	beq.w	1cac <boot_swap_sectors+0x78>
    1dee:	2300      	movs	r3, #0
    1df0:	461a      	mov	r2, r3
    1df2:	4619      	mov	r1, r3
    1df4:	4618      	mov	r0, r3
    1df6:	f7fe ff1f 	bl	c38 <__assert_func>
        assert(rc == 0);
    1dfa:	2300      	movs	r3, #0
    1dfc:	461a      	mov	r2, r3
    1dfe:	4619      	mov	r1, r3
    1e00:	4618      	mov	r0, r3
    1e02:	f7fe ff19 	bl	c38 <__assert_func>
        assert(rc == 0);
    1e06:	2300      	movs	r3, #0
    1e08:	461a      	mov	r2, r3
    1e0a:	4619      	mov	r1, r3
    1e0c:	4618      	mov	r0, r3
    1e0e:	f7fe ff13 	bl	c38 <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    1e12:	9906      	ldr	r1, [sp, #24]
    1e14:	4628      	mov	r0, r5
    1e16:	f7ff fe05 	bl	1a24 <swap_erase_trailer_sectors>
            assert(rc == 0);
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d0de      	beq.n	1ddc <boot_swap_sectors+0x1a8>
    1e1e:	2300      	movs	r3, #0
    1e20:	461a      	mov	r2, r3
    1e22:	4619      	mov	r1, r3
    1e24:	4618      	mov	r0, r3
    1e26:	f7fe ff07 	bl	c38 <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    1e2a:	463a      	mov	r2, r7
    1e2c:	4631      	mov	r1, r6
    1e2e:	9807      	ldr	r0, [sp, #28]
    1e30:	f7ff fd2b 	bl	188a <boot_erase_region>
        assert(rc == 0);
    1e34:	2800      	cmp	r0, #0
    1e36:	d15b      	bne.n	1ef0 <boot_swap_sectors+0x2bc>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    1e38:	f8cd 8004 	str.w	r8, [sp, #4]
    1e3c:	9600      	str	r6, [sp, #0]
    1e3e:	2300      	movs	r3, #0
    1e40:	9a07      	ldr	r2, [sp, #28]
    1e42:	9905      	ldr	r1, [sp, #20]
    1e44:	4628      	mov	r0, r5
    1e46:	f7ff fd25 	bl	1894 <boot_copy_region>
        assert(rc == 0);
    1e4a:	2800      	cmp	r0, #0
    1e4c:	d156      	bne.n	1efc <boot_swap_sectors+0x2c8>
        if (bs->use_scratch) {
    1e4e:	79a3      	ldrb	r3, [r4, #6]
    1e50:	2b00      	cmp	r3, #0
    1e52:	d02e      	beq.n	1eb2 <boot_swap_sectors+0x27e>
            scratch_trailer_off = boot_status_off(fap_scratch);
    1e54:	9805      	ldr	r0, [sp, #20]
    1e56:	f000 faa5 	bl	23a4 <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    1e5a:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    1e5c:	6eab      	ldr	r3, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    1e5e:	005b      	lsls	r3, r3, #1
    1e60:	9301      	str	r3, [sp, #4]
    1e62:	9600      	str	r6, [sp, #0]
    1e64:	4603      	mov	r3, r0
    1e66:	9a07      	ldr	r2, [sp, #28]
    1e68:	9905      	ldr	r1, [sp, #20]
    1e6a:	4628      	mov	r0, r5
    1e6c:	f7ff fd12 	bl	1894 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    1e70:	2800      	cmp	r0, #0
    1e72:	d149      	bne.n	1f08 <boot_swap_sectors+0x2d4>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    1e74:	a903      	add	r1, sp, #12
    1e76:	2003      	movs	r0, #3
    1e78:	f000 fb08 	bl	248c <boot_read_swap_state_by_id>
            assert(rc == 0);
    1e7c:	2800      	cmp	r0, #0
    1e7e:	d149      	bne.n	1f14 <boot_swap_sectors+0x2e0>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    1e80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e84:	2b01      	cmp	r3, #1
    1e86:	d04b      	beq.n	1f20 <boot_swap_sectors+0x2ec>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    1e88:	f89d 100d 	ldrb.w	r1, [sp, #13]
    1e8c:	2901      	cmp	r1, #1
    1e8e:	d005      	beq.n	1e9c <boot_swap_sectors+0x268>
                rc = boot_write_swap_info(fap_primary_slot,
    1e90:	2200      	movs	r2, #0
    1e92:	9807      	ldr	r0, [sp, #28]
    1e94:	f000 fb40 	bl	2518 <boot_write_swap_info>
                assert(rc == 0);
    1e98:	2800      	cmp	r0, #0
    1e9a:	d14c      	bne.n	1f36 <boot_swap_sectors+0x302>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    1e9c:	68a1      	ldr	r1, [r4, #8]
    1e9e:	9807      	ldr	r0, [sp, #28]
    1ea0:	f000 fb5c 	bl	255c <boot_write_swap_size>
            assert(rc == 0);
    1ea4:	2800      	cmp	r0, #0
    1ea6:	d14c      	bne.n	1f42 <boot_swap_sectors+0x30e>
            rc = boot_write_magic(fap_primary_slot);
    1ea8:	9807      	ldr	r0, [sp, #28]
    1eaa:	f000 fb17 	bl	24dc <boot_write_magic>
            assert(rc == 0);
    1eae:	2800      	cmp	r0, #0
    1eb0:	d14d      	bne.n	1f4e <boot_swap_sectors+0x31a>
        erase_scratch = bs->use_scratch;
    1eb2:	79a6      	ldrb	r6, [r4, #6]
        bs->use_scratch = 0;
    1eb4:	2300      	movs	r3, #0
    1eb6:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    1eb8:	4621      	mov	r1, r4
    1eba:	4628      	mov	r0, r5
    1ebc:	f7ff fcb1 	bl	1822 <boot_write_status>
        bs->idx++;
    1ec0:	6823      	ldr	r3, [r4, #0]
    1ec2:	3301      	adds	r3, #1
    1ec4:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1ec6:	2301      	movs	r3, #1
    1ec8:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1eca:	2800      	cmp	r0, #0
    1ecc:	d145      	bne.n	1f5a <boot_swap_sectors+0x326>
        if (erase_scratch) {
    1ece:	2e00      	cmp	r6, #0
    1ed0:	f43f aef0 	beq.w	1cb4 <boot_swap_sectors+0x80>
            rc = boot_erase_region(fap_scratch, 0, sz);
    1ed4:	463a      	mov	r2, r7
    1ed6:	2100      	movs	r1, #0
    1ed8:	9805      	ldr	r0, [sp, #20]
    1eda:	f7ff fcd6 	bl	188a <boot_erase_region>
            assert(rc == 0);
    1ede:	2800      	cmp	r0, #0
    1ee0:	f43f aee8 	beq.w	1cb4 <boot_swap_sectors+0x80>
    1ee4:	2300      	movs	r3, #0
    1ee6:	461a      	mov	r2, r3
    1ee8:	4619      	mov	r1, r3
    1eea:	4618      	mov	r0, r3
    1eec:	f7fe fea4 	bl	c38 <__assert_func>
        assert(rc == 0);
    1ef0:	2300      	movs	r3, #0
    1ef2:	461a      	mov	r2, r3
    1ef4:	4619      	mov	r1, r3
    1ef6:	4618      	mov	r0, r3
    1ef8:	f7fe fe9e 	bl	c38 <__assert_func>
        assert(rc == 0);
    1efc:	2300      	movs	r3, #0
    1efe:	461a      	mov	r2, r3
    1f00:	4619      	mov	r1, r3
    1f02:	4618      	mov	r0, r3
    1f04:	f7fe fe98 	bl	c38 <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    1f08:	2300      	movs	r3, #0
    1f0a:	461a      	mov	r2, r3
    1f0c:	4619      	mov	r1, r3
    1f0e:	4618      	mov	r0, r3
    1f10:	f7fe fe92 	bl	c38 <__assert_func>
            assert(rc == 0);
    1f14:	2300      	movs	r3, #0
    1f16:	461a      	mov	r2, r3
    1f18:	4619      	mov	r1, r3
    1f1a:	4618      	mov	r0, r3
    1f1c:	f7fe fe8c 	bl	c38 <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    1f20:	9807      	ldr	r0, [sp, #28]
    1f22:	f000 faf2 	bl	250a <boot_write_image_ok>
                assert(rc == 0);
    1f26:	2800      	cmp	r0, #0
    1f28:	d0ae      	beq.n	1e88 <boot_swap_sectors+0x254>
    1f2a:	2300      	movs	r3, #0
    1f2c:	461a      	mov	r2, r3
    1f2e:	4619      	mov	r1, r3
    1f30:	4618      	mov	r0, r3
    1f32:	f7fe fe81 	bl	c38 <__assert_func>
                assert(rc == 0);
    1f36:	2300      	movs	r3, #0
    1f38:	461a      	mov	r2, r3
    1f3a:	4619      	mov	r1, r3
    1f3c:	4618      	mov	r0, r3
    1f3e:	f7fe fe7b 	bl	c38 <__assert_func>
            assert(rc == 0);
    1f42:	2300      	movs	r3, #0
    1f44:	461a      	mov	r2, r3
    1f46:	4619      	mov	r1, r3
    1f48:	4618      	mov	r0, r3
    1f4a:	f7fe fe75 	bl	c38 <__assert_func>
            assert(rc == 0);
    1f4e:	2300      	movs	r3, #0
    1f50:	461a      	mov	r2, r3
    1f52:	4619      	mov	r1, r3
    1f54:	4618      	mov	r0, r3
    1f56:	f7fe fe6f 	bl	c38 <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    1f5a:	2300      	movs	r3, #0
    1f5c:	461a      	mov	r2, r3
    1f5e:	4619      	mov	r1, r3
    1f60:	4618      	mov	r0, r3
    1f62:	f7fe fe69 	bl	c38 <__assert_func>

00001f66 <boot_read_image_header>:
{
    1f66:	b510      	push	{r4, lr}
    1f68:	b082      	sub	sp, #8
    1f6a:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1f6c:	2000      	movs	r0, #0
    1f6e:	f000 fcb0 	bl	28d2 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1f72:	a901      	add	r1, sp, #4
    1f74:	b2c0      	uxtb	r0, r0
    1f76:	f7fe ff85 	bl	e84 <flash_area_open>
    if (rc != 0) {
    1f7a:	b118      	cbz	r0, 1f84 <boot_read_image_header+0x1e>
        rc = BOOT_EFLASH;
    1f7c:	2301      	movs	r3, #1
}
    1f7e:	4618      	mov	r0, r3
    1f80:	b002      	add	sp, #8
    1f82:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    1f84:	2320      	movs	r3, #32
    1f86:	4622      	mov	r2, r4
    1f88:	2100      	movs	r1, #0
    1f8a:	9801      	ldr	r0, [sp, #4]
    1f8c:	f7fe ffd8 	bl	f40 <flash_area_read>
    if (rc != 0) {
    1f90:	4603      	mov	r3, r0
    1f92:	2800      	cmp	r0, #0
    1f94:	d0f3      	beq.n	1f7e <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    1f96:	2301      	movs	r3, #1
    1f98:	e7f1      	b.n	1f7e <boot_read_image_header+0x18>
	...

00001f9c <swap_read_status_bytes>:
{
    1f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa0:	b083      	sub	sp, #12
    1fa2:	4606      	mov	r6, r0
    1fa4:	4689      	mov	r9, r1
    1fa6:	4693      	mov	fp, r2
    off = boot_status_off(fap);
    1fa8:	f000 f9fc 	bl	23a4 <boot_status_off>
    1fac:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    1fae:	4631      	mov	r1, r6
    1fb0:	2000      	movs	r0, #0
    1fb2:	f000 f9e8 	bl	2386 <boot_status_entries>
    if (max_entries < 0) {
    1fb6:	1e07      	subs	r7, r0, #0
    1fb8:	db3f      	blt.n	203a <swap_read_status_bytes+0x9e>
    for (i = 0; i < max_entries; i++) {
    1fba:	2400      	movs	r4, #0
    found_idx = 0;
    1fbc:	46a2      	mov	sl, r4
    found = 0;
    1fbe:	4625      	mov	r5, r4
    1fc0:	e007      	b.n	1fd2 <swap_read_status_bytes+0x36>
            if (found && !found_idx) {
    1fc2:	b12d      	cbz	r5, 1fd0 <swap_read_status_bytes+0x34>
    1fc4:	f1ba 0f00 	cmp.w	sl, #0
    1fc8:	d102      	bne.n	1fd0 <swap_read_status_bytes+0x34>
                found_idx = i;
    1fca:	46a2      	mov	sl, r4
    1fcc:	e000      	b.n	1fd0 <swap_read_status_bytes+0x34>
            found = 1;
    1fce:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
    1fd0:	3401      	adds	r4, #1
    1fd2:	42bc      	cmp	r4, r7
    1fd4:	da14      	bge.n	2000 <swap_read_status_bytes+0x64>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    1fd6:	f8d9 1068 	ldr.w	r1, [r9, #104]	; 0x68
    1fda:	2301      	movs	r3, #1
    1fdc:	f10d 0207 	add.w	r2, sp, #7
    1fe0:	fb01 8104 	mla	r1, r1, r4, r8
    1fe4:	4630      	mov	r0, r6
    1fe6:	f7fe ffee 	bl	fc6 <flash_area_read_is_empty>
        if (rc < 0) {
    1fea:	2800      	cmp	r0, #0
    1fec:	db27      	blt.n	203e <swap_read_status_bytes+0xa2>
        if (rc == 1) {
    1fee:	2801      	cmp	r0, #1
    1ff0:	d0e7      	beq.n	1fc2 <swap_read_status_bytes+0x26>
        } else if (!found) {
    1ff2:	2d00      	cmp	r5, #0
    1ff4:	d0eb      	beq.n	1fce <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    1ff6:	f1ba 0f00 	cmp.w	sl, #0
    1ffa:	d0e9      	beq.n	1fd0 <swap_read_status_bytes+0x34>
            invalid = 1;
    1ffc:	4629      	mov	r1, r5
    1ffe:	e000      	b.n	2002 <swap_read_status_bytes+0x66>
    invalid = 0;
    2000:	2100      	movs	r1, #0
    if (invalid) {
    2002:	b9a1      	cbnz	r1, 202e <swap_read_status_bytes+0x92>
    if (found) {
    2004:	b1e5      	cbz	r5, 2040 <swap_read_status_bytes+0xa4>
        if (!found_idx) {
    2006:	f1ba 0f00 	cmp.w	sl, #0
    200a:	d000      	beq.n	200e <swap_read_status_bytes+0x72>
    200c:	4654      	mov	r4, sl
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    200e:	4b0e      	ldr	r3, [pc, #56]	; (2048 <swap_read_status_bytes+0xac>)
    2010:	fb83 2304 	smull	r2, r3, r3, r4
    2014:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    2018:	1c5a      	adds	r2, r3, #1
    201a:	f8cb 2000 	str.w	r2, [fp]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    201e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2022:	1ae2      	subs	r2, r4, r3
    2024:	1c53      	adds	r3, r2, #1
    2026:	f88b 3004 	strb.w	r3, [fp, #4]
    return 0;
    202a:	460d      	mov	r5, r1
    202c:	e008      	b.n	2040 <swap_read_status_bytes+0xa4>
        assert(0);
    202e:	2300      	movs	r3, #0
    2030:	461a      	mov	r2, r3
    2032:	4619      	mov	r1, r3
    2034:	4618      	mov	r0, r3
    2036:	f7fe fdff 	bl	c38 <__assert_func>
        return BOOT_EBADARGS;
    203a:	2507      	movs	r5, #7
    203c:	e000      	b.n	2040 <swap_read_status_bytes+0xa4>
            return BOOT_EFLASH;
    203e:	2501      	movs	r5, #1
}
    2040:	4628      	mov	r0, r5
    2042:	b003      	add	sp, #12
    2044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2048:	55555556 	.word	0x55555556

0000204c <boot_status_internal_off>:
{
    204c:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    204e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2052:	6803      	ldr	r3, [r0, #0]
    2054:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2056:	7902      	ldrb	r2, [r0, #4]
    2058:	3a01      	subs	r2, #1
    205a:	fb01 f102 	mul.w	r1, r1, r2
}
    205e:	fb03 1004 	mla	r0, r3, r4, r1
    2062:	bc10      	pop	{r4}
    2064:	4770      	bx	lr

00002066 <boot_slots_compatible>:
{
    2066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return BOOT_IMG(state, slot).num_sectors;
    206a:	6a86      	ldr	r6, [r0, #40]	; 0x28
    206c:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    2070:	2e80      	cmp	r6, #128	; 0x80
    2072:	d859      	bhi.n	2128 <boot_slots_compatible+0xc2>
    2074:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    2078:	d859      	bhi.n	212e <boot_slots_compatible+0xc8>
    207a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    207c:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    2080:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    2082:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    2084:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    2086:	46a9      	mov	r9, r5
    i = sz0 = primary_slot_sz = 0;
    2088:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    208a:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    208c:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    208e:	e013      	b.n	20b8 <boot_slots_compatible+0x52>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2090:	6a47      	ldr	r7, [r0, #36]	; 0x24
    2092:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    2096:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    209a:	4457      	add	r7, sl
    209c:	68bf      	ldr	r7, [r7, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    209e:	443b      	add	r3, r7
    20a0:	6d07      	ldr	r7, [r0, #80]	; 0x50
    20a2:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    20a6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    20aa:	4457      	add	r7, sl
    20ac:	68bf      	ldr	r7, [r7, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    20ae:	443a      	add	r2, r7
            i++;
    20b0:	3101      	adds	r1, #1
            j++;
    20b2:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    20b4:	4293      	cmp	r3, r2
    20b6:	d021      	beq.n	20fc <boot_slots_compatible+0x96>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    20b8:	42b1      	cmp	r1, r6
    20ba:	d301      	bcc.n	20c0 <boot_slots_compatible+0x5a>
    20bc:	4564      	cmp	r4, ip
    20be:	d227      	bcs.n	2110 <boot_slots_compatible+0xaa>
        if (sz0 == sz1) {
    20c0:	4293      	cmp	r3, r2
    20c2:	d0e5      	beq.n	2090 <boot_slots_compatible+0x2a>
        } else if (sz0 < sz1) {
    20c4:	4293      	cmp	r3, r2
    20c6:	d20c      	bcs.n	20e2 <boot_slots_compatible+0x7c>
    20c8:	6a47      	ldr	r7, [r0, #36]	; 0x24
    20ca:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    20ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    20d2:	4457      	add	r7, sl
    20d4:	68bf      	ldr	r7, [r7, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    20d6:	443b      	add	r3, r7
            if (smaller == 2) {
    20d8:	2d02      	cmp	r5, #2
    20da:	d02a      	beq.n	2132 <boot_slots_compatible+0xcc>
            i++;
    20dc:	3101      	adds	r1, #1
            smaller = 1;
    20de:	2501      	movs	r5, #1
    20e0:	e7e8      	b.n	20b4 <boot_slots_compatible+0x4e>
    20e2:	6d07      	ldr	r7, [r0, #80]	; 0x50
    20e4:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    20e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    20ec:	4457      	add	r7, sl
    20ee:	68bf      	ldr	r7, [r7, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    20f0:	443a      	add	r2, r7
            if (smaller == 1) {
    20f2:	2d01      	cmp	r5, #1
    20f4:	d01f      	beq.n	2136 <boot_slots_compatible+0xd0>
            j++;
    20f6:	3401      	adds	r4, #1
            smaller = 2;
    20f8:	2502      	movs	r5, #2
    20fa:	e7db      	b.n	20b4 <boot_slots_compatible+0x4e>
            primary_slot_sz += sz0;
    20fc:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    20fe:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2100:	4543      	cmp	r3, r8
    2102:	d81a      	bhi.n	213a <boot_slots_compatible+0xd4>
    2104:	4542      	cmp	r2, r8
    2106:	d81a      	bhi.n	213e <boot_slots_compatible+0xd8>
            smaller = sz0 = sz1 = 0;
    2108:	2500      	movs	r5, #0
    210a:	462a      	mov	r2, r5
    210c:	462b      	mov	r3, r5
    210e:	e7d3      	b.n	20b8 <boot_slots_compatible+0x52>
    if ((i != num_sectors_primary) ||
    2110:	42b1      	cmp	r1, r6
    2112:	d001      	beq.n	2118 <boot_slots_compatible+0xb2>
        return 0;
    2114:	2000      	movs	r0, #0
    2116:	e008      	b.n	212a <boot_slots_compatible+0xc4>
    if ((i != num_sectors_primary) ||
    2118:	4564      	cmp	r4, ip
    211a:	d001      	beq.n	2120 <boot_slots_compatible+0xba>
        return 0;
    211c:	2000      	movs	r0, #0
    211e:	e004      	b.n	212a <boot_slots_compatible+0xc4>
        (j != num_sectors_secondary) ||
    2120:	45ce      	cmp	lr, r9
    2122:	d00e      	beq.n	2142 <boot_slots_compatible+0xdc>
        return 0;
    2124:	2000      	movs	r0, #0
    2126:	e000      	b.n	212a <boot_slots_compatible+0xc4>
        return 0;
    2128:	2000      	movs	r0, #0
}
    212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
    212e:	2000      	movs	r0, #0
    2130:	e7fb      	b.n	212a <boot_slots_compatible+0xc4>
                return 0;
    2132:	2000      	movs	r0, #0
    2134:	e7f9      	b.n	212a <boot_slots_compatible+0xc4>
                return 0;
    2136:	2000      	movs	r0, #0
    2138:	e7f7      	b.n	212a <boot_slots_compatible+0xc4>
                return 0;
    213a:	2000      	movs	r0, #0
    213c:	e7f5      	b.n	212a <boot_slots_compatible+0xc4>
    213e:	2000      	movs	r0, #0
    2140:	e7f3      	b.n	212a <boot_slots_compatible+0xc4>
    return 1;
    2142:	2001      	movs	r0, #1
    2144:	e7f1      	b.n	212a <boot_slots_compatible+0xc4>
	...

00002148 <swap_status_source>:
{
    2148:	b530      	push	{r4, r5, lr}
    214a:	b085      	sub	sp, #20
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    214c:	4669      	mov	r1, sp
    214e:	2001      	movs	r0, #1
    2150:	f000 f99c 	bl	248c <boot_read_swap_state_by_id>
    assert(rc == 0);
    2154:	b938      	cbnz	r0, 2166 <swap_status_source+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    2156:	a902      	add	r1, sp, #8
    2158:	2003      	movs	r0, #3
    215a:	f000 f997 	bl	248c <boot_read_swap_state_by_id>
    assert(rc == 0);
    215e:	4605      	mov	r5, r0
    2160:	b938      	cbnz	r0, 2172 <swap_status_source+0x2a>
    2162:	2400      	movs	r4, #0
    2164:	e00c      	b.n	2180 <swap_status_source+0x38>
    assert(rc == 0);
    2166:	2300      	movs	r3, #0
    2168:	461a      	mov	r2, r3
    216a:	4619      	mov	r1, r3
    216c:	4618      	mov	r0, r3
    216e:	f7fe fd63 	bl	c38 <__assert_func>
    assert(rc == 0);
    2172:	2300      	movs	r3, #0
    2174:	461a      	mov	r2, r3
    2176:	4619      	mov	r1, r3
    2178:	4618      	mov	r0, r3
    217a:	f7fe fd5d 	bl	c38 <__assert_func>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    217e:	3401      	adds	r4, #1
    2180:	2c03      	cmp	r4, #3
    2182:	d820      	bhi.n	21c6 <swap_status_source+0x7e>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    2184:	f89d 1000 	ldrb.w	r1, [sp]
    2188:	4b10      	ldr	r3, [pc, #64]	; (21cc <swap_status_source+0x84>)
    218a:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    218e:	f000 f8e1 	bl	2354 <boot_magic_compatible_check>
    2192:	2800      	cmp	r0, #0
    2194:	d0f3      	beq.n	217e <swap_status_source+0x36>
            boot_magic_compatible_check(table->bst_magic_scratch,
    2196:	4b0d      	ldr	r3, [pc, #52]	; (21cc <swap_status_source+0x84>)
    2198:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    219c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    21a0:	7858      	ldrb	r0, [r3, #1]
    21a2:	f000 f8d7 	bl	2354 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    21a6:	2800      	cmp	r0, #0
    21a8:	d0e9      	beq.n	217e <swap_status_source+0x36>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    21aa:	4b08      	ldr	r3, [pc, #32]	; (21cc <swap_status_source+0x84>)
    21ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    21b0:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    21b2:	2b04      	cmp	r3, #4
    21b4:	d003      	beq.n	21be <swap_status_source+0x76>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    21b6:	f89d 2002 	ldrb.w	r2, [sp, #2]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    21ba:	4293      	cmp	r3, r2
    21bc:	d1df      	bne.n	217e <swap_status_source+0x36>
            source = table->bst_status_source;
    21be:	4b03      	ldr	r3, [pc, #12]	; (21cc <swap_status_source+0x84>)
    21c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    21c4:	78e5      	ldrb	r5, [r4, #3]
}
    21c6:	4628      	mov	r0, r5
    21c8:	b005      	add	sp, #20
    21ca:	bd30      	pop	{r4, r5, pc}
    21cc:	00002fa8 	.word	0x00002fa8

000021d0 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    21d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d2:	b083      	sub	sp, #12
    21d4:	4605      	mov	r5, r0
    21d6:	460e      	mov	r6, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    21d8:	2000      	movs	r0, #0
    primary_slot_size = 0;
    21da:	4603      	mov	r3, r0
    last_sector_idx = 0;
    21dc:	4601      	mov	r1, r0
    21de:	e000      	b.n	21e2 <swap_run+0x12>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    21e0:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
    21e2:	4293      	cmp	r3, r2
    21e4:	d301      	bcc.n	21ea <swap_run+0x1a>
    21e6:	4283      	cmp	r3, r0
    21e8:	d207      	bcs.n	21fa <swap_run+0x2a>
    21ea:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    21ec:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    21f0:	ea4f 078c 	mov.w	r7, ip, lsl #2
    21f4:	443c      	add	r4, r7
    21f6:	68a4      	ldr	r4, [r4, #8]
           primary_slot_size += boot_img_sector_size(state,
    21f8:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
    21fa:	4290      	cmp	r0, r2
    21fc:	d301      	bcc.n	2202 <swap_run+0x32>
    21fe:	4283      	cmp	r3, r0
    2200:	d907      	bls.n	2212 <swap_run+0x42>
    2202:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    2204:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    2208:	ea4f 078c 	mov.w	r7, ip, lsl #2
    220c:	443c      	add	r4, r7
    220e:	68a4      	ldr	r4, [r4, #8]
           secondary_slot_size += boot_img_sector_size(state,
    2210:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
    2212:	4293      	cmp	r3, r2
    2214:	d3e4      	bcc.n	21e0 <swap_run+0x10>
    2216:	4290      	cmp	r0, r2
    2218:	d3e2      	bcc.n	21e0 <swap_run+0x10>
                secondary_slot_size >= copy_size &&
    221a:	4283      	cmp	r3, r0
    221c:	d1e0      	bne.n	21e0 <swap_run+0x10>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    221e:	2400      	movs	r4, #0
    2220:	e002      	b.n	2228 <swap_run+0x58>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    2222:	9901      	ldr	r1, [sp, #4]
    2224:	3901      	subs	r1, #1
        swap_idx++;
    2226:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    2228:	2900      	cmp	r1, #0
    222a:	db0e      	blt.n	224a <swap_run+0x7a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    222c:	aa01      	add	r2, sp, #4
    222e:	4628      	mov	r0, r5
    2230:	f7ff fce9 	bl	1c06 <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    2234:	6833      	ldr	r3, [r6, #0]
    2236:	3b01      	subs	r3, #1
    2238:	42a3      	cmp	r3, r4
    223a:	d8f2      	bhi.n	2222 <swap_run+0x52>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    223c:	4633      	mov	r3, r6
    223e:	462a      	mov	r2, r5
    2240:	4601      	mov	r1, r0
    2242:	9801      	ldr	r0, [sp, #4]
    2244:	f7ff fcf6 	bl	1c34 <boot_swap_sectors>
    2248:	e7eb      	b.n	2222 <swap_run+0x52>
    }

}
    224a:	b003      	add	sp, #12
    224c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000224e <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    224e:	2801      	cmp	r0, #1
    2250:	d101      	bne.n	2256 <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
    2252:	2001      	movs	r0, #1
}
    2254:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    2256:	2002      	movs	r0, #2
    2258:	4770      	bx	lr
	...

0000225c <boot_magic_decode>:
{
    225c:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    225e:	2210      	movs	r2, #16
    2260:	4903      	ldr	r1, [pc, #12]	; (2270 <boot_magic_decode+0x14>)
    2262:	f7fe fd85 	bl	d70 <memcmp>
    2266:	b908      	cbnz	r0, 226c <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    2268:	2001      	movs	r0, #1
}
    226a:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    226c:	2002      	movs	r0, #2
    226e:	e7fc      	b.n	226a <boot_magic_decode+0xe>
    2270:	00002fbc 	.word	0x00002fbc

00002274 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    2274:	b530      	push	{r4, r5, lr}
    2276:	b087      	sub	sp, #28
    2278:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    227a:	4b14      	ldr	r3, [pc, #80]	; (22cc <boot_find_status+0x58>)
    227c:	881b      	ldrh	r3, [r3, #0]
    227e:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2282:	2400      	movs	r4, #0
    2284:	e000      	b.n	2288 <boot_find_status+0x14>
    2286:	3401      	adds	r4, #1
    2288:	2c01      	cmp	r4, #1
    228a:	d81a      	bhi.n	22c2 <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    228c:	4629      	mov	r1, r5
    228e:	ab06      	add	r3, sp, #24
    2290:	4423      	add	r3, r4
    2292:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    2296:	f7fe fdf5 	bl	e84 <flash_area_open>
        if (rc != 0) {
    229a:	4603      	mov	r3, r0
    229c:	b998      	cbnz	r0, 22c6 <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    229e:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    22a0:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    22a2:	2310      	movs	r3, #16
    22a4:	aa02      	add	r2, sp, #8
    22a6:	3910      	subs	r1, #16
    22a8:	f7fe fe4a 	bl	f40 <flash_area_read>
        if (rc != 0) {
    22ac:	4603      	mov	r3, r0
    22ae:	b950      	cbnz	r0, 22c6 <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    22b0:	2210      	movs	r2, #16
    22b2:	4907      	ldr	r1, [pc, #28]	; (22d0 <boot_find_status+0x5c>)
    22b4:	a802      	add	r0, sp, #8
    22b6:	f7fe fd5b 	bl	d70 <memcmp>
    22ba:	4603      	mov	r3, r0
    22bc:	2800      	cmp	r0, #0
    22be:	d1e2      	bne.n	2286 <boot_find_status+0x12>
    22c0:	e001      	b.n	22c6 <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    22c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    22c6:	4618      	mov	r0, r3
    22c8:	b007      	add	sp, #28
    22ca:	bd30      	pop	{r4, r5, pc}
    22cc:	00002fb8 	.word	0x00002fb8
    22d0:	00002fbc 	.word	0x00002fbc

000022d4 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    22d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    22d8:	b083      	sub	sp, #12
    22da:	4606      	mov	r6, r0
    22dc:	460f      	mov	r7, r1
    22de:	4690      	mov	r8, r2
    22e0:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    22e2:	f7fe fe66 	bl	fb2 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    22e6:	2c08      	cmp	r4, #8
    22e8:	d823      	bhi.n	2332 <boot_write_trailer+0x5e>
    22ea:	4605      	mov	r5, r0
    22ec:	2808      	cmp	r0, #8
    22ee:	d823      	bhi.n	2338 <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    22f0:	4630      	mov	r0, r6
    22f2:	f7fe fe63 	bl	fbc <flash_area_erased_val>
    22f6:	4681      	mov	r9, r0
    if (align < inlen) {
    22f8:	42a5      	cmp	r5, r4
    22fa:	d200      	bcs.n	22fe <boot_write_trailer+0x2a>
        align = inlen;
    22fc:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
    22fe:	4622      	mov	r2, r4
    2300:	4641      	mov	r1, r8
    2302:	4668      	mov	r0, sp
    2304:	f7fe fd58 	bl	db8 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    2308:	1b2a      	subs	r2, r5, r4
    230a:	fa5f f189 	uxtb.w	r1, r9
    230e:	eb0d 0004 	add.w	r0, sp, r4
    2312:	f7fe fd5e 	bl	dd2 <memset>

    rc = flash_area_write(fap, off, buf, align);
    2316:	462b      	mov	r3, r5
    2318:	466a      	mov	r2, sp
    231a:	4639      	mov	r1, r7
    231c:	4630      	mov	r0, r6
    231e:	f7fe fe22 	bl	f66 <flash_area_write>
    if (rc != 0) {
    2322:	4603      	mov	r3, r0
    2324:	b918      	cbnz	r0, 232e <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
    2326:	4618      	mov	r0, r3
    2328:	b003      	add	sp, #12
    232a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    232e:	2301      	movs	r3, #1
    2330:	e7f9      	b.n	2326 <boot_write_trailer+0x52>
        return -1;
    2332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2336:	e7f6      	b.n	2326 <boot_write_trailer+0x52>
    2338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    233c:	e7f3      	b.n	2326 <boot_write_trailer+0x52>

0000233e <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    233e:	b510      	push	{r4, lr}
    2340:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    2342:	ac02      	add	r4, sp, #8
    2344:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2348:	2301      	movs	r3, #1
    234a:	4622      	mov	r2, r4
    234c:	f7ff ffc2 	bl	22d4 <boot_write_trailer>
}
    2350:	b002      	add	sp, #8
    2352:	bd10      	pop	{r4, pc}

00002354 <boot_magic_compatible_check>:
    switch (tbl_val) {
    2354:	2804      	cmp	r0, #4
    2356:	d00b      	beq.n	2370 <boot_magic_compatible_check+0x1c>
    2358:	2805      	cmp	r0, #5
    235a:	d104      	bne.n	2366 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    235c:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    2360:	bf18      	it	ne
    2362:	2001      	movne	r0, #1
    2364:	4770      	bx	lr
        return tbl_val == val;
    2366:	4288      	cmp	r0, r1
    2368:	bf14      	ite	ne
    236a:	2000      	movne	r0, #0
    236c:	2001      	moveq	r0, #1
    236e:	4770      	bx	lr
        return 1;
    2370:	2001      	movs	r0, #1
}
    2372:	4770      	bx	lr

00002374 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2374:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2378:	01d8      	lsls	r0, r3, #7
}
    237a:	4770      	bx	lr

0000237c <boot_trailer_sz>:
{
    237c:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    237e:	f7ff fff9 	bl	2374 <boot_status_sz>
}
    2382:	3030      	adds	r0, #48	; 0x30
    2384:	bd08      	pop	{r3, pc}

00002386 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    2386:	780b      	ldrb	r3, [r1, #0]
    2388:	2b03      	cmp	r3, #3
    238a:	d006      	beq.n	239a <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    238c:	3b01      	subs	r3, #1
    238e:	b2db      	uxtb	r3, r3
    2390:	2b01      	cmp	r3, #1
    2392:	d804      	bhi.n	239e <boot_status_entries+0x18>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    2394:	f44f 70c0 	mov.w	r0, #384	; 0x180
    2398:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    239a:	2003      	movs	r0, #3
    239c:	4770      	bx	lr
    return -1;
    239e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    23a2:	4770      	bx	lr

000023a4 <boot_status_off>:
{
    23a4:	b510      	push	{r4, lr}
    23a6:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    23a8:	f7fe fe03 	bl	fb2 <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    23ac:	f7ff ffe6 	bl	237c <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    23b0:	68a3      	ldr	r3, [r4, #8]
    23b2:	4283      	cmp	r3, r0
    23b4:	d301      	bcc.n	23ba <boot_status_off+0x16>
}
    23b6:	1a18      	subs	r0, r3, r0
    23b8:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    23ba:	2300      	movs	r3, #0
    23bc:	461a      	mov	r2, r3
    23be:	4619      	mov	r1, r3
    23c0:	4618      	mov	r0, r3
    23c2:	f7fe fc39 	bl	c38 <__assert_func>

000023c6 <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    23c6:	6880      	ldr	r0, [r0, #8]
}
    23c8:	3828      	subs	r0, #40	; 0x28
    23ca:	4770      	bx	lr

000023cc <boot_read_swap_state>:
{
    23cc:	b530      	push	{r4, r5, lr}
    23ce:	b087      	sub	sp, #28
    23d0:	4604      	mov	r4, r0
    23d2:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    23d4:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    23d6:	2310      	movs	r3, #16
    23d8:	aa02      	add	r2, sp, #8
    23da:	3910      	subs	r1, #16
    23dc:	f7fe fdf3 	bl	fc6 <flash_area_read_is_empty>
    if (rc < 0) {
    23e0:	2800      	cmp	r0, #0
    23e2:	db4a      	blt.n	247a <boot_read_swap_state+0xae>
    if (rc == 1) {
    23e4:	2801      	cmp	r0, #1
    23e6:	d03e      	beq.n	2466 <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
    23e8:	a802      	add	r0, sp, #8
    23ea:	f7ff ff37 	bl	225c <boot_magic_decode>
    23ee:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
    23f0:	4620      	mov	r0, r4
    23f2:	f7ff ffe8 	bl	23c6 <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    23f6:	2301      	movs	r3, #1
    23f8:	f10d 0207 	add.w	r2, sp, #7
    23fc:	4601      	mov	r1, r0
    23fe:	4620      	mov	r0, r4
    2400:	f7fe fde1 	bl	fc6 <flash_area_read_is_empty>
    if (rc < 0) {
    2404:	2800      	cmp	r0, #0
    2406:	db3b      	blt.n	2480 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2408:	f89d 3007 	ldrb.w	r3, [sp, #7]
    240c:	f003 020f 	and.w	r2, r3, #15
    2410:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2412:	091b      	lsrs	r3, r3, #4
    2414:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2416:	2801      	cmp	r0, #1
    2418:	d001      	beq.n	241e <boot_read_swap_state+0x52>
    241a:	2a04      	cmp	r2, #4
    241c:	d903      	bls.n	2426 <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    241e:	2301      	movs	r3, #1
    2420:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    2422:	2300      	movs	r3, #0
    2424:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2426:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    2428:	2301      	movs	r3, #1
    242a:	1caa      	adds	r2, r5, #2
    242c:	3920      	subs	r1, #32
    242e:	4620      	mov	r0, r4
    2430:	f7fe fdc9 	bl	fc6 <flash_area_read_is_empty>
    if (rc < 0) {
    2434:	2800      	cmp	r0, #0
    2436:	db25      	blt.n	2484 <boot_read_swap_state+0xb8>
    if (rc == 1) {
    2438:	2801      	cmp	r0, #1
    243a:	d017      	beq.n	246c <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    243c:	78a8      	ldrb	r0, [r5, #2]
    243e:	f7ff ff06 	bl	224e <boot_flag_decode>
    2442:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2444:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    2446:	2301      	movs	r3, #1
    2448:	1cea      	adds	r2, r5, #3
    244a:	3918      	subs	r1, #24
    244c:	4620      	mov	r0, r4
    244e:	f7fe fdba 	bl	fc6 <flash_area_read_is_empty>
    if (rc < 0) {
    2452:	2800      	cmp	r0, #0
    2454:	db18      	blt.n	2488 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    2456:	2801      	cmp	r0, #1
    2458:	d00b      	beq.n	2472 <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    245a:	78e8      	ldrb	r0, [r5, #3]
    245c:	f7ff fef7 	bl	224e <boot_flag_decode>
    2460:	70e8      	strb	r0, [r5, #3]
    return 0;
    2462:	2000      	movs	r0, #0
    2464:	e00a      	b.n	247c <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
    2466:	2303      	movs	r3, #3
    2468:	702b      	strb	r3, [r5, #0]
    246a:	e7c1      	b.n	23f0 <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
    246c:	2303      	movs	r3, #3
    246e:	70ab      	strb	r3, [r5, #2]
    2470:	e7e8      	b.n	2444 <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
    2472:	2303      	movs	r3, #3
    2474:	70eb      	strb	r3, [r5, #3]
    return 0;
    2476:	2000      	movs	r0, #0
    2478:	e000      	b.n	247c <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    247a:	2001      	movs	r0, #1
}
    247c:	b007      	add	sp, #28
    247e:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    2480:	2001      	movs	r0, #1
    2482:	e7fb      	b.n	247c <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2484:	2001      	movs	r0, #1
    2486:	e7f9      	b.n	247c <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2488:	2001      	movs	r0, #1
    248a:	e7f7      	b.n	247c <boot_read_swap_state+0xb0>

0000248c <boot_read_swap_state_by_id>:
{
    248c:	b510      	push	{r4, lr}
    248e:	b082      	sub	sp, #8
    2490:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    2492:	a901      	add	r1, sp, #4
    2494:	b2c0      	uxtb	r0, r0
    2496:	f7fe fcf5 	bl	e84 <flash_area_open>
    if (rc != 0) {
    249a:	b110      	cbz	r0, 24a2 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    249c:	2001      	movs	r0, #1
}
    249e:	b002      	add	sp, #8
    24a0:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    24a2:	4621      	mov	r1, r4
    24a4:	9801      	ldr	r0, [sp, #4]
    24a6:	f7ff ff91 	bl	23cc <boot_read_swap_state>
    return rc;
    24aa:	e7f8      	b.n	249e <boot_read_swap_state_by_id+0x12>

000024ac <boot_read_swap_size>:
{
    24ac:	b530      	push	{r4, r5, lr}
    24ae:	b083      	sub	sp, #12
    24b0:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    24b2:	a901      	add	r1, sp, #4
    24b4:	f7ff fede 	bl	2274 <boot_find_status>
    if (rc == 0) {
    24b8:	4603      	mov	r3, r0
    24ba:	b110      	cbz	r0, 24c2 <boot_read_swap_size+0x16>
}
    24bc:	4618      	mov	r0, r3
    24be:	b003      	add	sp, #12
    24c0:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    24c2:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    24c4:	4628      	mov	r0, r5
    24c6:	f7ff ff7e 	bl	23c6 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    24ca:	2304      	movs	r3, #4
    24cc:	4622      	mov	r2, r4
    24ce:	f1a0 0108 	sub.w	r1, r0, #8
    24d2:	4628      	mov	r0, r5
    24d4:	f7fe fd34 	bl	f40 <flash_area_read>
    24d8:	4603      	mov	r3, r0
    return rc;
    24da:	e7ef      	b.n	24bc <boot_read_swap_size+0x10>

000024dc <boot_write_magic>:
{
    24dc:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    24de:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    24e0:	2310      	movs	r3, #16
    24e2:	4a05      	ldr	r2, [pc, #20]	; (24f8 <boot_write_magic+0x1c>)
    24e4:	3910      	subs	r1, #16
    24e6:	f7fe fd3e 	bl	f66 <flash_area_write>
    if (rc != 0) {
    24ea:	4603      	mov	r3, r0
    24ec:	b908      	cbnz	r0, 24f2 <boot_write_magic+0x16>
}
    24ee:	4618      	mov	r0, r3
    24f0:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    24f2:	2301      	movs	r3, #1
    24f4:	e7fb      	b.n	24ee <boot_write_magic+0x12>
    24f6:	bf00      	nop
    24f8:	00002fbc 	.word	0x00002fbc

000024fc <boot_write_copy_done>:

int
boot_write_copy_done(const struct flash_area *fap)
{
    24fc:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    24fe:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    2500:	2201      	movs	r2, #1
    2502:	3920      	subs	r1, #32
    2504:	f7ff ff1b 	bl	233e <boot_write_trailer_flag>
}
    2508:	bd08      	pop	{r3, pc}

0000250a <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    250a:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    250c:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    250e:	2201      	movs	r2, #1
    2510:	3918      	subs	r1, #24
    2512:	f7ff ff14 	bl	233e <boot_write_trailer_flag>
}
    2516:	bd08      	pop	{r3, pc}

00002518 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    2518:	b530      	push	{r4, r5, lr}
    251a:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    251c:	2a0e      	cmp	r2, #14
    251e:	d811      	bhi.n	2544 <boot_write_swap_info+0x2c>
    2520:	4605      	mov	r5, r0
    2522:	290e      	cmp	r1, #14
    2524:	d814      	bhi.n	2550 <boot_write_swap_info+0x38>
    2526:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    252a:	ac02      	add	r4, sp, #8
    252c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
    2530:	f7ff ff49 	bl	23c6 <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2534:	2301      	movs	r3, #1
    2536:	4622      	mov	r2, r4
    2538:	4601      	mov	r1, r0
    253a:	4628      	mov	r0, r5
    253c:	f7ff feca 	bl	22d4 <boot_write_trailer>
}
    2540:	b003      	add	sp, #12
    2542:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2544:	2300      	movs	r3, #0
    2546:	461a      	mov	r2, r3
    2548:	4619      	mov	r1, r3
    254a:	4618      	mov	r0, r3
    254c:	f7fe fb74 	bl	c38 <__assert_func>
    2550:	2300      	movs	r3, #0
    2552:	461a      	mov	r2, r3
    2554:	4619      	mov	r1, r3
    2556:	4618      	mov	r0, r3
    2558:	f7fe fb6e 	bl	c38 <__assert_func>

0000255c <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    255c:	b530      	push	{r4, r5, lr}
    255e:	b083      	sub	sp, #12
    2560:	4605      	mov	r5, r0
    2562:	ac02      	add	r4, sp, #8
    2564:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2568:	f7ff ff2d 	bl	23c6 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    256c:	2304      	movs	r3, #4
    256e:	4622      	mov	r2, r4
    2570:	f1a0 0108 	sub.w	r1, r0, #8
    2574:	4628      	mov	r0, r5
    2576:	f7ff fead 	bl	22d4 <boot_write_trailer>
}
    257a:	b003      	add	sp, #12
    257c:	bd30      	pop	{r4, r5, pc}
	...

00002580 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    2580:	b530      	push	{r4, r5, lr}
    2582:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2584:	a902      	add	r1, sp, #8
    2586:	2001      	movs	r0, #1
    2588:	f7ff ff80 	bl	248c <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    258c:	2800      	cmp	r0, #0
    258e:	d13c      	bne.n	260a <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2590:	4669      	mov	r1, sp
    2592:	2002      	movs	r0, #2
    2594:	f7ff ff7a 	bl	248c <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    2598:	2800      	cmp	r0, #0
    259a:	d139      	bne.n	2610 <boot_swap_type_multi+0x90>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    259c:	2400      	movs	r4, #0
    259e:	e007      	b.n	25b0 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    25a0:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    25a2:	2b04      	cmp	r3, #4
    25a4:	d028      	beq.n	25f8 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    25a6:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    25aa:	4293      	cmp	r3, r2
    25ac:	d024      	beq.n	25f8 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    25ae:	3401      	adds	r4, #1
    25b0:	2c02      	cmp	r4, #2
    25b2:	d828      	bhi.n	2606 <boot_swap_type_multi+0x86>
        table = boot_swap_tables + i;
    25b4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    25b8:	0053      	lsls	r3, r2, #1
    25ba:	4a16      	ldr	r2, [pc, #88]	; (2614 <boot_swap_type_multi+0x94>)
    25bc:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    25be:	f89d 1008 	ldrb.w	r1, [sp, #8]
    25c2:	5cd0      	ldrb	r0, [r2, r3]
    25c4:	f7ff fec6 	bl	2354 <boot_magic_compatible_check>
    25c8:	2800      	cmp	r0, #0
    25ca:	d0f0      	beq.n	25ae <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    25cc:	f89d 1000 	ldrb.w	r1, [sp]
    25d0:	7868      	ldrb	r0, [r5, #1]
    25d2:	f7ff febf 	bl	2354 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    25d6:	2800      	cmp	r0, #0
    25d8:	d0e9      	beq.n	25ae <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    25da:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    25dc:	2b04      	cmp	r3, #4
    25de:	d003      	beq.n	25e8 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    25e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    25e4:	4293      	cmp	r3, r2
    25e6:	d1e2      	bne.n	25ae <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    25e8:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    25ea:	2b04      	cmp	r3, #4
    25ec:	d0d8      	beq.n	25a0 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    25ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    25f2:	4293      	cmp	r3, r2
    25f4:	d1db      	bne.n	25ae <boot_swap_type_multi+0x2e>
    25f6:	e7d3      	b.n	25a0 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    25f8:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    25fa:	1e83      	subs	r3, r0, #2
    25fc:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    25fe:	2b02      	cmp	r3, #2
    2600:	d904      	bls.n	260c <boot_swap_type_multi+0x8c>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    2602:	20ff      	movs	r0, #255	; 0xff
    2604:	e002      	b.n	260c <boot_swap_type_multi+0x8c>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    2606:	2001      	movs	r0, #1
    2608:	e000      	b.n	260c <boot_swap_type_multi+0x8c>
        return BOOT_SWAP_TYPE_PANIC;
    260a:	20ff      	movs	r0, #255	; 0xff
}
    260c:	b005      	add	sp, #20
    260e:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    2610:	20ff      	movs	r0, #255	; 0xff
    2612:	e7fb      	b.n	260c <boot_swap_type_multi+0x8c>
    2614:	00002fcc 	.word	0x00002fcc

00002618 <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    2618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    261c:	b09d      	sub	sp, #116	; 0x74
    261e:	4615      	mov	r5, r2
    2620:	4699      	mov	r9, r3
    2622:	9f24      	ldr	r7, [sp, #144]	; 0x90
    2624:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    2628:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    262a:	a801      	add	r0, sp, #4
    262c:	f000 f95a 	bl	28e4 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    2630:	2100      	movs	r1, #0
    2632:	a801      	add	r0, sp, #4
    2634:	f000 f95c 	bl	28f0 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    2638:	b114      	cbz	r4, 2640 <bootutil_img_hash+0x28>
    263a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    263c:	2b00      	cmp	r3, #0
    263e:	dc06      	bgt.n	264e <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    2640:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    2642:	68ee      	ldr	r6, [r5, #12]
    2644:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    2646:	896e      	ldrh	r6, [r5, #10]
    2648:	441e      	add	r6, r3

    for (off = 0; off < size; off += blk_sz) {
    264a:	2500      	movs	r5, #0
    264c:	e013      	b.n	2676 <bootutil_img_hash+0x5e>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    264e:	461a      	mov	r2, r3
    2650:	4621      	mov	r1, r4
    2652:	a801      	add	r0, sp, #4
    2654:	f000 fa32 	bl	2abc <mbedtls_sha256_update_ret>
    2658:	e7f2      	b.n	2640 <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    265a:	4623      	mov	r3, r4
    265c:	463a      	mov	r2, r7
    265e:	4629      	mov	r1, r5
    2660:	4648      	mov	r0, r9
    2662:	f7fe fc6d 	bl	f40 <flash_area_read>
        if (rc) {
    2666:	4603      	mov	r3, r0
    2668:	b988      	cbnz	r0, 268e <bootutil_img_hash+0x76>
    266a:	4622      	mov	r2, r4
    266c:	4639      	mov	r1, r7
    266e:	a801      	add	r0, sp, #4
    2670:	f000 fa24 	bl	2abc <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    2674:	4425      	add	r5, r4
    2676:	42b5      	cmp	r5, r6
    2678:	d204      	bcs.n	2684 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    267a:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    267c:	4544      	cmp	r4, r8
    267e:	d9ec      	bls.n	265a <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    2680:	4644      	mov	r4, r8
    2682:	e7ea      	b.n	265a <bootutil_img_hash+0x42>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    2684:	9926      	ldr	r1, [sp, #152]	; 0x98
    2686:	a801      	add	r0, sp, #4
    2688:	f000 fa5b 	bl	2b42 <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
    268c:	2300      	movs	r3, #0
}
    268e:	4618      	mov	r0, r3
    2690:	b01d      	add	sp, #116	; 0x74
    2692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00002696 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    2696:	b5f0      	push	{r4, r5, r6, r7, lr}
    2698:	b09f      	sub	sp, #124	; 0x7c
    269a:	4617      	mov	r7, r2
    269c:	461e      	mov	r6, r3
    269e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    26a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    26a2:	9404      	str	r4, [sp, #16]
    26a4:	9c26      	ldr	r4, [sp, #152]	; 0x98
    26a6:	9403      	str	r4, [sp, #12]
    26a8:	ac06      	add	r4, sp, #24
    26aa:	9402      	str	r4, [sp, #8]
    26ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
    26ae:	9401      	str	r4, [sp, #4]
    26b0:	9c24      	ldr	r4, [sp, #144]	; 0x90
    26b2:	9400      	str	r4, [sp, #0]
    26b4:	f7ff ffb0 	bl	2618 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    26b8:	4604      	mov	r4, r0
    26ba:	2800      	cmp	r0, #0
    26bc:	d140      	bne.n	2740 <bootutil_img_validate+0xaa>
        return rc;
    }

    if (out_hash) {
    26be:	b155      	cbz	r5, 26d6 <bootutil_img_validate+0x40>
        memcpy(out_hash, hash, 32);
    26c0:	ac06      	add	r4, sp, #24
    26c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    26c4:	6028      	str	r0, [r5, #0]
    26c6:	6069      	str	r1, [r5, #4]
    26c8:	60aa      	str	r2, [r5, #8]
    26ca:	60eb      	str	r3, [r5, #12]
    26cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    26ce:	6128      	str	r0, [r5, #16]
    26d0:	6169      	str	r1, [r5, #20]
    26d2:	61aa      	str	r2, [r5, #24]
    26d4:	61eb      	str	r3, [r5, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    26d6:	2300      	movs	r3, #0
    26d8:	9300      	str	r3, [sp, #0]
    26da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    26de:	4632      	mov	r2, r6
    26e0:	4639      	mov	r1, r7
    26e2:	a816      	add	r0, sp, #88	; 0x58
    26e4:	f000 f834 	bl	2750 <bootutil_tlv_iter_begin>
    if (rc) {
    26e8:	4604      	mov	r4, r0
    26ea:	bb48      	cbnz	r0, 2740 <bootutil_img_validate+0xaa>
    int sha256_valid = 0;
    26ec:	4605      	mov	r5, r0
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    26ee:	ab1c      	add	r3, sp, #112	; 0x70
    26f0:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    26f4:	a91d      	add	r1, sp, #116	; 0x74
    26f6:	a816      	add	r0, sp, #88	; 0x58
    26f8:	f000 f88f 	bl	281a <bootutil_tlv_iter_next>
        if (rc < 0) {
    26fc:	2800      	cmp	r0, #0
    26fe:	db1d      	blt.n	273c <bootutil_img_validate+0xa6>
            return -1;
        } else if (rc > 0) {
    2700:	dc18      	bgt.n	2734 <bootutil_img_validate+0x9e>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    2702:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    2706:	2b10      	cmp	r3, #16
    2708:	d1f1      	bne.n	26ee <bootutil_img_validate+0x58>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    270a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    270e:	2b20      	cmp	r3, #32
    2710:	d119      	bne.n	2746 <bootutil_img_validate+0xb0>
                return -1;
            }
            rc = flash_area_read(fap, off, buf, sizeof hash);
    2712:	aa0e      	add	r2, sp, #56	; 0x38
    2714:	991d      	ldr	r1, [sp, #116]	; 0x74
    2716:	4630      	mov	r0, r6
    2718:	f7fe fc12 	bl	f40 <flash_area_read>
            if (rc) {
    271c:	b9b0      	cbnz	r0, 274c <bootutil_img_validate+0xb6>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
    271e:	2220      	movs	r2, #32
    2720:	a90e      	add	r1, sp, #56	; 0x38
    2722:	a806      	add	r0, sp, #24
    2724:	f7fe fb24 	bl	d70 <memcmp>
                return -1;
            }

            sha256_valid = 1;
    2728:	2501      	movs	r5, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    272a:	2800      	cmp	r0, #0
    272c:	d0df      	beq.n	26ee <bootutil_img_validate+0x58>
                return -1;
    272e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2732:	e005      	b.n	2740 <bootutil_img_validate+0xaa>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
    2734:	b925      	cbnz	r5, 2740 <bootutil_img_validate+0xaa>
        return -1;
    2736:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    273a:	e001      	b.n	2740 <bootutil_img_validate+0xaa>
            return -1;
    273c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    2740:	4620      	mov	r0, r4
    2742:	b01f      	add	sp, #124	; 0x7c
    2744:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    2746:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    274a:	e7f9      	b.n	2740 <bootutil_img_validate+0xaa>
                return rc;
    274c:	4604      	mov	r4, r0
    274e:	e7f7      	b.n	2740 <bootutil_img_validate+0xaa>

00002750 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    2750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2754:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    2756:	2800      	cmp	r0, #0
    2758:	d04a      	beq.n	27f0 <bootutil_tlv_iter_begin+0xa0>
    275a:	4605      	mov	r5, r0
    275c:	2900      	cmp	r1, #0
    275e:	d04a      	beq.n	27f6 <bootutil_tlv_iter_begin+0xa6>
    2760:	2a00      	cmp	r2, #0
    2762:	d04b      	beq.n	27fc <bootutil_tlv_iter_begin+0xac>
    2764:	4699      	mov	r9, r3
    2766:	4617      	mov	r7, r2
    2768:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    276a:	890e      	ldrh	r6, [r1, #8]
    276c:	68cb      	ldr	r3, [r1, #12]
    276e:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    2770:	2304      	movs	r3, #4
    2772:	eb0d 0203 	add.w	r2, sp, r3
    2776:	4631      	mov	r1, r6
    2778:	4638      	mov	r0, r7
    277a:	f7fe fbe1 	bl	f40 <flash_area_read>
    277e:	4680      	mov	r8, r0
    2780:	2800      	cmp	r0, #0
    2782:	d13e      	bne.n	2802 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    2784:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2788:	f646 1308 	movw	r3, #26888	; 0x6908
    278c:	429a      	cmp	r2, r3
    278e:	d01e      	beq.n	27ce <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    2790:	8963      	ldrh	r3, [r4, #10]
    2792:	2b00      	cmp	r3, #0
    2794:	d13b      	bne.n	280e <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    2796:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    279a:	f646 1307 	movw	r3, #26887	; 0x6907
    279e:	429a      	cmp	r2, r3
    27a0:	d138      	bne.n	2814 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    27a2:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    27a4:	606f      	str	r7, [r5, #4]
    it->type = type;
    27a6:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    27aa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    27ae:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    27b0:	8963      	ldrh	r3, [r4, #10]
    27b2:	4433      	add	r3, r6
    27b4:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    27b6:	8963      	ldrh	r3, [r4, #10]
    27b8:	4433      	add	r3, r6
    27ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    27be:	4413      	add	r3, r2
    27c0:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    27c2:	3604      	adds	r6, #4
    27c4:	612e      	str	r6, [r5, #16]
    return 0;
}
    27c6:	4640      	mov	r0, r8
    27c8:	b003      	add	sp, #12
    27ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    27ce:	8963      	ldrh	r3, [r4, #10]
    27d0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    27d4:	428b      	cmp	r3, r1
    27d6:	d117      	bne.n	2808 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    27d8:	2304      	movs	r3, #4
    27da:	eb0d 0203 	add.w	r2, sp, r3
    27de:	4431      	add	r1, r6
    27e0:	4638      	mov	r0, r7
    27e2:	f7fe fbad 	bl	f40 <flash_area_read>
    27e6:	2800      	cmp	r0, #0
    27e8:	d0d5      	beq.n	2796 <bootutil_tlv_iter_begin+0x46>
            return -1;
    27ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    27ee:	e7ea      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>
        return -1;
    27f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    27f4:	e7e7      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>
    27f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    27fa:	e7e4      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>
    27fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2800:	e7e1      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2802:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2806:	e7de      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>
            return -1;
    2808:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    280c:	e7db      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>
        return -1;
    280e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2812:	e7d8      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2814:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2818:	e7d5      	b.n	27c6 <bootutil_tlv_iter_begin+0x76>

0000281a <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    281a:	2800      	cmp	r0, #0
    281c:	d04d      	beq.n	28ba <bootutil_tlv_iter_next+0xa0>
{
    281e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2820:	b083      	sub	sp, #12
    2822:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    2824:	6800      	ldr	r0, [r0, #0]
    2826:	2800      	cmp	r0, #0
    2828:	d04b      	beq.n	28c2 <bootutil_tlv_iter_next+0xa8>
    282a:	461d      	mov	r5, r3
    282c:	4616      	mov	r6, r2
    282e:	460f      	mov	r7, r1
    2830:	6863      	ldr	r3, [r4, #4]
    2832:	bb0b      	cbnz	r3, 2878 <bootutil_tlv_iter_next+0x5e>
        return -1;
    2834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2838:	e03a      	b.n	28b0 <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    283a:	2304      	movs	r3, #4
    283c:	eb0d 0203 	add.w	r2, sp, r3
    2840:	6921      	ldr	r1, [r4, #16]
    2842:	6860      	ldr	r0, [r4, #4]
    2844:	f7fe fb7c 	bl	f40 <flash_area_read>
        if (rc) {
    2848:	4601      	mov	r1, r0
    284a:	2800      	cmp	r0, #0
    284c:	d13c      	bne.n	28c8 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    284e:	7aa3      	ldrb	r3, [r4, #10]
    2850:	b11b      	cbz	r3, 285a <bootutil_tlv_iter_next+0x40>
    2852:	6922      	ldr	r2, [r4, #16]
    2854:	68e3      	ldr	r3, [r4, #12]
    2856:	429a      	cmp	r2, r3
    2858:	d239      	bcs.n	28ce <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    285a:	8923      	ldrh	r3, [r4, #8]
    285c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2860:	4293      	cmp	r3, r2
    2862:	d017      	beq.n	2894 <bootutil_tlv_iter_next+0x7a>
    2864:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2868:	4293      	cmp	r3, r2
    286a:	d013      	beq.n	2894 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    286c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2870:	6923      	ldr	r3, [r4, #16]
    2872:	4418      	add	r0, r3
    2874:	3004      	adds	r0, #4
    2876:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    2878:	6920      	ldr	r0, [r4, #16]
    287a:	6963      	ldr	r3, [r4, #20]
    287c:	4298      	cmp	r0, r3
    287e:	d21a      	bcs.n	28b6 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    2880:	6823      	ldr	r3, [r4, #0]
    2882:	895b      	ldrh	r3, [r3, #10]
    2884:	2b00      	cmp	r3, #0
    2886:	d0d8      	beq.n	283a <bootutil_tlv_iter_next+0x20>
    2888:	68e3      	ldr	r3, [r4, #12]
    288a:	4283      	cmp	r3, r0
    288c:	d1d5      	bne.n	283a <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    288e:	3004      	adds	r0, #4
    2890:	6120      	str	r0, [r4, #16]
    2892:	e7d2      	b.n	283a <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    2894:	b115      	cbz	r5, 289c <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    2896:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    289a:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    289c:	6923      	ldr	r3, [r4, #16]
    289e:	3304      	adds	r3, #4
    28a0:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    28a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    28a6:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    28a8:	6922      	ldr	r2, [r4, #16]
    28aa:	4413      	add	r3, r2
    28ac:	3304      	adds	r3, #4
    28ae:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    28b0:	4608      	mov	r0, r1
    28b2:	b003      	add	sp, #12
    28b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    28b6:	2101      	movs	r1, #1
    28b8:	e7fa      	b.n	28b0 <bootutil_tlv_iter_next+0x96>
        return -1;
    28ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    28be:	4608      	mov	r0, r1
    28c0:	4770      	bx	lr
        return -1;
    28c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    28c6:	e7f3      	b.n	28b0 <bootutil_tlv_iter_next+0x96>
            return -1;
    28c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    28cc:	e7f0      	b.n	28b0 <bootutil_tlv_iter_next+0x96>
            return 1;
    28ce:	2101      	movs	r1, #1
    28d0:	e7ee      	b.n	28b0 <bootutil_tlv_iter_next+0x96>

000028d2 <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    28d2:	b119      	cbz	r1, 28dc <flash_area_id_from_multi_image_slot+0xa>
    28d4:	2901      	cmp	r1, #1
    28d6:	d003      	beq.n	28e0 <flash_area_id_from_multi_image_slot+0xe>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    28d8:	20ff      	movs	r0, #255	; 0xff
    28da:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    28dc:	2001      	movs	r0, #1
    28de:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    28e0:	2002      	movs	r0, #2
}
    28e2:	4770      	bx	lr

000028e4 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    28e4:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    28e6:	226c      	movs	r2, #108	; 0x6c
    28e8:	2100      	movs	r1, #0
    28ea:	f7fe fa72 	bl	dd2 <memset>
}
    28ee:	bd08      	pop	{r3, pc}

000028f0 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
    28f0:	2300      	movs	r3, #0
    28f2:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    28f4:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    28f6:	460b      	mov	r3, r1
    28f8:	b1e1      	cbz	r1, 2934 <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    28fa:	4a19      	ldr	r2, [pc, #100]	; (2960 <mbedtls_sha256_starts_ret+0x70>)
    28fc:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    28fe:	4a19      	ldr	r2, [pc, #100]	; (2964 <mbedtls_sha256_starts_ret+0x74>)
    2900:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    2902:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    2906:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    290a:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    290e:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    2910:	4a15      	ldr	r2, [pc, #84]	; (2968 <mbedtls_sha256_starts_ret+0x78>)
    2912:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    2914:	4a15      	ldr	r2, [pc, #84]	; (296c <mbedtls_sha256_starts_ret+0x7c>)
    2916:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    2918:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    291c:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    2920:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    2924:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    2926:	4a12      	ldr	r2, [pc, #72]	; (2970 <mbedtls_sha256_starts_ret+0x80>)
    2928:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    292a:	4a12      	ldr	r2, [pc, #72]	; (2974 <mbedtls_sha256_starts_ret+0x84>)
    292c:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    292e:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    2930:	2000      	movs	r0, #0
    2932:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    2934:	4a10      	ldr	r2, [pc, #64]	; (2978 <mbedtls_sha256_starts_ret+0x88>)
    2936:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    2938:	4a10      	ldr	r2, [pc, #64]	; (297c <mbedtls_sha256_starts_ret+0x8c>)
    293a:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    293c:	4a10      	ldr	r2, [pc, #64]	; (2980 <mbedtls_sha256_starts_ret+0x90>)
    293e:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    2940:	4a10      	ldr	r2, [pc, #64]	; (2984 <mbedtls_sha256_starts_ret+0x94>)
    2942:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    2944:	4a10      	ldr	r2, [pc, #64]	; (2988 <mbedtls_sha256_starts_ret+0x98>)
    2946:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    2948:	4a10      	ldr	r2, [pc, #64]	; (298c <mbedtls_sha256_starts_ret+0x9c>)
    294a:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    294c:	4a10      	ldr	r2, [pc, #64]	; (2990 <mbedtls_sha256_starts_ret+0xa0>)
    294e:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    2950:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    2954:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    2958:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    295c:	6242      	str	r2, [r0, #36]	; 0x24
    295e:	e7e6      	b.n	292e <mbedtls_sha256_starts_ret+0x3e>
    2960:	c1059ed8 	.word	0xc1059ed8
    2964:	367cd507 	.word	0x367cd507
    2968:	f70e5939 	.word	0xf70e5939
    296c:	ffc00b31 	.word	0xffc00b31
    2970:	64f98fa7 	.word	0x64f98fa7
    2974:	befa4fa4 	.word	0xbefa4fa4
    2978:	6a09e667 	.word	0x6a09e667
    297c:	bb67ae85 	.word	0xbb67ae85
    2980:	3c6ef372 	.word	0x3c6ef372
    2984:	a54ff53a 	.word	0xa54ff53a
    2988:	510e527f 	.word	0x510e527f
    298c:	9b05688c 	.word	0x9b05688c
    2990:	1f83d9ab 	.word	0x1f83d9ab

00002994 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    2994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2998:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
    299a:	2300      	movs	r3, #0
    299c:	e005      	b.n	29aa <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
    299e:	1c9a      	adds	r2, r3, #2
    29a0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    29a4:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    29a8:	3301      	adds	r3, #1
    29aa:	2b07      	cmp	r3, #7
    29ac:	d9f7      	bls.n	299e <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    29ae:	2200      	movs	r2, #0
    29b0:	e04b      	b.n	2a4a <mbedtls_internal_sha256_process+0xb6>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
    29b2:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    29b6:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    29ba:	7863      	ldrb	r3, [r4, #1]
    29bc:	041b      	lsls	r3, r3, #16
    29be:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    29c2:	78a5      	ldrb	r5, [r4, #2]
    29c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    29c8:	78e4      	ldrb	r4, [r4, #3]
    29ca:	4323      	orrs	r3, r4
    29cc:	ac08      	add	r4, sp, #32
    29ce:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    29d2:	9b07      	ldr	r3, [sp, #28]
    29d4:	9c04      	ldr	r4, [sp, #16]
    29d6:	ea4f 25f4 	mov.w	r5, r4, ror #11
    29da:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    29de:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    29e2:	442b      	add	r3, r5
    29e4:	9e06      	ldr	r6, [sp, #24]
    29e6:	9f05      	ldr	r7, [sp, #20]
    29e8:	ea86 0507 	eor.w	r5, r6, r7
    29ec:	4025      	ands	r5, r4
    29ee:	4075      	eors	r5, r6
    29f0:	442b      	add	r3, r5
    29f2:	4d31      	ldr	r5, [pc, #196]	; (2ab8 <mbedtls_internal_sha256_process+0x124>)
    29f4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    29f8:	442b      	add	r3, r5
    29fa:	ad08      	add	r5, sp, #32
    29fc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    2a00:	442b      	add	r3, r5
    2a02:	f8dd e000 	ldr.w	lr, [sp]
    2a06:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    2a0a:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    2a0e:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    2a12:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2a16:	ea0e 0508 	and.w	r5, lr, r8
    2a1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2a1e:	ea4e 0a08 	orr.w	sl, lr, r8
    2a22:	ea09 0a0a 	and.w	sl, r9, sl
    2a26:	ea45 050a 	orr.w	r5, r5, sl
    2a2a:	44ac      	add	ip, r5
    2a2c:	9d03      	ldr	r5, [sp, #12]
    2a2e:	441d      	add	r5, r3
    2a30:	4463      	add	r3, ip

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    2a32:	9607      	str	r6, [sp, #28]
    2a34:	9706      	str	r7, [sp, #24]
    2a36:	9405      	str	r4, [sp, #20]
    2a38:	9504      	str	r5, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    2a3a:	f8cd 900c 	str.w	r9, [sp, #12]
    2a3e:	f8cd 8008 	str.w	r8, [sp, #8]
    2a42:	f8cd e004 	str.w	lr, [sp, #4]
    2a46:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
    2a48:	3201      	adds	r2, #1
    2a4a:	2a3f      	cmp	r2, #63	; 0x3f
    2a4c:	d822      	bhi.n	2a94 <mbedtls_internal_sha256_process+0x100>
        if( i < 16 )
    2a4e:	2a0f      	cmp	r2, #15
    2a50:	d9af      	bls.n	29b2 <mbedtls_internal_sha256_process+0x1e>
            R( i );
    2a52:	1e93      	subs	r3, r2, #2
    2a54:	ac08      	add	r4, sp, #32
    2a56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    2a5a:	ea4f 43f5 	mov.w	r3, r5, ror #19
    2a5e:	ea83 4375 	eor.w	r3, r3, r5, ror #17
    2a62:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
    2a66:	1fd5      	subs	r5, r2, #7
    2a68:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    2a6c:	442b      	add	r3, r5
    2a6e:	f1a2 050f 	sub.w	r5, r2, #15
    2a72:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
    2a76:	ea4f 45b6 	mov.w	r5, r6, ror #18
    2a7a:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
    2a7e:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
    2a82:	442b      	add	r3, r5
    2a84:	f1a2 0510 	sub.w	r5, r2, #16
    2a88:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    2a8c:	442b      	add	r3, r5
    2a8e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    2a92:	e79e      	b.n	29d2 <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    2a94:	2300      	movs	r3, #0
    2a96:	e008      	b.n	2aaa <mbedtls_internal_sha256_process+0x116>
        ctx->state[i] += A[i];
    2a98:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
    2a9c:	1c99      	adds	r1, r3, #2
    2a9e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    2aa2:	4422      	add	r2, r4
    2aa4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    2aa8:	3301      	adds	r3, #1
    2aaa:	2b07      	cmp	r3, #7
    2aac:	d9f4      	bls.n	2a98 <mbedtls_internal_sha256_process+0x104>

    return( 0 );
}
    2aae:	2000      	movs	r0, #0
    2ab0:	b048      	add	sp, #288	; 0x120
    2ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ab6:	bf00      	nop
    2ab8:	00002fe0 	.word	0x00002fe0

00002abc <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    2abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    2ac0:	b3da      	cbz	r2, 2b3a <mbedtls_sha256_update_ret+0x7e>
    2ac2:	4606      	mov	r6, r0
    2ac4:	460d      	mov	r5, r1
    2ac6:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    2ac8:	6803      	ldr	r3, [r0, #0]
    2aca:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    2ace:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    2ad2:	4413      	add	r3, r2
    2ad4:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    2ad6:	4293      	cmp	r3, r2
    2ad8:	d202      	bcs.n	2ae0 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    2ada:	6843      	ldr	r3, [r0, #4]
    2adc:	3301      	adds	r3, #1
    2ade:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    2ae0:	b10f      	cbz	r7, 2ae6 <mbedtls_sha256_update_ret+0x2a>
    2ae2:	4544      	cmp	r4, r8
    2ae4:	d20a      	bcs.n	2afc <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    2ae6:	2c3f      	cmp	r4, #63	; 0x3f
    2ae8:	d91b      	bls.n	2b22 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    2aea:	4629      	mov	r1, r5
    2aec:	4630      	mov	r0, r6
    2aee:	f7ff ff51 	bl	2994 <mbedtls_internal_sha256_process>
    2af2:	4603      	mov	r3, r0
    2af4:	bb10      	cbnz	r0, 2b3c <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    2af6:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    2af8:	3c40      	subs	r4, #64	; 0x40
    2afa:	e7f4      	b.n	2ae6 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    2afc:	f106 0928 	add.w	r9, r6, #40	; 0x28
    2b00:	4642      	mov	r2, r8
    2b02:	4629      	mov	r1, r5
    2b04:	eb09 0007 	add.w	r0, r9, r7
    2b08:	f7fe f956 	bl	db8 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2b0c:	4649      	mov	r1, r9
    2b0e:	4630      	mov	r0, r6
    2b10:	f7ff ff40 	bl	2994 <mbedtls_internal_sha256_process>
    2b14:	4603      	mov	r3, r0
    2b16:	b988      	cbnz	r0, 2b3c <mbedtls_sha256_update_ret+0x80>
        input += fill;
    2b18:	4445      	add	r5, r8
        ilen  -= fill;
    2b1a:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    2b1e:	2700      	movs	r7, #0
    2b20:	e7e1      	b.n	2ae6 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    2b22:	b90c      	cbnz	r4, 2b28 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    2b24:	2300      	movs	r3, #0
    2b26:	e009      	b.n	2b3c <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    2b28:	f106 0028 	add.w	r0, r6, #40	; 0x28
    2b2c:	4622      	mov	r2, r4
    2b2e:	4629      	mov	r1, r5
    2b30:	4438      	add	r0, r7
    2b32:	f7fe f941 	bl	db8 <memcpy>
    return( 0 );
    2b36:	2300      	movs	r3, #0
    2b38:	e000      	b.n	2b3c <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    2b3a:	2300      	movs	r3, #0
}
    2b3c:	4618      	mov	r0, r3
    2b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00002b42 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    2b42:	b570      	push	{r4, r5, r6, lr}
    2b44:	4604      	mov	r4, r0
    2b46:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    2b48:	6803      	ldr	r3, [r0, #0]
    2b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    2b4e:	1c58      	adds	r0, r3, #1
    2b50:	4423      	add	r3, r4
    2b52:	2280      	movs	r2, #128	; 0x80
    2b54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    2b58:	2838      	cmp	r0, #56	; 0x38
    2b5a:	d87b      	bhi.n	2c54 <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    2b5c:	f104 0328 	add.w	r3, r4, #40	; 0x28
    2b60:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    2b64:	2100      	movs	r1, #0
    2b66:	4418      	add	r0, r3
    2b68:	f7fe f933 	bl	dd2 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    2b6c:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    2b6e:	6863      	ldr	r3, [r4, #4]
    2b70:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    2b72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    2b76:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    2b78:	0e19      	lsrs	r1, r3, #24
    2b7a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    2b7e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2b82:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    2b86:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2b8a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    2b8e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    2b92:	0e13      	lsrs	r3, r2, #24
    2b94:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2b98:	f3c2 4307 	ubfx	r3, r2, #16, #8
    2b9c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    2ba0:	f3c2 2307 	ubfx	r3, r2, #8, #8
    2ba4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    2ba8:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2bac:	f104 0128 	add.w	r1, r4, #40	; 0x28
    2bb0:	4620      	mov	r0, r4
    2bb2:	f7ff feef 	bl	2994 <mbedtls_internal_sha256_process>
    2bb6:	4603      	mov	r3, r0
    2bb8:	2800      	cmp	r0, #0
    2bba:	d159      	bne.n	2c70 <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    2bbc:	7ae2      	ldrb	r2, [r4, #11]
    2bbe:	702a      	strb	r2, [r5, #0]
    2bc0:	7aa2      	ldrb	r2, [r4, #10]
    2bc2:	706a      	strb	r2, [r5, #1]
    2bc4:	7a62      	ldrb	r2, [r4, #9]
    2bc6:	70aa      	strb	r2, [r5, #2]
    2bc8:	7a22      	ldrb	r2, [r4, #8]
    2bca:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    2bcc:	7be2      	ldrb	r2, [r4, #15]
    2bce:	712a      	strb	r2, [r5, #4]
    2bd0:	7ba2      	ldrb	r2, [r4, #14]
    2bd2:	716a      	strb	r2, [r5, #5]
    2bd4:	7b62      	ldrb	r2, [r4, #13]
    2bd6:	71aa      	strb	r2, [r5, #6]
    2bd8:	7b22      	ldrb	r2, [r4, #12]
    2bda:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    2bdc:	7ce2      	ldrb	r2, [r4, #19]
    2bde:	722a      	strb	r2, [r5, #8]
    2be0:	7ca2      	ldrb	r2, [r4, #18]
    2be2:	726a      	strb	r2, [r5, #9]
    2be4:	7c62      	ldrb	r2, [r4, #17]
    2be6:	72aa      	strb	r2, [r5, #10]
    2be8:	7c22      	ldrb	r2, [r4, #16]
    2bea:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    2bec:	7de2      	ldrb	r2, [r4, #23]
    2bee:	732a      	strb	r2, [r5, #12]
    2bf0:	7da2      	ldrb	r2, [r4, #22]
    2bf2:	736a      	strb	r2, [r5, #13]
    2bf4:	7d62      	ldrb	r2, [r4, #21]
    2bf6:	73aa      	strb	r2, [r5, #14]
    2bf8:	7d22      	ldrb	r2, [r4, #20]
    2bfa:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    2bfc:	7ee2      	ldrb	r2, [r4, #27]
    2bfe:	742a      	strb	r2, [r5, #16]
    2c00:	7ea2      	ldrb	r2, [r4, #26]
    2c02:	746a      	strb	r2, [r5, #17]
    2c04:	7e62      	ldrb	r2, [r4, #25]
    2c06:	74aa      	strb	r2, [r5, #18]
    2c08:	7e22      	ldrb	r2, [r4, #24]
    2c0a:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    2c0c:	7fe2      	ldrb	r2, [r4, #31]
    2c0e:	752a      	strb	r2, [r5, #20]
    2c10:	7fa2      	ldrb	r2, [r4, #30]
    2c12:	756a      	strb	r2, [r5, #21]
    2c14:	7f62      	ldrb	r2, [r4, #29]
    2c16:	75aa      	strb	r2, [r5, #22]
    2c18:	7f22      	ldrb	r2, [r4, #28]
    2c1a:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    2c1c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    2c20:	762a      	strb	r2, [r5, #24]
    2c22:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    2c26:	766a      	strb	r2, [r5, #25]
    2c28:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    2c2c:	76aa      	strb	r2, [r5, #26]
    2c2e:	f894 2020 	ldrb.w	r2, [r4, #32]
    2c32:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    2c34:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    2c36:	b9da      	cbnz	r2, 2c70 <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    2c38:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    2c3c:	772b      	strb	r3, [r5, #28]
    2c3e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    2c42:	776b      	strb	r3, [r5, #29]
    2c44:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    2c48:	77ab      	strb	r3, [r5, #30]
    2c4a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    2c4e:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    2c50:	4613      	mov	r3, r2
    2c52:	e00d      	b.n	2c70 <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    2c54:	f104 0628 	add.w	r6, r4, #40	; 0x28
    2c58:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    2c5c:	2100      	movs	r1, #0
    2c5e:	4430      	add	r0, r6
    2c60:	f7fe f8b7 	bl	dd2 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2c64:	4631      	mov	r1, r6
    2c66:	4620      	mov	r0, r4
    2c68:	f7ff fe94 	bl	2994 <mbedtls_internal_sha256_process>
    2c6c:	4603      	mov	r3, r0
    2c6e:	b108      	cbz	r0, 2c74 <mbedtls_sha256_finish_ret+0x132>
}
    2c70:	4618      	mov	r0, r3
    2c72:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    2c74:	2238      	movs	r2, #56	; 0x38
    2c76:	2100      	movs	r1, #0
    2c78:	4630      	mov	r0, r6
    2c7a:	f7fe f8aa 	bl	dd2 <memset>
    2c7e:	e775      	b.n	2b6c <mbedtls_sha256_finish_ret+0x2a>

00002c80 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    2c80:	6843      	ldr	r3, [r0, #4]
    2c82:	428b      	cmp	r3, r1
    2c84:	d808      	bhi.n	2c98 <hal_flash_check_addr+0x18>
    2c86:	6882      	ldr	r2, [r0, #8]
    2c88:	4413      	add	r3, r2
    2c8a:	428b      	cmp	r3, r1
    2c8c:	d301      	bcc.n	2c92 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
    2c8e:	2000      	movs	r0, #0
}
    2c90:	4770      	bx	lr
        return SYS_EINVAL;
    2c92:	f06f 0001 	mvn.w	r0, #1
    2c96:	4770      	bx	lr
    2c98:	f06f 0001 	mvn.w	r0, #1
    2c9c:	4770      	bx	lr

00002c9e <hal_flash_init>:
{
    2c9e:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    2ca0:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
    2ca2:	462c      	mov	r4, r5
    2ca4:	e001      	b.n	2caa <hal_flash_init+0xc>
    2ca6:	3401      	adds	r4, #1
    2ca8:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    2caa:	4620      	mov	r0, r4
    2cac:	f7fd fcc8 	bl	640 <hal_bsp_flash_dev>
        if (!hf) {
    2cb0:	b138      	cbz	r0, 2cc2 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
    2cb2:	6802      	ldr	r2, [r0, #0]
    2cb4:	6952      	ldr	r2, [r2, #20]
    2cb6:	4790      	blx	r2
    2cb8:	2800      	cmp	r0, #0
    2cba:	d0f4      	beq.n	2ca6 <hal_flash_init+0x8>
            rc = SYS_EIO;
    2cbc:	f06f 0504 	mvn.w	r5, #4
    2cc0:	e7f1      	b.n	2ca6 <hal_flash_init+0x8>
}
    2cc2:	4628      	mov	r0, r5
    2cc4:	bd38      	pop	{r3, r4, r5, pc}

00002cc6 <hal_flash_align>:
{
    2cc6:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    2cc8:	f7fd fcba 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    2ccc:	b108      	cbz	r0, 2cd2 <hal_flash_align+0xc>
    return hf->hf_align;
    2cce:	7c00      	ldrb	r0, [r0, #16]
}
    2cd0:	bd08      	pop	{r3, pc}
        return 1;
    2cd2:	2001      	movs	r0, #1
    2cd4:	e7fc      	b.n	2cd0 <hal_flash_align+0xa>

00002cd6 <hal_flash_erased_val>:
{
    2cd6:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    2cd8:	f7fd fcb2 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    2cdc:	b108      	cbz	r0, 2ce2 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    2cde:	7d00      	ldrb	r0, [r0, #20]
}
    2ce0:	bd08      	pop	{r3, pc}
        return 1;
    2ce2:	2001      	movs	r0, #1
    2ce4:	e7fc      	b.n	2ce0 <hal_flash_erased_val+0xa>

00002ce6 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    2ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cea:	460d      	mov	r5, r1
    2cec:	4690      	mov	r8, r2
    2cee:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    2cf0:	f7fd fca6 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    2cf4:	b1c0      	cbz	r0, 2d28 <hal_flash_read+0x42>
    2cf6:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    2cf8:	4629      	mov	r1, r5
    2cfa:	f7ff ffc1 	bl	2c80 <hal_flash_check_addr>
    2cfe:	b9b0      	cbnz	r0, 2d2e <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
    2d00:	19a9      	adds	r1, r5, r6
    2d02:	4620      	mov	r0, r4
    2d04:	f7ff ffbc 	bl	2c80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    2d08:	b9a0      	cbnz	r0, 2d34 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    2d0a:	6823      	ldr	r3, [r4, #0]
    2d0c:	681f      	ldr	r7, [r3, #0]
    2d0e:	4633      	mov	r3, r6
    2d10:	4642      	mov	r2, r8
    2d12:	4629      	mov	r1, r5
    2d14:	4620      	mov	r0, r4
    2d16:	47b8      	blx	r7
    if (rc != 0) {
    2d18:	4603      	mov	r3, r0
    2d1a:	b910      	cbnz	r0, 2d22 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
    2d1c:	4618      	mov	r0, r3
    2d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    2d22:	f06f 0304 	mvn.w	r3, #4
    2d26:	e7f9      	b.n	2d1c <hal_flash_read+0x36>
        return SYS_EINVAL;
    2d28:	f06f 0301 	mvn.w	r3, #1
    2d2c:	e7f6      	b.n	2d1c <hal_flash_read+0x36>
        return SYS_EINVAL;
    2d2e:	f06f 0301 	mvn.w	r3, #1
    2d32:	e7f3      	b.n	2d1c <hal_flash_read+0x36>
    2d34:	f06f 0301 	mvn.w	r3, #1
    2d38:	e7f0      	b.n	2d1c <hal_flash_read+0x36>
	...

00002d3c <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    2d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d40:	4605      	mov	r5, r0
    2d42:	460e      	mov	r6, r1
    2d44:	4690      	mov	r8, r2
    2d46:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    2d48:	f7fd fc7a 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    2d4c:	b310      	cbz	r0, 2d94 <hal_flash_write+0x58>
    2d4e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    2d50:	4631      	mov	r1, r6
    2d52:	f7ff ff95 	bl	2c80 <hal_flash_check_addr>
    2d56:	bb00      	cbnz	r0, 2d9a <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    2d58:	19f1      	adds	r1, r6, r7
    2d5a:	4620      	mov	r0, r4
    2d5c:	f7ff ff90 	bl	2c80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    2d60:	b9f0      	cbnz	r0, 2da0 <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    2d62:	08eb      	lsrs	r3, r5, #3
    2d64:	4a11      	ldr	r2, [pc, #68]	; (2dac <hal_flash_write+0x70>)
    2d66:	5cd3      	ldrb	r3, [r2, r3]
    2d68:	f005 0507 	and.w	r5, r5, #7
    2d6c:	fa43 f505 	asr.w	r5, r3, r5
    2d70:	f015 0f01 	tst.w	r5, #1
    2d74:	d117      	bne.n	2da6 <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    2d76:	6823      	ldr	r3, [r4, #0]
    2d78:	685d      	ldr	r5, [r3, #4]
    2d7a:	463b      	mov	r3, r7
    2d7c:	4642      	mov	r2, r8
    2d7e:	4631      	mov	r1, r6
    2d80:	4620      	mov	r0, r4
    2d82:	47a8      	blx	r5
    if (rc != 0) {
    2d84:	4603      	mov	r3, r0
    2d86:	b910      	cbnz	r0, 2d8e <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    2d88:	4618      	mov	r0, r3
    2d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    2d8e:	f06f 0304 	mvn.w	r3, #4
    2d92:	e7f9      	b.n	2d88 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    2d94:	f06f 0301 	mvn.w	r3, #1
    2d98:	e7f6      	b.n	2d88 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    2d9a:	f06f 0301 	mvn.w	r3, #1
    2d9e:	e7f3      	b.n	2d88 <hal_flash_write+0x4c>
    2da0:	f06f 0301 	mvn.w	r3, #1
    2da4:	e7f0      	b.n	2d88 <hal_flash_write+0x4c>
        return SYS_EACCES;
    2da6:	f06f 0306 	mvn.w	r3, #6
    2daa:	e7ed      	b.n	2d88 <hal_flash_write+0x4c>
    2dac:	200018fc 	.word	0x200018fc

00002db0 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    2db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2db4:	b083      	sub	sp, #12
    2db6:	4605      	mov	r5, r0
    2db8:	460e      	mov	r6, r1
    2dba:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    2dbc:	f7fd fc40 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    2dc0:	2800      	cmp	r0, #0
    2dc2:	d04b      	beq.n	2e5c <hal_flash_erase+0xac>
    2dc4:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    2dc6:	4631      	mov	r1, r6
    2dc8:	f7ff ff5a 	bl	2c80 <hal_flash_check_addr>
    2dcc:	2800      	cmp	r0, #0
    2dce:	d148      	bne.n	2e62 <hal_flash_erase+0xb2>
      hal_flash_check_addr(hf, address + num_bytes)) {
    2dd0:	eb06 0708 	add.w	r7, r6, r8
    2dd4:	4639      	mov	r1, r7
    2dd6:	4620      	mov	r0, r4
    2dd8:	f7ff ff52 	bl	2c80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    2ddc:	2800      	cmp	r0, #0
    2dde:	d143      	bne.n	2e68 <hal_flash_erase+0xb8>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    2de0:	08eb      	lsrs	r3, r5, #3
    2de2:	4a26      	ldr	r2, [pc, #152]	; (2e7c <hal_flash_erase+0xcc>)
    2de4:	5cd3      	ldrb	r3, [r2, r3]
    2de6:	f005 0507 	and.w	r5, r5, #7
    2dea:	fa43 f505 	asr.w	r5, r3, r5
    2dee:	f015 0501 	ands.w	r5, r5, #1
    2df2:	d13c      	bne.n	2e6e <hal_flash_erase+0xbe>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    2df4:	42b7      	cmp	r7, r6
    2df6:	d93d      	bls.n	2e74 <hal_flash_erase+0xc4>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    2df8:	6823      	ldr	r3, [r4, #0]
    2dfa:	699b      	ldr	r3, [r3, #24]
    2dfc:	b363      	cbz	r3, 2e58 <hal_flash_erase+0xa8>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    2dfe:	4642      	mov	r2, r8
    2e00:	4631      	mov	r1, r6
    2e02:	4620      	mov	r0, r4
    2e04:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    2e06:	4628      	mov	r0, r5
    2e08:	b003      	add	sp, #12
    2e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
    2e0e:	2300      	movs	r3, #0
    2e10:	461a      	mov	r2, r3
    2e12:	4619      	mov	r1, r3
    2e14:	4618      	mov	r0, r3
    2e16:	f7fd ff0f 	bl	c38 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    2e1a:	f108 0801 	add.w	r8, r8, #1
    2e1e:	68e3      	ldr	r3, [r4, #12]
    2e20:	4543      	cmp	r3, r8
    2e22:	ddf0      	ble.n	2e06 <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    2e24:	6823      	ldr	r3, [r4, #0]
    2e26:	f8d3 900c 	ldr.w	r9, [r3, #12]
    2e2a:	466b      	mov	r3, sp
    2e2c:	aa01      	add	r2, sp, #4
    2e2e:	4641      	mov	r1, r8
    2e30:	4620      	mov	r0, r4
    2e32:	47c8      	blx	r9
            assert(rc == 0);
    2e34:	2800      	cmp	r0, #0
    2e36:	d1ea      	bne.n	2e0e <hal_flash_erase+0x5e>
            end_area = start + size;
    2e38:	9901      	ldr	r1, [sp, #4]
    2e3a:	9b00      	ldr	r3, [sp, #0]
    2e3c:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    2e3e:	429e      	cmp	r6, r3
    2e40:	d2eb      	bcs.n	2e1a <hal_flash_erase+0x6a>
    2e42:	428f      	cmp	r7, r1
    2e44:	d9e9      	bls.n	2e1a <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    2e46:	6823      	ldr	r3, [r4, #0]
    2e48:	689b      	ldr	r3, [r3, #8]
    2e4a:	4620      	mov	r0, r4
    2e4c:	4798      	blx	r3
    2e4e:	2800      	cmp	r0, #0
    2e50:	d0e3      	beq.n	2e1a <hal_flash_erase+0x6a>
                    return SYS_EIO;
    2e52:	f06f 0504 	mvn.w	r5, #4
    2e56:	e7d6      	b.n	2e06 <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    2e58:	46a8      	mov	r8, r5
    2e5a:	e7e0      	b.n	2e1e <hal_flash_erase+0x6e>
        return SYS_EINVAL;
    2e5c:	f06f 0501 	mvn.w	r5, #1
    2e60:	e7d1      	b.n	2e06 <hal_flash_erase+0x56>
        return SYS_EINVAL;
    2e62:	f06f 0501 	mvn.w	r5, #1
    2e66:	e7ce      	b.n	2e06 <hal_flash_erase+0x56>
    2e68:	f06f 0501 	mvn.w	r5, #1
    2e6c:	e7cb      	b.n	2e06 <hal_flash_erase+0x56>
        return SYS_EACCES;
    2e6e:	f06f 0506 	mvn.w	r5, #6
    2e72:	e7c8      	b.n	2e06 <hal_flash_erase+0x56>
        return SYS_EINVAL;
    2e74:	f06f 0501 	mvn.w	r5, #1
    2e78:	e7c5      	b.n	2e06 <hal_flash_erase+0x56>
    2e7a:	bf00      	nop
    2e7c:	200018fc 	.word	0x200018fc

00002e80 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    2e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e82:	4604      	mov	r4, r0
    2e84:	4616      	mov	r6, r2
    2e86:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    2e88:	6807      	ldr	r7, [r0, #0]
    2e8a:	683f      	ldr	r7, [r7, #0]
    2e8c:	47b8      	blx	r7
    if (rc != 0) {
    2e8e:	b960      	cbnz	r0, 2eaa <hal_flash_is_erased+0x2a>
    2e90:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    2e92:	2300      	movs	r3, #0
    2e94:	42ab      	cmp	r3, r5
    2e96:	d205      	bcs.n	2ea4 <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
    2e98:	5cf1      	ldrb	r1, [r6, r3]
    2e9a:	7d22      	ldrb	r2, [r4, #20]
    2e9c:	4291      	cmp	r1, r2
    2e9e:	d102      	bne.n	2ea6 <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
    2ea0:	3301      	adds	r3, #1
    2ea2:	e7f7      	b.n	2e94 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
    2ea4:	2701      	movs	r7, #1
}
    2ea6:	4638      	mov	r0, r7
    2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    2eaa:	f06f 0704 	mvn.w	r7, #4
    2eae:	e7fa      	b.n	2ea6 <hal_flash_is_erased+0x26>

00002eb0 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    2eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2eb4:	460d      	mov	r5, r1
    2eb6:	4690      	mov	r8, r2
    2eb8:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    2eba:	f7fd fbc1 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    2ebe:	b1f8      	cbz	r0, 2f00 <hal_flash_isempty+0x50>
    2ec0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    2ec2:	4629      	mov	r1, r5
    2ec4:	f7ff fedc 	bl	2c80 <hal_flash_check_addr>
    2ec8:	b9e8      	cbnz	r0, 2f06 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
    2eca:	19a9      	adds	r1, r5, r6
    2ecc:	4620      	mov	r0, r4
    2ece:	f7ff fed7 	bl	2c80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    2ed2:	b9d8      	cbnz	r0, 2f0c <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    2ed4:	6823      	ldr	r3, [r4, #0]
    2ed6:	691f      	ldr	r7, [r3, #16]
    2ed8:	b15f      	cbz	r7, 2ef2 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    2eda:	4633      	mov	r3, r6
    2edc:	4642      	mov	r2, r8
    2ede:	4629      	mov	r1, r5
    2ee0:	4620      	mov	r0, r4
    2ee2:	47b8      	blx	r7
        if (rc < 0) {
    2ee4:	2800      	cmp	r0, #0
    2ee6:	db01      	blt.n	2eec <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    2ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
    2eec:	f06f 0004 	mvn.w	r0, #4
    2ef0:	e7fa      	b.n	2ee8 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    2ef2:	4633      	mov	r3, r6
    2ef4:	4642      	mov	r2, r8
    2ef6:	4629      	mov	r1, r5
    2ef8:	4620      	mov	r0, r4
    2efa:	f7ff ffc1 	bl	2e80 <hal_flash_is_erased>
    2efe:	e7f3      	b.n	2ee8 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    2f00:	f06f 0001 	mvn.w	r0, #1
    2f04:	e7f0      	b.n	2ee8 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    2f06:	f06f 0001 	mvn.w	r0, #1
    2f0a:	e7ed      	b.n	2ee8 <hal_flash_isempty+0x38>
    2f0c:	f06f 0001 	mvn.w	r0, #1
    2f10:	e7ea      	b.n	2ee8 <hal_flash_isempty+0x38>
	...

00002f14 <nrf52k_flash_dev>:
    2f14:	2f2c 0000 0000 0000 0000 0008 0080 0000     ,/..............
    2f24:	0001 0000 00ff 0000                         ........

00002f2c <nrf52k_flash_funcs>:
    2f2c:	0809 0000 0739 0000 06c1 0000 0719 0000     ....9...........
    2f3c:	0000 0000 0715 0000 0000 0000               ............

00002f48 <nrf52_hal_timers>:
    2f48:	1900 2000 0000 0000 0000 0000 0000 0000     ... ............
	...

00002f60 <sysflash_map_dflt>:
	...
    2f68:	4000 0000 0001 0000 8000 0000 a000 0003     .@..............
    2f78:	0002 0000 2000 0004 a000 0003 0003 0000     ..... ..........
    2f88:	c000 0007 1000 0000 0010 0000 4000 0000     .............@..
    2f98:	4000 0000 0011 0000 d000 0007 3000 0000     .@...........0..

00002fa8 <boot_status_tables>:
    2fa8:	0501 0001 0501 0203 0104 0104 0403 0203     ................
    2fb8:	0103 0000                                   ....

00002fbc <boot_img_magic>:
    2fbc:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

00002fcc <boot_swap_tables>:
    2fcc:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    2fdc:	0401 0000                                   ....

00002fe0 <K>:
    2fe0:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    2ff0:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    3000:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    3010:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    3020:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    3030:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    3040:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    3050:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    3060:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    3070:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    3080:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    3090:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    30a0:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    30b0:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    30c0:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    30d0:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  12536	     28	   6420	  18984	   4a28	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
