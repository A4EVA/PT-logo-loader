
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x0001400c vaddr 0x0000400c paddr 0x0000400c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00004024 memsz 0x00004024 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x00004024 align 2**16
         filesz 0x00000084 memsz 0x00006228 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              0000400c  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  0000400c  0000400c  0002015c  2**0  CONTENTS
  2 .ARM.exidx         00000018  0000400c  0000400c  0001400c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  0002015c  2**0  CONTENTS
  5 .data              00000084  200000d8  00004024  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  2000015c  2000015c  0002015c  2**0  CONTENTS
  7 .bss               000061a4  2000015c  000040a8  0002015c  2**2  ALLOC
  8 .stack_dummy       000001b0  20006300  20006300  00020160  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  00020310  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  0002033f  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203be  2**0  CONTENTS, READONLY
 12 .debug_line        0000e411  00000000  00000000  000203c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        0002402c  00000000  00000000  0002e7d3  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      0000702c  00000000  00000000  000527ff  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00000fc0  00000000  00000000  00059830  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00005928  00000000  00000000  0005a7f0  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000c72c  00000000  00000000  00060118  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      000013a8  00000000  00000000  0006c844  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       000026b8  00000000  00000000  0006dbec  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0000400c l    d  .ARM.extab	00000000 .ARM.extab
0000400c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
2000015c l    d  .bssnz	00000000 .bssnz
2000015c l    d  .bss	00000000 .bss
20006300 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001e0 l     F .text	00000034 errata_16
000001e0 l     F .text	00000034 errata_57
000001e0 l     F .text	00000034 errata_37
000001e0 l     F .text	00000034 errata_32
00000214 l     F .text	00000040 errata_31
00000214 l     F .text	00000040 errata_108
00000214 l     F .text	00000040 errata_36
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00003c68 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
000004d8 l     F .text	0000000c hal_spiflash_sector_info
000004e4 l     F .text	00000006 spiflash_cs_activate.isra.4
000004ea l     F .text	00000006 spiflash_cs_deactivate.isra.5
000004f0 l     F .text	00000028 spiflash_release_power_down_generic
000005a4 l     F .text	00000040 spiflash_wait_ready_till.part.6
000005fc l     F .text	00000060 hal_spiflash_read
00000678 l     F .text	000000c0 hal_spiflash_write
00000738 l     F .text	0000007a spiflash_execute_erase
000007b2 l     F .text	00000026 spiflash_erase_cmd
000007e2 l     F .text	00000004 hal_spiflash_erase_sector
00000890 l     F .text	00000004 hal_spiflash_erase
000008f4 l     F .text	0000003a hal_spiflash_init
00003ca0 l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
00003c70 l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000934 l     F .text	00000024 nrf52k_flash_wait_ready
00000958 l     F .text	0000004c nrf52k_flash_erase_sector
000009a4 l     F .text	00000004 nrf52k_flash_init
000009a8 l     F .text	000000c8 nrf52k_flash_write
00000a70 l     F .text	0000000e nrf52k_flash_read
00000a7e l     F .text	00000020 nrf52k_flash_sector_info
00003cd4 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
00003cf0 l     O .text	00000004 CSWTCH.24
00003cf4 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000ef4 l     F .text	00000024 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00003d00 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
00000fc0 l     F .text	00000020 __NVIC_SetPendingIRQ
00000fe0 l     F .text	00000038 hal_timer_read_bsptimer
00001018 l     F .text	0000007e nrf_timer_set_ocmp
00003d04 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_msys.c
000013b0 l     F .text	00000024 os_msys_find_pool
2000015c l     O .bss	00004900 os_msys_1_data
20004a5c l     O .bss	0000000c os_msys_1_mbuf_pool
20004a68 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
000014cc l     F .text	00000016 _os_mbuf_trailingspace
00000000 l    df *ABS*	00000000 os_mempool.c
00001618 l     F .text	00000068 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00001768 l       .text	00000000 SVC_User
00001786 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0000180c l       .text	00000000 test1
00001800 l       .text	00000000 loop1
00001812 l       .text	00000000 res1
0000182e l       .text	00000000 test2
00001836 l       .text	00000000 done
00001822 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001842 l       .text	00000000 test1
0000183e l       .text	00000000 loop1
00001850 l       .text	00000000 test2
0000184c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 console.c
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
20004a88 l     O .bss	00000004 semihost_mbuf
20000148 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
20004a8c l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 flash_map.c
20004a90 l     O .bss	00000078 mfg_areas.7780
00000000 l    df *ABS*	00000000 mfg.c
00001bc4 l     F .text	000000a4 mfg_read_next_mmr
00001c68 l     F .text	00000064 mfg_read_tlv_body
20004b08 l     O .bss	00000001 mfg_initialized
20004b0c l     O .bss	00000018 mfg_mmrs
20004b24 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 sysinit.c
00001dc8 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 loader.c
00001e00 l     F .text	0000008a boot_read_image_size
00001e8a l     F .text	00000030 boot_read_image_headers
00001ebc l     F .text	000000b0 boot_validate_slot.isra.3.constprop.5
00001f6c l     F .text	00000066 boot_read_sectors
00002000 l     F .text	0000007c boot_swap_image
20004b28 l     O .bss	0000006c boot_data
20004b94 l     O .bss	00000400 buf.4971
20004f94 l     O .bss	00000600 primary_slot_sectors.5011
20005594 l     O .bss	00000600 scratch_sectors.5013
20005b94 l     O .bss	00000600 secondary_slot_sectors.5012
20006194 l     O .bss	00000100 tmpbuf.4904
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00003ed4 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002988 l     F .text	0000005c boot_write_trailer
00003ef4 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00003f08 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
0000326c l     F .text	0000001c hal_flash_check_addr
20006294 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 tinyprintf.c
000034ae l     F .text	000000b2 ui2a
00003560 l     F .text	00000022 putf
00003584 l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 mynewt.c
00003940 l     F .text	00000004 stdin_read
00003944 l     F .text	00000010 stdout_write
20000150 l     O .data	00000004 _stdin
20000154 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00001954 g     F .text	00000050 console_buffer
20006300 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
200062dc g     O .bss	00000008 g_os_mempool_list
00000144  w    F .text	00000002 RTC0_IRQHandler
00002a50 g     F .text	000000c4 boot_read_swap_state
00002328 g     F .text	0000000c boot_go
200000d8 g       .data	00000000 __data_start__
00003cbc g     O .text	00000018 nrf52k_flash_dev
0000390c g     F .text	00000024 printf
00004008 g     O .text	00000004 stdout
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00000ac4 g     F .text	00000018 hal_gpio_write
00002f98 g     F .text	00000130 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
00001140 g     F .text	00000058 hal_timer_init
00001d4c g     F .text	00000016 mfg_seek_next_with_type
00000ee8 g     F .text	0000000a hal_system_start
00002bdc g     F .text	00000030 boot_write_swap_info
000032ac g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
000029e4 g     F .text	0000001e boot_magic_compatible_check
000017b6 g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
00001098 g     F .text	000000a8 nrf52_timer0_irq_handler
000016e2 g     F .text	0000002c os_memblock_put
00000144  w    F .text	00000002 PWM1_IRQHandler
00001424 g     F .text	00000030 os_msys_get_pkthdr
200062f8 g     O .bss	00000004 flash_map
0000342c g     F .text	0000002e hal_flash_is_erased
0000178c g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
00004024 g       .ARM.exidx	00000000 __exidx_end
00002eec g     F .text	00000008 mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000164 g     F .text	00000030 hal_system_reset
20000148 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
00004024 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
00001ac4 g     F .text	00000024 flash_area_write
2000015c g       .bssnz	00000000 __bssnz_start__
00000818 g     F .text	00000078 spiflash_erase
00000144  w    F .text	00000002 PDM_IRQHandler
00002334 g     F .text	0000007a swap_erase_trailer_sectors
000025a6 g     F .text	000000aa boot_slots_compatible
00002138 g     F .text	000001f0 context_boot_go
00001d62 g     F .text	00000006 mfg_read_tlv_flash_area
000019e0 g     F .text	0000000c console_get_ticks
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
000014b4 g     F .text	00000006 timer_handler
000026cc g     F .text	000002bc swap_run
0000183c g     F .text	0000001a memcpy
00000f18 g     F .text	00000070 hal_watchdog_init
00001388 g     F .text	00000008 os_cputime_init
0000249e g     F .text	00000030 swap_set_image_ok
00003954 g     F .text	00000000 .hidden __aeabi_uldivmod
0000345a g     F .text	00000054 hal_flash_isempty
00000000 g       *ABS*	00000000 _imghdr_size
200062f0 g     O .bss	00000004 console_is_midline
00001544 g     F .text	00000010 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00001aa0 g     F .text	00000024 flash_area_read
000012a4 g     F .text	0000004c __assert_func
00000adc g     F .text	00000074 nrf52_spi0_irq_handler
0000013c  w    F .text	00000002 UsageFault_Handler
000007fe g     F .text	0000001a spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
000036a0 g     F .text	00000266 tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
2000015c g       .bss	00000000 __bss_start__
00000194 g     F .text	00000010 hal_debugger_connected
00003310 g     F .text	00000064 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00003984 g     F .text	000002cc .hidden __udivmoddi4
00002a0c g     F .text	00000016 boot_status_entries
200062e4 g     O .bss	00000004 g_current_task
000014ba g     F .text	0000000c os_arch_save_sr
000024ce g     F .text	0000002e boot_read_image_header
00002b90 g     F .text	0000001c boot_write_magic
00001680 g     F .text	00000012 os_mempool_init
00000894 g     F .text	00000060 spiflash_identify
00001396 g     F .text	00000016 os_cputime_delay_ticks
200062f4 g     O .bss	00000001 g_console_input_ignore
0000400c g       .text	00000000 __exidx_start
000020e0 g     F .text	00000004 boot_erase_region
00002650 g     F .text	0000007c swap_status_source
00001580 g     F .text	00000098 os_mbuf_append
00001d68 g     F .text	00000006 mfg_read_tlv_mmr_ref
0000172c g     F .text	00000014 os_set_env
0000048c g     F .text	00000014 hal_bsp_flash_dev
00000f88 g     F .text	00000038 nrf52_periph_create
00001b0c g     F .text	00000006 flash_area_align
00001950 g     F .text	00000004 disable_buffer
000018ac g     F .text	00000040 console_printf
000018a8 g     F .text	00000004 console_blocking_mode
00000144  w    F .text	00000002 I2S_IRQHandler
00000442 g     F .text	00000002 _init
00003374 g     F .text	000000b8 hal_flash_erase
00002a48 g     F .text	00000006 boot_swap_info_off
00002c0c g     F .text	00000018 boot_write_swap_size
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
0000207c g     F .text	00000064 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
00002c24 g     F .text	00000084 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
00002b34 g     F .text	0000005c boot_read_swap_size
00002482 g     F .text	0000001c swap_set_copy_done
000014e2 g     F .text	0000000a os_mbuf_pool_init
000017c2 g     F .text	0000001e os_default_irq_asm
00002408 g     F .text	0000007a swap_read_status
00001d70 g     F .text	00000048 mfg_init
00000148 g     F .text	00000010 _sbrkInit
2000015c g       .bssnz	00000000 __bssnz_end__
00001b2c g     F .text	00000098 flash_map_init
00003930 g     F .text	00000010 vprintf
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000024fc g     F .text	00000094 swap_read_status_bytes
00000144  w    F .text	00000002 PWM2_IRQHandler
2000015c g       .data	00000000 __data_end__
00003142 g     F .text	0000012a mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
200062ec g     O .bss	00000004 g_os_time
00000d10 g     F .text	000000e0 hal_spi_init
20006300 g       .bss	00000000 __bss_end__
000014ec g     F .text	0000002a os_mbuf_get
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00000590 g     F .text	00000014 spiflash_device_ready
00001414 g     F .text	00000010 os_msys_reset
00000144 g     F .text	00000002 Default_Handler
00000434 g     F .text	0000000e _start
00002bac g     F .text	00000018 boot_write_copy_done
00002590 g     F .text	00000016 boot_status_internal_off
00001740 g     F .text	00000006 os_arch_init_task_stack
00003ee4 g     O .text	00000010 boot_img_magic
00000a9e g     F .text	00000026 hal_gpio_init_out
2000014c g     O .data	00000004 sysinit_panic_cb
00001692 g     F .text	00000032 os_memblock_get
00001dce g     F .text	00000032 mem_init_mbuf_pool
00001fe4 g     F .text	0000001a boot_status_is_reset
000012f0 g     F .text	00000098 os_default_irq
000007d8 g     F .text	0000000a spiflash_sector_erase
00001b12 g     F .text	0000000a flash_area_erased_val
000023ae g     F .text	0000005a swap_status_init
200062e8 g     O .bss	00000004 g_os_last_ctx_sw_time
000017f4 g     F .text	00000048 memcmp
00003c50  w    F .text	00000002 .hidden __aeabi_ldiv0
00001198 g     F .text	000000d4 hal_timer_config
00002edc g     F .text	00000010 flash_area_id_from_multi_image_slot
00001fd2 g     F .text	00000012 boot_status_reset
000020e4 g     F .text	00000054 boot_copy_region
000013d4 g     F .text	00000040 os_msys_register
000019ec g     F .text	0000003c flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
00002b14 g     F .text	0000001e boot_read_swap_state_by_id
00001856 g     F .text	00000036 memset
00000000 g       .text	000000d8 __isr_vector
00000444 g     F .text	00000048 main
00000e30 g     F .text	00000028 hal_spi_set_txrx_cb
000019a4 g     F .text	0000003c console_out_nolock
00000518 g     F .text	00000052 spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
00001746 g     F .text	00000046 SVC_Handler
000032cc g     F .text	00000044 hal_flash_read
0000126c g     F .text	00000038 hal_timer_read
00001ae8 g     F .text	00000024 flash_area_erase
20006298 g     O .bss	00000028 nrf52_hal_spi0
0000156e g     F .text	00000012 os_mbuf_len
200062f5 g     O .bss	00000001 g_silence_console
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
200062fc g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00001ccc g     F .text	00000080 mfg_seek_next
00001b1c g     F .text	0000000e flash_area_read_is_empty
0000188c g     F .text	0000001c console_write
00002a22 g     F .text	00000026 boot_status_off
00000254 g     F .text	000001e0 SystemInit
00001390 g     F .text	00000006 os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
000032bc g     F .text	00000010 hal_flash_erased_val
00002ca8 g     F .text	00000104 bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
00000df0 g     F .text	00000040 hal_spi_tx_val
0000065c g     F .text	0000001c spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
000018ec g     F .text	00000064 console_flush
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
00000b50 g     F .text	00000124 hal_spi_config
00001a28 g     F .text	00000078 flash_area_to_sectors
00003e8c g     O .text	00000048 sysflash_map_dflt
200062c0 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
00000c74 g     F .text	00000040 hal_spi_enable
000013ac g     F .text	00000004 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
000005e4 g     F .text	00000018 spiflash_wait_ready
000007f2 g     F .text	0000000c spiflash_block_64k_erase
00001db8 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
000004b0 g     F .text	00000028 NVIC_Relocate
20004a84 g     O .bss	00000004 os_flags
000014c6 g     F .text	00000006 os_arch_restore_sr
2000fe50 g       *ABS*	000001b0 __StackLimit
000030c8 g     F .text	0000007a mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
00001554 g     F .text	0000001a os_mbuf_free_chain
00001454 g     F .text	00000060 os_msys_init
00001710 g     F .text	0000000c os_time_get
00000e58 g     F .text	00000090 hal_spi_txrx
00001516 g     F .text	0000002e os_mbuf_get_pkthdr
00003c50  w    F .text	00000002 .hidden __aeabi_idiv0
00002dac g     F .text	00000098 bootutil_tlv_iter_begin
0000092e g     F .text	00000006 _exit
000001a4 g     F .text	0000003c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
0000056a g     F .text	00000026 spiflash_read_status
000016c4 g     F .text	0000001e os_memblock_put_from_cb
0000171c g     F .text	00000010 os_time_advance
00003288 g     F .text	00000024 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000004a0 g     F .text	0000000e hal_bsp_init
00000cb4 g     F .text	0000005c hal_spi_disable
000007e6 g     F .text	0000000c spiflash_block_32k_erase
00003906 g     F .text	00000004 vfprintf
00002a02 g     F .text	0000000a boot_trailer_sz
00002e44 g     F .text	00000098 bootutil_tlv_iter_next
00002bc4 g     F .text	00000018 boot_write_image_ok
00002ef4 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
       8:	00000135 	.word	0x00000135
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       c:	00000137 	.word	0x00000137
	...
    t->t_state = OS_TASK_SLEEP;
    t->t_next_wakeup = os_time_get() + nticks;
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      2c:	00001747 	.word	0x00001747
	...
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
        } else {
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      38:	0000178d 	.word	0x0000178d
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      3c:	000017b7 	.word	0x000017b7
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      48:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      4c:	00000145 	.word	0x00000145
      50:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
      54:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      58:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      5c:	00000145 	.word	0x00000145
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      60:	00000145 	.word	0x00000145
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
    return (0);
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
      74:	00000145 	.word	0x00000145
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	2000015c 	.word	0x2000015c
    ldr     r3, =__bss_end__
     114:	20006300 	.word	0x20006300
    ldr    r1, =__etext
     118:	00004024 	.word	0x00004024
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	2000015c 	.word	0x2000015c
    LDR     R0, =__HeapBase
     124:	20006300 	.word	0x20006300
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	00000255 	.word	0x00000255
    LDR     R0, =_start
     130:	00000435 	.word	0x00000435

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
    sbrkLimit = limit;
     14a:	e9c3 0100 	strd	r0, r1, [r3]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_system_reset>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b08      	ldr	r3, [pc, #32]	; (188 <hal_system_reset+0x24>)
     166:	681b      	ldr	r3, [r3, #0]
        if (hal_debugger_connected()) {
     168:	07db      	lsls	r3, r3, #31
     16a:	d500      	bpl.n	16e <hal_system_reset+0xa>
            asm("bkpt");
     16c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     16e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     172:	4906      	ldr	r1, [pc, #24]	; (18c <hal_system_reset+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     174:	4b06      	ldr	r3, [pc, #24]	; (190 <hal_system_reset+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     176:	68ca      	ldr	r2, [r1, #12]
     178:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     17c:	4313      	orrs	r3, r2
     17e:	60cb      	str	r3, [r1, #12]
     180:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     184:	bf00      	nop
     186:	e7fd      	b.n	184 <hal_system_reset+0x20>
     188:	e000edf0 	.word	0xe000edf0
     18c:	e000ed00 	.word	0xe000ed00
     190:	05fa0004 	.word	0x05fa0004

00000194 <hal_debugger_connected>:
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     194:	4b02      	ldr	r3, [pc, #8]	; (1a0 <hal_debugger_connected+0xc>)
     196:	6818      	ldr	r0, [r3, #0]
}
     198:	f000 0001 	and.w	r0, r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop
     1a0:	e000edf0 	.word	0xe000edf0

000001a4 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a8:	4a0c      	ldr	r2, [pc, #48]	; (1dc <Stack_Size+0x2c>)
     1aa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
     1ae:	4011      	ands	r1, r2
     1b0:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
     1b4:	d011      	beq.n	1da <Stack_Size+0x2a>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b6:	2101      	movs	r1, #1
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1b8:	2000      	movs	r0, #0
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1ba:	60d9      	str	r1, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1bc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	6099      	str	r1, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
     1ca:	2900      	cmp	r1, #0
     1cc:	d0fb      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
     1d2:	4011      	ands	r1, r2
     1d4:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
     1d8:	d1f5      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1da:	4770      	bx	lr
     1dc:	00010003 	.word	0x00010003

000001e0 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1e0:	4b09      	ldr	r3, [pc, #36]	; (208 <errata_16+0x28>)
     1e2:	781b      	ldrb	r3, [r3, #0]
     1e4:	2b06      	cmp	r3, #6
     1e6:	d10c      	bne.n	202 <errata_16+0x22>
     1e8:	4b08      	ldr	r3, [pc, #32]	; (20c <errata_16+0x2c>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	071a      	lsls	r2, r3, #28
     1ee:	d108      	bne.n	202 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     1f0:	4b07      	ldr	r3, [pc, #28]	; (210 <errata_16+0x30>)
     1f2:	6818      	ldr	r0, [r3, #0]
     1f4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     1f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     1fc:	4258      	negs	r0, r3
     1fe:	4158      	adcs	r0, r3
     200:	4770      	bx	lr
            return true;
        }
    }

    return false;
     202:	2000      	movs	r0, #0
}
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	f0000fe0 	.word	0xf0000fe0
     20c:	f0000fe4 	.word	0xf0000fe4
     210:	f0000fe8 	.word	0xf0000fe8

00000214 <errata_108>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     214:	4b0c      	ldr	r3, [pc, #48]	; (248 <errata_108+0x34>)
     216:	781b      	ldrb	r3, [r3, #0]
     218:	2b06      	cmp	r3, #6
     21a:	d110      	bne.n	23e <errata_108+0x2a>
     21c:	4b0b      	ldr	r3, [pc, #44]	; (24c <errata_108+0x38>)
     21e:	681b      	ldr	r3, [r3, #0]
     220:	071a      	lsls	r2, r3, #28
     222:	d10c      	bne.n	23e <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     224:	4b0a      	ldr	r3, [pc, #40]	; (250 <errata_108+0x3c>)
     226:	6818      	ldr	r0, [r3, #0]
     228:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     22c:	2b30      	cmp	r3, #48	; 0x30
     22e:	d008      	beq.n	242 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     230:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     234:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     238:	4258      	negs	r0, r3
     23a:	4158      	adcs	r0, r3
     23c:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     23e:	2000      	movs	r0, #0
     240:	4770      	bx	lr
            return true;
     242:	2001      	movs	r0, #1
}
     244:	4770      	bx	lr
     246:	bf00      	nop
     248:	f0000fe0 	.word	0xf0000fe0
     24c:	f0000fe4 	.word	0xf0000fe4
     250:	f0000fe8 	.word	0xf0000fe8

00000254 <SystemInit>:
{
     254:	b508      	push	{r3, lr}
    if (errata_16()){
     256:	f7ff ffc3 	bl	1e0 <errata_16>
     25a:	b110      	cbz	r0, 262 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     25c:	4b63      	ldr	r3, [pc, #396]	; (3ec <SystemInit+0x198>)
     25e:	4a64      	ldr	r2, [pc, #400]	; (3f0 <SystemInit+0x19c>)
     260:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     262:	f7ff ffd7 	bl	214 <errata_108>
     266:	b128      	cbz	r0, 274 <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     268:	4b62      	ldr	r3, [pc, #392]	; (3f4 <SystemInit+0x1a0>)
     26a:	4a63      	ldr	r2, [pc, #396]	; (3f8 <SystemInit+0x1a4>)
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f3c3 3342 	ubfx	r3, r3, #13, #3
     272:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     274:	f7ff ffb4 	bl	1e0 <errata_16>
     278:	b120      	cbz	r0, 284 <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     27a:	4a60      	ldr	r2, [pc, #384]	; (3fc <SystemInit+0x1a8>)
     27c:	68d3      	ldr	r3, [r2, #12]
     27e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     282:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     284:	f7ff ffc6 	bl	214 <errata_108>
     288:	b140      	cbz	r0, 29c <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     28a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     28e:	2200      	movs	r2, #0
     290:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     294:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     298:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     29c:	f7ff ffa0 	bl	1e0 <errata_16>
     2a0:	b110      	cbz	r0, 2a8 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     2a2:	4b57      	ldr	r3, [pc, #348]	; (400 <SystemInit+0x1ac>)
     2a4:	2203      	movs	r2, #3
     2a6:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     2a8:	f7ff ff9a 	bl	1e0 <errata_16>
     2ac:	b140      	cbz	r0, 2c0 <SystemInit+0x6c>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     2ae:	4b55      	ldr	r3, [pc, #340]	; (404 <SystemInit+0x1b0>)
     2b0:	2205      	movs	r2, #5
     2b2:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     2b4:	2201      	movs	r2, #1
     2b6:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     2b8:	2200      	movs	r2, #0
     2ba:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     2bc:	223f      	movs	r2, #63	; 0x3f
     2be:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2c0:	4b51      	ldr	r3, [pc, #324]	; (408 <SystemInit+0x1b4>)
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	2b06      	cmp	r3, #6
     2c6:	d150      	bne.n	36a <SystemInit+0x116>
     2c8:	4b50      	ldr	r3, [pc, #320]	; (40c <SystemInit+0x1b8>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	071a      	lsls	r2, r3, #28
     2ce:	d14c      	bne.n	36a <SystemInit+0x116>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d0:	4b4f      	ldr	r3, [pc, #316]	; (410 <SystemInit+0x1bc>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2d8:	2b50      	cmp	r3, #80	; 0x50
     2da:	d146      	bne.n	36a <SystemInit+0x116>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     2e0:	4b4c      	ldr	r3, [pc, #304]	; (414 <SystemInit+0x1c0>)
     2e2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     2e6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     2ea:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     2ee:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     2f2:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     2f6:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     2fa:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     2fe:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     302:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     306:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     30a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     30e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     312:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     316:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     31a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     31e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     322:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     326:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     32a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     32e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     332:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     336:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     33a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     33e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     342:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     346:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     34a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     34e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     352:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     356:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     35a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     35e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     362:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     366:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     36a:	f7ff ff53 	bl	214 <errata_108>
     36e:	b128      	cbz	r0, 37c <SystemInit+0x128>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     370:	4b29      	ldr	r3, [pc, #164]	; (418 <SystemInit+0x1c4>)
     372:	4a2a      	ldr	r2, [pc, #168]	; (41c <SystemInit+0x1c8>)
     374:	681b      	ldr	r3, [r3, #0]
     376:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     37a:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     37c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     380:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     384:	07db      	lsls	r3, r3, #31
     386:	d529      	bpl.n	3dc <SystemInit+0x188>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     388:	4b25      	ldr	r3, [pc, #148]	; (420 <SystemInit+0x1cc>)
     38a:	2201      	movs	r2, #1
     38c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     390:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     394:	2a00      	cmp	r2, #0
     396:	d0fb      	beq.n	390 <SystemInit+0x13c>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     398:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     39c:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     3a0:	f023 0301 	bic.w	r3, r3, #1
     3a4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3a8:	4b1d      	ldr	r3, [pc, #116]	; (420 <SystemInit+0x1cc>)
     3aa:	461a      	mov	r2, r3
     3ac:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     3b0:	2900      	cmp	r1, #0
     3b2:	d0fb      	beq.n	3ac <SystemInit+0x158>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     3b4:	2100      	movs	r1, #0
     3b6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     3be:	2b00      	cmp	r3, #0
     3c0:	d0fb      	beq.n	3ba <SystemInit+0x166>
     3c2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3c6:	4917      	ldr	r1, [pc, #92]	; (424 <SystemInit+0x1d0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3c8:	4b17      	ldr	r3, [pc, #92]	; (428 <SystemInit+0x1d4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3ca:	68ca      	ldr	r2, [r1, #12]
     3cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3d0:	4313      	orrs	r3, r2
     3d2:	60cb      	str	r3, [r1, #12]
     3d4:	f3bf 8f4f 	dsb	sy
    __NOP();
     3d8:	bf00      	nop
     3da:	e7fd      	b.n	3d8 <SystemInit+0x184>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3dc:	4b13      	ldr	r3, [pc, #76]	; (42c <SystemInit+0x1d8>)
     3de:	4a14      	ldr	r2, [pc, #80]	; (430 <SystemInit+0x1dc>)
     3e0:	601a      	str	r2, [r3, #0]
}
     3e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    NVIC_Relocate();
     3e6:	f000 b863 	b.w	4b0 <NVIC_Relocate>
     3ea:	bf00      	nop
     3ec:	4007c074 	.word	0x4007c074
     3f0:	baadf00d 	.word	0xbaadf00d
     3f4:	10000244 	.word	0x10000244
     3f8:	4000053c 	.word	0x4000053c
     3fc:	e000edf0 	.word	0xe000edf0
     400:	400005a0 	.word	0x400005a0
     404:	40005610 	.word	0x40005610
     408:	f0000fe0 	.word	0xf0000fe0
     40c:	f0000fe4 	.word	0xf0000fe4
     410:	f0000fe8 	.word	0xf0000fe8
     414:	4000c000 	.word	0x4000c000
     418:	10000258 	.word	0x10000258
     41c:	40000ee4 	.word	0x40000ee4
     420:	4001e000 	.word	0x4001e000
     424:	e000ed00 	.word	0xe000ed00
     428:	05fa0004 	.word	0x05fa0004
     42c:	200000e4 	.word	0x200000e4
     430:	03d09000 	.word	0x03d09000

00000434 <_start>:
void _start(void)
{
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     434:	2100      	movs	r1, #0
{
     436:	b508      	push	{r3, lr}
    rc = main(0, NULL);
     438:	4608      	mov	r0, r1
     43a:	f000 f803 	bl	444 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     43e:	f000 fa76 	bl	92e <_exit>

00000442 <_init>:
}

void
_init(void)
{
}
     442:	4770      	bx	lr

00000444 <main>:

void os_msys_init(void); ///

int
main(void)
{
     444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     446:	f000 f82b 	bl	4a0 <hal_bsp_init>

    ////
    os_msys_init(); console_printf("Starting MCUBoot..."); console_flush(); ////
     44a:	f001 f803 	bl	1454 <os_msys_init>
     44e:	480e      	ldr	r0, [pc, #56]	; (488 <main+0x44>)
     450:	f001 fa2c 	bl	18ac <console_printf>
     454:	f001 fa4a 	bl	18ec <console_flush>
    ////

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     458:	f247 5030 	movw	r0, #30000	; 0x7530
     45c:	f000 fd5c 	bl	f18 <hal_watchdog_init>
    assert(rc == 0);
     460:	b128      	cbz	r0, 46e <main+0x2a>
     462:	2300      	movs	r3, #0
     464:	461a      	mov	r2, r3
     466:	4619      	mov	r1, r3
     468:	4618      	mov	r0, r3
     46a:	f000 ff1b 	bl	12a4 <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     46e:	f001 fb5d 	bl	1b2c <flash_map_init>
#endif

    rc = boot_go(&rsp);
     472:	a801      	add	r0, sp, #4
     474:	f001 ff58 	bl	2328 <boot_go>
    assert(rc == 0);
     478:	2800      	cmp	r0, #0
     47a:	d1f2      	bne.n	462 <main+0x1e>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_system_start((void *)(flash_base + rsp.br_image_off +
                              rsp.br_hdr->ih_hdr_size));
     47c:	9b01      	ldr	r3, [sp, #4]
     47e:	8918      	ldrh	r0, [r3, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     480:	9b03      	ldr	r3, [sp, #12]
     482:	4418      	add	r0, r3
     484:	f000 fd30 	bl	ee8 <hal_system_start>
     488:	00003c54 	.word	0x00003c54

0000048c <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     48c:	2801      	cmp	r0, #1
        return NULL;
    }
    return flash_devs[id];
     48e:	bf9a      	itte	ls
     490:	4b02      	ldrls	r3, [pc, #8]	; (49c <hal_bsp_flash_dev+0x10>)
     492:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
        return NULL;
     496:	2000      	movhi	r0, #0
}
     498:	4770      	bx	lr
     49a:	bf00      	nop
     49c:	00003c68 	.word	0x00003c68

000004a0 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     4a0:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     4a2:	f7ff fe7f 	bl	1a4 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
}
     4a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf52_periph_create();
     4aa:	f000 bd6d 	b.w	f88 <nrf52_periph_create>
	...

000004b0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     4b0:	4b06      	ldr	r3, [pc, #24]	; (4cc <NVIC_Relocate+0x1c>)
     4b2:	4907      	ldr	r1, [pc, #28]	; (4d0 <NVIC_Relocate+0x20>)
     4b4:	428b      	cmp	r3, r1
     4b6:	d005      	beq.n	4c4 <NVIC_Relocate+0x14>
     4b8:	2200      	movs	r2, #0
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
     4ba:	5888      	ldr	r0, [r1, r2]
     4bc:	5098      	str	r0, [r3, r2]
     4be:	3204      	adds	r2, #4
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     4c0:	2ad8      	cmp	r2, #216	; 0xd8
     4c2:	d1fa      	bne.n	4ba <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     4c4:	4a03      	ldr	r2, [pc, #12]	; (4d4 <NVIC_Relocate+0x24>)
     4c6:	6093      	str	r3, [r2, #8]
#endif
}
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	20000000 	.word	0x20000000
     4d0:	00000000 	.word	0x00000000
     4d4:	e000ed00 	.word	0xe000ed00

000004d8 <hal_spiflash_sector_info>:
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     4d8:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
     4da:	4341      	muls	r1, r0
     4dc:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     4de:	6018      	str	r0, [r3, #0]
    return 0;
}
     4e0:	2000      	movs	r0, #0
     4e2:	4770      	bx	lr

000004e4 <spiflash_cs_activate.isra.4>:
    hal_gpio_write(dev->ss_pin, 0);
     4e4:	2100      	movs	r1, #0
     4e6:	f000 baed 	b.w	ac4 <hal_gpio_write>

000004ea <spiflash_cs_deactivate.isra.5>:
    hal_gpio_write(dev->ss_pin, 1);
     4ea:	2101      	movs	r1, #1
     4ec:	f000 baea 	b.w	ac4 <hal_gpio_write>

000004f0 <spiflash_release_power_down_generic>:
{
     4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     4f2:	ad02      	add	r5, sp, #8
     4f4:	23ab      	movs	r3, #171	; 0xab
     4f6:	f805 3d04 	strb.w	r3, [r5, #-4]!
{
     4fa:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     4fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
     4fe:	f7ff fff1 	bl	4e4 <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     502:	2301      	movs	r3, #1
     504:	462a      	mov	r2, r5
     506:	4629      	mov	r1, r5
     508:	6a20      	ldr	r0, [r4, #32]
     50a:	f000 fca5 	bl	e58 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     50e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     510:	f7ff ffeb 	bl	4ea <spiflash_cs_deactivate.isra.5>
}
     514:	b003      	add	sp, #12
     516:	bd30      	pop	{r4, r5, pc}

00000518 <spiflash_read_jedec_id>:
{
     518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     51c:	ad02      	add	r5, sp, #8
{
     51e:	461e      	mov	r6, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     520:	239f      	movs	r3, #159	; 0x9f
     522:	f845 3d04 	str.w	r3, [r5, #-4]!
{
     526:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     528:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
     52a:	4688      	mov	r8, r1
     52c:	4617      	mov	r7, r2
    spiflash_cs_activate(dev);
     52e:	f7ff ffd9 	bl	4e4 <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     532:	2304      	movs	r3, #4
     534:	462a      	mov	r2, r5
     536:	4629      	mov	r1, r5
     538:	6a20      	ldr	r0, [r4, #32]
     53a:	f000 fc8d 	bl	e58 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     53e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     540:	f7ff ffd3 	bl	4ea <spiflash_cs_deactivate.isra.5>
    if (manufacturer) {
     544:	f1b8 0f00 	cmp.w	r8, #0
     548:	d003      	beq.n	552 <spiflash_read_jedec_id+0x3a>
        *manufacturer = cmd[1];
     54a:	f89d 3005 	ldrb.w	r3, [sp, #5]
     54e:	f888 3000 	strb.w	r3, [r8]
    if (memory_type) {
     552:	b117      	cbz	r7, 55a <spiflash_read_jedec_id+0x42>
        *memory_type = cmd[2];
     554:	f89d 3006 	ldrb.w	r3, [sp, #6]
     558:	703b      	strb	r3, [r7, #0]
    if (capacity) {
     55a:	b116      	cbz	r6, 562 <spiflash_read_jedec_id+0x4a>
        *capacity = cmd[3];
     55c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     560:	7033      	strb	r3, [r6, #0]
}
     562:	2000      	movs	r0, #0
     564:	b002      	add	sp, #8
     566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000056a <spiflash_read_status>:
{
     56a:	b538      	push	{r3, r4, r5, lr}
     56c:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     56e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     570:	f7ff ffb8 	bl	4e4 <spiflash_cs_activate.isra.4>
    hal_spi_tx_val(dev->spi_num, cmd);
     574:	2105      	movs	r1, #5
     576:	6a20      	ldr	r0, [r4, #32]
     578:	f000 fc3a 	bl	df0 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     57c:	21ff      	movs	r1, #255	; 0xff
     57e:	6a20      	ldr	r0, [r4, #32]
     580:	f000 fc36 	bl	df0 <hal_spi_tx_val>
     584:	4605      	mov	r5, r0
    spiflash_cs_deactivate(dev);
     586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     588:	f7ff ffaf 	bl	4ea <spiflash_cs_deactivate.isra.5>
}
     58c:	b2e8      	uxtb	r0, r5
     58e:	bd38      	pop	{r3, r4, r5, pc}

00000590 <spiflash_device_ready>:
{
     590:	b510      	push	{r4, lr}
     592:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     594:	f7ff ffe9 	bl	56a <spiflash_read_status>
     598:	43c0      	mvns	r0, r0
     59a:	f000 0001 	and.w	r0, r0, #1
     59e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     5a2:	bd10      	pop	{r4, pc}

000005a4 <spiflash_wait_ready_till.part.6>:
spiflash_wait_ready_till(struct spiflash_dev *dev, uint32_t timeout_us,
     5a4:	b570      	push	{r4, r5, r6, lr}
     5a6:	4c0e      	ldr	r4, [pc, #56]	; (5e0 <spiflash_wait_ready_till.part.6+0x3c>)
     5a8:	4294      	cmp	r4, r2
     5aa:	bf28      	it	cs
     5ac:	4614      	movcs	r4, r2
     5ae:	2c0a      	cmp	r4, #10
     5b0:	460d      	mov	r5, r1
     5b2:	4606      	mov	r6, r0
     5b4:	bf38      	it	cc
     5b6:	240a      	movcc	r4, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     5b8:	f000 feea 	bl	1390 <os_cputime_get32>
     5bc:	4405      	add	r5, r0
        if (spiflash_device_ready(dev)) {
     5be:	4630      	mov	r0, r6
     5c0:	f7ff ffe6 	bl	590 <spiflash_device_ready>
     5c4:	b950      	cbnz	r0, 5dc <spiflash_wait_ready_till.part.6+0x38>
    os_cputime_delay_usecs(usecs);
     5c6:	4620      	mov	r0, r4
     5c8:	f000 fef0 	bl	13ac <os_cputime_delay_usecs>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     5cc:	f000 fee0 	bl	1390 <os_cputime_get32>
     5d0:	1b40      	subs	r0, r0, r5
     5d2:	2800      	cmp	r0, #0
     5d4:	dbf3      	blt.n	5be <spiflash_wait_ready_till.part.6+0x1a>
    int rc = -1;
     5d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     5da:	bd70      	pop	{r4, r5, r6, pc}
            rc = 0;
     5dc:	2000      	movs	r0, #0
     5de:	e7fc      	b.n	5da <spiflash_wait_ready_till.part.6+0x36>
     5e0:	000f4240 	.word	0x000f4240

000005e4 <spiflash_wait_ready>:
    if (dev->ready) {
     5e4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     5e8:	b933      	cbnz	r3, 5f8 <spiflash_wait_ready+0x14>
     5ea:	220a      	movs	r2, #10
     5ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     5f0:	434a      	muls	r2, r1
     5f2:	4359      	muls	r1, r3
     5f4:	f7ff bfd6 	b.w	5a4 <spiflash_wait_ready_till.part.6>
}
     5f8:	2000      	movs	r0, #0
     5fa:	4770      	bx	lr

000005fc <hal_spiflash_read>:
{
     5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     5fe:	461d      	mov	r5, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     600:	2303      	movs	r3, #3
     602:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     606:	0c0b      	lsrs	r3, r1, #16
     608:	f88d 3005 	strb.w	r3, [sp, #5]
     60c:	f88d 1007 	strb.w	r1, [sp, #7]
     610:	0a0b      	lsrs	r3, r1, #8
    err = spiflash_wait_ready(dev, 100);
     612:	2164      	movs	r1, #100	; 0x64
{
     614:	4604      	mov	r4, r0
     616:	4616      	mov	r6, r2
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     618:	f88d 3006 	strb.w	r3, [sp, #6]
    err = spiflash_wait_ready(dev, 100);
     61c:	f7ff ffe2 	bl	5e4 <spiflash_wait_ready>
    if (!err) {
     620:	4607      	mov	r7, r0
     622:	b9c0      	cbnz	r0, 656 <hal_spiflash_read+0x5a>
        if (len > 0) {
     624:	b1bd      	cbz	r5, 656 <hal_spiflash_read+0x5a>
            spiflash_cs_activate(dev);
     626:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     628:	f7ff ff5c 	bl	4e4 <spiflash_cs_activate.isra.4>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     62c:	2304      	movs	r3, #4
     62e:	eb0d 0103 	add.w	r1, sp, r3
     632:	463a      	mov	r2, r7
     634:	6a20      	ldr	r0, [r4, #32]
     636:	f000 fc0f 	bl	e58 <hal_spi_txrx>
            memset(buf, 0xFF, len);
     63a:	462a      	mov	r2, r5
     63c:	21ff      	movs	r1, #255	; 0xff
     63e:	4630      	mov	r0, r6
     640:	f001 f909 	bl	1856 <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     644:	462b      	mov	r3, r5
     646:	4632      	mov	r2, r6
     648:	4631      	mov	r1, r6
     64a:	6a20      	ldr	r0, [r4, #32]
     64c:	f000 fc04 	bl	e58 <hal_spi_txrx>
            spiflash_cs_deactivate(dev);
     650:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     652:	f7ff ff4a 	bl	4ea <spiflash_cs_deactivate.isra.5>
}
     656:	2000      	movs	r0, #0
     658:	b003      	add	sp, #12
     65a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000065c <spiflash_write_enable>:
{
     65c:	b510      	push	{r4, lr}
     65e:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     660:	6a80      	ldr	r0, [r0, #40]	; 0x28
     662:	f7ff ff3f 	bl	4e4 <spiflash_cs_activate.isra.4>
    hal_spi_tx_val(dev->spi_num, cmd);
     666:	2106      	movs	r1, #6
     668:	6a20      	ldr	r0, [r4, #32]
     66a:	f000 fbc1 	bl	df0 <hal_spi_tx_val>
    spiflash_cs_deactivate(dev);
     66e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     670:	f7ff ff3b 	bl	4ea <spiflash_cs_deactivate.isra.5>
}
     674:	2000      	movs	r0, #0
     676:	bd10      	pop	{r4, pc}

00000678 <hal_spiflash_write>:
{
     678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     67c:	b085      	sub	sp, #20
     67e:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     680:	2300      	movs	r3, #0
     682:	9303      	str	r3, [sp, #12]
{
     684:	460e      	mov	r6, r1
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     686:	2302      	movs	r3, #2
    if (spiflash_wait_ready(dev, 100) != 0) {
     688:	2164      	movs	r1, #100	; 0x64
{
     68a:	4605      	mov	r5, r0
     68c:	4693      	mov	fp, r2
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     68e:	f88d 300c 	strb.w	r3, [sp, #12]
    if (spiflash_wait_ready(dev, 100) != 0) {
     692:	f7ff ffa7 	bl	5e4 <spiflash_wait_ready>
     696:	2800      	cmp	r0, #0
     698:	d14b      	bne.n	732 <hal_spiflash_write+0xba>
    pp_time_typical = dev->characteristics->tbp1.typical;
     69a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    pp_time_maximum = dev->characteristics->tpp.maximum;
     69c:	e9d3 3a09 	ldrd	r3, sl, [r3, #36]	; 0x24
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     6a0:	4681      	mov	r9, r0
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     6a2:	459a      	cmp	sl, r3
     6a4:	bf2c      	ite	cs
     6a6:	ebca 080a 	rsbcs	r8, sl, sl
     6aa:	ebca 0803 	rsbcc	r8, sl, r3
     6ae:	230a      	movs	r3, #10
     6b0:	fbb8 f3f3 	udiv	r3, r8, r3
     6b4:	9301      	str	r3, [sp, #4]
    while (len) {
     6b6:	b90f      	cbnz	r7, 6bc <hal_spiflash_write+0x44>
err:
     6b8:	4638      	mov	r0, r7
     6ba:	e037      	b.n	72c <hal_spiflash_write+0xb4>
        spiflash_write_enable(dev);
     6bc:	4628      	mov	r0, r5
     6be:	f7ff ffcd 	bl	65c <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     6c2:	0c33      	lsrs	r3, r6, #16
     6c4:	f88d 300d 	strb.w	r3, [sp, #13]
        cmd[2] = (uint8_t)(addr >> 8);
     6c8:	0a33      	lsrs	r3, r6, #8
     6ca:	f88d 300e 	strb.w	r3, [sp, #14]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     6ce:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
        spiflash_cs_activate(dev);
     6d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
        cmd[3] = (uint8_t)(addr);
     6d2:	f88d 600f 	strb.w	r6, [sp, #15]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     6d6:	425c      	negs	r4, r3
     6d8:	4034      	ands	r4, r6
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     6da:	1ba4      	subs	r4, r4, r6
     6dc:	441c      	add	r4, r3
     6de:	42bc      	cmp	r4, r7
     6e0:	bf28      	it	cs
     6e2:	463c      	movcs	r4, r7
        spiflash_cs_activate(dev);
     6e4:	f7ff fefe 	bl	4e4 <spiflash_cs_activate.isra.4>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     6e8:	2304      	movs	r3, #4
     6ea:	2200      	movs	r2, #0
     6ec:	a903      	add	r1, sp, #12
     6ee:	6a28      	ldr	r0, [r5, #32]
     6f0:	f000 fbb2 	bl	e58 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     6f4:	4623      	mov	r3, r4
     6f6:	2200      	movs	r2, #0
     6f8:	4659      	mov	r1, fp
     6fa:	6a28      	ldr	r0, [r5, #32]
     6fc:	f000 fbac 	bl	e58 <hal_spi_txrx>
        spiflash_cs_deactivate(dev);
     700:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     702:	f7ff fef2 	bl	4ea <spiflash_cs_deactivate.isra.5>
        dev->ready = false;
     706:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
    os_cputime_delay_usecs(usecs);
     70a:	4650      	mov	r0, sl
     70c:	f000 fe4e 	bl	13ac <os_cputime_delay_usecs>
    if (dev->ready) {
     710:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
     714:	b11b      	cbz	r3, 71e <hal_spiflash_write+0xa6>
        addr += to_write;
     716:	4426      	add	r6, r4
        u8buf += to_write;
     718:	44a3      	add	fp, r4
        len -= to_write;
     71a:	1b3f      	subs	r7, r7, r4
     71c:	e7cb      	b.n	6b6 <hal_spiflash_write+0x3e>
     71e:	9a01      	ldr	r2, [sp, #4]
     720:	4641      	mov	r1, r8
     722:	4628      	mov	r0, r5
     724:	f7ff ff3e 	bl	5a4 <spiflash_wait_ready_till.part.6>
        if (rc) {
     728:	2800      	cmp	r0, #0
     72a:	d0f4      	beq.n	716 <hal_spiflash_write+0x9e>
}
     72c:	b005      	add	sp, #20
     72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = -1;
     732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     736:	e7f9      	b.n	72c <hal_spiflash_write+0xb4>

00000738 <spiflash_execute_erase>:
{
     738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     73c:	460e      	mov	r6, r1
    if (spiflash_wait_ready(dev, 100) != 0) {
     73e:	2164      	movs	r1, #100	; 0x64
{
     740:	4604      	mov	r4, r0
     742:	4690      	mov	r8, r2
     744:	461f      	mov	r7, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     746:	f7ff ff4d 	bl	5e4 <spiflash_wait_ready>
     74a:	4605      	mov	r5, r0
     74c:	bb60      	cbnz	r0, 7a8 <spiflash_execute_erase+0x70>
    spiflash_write_enable(dev);
     74e:	4620      	mov	r0, r4
     750:	f7ff ff84 	bl	65c <spiflash_write_enable>
    spiflash_read_status(dev);
     754:	4620      	mov	r0, r4
     756:	f7ff ff08 	bl	56a <spiflash_read_status>
    spiflash_cs_activate(dev);
     75a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     75c:	f7ff fec2 	bl	4e4 <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     760:	4631      	mov	r1, r6
     762:	4643      	mov	r3, r8
     764:	462a      	mov	r2, r5
     766:	6a20      	ldr	r0, [r4, #32]
     768:	f000 fb76 	bl	e58 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     76c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     76e:	f7ff febc 	bl	4ea <spiflash_cs_deactivate.isra.5>
    dev->ready = false;
     772:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     776:	f000 fe0b 	bl	1390 <os_cputime_get32>
     77a:	4606      	mov	r6, r0
    os_cputime_delay_usecs(usecs);
     77c:	6838      	ldr	r0, [r7, #0]
     77e:	f000 fe15 	bl	13ac <os_cputime_delay_usecs>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     782:	f000 fe05 	bl	1390 <os_cputime_get32>
    if (wait_time_us > delay_spec->maximum) {
     786:	6879      	ldr	r1, [r7, #4]
    if (dev->ready) {
     788:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     78c:	1b80      	subs	r0, r0, r6
    if (wait_time_us > delay_spec->maximum) {
     78e:	4281      	cmp	r1, r0
        wait_time_us = delay_spec->maximum - wait_time_us;
     790:	bf2c      	ite	cs
     792:	1a09      	subcs	r1, r1, r0
        wait_time_us = 0;
     794:	4629      	movcc	r1, r5
    if (dev->ready) {
     796:	b94b      	cbnz	r3, 7ac <spiflash_execute_erase+0x74>
     798:	2232      	movs	r2, #50	; 0x32
     79a:	4620      	mov	r0, r4
     79c:	fbb1 f2f2 	udiv	r2, r1, r2
}
     7a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     7a4:	f7ff befe 	b.w	5a4 <spiflash_wait_ready_till.part.6>
        rc = -1;
     7a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
     7ac:	4628      	mov	r0, r5
     7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000007b2 <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     7b2:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7b4:	f88d 1004 	strb.w	r1, [sp, #4]
     7b8:	0c11      	lsrs	r1, r2, #16
     7ba:	f88d 1005 	strb.w	r1, [sp, #5]
                       (uint8_t)addr };
     7be:	f88d 2007 	strb.w	r2, [sp, #7]
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7c2:	0a11      	lsrs	r1, r2, #8
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     7c4:	2204      	movs	r2, #4
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7c6:	f88d 1006 	strb.w	r1, [sp, #6]
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     7ca:	eb0d 0102 	add.w	r1, sp, r2
     7ce:	f7ff ffb3 	bl	738 <spiflash_execute_erase>

}
     7d2:	b003      	add	sp, #12
     7d4:	f85d fb04 	ldr.w	pc, [sp], #4

000007d8 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     7d8:	460a      	mov	r2, r1
     7da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7dc:	2120      	movs	r1, #32
     7de:	f7ff bfe8 	b.w	7b2 <spiflash_erase_cmd>

000007e2 <hal_spiflash_erase_sector>:
    return spiflash_sector_erase(dev, addr);
     7e2:	f7ff bff9 	b.w	7d8 <spiflash_sector_erase>

000007e6 <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     7e6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7e8:	460a      	mov	r2, r1
     7ea:	3308      	adds	r3, #8
     7ec:	2152      	movs	r1, #82	; 0x52
     7ee:	f7ff bfe0 	b.w	7b2 <spiflash_erase_cmd>

000007f2 <spiflash_block_64k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     7f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7f4:	460a      	mov	r2, r1
     7f6:	3310      	adds	r3, #16
     7f8:	21d8      	movs	r1, #216	; 0xd8
     7fa:	f7ff bfda 	b.w	7b2 <spiflash_erase_cmd>

000007fe <spiflash_chip_erase>:
}
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     7fe:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     800:	a902      	add	r1, sp, #8
     802:	2360      	movs	r3, #96	; 0x60
     804:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
     808:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     80a:	2201      	movs	r2, #1
     80c:	3318      	adds	r3, #24
     80e:	f7ff ff93 	bl	738 <spiflash_execute_erase>
                                  &dev->characteristics->tce);
}
     812:	b003      	add	sp, #12
     814:	f85d fb04 	ldr.w	pc, [sp], #4

00000818 <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     818:	b570      	push	{r4, r5, r6, lr}
     81a:	4606      	mov	r6, r0
     81c:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     81e:	b931      	cbnz	r1, 82e <spiflash_erase+0x16>
     820:	6883      	ldr	r3, [r0, #8]
     822:	4293      	cmp	r3, r2
     824:	d103      	bne.n	82e <spiflash_erase+0x16>
            size = 0;
        }
    }
err:
    return rc;
}
     826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return spiflash_chip_erase(dev);
     82a:	f7ff bfe8 	b.w	7fe <spiflash_chip_erase>
    address &= ~0xFFFU;
     82e:	f421 647f 	bic.w	r4, r1, #4080	; 0xff0
     832:	f024 040f 	bic.w	r4, r4, #15
    while (size) {
     836:	b325      	cbz	r5, 882 <spiflash_erase+0x6a>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     838:	b2a3      	uxth	r3, r4
     83a:	b963      	cbnz	r3, 856 <spiflash_erase+0x3e>
     83c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     840:	d309      	bcc.n	856 <spiflash_erase+0x3e>
            rc = spiflash_block_64k_erase(dev, address);
     842:	4621      	mov	r1, r4
     844:	4630      	mov	r0, r6
     846:	f7ff ffd4 	bl	7f2 <spiflash_block_64k_erase>
            if (rc) {
     84a:	b9d8      	cbnz	r0, 884 <spiflash_erase+0x6c>
            address += 0x10000;
     84c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     850:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     854:	e7ef      	b.n	836 <spiflash_erase+0x1e>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     856:	f3c4 030e 	ubfx	r3, r4, #0, #15
            rc = spiflash_block_32k_erase(dev, address);
     85a:	4621      	mov	r1, r4
     85c:	4630      	mov	r0, r6
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     85e:	b953      	cbnz	r3, 876 <spiflash_erase+0x5e>
     860:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     864:	d307      	bcc.n	876 <spiflash_erase+0x5e>
            rc = spiflash_block_32k_erase(dev, address);
     866:	f7ff ffbe 	bl	7e6 <spiflash_block_32k_erase>
            if (rc) {
     86a:	b958      	cbnz	r0, 884 <spiflash_erase+0x6c>
            address += 0x8000;
     86c:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     870:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     874:	e7df      	b.n	836 <spiflash_erase+0x1e>
        rc = spiflash_sector_erase(dev, address);
     876:	f7ff ffaf 	bl	7d8 <spiflash_sector_erase>
        if (rc) {
     87a:	b918      	cbnz	r0, 884 <spiflash_erase+0x6c>
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     87c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     880:	d801      	bhi.n	886 <spiflash_erase+0x6e>
{
     882:	2000      	movs	r0, #0
}
     884:	bd70      	pop	{r4, r5, r6, pc}
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     886:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     88a:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     88e:	e7d2      	b.n	836 <spiflash_erase+0x1e>

00000890 <hal_spiflash_erase>:
    return spiflash_erase(dev, address, size);
     890:	f7ff bfc2 	b.w	818 <spiflash_erase>

00000894 <spiflash_identify>:

int
spiflash_identify(struct spiflash_dev *dev)
{
     894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int i;
    int j;
    uint8_t manufacturer = 0;
    uint8_t memory_type = 0;
    uint8_t capacity = 0;
     896:	ae02      	add	r6, sp, #8
    uint8_t manufacturer = 0;
     898:	2500      	movs	r5, #0

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     89a:	4c15      	ldr	r4, [pc, #84]	; (8f0 <spiflash_identify+0x5c>)
    uint8_t capacity = 0;
     89c:	f806 5d01 	strb.w	r5, [r6, #-1]!
{
     8a0:	4607      	mov	r7, r0
        supported_chips[0].fc_release_power_down(dev);
     8a2:	6863      	ldr	r3, [r4, #4]
    uint8_t manufacturer = 0;
     8a4:	f88d 5005 	strb.w	r5, [sp, #5]
    uint8_t memory_type = 0;
     8a8:	f88d 5006 	strb.w	r5, [sp, #6]
        supported_chips[0].fc_release_power_down(dev);
     8ac:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     8ae:	4633      	mov	r3, r6
     8b0:	f10d 0206 	add.w	r2, sp, #6
     8b4:	f10d 0105 	add.w	r1, sp, #5
     8b8:	4638      	mov	r0, r7
     8ba:	f7ff fe2d 	bl	518 <spiflash_read_jedec_id>
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     8be:	7822      	ldrb	r2, [r4, #0]
     8c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
     8c4:	429a      	cmp	r2, r3
     8c6:	d109      	bne.n	8dc <spiflash_identify+0x48>
     8c8:	7862      	ldrb	r2, [r4, #1]
     8ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
     8ce:	429a      	cmp	r2, r3
     8d0:	d104      	bne.n	8dc <spiflash_identify+0x48>
     8d2:	78a2      	ldrb	r2, [r4, #2]
     8d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8d8:	429a      	cmp	r2, r3
     8da:	d005      	beq.n	8e8 <spiflash_identify+0x54>
     8dc:	2300      	movs	r3, #0
     8de:	461a      	mov	r2, r3
     8e0:	4619      	mov	r1, r3
     8e2:	4618      	mov	r0, r3
     8e4:	f000 fcde 	bl	12a4 <__assert_func>
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     8e8:	4628      	mov	r0, r5
        dev->flash_chip = &supported_chips[0];
     8ea:	63bc      	str	r4, [r7, #56]	; 0x38
}
     8ec:	b003      	add	sp, #12
     8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f0:	20000128 	.word	0x20000128

000008f4 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     8f4:	b510      	push	{r4, lr}
     8f6:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     8f8:	2101      	movs	r1, #1
     8fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
     8fc:	f000 f8cf 	bl	a9e <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     900:	6a20      	ldr	r0, [r4, #32]
     902:	f000 f9d7 	bl	cb4 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     906:	f104 0118 	add.w	r1, r4, #24
     90a:	6a20      	ldr	r0, [r4, #32]
     90c:	f000 f920 	bl	b50 <hal_spi_config>
    if (rc) {
     910:	4602      	mov	r2, r0
     912:	b958      	cbnz	r0, 92c <hal_spiflash_init+0x38>
        return (rc);
    }

    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     914:	4601      	mov	r1, r0
     916:	6a20      	ldr	r0, [r4, #32]
     918:	f000 fa8a 	bl	e30 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     91c:	6a20      	ldr	r0, [r4, #32]
     91e:	f000 f9a9 	bl	c74 <hal_spi_enable>
#endif
    rc = spiflash_identify(dev);
     922:	4620      	mov	r0, r4

    return rc;
}
     924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = spiflash_identify(dev);
     928:	f7ff bfb4 	b.w	894 <spiflash_identify>
}
     92c:	bd10      	pop	{r4, pc}

0000092e <_exit>:

void _exit(int status);

void
_exit(int status)
{
     92e:	b508      	push	{r3, lr}
    hal_system_reset();
     930:	f7ff fc18 	bl	164 <hal_system_reset>

00000934 <nrf52k_flash_wait_ready>:

#define NRF52K_FLASH_READY() (NRF_NVMC->READY == NVMC_READY_READY_Ready)

static int
nrf52k_flash_wait_ready(void)
{
     934:	4b06      	ldr	r3, [pc, #24]	; (950 <nrf52k_flash_wait_ready+0x1c>)
    int i;

    for (i = 0; i < 100000; i++) {
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     936:	4a07      	ldr	r2, [pc, #28]	; (954 <nrf52k_flash_wait_ready+0x20>)
     938:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     93c:	2901      	cmp	r1, #1
     93e:	d004      	beq.n	94a <nrf52k_flash_wait_ready+0x16>
    for (i = 0; i < 100000; i++) {
     940:	3b01      	subs	r3, #1
     942:	d1f9      	bne.n	938 <nrf52k_flash_wait_ready+0x4>
            return 0;
        }
    }
    return -1;
     944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     948:	4770      	bx	lr
            return 0;
     94a:	2000      	movs	r0, #0
}
     94c:	4770      	bx	lr
     94e:	bf00      	nop
     950:	000186a0 	.word	0x000186a0
     954:	4001e000 	.word	0x4001e000

00000958 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     958:	b570      	push	{r4, r5, r6, lr}
     95a:	460e      	mov	r6, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     95c:	f7ff ffea 	bl	934 <nrf52k_flash_wait_ready>
     960:	b9d0      	cbnz	r0, 998 <nrf52k_flash_erase_sector+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     962:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     966:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     968:	4c0d      	ldr	r4, [pc, #52]	; (9a0 <nrf52k_flash_erase_sector+0x48>)
     96a:	2302      	movs	r3, #2
     96c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     970:	f7ff ffe0 	bl	934 <nrf52k_flash_wait_ready>
     974:	b968      	cbnz	r0, 992 <nrf52k_flash_erase_sector+0x3a>
        goto out;
    }

    NRF_NVMC->ERASEPAGE = sector_address;
     976:	f8c4 6508 	str.w	r6, [r4, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     97a:	f7ff ffdb 	bl	934 <nrf52k_flash_wait_ready>
     97e:	3000      	adds	r0, #0
     980:	bf18      	it	ne
     982:	2001      	movne	r0, #1
     984:	4240      	negs	r0, r0
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     986:	2300      	movs	r3, #0
     988:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     98c:	b905      	cbnz	r5, 990 <nrf52k_flash_erase_sector+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
     98e:	b662      	cpsie	i
    return rc;
}
     990:	bd70      	pop	{r4, r5, r6, pc}
    int rc = -1;
     992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     996:	e7f6      	b.n	986 <nrf52k_flash_erase_sector+0x2e>
        return -1;
     998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     99c:	e7f8      	b.n	990 <nrf52k_flash_erase_sector+0x38>
     99e:	bf00      	nop
     9a0:	4001e000 	.word	0x4001e000

000009a4 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     9a4:	2000      	movs	r0, #0
     9a6:	4770      	bx	lr

000009a8 <nrf52k_flash_write>:
{
     9a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
     9ac:	460e      	mov	r6, r1
     9ae:	4614      	mov	r4, r2
     9b0:	461d      	mov	r5, r3
    if (nrf52k_flash_wait_ready()) {
     9b2:	f7ff ffbf 	bl	934 <nrf52k_flash_wait_ready>
     9b6:	2800      	cmp	r0, #0
     9b8:	d154      	bne.n	a64 <nrf52k_flash_write+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9ba:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     9be:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     9c0:	4b2a      	ldr	r3, [pc, #168]	; (a6c <nrf52k_flash_write+0xc4>)
     9c2:	2201      	movs	r2, #1
    if (tmp) {
     9c4:	f016 0a03 	ands.w	sl, r6, #3
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     9c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     9cc:	d026      	beq.n	a1c <nrf52k_flash_write+0x74>
        if (nrf52k_flash_wait_ready()) {
     9ce:	f7ff ffb1 	bl	934 <nrf52k_flash_wait_ready>
     9d2:	b160      	cbz	r0, 9ee <nrf52k_flash_write+0x46>
    int rc = -1;
     9d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     9d8:	4b24      	ldr	r3, [pc, #144]	; (a6c <nrf52k_flash_write+0xc4>)
     9da:	2200      	movs	r2, #0
     9dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     9e0:	f1b8 0f00 	cmp.w	r8, #0
     9e4:	d100      	bne.n	9e8 <nrf52k_flash_write+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
     9e6:	b662      	cpsie	i
}
     9e8:	b002      	add	sp, #8
     9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        val = *(uint32_t *)(address & ~0x3);
     9ee:	f026 0903 	bic.w	r9, r6, #3
     9f2:	a802      	add	r0, sp, #8
        cnt = 4 - tmp;
     9f4:	f1ca 0704 	rsb	r7, sl, #4
        val = *(uint32_t *)(address & ~0x3);
     9f8:	f8d9 3000 	ldr.w	r3, [r9]
     9fc:	f840 3d04 	str.w	r3, [r0, #-4]!
     a00:	42af      	cmp	r7, r5
     a02:	bf28      	it	cs
     a04:	462f      	movcs	r7, r5
        memcpy((uint8_t *)&val + tmp, src, cnt);
     a06:	4621      	mov	r1, r4
     a08:	463a      	mov	r2, r7
     a0a:	4450      	add	r0, sl
     a0c:	f000 ff16 	bl	183c <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     a10:	9b01      	ldr	r3, [sp, #4]
     a12:	f8c9 3000 	str.w	r3, [r9]
        address += cnt;
     a16:	443e      	add	r6, r7
        num_bytes -= cnt;
     a18:	1bed      	subs	r5, r5, r7
        src += cnt;
     a1a:	443c      	add	r4, r7
     a1c:	1b36      	subs	r6, r6, r4
     a1e:	e007      	b.n	a30 <nrf52k_flash_write+0x88>
        if (nrf52k_flash_wait_ready()) {
     a20:	f7ff ff88 	bl	934 <nrf52k_flash_wait_ready>
     a24:	2800      	cmp	r0, #0
     a26:	d1d5      	bne.n	9d4 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = *(uint32_t *)src;
     a28:	f854 3b04 	ldr.w	r3, [r4], #4
     a2c:	603b      	str	r3, [r7, #0]
        num_bytes -= sizeof(uint32_t);
     a2e:	3d04      	subs	r5, #4
    while (num_bytes >= sizeof(uint32_t)) {
     a30:	2d03      	cmp	r5, #3
     a32:	eb04 0706 	add.w	r7, r4, r6
     a36:	d8f3      	bhi.n	a20 <nrf52k_flash_write+0x78>
    if (num_bytes) {
     a38:	b16d      	cbz	r5, a56 <nrf52k_flash_write+0xae>
        val = *(uint32_t *)address;
     a3a:	a802      	add	r0, sp, #8
     a3c:	683b      	ldr	r3, [r7, #0]
     a3e:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     a42:	462a      	mov	r2, r5
     a44:	4621      	mov	r1, r4
     a46:	f000 fef9 	bl	183c <memcpy>
        if (nrf52k_flash_wait_ready()) {
     a4a:	f7ff ff73 	bl	934 <nrf52k_flash_wait_ready>
     a4e:	2800      	cmp	r0, #0
     a50:	d1c0      	bne.n	9d4 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = val;
     a52:	9b01      	ldr	r3, [sp, #4]
     a54:	603b      	str	r3, [r7, #0]
    if (nrf52k_flash_wait_ready()) {
     a56:	f7ff ff6d 	bl	934 <nrf52k_flash_wait_ready>
     a5a:	3000      	adds	r0, #0
     a5c:	bf18      	it	ne
     a5e:	2001      	movne	r0, #1
     a60:	4240      	negs	r0, r0
out:
     a62:	e7b9      	b.n	9d8 <nrf52k_flash_write+0x30>
        return -1;
     a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a68:	e7be      	b.n	9e8 <nrf52k_flash_write+0x40>
     a6a:	bf00      	nop
     a6c:	4001e000 	.word	0x4001e000

00000a70 <nrf52k_flash_read>:
{
     a70:	b508      	push	{r3, lr}
     a72:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     a74:	461a      	mov	r2, r3
     a76:	f000 fee1 	bl	183c <memcpy>
}
     a7a:	2000      	movs	r0, #0
     a7c:	bd08      	pop	{r3, pc}

00000a7e <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     a7e:	297f      	cmp	r1, #127	; 0x7f
{
     a80:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     a82:	dd05      	ble.n	a90 <nrf52k_flash_sector_info+0x12>
     a84:	2300      	movs	r3, #0
     a86:	461a      	mov	r2, r3
     a88:	4619      	mov	r1, r3
     a8a:	4618      	mov	r0, r3
     a8c:	f000 fc0a 	bl	12a4 <__assert_func>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     a90:	0309      	lsls	r1, r1, #12
     a92:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a98:	601a      	str	r2, [r3, #0]
}
     a9a:	2000      	movs	r0, #0
     a9c:	bd08      	pop	{r3, pc}

00000a9e <hal_gpio_init_out>:
 *
 * @return int  0: no error; -1 otherwise.
 */
int
hal_gpio_init_out(int pin, int val)
{
     a9e:	2301      	movs	r3, #1
     aa0:	4083      	lsls	r3, r0
     aa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
     aa6:	b151      	cbz	r1, abe <hal_gpio_init_out+0x20>
        port->OUTSET = HAL_GPIO_MASK(pin);
     aa8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
     aac:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
     ab0:	2103      	movs	r1, #3
     ab2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
     ab6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

    return 0;
}
     aba:	2000      	movs	r0, #0
     abc:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
     abe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
     ac2:	e7f3      	b.n	aac <hal_gpio_init_out+0xe>

00000ac4 <hal_gpio_write>:
 * @param pin Pin to set
 * @param val Value to set pin (0:low 1:high)
 */
void
hal_gpio_write(int pin, int val)
{
     ac4:	2301      	movs	r3, #1
     ac6:	fa03 f000 	lsl.w	r0, r3, r0
     aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
     ace:	b111      	cbz	r1, ad6 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
     ad0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
     ad4:	4770      	bx	lr
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     ad6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
     ada:	4770      	bx	lr

00000adc <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
     adc:	b538      	push	{r3, r4, r5, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
     ade:	4b1b      	ldr	r3, [pc, #108]	; (b4c <nrf52_spi0_irq_handler+0x70>)
     ae0:	781a      	ldrb	r2, [r3, #0]
     ae2:	461d      	mov	r5, r3
     ae4:	bb3a      	cbnz	r2, b36 <nrf52_spi0_irq_handler+0x5a>
    spim = spi->nhs_spi.spim;
     ae6:	691c      	ldr	r4, [r3, #16]
    if (spim->EVENTS_END) {
     ae8:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
     aec:	b319      	cbz	r1, b36 <nrf52_spi0_irq_handler+0x5a>
        spim->EVENTS_END = 0;
     aee:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
        if (spi->spi_xfr_flag == 0) {
     af2:	785a      	ldrb	r2, [r3, #1]
     af4:	b1fa      	cbz	r2, b36 <nrf52_spi0_irq_handler+0x5a>
        spi->nhs_bytes_txd += xfr_bytes;
     af6:	88d9      	ldrh	r1, [r3, #6]
        xfr_bytes = spim->TXD.AMOUNT;
     af8:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
     afc:	4401      	add	r1, r0
     afe:	b28a      	uxth	r2, r1
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     b00:	8899      	ldrh	r1, [r3, #4]
        spi->nhs_bytes_txd += xfr_bytes;
     b02:	80da      	strh	r2, [r3, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     b04:	428a      	cmp	r2, r1
     b06:	d217      	bcs.n	b38 <nrf52_spi0_irq_handler+0x5c>
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
     b08:	1a89      	subs	r1, r1, r2
     b0a:	b289      	uxth	r1, r1
            spi->nhs_txbuf += xfr_bytes;
     b0c:	699d      	ldr	r5, [r3, #24]
            if (spi->nhs_rxbuf) {
     b0e:	69da      	ldr	r2, [r3, #28]
     b10:	b280      	uxth	r0, r0
            spim->TXD.MAXCNT = len;
     b12:	29ff      	cmp	r1, #255	; 0xff
            spi->nhs_txbuf += xfr_bytes;
     b14:	4405      	add	r5, r0
            spim->TXD.MAXCNT = len;
     b16:	bf28      	it	cs
     b18:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
     b1a:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
            spi->nhs_txbuf += xfr_bytes;
     b1e:	619d      	str	r5, [r3, #24]
            spim->TXD.MAXCNT = len;
     b20:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
            if (spi->nhs_rxbuf) {
     b24:	b12a      	cbz	r2, b32 <nrf52_spi0_irq_handler+0x56>
                spi->nhs_rxbuf += xfr_bytes;
     b26:	4402      	add	r2, r0
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
     b28:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
                spi->nhs_rxbuf += xfr_bytes;
     b2c:	61da      	str	r2, [r3, #28]
                spim->RXD.MAXCNT = len;
     b2e:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
            spim->TASKS_START = 1;
     b32:	2301      	movs	r3, #1
     b34:	6123      	str	r3, [r4, #16]
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
     b36:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
     b38:	6a1b      	ldr	r3, [r3, #32]
     b3a:	b10b      	cbz	r3, b40 <nrf52_spi0_irq_handler+0x64>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
     b3c:	6a68      	ldr	r0, [r5, #36]	; 0x24
     b3e:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
     b40:	2300      	movs	r3, #0
     b42:	706b      	strb	r3, [r5, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
     b44:	2340      	movs	r3, #64	; 0x40
     b46:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
     b4a:	e7f4      	b.n	b36 <nrf52_spi0_irq_handler+0x5a>
     b4c:	20006298 	.word	0x20006298

00000b50 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     b50:	2802      	cmp	r0, #2
{
     b52:	b530      	push	{r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     b54:	f300 8085 	bgt.w	c62 <hal_spi_config+0x112>
     b58:	4b44      	ldr	r3, [pc, #272]	; (c6c <hal_spi_config+0x11c>)
     b5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     b5e:	2b00      	cmp	r3, #0
     b60:	d07f      	beq.n	c62 <hal_spi_config+0x112>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
     b62:	691c      	ldr	r4, [r3, #16]
    if (spim->ENABLE != 0) {
     b64:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
     b68:	2800      	cmp	r0, #0
     b6a:	d17c      	bne.n	c66 <hal_spi_config+0x116>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     b6c:	781a      	ldrb	r2, [r3, #0]
     b6e:	2a00      	cmp	r2, #0
     b70:	d164      	bne.n	c3c <hal_spi_config+0xec>
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
     b72:	680a      	ldr	r2, [r1, #0]
     b74:	609a      	str	r2, [r3, #8]
     b76:	684a      	ldr	r2, [r1, #4]
     b78:	60da      	str	r2, [r3, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     b7a:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    if (settings->data_mode <= HAL_SPI_MODE1) {
     b7e:	780d      	ldrb	r5, [r1, #0]
     b80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     b84:	f003 031f 	and.w	r3, r3, #31
     b88:	2201      	movs	r2, #1
        port->OUTCLR = (1UL << pin);
     b8a:	409a      	lsls	r2, r3
    if (settings->data_mode <= HAL_SPI_MODE1) {
     b8c:	2d01      	cmp	r5, #1
        port->OUTCLR = (1UL << pin);
     b8e:	bf94      	ite	ls
     b90:	f8c0 250c 	strls.w	r2, [r0, #1292]	; 0x50c
        port->OUTSET = (1UL << pin);
     b94:	f8c0 2508 	strhi.w	r2, [r0, #1288]	; 0x508
    port->PIN_CNF[pin] =
     b98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     b9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     ba0:	2003      	movs	r0, #3
     ba2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    switch (settings->word_size) {
     ba6:	788b      	ldrb	r3, [r1, #2]
     ba8:	2b00      	cmp	r3, #0
            rc = EINVAL;
     baa:	bf0c      	ite	eq
     bac:	2000      	moveq	r0, #0
     bae:	2016      	movne	r0, #22
    switch (settings->data_mode) {
     bb0:	2d03      	cmp	r5, #3
     bb2:	d81e      	bhi.n	bf2 <hal_spi_config+0xa2>
     bb4:	e8df f005 	tbb	[pc, r5]
     bb8:	1b190220 	.word	0x1b190220
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     bbc:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     bbe:	784a      	ldrb	r2, [r1, #1]
     bc0:	2a01      	cmp	r2, #1
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
     bc2:	bf08      	it	eq
     bc4:	f043 0301 	orreq.w	r3, r3, #1
    spim->CONFIG = nrf_config;
     bc8:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    switch (settings->baudrate) {
     bcc:	684b      	ldr	r3, [r1, #4]
     bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     bd2:	d027      	beq.n	c24 <hal_spi_config+0xd4>
     bd4:	d812      	bhi.n	bfc <hal_spi_config+0xac>
     bd6:	2bfa      	cmp	r3, #250	; 0xfa
     bd8:	d01c      	beq.n	c14 <hal_spi_config+0xc4>
     bda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     bde:	d01e      	beq.n	c1e <hal_spi_config+0xce>
     be0:	2b7d      	cmp	r3, #125	; 0x7d
     be2:	d128      	bne.n	c36 <hal_spi_config+0xe6>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
     be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     be8:	e016      	b.n	c18 <hal_spi_config+0xc8>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     bea:	2304      	movs	r3, #4
     bec:	e7e7      	b.n	bbe <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     bee:	2306      	movs	r3, #6
     bf0:	e7e5      	b.n	bbe <hal_spi_config+0x6e>
            nrf_config = 0;
     bf2:	2300      	movs	r3, #0
            rc = EINVAL;
     bf4:	2016      	movs	r0, #22
     bf6:	e7e2      	b.n	bbe <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     bf8:	2300      	movs	r3, #0
     bfa:	e7e0      	b.n	bbe <hal_spi_config+0x6e>
    switch (settings->baudrate) {
     bfc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
     c00:	d013      	beq.n	c2a <hal_spi_config+0xda>
     c02:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
     c06:	d013      	beq.n	c30 <hal_spi_config+0xe0>
     c08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     c0c:	d113      	bne.n	c36 <hal_spi_config+0xe6>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
     c0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     c12:	e001      	b.n	c18 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
     c14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    spim->FREQUENCY = frequency;
     c18:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
     c1c:	bd30      	pop	{r4, r5, pc}
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
     c1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c22:	e7f9      	b.n	c18 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
     c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     c28:	e7f6      	b.n	c18 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
     c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c2e:	e7f3      	b.n	c18 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
     c30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
     c34:	e7f0      	b.n	c18 <hal_spi_config+0xc8>
            frequency = 0;
     c36:	2300      	movs	r3, #0
            rc = EINVAL;
     c38:	2016      	movs	r0, #22
     c3a:	e7ed      	b.n	c18 <hal_spi_config+0xc8>
        rc = hal_spi_config_slave(spi, settings);
     c3c:	780b      	ldrb	r3, [r1, #0]
     c3e:	784d      	ldrb	r5, [r1, #1]
     c40:	788a      	ldrb	r2, [r1, #2]
     c42:	2b03      	cmp	r3, #3
     c44:	bf99      	ittee	ls
     c46:	490a      	ldrls	r1, [pc, #40]	; (c70 <hal_spi_config+0x120>)
     c48:	5ccb      	ldrbls	r3, [r1, r3]
     c4a:	4603      	movhi	r3, r0
     c4c:	2016      	movhi	r0, #22
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     c4e:	2d01      	cmp	r5, #1
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
     c50:	bf08      	it	eq
     c52:	f043 0301 	orreq.w	r3, r3, #1
    switch (settings->word_size) {
     c56:	2a00      	cmp	r2, #0
    spis->CONFIG = nrf_config;
     c58:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
            rc = EINVAL;
     c5c:	bf18      	it	ne
     c5e:	2016      	movne	r0, #22
     c60:	e7dc      	b.n	c1c <hal_spi_config+0xcc>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     c62:	2016      	movs	r0, #22
     c64:	e7da      	b.n	c1c <hal_spi_config+0xcc>
        return -1;
     c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c6a:	e7d7      	b.n	c1c <hal_spi_config+0xcc>
     c6c:	00003cf4 	.word	0x00003cf4
     c70:	00003cf0 	.word	0x00003cf0

00000c74 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     c74:	2802      	cmp	r0, #2
     c76:	dc18      	bgt.n	caa <hal_spi_enable+0x36>
     c78:	4b0d      	ldr	r3, [pc, #52]	; (cb0 <hal_spi_enable+0x3c>)
     c7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     c7e:	b1a3      	cbz	r3, caa <hal_spi_enable+0x36>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     c80:	7818      	ldrb	r0, [r3, #0]
     c82:	b920      	cbnz	r0, c8e <hal_spi_enable+0x1a>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
     c84:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
     c86:	2201      	movs	r2, #1

        spis = spi->nhs_spi.spis;
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
     c88:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     c8c:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
     c8e:	6a1a      	ldr	r2, [r3, #32]
     c90:	b15a      	cbz	r2, caa <hal_spi_enable+0x36>
        spis = spi->nhs_spi.spis;
     c92:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
     c94:	2000      	movs	r0, #0
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
     c96:	f240 4202 	movw	r2, #1026	; 0x402
        spis->EVENTS_END = 0;
     c9a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
     c9e:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
     ca2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
     ca6:	2202      	movs	r2, #2
     ca8:	e7ee      	b.n	c88 <hal_spi_enable+0x14>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     caa:	2016      	movs	r0, #22
    }
    rc = 0;

err:
    return rc;
}
     cac:	4770      	bx	lr
     cae:	bf00      	nop
     cb0:	00003cf4 	.word	0x00003cf4

00000cb4 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     cb4:	2802      	cmp	r0, #2
     cb6:	dc27      	bgt.n	d08 <hal_spi_disable+0x54>
     cb8:	4b14      	ldr	r3, [pc, #80]	; (d0c <hal_spi_disable+0x58>)
     cba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     cbe:	b31b      	cbz	r3, d08 <hal_spi_disable+0x54>
     cc0:	691a      	ldr	r2, [r3, #16]

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     cc2:	7818      	ldrb	r0, [r3, #0]
     cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        spim = spi->nhs_spi.spim;
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     cc8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     ccc:	b998      	cbnz	r0, cf6 <hal_spi_disable+0x42>

        if (spi->spi_xfr_flag) {
     cce:	7859      	ldrb	r1, [r3, #1]
     cd0:	b149      	cbz	r1, ce6 <hal_spi_disable+0x32>
    spim->TASKS_STOP = 1;
     cd2:	2101      	movs	r1, #1
     cd4:	6151      	str	r1, [r2, #20]
    while (!spim->EVENTS_STOPPED) {}
     cd6:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
     cda:	2900      	cmp	r1, #0
     cdc:	d0fb      	beq.n	cd6 <hal_spi_disable+0x22>
    spim->EVENTS_STOPPED = 0;
     cde:	2100      	movs	r1, #0
     ce0:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
     ce4:	7059      	strb	r1, [r3, #1]
        }
        spim->ENABLE = 0;
     ce6:	2100      	movs	r1, #0
     ce8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
     cec:	2000      	movs	r0, #0
    spi->nhs_rxbuf = NULL;
     cee:	e9c3 0006 	strd	r0, r0, [r3, #24]
    spi->nhs_buflen = 0;
     cf2:	6058      	str	r0, [r3, #4]
     cf4:	4770      	bx	lr
        spis->EVENTS_END = 0;
     cf6:	2100      	movs	r1, #0
     cf8:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
     cfc:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
        spis->ENABLE = 0;
     d00:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
     d04:	70d9      	strb	r1, [r3, #3]
     d06:	e7f1      	b.n	cec <hal_spi_disable+0x38>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d08:	2016      	movs	r0, #22

    rc = 0;

err:
    return rc;
}
     d0a:	4770      	bx	lr
     d0c:	00003cf4 	.word	0x00003cf4

00000d10 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d10:	2802      	cmp	r0, #2
{
     d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d14:	4604      	mov	r4, r0
     d16:	460e      	mov	r6, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d18:	dc5e      	bgt.n	dd8 <hal_spi_init+0xc8>
     d1a:	4b30      	ldr	r3, [pc, #192]	; (ddc <hal_spi_init+0xcc>)
     d1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     d20:	2b00      	cmp	r3, #0
     d22:	d059      	beq.n	dd8 <hal_spi_init+0xc8>
    if (cfg == NULL) {
     d24:	2900      	cmp	r1, #0
     d26:	d057      	beq.n	dd8 <hal_spi_init+0xc8>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
     d28:	2a01      	cmp	r2, #1
     d2a:	d855      	bhi.n	dd8 <hal_spi_init+0xc8>
    spi->spi_type  = spi_type;
     d2c:	701a      	strb	r2, [r3, #0]
    if (spi_num == 0) {
     d2e:	2800      	cmp	r0, #0
     d30:	d152      	bne.n	dd8 <hal_spi_init+0xc8>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
     d32:	4d2b      	ldr	r5, [pc, #172]	; (de0 <hal_spi_init+0xd0>)
     d34:	2703      	movs	r7, #3
     d36:	752f      	strb	r7, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
     d38:	2a00      	cmp	r2, #0
     d3a:	d148      	bne.n	dce <hal_spi_init+0xbe>
            spi->nhs_spi.spim = NRF_SPIM0;
     d3c:	4b29      	ldr	r3, [pc, #164]	; (de4 <hal_spi_init+0xd4>)
     d3e:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
     d40:	f7ff ffb8 	bl	cb4 <hal_spi_disable>
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
     d44:	7871      	ldrb	r1, [r6, #1]
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
     d46:	78b0      	ldrb	r0, [r6, #2]
     d48:	f896 c000 	ldrb.w	ip, [r6]
    port->OUTCLR = (1UL << pin);
     d4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d50:	2301      	movs	r3, #1
     d52:	fa03 f601 	lsl.w	r6, r3, r1
     d56:	f8c2 650c 	str.w	r6, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin] =
     d5a:	f501 76e0 	add.w	r6, r1, #448	; 0x1c0
     d5e:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
    port->PIN_CNF[pin] =
     d62:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
     d66:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
     d6a:	692a      	ldr	r2, [r5, #16]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     d6c:	4e1e      	ldr	r6, [pc, #120]	; (de8 <hal_spi_init+0xd8>)
    spim->PSEL.SCK = cfg->sck_pin;
     d6e:	f8c2 c508 	str.w	ip, [r2, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
     d72:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     d76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    spim->PSEL.MISO = cfg->miso_pin;
     d7a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     d7e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
     d82:	f995 2014 	ldrsb.w	r2, [r5, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     d86:	4919      	ldr	r1, [pc, #100]	; (dec <hal_spi_init+0xdc>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     d88:	f102 0510 	add.w	r5, r2, #16
  uint32_t vectors = (uint32_t )SCB->VTOR;
     d8c:	6888      	ldr	r0, [r1, #8]
  if ((int32_t)(IRQn) >= 0)
     d8e:	2a00      	cmp	r2, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     d90:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
  if ((int32_t)(IRQn) >= 0)
     d94:	db14      	blt.n	dc0 <hal_spi_init+0xb0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d96:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
     d9a:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
     d9e:	20e0      	movs	r0, #224	; 0xe0
     da0:	f881 0300 	strb.w	r0, [r1, #768]	; 0x300
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     da4:	f002 011f 	and.w	r1, r2, #31
     da8:	0952      	lsrs	r2, r2, #5
     daa:	0092      	lsls	r2, r2, #2
     dac:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
     db0:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
     db4:	408b      	lsls	r3, r1
     db6:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dba:	6013      	str	r3, [r2, #0]
}
     dbc:	4620      	mov	r0, r4
     dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dc0:	f002 020f 	and.w	r2, r2, #15
     dc4:	3a04      	subs	r2, #4
     dc6:	440a      	add	r2, r1
     dc8:	23e0      	movs	r3, #224	; 0xe0
     dca:	7613      	strb	r3, [r2, #24]
     dcc:	e7f6      	b.n	dbc <hal_spi_init+0xac>
            assert(0);
     dce:	4603      	mov	r3, r0
     dd0:	4602      	mov	r2, r0
     dd2:	4601      	mov	r1, r0
     dd4:	f000 fa66 	bl	12a4 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     dd8:	2416      	movs	r4, #22
     dda:	e7ef      	b.n	dbc <hal_spi_init+0xac>
     ddc:	00003cf4 	.word	0x00003cf4
     de0:	20006298 	.word	0x20006298
     de4:	40003000 	.word	0x40003000
     de8:	00000add 	.word	0x00000add
     dec:	e000ed00 	.word	0xe000ed00

00000df0 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
     df0:	2802      	cmp	r0, #2
     df2:	dc16      	bgt.n	e22 <hal_spi_tx_val+0x32>
     df4:	4b0d      	ldr	r3, [pc, #52]	; (e2c <hal_spi_tx_val+0x3c>)
     df6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     dfa:	b193      	cbz	r3, e22 <hal_spi_tx_val+0x32>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     dfc:	781a      	ldrb	r2, [r3, #0]
     dfe:	b992      	cbnz	r2, e26 <hal_spi_tx_val+0x36>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
     e00:	691b      	ldr	r3, [r3, #16]
        spi->EVENTS_READY = 0;
        spi->TXD = (uint8_t)val;
     e02:	b2c9      	uxtb	r1, r1
        spi->EVENTS_READY = 0;
     e04:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        spi->TXD = (uint8_t)val;
     e08:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
     e0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     e10:	2a00      	cmp	r2, #0
     e12:	d0fb      	beq.n	e0c <hal_spi_tx_val+0x1c>
        spi->EVENTS_READY = 0;
     e14:	2200      	movs	r2, #0
     e16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
     e1a:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
     e1e:	b280      	uxth	r0, r0
     e20:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
     e22:	2016      	movs	r0, #22
     e24:	4770      	bx	lr
        retval = 0xFFFF;
     e26:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
     e2a:	4770      	bx	lr
     e2c:	00003cf4 	.word	0x00003cf4

00000e30 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     e30:	2802      	cmp	r0, #2
     e32:	dc0a      	bgt.n	e4a <hal_spi_set_txrx_cb+0x1a>
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <hal_spi_set_txrx_cb+0x24>)
     e36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     e3a:	b133      	cbz	r3, e4a <hal_spi_set_txrx_cb+0x1a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
     e3c:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
     e3e:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
     e42:	b920      	cbnz	r0, e4e <hal_spi_set_txrx_cb+0x1e>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
        spi->txrx_cb_arg = arg;
     e44:	e9c3 1208 	strd	r1, r2, [r3, #32]
     e48:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     e4a:	2016      	movs	r0, #22
     e4c:	4770      	bx	lr
        rc = -1;
     e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
     e52:	4770      	bx	lr
     e54:	00003cf4 	.word	0x00003cf4

00000e58 <hal_spi_txrx>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx(int spi_num, void *txbuf, void *rxbuf, int len)
{
     e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e5a:	460d      	mov	r5, r1
     e5c:	4617      	mov	r7, r2
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
     e5e:	461e      	mov	r6, r3
     e60:	2b00      	cmp	r3, #0
     e62:	d03d      	beq.n	ee0 <hal_spi_txrx+0x88>
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
     e64:	2802      	cmp	r0, #2
     e66:	dc3b      	bgt.n	ee0 <hal_spi_txrx+0x88>
     e68:	4b1e      	ldr	r3, [pc, #120]	; (ee4 <hal_spi_txrx+0x8c>)
     e6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     e6e:	b3bb      	cbz	r3, ee0 <hal_spi_txrx+0x88>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     e70:	781a      	ldrb	r2, [r3, #0]
     e72:	bbaa      	cbnz	r2, ee0 <hal_spi_txrx+0x88>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
     e74:	b3a1      	cbz	r1, ee0 <hal_spi_txrx+0x88>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
     e76:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
     e78:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
     e7c:	2b07      	cmp	r3, #7
     e7e:	d105      	bne.n	e8c <hal_spi_txrx+0x34>
            hal_spi_disable(spi_num);
     e80:	f7ff ff18 	bl	cb4 <hal_spi_disable>
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
     e84:	2301      	movs	r3, #1
     e86:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
     e8a:	e001      	b.n	e90 <hal_spi_txrx+0x38>
        if (enabled == 0) {
     e8c:	2b00      	cmp	r3, #0
     e8e:	d0f9      	beq.n	e84 <hal_spi_txrx+0x2c>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
            spi->EVENTS_READY = 0;
     e90:	2300      	movs	r3, #0
        while (spi->EVENTS_READY) {
     e92:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
     e96:	b948      	cbnz	r0, eac <hal_spi_txrx+0x54>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
     e98:	782b      	ldrb	r3, [r5, #0]
     e9a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
        rxd = (uint8_t *)rxbuf;
     e9e:	4639      	mov	r1, r7
        txcnt = len - 1;
     ea0:	1e73      	subs	r3, r6, #1
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
            spi->EVENTS_READY = 0;
     ea2:	4602      	mov	r2, r0
        for (i = 0; i < len; ++i) {
     ea4:	42b0      	cmp	r0, r6
     ea6:	db06      	blt.n	eb6 <hal_spi_txrx+0x5e>
            if (rxbuf) {
                *rxd = rxval;
                ++rxd;
            }
        }
        return 0;
     ea8:	2000      	movs	r0, #0
    }

err:
    return rc;
}
     eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxval = (uint8_t)spi->RXD;
     eac:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
     eb0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
     eb4:	e7ed      	b.n	e92 <hal_spi_txrx+0x3a>
            if (txcnt) {
     eb6:	b12b      	cbz	r3, ec4 <hal_spi_txrx+0x6c>
                spi->TXD = *txd;
     eb8:	f895 c001 	ldrb.w	ip, [r5, #1]
     ebc:	f8c4 c51c 	str.w	ip, [r4, #1308]	; 0x51c
                --txcnt;
     ec0:	3b01      	subs	r3, #1
                ++txd;
     ec2:	3501      	adds	r5, #1
            while (!spi->EVENTS_READY) {}
     ec4:	f8d4 c108 	ldr.w	ip, [r4, #264]	; 0x108
     ec8:	f1bc 0f00 	cmp.w	ip, #0
     ecc:	d0fa      	beq.n	ec4 <hal_spi_txrx+0x6c>
            spi->EVENTS_READY = 0;
     ece:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
     ed2:	f8d4 c518 	ldr.w	ip, [r4, #1304]	; 0x518
            if (rxbuf) {
     ed6:	b10f      	cbz	r7, edc <hal_spi_txrx+0x84>
            rxval = (uint8_t)spi->RXD;
     ed8:	f801 cb01 	strb.w	ip, [r1], #1
        for (i = 0; i < len; ++i) {
     edc:	3001      	adds	r0, #1
     ede:	e7e1      	b.n	ea4 <hal_spi_txrx+0x4c>
    return rc;
     ee0:	2016      	movs	r0, #22
     ee2:	e7e2      	b.n	eaa <hal_spi_txrx+0x52>
     ee4:	00003cf4 	.word	0x00003cf4

00000ee8 <hal_system_start>:
void __attribute__((naked))
hal_system_start(void *img_start)
{
    uint32_t *img_data = img_start;

    asm volatile (".syntax unified        \n"
     ee8:	e9d0 3200 	ldrd	r3, r2, [r0]
     eec:	f383 8808 	msr	MSP, r3
     ef0:	4710      	bx	r2
	...

00000ef4 <nrf52_wdt_irq_handler>:
/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     ef4:	4a07      	ldr	r2, [pc, #28]	; (f14 <nrf52_wdt_irq_handler+0x20>)
{
     ef6:	b508      	push	{r3, lr}
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     ef8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
     efc:	07db      	lsls	r3, r3, #31
     efe:	d507      	bpl.n	f10 <nrf52_wdt_irq_handler+0x1c>
        NRF_WDT->EVENTS_TIMEOUT = 0;
     f00:	2300      	movs	r3, #0
     f02:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    assert(0);
     f06:	4619      	mov	r1, r3
     f08:	461a      	mov	r2, r3
     f0a:	4618      	mov	r0, r3
     f0c:	f000 f9ca 	bl	12a4 <__assert_func>
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
     f10:	bd08      	pop	{r3, pc}
     f12:	bf00      	nop
     f14:	40010000 	.word	0x40010000

00000f18 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     f18:	4a16      	ldr	r2, [pc, #88]	; (f74 <hal_watchdog_init+0x5c>)
{
     f1a:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     f1c:	2301      	movs	r3, #1
     f1e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
     f22:	4b15      	ldr	r3, [pc, #84]	; (f78 <hal_watchdog_init+0x60>)
     f24:	4298      	cmp	r0, r3
     f26:	d905      	bls.n	f34 <hal_watchdog_init+0x1c>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
     f28:	2300      	movs	r3, #0
     f2a:	461a      	mov	r2, r3
     f2c:	4619      	mov	r1, r3
     f2e:	4618      	mov	r0, r3
     f30:	f000 f9b8 	bl	12a4 <__assert_func>
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
     f34:	2360      	movs	r3, #96	; 0x60
     f36:	4343      	muls	r3, r0
     f38:	217d      	movs	r1, #125	; 0x7d
     f3a:	fbb3 f3f1 	udiv	r3, r3, r1
     f3e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  uint32_t vectors = (uint32_t )SCB->VTOR;
     f42:	4b0e      	ldr	r3, [pc, #56]	; (f7c <hal_watchdog_init+0x64>)
     f44:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
     f48:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     f4a:	490d      	ldr	r1, [pc, #52]	; (f80 <hal_watchdog_init+0x68>)
     f4c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f50:	4b0c      	ldr	r3, [pc, #48]	; (f84 <hal_watchdog_init+0x6c>)
     f52:	21e0      	movs	r1, #224	; 0xe0
     f54:	f883 1310 	strb.w	r1, [r3, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     f5c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f60:	6019      	str	r1, [r3, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
     f62:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     f66:	f043 0301 	orr.w	r3, r3, #1
     f6a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

    return (0);
}
     f6e:	2000      	movs	r0, #0
     f70:	bd08      	pop	{r3, pc}
     f72:	bf00      	nop
     f74:	40010000 	.word	0x40010000
     f78:	02aaaaaa 	.word	0x02aaaaaa
     f7c:	e000ed00 	.word	0xe000ed00
     f80:	00000ef5 	.word	0x00000ef5
     f84:	e000e100 	.word	0xe000e100

00000f88 <nrf52_periph_create>:
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
     f88:	2100      	movs	r1, #0
#endif
}

void
nrf52_periph_create(void)
{
     f8a:	b508      	push	{r3, lr}
    rc = hal_timer_init(0, NULL);
     f8c:	4608      	mov	r0, r1
     f8e:	f000 f8d7 	bl	1140 <hal_timer_init>
    assert(rc == 0);
     f92:	b128      	cbz	r0, fa0 <nrf52_periph_create+0x18>
     f94:	2300      	movs	r3, #0
     f96:	461a      	mov	r2, r3
     f98:	4619      	mov	r1, r3
     f9a:	4618      	mov	r0, r3
     f9c:	f000 f982 	bl	12a4 <__assert_func>
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
     fa0:	4805      	ldr	r0, [pc, #20]	; (fb8 <nrf52_periph_create+0x30>)
     fa2:	f000 f9f1 	bl	1388 <os_cputime_init>
    assert(rc == 0);
     fa6:	4602      	mov	r2, r0
     fa8:	2800      	cmp	r0, #0
     faa:	d1f3      	bne.n	f94 <nrf52_periph_create+0xc>
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
     fac:	4903      	ldr	r1, [pc, #12]	; (fbc <nrf52_periph_create+0x34>)
     fae:	f7ff feaf 	bl	d10 <hal_spi_init>
    assert(rc == 0);
     fb2:	2800      	cmp	r0, #0
     fb4:	d1ee      	bne.n	f94 <nrf52_periph_create+0xc>
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
     fb6:	bd08      	pop	{r3, pc}
     fb8:	000f4240 	.word	0x000f4240
     fbc:	00003d00 	.word	0x00003d00

00000fc0 <__NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
     fc0:	2800      	cmp	r0, #0
     fc2:	db09      	blt.n	fd8 <__NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fc4:	0943      	lsrs	r3, r0, #5
     fc6:	2201      	movs	r2, #1
     fc8:	f000 001f 	and.w	r0, r0, #31
     fcc:	fa02 f000 	lsl.w	r0, r2, r0
     fd0:	3340      	adds	r3, #64	; 0x40
     fd2:	4a02      	ldr	r2, [pc, #8]	; (fdc <__NVIC_SetPendingIRQ+0x1c>)
     fd4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     fd8:	4770      	bx	lr
     fda:	bf00      	nop
     fdc:	e000e100 	.word	0xe000e100

00000fe0 <hal_timer_read_bsptimer>:
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
}

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
     fe0:	b538      	push	{r3, r4, r5, lr}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     fe2:	6903      	ldr	r3, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fe4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     fe8:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    low32 = rtctimer->COUNTER;
     fea:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
     fee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    tcntr = bsptimer->tmr_cntr;
     ff2:	6844      	ldr	r4, [r0, #4]
    if (rtctimer->EVENTS_OVRFLW) {
     ff4:	b15a      	cbz	r2, 100e <hal_timer_read_bsptimer+0x2e>
        tcntr += (1UL << 24);
     ff6:	f104 7480 	add.w	r4, r4, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
        low32 = rtctimer->COUNTER;
        rtctimer->EVENTS_OVRFLW = 0;
     ffa:	2200      	movs	r2, #0
        bsptimer->tmr_cntr = tcntr;
     ffc:	6044      	str	r4, [r0, #4]
        low32 = rtctimer->COUNTER;
     ffe:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    1002:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1006:	f990 0001 	ldrsb.w	r0, [r0, #1]
    100a:	f7ff ffd9 	bl	fc0 <__NVIC_SetPendingIRQ>
    }
    tcntr |= low32;
    100e:	ea41 0004 	orr.w	r0, r1, r4
    __HAL_ENABLE_INTERRUPTS(ctx);
    1012:	b905      	cbnz	r5, 1016 <hal_timer_read_bsptimer+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
    1014:	b662      	cpsie	i

    return tcntr;
}
    1016:	bd38      	pop	{r3, r4, r5, pc}

00001018 <nrf_timer_set_ocmp>:
{
    1018:	b430      	push	{r4, r5}
    if (bsptimer->tmr_rtc) {
    101a:	7884      	ldrb	r4, [r0, #2]
    101c:	6903      	ldr	r3, [r0, #16]
    101e:	b344      	cbz	r4, 1072 <nrf_timer_set_ocmp+0x5a>
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1020:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1024:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        cntr = rtctimer->COUNTER;
    1028:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    102c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
        temp = bsptimer->tmr_cntr;
    1030:	6842      	ldr	r2, [r0, #4]
        if (rtctimer->EVENTS_OVRFLW) {
    1032:	b11d      	cbz	r5, 103c <nrf_timer_set_ocmp+0x24>
            cntr = rtctimer->COUNTER;
    1034:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
            temp += (1UL << 24);
    1038:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
        temp |= cntr;
    103c:	4322      	orrs	r2, r4
        delta_t = (int32_t)(expiry - temp);
    103e:	1a8a      	subs	r2, r1, r2
        if (delta_t < 3) {
    1040:	2a02      	cmp	r2, #2
    1042:	dc04      	bgt.n	104e <nrf_timer_set_ocmp+0x36>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1044:	f990 0001 	ldrsb.w	r0, [r0, #1]
}
    1048:	bc30      	pop	{r4, r5}
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    104a:	f7ff bfb9 	b.w	fc0 <__NVIC_SetPendingIRQ>
            if (delta_t < (1UL << 24)) {
    104e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    1052:	bf34      	ite	cc
    1054:	f021 417f 	biccc.w	r1, r1, #4278190080	; 0xff000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    1058:	f504 0400 	addcs.w	r4, r4, #8388608	; 0x800000
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    105c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    1060:	bf34      	ite	cc
    1062:	f8c3 1548 	strcc.w	r1, [r3, #1352]	; 0x548
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    1066:	f8c3 4548 	strcs.w	r4, [r3, #1352]	; 0x548
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    106a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    106e:	bc30      	pop	{r4, r5}
    1070:	4770      	bx	lr
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1072:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1076:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    107a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    107e:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1082:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1086:	2201      	movs	r2, #1
    1088:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    108a:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    108e:	1a59      	subs	r1, r3, r1
    1090:	2900      	cmp	r1, #0
    1092:	dad7      	bge.n	1044 <nrf_timer_set_ocmp+0x2c>
    1094:	e7eb      	b.n	106e <nrf_timer_set_ocmp+0x56>
	...

00001098 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    1098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hwtimer = bsptimer->tmr_reg;
    109c:	4c27      	ldr	r4, [pc, #156]	; (113c <nrf52_timer0_irq_handler+0xa4>)
    109e:	6926      	ldr	r6, [r4, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    10a0:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    if (compare) {
    10a4:	b113      	cbz	r3, 10ac <nrf52_timer0_irq_handler+0x14>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    10a6:	2300      	movs	r3, #0
    10a8:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
    ++bsptimer->timer_isrs;
    10ac:	68a3      	ldr	r3, [r4, #8]
    10ae:	3301      	adds	r3, #1
    10b0:	60a3      	str	r3, [r4, #8]
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    10b2:	f8d6 3308 	ldr.w	r3, [r6, #776]	; 0x308
    10b6:	031b      	lsls	r3, r3, #12
    10b8:	d53b      	bpl.n	1132 <nrf52_timer0_irq_handler+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10ba:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    10be:	b672      	cpsid	i
            tcntr = hal_timer_read_bsptimer(bsptimer);
    10c0:	f8df a078 	ldr.w	sl, [pc, #120]	; 113c <nrf52_timer0_irq_handler+0xa4>
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    10c4:	f04f 0801 	mov.w	r8, #1
            delta = 0;
    10c8:	f04f 0900 	mov.w	r9, #0
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    10cc:	6965      	ldr	r5, [r4, #20]
    10ce:	b155      	cbz	r5, 10e6 <nrf52_timer0_irq_handler+0x4e>
        if (bsptimer->tmr_rtc) {
    10d0:	78a3      	ldrb	r3, [r4, #2]
    10d2:	b193      	cbz	r3, 10fa <nrf52_timer0_irq_handler+0x62>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    10d4:	4650      	mov	r0, sl
    10d6:	f7ff ff83 	bl	fe0 <hal_timer_read_bsptimer>
            delta = -3;
    10da:	f06f 0302 	mvn.w	r3, #2
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
    10de:	68ea      	ldr	r2, [r5, #12]
    10e0:	1a80      	subs	r0, r0, r2
    10e2:	4298      	cmp	r0, r3
    10e4:	da0f      	bge.n	1106 <nrf52_timer0_irq_handler+0x6e>
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    10e6:	6963      	ldr	r3, [r4, #20]
    if (timer) {
    10e8:	b9db      	cbnz	r3, 1122 <nrf52_timer0_irq_handler+0x8a>
        if (bsptimer->tmr_rtc) {
    10ea:	78a2      	ldrb	r2, [r4, #2]
    10ec:	6923      	ldr	r3, [r4, #16]
    10ee:	b312      	cbz	r2, 1136 <nrf52_timer0_irq_handler+0x9e>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    10f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    10f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    10f8:	e017      	b.n	112a <nrf52_timer0_irq_handler+0x92>
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    10fa:	6922      	ldr	r2, [r4, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    10fc:	f8c2 8048 	str.w	r8, [r2, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1100:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
    1104:	e7eb      	b.n	10de <nrf52_timer0_irq_handler+0x46>
    1106:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    110a:	b143      	cbz	r3, 111e <nrf52_timer0_irq_handler+0x86>
    110c:	615a      	str	r2, [r3, #20]
    110e:	696a      	ldr	r2, [r5, #20]
    1110:	6013      	str	r3, [r2, #0]
            timer->cb_func(timer->cb_arg);
    1112:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
            timer->link.tqe_prev = NULL;
    1116:	f8c5 9014 	str.w	r9, [r5, #20]
            timer->cb_func(timer->cb_arg);
    111a:	4798      	blx	r3
    111c:	e7d6      	b.n	10cc <nrf52_timer0_irq_handler+0x34>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    111e:	61a2      	str	r2, [r4, #24]
    1120:	e7f5      	b.n	110e <nrf52_timer0_irq_handler+0x76>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    1122:	68d9      	ldr	r1, [r3, #12]
    1124:	4805      	ldr	r0, [pc, #20]	; (113c <nrf52_timer0_irq_handler+0xa4>)
    1126:	f7ff ff77 	bl	1018 <nrf_timer_set_ocmp>
    __HAL_ENABLE_INTERRUPTS(ctx);
    112a:	b907      	cbnz	r7, 112e <nrf52_timer0_irq_handler+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
    112c:	b662      	cpsie	i
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    112e:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    hal_timer_irq_handler(&nrf52_hal_timer0);
}
    1132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1136:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    113a:	e7db      	b.n	10f4 <nrf52_timer0_irq_handler+0x5c>
    113c:	200062c0 	.word	0x200062c0

00001140 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1140:	2805      	cmp	r0, #5
    1142:	dc1d      	bgt.n	1180 <hal_timer_init+0x40>
    1144:	4b0f      	ldr	r3, [pc, #60]	; (1184 <hal_timer_init+0x44>)
    1146:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    114a:	b1cb      	cbz	r3, 1180 <hal_timer_init+0x40>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    114c:	781b      	ldrb	r3, [r3, #0]
    114e:	b9bb      	cbnz	r3, 1180 <hal_timer_init+0x40>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    1150:	b9b0      	cbnz	r0, 1180 <hal_timer_init+0x40>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    1152:	4b0d      	ldr	r3, [pc, #52]	; (1188 <hal_timer_init+0x48>)
    1154:	4a0d      	ldr	r2, [pc, #52]	; (118c <hal_timer_init+0x4c>)
    1156:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    1158:	2208      	movs	r2, #8
    115a:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    115c:	4b0c      	ldr	r3, [pc, #48]	; (1190 <hal_timer_init+0x50>)
    115e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    116a:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    116e:	22e0      	movs	r2, #224	; 0xe0
    1170:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1174:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1178:	4a06      	ldr	r2, [pc, #24]	; (1194 <hal_timer_init+0x54>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
    117a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    117c:	661a      	str	r2, [r3, #96]	; 0x60
    117e:	4770      	bx	lr
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;

err:
    return rc;
    1180:	2016      	movs	r0, #22
}
    1182:	4770      	bx	lr
    1184:	00003d04 	.word	0x00003d04
    1188:	200062c0 	.word	0x200062c0
    118c:	40008000 	.word	0x40008000
    1190:	e000e100 	.word	0xe000e100
    1194:	00001099 	.word	0x00001099

00001198 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1198:	2805      	cmp	r0, #5
{
    119a:	b530      	push	{r4, r5, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    119c:	dc5c      	bgt.n	1258 <hal_timer_config+0xc0>
    119e:	4b30      	ldr	r3, [pc, #192]	; (1260 <hal_timer_config+0xc8>)
    11a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    11a4:	2c00      	cmp	r4, #0
    11a6:	d057      	beq.n	1258 <hal_timer_config+0xc0>
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    11a8:	7822      	ldrb	r2, [r4, #0]
    11aa:	2a00      	cmp	r2, #0
    11ac:	d154      	bne.n	1258 <hal_timer_config+0xc0>
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    11ae:	4b2d      	ldr	r3, [pc, #180]	; (1264 <hal_timer_config+0xcc>)
    11b0:	fbb3 f1f1 	udiv	r1, r3, r1
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    11b4:	1e4b      	subs	r3, r1, #1
    11b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    11ba:	d24d      	bcs.n	1258 <hal_timer_config+0xc0>
    11bc:	6923      	ldr	r3, [r4, #16]
    11be:	2b00      	cmp	r3, #0
    11c0:	d04a      	beq.n	1258 <hal_timer_config+0xc0>
        (bsptimer->tmr_reg == NULL)) {
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    11c2:	2901      	cmp	r1, #1
    11c4:	d00f      	beq.n	11e6 <hal_timer_config+0x4e>
    11c6:	2301      	movs	r3, #1
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
            if (div <= (1 << prescaler)) {
    11c8:	4618      	mov	r0, r3
    11ca:	fa00 f503 	lsl.w	r5, r0, r3
    11ce:	428d      	cmp	r5, r1
    11d0:	b2da      	uxtb	r2, r3
    11d2:	d33c      	bcc.n	124e <hal_timer_config+0xb6>
                min_delta = div - (1 << (prescaler - 1));
    11d4:	3b01      	subs	r3, #1
    11d6:	fa00 f303 	lsl.w	r3, r0, r3
    11da:	1acb      	subs	r3, r1, r3
                max_delta = (1 << prescaler) - div;
    11dc:	1a69      	subs	r1, r5, r1
                if (min_delta < max_delta) {
    11de:	428b      	cmp	r3, r1
    11e0:	d201      	bcs.n	11e6 <hal_timer_config+0x4e>
                    prescaler -= 1;
    11e2:	3a01      	subs	r2, #1
    11e4:	b2d2      	uxtb	r2, r2
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    11e6:	4b1f      	ldr	r3, [pc, #124]	; (1264 <hal_timer_config+0xcc>)
    bsptimer->tmr_enabled = 1;
    11e8:	2501      	movs	r5, #1
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    11ea:	4113      	asrs	r3, r2
    11ec:	60e3      	str	r3, [r4, #12]
    bsptimer->tmr_enabled = 1;
    11ee:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    11f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    11f4:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    11f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11fa:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    11fe:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    1202:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
    1206:	d007      	beq.n	1218 <hal_timer_config+0x80>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1208:	2100      	movs	r1, #0
    120a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    120e:	601d      	str	r5, [r3, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    1210:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    1214:	2900      	cmp	r1, #0
    1216:	d0fb      	beq.n	1210 <hal_timer_config+0x78>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
    1218:	6921      	ldr	r1, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    121a:	2301      	movs	r3, #1
    hwtimer->TASKS_CLEAR = 1;

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    121c:	2500      	movs	r5, #0
    hwtimer->TASKS_STOP = 1;
    121e:	604b      	str	r3, [r1, #4]
    hwtimer->TASKS_CLEAR = 1;
    1220:	60cb      	str	r3, [r1, #12]
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    1222:	f8c1 5504 	str.w	r5, [r1, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    1226:	2503      	movs	r5, #3
    1228:	f8c1 5508 	str.w	r5, [r1, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    122c:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    1230:	600b      	str	r3, [r1, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    1232:	7861      	ldrb	r1, [r4, #1]
    1234:	b24a      	sxtb	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1236:	2a00      	cmp	r2, #0
    1238:	db06      	blt.n	1248 <hal_timer_config+0xb0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    123a:	f001 011f 	and.w	r1, r1, #31
    123e:	408b      	lsls	r3, r1
    1240:	0952      	lsrs	r2, r2, #5
    1242:	4909      	ldr	r1, [pc, #36]	; (1268 <hal_timer_config+0xd0>)
    1244:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    1248:	b940      	cbnz	r0, 125c <hal_timer_config+0xc4>
  __ASM volatile ("cpsie i" : : : "memory");
    124a:	b662      	cpsie	i

    return 0;

err:
    return rc;
}
    124c:	bd30      	pop	{r4, r5, pc}
    124e:	3301      	adds	r3, #1
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    1250:	2b0a      	cmp	r3, #10
    1252:	d1ba      	bne.n	11ca <hal_timer_config+0x32>
    1254:	461a      	mov	r2, r3
    1256:	e7c6      	b.n	11e6 <hal_timer_config+0x4e>
    return rc;
    1258:	2016      	movs	r0, #22
    125a:	e7f7      	b.n	124c <hal_timer_config+0xb4>
    return 0;
    125c:	2000      	movs	r0, #0
    125e:	e7f5      	b.n	124c <hal_timer_config+0xb4>
    1260:	00003d04 	.word	0x00003d04
    1264:	00f42400 	.word	0x00f42400
    1268:	e000e100 	.word	0xe000e100

0000126c <hal_timer_read>:
{
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    126c:	2805      	cmp	r0, #5
{
    126e:	b508      	push	{r3, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1270:	dc09      	bgt.n	1286 <hal_timer_read+0x1a>
    1272:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <hal_timer_read+0x34>)
    1274:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1278:	b128      	cbz	r0, 1286 <hal_timer_read+0x1a>
    if (bsptimer->tmr_rtc) {
    127a:	7883      	ldrb	r3, [r0, #2]
    127c:	b14b      	cbz	r3, 1292 <hal_timer_read+0x26>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    1282:	f7ff bead 	b.w	fe0 <hal_timer_read_bsptimer>
    assert(0);
    1286:	2300      	movs	r3, #0
    1288:	461a      	mov	r2, r3
    128a:	4619      	mov	r1, r3
    128c:	4618      	mov	r0, r3
    128e:	f000 f809 	bl	12a4 <__assert_func>
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    1292:	6903      	ldr	r3, [r0, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1294:	2201      	movs	r2, #1
    1296:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1298:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    129c:	bd08      	pop	{r3, pc}
    129e:	bf00      	nop
    12a0:	00003d04 	.word	0x00003d04

000012a4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    12a4:	b508      	push	{r3, lr}
    12a6:	4605      	mov	r5, r0
    12a8:	4674      	mov	r4, lr
    12aa:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    12ac:	f000 f905 	bl	14ba <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    12b0:	f000 fafa 	bl	18a8 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    12b4:	b97d      	cbnz	r5, 12d6 <__assert_func+0x32>
    12b6:	4621      	mov	r1, r4
    12b8:	480a      	ldr	r0, [pc, #40]	; (12e4 <__assert_func+0x40>)
    12ba:	f000 faf7 	bl	18ac <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    12be:	f7fe ff69 	bl	194 <hal_debugger_connected>
    12c2:	b100      	cbz	r0, 12c6 <__assert_func+0x22>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    12c4:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    12c6:	4b08      	ldr	r3, [pc, #32]	; (12e8 <__assert_func+0x44>)
    12c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    12cc:	605a      	str	r2, [r3, #4]
    asm("isb");
    12ce:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    12d2:	f7fe ff47 	bl	164 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    12d6:	4633      	mov	r3, r6
    12d8:	462a      	mov	r2, r5
    12da:	4621      	mov	r1, r4
    12dc:	4803      	ldr	r0, [pc, #12]	; (12ec <__assert_func+0x48>)
    12de:	f000 fae5 	bl	18ac <console_printf>
    12e2:	e7ec      	b.n	12be <__assert_func+0x1a>
    12e4:	00003d1c 	.word	0x00003d1c
    12e8:	e000ed00 	.word	0xe000ed00
    12ec:	00003d2b 	.word	0x00003d2b

000012f0 <os_default_irq>:
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    12f0:	4d1d      	ldr	r5, [pc, #116]	; (1368 <os_default_irq+0x78>)
{
    12f2:	b507      	push	{r0, r1, r2, lr}
    12f4:	4604      	mov	r4, r0
    console_blocking_mode();
    12f6:	f000 fad7 	bl	18a8 <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    12fa:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    12fc:	6822      	ldr	r2, [r4, #0]
    12fe:	481b      	ldr	r0, [pc, #108]	; (136c <os_default_irq+0x7c>)
    1300:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1304:	f000 fad2 	bl	18ac <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    1308:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    130a:	4819      	ldr	r0, [pc, #100]	; (1370 <os_default_irq+0x80>)
    130c:	68cb      	ldr	r3, [r1, #12]
    130e:	9300      	str	r3, [sp, #0]
    1310:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    1314:	6809      	ldr	r1, [r1, #0]
    1316:	f000 fac9 	bl	18ac <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    131a:	6923      	ldr	r3, [r4, #16]
    131c:	9300      	str	r3, [sp, #0]
    131e:	6861      	ldr	r1, [r4, #4]
    1320:	4814      	ldr	r0, [pc, #80]	; (1374 <os_default_irq+0x84>)
    1322:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    1326:	f000 fac1 	bl	18ac <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    132a:	6a23      	ldr	r3, [r4, #32]
    132c:	9300      	str	r3, [sp, #0]
    132e:	6961      	ldr	r1, [r4, #20]
    1330:	4811      	ldr	r0, [pc, #68]	; (1378 <os_default_irq+0x88>)
    1332:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    1336:	f000 fab9 	bl	18ac <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    133a:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    133c:	480f      	ldr	r0, [pc, #60]	; (137c <os_default_irq+0x8c>)
    133e:	69cb      	ldr	r3, [r1, #28]
    1340:	9300      	str	r3, [sp, #0]
    1342:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
    1346:	6909      	ldr	r1, [r1, #16]
    1348:	f000 fab0 	bl	18ac <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    134c:	6869      	ldr	r1, [r5, #4]
    134e:	480c      	ldr	r0, [pc, #48]	; (1380 <os_default_irq+0x90>)
    1350:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1352:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1354:	f000 faaa 	bl	18ac <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    1358:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    135a:	480a      	ldr	r0, [pc, #40]	; (1384 <os_default_irq+0x94>)
    135c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    135e:	f000 faa5 	bl	18ac <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    1362:	f7fe feff 	bl	164 <hal_system_reset>
    1366:	bf00      	nop
    1368:	e000ed00 	.word	0xe000ed00
    136c:	00003d42 	.word	0x00003d42
    1370:	00003d73 	.word	0x00003d73
    1374:	00003da4 	.word	0x00003da4
    1378:	00003dd5 	.word	0x00003dd5
    137c:	00003e06 	.word	0x00003e06
    1380:	00003e37 	.word	0x00003e37
    1384:	00003e5f 	.word	0x00003e5f

00001388 <os_cputime_init>:

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    1388:	4601      	mov	r1, r0
    138a:	2000      	movs	r0, #0
    138c:	f7ff bf04 	b.w	1198 <hal_timer_config>

00001390 <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    1390:	2000      	movs	r0, #0
    1392:	f7ff bf6b 	b.w	126c <hal_timer_read>

00001396 <os_cputime_delay_ticks>:
{
    1396:	b510      	push	{r4, lr}
    1398:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    139a:	f7ff fff9 	bl	1390 <os_cputime_get32>
    139e:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    13a0:	f7ff fff6 	bl	1390 <os_cputime_get32>
    13a4:	1b00      	subs	r0, r0, r4
    13a6:	2800      	cmp	r0, #0
    13a8:	dbfa      	blt.n	13a0 <os_cputime_delay_ticks+0xa>
}
    13aa:	bd10      	pop	{r4, pc}

000013ac <os_cputime_delay_usecs>:
    os_cputime_delay_ticks(ticks);
    13ac:	f7ff bff3 	b.w	1396 <os_cputime_delay_ticks>

000013b0 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    13b0:	4a07      	ldr	r2, [pc, #28]	; (13d0 <os_msys_find_pool+0x20>)
{
    13b2:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	460b      	mov	r3, r1
    13b8:	b923      	cbnz	r3, 13c4 <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    13ba:	b109      	cbz	r1, 13c0 <os_msys_find_pool+0x10>
    13bc:	6853      	ldr	r3, [r2, #4]
    13be:	3b08      	subs	r3, #8
    }

    return (pool);
}
    13c0:	4618      	mov	r0, r3
    13c2:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
    13c4:	881c      	ldrh	r4, [r3, #0]
    13c6:	4284      	cmp	r4, r0
    13c8:	d2fa      	bcs.n	13c0 <os_msys_find_pool+0x10>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    13ca:	689b      	ldr	r3, [r3, #8]
    13cc:	e7f4      	b.n	13b8 <os_msys_find_pool+0x8>
    13ce:	bf00      	nop
    13d0:	20000138 	.word	0x20000138

000013d4 <os_msys_register>:
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    13d4:	4b0e      	ldr	r3, [pc, #56]	; (1410 <os_msys_register+0x3c>)
{
    13d6:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    13d8:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
    13da:	2100      	movs	r1, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    13dc:	4622      	mov	r2, r4
    13de:	b11a      	cbz	r2, 13e8 <os_msys_register+0x14>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    13e0:	8806      	ldrh	r6, [r0, #0]
    13e2:	8815      	ldrh	r5, [r2, #0]
    13e4:	42ae      	cmp	r6, r5
    13e6:	d207      	bcs.n	13f8 <os_msys_register+0x24>
    if (prev) {
    13e8:	b949      	cbnz	r1, 13fe <os_msys_register+0x2a>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    13ea:	6084      	str	r4, [r0, #8]
    13ec:	b914      	cbnz	r4, 13f4 <os_msys_register+0x20>
    13ee:	f100 0208 	add.w	r2, r0, #8
    13f2:	605a      	str	r2, [r3, #4]
    13f4:	6018      	str	r0, [r3, #0]
    13f6:	e009      	b.n	140c <os_msys_register+0x38>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    13f8:	4611      	mov	r1, r2
    13fa:	6892      	ldr	r2, [r2, #8]
    13fc:	e7ef      	b.n	13de <os_msys_register+0xa>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    13fe:	688a      	ldr	r2, [r1, #8]
    1400:	6082      	str	r2, [r0, #8]
    1402:	b912      	cbnz	r2, 140a <os_msys_register+0x36>
    1404:	f100 0208 	add.w	r2, r0, #8
    1408:	605a      	str	r2, [r3, #4]
    140a:	6088      	str	r0, [r1, #8]
}
    140c:	2000      	movs	r0, #0
    140e:	bd70      	pop	{r4, r5, r6, pc}
    1410:	20000138 	.word	0x20000138

00001414 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    1414:	4b02      	ldr	r3, [pc, #8]	; (1420 <os_msys_reset+0xc>)
    1416:	2200      	movs	r2, #0
    1418:	e9c3 2300 	strd	r2, r3, [r3]
}
    141c:	4770      	bx	lr
    141e:	bf00      	nop
    1420:	20000138 	.word	0x20000138

00001424 <os_msys_get_pkthdr>:
    return (NULL);
}

struct os_mbuf *
os_msys_get_pkthdr(uint16_t dsize, uint16_t user_hdr_len)
{
    1424:	b510      	push	{r4, lr}
    1426:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);

    /* If dsize = 0 that means user has no idea how big block size is needed,
     * therefore lets find for him the biggest one
     */
    if (dsize == 0) {
    1428:	b950      	cbnz	r0, 1440 <os_msys_get_pkthdr+0x1c>
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    142a:	4b09      	ldr	r3, [pc, #36]	; (1450 <os_msys_get_pkthdr+0x2c>)
    142c:	681a      	ldr	r2, [r3, #0]
    142e:	b16a      	cbz	r2, 144c <os_msys_get_pkthdr+0x28>
    1430:	6858      	ldr	r0, [r3, #4]
    1432:	3808      	subs	r0, #8
        pool = os_msys_find_biggest_pool();
    } else {
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    }

    if (!pool) {
    1434:	b150      	cbz	r0, 144c <os_msys_get_pkthdr+0x28>
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    1436:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
    1438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    143c:	f000 b86b 	b.w	1516 <os_mbuf_get_pkthdr>
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    1440:	3008      	adds	r0, #8
    1442:	4408      	add	r0, r1
    1444:	b280      	uxth	r0, r0
    1446:	f7ff ffb3 	bl	13b0 <os_msys_find_pool>
    144a:	e7f3      	b.n	1434 <os_msys_get_pkthdr+0x10>
}
    144c:	2000      	movs	r0, #0
    144e:	bd10      	pop	{r4, pc}
    1450:	20000138 	.word	0x20000138

00001454 <os_msys_init>:
    SYSINIT_PANIC_ASSERT(rc == 0);
}

void
os_msys_init(void)
{
    1454:	b513      	push	{r0, r1, r4, lr}
    int rc;

    os_msys_reset();
    1456:	f7ff ffdd 	bl	1414 <os_msys_reset>
    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    145a:	4b11      	ldr	r3, [pc, #68]	; (14a0 <os_msys_init+0x4c>)
    145c:	9301      	str	r3, [sp, #4]
    145e:	f44f 7392 	mov.w	r3, #292	; 0x124
    1462:	9300      	str	r3, [sp, #0]
    1464:	4a0f      	ldr	r2, [pc, #60]	; (14a4 <os_msys_init+0x50>)
    1466:	4910      	ldr	r1, [pc, #64]	; (14a8 <os_msys_init+0x54>)
    1468:	4810      	ldr	r0, [pc, #64]	; (14ac <os_msys_init+0x58>)
    146a:	2340      	movs	r3, #64	; 0x40
    146c:	f000 fcaf 	bl	1dce <mem_init_mbuf_pool>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1470:	b138      	cbz	r0, 1482 <os_msys_init+0x2e>
    1472:	2300      	movs	r3, #0
    1474:	4a0e      	ldr	r2, [pc, #56]	; (14b0 <os_msys_init+0x5c>)
    1476:	9300      	str	r3, [sp, #0]
    1478:	6814      	ldr	r4, [r2, #0]
    147a:	4619      	mov	r1, r3
    147c:	461a      	mov	r2, r3
    147e:	4618      	mov	r0, r3
    1480:	47a0      	blx	r4
    rc = os_msys_register(mbuf_pool);
    1482:	4808      	ldr	r0, [pc, #32]	; (14a4 <os_msys_init+0x50>)
    1484:	f7ff ffa6 	bl	13d4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1488:	b138      	cbz	r0, 149a <os_msys_init+0x46>
    148a:	2300      	movs	r3, #0
    148c:	4a08      	ldr	r2, [pc, #32]	; (14b0 <os_msys_init+0x5c>)
    148e:	9300      	str	r3, [sp, #0]
    1490:	6814      	ldr	r4, [r2, #0]
    1492:	4619      	mov	r1, r3
    1494:	461a      	mov	r2, r3
    1496:	4618      	mov	r0, r3
    1498:	47a0      	blx	r4
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    149a:	b002      	add	sp, #8
    149c:	bd10      	pop	{r4, pc}
    149e:	bf00      	nop
    14a0:	00003e7b 	.word	0x00003e7b
    14a4:	20004a5c 	.word	0x20004a5c
    14a8:	20004a68 	.word	0x20004a68
    14ac:	2000015c 	.word	0x2000015c
    14b0:	2000014c 	.word	0x2000014c

000014b4 <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
    14b4:	2001      	movs	r0, #1
    14b6:	f000 b931 	b.w	171c <os_time_advance>

000014ba <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    14be:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    14c0:	f000 0001 	and.w	r0, r0, #1
    14c4:	4770      	bx	lr

000014c6 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    14c6:	b900      	cbnz	r0, 14ca <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    14c8:	b662      	cpsie	i
        __enable_irq();
    }
}
    14ca:	4770      	bx	lr

000014cc <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    14cc:	6882      	ldr	r2, [r0, #8]
    14ce:	8812      	ldrh	r2, [r2, #0]
    14d0:	f100 0310 	add.w	r3, r0, #16
    14d4:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    14d6:	88c2      	ldrh	r2, [r0, #6]
    14d8:	6800      	ldr	r0, [r0, #0]
    14da:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    14dc:	1a18      	subs	r0, r3, r0
}
    14de:	b280      	uxth	r0, r0
    14e0:	4770      	bx	lr

000014e2 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    14e2:	3a10      	subs	r2, #16
    14e4:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    14e6:	6041      	str	r1, [r0, #4]

    return (0);
}
    14e8:	2000      	movs	r0, #0
    14ea:	4770      	bx	lr

000014ec <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    14ec:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    14ee:	8803      	ldrh	r3, [r0, #0]
    14f0:	428b      	cmp	r3, r1
{
    14f2:	4604      	mov	r4, r0
    14f4:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
    14f6:	d30c      	bcc.n	1512 <os_mbuf_get+0x26>
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    14f8:	6840      	ldr	r0, [r0, #4]
    14fa:	f000 f8ca 	bl	1692 <os_memblock_get>
    if (!om) {
    14fe:	b138      	cbz	r0, 1510 <os_mbuf_get+0x24>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    1500:	2300      	movs	r3, #0
    1502:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    1504:	6043      	str	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    om->om_len = 0;
    om->om_data = (&om->om_databuf[0] + leadingspace);
    1506:	f100 0310 	add.w	r3, r0, #16
    150a:	442b      	add	r3, r5
    150c:	6003      	str	r3, [r0, #0]
    om->om_omp = omp;
    150e:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    1510:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1512:	2000      	movs	r0, #0
    return om;
    1514:	e7fc      	b.n	1510 <os_mbuf_get+0x24>

00001516 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    1516:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    1518:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    151c:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    151e:	b2ac      	uxth	r4, r5
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    1520:	42a3      	cmp	r3, r4
    1522:	d30d      	bcc.n	1540 <os_mbuf_get_pkthdr+0x2a>
    1524:	2cff      	cmp	r4, #255	; 0xff
    1526:	d80b      	bhi.n	1540 <os_mbuf_get_pkthdr+0x2a>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    1528:	2100      	movs	r1, #0
    152a:	f7ff ffdf 	bl	14ec <os_mbuf_get>
    if (om) {
    152e:	b130      	cbz	r0, 153e <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
        om->om_data += pkthdr_len;
    1530:	6803      	ldr	r3, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
    1532:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    1534:	4423      	add	r3, r4
    1536:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    1538:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
    153a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    153e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1540:	2000      	movs	r0, #0
    return om;
    1542:	e7fc      	b.n	153e <os_mbuf_get_pkthdr+0x28>

00001544 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    1544:	4601      	mov	r1, r0
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    1546:	6880      	ldr	r0, [r0, #8]
{
    1548:	b508      	push	{r3, lr}
    if (om->om_omp != NULL) {
    154a:	b110      	cbz	r0, 1552 <os_mbuf_free+0xe>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    154c:	6840      	ldr	r0, [r0, #4]
    154e:	f000 f8c8 	bl	16e2 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    1552:	bd08      	pop	{r3, pc}

00001554 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    1554:	b510      	push	{r4, lr}
    1556:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    1558:	b90b      	cbnz	r3, 155e <os_mbuf_free_chain+0xa>
        }

        om = next;
    }

    rc = 0;
    155a:	4618      	mov	r0, r3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
    155c:	e006      	b.n	156c <os_mbuf_free_chain+0x18>
        rc = os_mbuf_free(om);
    155e:	4618      	mov	r0, r3
        next = SLIST_NEXT(om, om_next);
    1560:	68dc      	ldr	r4, [r3, #12]
        rc = os_mbuf_free(om);
    1562:	f7ff ffef 	bl	1544 <os_mbuf_free>
        om = next;
    1566:	4623      	mov	r3, r4
        if (rc != 0) {
    1568:	2800      	cmp	r0, #0
    156a:	d0f5      	beq.n	1558 <os_mbuf_free_chain+0x4>
}
    156c:	bd10      	pop	{r4, pc}

0000156e <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
    156e:	2300      	movs	r3, #0
    while (om != NULL) {
    1570:	b908      	cbnz	r0, 1576 <os_mbuf_len+0x8>
        len += om->om_len;
        om = SLIST_NEXT(om, om_next);
    }

    return len;
}
    1572:	4618      	mov	r0, r3
    1574:	4770      	bx	lr
        len += om->om_len;
    1576:	88c2      	ldrh	r2, [r0, #6]
        om = SLIST_NEXT(om, om_next);
    1578:	68c0      	ldr	r0, [r0, #12]
        len += om->om_len;
    157a:	4413      	add	r3, r2
    157c:	b29b      	uxth	r3, r3
    157e:	e7f7      	b.n	1570 <os_mbuf_len+0x2>

00001580 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    1580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1584:	4688      	mov	r8, r1
    1586:	4616      	mov	r6, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    1588:	4607      	mov	r7, r0
    158a:	2800      	cmp	r0, #0
    158c:	d042      	beq.n	1614 <os_mbuf_append+0x94>
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    158e:	f8d0 a008 	ldr.w	sl, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
    1592:	4605      	mov	r5, r0
    1594:	68eb      	ldr	r3, [r5, #12]
    1596:	bb23      	cbnz	r3, 15e2 <os_mbuf_append+0x62>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
    1598:	4628      	mov	r0, r5
    remainder = len;
    159a:	4634      	mov	r4, r6
    space = OS_MBUF_TRAILINGSPACE(last);
    159c:	f7ff ff96 	bl	14cc <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    15a0:	b178      	cbz	r0, 15c2 <os_mbuf_append+0x42>
    15a2:	42b0      	cmp	r0, r6
    15a4:	bfa8      	it	ge
    15a6:	4630      	movge	r0, r6
    15a8:	4604      	mov	r4, r0
        if (space > remainder) {
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    15aa:	682b      	ldr	r3, [r5, #0]
    15ac:	88e8      	ldrh	r0, [r5, #6]
    15ae:	4622      	mov	r2, r4
    15b0:	4641      	mov	r1, r8
    15b2:	4418      	add	r0, r3
    15b4:	f000 f942 	bl	183c <memcpy>

        last->om_len += space;
    15b8:	88eb      	ldrh	r3, [r5, #6]
    15ba:	4423      	add	r3, r4
        data += space;
    15bc:	44a0      	add	r8, r4
        last->om_len += space;
    15be:	80eb      	strh	r3, [r5, #6]
        remainder -= space;
    15c0:	1b34      	subs	r4, r6, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    15c2:	2c00      	cmp	r4, #0
    15c4:	dd05      	ble.n	15d2 <os_mbuf_append+0x52>
        new = os_mbuf_get(omp, 0);
    15c6:	2100      	movs	r1, #0
    15c8:	4650      	mov	r0, sl
    15ca:	f7ff ff8f 	bl	14ec <os_mbuf_get>
        if (!new) {
    15ce:	4681      	mov	r9, r0
    15d0:	b948      	cbnz	r0, 15e6 <os_mbuf_append+0x66>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    15d2:	797b      	ldrb	r3, [r7, #5]
    15d4:	2b07      	cmp	r3, #7
    15d6:	d818      	bhi.n	160a <os_mbuf_append+0x8a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
    15d8:	1c20      	adds	r0, r4, #0
    15da:	bf18      	it	ne
    15dc:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
    15de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    15e2:	461d      	mov	r5, r3
    15e4:	e7d6      	b.n	1594 <os_mbuf_append+0x14>
        new->om_len = min(omp->omp_databuf_len, remainder);
    15e6:	f8ba 2000 	ldrh.w	r2, [sl]
    15ea:	42a2      	cmp	r2, r4
    15ec:	bfa8      	it	ge
    15ee:	4622      	movge	r2, r4
    15f0:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    15f2:	4641      	mov	r1, r8
    15f4:	6800      	ldr	r0, [r0, #0]
    15f6:	f000 f921 	bl	183c <memcpy>
        data += new->om_len;
    15fa:	f8b9 3006 	ldrh.w	r3, [r9, #6]
        SLIST_NEXT(last, om_next) = new;
    15fe:	f8c5 900c 	str.w	r9, [r5, #12]
        data += new->om_len;
    1602:	4498      	add	r8, r3
        remainder -= new->om_len;
    1604:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
    1606:	464d      	mov	r5, r9
    1608:	e7db      	b.n	15c2 <os_mbuf_append+0x42>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    160a:	8a3b      	ldrh	r3, [r7, #16]
    160c:	441e      	add	r6, r3
    160e:	1b36      	subs	r6, r6, r4
    1610:	823e      	strh	r6, [r7, #16]
    1612:	e7e1      	b.n	15d8 <os_mbuf_append+0x58>
        rc = OS_EINVAL;
    1614:	2002      	movs	r0, #2
    1616:	e7e2      	b.n	15de <os_mbuf_append+0x5e>

00001618 <os_mempool_init_internal>:

static os_error_t
os_mempool_init_internal(struct os_mempool *mp, uint16_t blocks,
                         uint32_t block_size, void *membuf, char *name,
                         uint8_t flags)
{
    1618:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    161a:	b110      	cbz	r0, 1622 <os_mempool_init_internal+0xa>
    161c:	b10a      	cbz	r2, 1622 <os_mempool_init_internal+0xa>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    161e:	b913      	cbnz	r3, 1626 <os_mempool_init_internal+0xe>
    1620:	b119      	cbz	r1, 162a <os_mempool_init_internal+0x12>
        return OS_INVALID_PARM;
    1622:	2003      	movs	r0, #3
    1624:	e022      	b.n	166c <os_mempool_init_internal+0x54>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    1626:	079d      	lsls	r5, r3, #30
    1628:	d126      	bne.n	1678 <os_mempool_init_internal+0x60>

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = flags;
    162a:	f89d 4014 	ldrb.w	r4, [sp, #20]
    162e:	7284      	strb	r4, [r0, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uint32_t)membuf;
    mp->name = name;
    1630:	9c04      	ldr	r4, [sp, #16]
    mp->mp_block_size = block_size;
    1632:	6002      	str	r2, [r0, #0]
    mp->mp_num_free = blocks;
    1634:	80c1      	strh	r1, [r0, #6]
    mp->mp_min_free = blocks;
    1636:	8101      	strh	r1, [r0, #8]
    mp->mp_num_blocks = blocks;
    1638:	8081      	strh	r1, [r0, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    163a:	60c3      	str	r3, [r0, #12]
    SLIST_FIRST(mp) = membuf;
    163c:	e9c0 3405 	strd	r3, r4, [r0, #20]

    if (blocks > 0) {
    1640:	b161      	cbz	r1, 165c <os_mempool_init_internal+0x44>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    1642:	0794      	lsls	r4, r2, #30
    1644:	bf1c      	itt	ne
    1646:	f022 0203 	bicne.w	r2, r2, #3
    164a:	3204      	addne	r2, #4
{
    164c:	461d      	mov	r5, r3

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    164e:	2401      	movs	r4, #1
    1650:	428c      	cmp	r4, r1
    1652:	db0c      	blt.n	166e <os_mempool_init_internal+0x56>
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    1654:	3901      	subs	r1, #1
    1656:	434a      	muls	r2, r1
    1658:	2100      	movs	r1, #0
    165a:	5099      	str	r1, [r3, r2]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    165c:	4a07      	ldr	r2, [pc, #28]	; (167c <os_mempool_init_internal+0x64>)
    165e:	6851      	ldr	r1, [r2, #4]
    1660:	2300      	movs	r3, #0
    1662:	6103      	str	r3, [r0, #16]
    1664:	6008      	str	r0, [r1, #0]
    1666:	3010      	adds	r0, #16
    1668:	6050      	str	r0, [r2, #4]
    166a:	4618      	mov	r0, r3

    return OS_OK;
}
    166c:	bd70      	pop	{r4, r5, r6, pc}
            block_addr += true_block_size;
    166e:	18ae      	adds	r6, r5, r2
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    1670:	602e      	str	r6, [r5, #0]
        for (i = 1; i < blocks; i++) {
    1672:	3401      	adds	r4, #1
            block_addr += true_block_size;
    1674:	4635      	mov	r5, r6
    1676:	e7eb      	b.n	1650 <os_mempool_init_internal+0x38>
            return OS_MEM_NOT_ALIGNED;
    1678:	2004      	movs	r0, #4
    167a:	e7f7      	b.n	166c <os_mempool_init_internal+0x54>
    167c:	200062dc 	.word	0x200062dc

00001680 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    1680:	b513      	push	{r0, r1, r4, lr}
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    1682:	2400      	movs	r4, #0
    1684:	9401      	str	r4, [sp, #4]
    1686:	9c04      	ldr	r4, [sp, #16]
    1688:	9400      	str	r4, [sp, #0]
    168a:	f7ff ffc5 	bl	1618 <os_mempool_init_internal>
}
    168e:	b002      	add	sp, #8
    1690:	bd10      	pop	{r4, pc}

00001692 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    1692:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    1694:	4604      	mov	r4, r0
    1696:	b198      	cbz	r0, 16c0 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    1698:	f7ff ff0f 	bl	14ba <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    169c:	88e3      	ldrh	r3, [r4, #6]
    169e:	b16b      	cbz	r3, 16bc <os_memblock_get+0x2a>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    16a0:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    16a2:	682a      	ldr	r2, [r5, #0]
    16a4:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    16a6:	3b01      	subs	r3, #1
            if (mp->mp_min_free > mp->mp_num_free) {
    16a8:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
    16aa:	b29b      	uxth	r3, r3
            if (mp->mp_min_free > mp->mp_num_free) {
    16ac:	429a      	cmp	r2, r3
            mp->mp_num_free--;
    16ae:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    16b0:	d900      	bls.n	16b4 <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
    16b2:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
    16b4:	f7ff ff07 	bl	14c6 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    16b8:	4628      	mov	r0, r5
    16ba:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    16bc:	461d      	mov	r5, r3
    16be:	e7f9      	b.n	16b4 <os_memblock_get+0x22>
    16c0:	4605      	mov	r5, r0
    return (void *)block;
    16c2:	e7f9      	b.n	16b8 <os_memblock_get+0x26>

000016c4 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    16c4:	b538      	push	{r3, r4, r5, lr}
    16c6:	4604      	mov	r4, r0
    16c8:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    16ca:	f7ff fef6 	bl	14ba <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    16ce:	6963      	ldr	r3, [r4, #20]
    16d0:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    16d2:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
    16d4:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
    16d6:	3301      	adds	r3, #1
    16d8:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    16da:	f7ff fef4 	bl	14c6 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    16de:	2000      	movs	r0, #0
    16e0:	bd38      	pop	{r3, r4, r5, pc}

000016e2 <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
    16e2:	b410      	push	{r4}
    16e4:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    16e6:	4603      	mov	r3, r0
    16e8:	b170      	cbz	r0, 1708 <os_memblock_put+0x26>
    16ea:	b169      	cbz	r1, 1708 <os_memblock_put+0x26>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    16ec:	7a84      	ldrb	r4, [r0, #10]
    16ee:	07e4      	lsls	r4, r4, #31
    16f0:	d505      	bpl.n	16fe <os_memblock_put+0x1c>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    16f2:	69c4      	ldr	r4, [r0, #28]
    16f4:	b11c      	cbz	r4, 16fe <os_memblock_put+0x1c>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    16f6:	4623      	mov	r3, r4
    16f8:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    16fa:	bc10      	pop	{r4}
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    16fc:	4718      	bx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);
    16fe:	4611      	mov	r1, r2
    1700:	4618      	mov	r0, r3
}
    1702:	bc10      	pop	{r4}
    ret = os_memblock_put_from_cb(mp, block_addr);
    1704:	f7ff bfde 	b.w	16c4 <os_memblock_put_from_cb>
}
    1708:	2003      	movs	r0, #3
    170a:	bc10      	pop	{r4}
    170c:	4770      	bx	lr
	...

00001710 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1710:	4b01      	ldr	r3, [pc, #4]	; (1718 <os_time_get+0x8>)
    1712:	6818      	ldr	r0, [r3, #0]
    1714:	4770      	bx	lr
    1716:	bf00      	nop
    1718:	200062ec 	.word	0x200062ec

0000171c <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    171c:	4a02      	ldr	r2, [pc, #8]	; (1728 <os_time_advance+0xc>)
    171e:	6813      	ldr	r3, [r2, #0]
    1720:	4418      	add	r0, r3
    1722:	6010      	str	r0, [r2, #0]
}
    1724:	4770      	bx	lr
    1726:	bf00      	nop
    1728:	200062ec 	.word	0x200062ec

0000172c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    172c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    1730:	482b      	ldr	r0, [pc, #172]	; (17e0 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    1732:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    1734:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    1736:	f380 8814 	msr	CONTROL, r0
        ISB
    173a:	f3bf 8f6f 	isb	sy
        BX      LR
    173e:	4770      	bx	lr

00001740 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    1740:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    1744:	4770      	bx	lr

00001746 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    1746:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    174a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    174c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    1750:	b951      	cbnz	r1, 1768 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1752:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1756:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1758:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    175a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    175e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    1762:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    1766:	4770      	bx	lr

00001768 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1768:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    176a:	4a1e      	ldr	r2, [pc, #120]	; (17e4 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    176c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    176e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    1770:	d809      	bhi.n	1786 <SVC_Done>

        LDR     R4,=SVC_Table-4
    1772:	4c1d      	ldr	r4, [pc, #116]	; (17e8 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    1774:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1778:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    177c:	47a0      	blx	r4

        MRS     R12,PSP
    177e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    1782:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00001786 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    178a:	4770      	bx	lr

0000178c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    178c:	4b17      	ldr	r3, [pc, #92]	; (17ec <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    178e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1790:	4b17      	ldr	r3, [pc, #92]	; (17f0 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    1792:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    1794:	4291      	cmp	r1, r2
        IT      EQ
    1796:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    1798:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    179a:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    179e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    17a2:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    17a6:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    17a8:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    17ac:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    17b0:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    17b4:	4770      	bx	lr

000017b6 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    17b6:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    17b8:	f7ff fe7c 	bl	14b4 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    17bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    17c0:	4770      	bx	lr

000017c2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    17c2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    17c6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    17c8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    17cc:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    17d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    17d4:	4668      	mov	r0, sp
        BL      os_default_irq
    17d6:	f7ff fd8b 	bl	12f0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    17da:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    17de:	4770      	bx	lr
        LDR     R0,=os_flags
    17e0:	20004a84 	.word	0x20004a84
        LDR     R2,=SVC_Count
    17e4:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    17e8:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    17ec:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    17f0:	200062e4 	.word	0x200062e4

000017f4 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    17f4:	b470      	push	{r4, r5, r6}
    17f6:	f04f 0500 	mov.w	r5, #0
    17fa:	f022 0603 	bic.w	r6, r2, #3
    17fe:	e005      	b.n	180c <test1>

00001800 <loop1>:
    1800:	5943      	ldr	r3, [r0, r5]
    1802:	594c      	ldr	r4, [r1, r5]
    1804:	42a3      	cmp	r3, r4
    1806:	d104      	bne.n	1812 <res1>
    1808:	f105 0504 	add.w	r5, r5, #4

0000180c <test1>:
    180c:	42b5      	cmp	r5, r6
    180e:	d1f7      	bne.n	1800 <loop1>
    1810:	e00d      	b.n	182e <test2>

00001812 <res1>:
    1812:	ba1b      	rev	r3, r3
    1814:	ba24      	rev	r4, r4
    1816:	1b1b      	subs	r3, r3, r4
    1818:	bf8c      	ite	hi
    181a:	2301      	movhi	r3, #1
    181c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1820:	e009      	b.n	1836 <done>

00001822 <loop2>:
    1822:	5d43      	ldrb	r3, [r0, r5]
    1824:	5d4c      	ldrb	r4, [r1, r5]
    1826:	1b1b      	subs	r3, r3, r4
    1828:	d105      	bne.n	1836 <done>
    182a:	f105 0501 	add.w	r5, r5, #1

0000182e <test2>:
    182e:	4295      	cmp	r5, r2
    1830:	d1f7      	bne.n	1822 <loop2>
    1832:	f04f 0300 	mov.w	r3, #0

00001836 <done>:
    1836:	4618      	mov	r0, r3
    1838:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    183a:	4770      	bx	lr

0000183c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    183c:	e001      	b.n	1842 <test1>

0000183e <loop1>:
    183e:	588b      	ldr	r3, [r1, r2]
    1840:	5083      	str	r3, [r0, r2]

00001842 <test1>:
    1842:	3a04      	subs	r2, #4
    1844:	d5fb      	bpl.n	183e <loop1>
    1846:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    184a:	e001      	b.n	1850 <test2>

0000184c <loop2>:
    184c:	5c8b      	ldrb	r3, [r1, r2]
    184e:	5483      	strb	r3, [r0, r2]

00001850 <test2>:
    1850:	3a01      	subs	r2, #1
    1852:	d5fb      	bpl.n	184c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    1854:	4770      	bx	lr

00001856 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    1856:	b530      	push	{r4, r5, lr}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1858:	4605      	mov	r5, r0
    185a:	b2c9      	uxtb	r1, r1
    185c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1860:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    1864:	18ab      	adds	r3, r5, r2
    1866:	2403      	movs	r4, #3
    1868:	4023      	ands	r3, r4
    186a:	1ad3      	subs	r3, r2, r3
    186c:	d40b      	bmi.n	1886 <memset+0x30>
    186e:	e001      	b.n	1874 <memset+0x1e>
    1870:	3a01      	subs	r2, #1
    1872:	54a9      	strb	r1, [r5, r2]
    1874:	429a      	cmp	r2, r3
    1876:	d1fb      	bne.n	1870 <memset+0x1a>
    1878:	e000      	b.n	187c <memset+0x26>
    187a:	50a9      	str	r1, [r5, r2]
    187c:	3a04      	subs	r2, #4
    187e:	d5fc      	bpl.n	187a <memset+0x24>
    1880:	3204      	adds	r2, #4
    1882:	e000      	b.n	1886 <memset+0x30>
    1884:	54a9      	strb	r1, [r5, r2]
    1886:	3a01      	subs	r2, #1
    1888:	d5fc      	bpl.n	1884 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    188a:	bd30      	pop	{r4, r5, pc}

0000188c <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	4605      	mov	r5, r0
    1890:	460e      	mov	r6, r1
    int i;
    for (i = 0; i < cnt; i++) {
    1892:	4604      	mov	r4, r0
    1894:	1b63      	subs	r3, r4, r5
    1896:	429e      	cmp	r6, r3
    1898:	dd05      	ble.n	18a6 <console_write+0x1a>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    189a:	f814 0b01 	ldrb.w	r0, [r4], #1
    189e:	f000 f881 	bl	19a4 <console_out_nolock>
    18a2:	3001      	adds	r0, #1
    18a4:	d1f6      	bne.n	1894 <console_write+0x8>
    }
}
    18a6:	bd70      	pop	{r4, r5, r6, pc}

000018a8 <console_blocking_mode>:

void console_blocking_mode(void) {
    disable_buffer();
    18a8:	f000 b852 	b.w	1950 <disable_buffer>

000018ac <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    18ac:	b40f      	push	{r0, r1, r2, r3}
    18ae:	b513      	push	{r0, r1, r4, lr}
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    18b0:	f000 f896 	bl	19e0 <console_get_ticks>
    18b4:	b140      	cbz	r0, 18c8 <console_printf+0x1c>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    18b6:	4b0b      	ldr	r3, [pc, #44]	; (18e4 <console_printf+0x38>)
    18b8:	681b      	ldr	r3, [r3, #0]
    18ba:	b98b      	cbnz	r3, 18e0 <console_printf+0x34>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    18bc:	f7ff ff28 	bl	1710 <os_time_get>
    18c0:	4601      	mov	r1, r0
    18c2:	4809      	ldr	r0, [pc, #36]	; (18e8 <console_printf+0x3c>)
    18c4:	f002 f822 	bl	390c <printf>
    num_chars = 0;
    18c8:	4604      	mov	r4, r0
        }
    }

    va_start(args, fmt);
    18ca:	a905      	add	r1, sp, #20
    num_chars += vprintf(fmt, args);
    18cc:	9804      	ldr	r0, [sp, #16]
    va_start(args, fmt);
    18ce:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    18d0:	f002 f82e 	bl	3930 <vprintf>
    va_end(args);

    return num_chars;
}
    18d4:	4420      	add	r0, r4
    18d6:	b002      	add	sp, #8
    18d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    18dc:	b004      	add	sp, #16
    18de:	4770      	bx	lr
    num_chars = 0;
    18e0:	2400      	movs	r4, #0
    18e2:	e7f2      	b.n	18ca <console_printf+0x1e>
    18e4:	200062f0 	.word	0x200062f0
    18e8:	00003e82 	.word	0x00003e82

000018ec <console_flush>:
#endif  //  DISABLE_SEMIHOSTING
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    18ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    18ee:	4c14      	ldr	r4, [pc, #80]	; (1940 <console_flush+0x54>)
    18f0:	7822      	ldrb	r2, [r4, #0]
void console_flush(void) {
    18f2:	b085      	sub	sp, #20
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    18f4:	b312      	cbz	r2, 193c <console_flush+0x50>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    18f6:	4913      	ldr	r1, [pc, #76]	; (1944 <console_flush+0x58>)
    18f8:	680a      	ldr	r2, [r1, #0]
    18fa:	b1fa      	cbz	r2, 193c <console_flush+0x50>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    18fc:	4b12      	ldr	r3, [pc, #72]	; (1948 <console_flush+0x5c>)
    18fe:	685b      	ldr	r3, [r3, #4]
    1900:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    1904:	b9d3      	cbnz	r3, 193c <console_flush+0x50>
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    1906:	4d11      	ldr	r5, [pc, #68]	; (194c <console_flush+0x60>)

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    1908:	600b      	str	r3, [r1, #0]
    args[0] = (uint32_t)fh;
    190a:	2602      	movs	r6, #2
    semihost_mbuf = NULL;
    190c:	4613      	mov	r3, r2
    __asm( 
    190e:	2705      	movs	r7, #5
    1910:	f10d 0c04 	add.w	ip, sp, #4
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    1914:	6829      	ldr	r1, [r5, #0]
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
    1916:	07c9      	lsls	r1, r1, #31
    1918:	d50a      	bpl.n	1930 <console_flush+0x44>

    struct os_mbuf *m = old;
    while (m) {  //  For each mbuf in the chain...
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
    191a:	88d9      	ldrh	r1, [r3, #6]
    if (length == 0) { return 0; }
    191c:	b141      	cbz	r1, 1930 <console_flush+0x44>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
    191e:	6818      	ldr	r0, [r3, #0]
    args[2] = (uint32_t)length;
    1920:	9103      	str	r1, [sp, #12]
    if (!log_enabled) return -1;
    1922:	7821      	ldrb	r1, [r4, #0]
    args[1] = (uint32_t)buffer;
    1924:	e9cd 6001 	strd	r6, r0, [sp, #4]
    if (!log_enabled) return -1;
    1928:	b111      	cbz	r1, 1930 <console_flush+0x44>
    __asm( 
    192a:	4638      	mov	r0, r7
    192c:	4661      	mov	r1, ip
    192e:	beab      	bkpt	0x00ab
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    1930:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
    1932:	2b00      	cmp	r3, #0
    1934:	d1ee      	bne.n	1914 <console_flush+0x28>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    1936:	4610      	mov	r0, r2
    1938:	f7ff fe0c 	bl	1554 <os_mbuf_free_chain>
}
    193c:	b005      	add	sp, #20
    193e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1940:	20000148 	.word	0x20000148
    1944:	20004a88 	.word	0x20004a88
    1948:	e000ed00 	.word	0xe000ed00
    194c:	e000edf0 	.word	0xe000edf0

00001950 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    1950:	f7ff bfcc 	b.w	18ec <console_flush>

00001954 <console_buffer>:
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    1954:	4b10      	ldr	r3, [pc, #64]	; (1998 <console_buffer+0x44>)
    1956:	781b      	ldrb	r3, [r3, #0]
void console_buffer(const char *buffer, unsigned int length) {
    1958:	b570      	push	{r4, r5, r6, lr}
    195a:	4606      	mov	r6, r0
    195c:	460d      	mov	r5, r1
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    195e:	b1d3      	cbz	r3, 1996 <console_buffer+0x42>
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    1960:	4b0e      	ldr	r3, [pc, #56]	; (199c <console_buffer+0x48>)
    1962:	681b      	ldr	r3, [r3, #0]
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
    1964:	07db      	lsls	r3, r3, #31
    1966:	d516      	bpl.n	1996 <console_buffer+0x42>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
    1968:	4c0d      	ldr	r4, [pc, #52]	; (19a0 <console_buffer+0x4c>)
    196a:	6821      	ldr	r1, [r4, #0]
    196c:	b169      	cbz	r1, 198a <console_buffer+0x36>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    }
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    196e:	6820      	ldr	r0, [r4, #0]
    1970:	f7ff fdfd 	bl	156e <os_mbuf_len>
    1974:	4428      	add	r0, r5
    1976:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    197a:	d20c      	bcs.n	1996 <console_buffer+0x42>
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    197c:	b2aa      	uxth	r2, r5
    197e:	4631      	mov	r1, r6
    1980:	6820      	ldr	r0, [r4, #0]
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
    1982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    1986:	f7ff bdfb 	b.w	1580 <os_mbuf_append>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
    198a:	b2a8      	uxth	r0, r5
    198c:	f7ff fd4a 	bl	1424 <os_msys_get_pkthdr>
    1990:	6020      	str	r0, [r4, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    1992:	2800      	cmp	r0, #0
    1994:	d1eb      	bne.n	196e <console_buffer+0x1a>
}
    1996:	bd70      	pop	{r4, r5, r6, pc}
    1998:	20000148 	.word	0x20000148
    199c:	e000edf0 	.word	0xe000edf0
    19a0:	20004a88 	.word	0x20004a88

000019a4 <console_out_nolock>:
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    if (g_silence_console) { return c; }
    19a4:	4b0c      	ldr	r3, [pc, #48]	; (19d8 <console_out_nolock+0x34>)
int console_out_nolock(int character) {
    19a6:	b513      	push	{r0, r1, r4, lr}
    if (g_silence_console) { return c; }
    19a8:	7819      	ldrb	r1, [r3, #0]
int console_out_nolock(int character) {
    19aa:	4604      	mov	r4, r0
    19ac:	b2c3      	uxtb	r3, r0
    if (g_silence_console) { return c; }
    19ae:	b119      	cbz	r1, 19b8 <console_out_nolock+0x14>
    19b0:	461c      	mov	r4, r3
    } else {
        console_is_midline = 1;
    }
    semihosting_console_write_ch(c);
    return character;
}
    19b2:	4620      	mov	r0, r4
    19b4:	b002      	add	sp, #8
    19b6:	bd10      	pop	{r4, pc}
    if ('\n' == c) {
    19b8:	2b0a      	cmp	r3, #10
    19ba:	4a08      	ldr	r2, [pc, #32]	; (19dc <console_out_nolock+0x38>)
    19bc:	f88d 3007 	strb.w	r3, [sp, #7]
        console_is_midline = 1;
    19c0:	bf18      	it	ne
    19c2:	2101      	movne	r1, #1
    if (c == '\r') { return; }  //  Don't display \r.
    19c4:	2b0d      	cmp	r3, #13
        console_is_midline = 1;
    19c6:	6011      	str	r1, [r2, #0]
    if (c == '\r') { return; }  //  Don't display \r.
    19c8:	d0f3      	beq.n	19b2 <console_out_nolock+0xe>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    19ca:	2101      	movs	r1, #1
    19cc:	f10d 0007 	add.w	r0, sp, #7
    19d0:	f7ff ffc0 	bl	1954 <console_buffer>
    19d4:	e7ed      	b.n	19b2 <console_out_nolock+0xe>
    19d6:	bf00      	nop
    19d8:	200062f5 	.word	0x200062f5
    19dc:	200062f0 	.word	0x200062f0

000019e0 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    19e0:	4b01      	ldr	r3, [pc, #4]	; (19e8 <console_get_ticks+0x8>)
    19e2:	7818      	ldrb	r0, [r3, #0]
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop
    19e8:	20004a8c 	.word	0x20004a8c

000019ec <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
    19ec:	4b0c      	ldr	r3, [pc, #48]	; (1a20 <flash_area_open+0x34>)
    19ee:	681b      	ldr	r3, [r3, #0]
{
    19f0:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
    19f2:	b18b      	cbz	r3, 1a18 <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
    19f4:	4a0b      	ldr	r2, [pc, #44]	; (1a24 <flash_area_open+0x38>)
    19f6:	6814      	ldr	r4, [r2, #0]
    19f8:	2200      	movs	r2, #0
    19fa:	4294      	cmp	r4, r2
    19fc:	dc02      	bgt.n	1a04 <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
    19fe:	f06f 0003 	mvn.w	r0, #3
    1a02:	e006      	b.n	1a12 <flash_area_open+0x26>
        area = flash_map + i;
    1a04:	461d      	mov	r5, r3
        if (area->fa_id == id) {
    1a06:	f813 6b0c 	ldrb.w	r6, [r3], #12
    1a0a:	4286      	cmp	r6, r0
    1a0c:	d102      	bne.n	1a14 <flash_area_open+0x28>
            *fap = area;
    1a0e:	600d      	str	r5, [r1, #0]
            return 0;
    1a10:	2000      	movs	r0, #0
}
    1a12:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
    1a14:	3201      	adds	r2, #1
    1a16:	e7f0      	b.n	19fa <flash_area_open+0xe>
        return SYS_EACCES;
    1a18:	f06f 0006 	mvn.w	r0, #6
    1a1c:	e7f9      	b.n	1a12 <flash_area_open+0x26>
    1a1e:	bf00      	nop
    1a20:	200062f8 	.word	0x200062f8
    1a24:	200062fc 	.word	0x200062fc

00001a28 <flash_area_to_sectors>:

int
flash_area_to_sectors(int id, int *cnt, struct flash_area *ret)
{
    1a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t start;
    uint32_t size;
    int rc;
    int i;

    rc = flash_area_open(id, &fa);
    1a2c:	fa5f f980 	uxtb.w	r9, r0
{
    1a30:	4688      	mov	r8, r1
    rc = flash_area_open(id, &fa);
    1a32:	4648      	mov	r0, r9
    1a34:	a901      	add	r1, sp, #4
{
    1a36:	4614      	mov	r4, r2
    rc = flash_area_open(id, &fa);
    1a38:	f7ff ffd8 	bl	19ec <flash_area_open>
    if (rc != 0) {
    1a3c:	4605      	mov	r5, r0
    1a3e:	b950      	cbnz	r0, 1a56 <flash_area_to_sectors+0x2e>
        return rc;
    }

    *cnt = 0;

    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1a40:	9b01      	ldr	r3, [sp, #4]
    *cnt = 0;
    1a42:	f8c8 0000 	str.w	r0, [r8]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1a46:	7858      	ldrb	r0, [r3, #1]
    1a48:	f7fe fd20 	bl	48c <hal_bsp_flash_dev>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1a4c:	462e      	mov	r6, r5
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1a4e:	4607      	mov	r7, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	42b3      	cmp	r3, r6
    1a54:	dc03      	bgt.n	1a5e <flash_area_to_sectors+0x36>
            (*cnt)++;
        }
    }
    flash_area_close(fa);
    return 0;
}
    1a56:	4628      	mov	r0, r5
    1a58:	b004      	add	sp, #16
    1a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    1a5e:	683b      	ldr	r3, [r7, #0]
    1a60:	aa02      	add	r2, sp, #8
    1a62:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    1a66:	4631      	mov	r1, r6
    1a68:	ab03      	add	r3, sp, #12
    1a6a:	4638      	mov	r0, r7
    1a6c:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    1a6e:	9901      	ldr	r1, [sp, #4]
    1a70:	9a02      	ldr	r2, [sp, #8]
    1a72:	684b      	ldr	r3, [r1, #4]
    1a74:	4293      	cmp	r3, r2
    1a76:	d811      	bhi.n	1a9c <flash_area_to_sectors+0x74>
    1a78:	6888      	ldr	r0, [r1, #8]
    1a7a:	4403      	add	r3, r0
    1a7c:	429a      	cmp	r2, r3
    1a7e:	d20d      	bcs.n	1a9c <flash_area_to_sectors+0x74>
            if (ret) {
    1a80:	b13c      	cbz	r4, 1a92 <flash_area_to_sectors+0x6a>
                ret->fa_id = id;
    1a82:	f884 9000 	strb.w	r9, [r4]
                ret->fa_device_id = fa->fa_device_id;
    1a86:	784b      	ldrb	r3, [r1, #1]
    1a88:	7063      	strb	r3, [r4, #1]
                ret->fa_size = size;
    1a8a:	9b03      	ldr	r3, [sp, #12]
                ret->fa_off = start;
    1a8c:	6062      	str	r2, [r4, #4]
                ret->fa_size = size;
    1a8e:	60a3      	str	r3, [r4, #8]
                ret++;
    1a90:	340c      	adds	r4, #12
            (*cnt)++;
    1a92:	f8d8 3000 	ldr.w	r3, [r8]
    1a96:	3301      	adds	r3, #1
    1a98:	f8c8 3000 	str.w	r3, [r8]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1a9c:	3601      	adds	r6, #1
    1a9e:	e7d7      	b.n	1a50 <flash_area_to_sectors+0x28>

00001aa0 <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
    1aa0:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1aa2:	6885      	ldr	r5, [r0, #8]
    1aa4:	428d      	cmp	r5, r1
{
    1aa6:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1aa8:	d308      	bcc.n	1abc <flash_area_read+0x1c>
    1aaa:	440c      	add	r4, r1
    1aac:	42a5      	cmp	r5, r4
    1aae:	d305      	bcc.n	1abc <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    1ab0:	6844      	ldr	r4, [r0, #4]
    1ab2:	7840      	ldrb	r0, [r0, #1]
    1ab4:	4421      	add	r1, r4
}
    1ab6:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    1ab8:	f001 bc08 	b.w	32cc <hal_flash_read>
}
    1abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ac0:	bc30      	pop	{r4, r5}
    1ac2:	4770      	bx	lr

00001ac4 <flash_area_write>:

int
flash_area_write(const struct flash_area *fa, uint32_t off, const void *src,
    uint32_t len)
{
    1ac4:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1ac6:	6885      	ldr	r5, [r0, #8]
    1ac8:	428d      	cmp	r5, r1
{
    1aca:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1acc:	d308      	bcc.n	1ae0 <flash_area_write+0x1c>
    1ace:	440c      	add	r4, r1
    1ad0:	42a5      	cmp	r5, r4
    1ad2:	d305      	bcc.n	1ae0 <flash_area_write+0x1c>
        return -1;
    }
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    1ad4:	6844      	ldr	r4, [r0, #4]
    1ad6:	7840      	ldrb	r0, [r0, #1]
    1ad8:	4421      	add	r1, r4
                           (void *)src, len);
}
    1ada:	bc30      	pop	{r4, r5}
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    1adc:	f001 bc18 	b.w	3310 <hal_flash_write>
}
    1ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ae4:	bc30      	pop	{r4, r5}
    1ae6:	4770      	bx	lr

00001ae8 <flash_area_erase>:

int
flash_area_erase(const struct flash_area *fa, uint32_t off, uint32_t len)
{
    1ae8:	b410      	push	{r4}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1aea:	6884      	ldr	r4, [r0, #8]
    1aec:	428c      	cmp	r4, r1
{
    1aee:	4613      	mov	r3, r2
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1af0:	d308      	bcc.n	1b04 <flash_area_erase+0x1c>
    1af2:	440b      	add	r3, r1
    1af4:	429c      	cmp	r4, r3
    1af6:	d305      	bcc.n	1b04 <flash_area_erase+0x1c>
        return -1;
    }
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    1af8:	6843      	ldr	r3, [r0, #4]
}
    1afa:	bc10      	pop	{r4}
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    1afc:	7840      	ldrb	r0, [r0, #1]
    1afe:	4419      	add	r1, r3
    1b00:	f001 bc38 	b.w	3374 <hal_flash_erase>
}
    1b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b08:	bc10      	pop	{r4}
    1b0a:	4770      	bx	lr

00001b0c <flash_area_align>:

uint8_t
flash_area_align(const struct flash_area *fa)
{
    return hal_flash_align(fa->fa_device_id);
    1b0c:	7840      	ldrb	r0, [r0, #1]
    1b0e:	f001 bbcd 	b.w	32ac <hal_flash_align>

00001b12 <flash_area_erased_val>:
}

uint32_t
flash_area_erased_val(const struct flash_area *fa)
{
    1b12:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    1b14:	7840      	ldrb	r0, [r0, #1]
    1b16:	f001 fbd1 	bl	32bc <hal_flash_erased_val>
}
    1b1a:	bd08      	pop	{r3, pc}

00001b1c <flash_area_read_is_empty>:
}

int
flash_area_read_is_empty(const struct flash_area *fa, uint32_t off, void *dst,
                         uint32_t len)
{
    1b1c:	b410      	push	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    1b1e:	6844      	ldr	r4, [r0, #4]
    1b20:	7840      	ldrb	r0, [r0, #1]
    1b22:	4421      	add	r1, r4
}
    1b24:	bc10      	pop	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    1b26:	f001 bc98 	b.w	345a <hal_flash_isempty>
	...

00001b2c <flash_map_init>:
    }
}

void
flash_map_init(void)
{
    1b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b2e:	b089      	sub	sp, #36	; 0x24
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    1b30:	f001 fbaa 	bl	3288 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1b34:	b138      	cbz	r0, 1b46 <flash_map_init+0x1a>
    1b36:	2300      	movs	r3, #0
    1b38:	4a1d      	ldr	r2, [pc, #116]	; (1bb0 <flash_map_init+0x84>)
    1b3a:	9300      	str	r3, [sp, #0]
    1b3c:	6814      	ldr	r4, [r2, #0]
    1b3e:	4619      	mov	r1, r3
    1b40:	461a      	mov	r2, r3
    1b42:	4618      	mov	r0, r3
    1b44:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    1b46:	4e1b      	ldr	r6, [pc, #108]	; (1bb4 <flash_map_init+0x88>)
    1b48:	4b1b      	ldr	r3, [pc, #108]	; (1bb8 <flash_map_init+0x8c>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    1b4a:	4f1c      	ldr	r7, [pc, #112]	; (1bbc <flash_map_init+0x90>)
    flash_map = sysflash_map_dflt;
    1b4c:	6033      	str	r3, [r6, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    1b4e:	2306      	movs	r3, #6
    1b50:	603b      	str	r3, [r7, #0]
    mfg_init();
    1b52:	f000 f90d 	bl	1d70 <mfg_init>
    mfg_open(&reader);
    1b56:	a803      	add	r0, sp, #12
    1b58:	f000 f92e 	bl	1db8 <mfg_open>
        fap->fa_id = meta_flash_area.area_id;
    1b5c:	4d18      	ldr	r5, [pc, #96]	; (1bc0 <flash_map_init+0x94>)
    *out_num_areas = 0;
    1b5e:	2400      	movs	r4, #0
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    1b60:	2102      	movs	r1, #2
    1b62:	a803      	add	r0, sp, #12
    1b64:	f000 f8f2 	bl	1d4c <mfg_seek_next_with_type>
        switch (rc) {
    1b68:	f110 0f0f 	cmn.w	r0, #15
    1b6c:	d019      	beq.n	1ba2 <flash_map_init+0x76>
    1b6e:	b9b0      	cbnz	r0, 1b9e <flash_map_init+0x72>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    1b70:	a905      	add	r1, sp, #20
    1b72:	a803      	add	r0, sp, #12
    1b74:	f000 f8f5 	bl	1d62 <mfg_read_tlv_flash_area>
        if (rc != 0) {
    1b78:	b988      	cbnz	r0, 1b9e <flash_map_init+0x72>
    1b7a:	230c      	movs	r3, #12
    1b7c:	4363      	muls	r3, r4
        fap->fa_id = meta_flash_area.area_id;
    1b7e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    1b82:	555a      	strb	r2, [r3, r5]
    1b84:	442b      	add	r3, r5
        fap->fa_device_id = meta_flash_area.device_id;
    1b86:	f89d 2015 	ldrb.w	r2, [sp, #21]
    1b8a:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    1b8c:	f8dd 2016 	ldr.w	r2, [sp, #22]
    1b90:	605a      	str	r2, [r3, #4]
        (*out_num_areas)++;
    1b92:	3401      	adds	r4, #1
        fap->fa_size = meta_flash_area.size;
    1b94:	f8dd 201a 	ldr.w	r2, [sp, #26]
    1b98:	609a      	str	r2, [r3, #8]
        if (*out_num_areas >= max_areas) {
    1b9a:	2c0a      	cmp	r4, #10
    1b9c:	d1e0      	bne.n	1b60 <flash_map_init+0x34>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
    1b9e:	b009      	add	sp, #36	; 0x24
    1ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == 0 && num_areas > 0) {
    1ba2:	2c00      	cmp	r4, #0
    1ba4:	d0fb      	beq.n	1b9e <flash_map_init+0x72>
        flash_map = mfg_areas;
    1ba6:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <flash_map_init+0x94>)
    1ba8:	6033      	str	r3, [r6, #0]
        flash_map_entries = num_areas;
    1baa:	603c      	str	r4, [r7, #0]
}
    1bac:	e7f7      	b.n	1b9e <flash_map_init+0x72>
    1bae:	bf00      	nop
    1bb0:	2000014c 	.word	0x2000014c
    1bb4:	200062f8 	.word	0x200062f8
    1bb8:	00003e8c 	.word	0x00003e8c
    1bbc:	200062fc 	.word	0x200062fc
    1bc0:	20004a90 	.word	0x20004a90

00001bc4 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    1bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    1bc6:	4c25      	ldr	r4, [pc, #148]	; (1c5c <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
    1bc8:	4a25      	ldr	r2, [pc, #148]	; (1c60 <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
    1bca:	6826      	ldr	r6, [r4, #0]
{
    1bcc:	b085      	sub	sp, #20
    1bce:	4605      	mov	r5, r0
    for (i = 0; i < mfg_num_mmrs; i++) {
    1bd0:	2300      	movs	r3, #0
        if (mfg_mmrs[i].area_id == area_id) {
    1bd2:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
    1bd4:	429e      	cmp	r6, r3
    1bd6:	dc0a      	bgt.n	1bee <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    1bd8:	2e02      	cmp	r6, #2
    1bda:	d03c      	beq.n	1c56 <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
    1bdc:	a901      	add	r1, sp, #4
    1bde:	4628      	mov	r0, r5
    1be0:	f7ff ff04 	bl	19ec <flash_area_open>
    if (rc != 0) {
    1be4:	b150      	cbz	r0, 1bfc <mfg_read_next_mmr+0x38>
        return SYS_EIO;
    1be6:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
    1bea:	b005      	add	sp, #20
    1bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
    1bee:	fb01 f003 	mul.w	r0, r1, r3
    1bf2:	5c80      	ldrb	r0, [r0, r2]
    1bf4:	42a8      	cmp	r0, r5
    1bf6:	d02b      	beq.n	1c50 <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
    1bf8:	3301      	adds	r3, #1
    1bfa:	e7eb      	b.n	1bd4 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	6881      	ldr	r1, [r0, #8]
    1c00:	2308      	movs	r3, #8
    1c02:	eb0d 0203 	add.w	r2, sp, r3
    1c06:	3908      	subs	r1, #8
    1c08:	f7ff ff4a 	bl	1aa0 <flash_area_read>
    if (rc != 0) {
    1c0c:	2800      	cmp	r0, #0
    1c0e:	d1ea      	bne.n	1be6 <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
    1c10:	4b14      	ldr	r3, [pc, #80]	; (1c64 <mfg_read_next_mmr+0xa0>)
    1c12:	9a03      	ldr	r2, [sp, #12]
    1c14:	429a      	cmp	r2, r3
    1c16:	d115      	bne.n	1c44 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
    1c18:	f89d 300a 	ldrb.w	r3, [sp, #10]
    1c1c:	2b02      	cmp	r3, #2
    1c1e:	d114      	bne.n	1c4a <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
    1c20:	9b01      	ldr	r3, [sp, #4]
    1c22:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    1c26:	689b      	ldr	r3, [r3, #8]
    1c28:	4299      	cmp	r1, r3
    1c2a:	d80b      	bhi.n	1c44 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
    1c2c:	4f0c      	ldr	r7, [pc, #48]	; (1c60 <mfg_read_next_mmr+0x9c>)
    1c2e:	220c      	movs	r2, #12
    1c30:	4372      	muls	r2, r6
        .offset = fap->fa_size - ftr.size,
    1c32:	1a5b      	subs	r3, r3, r1
    *out_mmr = (struct mfg_mmr) {
    1c34:	18be      	adds	r6, r7, r2
    1c36:	e9c6 3101 	strd	r3, r1, [r6, #4]
    mfg_num_mmrs++;
    1c3a:	6823      	ldr	r3, [r4, #0]
    *out_mmr = (struct mfg_mmr) {
    1c3c:	54bd      	strb	r5, [r7, r2]
    mfg_num_mmrs++;
    1c3e:	3301      	adds	r3, #1
    1c40:	6023      	str	r3, [r4, #0]
    1c42:	e7d2      	b.n	1bea <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
    1c44:	f06f 0008 	mvn.w	r0, #8
    1c48:	e7cf      	b.n	1bea <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
    1c4a:	f06f 000b 	mvn.w	r0, #11
    1c4e:	e7cc      	b.n	1bea <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
    1c50:	f06f 000a 	mvn.w	r0, #10
    1c54:	e7c9      	b.n	1bea <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
    1c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c5a:	e7c6      	b.n	1bea <mfg_read_next_mmr+0x26>
    1c5c:	20004b24 	.word	0x20004b24
    1c60:	20004b0c 	.word	0x20004b0c
    1c64:	3bb2a269 	.word	0x3bb2a269

00001c68 <mfg_read_tlv_body>:
{
    1c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    1c6a:	4b16      	ldr	r3, [pc, #88]	; (1cc4 <mfg_read_tlv_body+0x5c>)
{
    1c6c:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	7882      	ldrb	r2, [r0, #2]
    1c72:	429a      	cmp	r2, r3
{
    1c74:	4604      	mov	r4, r0
    1c76:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
    1c78:	db05      	blt.n	1c86 <mfg_read_tlv_body+0x1e>
    1c7a:	2300      	movs	r3, #0
    1c7c:	461a      	mov	r2, r3
    1c7e:	4619      	mov	r1, r3
    1c80:	4618      	mov	r0, r3
    1c82:	f7ff fb0f 	bl	12a4 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
    1c86:	230c      	movs	r3, #12
    1c88:	4353      	muls	r3, r2
    1c8a:	4a0f      	ldr	r2, [pc, #60]	; (1cc8 <mfg_read_tlv_body+0x60>)
    1c8c:	a901      	add	r1, sp, #4
    1c8e:	5cd0      	ldrb	r0, [r2, r3]
    1c90:	f7ff feac 	bl	19ec <flash_area_open>
    if (rc != 0) {
    1c94:	4601      	mov	r1, r0
    1c96:	b118      	cbz	r0, 1ca0 <mfg_read_tlv_body+0x38>
        return SYS_EIO;
    1c98:	f06f 0004 	mvn.w	r0, #4
}
    1c9c:	b002      	add	sp, #8
    1c9e:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    1ca0:	4632      	mov	r2, r6
    1ca2:	4628      	mov	r0, r5
    1ca4:	f7ff fdd7 	bl	1856 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    1ca8:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    1caa:	6861      	ldr	r1, [r4, #4]
    1cac:	9801      	ldr	r0, [sp, #4]
    1cae:	42b3      	cmp	r3, r6
    1cb0:	bfa8      	it	ge
    1cb2:	4633      	movge	r3, r6
    1cb4:	462a      	mov	r2, r5
    1cb6:	3102      	adds	r1, #2
    1cb8:	f7ff fef2 	bl	1aa0 <flash_area_read>
    if (rc != 0) {
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d0ed      	beq.n	1c9c <mfg_read_tlv_body+0x34>
    1cc0:	e7ea      	b.n	1c98 <mfg_read_tlv_body+0x30>
    1cc2:	bf00      	nop
    1cc4:	20004b24 	.word	0x20004b24
    1cc8:	20004b0c 	.word	0x20004b0c

00001ccc <mfg_seek_next>:
{
    1ccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
    1cd0:	4d1c      	ldr	r5, [pc, #112]	; (1d44 <mfg_seek_next+0x78>)
    rc = flash_area_open(mmr->area_id, &fap);
    1cd2:	4e1d      	ldr	r6, [pc, #116]	; (1d48 <mfg_seek_next+0x7c>)
{
    1cd4:	4604      	mov	r4, r0
    1cd6:	462f      	mov	r7, r5
    if (reader->mmr_idx >= mfg_num_mmrs) {
    1cd8:	78a2      	ldrb	r2, [r4, #2]
    1cda:	682b      	ldr	r3, [r5, #0]
    1cdc:	429a      	cmp	r2, r3
    1cde:	db04      	blt.n	1cea <mfg_seek_next+0x1e>
        return SYS_EINVAL;
    1ce0:	f06f 0001 	mvn.w	r0, #1
}
    1ce4:	b002      	add	sp, #8
    1ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_open(mmr->area_id, &fap);
    1cea:	230c      	movs	r3, #12
    1cec:	4353      	muls	r3, r2
    1cee:	a901      	add	r1, sp, #4
    1cf0:	5cf0      	ldrb	r0, [r6, r3]
    1cf2:	eb06 0803 	add.w	r8, r6, r3
    1cf6:	f7ff fe79 	bl	19ec <flash_area_open>
    if (rc != 0) {
    1cfa:	b9e8      	cbnz	r0, 1d38 <mfg_seek_next+0x6c>
    if (reader->offset == 0) {
    1cfc:	6863      	ldr	r3, [r4, #4]
    1cfe:	b98b      	cbnz	r3, 1d24 <mfg_seek_next+0x58>
        reader->offset = mmr->offset;
    1d00:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    1d04:	9801      	ldr	r0, [sp, #4]
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    1d06:	6063      	str	r3, [r4, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    1d08:	6883      	ldr	r3, [r0, #8]
    1d0a:	6861      	ldr	r1, [r4, #4]
    1d0c:	3b08      	subs	r3, #8
    1d0e:	4299      	cmp	r1, r3
    1d10:	d30c      	bcc.n	1d2c <mfg_seek_next+0x60>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    1d12:	78a3      	ldrb	r3, [r4, #2]
    1d14:	683a      	ldr	r2, [r7, #0]
    1d16:	3301      	adds	r3, #1
    1d18:	4293      	cmp	r3, r2
    1d1a:	da10      	bge.n	1d3e <mfg_seek_next+0x72>
            reader->offset = 0;
    1d1c:	2200      	movs	r2, #0
    1d1e:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    1d20:	70a3      	strb	r3, [r4, #2]
    1d22:	e7d9      	b.n	1cd8 <mfg_seek_next+0xc>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    1d24:	7862      	ldrb	r2, [r4, #1]
    1d26:	3302      	adds	r3, #2
    1d28:	4413      	add	r3, r2
    1d2a:	e7eb      	b.n	1d04 <mfg_seek_next+0x38>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    1d2c:	2302      	movs	r3, #2
    1d2e:	4622      	mov	r2, r4
    1d30:	f7ff feb6 	bl	1aa0 <flash_area_read>
    if (rc != 0) {
    1d34:	2800      	cmp	r0, #0
    1d36:	d0d5      	beq.n	1ce4 <mfg_seek_next+0x18>
        rc = SYS_EIO;
    1d38:	f06f 0004 	mvn.w	r0, #4
    1d3c:	e7d2      	b.n	1ce4 <mfg_seek_next+0x18>
            rc = SYS_EDONE;
    1d3e:	f06f 000e 	mvn.w	r0, #14
    1d42:	e7cf      	b.n	1ce4 <mfg_seek_next+0x18>
    1d44:	20004b24 	.word	0x20004b24
    1d48:	20004b0c 	.word	0x20004b0c

00001d4c <mfg_seek_next_with_type>:
{
    1d4c:	b538      	push	{r3, r4, r5, lr}
    1d4e:	4604      	mov	r4, r0
    1d50:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    1d52:	4620      	mov	r0, r4
    1d54:	f7ff ffba 	bl	1ccc <mfg_seek_next>
        if (rc != 0) {
    1d58:	b910      	cbnz	r0, 1d60 <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
    1d5a:	7823      	ldrb	r3, [r4, #0]
    1d5c:	42ab      	cmp	r3, r5
    1d5e:	d1f8      	bne.n	1d52 <mfg_seek_next_with_type+0x6>
}
    1d60:	bd38      	pop	{r3, r4, r5, pc}

00001d62 <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    1d62:	220a      	movs	r2, #10
    1d64:	f7ff bf80 	b.w	1c68 <mfg_read_tlv_body>

00001d68 <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    1d68:	2201      	movs	r2, #1
    1d6a:	f7ff bf7d 	b.w	1c68 <mfg_read_tlv_body>
	...

00001d70 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    1d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
    1d72:	4b10      	ldr	r3, [pc, #64]	; (1db4 <mfg_init+0x44>)
    1d74:	7818      	ldrb	r0, [r3, #0]
    1d76:	b9c8      	cbnz	r0, 1dac <mfg_init+0x3c>
        return;
    }
    mfg_initialized = true;
    1d78:	2201      	movs	r2, #1
    1d7a:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    1d7c:	f7ff ff22 	bl	1bc4 <mfg_read_next_mmr>
    if (rc != 0) {
    1d80:	b9a0      	cbnz	r0, 1dac <mfg_init+0x3c>
    mfg_open(&reader);
    1d82:	a802      	add	r0, sp, #8
    1d84:	f000 f818 	bl	1db8 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    1d88:	2104      	movs	r1, #4
    1d8a:	a802      	add	r0, sp, #8
    1d8c:	f7ff ffde 	bl	1d4c <mfg_seek_next_with_type>
        switch (rc) {
    1d90:	b960      	cbnz	r0, 1dac <mfg_init+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    1d92:	a901      	add	r1, sp, #4
    1d94:	a802      	add	r0, sp, #8
    1d96:	f7ff ffe7 	bl	1d68 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    1d9a:	b938      	cbnz	r0, 1dac <mfg_init+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    1d9c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1da0:	f7ff ff10 	bl	1bc4 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    1da4:	2800      	cmp	r0, #0
    1da6:	d0ef      	beq.n	1d88 <mfg_init+0x18>
    1da8:	300b      	adds	r0, #11
    1daa:	d0ed      	beq.n	1d88 <mfg_init+0x18>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
    1dac:	b005      	add	sp, #20
    1dae:	f85d fb04 	ldr.w	pc, [sp], #4
    1db2:	bf00      	nop
    1db4:	20004b08 	.word	0x20004b08

00001db8 <mfg_open>:
{
    1db8:	b510      	push	{r4, lr}
    1dba:	4604      	mov	r4, r0
    mfg_init();
    1dbc:	f7ff ffd8 	bl	1d70 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    1dc0:	2300      	movs	r3, #0
    1dc2:	e9c4 3300 	strd	r3, r3, [r4]
}
    1dc6:	bd10      	pop	{r4, pc}

00001dc8 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    1dc8:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    1dca:	f7ff fa6b 	bl	12a4 <__assert_func>

00001dce <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    1dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dd0:	9d08      	ldr	r5, [sp, #32]
    1dd2:	460c      	mov	r4, r1
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    1dd4:	b29e      	uxth	r6, r3
    1dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dd8:	9300      	str	r3, [sp, #0]
{
    1dda:	4617      	mov	r7, r2
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    1ddc:	4603      	mov	r3, r0
    1dde:	462a      	mov	r2, r5
    1de0:	4631      	mov	r1, r6
    1de2:	4620      	mov	r0, r4
    1de4:	f7ff fc4c 	bl	1680 <os_mempool_init>
    if (rc != 0) {
    1de8:	b940      	cbnz	r0, 1dfc <mem_init_mbuf_pool+0x2e>
        return rc;
    }

    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    1dea:	4633      	mov	r3, r6
    1dec:	b2aa      	uxth	r2, r5
    1dee:	4621      	mov	r1, r4
    1df0:	4638      	mov	r0, r7
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    1df2:	b003      	add	sp, #12
    1df4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    1df8:	f7ff bb73 	b.w	14e2 <os_mbuf_pool_init>
}
    1dfc:	b003      	add	sp, #12
    1dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e00 <boot_read_image_size>:
 * the TLVs.
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY) || defined(MCUBOOT_OVERWRITE_ONLY_FAST)
static int
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
{
    1e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e02:	4604      	mov	r4, r0

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1e04:	2000      	movs	r0, #0
{
    1e06:	460d      	mov	r5, r1
    1e08:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1e0a:	f001 f867 	bl	2edc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1e0e:	4669      	mov	r1, sp
    1e10:	b2c0      	uxtb	r0, r0
    1e12:	f7ff fdeb 	bl	19ec <flash_area_open>
    if (rc != 0) {
    1e16:	b118      	cbz	r0, 1e20 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    1e18:	2601      	movs	r6, #1
    rc = 0;

done:
    flash_area_close(fap);
    return rc;
}
    1e1a:	4630      	mov	r0, r6
    1e1c:	b003      	add	sp, #12
    1e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1e20:	232c      	movs	r3, #44	; 0x2c
    1e22:	fb03 4505 	mla	r5, r3, r5, r4
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1e26:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1e28:	8929      	ldrh	r1, [r5, #8]
    1e2a:	68eb      	ldr	r3, [r5, #12]
    1e2c:	18cc      	adds	r4, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1e2e:	2304      	movs	r3, #4
    1e30:	eb0d 0203 	add.w	r2, sp, r3
    1e34:	4621      	mov	r1, r4
    1e36:	f7ff fe33 	bl	1aa0 <flash_area_read>
    1e3a:	4606      	mov	r6, r0
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d1eb      	bne.n	1e18 <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1e40:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    1e44:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1e46:	f646 1308 	movw	r3, #26888	; 0x6908
    1e4a:	429a      	cmp	r2, r3
    1e4c:	d11a      	bne.n	1e84 <boot_read_image_size+0x84>
        if (protect_tlv_size != info.it_tlv_tot) {
    1e4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1e52:	42ab      	cmp	r3, r5
    1e54:	d001      	beq.n	1e5a <boot_read_image_size+0x5a>
            rc = BOOT_EBADIMAGE;
    1e56:	2603      	movs	r6, #3
    1e58:	e7df      	b.n	1e1a <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1e5a:	2304      	movs	r3, #4
    1e5c:	eb0d 0203 	add.w	r2, sp, r3
    1e60:	1961      	adds	r1, r4, r5
    1e62:	9800      	ldr	r0, [sp, #0]
    1e64:	f7ff fe1c 	bl	1aa0 <flash_area_read>
    1e68:	2800      	cmp	r0, #0
    1e6a:	d1d5      	bne.n	1e18 <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1e6c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    1e70:	f646 1307 	movw	r3, #26887	; 0x6907
    1e74:	429a      	cmp	r2, r3
    1e76:	d1ee      	bne.n	1e56 <boot_read_image_size+0x56>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    1e78:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    1e7c:	4429      	add	r1, r5
    1e7e:	4421      	add	r1, r4
    1e80:	6039      	str	r1, [r7, #0]
    return rc;
    1e82:	e7ca      	b.n	1e1a <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    1e84:	2d00      	cmp	r5, #0
    1e86:	d0f1      	beq.n	1e6c <boot_read_image_size+0x6c>
    1e88:	e7e5      	b.n	1e56 <boot_read_image_size+0x56>

00001e8a <boot_read_image_headers>:
#endif /* !MCUBOOT_OVERWRITE_ONLY */

static int
boot_read_image_headers(struct boot_loader_state *state, bool require_all,
        struct boot_status *bs)
{
    1e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    int i;

    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1e8c:	4613      	mov	r3, r2
{
    1e8e:	460f      	mov	r7, r1
    1e90:	4616      	mov	r6, r2
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1e92:	2100      	movs	r1, #0
    1e94:	4602      	mov	r2, r0
{
    1e96:	4605      	mov	r5, r0
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1e98:	f000 fb19 	bl	24ce <boot_read_image_header>
        if (rc != 0) {
    1e9c:	4604      	mov	r4, r0
    1e9e:	b950      	cbnz	r0, 1eb6 <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1ea0:	4633      	mov	r3, r6
    1ea2:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    1ea6:	2101      	movs	r1, #1
    1ea8:	4628      	mov	r0, r5
    1eaa:	f000 fb10 	bl	24ce <boot_read_image_header>
        if (rc != 0) {
    1eae:	b110      	cbz	r0, 1eb6 <boot_read_image_headers+0x2c>
             * if at least the first slot's header was read successfully,
             * then the boot loader can attempt a boot.
             *
             * Failure to read any headers is a fatal error.
             */
            if (i > 0 && !require_all) {
    1eb0:	2f00      	cmp	r7, #0
    1eb2:	bf18      	it	ne
    1eb4:	4604      	movne	r4, r0
            }
        }
    }

    return 0;
}
    1eb6:	4620      	mov	r0, r4
    1eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001ebc <boot_validate_slot.isra.3.constprop.5>:
 *         0 if image was successfully validated
 *         1 if no bootloable image was found
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
    1ebc:	b530      	push	{r4, r5, lr}
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1ebe:	2101      	movs	r1, #1
boot_validate_slot(struct boot_loader_state *state, int slot,
    1ec0:	b089      	sub	sp, #36	; 0x24
    1ec2:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1ec4:	2000      	movs	r0, #0
    1ec6:	f001 f809 	bl	2edc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1eca:	a906      	add	r1, sp, #24
    1ecc:	b2c0      	uxtb	r0, r0
    1ece:	f7ff fd8d 	bl	19ec <flash_area_open>
    if (rc != 0) {
    1ed2:	2800      	cmp	r0, #0
    1ed4:	d142      	bne.n	1f5c <boot_validate_slot.isra.3.constprop.5+0xa0>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1ed6:	2101      	movs	r1, #1
    1ed8:	f001 f800 	bl	2edc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1edc:	a907      	add	r1, sp, #28
    1ede:	b2c0      	uxtb	r0, r0
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    1ee0:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    1ee4:	f7ff fd82 	bl	19ec <flash_area_open>
    if (rc != 0) {
    1ee8:	b128      	cbz	r0, 1ef6 <boot_validate_slot.isra.3.constprop.5+0x3a>
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    1eea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if (boot_check_header_erased(state, slot) == 0 ||
    1eec:	f011 0110 	ands.w	r1, r1, #16
    1ef0:	d010      	beq.n	1f14 <boot_validate_slot.isra.3.constprop.5+0x58>
        /* No bootable image in slot; continue booting from the primary slot. */
        rc = 1;
    1ef2:	2001      	movs	r0, #1
    1ef4:	e030      	b.n	1f58 <boot_validate_slot.isra.3.constprop.5+0x9c>
    erased_val = flash_area_erased_val(fap);
    1ef6:	9807      	ldr	r0, [sp, #28]
    1ef8:	f7ff fe0b 	bl	1b12 <flash_area_erased_val>
    1efc:	f104 032b 	add.w	r3, r4, #43	; 0x2b
    1f00:	b2c0      	uxtb	r0, r0
    1f02:	f104 022f 	add.w	r2, r4, #47	; 0x2f
    for (i = 0; i < len; i++) {
    1f06:	4293      	cmp	r3, r2
    1f08:	d0f3      	beq.n	1ef2 <boot_validate_slot.isra.3.constprop.5+0x36>
        if (val != p[i]) {
    1f0a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    1f0e:	4281      	cmp	r1, r0
    1f10:	d0f9      	beq.n	1f06 <boot_validate_slot.isra.3.constprop.5+0x4a>
    1f12:	e7ea      	b.n	1eea <boot_validate_slot.isra.3.constprop.5+0x2e>
    if (hdr->ih_magic != IMAGE_MAGIC) {
    1f14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1f16:	4b13      	ldr	r3, [pc, #76]	; (1f64 <boot_validate_slot.isra.3.constprop.5+0xa8>)
    1f18:	429a      	cmp	r2, r3
    1f1a:	d005      	beq.n	1f28 <boot_validate_slot.isra.3.constprop.5+0x6c>
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
        if (slot != BOOT_PRIMARY_SLOT) {
            flash_area_erase(fap, 0, fap->fa_size);
    1f1c:	9806      	ldr	r0, [sp, #24]
    1f1e:	2100      	movs	r1, #0
    1f20:	6882      	ldr	r2, [r0, #8]
    1f22:	f7ff fde1 	bl	1ae8 <flash_area_erase>
    1f26:	e7e4      	b.n	1ef2 <boot_validate_slot.isra.3.constprop.5+0x36>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1f28:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
    1f2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (a > UINT32_MAX - b) {
    1f2c:	43c3      	mvns	r3, r0
    1f2e:	429a      	cmp	r2, r3
    1f30:	d8f4      	bhi.n	1f1c <boot_validate_slot.isra.3.constprop.5+0x60>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    1f32:	9b06      	ldr	r3, [sp, #24]
        *dest = a + b;
    1f34:	4402      	add	r2, r0
    if (size >= fap->fa_size) {
    1f36:	6898      	ldr	r0, [r3, #8]
    1f38:	4290      	cmp	r0, r2
    1f3a:	d9ef      	bls.n	1f1c <boot_validate_slot.isra.3.constprop.5+0x60>
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    1f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1f40:	9201      	str	r2, [sp, #4]
    1f42:	4a09      	ldr	r2, [pc, #36]	; (1f68 <boot_validate_slot.isra.3.constprop.5+0xac>)
    1f44:	9200      	str	r2, [sp, #0]
    1f46:	e9cd 1103 	strd	r1, r1, [sp, #12]
    1f4a:	9102      	str	r1, [sp, #8]
    1f4c:	462a      	mov	r2, r5
    1f4e:	4608      	mov	r0, r1
    1f50:	f000 feaa 	bl	2ca8 <bootutil_img_validate>
    1f54:	2800      	cmp	r0, #0
    1f56:	d1e1      	bne.n	1f1c <boot_validate_slot.isra.3.constprop.5+0x60>
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    1f58:	b009      	add	sp, #36	; 0x24
    1f5a:	bd30      	pop	{r4, r5, pc}
        return -1;
    1f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f60:	e7fa      	b.n	1f58 <boot_validate_slot.isra.3.constprop.5+0x9c>
    1f62:	bf00      	nop
    1f64:	96f3b83d 	.word	0x96f3b83d
    1f68:	20006194 	.word	0x20006194

00001f6c <boot_read_sectors>:
{
    1f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1f6e:	ad02      	add	r5, sp, #8
    1f70:	2680      	movs	r6, #128	; 0x80
    1f72:	f845 6d04 	str.w	r6, [r5, #-4]!
{
    1f76:	4604      	mov	r4, r0
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1f78:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1f7a:	4629      	mov	r1, r5
    1f7c:	2001      	movs	r0, #1
    1f7e:	f7ff fd53 	bl	1a28 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    1f82:	9b01      	ldr	r3, [sp, #4]
    1f84:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
    1f86:	b118      	cbz	r0, 1f90 <boot_read_sectors+0x24>
        return BOOT_EFLASH;
    1f88:	2501      	movs	r5, #1
}
    1f8a:	4628      	mov	r0, r5
    1f8c:	b002      	add	sp, #8
    1f8e:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1f90:	6d22      	ldr	r2, [r4, #80]	; 0x50
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1f92:	9601      	str	r6, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1f94:	4629      	mov	r1, r5
    1f96:	2002      	movs	r0, #2
    1f98:	f7ff fd46 	bl	1a28 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    1f9c:	9b01      	ldr	r3, [sp, #4]
    1f9e:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
    1fa0:	2800      	cmp	r0, #0
    1fa2:	d1f1      	bne.n	1f88 <boot_read_sectors+0x1c>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1fa4:	4629      	mov	r1, r5
    1fa6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1fa8:	9601      	str	r6, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1faa:	2003      	movs	r0, #3
    1fac:	f7ff fd3c 	bl	1a28 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    1fb0:	9b01      	ldr	r3, [sp, #4]
    1fb2:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
    1fb4:	4605      	mov	r5, r0
    1fb6:	2800      	cmp	r0, #0
    1fb8:	d1e6      	bne.n	1f88 <boot_read_sectors+0x1c>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1fba:	6a20      	ldr	r0, [r4, #32]
    1fbc:	f7ff fda6 	bl	1b0c <flash_area_align>
    1fc0:	4606      	mov	r6, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    1fc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1fc4:	f7ff fda2 	bl	1b0c <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    1fc8:	42b0      	cmp	r0, r6
    1fca:	bf2c      	ite	cs
    1fcc:	66a0      	strcs	r0, [r4, #104]	; 0x68
    1fce:	66a6      	strcc	r6, [r4, #104]	; 0x68
    1fd0:	e7db      	b.n	1f8a <boot_read_sectors+0x1e>

00001fd2 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    1fd2:	2301      	movs	r3, #1
    1fd4:	6003      	str	r3, [r0, #0]
    1fd6:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    1fda:	6043      	str	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1fdc:	2300      	movs	r3, #0
    bs->swap_size = 0;
    1fde:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    1fe2:	4770      	bx	lr

00001fe4 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    1fe4:	7943      	ldrb	r3, [r0, #5]
    1fe6:	2b01      	cmp	r3, #1
    1fe8:	d107      	bne.n	1ffa <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    1fea:	6803      	ldr	r3, [r0, #0]
    1fec:	2b01      	cmp	r3, #1
    1fee:	d104      	bne.n	1ffa <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    1ff0:	7900      	ldrb	r0, [r0, #4]
    1ff2:	1e43      	subs	r3, r0, #1
    1ff4:	4258      	negs	r0, r3
    1ff6:	4158      	adcs	r0, r3
    1ff8:	4770      	bx	lr
    1ffa:	2000      	movs	r0, #0
}
    1ffc:	4770      	bx	lr
	...

00002000 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2000:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2002:	460d      	mov	r5, r1
    2004:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    2006:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    2008:	4628      	mov	r0, r5
    size = copy_size = 0;
    200a:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
    200e:	f7ff ffe9 	bl	1fe4 <boot_status_is_reset>
    2012:	b338      	cbz	r0, 2064 <boot_swap_image+0x64>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2014:	4e18      	ldr	r6, [pc, #96]	; (2078 <boot_swap_image+0x78>)
    2016:	6822      	ldr	r2, [r4, #0]
    2018:	42b2      	cmp	r2, r6
    201a:	d10a      	bne.n	2032 <boot_swap_image+0x32>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    201c:	aa01      	add	r2, sp, #4
    201e:	4620      	mov	r0, r4
    2020:	f7ff feee 	bl	1e00 <boot_read_image_size>
            assert(rc == 0);
    2024:	b128      	cbz	r0, 2032 <boot_swap_image+0x32>
    2026:	2300      	movs	r3, #0
    2028:	461a      	mov	r2, r3
    202a:	4619      	mov	r1, r3
    202c:	4618      	mov	r0, r3
    202e:	f7ff f939 	bl	12a4 <__assert_func>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2032:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2034:	42b3      	cmp	r3, r6
    2036:	d106      	bne.n	2046 <boot_swap_image+0x46>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    2038:	466a      	mov	r2, sp
    203a:	2101      	movs	r1, #1
    203c:	4620      	mov	r0, r4
    203e:	f7ff fedf 	bl	1e00 <boot_read_image_size>
            assert(rc == 0);
    2042:	2800      	cmp	r0, #0
    2044:	d1ef      	bne.n	2026 <boot_swap_image+0x26>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    2046:	e9dd 3200 	ldrd	r3, r2, [sp]
    204a:	4293      	cmp	r3, r2
            copy_size = size;
    204c:	bf88      	it	hi
    204e:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
    2050:	9b01      	ldr	r3, [sp, #4]
    2052:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    2054:	4620      	mov	r0, r4
    2056:	9a01      	ldr	r2, [sp, #4]
    2058:	4629      	mov	r1, r5
    205a:	f000 fb37 	bl	26cc <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    205e:	2000      	movs	r0, #0
    2060:	b002      	add	sp, #8
    2062:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    2064:	f105 0108 	add.w	r1, r5, #8
    2068:	f000 fd64 	bl	2b34 <boot_read_swap_size>
        assert(rc == 0);
    206c:	2800      	cmp	r0, #0
    206e:	d1da      	bne.n	2026 <boot_swap_image+0x26>
        copy_size = bs->swap_size;
    2070:	68ab      	ldr	r3, [r5, #8]
    2072:	9301      	str	r3, [sp, #4]
    2074:	e7ee      	b.n	2054 <boot_swap_image+0x54>
    2076:	bf00      	nop
    2078:	96f3b83d 	.word	0x96f3b83d

0000207c <boot_write_status>:
{
    207c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bs->use_scratch) {
    207e:	798b      	ldrb	r3, [r1, #6]
    2080:	2b00      	cmp	r3, #0
{
    2082:	4606      	mov	r6, r0
    2084:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    2086:	bf14      	ite	ne
    2088:	2003      	movne	r0, #3
    208a:	2001      	moveq	r0, #1
    208c:	a901      	add	r1, sp, #4
    208e:	f7ff fcad 	bl	19ec <flash_area_open>
    if (rc != 0) {
    2092:	bb18      	cbnz	r0, 20dc <boot_write_status+0x60>
    off = boot_status_off(fap) +
    2094:	9801      	ldr	r0, [sp, #4]
    2096:	f000 fcc4 	bl	2a22 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    209a:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    off = boot_status_off(fap) +
    209c:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    209e:	4628      	mov	r0, r5
    20a0:	f000 fa76 	bl	2590 <boot_status_internal_off>
    off = boot_status_off(fap) +
    20a4:	4404      	add	r4, r0
    align = flash_area_align(fap);
    20a6:	9801      	ldr	r0, [sp, #4]
    20a8:	f7ff fd30 	bl	1b0c <flash_area_align>
    20ac:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    20ae:	9801      	ldr	r0, [sp, #4]
    20b0:	f7ff fd2f 	bl	1b12 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    20b4:	2208      	movs	r2, #8
    20b6:	b2c1      	uxtb	r1, r0
    20b8:	eb0d 0002 	add.w	r0, sp, r2
    20bc:	f7ff fbcb 	bl	1856 <memset>
    buf[0] = bs->state;
    20c0:	792b      	ldrb	r3, [r5, #4]
    20c2:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    20c6:	aa02      	add	r2, sp, #8
    20c8:	4633      	mov	r3, r6
    20ca:	4621      	mov	r1, r4
    20cc:	9801      	ldr	r0, [sp, #4]
    20ce:	f7ff fcf9 	bl	1ac4 <flash_area_write>
    if (rc != 0) {
    20d2:	3000      	adds	r0, #0
    20d4:	bf18      	it	ne
    20d6:	2001      	movne	r0, #1
}
    20d8:	b004      	add	sp, #16
    20da:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    20dc:	2001      	movs	r0, #1
    return rc;
    20de:	e7fb      	b.n	20d8 <boot_write_status+0x5c>

000020e0 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    20e0:	f7ff bd02 	b.w	1ae8 <flash_area_erase>

000020e4 <boot_copy_region>:
{
    20e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    20ea:	4f12      	ldr	r7, [pc, #72]	; (2134 <boot_copy_region+0x50>)
{
    20ec:	4688      	mov	r8, r1
    20ee:	4691      	mov	r9, r2
    20f0:	469a      	mov	sl, r3
    bytes_copied = 0;
    20f2:	2400      	movs	r4, #0
    while (bytes_copied < sz) {
    20f4:	42b4      	cmp	r4, r6
    20f6:	d301      	bcc.n	20fc <boot_copy_region+0x18>
    return 0;
    20f8:	2000      	movs	r0, #0
    20fa:	e00e      	b.n	211a <boot_copy_region+0x36>
        if (sz - bytes_copied > sizeof buf) {
    20fc:	1b35      	subs	r5, r6, r4
    20fe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2102:	bf28      	it	cs
    2104:	f44f 6580 	movcs.w	r5, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    2108:	462b      	mov	r3, r5
    210a:	4a0a      	ldr	r2, [pc, #40]	; (2134 <boot_copy_region+0x50>)
    210c:	eb04 010a 	add.w	r1, r4, sl
    2110:	4640      	mov	r0, r8
    2112:	f7ff fcc5 	bl	1aa0 <flash_area_read>
        if (rc != 0) {
    2116:	b110      	cbz	r0, 211e <boot_copy_region+0x3a>
            return BOOT_EFLASH;
    2118:	2001      	movs	r0, #1
}
    211a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    211e:	9908      	ldr	r1, [sp, #32]
    2120:	462b      	mov	r3, r5
    2122:	463a      	mov	r2, r7
    2124:	1861      	adds	r1, r4, r1
    2126:	4648      	mov	r0, r9
    2128:	f7ff fccc 	bl	1ac4 <flash_area_write>
        if (rc != 0) {
    212c:	2800      	cmp	r0, #0
    212e:	d1f3      	bne.n	2118 <boot_copy_region+0x34>
        bytes_copied += chunk_sz;
    2130:	442c      	add	r4, r5
    2132:	e7df      	b.n	20f4 <boot_copy_region+0x10>
    2134:	20004b94 	.word	0x20004b94

00002138 <context_boot_go>:
    }
}

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    2138:	b5f0      	push	{r4, r5, r6, r7, lr}
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    213a:	226c      	movs	r2, #108	; 0x6c
{
    213c:	4604      	mov	r4, r0
    213e:	b085      	sub	sp, #20
    2140:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
    2142:	2100      	movs	r1, #0
    2144:	f7ff fb87 	bl	1856 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    2148:	4b73      	ldr	r3, [pc, #460]	; (2318 <context_boot_go+0x1e0>)
    214a:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    214c:	4b73      	ldr	r3, [pc, #460]	; (231c <context_boot_go+0x1e4>)
    214e:	6523      	str	r3, [r4, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2150:	2100      	movs	r1, #0
        state->scratch.sectors = scratch_sectors;
    2152:	4b73      	ldr	r3, [pc, #460]	; (2320 <context_boot_go+0x1e8>)
    2154:	65e3      	str	r3, [r4, #92]	; 0x5c
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2156:	4608      	mov	r0, r1
    2158:	f000 fec0 	bl	2edc <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    215c:	f104 0120 	add.w	r1, r4, #32
    2160:	b2c0      	uxtb	r0, r0
    2162:	f7ff fc43 	bl	19ec <flash_area_open>
            assert(rc == 0);
    2166:	b978      	cbnz	r0, 2188 <context_boot_go+0x50>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2168:	2101      	movs	r1, #1
    216a:	f000 feb7 	bl	2edc <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    216e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    2172:	b2c0      	uxtb	r0, r0
    2174:	f7ff fc3a 	bl	19ec <flash_area_open>
            assert(rc == 0);
    2178:	b930      	cbnz	r0, 2188 <context_boot_go+0x50>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    217a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    217e:	2003      	movs	r0, #3
    2180:	f7ff fc34 	bl	19ec <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    2184:	4605      	mov	r5, r0
    2186:	b128      	cbz	r0, 2194 <context_boot_go+0x5c>
            assert(rc == 0);
    2188:	2300      	movs	r3, #0
    218a:	461a      	mov	r2, r3
    218c:	4619      	mov	r1, r3
    218e:	4618      	mov	r0, r3
    2190:	f7ff f888 	bl	12a4 <__assert_func>
    rc = boot_read_sectors(state);
    2194:	4620      	mov	r0, r4
    2196:	f7ff fee9 	bl	1f6c <boot_read_sectors>
    if (rc != 0) {
    219a:	b118      	cbz	r0, 21a4 <context_boot_go+0x6c>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    219c:	2301      	movs	r3, #1
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    219e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    21a2:	e05a      	b.n	225a <context_boot_go+0x122>
    rc = boot_read_image_headers(state, false, NULL);
    21a4:	462a      	mov	r2, r5
    21a6:	4629      	mov	r1, r5
    21a8:	4620      	mov	r0, r4
    21aa:	f7ff fe6e 	bl	1e8a <boot_read_image_headers>
    if (rc != 0) {
    21ae:	2800      	cmp	r0, #0
    21b0:	d1f4      	bne.n	219c <context_boot_go+0x64>
    if (boot_slots_compatible(state)) {
    21b2:	4620      	mov	r0, r4
    21b4:	f000 f9f7 	bl	25a6 <boot_slots_compatible>
    21b8:	2800      	cmp	r0, #0
    21ba:	d0ef      	beq.n	219c <context_boot_go+0x64>
        boot_status_reset(bs);
    21bc:	4668      	mov	r0, sp
    21be:	f7ff ff08 	bl	1fd2 <boot_status_reset>
        rc = swap_read_status(state, bs);
    21c2:	4669      	mov	r1, sp
    21c4:	4620      	mov	r0, r4
    21c6:	f000 f91f 	bl	2408 <swap_read_status>
        if (rc != 0) {
    21ca:	2800      	cmp	r0, #0
    21cc:	d1e6      	bne.n	219c <context_boot_go+0x64>
        if (!boot_status_is_reset(bs)) {
    21ce:	4668      	mov	r0, sp
    21d0:	f7ff ff08 	bl	1fe4 <boot_status_is_reset>
    21d4:	bb60      	cbnz	r0, 2230 <context_boot_go+0xf8>
    rc = boot_swap_image(state, bs);
    21d6:	4669      	mov	r1, sp
    21d8:	4620      	mov	r0, r4
    21da:	f7ff ff11 	bl	2000 <boot_swap_image>
    assert(rc == 0);
    21de:	2800      	cmp	r0, #0
    21e0:	d1d2      	bne.n	2188 <context_boot_go+0x50>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
    21e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    21e6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    21ea:	3b03      	subs	r3, #3
    21ec:	2b01      	cmp	r3, #1
    21ee:	d805      	bhi.n	21fc <context_boot_go+0xc4>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    21f0:	f000 f955 	bl	249e <swap_set_image_ok>
        if (rc != 0) {
    21f4:	b110      	cbz	r0, 21fc <context_boot_go+0xc4>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    21f6:	23ff      	movs	r3, #255	; 0xff
    21f8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    21fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2200:	3b02      	subs	r3, #2
    2202:	2b02      	cmp	r3, #2
    2204:	d806      	bhi.n	2214 <context_boot_go+0xdc>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2206:	2000      	movs	r0, #0
    2208:	f000 f93b 	bl	2482 <swap_set_copy_done>
        if (rc != 0) {
    220c:	b110      	cbz	r0, 2214 <context_boot_go+0xdc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    220e:	23ff      	movs	r3, #255	; 0xff
    2210:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2214:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2218:	2bff      	cmp	r3, #255	; 0xff
    221a:	d0b5      	beq.n	2188 <context_boot_go+0x50>
            assert(rc == 0);
    221c:	2800      	cmp	r0, #0
    221e:	d1b3      	bne.n	2188 <context_boot_go+0x50>
            rc = boot_read_image_headers(state, false, bs);
    2220:	4601      	mov	r1, r0
    2222:	466a      	mov	r2, sp
    2224:	4620      	mov	r0, r4
    2226:	f7ff fe30 	bl	1e8a <boot_read_image_headers>
            assert(rc == 0);
    222a:	2800      	cmp	r0, #0
    222c:	d0b6      	beq.n	219c <context_boot_go+0x64>
    222e:	e7ab      	b.n	2188 <context_boot_go+0x50>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    2230:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2234:	2b01      	cmp	r3, #1
    2236:	d11e      	bne.n	2276 <context_boot_go+0x13e>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    2238:	4628      	mov	r0, r5
    223a:	f000 fcf3 	bl	2c24 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
    223e:	1e83      	subs	r3, r0, #2
    2240:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    2242:	4606      	mov	r6, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    2244:	d807      	bhi.n	2256 <context_boot_go+0x11e>
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    2246:	4620      	mov	r0, r4
    2248:	f7ff fe38 	bl	1ebc <boot_validate_slot.isra.3.constprop.5>
        if (rc == 1) {
    224c:	2801      	cmp	r0, #1
    224e:	d010      	beq.n	2272 <context_boot_go+0x13a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    2250:	2800      	cmp	r0, #0
    2252:	bf18      	it	ne
    2254:	2605      	movne	r6, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    2256:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    225a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    225e:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    2262:	3b01      	subs	r3, #1
    2264:	2b04      	cmp	r3, #4
    2266:	d850      	bhi.n	230a <context_boot_go+0x1d2>
    2268:	e8df f003 	tbb	[pc, r3]
    226c:	0e0e0e29 	.word	0x0e0e0e29
    2270:	49          	.byte	0x49
    2271:	00          	.byte	0x00
            swap_type = BOOT_SWAP_TYPE_NONE;
    2272:	4606      	mov	r6, r0
    2274:	e7ef      	b.n	2256 <context_boot_go+0x11e>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    2276:	4620      	mov	r0, r4
    2278:	f7ff fe20 	bl	1ebc <boot_validate_slot.isra.3.constprop.5>
    227c:	b108      	cbz	r0, 2282 <context_boot_go+0x14a>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    227e:	2305      	movs	r3, #5
    2280:	e78d      	b.n	219e <context_boot_go+0x66>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    2282:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2286:	e78a      	b.n	219e <context_boot_go+0x66>
        rc = boot_swap_image(state, bs);
    2288:	4669      	mov	r1, sp
    228a:	4620      	mov	r0, r4
    228c:	f7ff feb8 	bl	2000 <boot_swap_image>
    assert(rc == 0);
    2290:	4605      	mov	r5, r0
    2292:	2800      	cmp	r0, #0
    2294:	f47f af78 	bne.w	2188 <context_boot_go+0x50>
    swap_type = BOOT_SWAP_TYPE(state);
    2298:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    229c:	1eda      	subs	r2, r3, #3
    229e:	2a01      	cmp	r2, #1
    22a0:	d806      	bhi.n	22b0 <context_boot_go+0x178>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    22a2:	f000 f8fc 	bl	249e <swap_set_image_ok>
        if (rc != 0) {
    22a6:	b128      	cbz	r0, 22b4 <context_boot_go+0x17c>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    22a8:	23ff      	movs	r3, #255	; 0xff
    22aa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    22ae:	e76b      	b.n	2188 <context_boot_go+0x50>
    if (BOOT_IS_UPGRADE(swap_type)) {
    22b0:	2b02      	cmp	r3, #2
    22b2:	d104      	bne.n	22be <context_boot_go+0x186>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    22b4:	2000      	movs	r0, #0
    22b6:	f000 f8e4 	bl	2482 <swap_set_copy_done>
        if (rc != 0) {
    22ba:	2800      	cmp	r0, #0
    22bc:	d1f4      	bne.n	22a8 <context_boot_go+0x170>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    22be:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    22c2:	2bff      	cmp	r3, #255	; 0xff
    22c4:	f43f af60 	beq.w	2188 <context_boot_go+0x50>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    22c8:	2b01      	cmp	r3, #1
    22ca:	d006      	beq.n	22da <context_boot_go+0x1a2>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
    22cc:	466a      	mov	r2, sp
    22ce:	2100      	movs	r1, #0
    22d0:	4620      	mov	r0, r4
    22d2:	f7ff fdda 	bl	1e8a <boot_read_image_headers>
            if (rc != 0) {
    22d6:	4605      	mov	r5, r0
    22d8:	b970      	cbnz	r0, 22f8 <context_boot_go+0x1c0>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    22da:	6822      	ldr	r2, [r4, #0]
    22dc:	4b11      	ldr	r3, [pc, #68]	; (2324 <context_boot_go+0x1ec>)
    22de:	429a      	cmp	r2, r3
    22e0:	d117      	bne.n	2312 <context_boot_go+0x1da>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
    22e2:	2210      	movs	r2, #16
    22e4:	2100      	movs	r1, #0
    22e6:	4668      	mov	r0, sp
    22e8:	f7ff fab5 	bl	1856 <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    22ec:	6a23      	ldr	r3, [r4, #32]
    22ee:	785a      	ldrb	r2, [r3, #1]
    22f0:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    22f2:	685b      	ldr	r3, [r3, #4]
    22f4:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    22f6:	603c      	str	r4, [r7, #0]
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    22f8:	4628      	mov	r0, r5
    22fa:	b005      	add	sp, #20
    22fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    22fe:	2000      	movs	r0, #0
    2300:	f000 f8cd 	bl	249e <swap_set_image_ok>
            if (rc != 0) {
    2304:	4605      	mov	r5, r0
    2306:	2800      	cmp	r0, #0
    2308:	d0d9      	beq.n	22be <context_boot_go+0x186>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    230a:	23ff      	movs	r3, #255	; 0xff
    230c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2310:	e7d5      	b.n	22be <context_boot_go+0x186>
            rc = BOOT_EBADIMAGE;
    2312:	2503      	movs	r5, #3
    return rc;
    2314:	e7f0      	b.n	22f8 <context_boot_go+0x1c0>
    2316:	bf00      	nop
    2318:	20004f94 	.word	0x20004f94
    231c:	20005b94 	.word	0x20005b94
    2320:	20005594 	.word	0x20005594
    2324:	96f3b83d 	.word	0x96f3b83d

00002328 <boot_go>:
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    return context_boot_go(&boot_data, rsp);
    2328:	4601      	mov	r1, r0
    232a:	4801      	ldr	r0, [pc, #4]	; (2330 <boot_go+0x8>)
    232c:	f7ff bf04 	b.w	2138 <context_boot_go>
    2330:	20004b28 	.word	0x20004b28

00002334 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    2334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2338:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    233a:	2100      	movs	r1, #0
{
    233c:	4606      	mov	r6, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    233e:	4608      	mov	r0, r1
    2340:	f000 fdcc 	bl	2edc <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    2344:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    2346:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    2348:	2000      	movs	r0, #0
    234a:	f000 fdc7 	bl	2edc <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    234e:	783b      	ldrb	r3, [r7, #0]
    2350:	42a3      	cmp	r3, r4
    2352:	d021      	beq.n	2398 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    2354:	4283      	cmp	r3, r0
    2356:	d128      	bne.n	23aa <swap_erase_trailer_sectors+0x76>
        slot = BOOT_SECONDARY_SLOT;
    2358:	2501      	movs	r5, #1
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
    235a:	232c      	movs	r3, #44	; 0x2c
    235c:	fb03 6505 	mla	r5, r3, r5, r6
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    2360:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    2362:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
    2366:	f000 fb4c 	bl	2a02 <boot_trailer_sz>
    236a:	240c      	movs	r4, #12
    236c:	fb04 f409 	mul.w	r4, r4, r9
    2370:	4680      	mov	r8, r0
    2372:	3c0c      	subs	r4, #12
    total_sz = 0;
    2374:	2600      	movs	r6, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2378:	191a      	adds	r2, r3, r4
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    237a:	e9d2 1901 	ldrd	r1, r9, [r2, #4]
    237e:	685b      	ldr	r3, [r3, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    2380:	464a      	mov	r2, r9
    2382:	1ac9      	subs	r1, r1, r3
    2384:	4638      	mov	r0, r7
    2386:	f7ff feab 	bl	20e0 <boot_erase_region>
        assert(rc == 0);
    238a:	b138      	cbz	r0, 239c <swap_erase_trailer_sectors+0x68>
    238c:	2300      	movs	r3, #0
    238e:	461a      	mov	r2, r3
    2390:	4619      	mov	r1, r3
    2392:	4618      	mov	r0, r3
    2394:	f7fe ff86 	bl	12a4 <__assert_func>
        slot = BOOT_PRIMARY_SLOT;
    2398:	2500      	movs	r5, #0
    239a:	e7de      	b.n	235a <swap_erase_trailer_sectors+0x26>

        sector--;
        total_sz += sz;
    239c:	444e      	add	r6, r9
    } while (total_sz < trailer_sz);
    239e:	45b0      	cmp	r8, r6
    23a0:	f1a4 040c 	sub.w	r4, r4, #12
    23a4:	d8e7      	bhi.n	2376 <swap_erase_trailer_sectors+0x42>

    return rc;
}
    23a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    23aa:	2001      	movs	r0, #1
    23ac:	e7fb      	b.n	23a6 <swap_erase_trailer_sectors+0x72>

000023ae <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    23ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    23b0:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    23b2:	2002      	movs	r0, #2
    23b4:	4669      	mov	r1, sp
{
    23b6:	4615      	mov	r5, r2
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    23b8:	f000 fbac 	bl	2b14 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    23bc:	4602      	mov	r2, r0
    23be:	b128      	cbz	r0, 23cc <swap_status_init+0x1e>
    23c0:	2300      	movs	r3, #0
    23c2:	461a      	mov	r2, r3
    23c4:	4619      	mov	r1, r3
    23c6:	4618      	mov	r0, r3
    23c8:	f7fe ff6c 	bl	12a4 <__assert_func>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    23cc:	79e9      	ldrb	r1, [r5, #7]
    23ce:	2901      	cmp	r1, #1
    23d0:	d004      	beq.n	23dc <swap_status_init+0x2e>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    23d2:	4620      	mov	r0, r4
    23d4:	f000 fc02 	bl	2bdc <boot_write_swap_info>
        assert(rc == 0);
    23d8:	2800      	cmp	r0, #0
    23da:	d1f1      	bne.n	23c0 <swap_status_init+0x12>
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    23dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23e0:	2b01      	cmp	r3, #1
    23e2:	d104      	bne.n	23ee <swap_status_init+0x40>
        rc = boot_write_image_ok(fap);
    23e4:	4620      	mov	r0, r4
    23e6:	f000 fbed 	bl	2bc4 <boot_write_image_ok>
        assert(rc == 0);
    23ea:	2800      	cmp	r0, #0
    23ec:	d1e8      	bne.n	23c0 <swap_status_init+0x12>
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    23ee:	68a9      	ldr	r1, [r5, #8]
    23f0:	4620      	mov	r0, r4
    23f2:	f000 fc0b 	bl	2c0c <boot_write_swap_size>
    assert(rc == 0);
    23f6:	2800      	cmp	r0, #0
    23f8:	d1e2      	bne.n	23c0 <swap_status_init+0x12>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    23fa:	4620      	mov	r0, r4
    23fc:	f000 fbc8 	bl	2b90 <boot_write_magic>
    assert(rc == 0);
    2400:	2800      	cmp	r0, #0
    2402:	d1dd      	bne.n	23c0 <swap_status_init+0x12>

    return 0;
}
    2404:	b003      	add	sp, #12
    2406:	bd30      	pop	{r4, r5, pc}

00002408 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    2408:	b573      	push	{r0, r1, r4, r5, r6, lr}
    240a:	460d      	mov	r5, r1
    240c:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    240e:	f000 f91f 	bl	2650 <swap_status_source>
    switch (bs->source) {
    2412:	2801      	cmp	r0, #1
    bs->source = swap_status_source(state);
    2414:	4604      	mov	r4, r0
    2416:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    2418:	d02f      	beq.n	247a <swap_read_status+0x72>
    241a:	2802      	cmp	r0, #2
    241c:	d003      	beq.n	2426 <swap_read_status+0x1e>
    241e:	bb30      	cbnz	r0, 246e <swap_read_status+0x66>
    }

    flash_area_close(fap);

    return rc;
}
    2420:	4620      	mov	r0, r4
    2422:	b002      	add	sp, #8
    2424:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    2426:	2001      	movs	r0, #1
    rc = flash_area_open(area_id, &fap);
    2428:	a901      	add	r1, sp, #4
    242a:	f7ff fadf 	bl	19ec <flash_area_open>
    if (rc != 0) {
    242e:	bb30      	cbnz	r0, 247e <swap_read_status+0x76>
    rc = swap_read_status_bytes(fap, state, bs);
    2430:	462a      	mov	r2, r5
    2432:	4631      	mov	r1, r6
    2434:	9801      	ldr	r0, [sp, #4]
    2436:	f000 f861 	bl	24fc <swap_read_status_bytes>
    if (rc == 0) {
    243a:	4604      	mov	r4, r0
    243c:	2800      	cmp	r0, #0
    243e:	d1ef      	bne.n	2420 <swap_read_status+0x18>
        off = boot_swap_info_off(fap);
    2440:	9801      	ldr	r0, [sp, #4]
    2442:	f000 fb01 	bl	2a48 <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2446:	2301      	movs	r3, #1
    2448:	4601      	mov	r1, r0
    244a:	f10d 0203 	add.w	r2, sp, #3
    244e:	9801      	ldr	r0, [sp, #4]
    2450:	f7ff fb64 	bl	1b1c <flash_area_read_is_empty>
        if (rc == 1) {
    2454:	2801      	cmp	r0, #1
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    2456:	bf08      	it	eq
    2458:	f88d 0003 	strbeq.w	r0, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    245c:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rc = 0;
    2460:	bf08      	it	eq
    2462:	4620      	moveq	r0, r4
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2464:	f003 030f 	and.w	r3, r3, #15
    2468:	71eb      	strb	r3, [r5, #7]
    246a:	4604      	mov	r4, r0
    246c:	e7d8      	b.n	2420 <swap_read_status+0x18>
        assert(0);
    246e:	2300      	movs	r3, #0
    2470:	461a      	mov	r2, r3
    2472:	4619      	mov	r1, r3
    2474:	4618      	mov	r0, r3
    2476:	f7fe ff15 	bl	12a4 <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    247a:	2003      	movs	r0, #3
    247c:	e7d4      	b.n	2428 <swap_read_status+0x20>
        return BOOT_EFLASH;
    247e:	2401      	movs	r4, #1
    2480:	e7ce      	b.n	2420 <swap_read_status+0x18>

00002482 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    2482:	b507      	push	{r0, r1, r2, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2484:	2001      	movs	r0, #1
    2486:	a901      	add	r1, sp, #4
    2488:	f7ff fab0 	bl	19ec <flash_area_open>
            &fap);
    if (rc != 0) {
    248c:	b928      	cbnz	r0, 249a <swap_set_copy_done+0x18>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    248e:	9801      	ldr	r0, [sp, #4]
    2490:	f000 fb8c 	bl	2bac <boot_write_copy_done>
    flash_area_close(fap);
    return rc;
}
    2494:	b003      	add	sp, #12
    2496:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EFLASH;
    249a:	2001      	movs	r0, #1
    249c:	e7fa      	b.n	2494 <swap_set_copy_done+0x12>

0000249e <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    249e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    24a0:	2001      	movs	r0, #1
    24a2:	a901      	add	r1, sp, #4
    24a4:	f7ff faa2 	bl	19ec <flash_area_open>
            &fap);
    if (rc != 0) {
    24a8:	b118      	cbz	r0, 24b2 <swap_set_image_ok+0x14>
        return BOOT_EFLASH;
    24aa:	2001      	movs	r0, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    24ac:	b005      	add	sp, #20
    24ae:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    24b2:	a902      	add	r1, sp, #8
    24b4:	9801      	ldr	r0, [sp, #4]
    24b6:	f000 facb 	bl	2a50 <boot_read_swap_state>
    if (rc != 0) {
    24ba:	2800      	cmp	r0, #0
    24bc:	d1f5      	bne.n	24aa <swap_set_image_ok+0xc>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    24be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    24c2:	2b03      	cmp	r3, #3
    24c4:	d1f2      	bne.n	24ac <swap_set_image_ok+0xe>
        rc = boot_write_image_ok(fap);
    24c6:	9801      	ldr	r0, [sp, #4]
    24c8:	f000 fb7c 	bl	2bc4 <boot_write_image_ok>
    24cc:	e7ee      	b.n	24ac <swap_set_image_ok+0xe>

000024ce <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    24ce:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    24d0:	2000      	movs	r0, #0
{
    24d2:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    24d4:	f000 fd02 	bl	2edc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    24d8:	a901      	add	r1, sp, #4
    24da:	b2c0      	uxtb	r0, r0
    24dc:	f7ff fa86 	bl	19ec <flash_area_open>
    if (rc != 0) {
    24e0:	4601      	mov	r1, r0
    24e2:	b948      	cbnz	r0, 24f8 <boot_read_image_header+0x2a>
        rc = BOOT_EFLASH;
        goto done;
    }

    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    24e4:	2320      	movs	r3, #32
    24e6:	4622      	mov	r2, r4
    24e8:	9801      	ldr	r0, [sp, #4]
    24ea:	f7ff fad9 	bl	1aa0 <flash_area_read>
    if (rc != 0) {
    24ee:	3000      	adds	r0, #0
    24f0:	bf18      	it	ne
    24f2:	2001      	movne	r0, #1
    rc = 0;

done:
    flash_area_close(fap);
    return rc;
}
    24f4:	b002      	add	sp, #8
    24f6:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    24f8:	2001      	movs	r0, #1
    return rc;
    24fa:	e7fb      	b.n	24f4 <boot_read_image_header+0x26>

000024fc <swap_read_status_bytes>:
 * operation.
 */
int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
    24fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2500:	4680      	mov	r8, r0
    2502:	468b      	mov	fp, r1
    2504:	4616      	mov	r6, r2
    int found_idx;
    int invalid;
    int rc;
    int i;

    off = boot_status_off(fap);
    2506:	f000 fa8c 	bl	2a22 <boot_status_off>
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    250a:	4641      	mov	r1, r8
    off = boot_status_off(fap);
    250c:	4682      	mov	sl, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    250e:	2000      	movs	r0, #0
    2510:	f000 fa7c 	bl	2a0c <boot_status_entries>
    if (max_entries < 0) {
    2514:	f1b0 0900 	subs.w	r9, r0, #0
    2518:	db36      	blt.n	2588 <swap_read_status_bytes+0x8c>
    }

    found = 0;
    found_idx = 0;
    invalid = 0;
    for (i = 0; i < max_entries; i++) {
    251a:	2700      	movs	r7, #0
    found_idx = 0;
    251c:	463c      	mov	r4, r7
    found = 0;
    251e:	463d      	mov	r5, r7
    for (i = 0; i < max_entries; i++) {
    2520:	454f      	cmp	r7, r9
    2522:	d112      	bne.n	254a <swap_read_status_bytes+0x4e>
         */
        assert(0);
#endif
    }

    if (found) {
    2524:	b16d      	cbz	r5, 2542 <swap_read_status_bytes+0x46>
        if (!found_idx) {
    2526:	2c00      	cmp	r4, #0
    2528:	bf08      	it	eq
    252a:	463c      	moveq	r4, r7
            found_idx = i;
        }
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    252c:	2303      	movs	r3, #3
    252e:	fb94 f3f3 	sdiv	r3, r4, r3
    2532:	1c5a      	adds	r2, r3, #1
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    2534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2538:	1ae3      	subs	r3, r4, r3
    253a:	3301      	adds	r3, #1
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    253c:	6032      	str	r2, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    253e:	7133      	strb	r3, [r6, #4]
    }

    return 0;
    2540:	2500      	movs	r5, #0
}
    2542:	4628      	mov	r0, r5
    2544:	b003      	add	sp, #12
    2546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    254a:	f8db 1068 	ldr.w	r1, [fp, #104]	; 0x68
    254e:	2301      	movs	r3, #1
    2550:	f10d 0207 	add.w	r2, sp, #7
    2554:	fb01 a107 	mla	r1, r1, r7, sl
    2558:	4640      	mov	r0, r8
    255a:	f7ff fadf 	bl	1b1c <flash_area_read_is_empty>
        if (rc < 0) {
    255e:	2800      	cmp	r0, #0
    2560:	db14      	blt.n	258c <swap_read_status_bytes+0x90>
        if (rc == 1) {
    2562:	2801      	cmp	r0, #1
    2564:	d105      	bne.n	2572 <swap_read_status_bytes+0x76>
            if (found && !found_idx) {
    2566:	b115      	cbz	r5, 256e <swap_read_status_bytes+0x72>
    2568:	2c00      	cmp	r4, #0
    256a:	bf08      	it	eq
    256c:	463c      	moveq	r4, r7
    for (i = 0; i < max_entries; i++) {
    256e:	3701      	adds	r7, #1
    2570:	e7d6      	b.n	2520 <swap_read_status_bytes+0x24>
        } else if (!found) {
    2572:	b13d      	cbz	r5, 2584 <swap_read_status_bytes+0x88>
        } else if (found_idx) {
    2574:	2c00      	cmp	r4, #0
    2576:	d0fa      	beq.n	256e <swap_read_status_bytes+0x72>
        assert(0);
    2578:	2300      	movs	r3, #0
    257a:	461a      	mov	r2, r3
    257c:	4619      	mov	r1, r3
    257e:	4618      	mov	r0, r3
    2580:	f7fe fe90 	bl	12a4 <__assert_func>
            found = 1;
    2584:	2501      	movs	r5, #1
    2586:	e7f2      	b.n	256e <swap_read_status_bytes+0x72>
        return BOOT_EBADARGS;
    2588:	2507      	movs	r5, #7
    258a:	e7da      	b.n	2542 <swap_read_status_bytes+0x46>
            return BOOT_EFLASH;
    258c:	2501      	movs	r5, #1
    258e:	e7d8      	b.n	2542 <swap_read_status_bytes+0x46>

00002590 <boot_status_internal_off>:

uint32_t
boot_status_internal_off(const struct boot_status *bs, int elem_sz)
{
    2590:	b510      	push	{r4, lr}
    int idx_sz;

    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;

    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2592:	7902      	ldrb	r2, [r0, #4]
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2594:	6803      	ldr	r3, [r0, #0]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2596:	3a01      	subs	r2, #1
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    2598:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    259c:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    259e:	4351      	muls	r1, r2
}
    25a0:	fb04 1003 	mla	r0, r4, r3, r1
    25a4:	bd10      	pop	{r4, pc}

000025a6 <boot_slots_compatible>:
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    25a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return BOOT_IMG(state, slot).num_sectors;
    25aa:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    25ae:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    25b2:	d84b      	bhi.n	264c <boot_slots_compatible+0xa6>
    25b4:	f8d0 e054 	ldr.w	lr, [r0, #84]	; 0x54
    25b8:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    25bc:	d846      	bhi.n	264c <boot_slots_compatible+0xa6>
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    25be:	6d83      	ldr	r3, [r0, #88]	; 0x58
    25c0:	f8d3 a008 	ldr.w	sl, [r3, #8]
     * number of a slot's sectors are able to fit into another, which only
     * excludes cases where sector sizes are not a multiple of each other.
     */
    i = sz0 = primary_slot_sz = 0;
    j = sz1 = secondary_slot_sz = 0;
    smaller = 0;
    25c4:	2300      	movs	r3, #0
    j = sz1 = secondary_slot_sz = 0;
    25c6:	461c      	mov	r4, r3
    i = sz0 = primary_slot_sz = 0;
    25c8:	461d      	mov	r5, r3
    j = sz1 = secondary_slot_sz = 0;
    25ca:	4699      	mov	r9, r3
    i = sz0 = primary_slot_sz = 0;
    25cc:	461a      	mov	r2, r3
    j = sz1 = secondary_slot_sz = 0;
    25ce:	461e      	mov	r6, r3
    i = sz0 = primary_slot_sz = 0;
    25d0:	4619      	mov	r1, r3
    25d2:	f04f 0c0c 	mov.w	ip, #12
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    25d6:	4545      	cmp	r5, r8
    25d8:	d30b      	bcc.n	25f2 <boot_slots_compatible+0x4c>
    25da:	4574      	cmp	r4, lr
    25dc:	d309      	bcc.n	25f2 <boot_slots_compatible+0x4c>
            smaller = sz0 = sz1 = 0;
        }
#endif
    }

    if ((i != num_sectors_primary) ||
    25de:	4545      	cmp	r5, r8
    25e0:	d134      	bne.n	264c <boot_slots_compatible+0xa6>
    25e2:	4574      	cmp	r4, lr
    25e4:	d132      	bne.n	264c <boot_slots_compatible+0xa6>
        (j != num_sectors_secondary) ||
    25e6:	eba2 0309 	sub.w	r3, r2, r9
    25ea:	4258      	negs	r0, r3
    25ec:	4158      	adcs	r0, r3
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
        return 0;
    }

    return 1;
}
    25ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (sz0 == sz1) {
    25f2:	42b1      	cmp	r1, r6
    25f4:	d115      	bne.n	2622 <boot_slots_compatible+0x7c>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    25f6:	6a47      	ldr	r7, [r0, #36]	; 0x24
    25f8:	fb0c 7705 	mla	r7, ip, r5, r7
            i++;
    25fc:	3501      	adds	r5, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    25fe:	68bf      	ldr	r7, [r7, #8]
    2600:	4439      	add	r1, r7
    2602:	6d07      	ldr	r7, [r0, #80]	; 0x50
    2604:	fb0c 7704 	mla	r7, ip, r4, r7
            j++;
    2608:	3401      	adds	r4, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    260a:	68bf      	ldr	r7, [r7, #8]
    260c:	443e      	add	r6, r7
        if (sz0 == sz1) {
    260e:	42b1      	cmp	r1, r6
    2610:	d1e1      	bne.n	25d6 <boot_slots_compatible+0x30>
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2612:	4551      	cmp	r1, sl
            primary_slot_sz += sz0;
    2614:	440a      	add	r2, r1
            secondary_slot_sz += sz1;
    2616:	4489      	add	r9, r1
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2618:	d818      	bhi.n	264c <boot_slots_compatible+0xa6>
            smaller = sz0 = sz1 = 0;
    261a:	2300      	movs	r3, #0
    261c:	461e      	mov	r6, r3
    261e:	4619      	mov	r1, r3
    2620:	e7d9      	b.n	25d6 <boot_slots_compatible+0x30>
        } else if (sz0 < sz1) {
    2622:	d209      	bcs.n	2638 <boot_slots_compatible+0x92>
    2624:	6a47      	ldr	r7, [r0, #36]	; 0x24
    2626:	fb0c 7705 	mla	r7, ip, r5, r7
            if (smaller == 2) {
    262a:	2b02      	cmp	r3, #2
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    262c:	68bf      	ldr	r7, [r7, #8]
    262e:	4439      	add	r1, r7
            if (smaller == 2) {
    2630:	d00c      	beq.n	264c <boot_slots_compatible+0xa6>
            i++;
    2632:	3501      	adds	r5, #1
            smaller = 1;
    2634:	2301      	movs	r3, #1
    2636:	e7ea      	b.n	260e <boot_slots_compatible+0x68>
    2638:	6d07      	ldr	r7, [r0, #80]	; 0x50
    263a:	fb0c 7704 	mla	r7, ip, r4, r7
            if (smaller == 1) {
    263e:	2b01      	cmp	r3, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2640:	68bf      	ldr	r7, [r7, #8]
    2642:	443e      	add	r6, r7
            if (smaller == 1) {
    2644:	d002      	beq.n	264c <boot_slots_compatible+0xa6>
            j++;
    2646:	3401      	adds	r4, #1
            smaller = 2;
    2648:	2302      	movs	r3, #2
    264a:	e7e0      	b.n	260e <boot_slots_compatible+0x68>
        return 0;
    264c:	2000      	movs	r0, #0
    264e:	e7ce      	b.n	25ee <boot_slots_compatible+0x48>

00002650 <swap_status_source>:
 * @return      A BOOT_STATUS_SOURCE_[...] code indicating where status should
 *              be read from.
 */
int
swap_status_source(struct boot_loader_state *state)
{
    2650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2654:	b085      	sub	sp, #20
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2656:	a902      	add	r1, sp, #8
    2658:	2001      	movs	r0, #1
    265a:	f000 fa5b 	bl	2b14 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);
    265e:	b128      	cbz	r0, 266c <swap_status_source+0x1c>
    2660:	2300      	movs	r3, #0
    2662:	461a      	mov	r2, r3
    2664:	4619      	mov	r1, r3
    2666:	4618      	mov	r0, r3
    2668:	f7fe fe1c 	bl	12a4 <__assert_func>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    266c:	4669      	mov	r1, sp
    266e:	2003      	movs	r0, #3
    2670:	f000 fa50 	bl	2b14 <boot_read_swap_state_by_id>
    assert(rc == 0);
    2674:	4605      	mov	r5, r0
    2676:	2800      	cmp	r0, #0
    2678:	d1f2      	bne.n	2660 <swap_status_source+0x10>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);

    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
        table = &boot_status_tables[i];

        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    267a:	4e13      	ldr	r6, [pc, #76]	; (26c8 <swap_status_source+0x78>)
    267c:	4604      	mov	r4, r0
    267e:	4637      	mov	r7, r6
    2680:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2684:	f816 0024 	ldrb.w	r0, [r6, r4, lsl #2]
    2688:	ea4f 0884 	mov.w	r8, r4, lsl #2
    268c:	f000 f9aa 	bl	29e4 <boot_magic_compatible_check>
    2690:	b1b0      	cbz	r0, 26c0 <swap_status_source+0x70>
    2692:	eb06 0908 	add.w	r9, r6, r8
                          state_primary_slot.magic) &&
            boot_magic_compatible_check(table->bst_magic_scratch,
    2696:	f89d 1000 	ldrb.w	r1, [sp]
    269a:	f899 0001 	ldrb.w	r0, [r9, #1]
    269e:	f000 f9a1 	bl	29e4 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    26a2:	b168      	cbz	r0, 26c0 <swap_status_source+0x70>
                          state_scratch.magic) &&
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    26a4:	f899 3002 	ldrb.w	r3, [r9, #2]
                          state_scratch.magic) &&
    26a8:	2b04      	cmp	r3, #4
    26aa:	d003      	beq.n	26b4 <swap_status_source+0x64>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    26ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
    26b0:	429a      	cmp	r2, r3
    26b2:	d105      	bne.n	26c0 <swap_status_source+0x70>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
        {
            source = table->bst_status_source;
    26b4:	4447      	add	r7, r8
            BOOT_LOG_INF("Boot source: %s",
                         source == BOOT_STATUS_SOURCE_NONE ? "none" :
                         source == BOOT_STATUS_SOURCE_SCRATCH ? "scratch" :
                         source == BOOT_STATUS_SOURCE_PRIMARY_SLOT ?
                                   "primary slot" : "BUG; can't happen");
            return source;
    26b6:	78fd      	ldrb	r5, [r7, #3]
        }
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    26b8:	4628      	mov	r0, r5
    26ba:	b005      	add	sp, #20
    26bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    26c0:	3401      	adds	r4, #1
    26c2:	2c04      	cmp	r4, #4
    26c4:	d1dc      	bne.n	2680 <swap_status_source+0x30>
    26c6:	e7f7      	b.n	26b8 <swap_status_source+0x68>
    26c8:	00003ed4 	.word	0x00003ed4

000026cc <swap_run>:
}

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    26cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    26d0:	2300      	movs	r3, #0
{
    26d2:	4605      	mov	r5, r0
    26d4:	200c      	movs	r0, #12
    26d6:	460c      	mov	r4, r1
    26d8:	b08b      	sub	sp, #44	; 0x2c
    primary_slot_size = 0;
    26da:	4619      	mov	r1, r3
    last_sector_idx = 0;
    26dc:	461e      	mov	r6, r3
    26de:	4684      	mov	ip, r0
     * find what is the last sector in the primary slot that needs swapping.
     * Since we already know that both slots are compatible, the secondary
     * slot's last sector is not really required after this check is finished.
     */
    while (1) {
        if ((primary_slot_size < copy_size) ||
    26e0:	4291      	cmp	r1, r2
    26e2:	d302      	bcc.n	26ea <swap_run+0x1e>
    26e4:	4299      	cmp	r1, r3
    26e6:	f080 8144 	bcs.w	2972 <swap_run+0x2a6>
    26ea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    26ec:	fb00 7706 	mla	r7, r0, r6, r7
            (primary_slot_size < secondary_slot_size)) {
           primary_slot_size += boot_img_sector_size(state,
                                                     BOOT_PRIMARY_SLOT,
                                                     last_sector_idx);
        }
        if ((secondary_slot_size < copy_size) ||
    26f0:	4293      	cmp	r3, r2
           primary_slot_size += boot_img_sector_size(state,
    26f2:	68bf      	ldr	r7, [r7, #8]
    26f4:	4439      	add	r1, r7
        if ((secondary_slot_size < copy_size) ||
    26f6:	d302      	bcc.n	26fe <swap_run+0x32>
    26f8:	428b      	cmp	r3, r1
    26fa:	f080 8138 	bcs.w	296e <swap_run+0x2a2>
    26fe:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    2700:	fb0c 7706 	mla	r7, ip, r6, r7
            (secondary_slot_size < primary_slot_size)) {
           secondary_slot_size += boot_img_sector_size(state,
                                                       BOOT_SECONDARY_SLOT,
                                                       last_idx_secondary_slot);
        }
        if (primary_slot_size >= copy_size &&
    2704:	428a      	cmp	r2, r1
           secondary_slot_size += boot_img_sector_size(state,
    2706:	68bf      	ldr	r7, [r7, #8]
    2708:	443b      	add	r3, r7
        if (primary_slot_size >= copy_size &&
    270a:	d803      	bhi.n	2714 <swap_run+0x48>
    270c:	429a      	cmp	r2, r3
    270e:	d801      	bhi.n	2714 <swap_run+0x48>
                secondary_slot_size >= copy_size &&
    2710:	4299      	cmp	r1, r3
    2712:	d001      	beq.n	2718 <swap_run+0x4c>
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    2714:	3601      	adds	r6, #1
        if ((primary_slot_size < copy_size) ||
    2716:	e7e3      	b.n	26e0 <swap_run+0x14>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    2718:	f04f 0b00 	mov.w	fp, #0
    271c:	f04f 0a0c 	mov.w	sl, #12
    2720:	6dab      	ldr	r3, [r5, #88]	; 0x58
    2722:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2724:	6899      	ldr	r1, [r3, #8]
    sz = 0;
    2726:	f04f 0900 	mov.w	r9, #0
    272a:	fb0a 2306 	mla	r3, sl, r6, r2
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    272e:	689b      	ldr	r3, [r3, #8]
    2730:	444b      	add	r3, r9
        if (new_sz > scratch_sz) {
    2732:	4299      	cmp	r1, r3
    2734:	d303      	bcc.n	273e <swap_run+0x72>
    for (i = last_sector_idx; i >= 0; i--) {
    2736:	3e01      	subs	r6, #1
    2738:	1c70      	adds	r0, r6, #1
    273a:	4699      	mov	r9, r3
    273c:	d1f5      	bne.n	272a <swap_run+0x5e>
    while (last_sector_idx >= 0) {
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    273e:	6823      	ldr	r3, [r4, #0]
    2740:	3b01      	subs	r3, #1
    2742:	455b      	cmp	r3, fp
    2744:	f200 810b 	bhi.w	295e <swap_run+0x292>
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2748:	fb06 a30a 	mla	r3, r6, sl, sl
    274c:	4413      	add	r3, r2
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    274e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    2750:	685f      	ldr	r7, [r3, #4]
    2752:	6853      	ldr	r3, [r2, #4]
    2754:	eba7 0803 	sub.w	r8, r7, r3
    2758:	f000 f953 	bl	2a02 <boot_trailer_sz>
    275c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    275e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2760:	3b01      	subs	r3, #1
    2762:	fb0a 1303 	mla	r3, sl, r3, r1
    2766:	6849      	ldr	r1, [r1, #4]
    2768:	685b      	ldr	r3, [r3, #4]
    if ((img_off + sz) >
    276a:	eb08 0209 	add.w	r2, r8, r9
    276e:	1a5b      	subs	r3, r3, r1
    2770:	429a      	cmp	r2, r3
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    2772:	6823      	ldr	r3, [r4, #0]
        copy_sz -= trailer_sz;
    2774:	bf8c      	ite	hi
    2776:	eba9 0700 	subhi.w	r7, r9, r0
    if ((img_off + sz) >
    277a:	464f      	movls	r7, r9
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    277c:	2b01      	cmp	r3, #1
    277e:	d10f      	bne.n	27a0 <swap_run+0xd4>
    2780:	ebb7 0309 	subs.w	r3, r7, r9
    2784:	bf18      	it	ne
    2786:	2301      	movne	r3, #1
    2788:	71a3      	strb	r3, [r4, #6]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    278a:	a905      	add	r1, sp, #20
    278c:	2001      	movs	r0, #1
    278e:	f7ff f92d 	bl	19ec <flash_area_open>
    assert (rc == 0);
    2792:	b138      	cbz	r0, 27a4 <swap_run+0xd8>
    2794:	2300      	movs	r3, #0
    2796:	461a      	mov	r2, r3
    2798:	4619      	mov	r1, r3
    279a:	4618      	mov	r0, r3
    279c:	f7fe fd82 	bl	12a4 <__assert_func>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    27a0:	2300      	movs	r3, #0
    27a2:	e7f1      	b.n	2788 <swap_run+0xbc>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    27a4:	a906      	add	r1, sp, #24
    27a6:	2002      	movs	r0, #2
    27a8:	f7ff f920 	bl	19ec <flash_area_open>
    assert (rc == 0);
    27ac:	2800      	cmp	r0, #0
    27ae:	d1f1      	bne.n	2794 <swap_run+0xc8>
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    27b0:	a907      	add	r1, sp, #28
    27b2:	2003      	movs	r0, #3
    27b4:	f7ff f91a 	bl	19ec <flash_area_open>
    assert (rc == 0);
    27b8:	4601      	mov	r1, r0
    27ba:	2800      	cmp	r0, #0
    27bc:	d1ea      	bne.n	2794 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_0) {
    27be:	7923      	ldrb	r3, [r4, #4]
    27c0:	2b01      	cmp	r3, #1
    27c2:	d138      	bne.n	2836 <swap_run+0x16a>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    27c4:	9807      	ldr	r0, [sp, #28]
    27c6:	6882      	ldr	r2, [r0, #8]
    27c8:	f7ff fc8a 	bl	20e0 <boot_erase_region>
        assert(rc == 0);
    27cc:	2800      	cmp	r0, #0
    27ce:	d1e1      	bne.n	2794 <swap_run+0xc8>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    27d0:	6823      	ldr	r3, [r4, #0]
    27d2:	2b01      	cmp	r3, #1
    27d4:	d11c      	bne.n	2810 <swap_run+0x144>
            rc = swap_status_init(state, fap_scratch, bs);
    27d6:	4622      	mov	r2, r4
    27d8:	9907      	ldr	r1, [sp, #28]
    27da:	4628      	mov	r0, r5
    27dc:	f7ff fde7 	bl	23ae <swap_status_init>
            assert(rc == 0);
    27e0:	2800      	cmp	r0, #0
    27e2:	d1d7      	bne.n	2794 <swap_run+0xc8>
            if (!bs->use_scratch) {
    27e4:	79a3      	ldrb	r3, [r4, #6]
    27e6:	b99b      	cbnz	r3, 2810 <swap_run+0x144>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    27e8:	9905      	ldr	r1, [sp, #20]
    27ea:	4628      	mov	r0, r5
    27ec:	f7ff fda2 	bl	2334 <swap_erase_trailer_sectors>
                assert(rc == 0);
    27f0:	2800      	cmp	r0, #0
    27f2:	d1cf      	bne.n	2794 <swap_run+0xc8>
                rc = swap_status_init(state, fap_primary_slot, bs);
    27f4:	4622      	mov	r2, r4
    27f6:	9905      	ldr	r1, [sp, #20]
    27f8:	4628      	mov	r0, r5
    27fa:	f7ff fdd8 	bl	23ae <swap_status_init>
                assert(rc == 0);
    27fe:	2800      	cmp	r0, #0
    2800:	d1c8      	bne.n	2794 <swap_run+0xc8>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    2802:	9807      	ldr	r0, [sp, #28]
    2804:	2100      	movs	r1, #0
    2806:	6882      	ldr	r2, [r0, #8]
    2808:	f7ff fc6a 	bl	20e0 <boot_erase_region>
                assert(rc == 0);
    280c:	2800      	cmp	r0, #0
    280e:	d1c1      	bne.n	2794 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    2810:	2300      	movs	r3, #0
    2812:	9300      	str	r3, [sp, #0]
    2814:	9701      	str	r7, [sp, #4]
    2816:	4643      	mov	r3, r8
    2818:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    281c:	4628      	mov	r0, r5
    281e:	f7ff fc61 	bl	20e4 <boot_copy_region>
        assert(rc == 0);
    2822:	2800      	cmp	r0, #0
    2824:	d1b6      	bne.n	2794 <swap_run+0xc8>
        rc = boot_write_status(state, bs);
    2826:	4621      	mov	r1, r4
    2828:	4628      	mov	r0, r5
    282a:	f7ff fc27 	bl	207c <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    282e:	2302      	movs	r3, #2
    2830:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2832:	2800      	cmp	r0, #0
    2834:	d1ae      	bne.n	2794 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_1) {
    2836:	7923      	ldrb	r3, [r4, #4]
    2838:	2b02      	cmp	r3, #2
    283a:	d123      	bne.n	2884 <swap_run+0x1b8>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    283c:	464a      	mov	r2, r9
    283e:	4641      	mov	r1, r8
    2840:	9806      	ldr	r0, [sp, #24]
    2842:	f7ff fc4d 	bl	20e0 <boot_erase_region>
        assert(rc == 0);
    2846:	2800      	cmp	r0, #0
    2848:	d1a4      	bne.n	2794 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    284a:	e9cd 8700 	strd	r8, r7, [sp]
    284e:	4643      	mov	r3, r8
    2850:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    2854:	4628      	mov	r0, r5
    2856:	f7ff fc45 	bl	20e4 <boot_copy_region>
        assert(rc == 0);
    285a:	2800      	cmp	r0, #0
    285c:	d19a      	bne.n	2794 <swap_run+0xc8>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    285e:	6823      	ldr	r3, [r4, #0]
    2860:	2b01      	cmp	r3, #1
    2862:	d107      	bne.n	2874 <swap_run+0x1a8>
    2864:	79a3      	ldrb	r3, [r4, #6]
    2866:	b92b      	cbnz	r3, 2874 <swap_run+0x1a8>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    2868:	9906      	ldr	r1, [sp, #24]
    286a:	4628      	mov	r0, r5
    286c:	f7ff fd62 	bl	2334 <swap_erase_trailer_sectors>
            assert(rc == 0);
    2870:	2800      	cmp	r0, #0
    2872:	d18f      	bne.n	2794 <swap_run+0xc8>
        rc = boot_write_status(state, bs);
    2874:	4621      	mov	r1, r4
    2876:	4628      	mov	r0, r5
    2878:	f7ff fc00 	bl	207c <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    287c:	2303      	movs	r3, #3
    287e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2880:	2800      	cmp	r0, #0
    2882:	d187      	bne.n	2794 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_2) {
    2884:	7923      	ldrb	r3, [r4, #4]
    2886:	9303      	str	r3, [sp, #12]
    2888:	2b03      	cmp	r3, #3
    288a:	d168      	bne.n	295e <swap_run+0x292>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    288c:	464a      	mov	r2, r9
    288e:	4641      	mov	r1, r8
    2890:	9805      	ldr	r0, [sp, #20]
    2892:	f7ff fc25 	bl	20e0 <boot_erase_region>
        assert(rc == 0);
    2896:	4603      	mov	r3, r0
    2898:	2800      	cmp	r0, #0
    289a:	f47f af7b 	bne.w	2794 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    289e:	e9cd 8700 	strd	r8, r7, [sp]
    28a2:	9a05      	ldr	r2, [sp, #20]
    28a4:	9907      	ldr	r1, [sp, #28]
    28a6:	4628      	mov	r0, r5
    28a8:	f7ff fc1c 	bl	20e4 <boot_copy_region>
        assert(rc == 0);
    28ac:	2800      	cmp	r0, #0
    28ae:	f47f af71 	bne.w	2794 <swap_run+0xc8>
        if (bs->use_scratch) {
    28b2:	79a3      	ldrb	r3, [r4, #6]
    28b4:	2b00      	cmp	r3, #0
    28b6:	d039      	beq.n	292c <swap_run+0x260>
            scratch_trailer_off = boot_status_off(fap_scratch);
    28b8:	9807      	ldr	r0, [sp, #28]
    28ba:	f000 f8b2 	bl	2a22 <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    28be:	6eab      	ldr	r3, [r5, #104]	; 0x68
    28c0:	9a05      	ldr	r2, [sp, #20]
    28c2:	9907      	ldr	r1, [sp, #28]
    28c4:	005b      	lsls	r3, r3, #1
    28c6:	4447      	add	r7, r8
    28c8:	9301      	str	r3, [sp, #4]
    28ca:	9700      	str	r7, [sp, #0]
    28cc:	4603      	mov	r3, r0
    28ce:	4628      	mov	r0, r5
    28d0:	f7ff fc08 	bl	20e4 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    28d4:	2800      	cmp	r0, #0
    28d6:	f47f af5d 	bne.w	2794 <swap_run+0xc8>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    28da:	a908      	add	r1, sp, #32
    28dc:	9803      	ldr	r0, [sp, #12]
    28de:	f000 f919 	bl	2b14 <boot_read_swap_state_by_id>
            assert(rc == 0);
    28e2:	2800      	cmp	r0, #0
    28e4:	f47f af56 	bne.w	2794 <swap_run+0xc8>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    28e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    28ec:	2b01      	cmp	r3, #1
    28ee:	d105      	bne.n	28fc <swap_run+0x230>
                rc = boot_write_image_ok(fap_primary_slot);
    28f0:	9805      	ldr	r0, [sp, #20]
    28f2:	f000 f967 	bl	2bc4 <boot_write_image_ok>
                assert(rc == 0);
    28f6:	2800      	cmp	r0, #0
    28f8:	f47f af4c 	bne.w	2794 <swap_run+0xc8>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    28fc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    2900:	2901      	cmp	r1, #1
    2902:	d006      	beq.n	2912 <swap_run+0x246>
                rc = boot_write_swap_info(fap_primary_slot,
    2904:	2200      	movs	r2, #0
    2906:	9805      	ldr	r0, [sp, #20]
    2908:	f000 f968 	bl	2bdc <boot_write_swap_info>
                assert(rc == 0);
    290c:	2800      	cmp	r0, #0
    290e:	f47f af41 	bne.w	2794 <swap_run+0xc8>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    2912:	68a1      	ldr	r1, [r4, #8]
    2914:	9805      	ldr	r0, [sp, #20]
    2916:	f000 f979 	bl	2c0c <boot_write_swap_size>
            assert(rc == 0);
    291a:	2800      	cmp	r0, #0
    291c:	f47f af3a 	bne.w	2794 <swap_run+0xc8>
            rc = boot_write_magic(fap_primary_slot);
    2920:	9805      	ldr	r0, [sp, #20]
    2922:	f000 f935 	bl	2b90 <boot_write_magic>
            assert(rc == 0);
    2926:	2800      	cmp	r0, #0
    2928:	f47f af34 	bne.w	2794 <swap_run+0xc8>
        bs->use_scratch = 0;
    292c:	f04f 0300 	mov.w	r3, #0
        erase_scratch = bs->use_scratch;
    2930:	79a7      	ldrb	r7, [r4, #6]
        bs->use_scratch = 0;
    2932:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    2934:	4621      	mov	r1, r4
    2936:	4628      	mov	r0, r5
    2938:	f7ff fba0 	bl	207c <boot_write_status>
        bs->idx++;
    293c:	6823      	ldr	r3, [r4, #0]
    293e:	3301      	adds	r3, #1
    2940:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    2942:	2301      	movs	r3, #1
    2944:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2946:	4601      	mov	r1, r0
    2948:	2800      	cmp	r0, #0
    294a:	f47f af23 	bne.w	2794 <swap_run+0xc8>
        if (erase_scratch) {
    294e:	b137      	cbz	r7, 295e <swap_run+0x292>
            rc = boot_erase_region(fap_scratch, 0, sz);
    2950:	464a      	mov	r2, r9
    2952:	9807      	ldr	r0, [sp, #28]
    2954:	f7ff fbc4 	bl	20e0 <boot_erase_region>
            assert(rc == 0);
    2958:	2800      	cmp	r0, #0
    295a:	f47f af1b 	bne.w	2794 <swap_run+0xc8>
    while (last_sector_idx >= 0) {
    295e:	1c73      	adds	r3, r6, #1
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
        swap_idx++;
    2960:	f10b 0b01 	add.w	fp, fp, #1
    while (last_sector_idx >= 0) {
    2964:	f47f aedc 	bne.w	2720 <swap_run+0x54>
    }

}
    2968:	b00b      	add	sp, #44	; 0x2c
    296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (primary_slot_size >= copy_size &&
    296e:	428a      	cmp	r2, r1
    2970:	e6cd      	b.n	270e <swap_run+0x42>
        if ((secondary_slot_size < copy_size) ||
    2972:	4293      	cmp	r3, r2
    2974:	d205      	bcs.n	2982 <swap_run+0x2b6>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2976:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    2978:	fb00 7706 	mla	r7, r0, r6, r7
           secondary_slot_size += boot_img_sector_size(state,
    297c:	68bf      	ldr	r7, [r7, #8]
    297e:	443b      	add	r3, r7
    2980:	e6c4      	b.n	270c <swap_run+0x40>
        if ((secondary_slot_size < copy_size) ||
    2982:	4299      	cmp	r1, r3
    2984:	d8f7      	bhi.n	2976 <swap_run+0x2aa>
    2986:	e6c3      	b.n	2710 <swap_run+0x44>

00002988 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    2988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    298c:	4606      	mov	r6, r0
    298e:	460f      	mov	r7, r1
    2990:	4691      	mov	r9, r2
    2992:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    2994:	f7ff f8ba 	bl	1b0c <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    2998:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    299a:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    299c:	d81f      	bhi.n	29de <boot_write_trailer+0x56>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    299e:	4630      	mov	r0, r6
    29a0:	f7ff f8b7 	bl	1b12 <flash_area_erased_val>
    29a4:	42ac      	cmp	r4, r5
    29a6:	bf38      	it	cc
    29a8:	462c      	movcc	r4, r5
    29aa:	4680      	mov	r8, r0
    29ac:	b2e4      	uxtb	r4, r4
    if (align < inlen) {
        align = inlen;
    }
    memcpy(buf, inbuf, inlen);
    29ae:	462a      	mov	r2, r5
    29b0:	4649      	mov	r1, r9
    29b2:	4668      	mov	r0, sp
    29b4:	f7fe ff42 	bl	183c <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    29b8:	1b62      	subs	r2, r4, r5
    29ba:	fa5f f188 	uxtb.w	r1, r8
    29be:	eb0d 0005 	add.w	r0, sp, r5
    29c2:	f7fe ff48 	bl	1856 <memset>

    rc = flash_area_write(fap, off, buf, align);
    29c6:	4623      	mov	r3, r4
    29c8:	466a      	mov	r2, sp
    29ca:	4639      	mov	r1, r7
    29cc:	4630      	mov	r0, r6
    29ce:	f7ff f879 	bl	1ac4 <flash_area_write>
    if (rc != 0) {
    29d2:	3000      	adds	r0, #0
    29d4:	bf18      	it	ne
    29d6:	2001      	movne	r0, #1
        return BOOT_EFLASH;
    }

    return 0;
}
    29d8:	b003      	add	sp, #12
    29da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    29de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29e2:	e7f9      	b.n	29d8 <boot_write_trailer+0x50>

000029e4 <boot_magic_compatible_check>:
    switch (tbl_val) {
    29e4:	2804      	cmp	r0, #4
    29e6:	d00a      	beq.n	29fe <boot_magic_compatible_check+0x1a>
    29e8:	2805      	cmp	r0, #5
    29ea:	d104      	bne.n	29f6 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    29ec:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    29f0:	bf18      	it	ne
    29f2:	2001      	movne	r0, #1
    29f4:	4770      	bx	lr
        return tbl_val == val;
    29f6:	1a43      	subs	r3, r0, r1
    29f8:	4258      	negs	r0, r3
    29fa:	4158      	adcs	r0, r3
    29fc:	4770      	bx	lr
        return 1;
    29fe:	2001      	movs	r0, #1
}
    2a00:	4770      	bx	lr

00002a02 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2a02:	f44f 73c0 	mov.w	r3, #384	; 0x180
    2a06:	4358      	muls	r0, r3
}
    2a08:	3030      	adds	r0, #48	; 0x30
    2a0a:	4770      	bx	lr

00002a0c <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    2a0c:	7808      	ldrb	r0, [r1, #0]
    2a0e:	2803      	cmp	r0, #3
    2a10:	d006      	beq.n	2a20 <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    2a12:	3801      	subs	r0, #1
    return -1;
    2a14:	2801      	cmp	r0, #1
    2a16:	bf94      	ite	ls
    2a18:	f44f 70c0 	movls.w	r0, #384	; 0x180
    2a1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
    2a20:	4770      	bx	lr

00002a22 <boot_status_off>:
{
    2a22:	b510      	push	{r4, lr}
    2a24:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    2a26:	f7ff f871 	bl	1b0c <flash_area_align>
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2a2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
    2a2e:	4358      	muls	r0, r3
    assert(off_from_end <= fap->fa_size);
    2a30:	68a3      	ldr	r3, [r4, #8]
           BOOT_MAX_ALIGN * 4                     +
    2a32:	3030      	adds	r0, #48	; 0x30
    assert(off_from_end <= fap->fa_size);
    2a34:	4283      	cmp	r3, r0
    2a36:	d205      	bcs.n	2a44 <boot_status_off+0x22>
    2a38:	2300      	movs	r3, #0
    2a3a:	461a      	mov	r2, r3
    2a3c:	4619      	mov	r1, r3
    2a3e:	4618      	mov	r0, r3
    2a40:	f7fe fc30 	bl	12a4 <__assert_func>
}
    2a44:	1a18      	subs	r0, r3, r0
    2a46:	bd10      	pop	{r4, pc}

00002a48 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    2a48:	6880      	ldr	r0, [r0, #8]
}
    2a4a:	3828      	subs	r0, #40	; 0x28
    2a4c:	4770      	bx	lr
	...

00002a50 <boot_read_swap_state>:
{
    2a50:	b530      	push	{r4, r5, lr}
    2a52:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    2a54:	6881      	ldr	r1, [r0, #8]
{
    2a56:	b087      	sub	sp, #28
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    2a58:	2310      	movs	r3, #16
    2a5a:	aa02      	add	r2, sp, #8
    2a5c:	3910      	subs	r1, #16
{
    2a5e:	4605      	mov	r5, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    2a60:	f7ff f85c 	bl	1b1c <flash_area_read_is_empty>
    if (rc < 0) {
    2a64:	2800      	cmp	r0, #0
    2a66:	db0d      	blt.n	2a84 <boot_read_swap_state+0x34>
    if (rc == 1) {
    2a68:	2801      	cmp	r0, #1
    2a6a:	d10d      	bne.n	2a88 <boot_read_swap_state+0x38>
        state->magic = BOOT_MAGIC_UNSET;
    2a6c:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    2a6e:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    2a70:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2a72:	2301      	movs	r3, #1
    2a74:	f10d 0207 	add.w	r2, sp, #7
    2a78:	3928      	subs	r1, #40	; 0x28
    2a7a:	4628      	mov	r0, r5
    2a7c:	f7ff f84e 	bl	1b1c <flash_area_read_is_empty>
    if (rc < 0) {
    2a80:	2800      	cmp	r0, #0
    2a82:	da0b      	bge.n	2a9c <boot_read_swap_state+0x4c>
        return BOOT_EFLASH;
    2a84:	2001      	movs	r0, #1
    2a86:	e034      	b.n	2af2 <boot_read_swap_state+0xa2>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2a88:	2210      	movs	r2, #16
    2a8a:	4921      	ldr	r1, [pc, #132]	; (2b10 <boot_read_swap_state+0xc0>)
    2a8c:	a802      	add	r0, sp, #8
    2a8e:	f7fe feb1 	bl	17f4 <memcmp>
    return BOOT_MAGIC_BAD;
    2a92:	2800      	cmp	r0, #0
    2a94:	bf0c      	ite	eq
    2a96:	2301      	moveq	r3, #1
    2a98:	2302      	movne	r3, #2
    2a9a:	e7e8      	b.n	2a6e <boot_read_swap_state+0x1e>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2a9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2aa0:	2801      	cmp	r0, #1
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2aa2:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2aa6:	ea4f 1313 	mov.w	r3, r3, lsr #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2aaa:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2aac:	7123      	strb	r3, [r4, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2aae:	d001      	beq.n	2ab4 <boot_read_swap_state+0x64>
    2ab0:	2a04      	cmp	r2, #4
    2ab2:	d903      	bls.n	2abc <boot_read_swap_state+0x6c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2ab4:	2301      	movs	r3, #1
    2ab6:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    2ab8:	2300      	movs	r3, #0
    2aba:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    2abc:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    2abe:	2301      	movs	r3, #1
    2ac0:	1ca2      	adds	r2, r4, #2
    2ac2:	3920      	subs	r1, #32
    2ac4:	4628      	mov	r0, r5
    2ac6:	f7ff f829 	bl	1b1c <flash_area_read_is_empty>
    if (rc < 0) {
    2aca:	2800      	cmp	r0, #0
    2acc:	dbda      	blt.n	2a84 <boot_read_swap_state+0x34>
    if (rc == 1) {
    2ace:	2801      	cmp	r0, #1
    2ad0:	d111      	bne.n	2af6 <boot_read_swap_state+0xa6>
        state->copy_done = BOOT_FLAG_UNSET;
    2ad2:	2303      	movs	r3, #3
        state->copy_done = boot_flag_decode(state->copy_done);
    2ad4:	70a3      	strb	r3, [r4, #2]
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    2ad6:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    2ad8:	2301      	movs	r3, #1
    2ada:	1ce2      	adds	r2, r4, #3
    2adc:	3918      	subs	r1, #24
    2ade:	4628      	mov	r0, r5
    2ae0:	f7ff f81c 	bl	1b1c <flash_area_read_is_empty>
    if (rc < 0) {
    2ae4:	2800      	cmp	r0, #0
    2ae6:	dbcd      	blt.n	2a84 <boot_read_swap_state+0x34>
    if (rc == 1) {
    2ae8:	2801      	cmp	r0, #1
    2aea:	d10a      	bne.n	2b02 <boot_read_swap_state+0xb2>
        state->image_ok = BOOT_FLAG_UNSET;
    2aec:	2303      	movs	r3, #3
        state->image_ok = boot_flag_decode(state->image_ok);
    2aee:	70e3      	strb	r3, [r4, #3]
    return 0;
    2af0:	2000      	movs	r0, #0
}
    2af2:	b007      	add	sp, #28
    2af4:	bd30      	pop	{r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    2af6:	78a3      	ldrb	r3, [r4, #2]
    return BOOT_FLAG_SET;
    2af8:	2b01      	cmp	r3, #1
    2afa:	bf14      	ite	ne
    2afc:	2302      	movne	r3, #2
    2afe:	2301      	moveq	r3, #1
    2b00:	e7e8      	b.n	2ad4 <boot_read_swap_state+0x84>
    if (flag != BOOT_FLAG_SET) {
    2b02:	78e3      	ldrb	r3, [r4, #3]
    return BOOT_FLAG_SET;
    2b04:	2b01      	cmp	r3, #1
    2b06:	bf14      	ite	ne
    2b08:	2302      	movne	r3, #2
    2b0a:	2301      	moveq	r3, #1
    2b0c:	e7ef      	b.n	2aee <boot_read_swap_state+0x9e>
    2b0e:	bf00      	nop
    2b10:	00003ee4 	.word	0x00003ee4

00002b14 <boot_read_swap_state_by_id>:
{
    2b14:	b513      	push	{r0, r1, r4, lr}
    2b16:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    2b18:	b2c0      	uxtb	r0, r0
    2b1a:	a901      	add	r1, sp, #4
    2b1c:	f7fe ff66 	bl	19ec <flash_area_open>
    if (rc != 0) {
    2b20:	b928      	cbnz	r0, 2b2e <boot_read_swap_state_by_id+0x1a>
    rc = boot_read_swap_state(fap, state);
    2b22:	4621      	mov	r1, r4
    2b24:	9801      	ldr	r0, [sp, #4]
    2b26:	f7ff ff93 	bl	2a50 <boot_read_swap_state>
}
    2b2a:	b002      	add	sp, #8
    2b2c:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    2b2e:	2001      	movs	r0, #1
    2b30:	e7fb      	b.n	2b2a <boot_read_swap_state_by_id+0x16>
	...

00002b34 <boot_read_swap_size>:
{
    2b34:	b570      	push	{r4, r5, r6, lr}
    2b36:	b086      	sub	sp, #24
    uint8_t areas[2] = {
    2b38:	f240 1303 	movw	r3, #259	; 0x103
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2b3c:	4e13      	ldr	r6, [pc, #76]	; (2b8c <boot_read_swap_size+0x58>)
    uint8_t areas[2] = {
    2b3e:	f8ad 3000 	strh.w	r3, [sp]
{
    2b42:	460d      	mov	r5, r1
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2b44:	2400      	movs	r4, #0
        rc = flash_area_open(areas[i], fap);
    2b46:	a901      	add	r1, sp, #4
    2b48:	f81d 0004 	ldrb.w	r0, [sp, r4]
    2b4c:	f7fe ff4e 	bl	19ec <flash_area_open>
        if (rc != 0) {
    2b50:	b980      	cbnz	r0, 2b74 <boot_read_swap_size+0x40>
        off = boot_magic_off(*fap);
    2b52:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2b54:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    2b56:	2310      	movs	r3, #16
    2b58:	aa02      	add	r2, sp, #8
    2b5a:	3910      	subs	r1, #16
    2b5c:	f7fe ffa0 	bl	1aa0 <flash_area_read>
        if (rc != 0) {
    2b60:	b940      	cbnz	r0, 2b74 <boot_read_swap_size+0x40>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2b62:	2210      	movs	r2, #16
    2b64:	4631      	mov	r1, r6
    2b66:	a802      	add	r0, sp, #8
    2b68:	f7fe fe44 	bl	17f4 <memcmp>
    2b6c:	b130      	cbz	r0, 2b7c <boot_read_swap_size+0x48>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2b6e:	b11c      	cbz	r4, 2b78 <boot_read_swap_size+0x44>
    return -1;
    2b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2b74:	b006      	add	sp, #24
    2b76:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2b78:	2401      	movs	r4, #1
    2b7a:	e7e4      	b.n	2b46 <boot_read_swap_size+0x12>
        off = boot_swap_size_off(fap);
    2b7c:	9801      	ldr	r0, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2b7e:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    2b80:	2304      	movs	r3, #4
    2b82:	462a      	mov	r2, r5
    2b84:	3930      	subs	r1, #48	; 0x30
    2b86:	f7fe ff8b 	bl	1aa0 <flash_area_read>
    2b8a:	e7f3      	b.n	2b74 <boot_read_swap_size+0x40>
    2b8c:	00003ee4 	.word	0x00003ee4

00002b90 <boot_write_magic>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    2b90:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2b92:	4a05      	ldr	r2, [pc, #20]	; (2ba8 <boot_write_magic+0x18>)
{
    2b94:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2b96:	3910      	subs	r1, #16
    2b98:	2310      	movs	r3, #16
    2b9a:	f7fe ff93 	bl	1ac4 <flash_area_write>
}
    2b9e:	3000      	adds	r0, #0
    2ba0:	bf18      	it	ne
    2ba2:	2001      	movne	r0, #1
    2ba4:	bd08      	pop	{r3, pc}
    2ba6:	bf00      	nop
    2ba8:	00003ee4 	.word	0x00003ee4

00002bac <boot_write_copy_done>:
    return boot_write_trailer(fap, off, buf, 1);
}

int
boot_write_copy_done(const struct flash_area *fap)
{
    2bac:	b507      	push	{r0, r1, r2, lr}
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    2bae:	6881      	ldr	r1, [r0, #8]
    const uint8_t buf[1] = { flag_val };
    2bb0:	aa02      	add	r2, sp, #8
    2bb2:	2301      	movs	r3, #1
    2bb4:	f802 3d04 	strb.w	r3, [r2, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2bb8:	3920      	subs	r1, #32
    2bba:	f7ff fee5 	bl	2988 <boot_write_trailer>
    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    2bbe:	b003      	add	sp, #12
    2bc0:	f85d fb04 	ldr.w	pc, [sp], #4

00002bc4 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    2bc4:	b507      	push	{r0, r1, r2, lr}
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    2bc6:	6881      	ldr	r1, [r0, #8]
    const uint8_t buf[1] = { flag_val };
    2bc8:	aa02      	add	r2, sp, #8
    2bca:	2301      	movs	r3, #1
    2bcc:	f802 3d04 	strb.w	r3, [r2, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2bd0:	3918      	subs	r1, #24
    2bd2:	f7ff fed9 	bl	2988 <boot_write_trailer>
    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    2bd6:	b003      	add	sp, #12
    2bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bdc <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2bdc:	2a0e      	cmp	r2, #14
{
    2bde:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2be0:	d905      	bls.n	2bee <boot_write_swap_info+0x12>
    2be2:	2300      	movs	r3, #0
    2be4:	461a      	mov	r2, r3
    2be6:	4619      	mov	r1, r3
    2be8:	4618      	mov	r0, r3
    2bea:	f7fe fb5b 	bl	12a4 <__assert_func>
    2bee:	290e      	cmp	r1, #14
    2bf0:	d8f7      	bhi.n	2be2 <boot_write_swap_info+0x6>
    2bf2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    2bf6:	aa02      	add	r2, sp, #8
    off = boot_swap_info_off(fap);
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2bf8:	2301      	movs	r3, #1
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2bfa:	f802 1d01 	strb.w	r1, [r2, #-1]!
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    2bfe:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2c00:	3928      	subs	r1, #40	; 0x28
    2c02:	f7ff fec1 	bl	2988 <boot_write_trailer>
}
    2c06:	b003      	add	sp, #12
    2c08:	f85d fb04 	ldr.w	pc, [sp], #4

00002c0c <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2c0c:	b507      	push	{r0, r1, r2, lr}
    2c0e:	aa02      	add	r2, sp, #8

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2c10:	2304      	movs	r3, #4
{
    2c12:	f842 1d04 	str.w	r1, [r2, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2c16:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2c18:	3930      	subs	r1, #48	; 0x30
    2c1a:	f7ff feb5 	bl	2988 <boot_write_trailer>
}
    2c1e:	b003      	add	sp, #12
    2c20:	f85d fb04 	ldr.w	pc, [sp], #4

00002c24 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    2c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2c28:	2001      	movs	r0, #1
    2c2a:	4669      	mov	r1, sp
    2c2c:	f7ff ff72 	bl	2b14 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    2c30:	bb60      	cbnz	r0, 2c8c <boot_swap_type_multi+0x68>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2c32:	a902      	add	r1, sp, #8
    2c34:	2002      	movs	r0, #2
    2c36:	f7ff ff6d 	bl	2b14 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    2c3a:	bb38      	cbnz	r0, 2c8c <boot_swap_type_multi+0x68>
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
    2c3c:	f89d 6000 	ldrb.w	r6, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    2c40:	f89d 7008 	ldrb.w	r7, [sp, #8]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2c44:	f89d 8003 	ldrb.w	r8, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2c48:	f89d 900b 	ldrb.w	r9, [sp, #11]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    2c4c:	f89d a002 	ldrb.w	sl, [sp, #2]
    2c50:	4d14      	ldr	r5, [pc, #80]	; (2ca4 <boot_swap_type_multi+0x80>)
    2c52:	4602      	mov	r2, r0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2c54:	4631      	mov	r1, r6
    2c56:	5ca8      	ldrb	r0, [r5, r2]
    2c58:	18ac      	adds	r4, r5, r2
    2c5a:	f7ff fec3 	bl	29e4 <boot_magic_compatible_check>
    2c5e:	b1c8      	cbz	r0, 2c94 <boot_swap_type_multi+0x70>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2c60:	4639      	mov	r1, r7
    2c62:	7860      	ldrb	r0, [r4, #1]
    2c64:	f7ff febe 	bl	29e4 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    2c68:	b1a0      	cbz	r0, 2c94 <boot_swap_type_multi+0x70>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2c6a:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    2c6c:	2b04      	cmp	r3, #4
    2c6e:	d001      	beq.n	2c74 <boot_swap_type_multi+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2c70:	4543      	cmp	r3, r8
    2c72:	d10f      	bne.n	2c94 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2c74:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2c76:	2b04      	cmp	r3, #4
    2c78:	d001      	beq.n	2c7e <boot_swap_type_multi+0x5a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2c7a:	454b      	cmp	r3, r9
    2c7c:	d10a      	bne.n	2c94 <boot_swap_type_multi+0x70>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2c7e:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2c80:	2b04      	cmp	r3, #4
    2c82:	d105      	bne.n	2c90 <boot_swap_type_multi+0x6c>
            BOOT_LOG_INF("Swap type: %s",
    2c84:	7960      	ldrb	r0, [r4, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2c86:	1e83      	subs	r3, r0, #2
    2c88:	2b02      	cmp	r3, #2
    2c8a:	d907      	bls.n	2c9c <boot_swap_type_multi+0x78>
        return BOOT_SWAP_TYPE_PANIC;
    2c8c:	20ff      	movs	r0, #255	; 0xff
    2c8e:	e005      	b.n	2c9c <boot_swap_type_multi+0x78>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2c90:	4553      	cmp	r3, sl
    2c92:	d0f7      	beq.n	2c84 <boot_swap_type_multi+0x60>
    2c94:	3206      	adds	r2, #6
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2c96:	2a12      	cmp	r2, #18
    2c98:	d1dc      	bne.n	2c54 <boot_swap_type_multi+0x30>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    2c9a:	2001      	movs	r0, #1
}
    2c9c:	b004      	add	sp, #16
    2c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ca2:	bf00      	nop
    2ca4:	00003ef4 	.word	0x00003ef4

00002ca8 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    2ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cac:	b0af      	sub	sp, #188	; 0xbc
    2cae:	e9dd 473a 	ldrd	r4, r7, [sp, #232]	; 0xe8
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    2cb2:	ad13      	add	r5, sp, #76	; 0x4c
    2cb4:	4628      	mov	r0, r5
    2cb6:	4692      	mov	sl, r2
    2cb8:	469b      	mov	fp, r3
    2cba:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
    2cbc:	f000 f916 	bl	2eec <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    2cc0:	2100      	movs	r1, #0
    2cc2:	4628      	mov	r0, r5
    2cc4:	f000 f916 	bl	2ef4 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    2cc8:	b134      	cbz	r4, 2cd8 <bootutil_img_validate+0x30>
    2cca:	2f00      	cmp	r7, #0
    2ccc:	dd04      	ble.n	2cd8 <bootutil_img_validate+0x30>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    2cce:	463a      	mov	r2, r7
    2cd0:	4621      	mov	r1, r4
    2cd2:	4628      	mov	r0, r5
    2cd4:	f000 f9f8 	bl	30c8 <mbedtls_sha256_update_ret>
    size += hdr->ih_protect_tlv_size;
    2cd8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    size = hdr_size = hdr->ih_hdr_size;
    2cdc:	f8ba 7008 	ldrh.w	r7, [sl, #8]
    2ce0:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
    2ce2:	f8da 300c 	ldr.w	r3, [sl, #12]
    for (off = 0; off < size; off += blk_sz) {
    2ce6:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
    2cea:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
    2cec:	4547      	cmp	r7, r8
    2cee:	d828      	bhi.n	2d42 <bootutil_img_validate+0x9a>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    2cf0:	a90b      	add	r1, sp, #44	; 0x2c
    2cf2:	4628      	mov	r0, r5
    2cf4:	f000 fa25 	bl	3142 <mbedtls_sha256_finish_ret>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        return rc;
    }

    if (out_hash) {
    2cf8:	b14e      	cbz	r6, 2d0e <bootutil_img_validate+0x66>
        memcpy(out_hash, hash, 32);
    2cfa:	aa0b      	add	r2, sp, #44	; 0x2c
    2cfc:	4613      	mov	r3, r2
    2cfe:	cb03      	ldmia	r3!, {r0, r1}
    2d00:	42ab      	cmp	r3, r5
    2d02:	6030      	str	r0, [r6, #0]
    2d04:	6071      	str	r1, [r6, #4]
    2d06:	461a      	mov	r2, r3
    2d08:	f106 0608 	add.w	r6, r6, #8
    2d0c:	d1f6      	bne.n	2cfc <bootutil_img_validate+0x54>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    2d0e:	2300      	movs	r3, #0
    2d10:	9300      	str	r3, [sp, #0]
    2d12:	465a      	mov	r2, fp
    2d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d18:	4651      	mov	r1, sl
    2d1a:	a805      	add	r0, sp, #20
    2d1c:	f000 f846 	bl	2dac <bootutil_tlv_iter_begin>
    if (rc) {
    2d20:	4604      	mov	r4, r0
    2d22:	b950      	cbnz	r0, 2d3a <bootutil_img_validate+0x92>
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    2d24:	f10d 030e 	add.w	r3, sp, #14
    2d28:	aa03      	add	r2, sp, #12
    2d2a:	a904      	add	r1, sp, #16
    2d2c:	a805      	add	r0, sp, #20
    2d2e:	f000 f889 	bl	2e44 <bootutil_tlv_iter_next>
        if (rc < 0) {
    2d32:	2800      	cmp	r0, #0
    2d34:	da1b      	bge.n	2d6e <bootutil_img_validate+0xc6>
            return -1;
    2d36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    2d3a:	4620      	mov	r0, r4
    2d3c:	b02f      	add	sp, #188	; 0xbc
    2d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d42:	9b39      	ldr	r3, [sp, #228]	; 0xe4
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    2d44:	9a38      	ldr	r2, [sp, #224]	; 0xe0
        blk_sz = size - off;
    2d46:	eba7 0908 	sub.w	r9, r7, r8
    2d4a:	4599      	cmp	r9, r3
    2d4c:	bf28      	it	cs
    2d4e:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    2d50:	464b      	mov	r3, r9
    2d52:	4641      	mov	r1, r8
    2d54:	4658      	mov	r0, fp
    2d56:	f7fe fea3 	bl	1aa0 <flash_area_read>
        if (rc) {
    2d5a:	4604      	mov	r4, r0
    2d5c:	2800      	cmp	r0, #0
    2d5e:	d1ec      	bne.n	2d3a <bootutil_img_validate+0x92>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    2d60:	464a      	mov	r2, r9
    2d62:	9938      	ldr	r1, [sp, #224]	; 0xe0
    2d64:	4628      	mov	r0, r5
    2d66:	f000 f9af 	bl	30c8 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    2d6a:	44c8      	add	r8, r9
    2d6c:	e7be      	b.n	2cec <bootutil_img_validate+0x44>
        } else if (rc > 0) {
    2d6e:	d119      	bne.n	2da4 <bootutil_img_validate+0xfc>
        if (type == IMAGE_TLV_SHA256) {
    2d70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2d74:	2b10      	cmp	r3, #16
    2d76:	d1d5      	bne.n	2d24 <bootutil_img_validate+0x7c>
            if (len != sizeof(hash)) {
    2d78:	f8bd 600c 	ldrh.w	r6, [sp, #12]
    2d7c:	2e20      	cmp	r6, #32
    2d7e:	d1da      	bne.n	2d36 <bootutil_img_validate+0x8e>
            rc = flash_area_read(fap, off, buf, sizeof hash);
    2d80:	4633      	mov	r3, r6
    2d82:	462a      	mov	r2, r5
    2d84:	9904      	ldr	r1, [sp, #16]
    2d86:	4658      	mov	r0, fp
    2d88:	f7fe fe8a 	bl	1aa0 <flash_area_read>
            if (rc) {
    2d8c:	4604      	mov	r4, r0
    2d8e:	2800      	cmp	r0, #0
    2d90:	d1d3      	bne.n	2d3a <bootutil_img_validate+0x92>
            if (memcmp(hash, buf, sizeof(hash))) {
    2d92:	4632      	mov	r2, r6
    2d94:	4629      	mov	r1, r5
    2d96:	a80b      	add	r0, sp, #44	; 0x2c
    2d98:	f7fe fd2c 	bl	17f4 <memcmp>
            sha256_valid = 1;
    2d9c:	2401      	movs	r4, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    2d9e:	2800      	cmp	r0, #0
    2da0:	d0c0      	beq.n	2d24 <bootutil_img_validate+0x7c>
    2da2:	e7c8      	b.n	2d36 <bootutil_img_validate+0x8e>
    if (!sha256_valid) {
    2da4:	f084 0401 	eor.w	r4, r4, #1
    2da8:	4264      	negs	r4, r4
    2daa:	e7c6      	b.n	2d3a <bootutil_img_validate+0x92>

00002dac <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    2dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2db0:	460e      	mov	r6, r1
    2db2:	4617      	mov	r7, r2
    2db4:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    2db6:	4604      	mov	r4, r0
    2db8:	b928      	cbnz	r0, 2dc6 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    2dba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    2dbe:	4640      	mov	r0, r8
    2dc0:	b003      	add	sp, #12
    2dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    2dc6:	2900      	cmp	r1, #0
    2dc8:	d0f7      	beq.n	2dba <bootutil_tlv_iter_begin+0xe>
    2dca:	2a00      	cmp	r2, #0
    2dcc:	d0f5      	beq.n	2dba <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    2dce:	68cb      	ldr	r3, [r1, #12]
    2dd0:	890d      	ldrh	r5, [r1, #8]
    2dd2:	441d      	add	r5, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    2dd4:	2304      	movs	r3, #4
    2dd6:	eb0d 0203 	add.w	r2, sp, r3
    2dda:	4629      	mov	r1, r5
    2ddc:	4638      	mov	r0, r7
    2dde:	f7fe fe5f 	bl	1aa0 <flash_area_read>
    2de2:	4680      	mov	r8, r0
    2de4:	2800      	cmp	r0, #0
    2de6:	d1e8      	bne.n	2dba <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    2de8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2dec:	8973      	ldrh	r3, [r6, #10]
    2dee:	f646 1208 	movw	r2, #26888	; 0x6908
    2df2:	4291      	cmp	r1, r2
    2df4:	d123      	bne.n	2e3e <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    2df6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2dfa:	4299      	cmp	r1, r3
    2dfc:	d1dd      	bne.n	2dba <bootutil_tlv_iter_begin+0xe>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    2dfe:	2304      	movs	r3, #4
    2e00:	eb0d 0203 	add.w	r2, sp, r3
    2e04:	4429      	add	r1, r5
    2e06:	4638      	mov	r0, r7
    2e08:	f7fe fe4a 	bl	1aa0 <flash_area_read>
    2e0c:	2800      	cmp	r0, #0
    2e0e:	d1d4      	bne.n	2dba <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    2e10:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2e14:	f646 1307 	movw	r3, #26887	; 0x6907
    2e18:	429a      	cmp	r2, r3
    2e1a:	d1ce      	bne.n	2dba <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    2e1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2e20:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    2e22:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2e24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    2e28:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    2e2c:	442b      	add	r3, r5
    2e2e:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    2e30:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2e32:	4413      	add	r3, r2
    it->fap = fap;
    2e34:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2e38:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    2e3a:	6125      	str	r5, [r4, #16]
    return 0;
    2e3c:	e7bf      	b.n	2dbe <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d0e6      	beq.n	2e10 <bootutil_tlv_iter_begin+0x64>
    2e42:	e7ba      	b.n	2dba <bootutil_tlv_iter_begin+0xe>

00002e44 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    2e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2e48:	460e      	mov	r6, r1
    2e4a:	4617      	mov	r7, r2
    2e4c:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    2e4e:	4604      	mov	r4, r0
    2e50:	b920      	cbnz	r0, 2e5c <bootutil_tlv_iter_next+0x18>
        return -1;
    2e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    2e56:	b002      	add	sp, #8
    2e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    2e5c:	6803      	ldr	r3, [r0, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d0f7      	beq.n	2e52 <bootutil_tlv_iter_next+0xe>
    2e62:	6843      	ldr	r3, [r0, #4]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d0f4      	beq.n	2e52 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    2e68:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    2e6c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2e70:	429a      	cmp	r2, r3
    2e72:	d216      	bcs.n	2ea2 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    2e74:	6823      	ldr	r3, [r4, #0]
    2e76:	895b      	ldrh	r3, [r3, #10]
    2e78:	b123      	cbz	r3, 2e84 <bootutil_tlv_iter_next+0x40>
    2e7a:	68e3      	ldr	r3, [r4, #12]
    2e7c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    2e7e:	bf04      	itt	eq
    2e80:	3304      	addeq	r3, #4
    2e82:	6123      	streq	r3, [r4, #16]
        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    2e84:	2304      	movs	r3, #4
    2e86:	eb0d 0203 	add.w	r2, sp, r3
    2e8a:	6921      	ldr	r1, [r4, #16]
    2e8c:	6860      	ldr	r0, [r4, #4]
    2e8e:	f7fe fe07 	bl	1aa0 <flash_area_read>
        if (rc) {
    2e92:	2800      	cmp	r0, #0
    2e94:	d1dd      	bne.n	2e52 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    2e96:	7aa2      	ldrb	r2, [r4, #10]
    2e98:	6923      	ldr	r3, [r4, #16]
    2e9a:	b122      	cbz	r2, 2ea6 <bootutil_tlv_iter_next+0x62>
    2e9c:	68e2      	ldr	r2, [r4, #12]
    2e9e:	429a      	cmp	r2, r3
    2ea0:	d801      	bhi.n	2ea6 <bootutil_tlv_iter_next+0x62>
            return 1;
    2ea2:	2001      	movs	r0, #1
    2ea4:	e7d7      	b.n	2e56 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    2ea6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    2eaa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2eae:	45c4      	cmp	ip, r8
    2eb0:	f102 0104 	add.w	r1, r2, #4
    2eb4:	d003      	beq.n	2ebe <bootutil_tlv_iter_next+0x7a>
    2eb6:	f8bd e004 	ldrh.w	lr, [sp, #4]
    2eba:	45e6      	cmp	lr, ip
    2ebc:	d10b      	bne.n	2ed6 <bootutil_tlv_iter_next+0x92>
            if (type != NULL) {
    2ebe:	b11d      	cbz	r5, 2ec8 <bootutil_tlv_iter_next+0x84>
                *type = tlv.it_type;
    2ec0:	f8bd c004 	ldrh.w	ip, [sp, #4]
    2ec4:	f8a5 c000 	strh.w	ip, [r5]
            *off = it->tlv_off + sizeof(tlv);
    2ec8:	3304      	adds	r3, #4
    2eca:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    2ecc:	803a      	strh	r2, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    2ece:	6922      	ldr	r2, [r4, #16]
    2ed0:	440a      	add	r2, r1
    2ed2:	6122      	str	r2, [r4, #16]
            return 0;
    2ed4:	e7bf      	b.n	2e56 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    2ed6:	440b      	add	r3, r1
    2ed8:	6123      	str	r3, [r4, #16]
    2eda:	e7c7      	b.n	2e6c <bootutil_tlv_iter_next+0x28>

00002edc <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    2edc:	b121      	cbz	r1, 2ee8 <flash_area_id_from_multi_image_slot+0xc>
    2ede:	2901      	cmp	r1, #1
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    2ee0:	bf0c      	ite	eq
    2ee2:	2002      	moveq	r0, #2
    2ee4:	20ff      	movne	r0, #255	; 0xff
    2ee6:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    2ee8:	2001      	movs	r0, #1
}
    2eea:	4770      	bx	lr

00002eec <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    2eec:	226c      	movs	r2, #108	; 0x6c
    2eee:	2100      	movs	r1, #0
    2ef0:	f7fe bcb1 	b.w	1856 <memset>

00002ef4 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
    2ef4:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    2ef6:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    2efa:	b9c1      	cbnz	r1, 2f2e <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    2efc:	4a19      	ldr	r2, [pc, #100]	; (2f64 <mbedtls_sha256_starts_ret+0x70>)
    2efe:	4b1a      	ldr	r3, [pc, #104]	; (2f68 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    2f00:	f8df c08c 	ldr.w	ip, [pc, #140]	; 2f90 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
    2f04:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    2f08:	4b18      	ldr	r3, [pc, #96]	; (2f6c <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    2f0a:	4a19      	ldr	r2, [pc, #100]	; (2f70 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
    2f0c:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    2f10:	4b18      	ldr	r3, [pc, #96]	; (2f74 <mbedtls_sha256_starts_ret+0x80>)
    2f12:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    2f16:	4b18      	ldr	r3, [pc, #96]	; (2f78 <mbedtls_sha256_starts_ret+0x84>)
    2f18:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    2f1a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    2f1e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    2f22:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    2f26:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    2f28:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    2f2a:	2000      	movs	r0, #0
    2f2c:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    2f2e:	4b13      	ldr	r3, [pc, #76]	; (2f7c <mbedtls_sha256_starts_ret+0x88>)
    2f30:	4a13      	ldr	r2, [pc, #76]	; (2f80 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
    2f32:	f8df c060 	ldr.w	ip, [pc, #96]	; 2f94 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
    2f36:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    2f3a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    2f3e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    2f42:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    2f46:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    2f48:	4b0e      	ldr	r3, [pc, #56]	; (2f84 <mbedtls_sha256_starts_ret+0x90>)
    2f4a:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    2f4e:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    2f52:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    2f56:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    2f5a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    2f5c:	4b0a      	ldr	r3, [pc, #40]	; (2f88 <mbedtls_sha256_starts_ret+0x94>)
    2f5e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    2f60:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <mbedtls_sha256_starts_ret+0x98>)
    2f62:	e7e0      	b.n	2f26 <mbedtls_sha256_starts_ret+0x32>
    2f64:	6a09e667 	.word	0x6a09e667
    2f68:	bb67ae85 	.word	0xbb67ae85
    2f6c:	a54ff53a 	.word	0xa54ff53a
    2f70:	510e527f 	.word	0x510e527f
    2f74:	9b05688c 	.word	0x9b05688c
    2f78:	1f83d9ab 	.word	0x1f83d9ab
    2f7c:	367cd507 	.word	0x367cd507
    2f80:	c1059ed8 	.word	0xc1059ed8
    2f84:	ffc00b31 	.word	0xffc00b31
    2f88:	64f98fa7 	.word	0x64f98fa7
    2f8c:	befa4fa4 	.word	0xbefa4fa4
    2f90:	3c6ef372 	.word	0x3c6ef372
    2f94:	f70e5939 	.word	0xf70e5939

00002f98 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    2f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f9c:	b0cb      	sub	sp, #300	; 0x12c
    2f9e:	f100 0308 	add.w	r3, r0, #8
    2fa2:	9300      	str	r3, [sp, #0]
    2fa4:	461a      	mov	r2, r3
    2fa6:	9101      	str	r1, [sp, #4]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
    2fa8:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
    2faa:	a802      	add	r0, sp, #8
    2fac:	f852 1b04 	ldr.w	r1, [r2], #4
    2fb0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    2fb4:	3301      	adds	r3, #1
    2fb6:	2b08      	cmp	r3, #8
    2fb8:	d1f7      	bne.n	2faa <mbedtls_internal_sha256_process+0x12>
    2fba:	e9dd 8707 	ldrd	r8, r7, [sp, #28]
    2fbe:	e9dd 3602 	ldrd	r3, r6, [sp, #8]
    2fc2:	e9dd eb04 	ldrd	lr, fp, [sp, #16]
    2fc6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    2fca:	9906      	ldr	r1, [sp, #24]
    2fcc:	aa09      	add	r2, sp, #36	; 0x24

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    2fce:	2400      	movs	r4, #0
    {
        if( i < 16 )
    2fd0:	2c0f      	cmp	r4, #15
    2fd2:	d85e      	bhi.n	3092 <mbedtls_internal_sha256_process+0xfa>
    2fd4:	9d01      	ldr	r5, [sp, #4]
    2fd6:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
            GET_UINT32_BE( W[i], data, 4 * i );
    2fda:	f815 a024 	ldrb.w	sl, [r5, r4, lsl #2]
    2fde:	f89c 5003 	ldrb.w	r5, [ip, #3]
    2fe2:	ea45 650a 	orr.w	r5, r5, sl, lsl #24
    2fe6:	f89c a001 	ldrb.w	sl, [ip, #1]
    2fea:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
    2fee:	f89c a002 	ldrb.w	sl, [ip, #2]
    2ff2:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
        else
            R( i );
    2ff6:	6055      	str	r5, [r2, #4]

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    2ff8:	ea4f 2cf1 	mov.w	ip, r1, ror #11
    2ffc:	ea88 0507 	eor.w	r5, r8, r7
    3000:	ea8c 1cb1 	eor.w	ip, ip, r1, ror #6
    3004:	400d      	ands	r5, r1
    3006:	ea8c 6a71 	eor.w	sl, ip, r1, ror #25
    300a:	407d      	eors	r5, r7
    300c:	eb0a 0c05 	add.w	ip, sl, r5
    3010:	4d2c      	ldr	r5, [pc, #176]	; (30c4 <mbedtls_internal_sha256_process+0x12c>)
    3012:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    3016:	4465      	add	r5, ip
    3018:	f852 cf04 	ldr.w	ip, [r2, #4]!
    301c:	4465      	add	r5, ip
    301e:	44a9      	add	r9, r5
    3020:	ea46 0a03 	orr.w	sl, r6, r3
    3024:	ea4f 3573 	mov.w	r5, r3, ror #13
    3028:	eb09 0c0b 	add.w	ip, r9, fp
    302c:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
    3030:	ea06 0b03 	and.w	fp, r6, r3
    3034:	ea0a 0a0e 	and.w	sl, sl, lr
    3038:	ea4a 0a0b 	orr.w	sl, sl, fp
    303c:	ea85 55b3 	eor.w	r5, r5, r3, ror #22
    for( i = 0; i < 64; i++ )
    3040:	3401      	adds	r4, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    3042:	4455      	add	r5, sl
    for( i = 0; i < 64; i++ )
    3044:	2c40      	cmp	r4, #64	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    3046:	444d      	add	r5, r9
    3048:	46f3      	mov	fp, lr
    304a:	46b9      	mov	r9, r7
    for( i = 0; i < 64; i++ )
    304c:	d11a      	bne.n	3084 <mbedtls_internal_sha256_process+0xec>
    304e:	e9cd 1807 	strd	r1, r8, [sp, #28]
    3052:	e9cd 6e04 	strd	r6, lr, [sp, #16]
    3056:	e9cd 5302 	strd	r5, r3, [sp, #8]
    305a:	9709      	str	r7, [sp, #36]	; 0x24
    305c:	f8cd c018 	str.w	ip, [sp, #24]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3060:	2300      	movs	r3, #0
        ctx->state[i] += A[i];
    3062:	9a00      	ldr	r2, [sp, #0]
    3064:	6811      	ldr	r1, [r2, #0]
    3066:	aa02      	add	r2, sp, #8
    3068:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    306c:	440a      	add	r2, r1
    306e:	9900      	ldr	r1, [sp, #0]
    for( i = 0; i < 8; i++ )
    3070:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
    3072:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
    3076:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
    3078:	9100      	str	r1, [sp, #0]
    for( i = 0; i < 8; i++ )
    307a:	d1f2      	bne.n	3062 <mbedtls_internal_sha256_process+0xca>

    return( 0 );
}
    307c:	2000      	movs	r0, #0
    307e:	b04b      	add	sp, #300	; 0x12c
    3080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3084:	46b6      	mov	lr, r6
    3086:	4647      	mov	r7, r8
    3088:	461e      	mov	r6, r3
    308a:	4688      	mov	r8, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    308c:	462b      	mov	r3, r5
    308e:	4661      	mov	r1, ip
    3090:	e79e      	b.n	2fd0 <mbedtls_internal_sha256_process+0x38>
            R( i );
    3092:	f852 5c04 	ldr.w	r5, [r2, #-4]
    3096:	f852 ac38 	ldr.w	sl, [r2, #-56]
    309a:	f852 0c18 	ldr.w	r0, [r2, #-24]
    309e:	ea4f 4cf5 	mov.w	ip, r5, ror #19
    30a2:	ea8c 4c75 	eor.w	ip, ip, r5, ror #17
    30a6:	ea8c 2c95 	eor.w	ip, ip, r5, lsr #10
    30aa:	f852 5c3c 	ldr.w	r5, [r2, #-60]
    30ae:	4428      	add	r0, r5
    30b0:	ea4f 45ba 	mov.w	r5, sl, ror #18
    30b4:	ea85 15fa 	eor.w	r5, r5, sl, ror #7
    30b8:	4484      	add	ip, r0
    30ba:	ea85 0ada 	eor.w	sl, r5, sl, lsr #3
    30be:	eb0c 050a 	add.w	r5, ip, sl
    30c2:	e798      	b.n	2ff6 <mbedtls_internal_sha256_process+0x5e>
    30c4:	00003f08 	.word	0x00003f08

000030c8 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    30c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    30cc:	4605      	mov	r5, r0
    30ce:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    30d0:	4614      	mov	r4, r2
    30d2:	b912      	cbnz	r2, 30da <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    30d4:	2000      	movs	r0, #0
}
    30d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    30da:	6803      	ldr	r3, [r0, #0]
    30dc:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    30e0:	18d3      	adds	r3, r2, r3
    ctx->total[0] += (uint32_t) ilen;
    30e2:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    30e4:	bf22      	ittt	cs
    30e6:	6843      	ldrcs	r3, [r0, #4]
    30e8:	3301      	addcs	r3, #1
    30ea:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    30ec:	b1a7      	cbz	r7, 3118 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    30ee:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
    30f2:	4542      	cmp	r2, r8
    30f4:	d310      	bcc.n	3118 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    30f6:	f100 0928 	add.w	r9, r0, #40	; 0x28
    30fa:	4642      	mov	r2, r8
    30fc:	eb09 0007 	add.w	r0, r9, r7
    3100:	f7fe fb9c 	bl	183c <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3104:	4649      	mov	r1, r9
    3106:	4628      	mov	r0, r5
    3108:	f7ff ff46 	bl	2f98 <mbedtls_internal_sha256_process>
    310c:	2800      	cmp	r0, #0
    310e:	d1e2      	bne.n	30d6 <mbedtls_sha256_update_ret+0xe>
        input += fill;
    3110:	4446      	add	r6, r8
        ilen  -= fill;
    3112:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    3116:	4607      	mov	r7, r0
    3118:	4426      	add	r6, r4
    311a:	e005      	b.n	3128 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    311c:	4628      	mov	r0, r5
    311e:	f7ff ff3b 	bl	2f98 <mbedtls_internal_sha256_process>
    3122:	2800      	cmp	r0, #0
    3124:	d1d7      	bne.n	30d6 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    3126:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    3128:	2c3f      	cmp	r4, #63	; 0x3f
    312a:	eba6 0104 	sub.w	r1, r6, r4
    312e:	d8f5      	bhi.n	311c <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    3130:	2c00      	cmp	r4, #0
    3132:	d0cf      	beq.n	30d4 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    3134:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3138:	4622      	mov	r2, r4
    313a:	4438      	add	r0, r7
    313c:	f7fe fb7e 	bl	183c <memcpy>
    3140:	e7c8      	b.n	30d4 <mbedtls_sha256_update_ret+0xc>

00003142 <mbedtls_sha256_finish_ret>:
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    3142:	6803      	ldr	r3, [r0, #0]
    3144:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    3148:	1c5a      	adds	r2, r3, #1
    314a:	4403      	add	r3, r0
{
    314c:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    314e:	2a38      	cmp	r2, #56	; 0x38
{
    3150:	460d      	mov	r5, r1
    3152:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    3156:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    315a:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    315c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    3160:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    3164:	d873      	bhi.n	324e <mbedtls_sha256_finish_ret+0x10c>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    3166:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    316a:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    316c:	f7fe fb73 	bl	1856 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    3170:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    3174:	0f5a      	lsrs	r2, r3, #29
    3176:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    317a:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
    317c:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    317e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    3182:	0c11      	lsrs	r1, r2, #16
    3184:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    3188:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
    318c:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    318e:	0e1a      	lsrs	r2, r3, #24
    3190:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
    3194:	0c1a      	lsrs	r2, r3, #16
    3196:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    319a:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    319c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    31a0:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    31a4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    31a8:	4631      	mov	r1, r6
    31aa:	4620      	mov	r0, r4
    31ac:	f7ff fef4 	bl	2f98 <mbedtls_internal_sha256_process>
    31b0:	2800      	cmp	r0, #0
    31b2:	d14b      	bne.n	324c <mbedtls_sha256_finish_ret+0x10a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    31b4:	7ae3      	ldrb	r3, [r4, #11]
    31b6:	702b      	strb	r3, [r5, #0]
    31b8:	8963      	ldrh	r3, [r4, #10]
    31ba:	706b      	strb	r3, [r5, #1]
    31bc:	68a3      	ldr	r3, [r4, #8]
    31be:	0a1b      	lsrs	r3, r3, #8
    31c0:	70ab      	strb	r3, [r5, #2]
    31c2:	68a3      	ldr	r3, [r4, #8]
    31c4:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    31c6:	7be3      	ldrb	r3, [r4, #15]
    31c8:	712b      	strb	r3, [r5, #4]
    31ca:	89e3      	ldrh	r3, [r4, #14]
    31cc:	716b      	strb	r3, [r5, #5]
    31ce:	68e3      	ldr	r3, [r4, #12]
    31d0:	0a1b      	lsrs	r3, r3, #8
    31d2:	71ab      	strb	r3, [r5, #6]
    31d4:	68e3      	ldr	r3, [r4, #12]
    31d6:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    31d8:	7ce3      	ldrb	r3, [r4, #19]
    31da:	722b      	strb	r3, [r5, #8]
    31dc:	8a63      	ldrh	r3, [r4, #18]
    31de:	726b      	strb	r3, [r5, #9]
    31e0:	6923      	ldr	r3, [r4, #16]
    31e2:	0a1b      	lsrs	r3, r3, #8
    31e4:	72ab      	strb	r3, [r5, #10]
    31e6:	6923      	ldr	r3, [r4, #16]
    31e8:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    31ea:	7de3      	ldrb	r3, [r4, #23]
    31ec:	732b      	strb	r3, [r5, #12]
    31ee:	8ae3      	ldrh	r3, [r4, #22]
    31f0:	736b      	strb	r3, [r5, #13]
    31f2:	6963      	ldr	r3, [r4, #20]
    31f4:	0a1b      	lsrs	r3, r3, #8
    31f6:	73ab      	strb	r3, [r5, #14]
    31f8:	6963      	ldr	r3, [r4, #20]
    31fa:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    31fc:	7ee3      	ldrb	r3, [r4, #27]
    31fe:	742b      	strb	r3, [r5, #16]
    3200:	8b63      	ldrh	r3, [r4, #26]
    3202:	746b      	strb	r3, [r5, #17]
    3204:	69a3      	ldr	r3, [r4, #24]
    3206:	0a1b      	lsrs	r3, r3, #8
    3208:	74ab      	strb	r3, [r5, #18]
    320a:	69a3      	ldr	r3, [r4, #24]
    320c:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    320e:	7fe3      	ldrb	r3, [r4, #31]
    3210:	752b      	strb	r3, [r5, #20]
    3212:	8be3      	ldrh	r3, [r4, #30]
    3214:	756b      	strb	r3, [r5, #21]
    3216:	69e3      	ldr	r3, [r4, #28]
    3218:	0a1b      	lsrs	r3, r3, #8
    321a:	75ab      	strb	r3, [r5, #22]
    321c:	69e3      	ldr	r3, [r4, #28]
    321e:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    3220:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    3224:	762b      	strb	r3, [r5, #24]
    3226:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    3228:	766b      	strb	r3, [r5, #25]
    322a:	6a23      	ldr	r3, [r4, #32]
    322c:	0a1b      	lsrs	r3, r3, #8
    322e:	76ab      	strb	r3, [r5, #26]
    3230:	6a23      	ldr	r3, [r4, #32]
    3232:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    3234:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    3236:	b94b      	cbnz	r3, 324c <mbedtls_sha256_finish_ret+0x10a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    3238:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    323c:	772b      	strb	r3, [r5, #28]
    323e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3240:	776b      	strb	r3, [r5, #29]
    3242:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3244:	0a1b      	lsrs	r3, r3, #8
    3246:	77ab      	strb	r3, [r5, #30]
    3248:	6a63      	ldr	r3, [r4, #36]	; 0x24
    324a:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    324c:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    324e:	2100      	movs	r1, #0
    3250:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    3254:	f7fe faff 	bl	1856 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3258:	4631      	mov	r1, r6
    325a:	4620      	mov	r0, r4
    325c:	f7ff fe9c 	bl	2f98 <mbedtls_internal_sha256_process>
    3260:	2800      	cmp	r0, #0
    3262:	d1f3      	bne.n	324c <mbedtls_sha256_finish_ret+0x10a>
        memset( ctx->buffer, 0, 56 );
    3264:	4601      	mov	r1, r0
    3266:	2238      	movs	r2, #56	; 0x38
    3268:	4630      	mov	r0, r6
    326a:	e77f      	b.n	316c <mbedtls_sha256_finish_ret+0x2a>

0000326c <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    326c:	6843      	ldr	r3, [r0, #4]
    326e:	428b      	cmp	r3, r1
    3270:	d807      	bhi.n	3282 <hal_flash_check_addr+0x16>
    3272:	6882      	ldr	r2, [r0, #8]
    3274:	4413      	add	r3, r2
    3276:	428b      	cmp	r3, r1
        return SYS_EINVAL;
    }
    return 0;
    3278:	bf34      	ite	cc
    327a:	f06f 0001 	mvncc.w	r0, #1
    327e:	2000      	movcs	r0, #0
    3280:	4770      	bx	lr
        return SYS_EINVAL;
    3282:	f06f 0001 	mvn.w	r0, #1
}
    3286:	4770      	bx	lr

00003288 <hal_flash_init>:
{
    3288:	b538      	push	{r3, r4, r5, lr}
    328a:	2400      	movs	r4, #0
    int rc = 0;
    328c:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
    328e:	b2e0      	uxtb	r0, r4
    3290:	f7fd f8fc 	bl	48c <hal_bsp_flash_dev>
        if (!hf) {
    3294:	b140      	cbz	r0, 32a8 <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
    3296:	6803      	ldr	r3, [r0, #0]
    3298:	695b      	ldr	r3, [r3, #20]
    329a:	4798      	blx	r3
            rc = SYS_EIO;
    329c:	2800      	cmp	r0, #0
    329e:	bf18      	it	ne
    32a0:	f06f 0504 	mvnne.w	r5, #4
    32a4:	3401      	adds	r4, #1
        hf = hal_bsp_flash_dev(i);
    32a6:	e7f2      	b.n	328e <hal_flash_init+0x6>
}
    32a8:	4628      	mov	r0, r5
    32aa:	bd38      	pop	{r3, r4, r5, pc}

000032ac <hal_flash_align>:
{
    32ac:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    32ae:	f7fd f8ed 	bl	48c <hal_bsp_flash_dev>
    if (!hf) {
    32b2:	b108      	cbz	r0, 32b8 <hal_flash_align+0xc>
    return hf->hf_align;
    32b4:	7c00      	ldrb	r0, [r0, #16]
}
    32b6:	bd08      	pop	{r3, pc}
        return 1;
    32b8:	2001      	movs	r0, #1
    32ba:	e7fc      	b.n	32b6 <hal_flash_align+0xa>

000032bc <hal_flash_erased_val>:
{
    32bc:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    32be:	f7fd f8e5 	bl	48c <hal_bsp_flash_dev>
    if (!hf) {
    32c2:	b108      	cbz	r0, 32c8 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    32c4:	7d00      	ldrb	r0, [r0, #20]
}
    32c6:	bd08      	pop	{r3, pc}
        return 1;
    32c8:	2001      	movs	r0, #1
    32ca:	e7fc      	b.n	32c6 <hal_flash_erased_val+0xa>

000032cc <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    32cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32d0:	460d      	mov	r5, r1
    32d2:	4690      	mov	r8, r2
    32d4:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    32d6:	f7fd f8d9 	bl	48c <hal_bsp_flash_dev>
    if (!hf) {
    32da:	4604      	mov	r4, r0
    32dc:	b1a8      	cbz	r0, 330a <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    32de:	4629      	mov	r1, r5
    32e0:	f7ff ffc4 	bl	326c <hal_flash_check_addr>
    32e4:	b988      	cbnz	r0, 330a <hal_flash_read+0x3e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    32e6:	19a9      	adds	r1, r5, r6
    32e8:	4620      	mov	r0, r4
    32ea:	f7ff ffbf 	bl	326c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    32ee:	b960      	cbnz	r0, 330a <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    32f0:	6823      	ldr	r3, [r4, #0]
    32f2:	4642      	mov	r2, r8
    32f4:	681f      	ldr	r7, [r3, #0]
    32f6:	4629      	mov	r1, r5
    32f8:	4633      	mov	r3, r6
    32fa:	4620      	mov	r0, r4
    32fc:	47b8      	blx	r7
    if (rc != 0) {
    32fe:	2800      	cmp	r0, #0
        return SYS_EIO;
    3300:	bf18      	it	ne
    3302:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
    3306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    330a:	f06f 0001 	mvn.w	r0, #1
    330e:	e7fa      	b.n	3306 <hal_flash_read+0x3a>

00003310 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    3310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3314:	4604      	mov	r4, r0
    3316:	460e      	mov	r6, r1
    3318:	4690      	mov	r8, r2
    331a:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    331c:	f7fd f8b6 	bl	48c <hal_bsp_flash_dev>
    if (!hf) {
    3320:	4605      	mov	r5, r0
    3322:	b1f0      	cbz	r0, 3362 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3324:	4631      	mov	r1, r6
    3326:	f7ff ffa1 	bl	326c <hal_flash_check_addr>
    332a:	b9d0      	cbnz	r0, 3362 <hal_flash_write+0x52>
      hal_flash_check_addr(hf, address + num_bytes)) {
    332c:	19f1      	adds	r1, r6, r7
    332e:	4628      	mov	r0, r5
    3330:	f7ff ff9c 	bl	326c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3334:	b9a8      	cbnz	r0, 3362 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    3336:	08e3      	lsrs	r3, r4, #3
    3338:	4a0d      	ldr	r2, [pc, #52]	; (3370 <hal_flash_write+0x60>)
    333a:	5cd3      	ldrb	r3, [r2, r3]
    333c:	f004 0407 	and.w	r4, r4, #7
    3340:	fa43 f404 	asr.w	r4, r3, r4
    3344:	07e3      	lsls	r3, r4, #31
    3346:	d40f      	bmi.n	3368 <hal_flash_write+0x58>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    3348:	682b      	ldr	r3, [r5, #0]
    334a:	4642      	mov	r2, r8
    334c:	685c      	ldr	r4, [r3, #4]
    334e:	4631      	mov	r1, r6
    3350:	463b      	mov	r3, r7
    3352:	4628      	mov	r0, r5
    3354:	47a0      	blx	r4
    if (rc != 0) {
    3356:	2800      	cmp	r0, #0
        return SYS_EIO;
    3358:	bf18      	it	ne
    335a:	f06f 0004 	mvnne.w	r0, #4
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    335e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    3362:	f06f 0001 	mvn.w	r0, #1
    3366:	e7fa      	b.n	335e <hal_flash_write+0x4e>
        return SYS_EACCES;
    3368:	f06f 0006 	mvn.w	r0, #6
    336c:	e7f7      	b.n	335e <hal_flash_write+0x4e>
    336e:	bf00      	nop
    3370:	20006294 	.word	0x20006294

00003374 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    3374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3378:	4605      	mov	r5, r0
    337a:	460f      	mov	r7, r1
    337c:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    337e:	f7fd f885 	bl	48c <hal_bsp_flash_dev>
    if (!hf) {
    3382:	4606      	mov	r6, r0
    3384:	2800      	cmp	r0, #0
    3386:	d04b      	beq.n	3420 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3388:	4639      	mov	r1, r7
    338a:	f7ff ff6f 	bl	326c <hal_flash_check_addr>
    338e:	2800      	cmp	r0, #0
    3390:	d146      	bne.n	3420 <hal_flash_erase+0xac>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3392:	eb07 0809 	add.w	r8, r7, r9
    3396:	4641      	mov	r1, r8
    3398:	4630      	mov	r0, r6
    339a:	f7ff ff67 	bl	326c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    339e:	2800      	cmp	r0, #0
    33a0:	d13e      	bne.n	3420 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    33a2:	08eb      	lsrs	r3, r5, #3
    33a4:	4a20      	ldr	r2, [pc, #128]	; (3428 <hal_flash_erase+0xb4>)
    33a6:	5cd4      	ldrb	r4, [r2, r3]
    33a8:	f005 0507 	and.w	r5, r5, #7
    33ac:	412c      	asrs	r4, r5
    33ae:	f014 0401 	ands.w	r4, r4, #1
    33b2:	d132      	bne.n	341a <hal_flash_erase+0xa6>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    33b4:	45b8      	cmp	r8, r7
    33b6:	d933      	bls.n	3420 <hal_flash_erase+0xac>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    33b8:	6833      	ldr	r3, [r6, #0]
    33ba:	699b      	ldr	r3, [r3, #24]
    33bc:	b35b      	cbz	r3, 3416 <hal_flash_erase+0xa2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    33be:	464a      	mov	r2, r9
    33c0:	4639      	mov	r1, r7
    33c2:	4630      	mov	r0, r6
    33c4:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    33c6:	4620      	mov	r0, r4
    33c8:	b003      	add	sp, #12
    33ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            end_area = start + size;
    33ce:	e9dd 1300 	ldrd	r1, r3, [sp]
    33d2:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    33d4:	429f      	cmp	r7, r3
    33d6:	d313      	bcc.n	3400 <hal_flash_erase+0x8c>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    33d8:	3501      	adds	r5, #1
    33da:	68f3      	ldr	r3, [r6, #12]
    33dc:	42ab      	cmp	r3, r5
    33de:	ddf2      	ble.n	33c6 <hal_flash_erase+0x52>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    33e0:	6833      	ldr	r3, [r6, #0]
    33e2:	466a      	mov	r2, sp
    33e4:	f8d3 900c 	ldr.w	r9, [r3, #12]
    33e8:	4629      	mov	r1, r5
    33ea:	ab01      	add	r3, sp, #4
    33ec:	4630      	mov	r0, r6
    33ee:	47c8      	blx	r9
            assert(rc == 0);
    33f0:	2800      	cmp	r0, #0
    33f2:	d0ec      	beq.n	33ce <hal_flash_erase+0x5a>
    33f4:	2300      	movs	r3, #0
    33f6:	461a      	mov	r2, r3
    33f8:	4619      	mov	r1, r3
    33fa:	4618      	mov	r0, r3
    33fc:	f7fd ff52 	bl	12a4 <__assert_func>
            if (address < end_area && end > start) {
    3400:	4588      	cmp	r8, r1
    3402:	d9e9      	bls.n	33d8 <hal_flash_erase+0x64>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    3404:	6833      	ldr	r3, [r6, #0]
    3406:	4630      	mov	r0, r6
    3408:	689b      	ldr	r3, [r3, #8]
    340a:	4798      	blx	r3
    340c:	2800      	cmp	r0, #0
    340e:	d0e3      	beq.n	33d8 <hal_flash_erase+0x64>
                    return SYS_EIO;
    3410:	f06f 0404 	mvn.w	r4, #4
    3414:	e7d7      	b.n	33c6 <hal_flash_erase+0x52>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    3416:	4625      	mov	r5, r4
    3418:	e7df      	b.n	33da <hal_flash_erase+0x66>
        return SYS_EACCES;
    341a:	f06f 0406 	mvn.w	r4, #6
    341e:	e7d2      	b.n	33c6 <hal_flash_erase+0x52>
        return SYS_EINVAL;
    3420:	f06f 0401 	mvn.w	r4, #1
    3424:	e7cf      	b.n	33c6 <hal_flash_erase+0x52>
    3426:	bf00      	nop
    3428:	20006294 	.word	0x20006294

0000342c <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    342e:	6807      	ldr	r7, [r0, #0]
    3430:	683f      	ldr	r7, [r7, #0]
{
    3432:	4606      	mov	r6, r0
    3434:	4614      	mov	r4, r2
    3436:	461d      	mov	r5, r3
    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    3438:	47b8      	blx	r7
    if (rc != 0) {
    343a:	b958      	cbnz	r0, 3454 <hal_flash_is_erased+0x28>
    343c:	4622      	mov	r2, r4
    343e:	4425      	add	r5, r4
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    3440:	4295      	cmp	r5, r2
    3442:	d101      	bne.n	3448 <hal_flash_is_erased+0x1c>
        if (buf[i] != hf->hf_erased_val) {
            return 0;
        }
    }
    return 1;
    3444:	2001      	movs	r0, #1
    3446:	e004      	b.n	3452 <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
    3448:	f812 3b01 	ldrb.w	r3, [r2], #1
    344c:	7d31      	ldrb	r1, [r6, #20]
    344e:	4299      	cmp	r1, r3
    3450:	d0f6      	beq.n	3440 <hal_flash_is_erased+0x14>
}
    3452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    3454:	f06f 0004 	mvn.w	r0, #4
    3458:	e7fb      	b.n	3452 <hal_flash_is_erased+0x26>

0000345a <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    345a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    345e:	460d      	mov	r5, r1
    3460:	4617      	mov	r7, r2
    3462:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3464:	f7fd f812 	bl	48c <hal_bsp_flash_dev>
    if (!hf) {
    3468:	4604      	mov	r4, r0
    346a:	b1e8      	cbz	r0, 34a8 <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    346c:	4629      	mov	r1, r5
    346e:	f7ff fefd 	bl	326c <hal_flash_check_addr>
    3472:	b9c8      	cbnz	r0, 34a8 <hal_flash_isempty+0x4e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3474:	19a9      	adds	r1, r5, r6
    3476:	4620      	mov	r0, r4
    3478:	f7ff fef8 	bl	326c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    347c:	b9a0      	cbnz	r0, 34a8 <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    347e:	6823      	ldr	r3, [r4, #0]
    3480:	f8d3 8010 	ldr.w	r8, [r3, #16]
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    3484:	463a      	mov	r2, r7
    3486:	4633      	mov	r3, r6
    3488:	4629      	mov	r1, r5
    348a:	4620      	mov	r0, r4
    if (hf->hf_itf->hff_is_empty) {
    348c:	f1b8 0f00 	cmp.w	r8, #0
    3490:	d006      	beq.n	34a0 <hal_flash_isempty+0x46>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    3492:	47c0      	blx	r8
        if (rc < 0) {
    3494:	2800      	cmp	r0, #0
            return SYS_EIO;
    3496:	bfb8      	it	lt
    3498:	f06f 0004 	mvnlt.w	r0, #4
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    349c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    34a4:	f7ff bfc2 	b.w	342c <hal_flash_is_erased>
        return SYS_EINVAL;
    34a8:	f06f 0001 	mvn.w	r0, #1
    34ac:	e7f6      	b.n	349c <hal_flash_isempty+0x42>

000034ae <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    34ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    34b2:	f8d2 a004 	ldr.w	sl, [r2, #4]
    while (num / d >= p->base)
    34b6:	78d6      	ldrb	r6, [r2, #3]
{
    34b8:	4680      	mov	r8, r0
    34ba:	4689      	mov	r9, r1
    34bc:	4693      	mov	fp, r2
    while (num / d >= p->base)
    34be:	2700      	movs	r7, #0
    unsigned long long int d = 1;
    34c0:	2401      	movs	r4, #1
    34c2:	2500      	movs	r5, #0
    while (num / d >= p->base)
    34c4:	4622      	mov	r2, r4
    34c6:	462b      	mov	r3, r5
    34c8:	4640      	mov	r0, r8
    34ca:	4649      	mov	r1, r9
    34cc:	f000 fa42 	bl	3954 <__aeabi_uldivmod>
    34d0:	42b9      	cmp	r1, r7
    34d2:	bf08      	it	eq
    34d4:	42b0      	cmpeq	r0, r6
    34d6:	d20a      	bcs.n	34ee <ui2a+0x40>
    int n = 0;
    34d8:	2300      	movs	r3, #0
    34da:	9301      	str	r3, [sp, #4]
        d *= p->base;
    while (d != 0) {
    34dc:	ea54 0305 	orrs.w	r3, r4, r5
    34e0:	d10d      	bne.n	34fe <ui2a+0x50>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    34e2:	2300      	movs	r3, #0
    34e4:	f88a 3000 	strb.w	r3, [sl]
}
    34e8:	b003      	add	sp, #12
    34ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
    34ee:	fb04 f307 	mul.w	r3, r4, r7
    34f2:	fb06 3305 	mla	r3, r6, r5, r3
    34f6:	fba4 4506 	umull	r4, r5, r4, r6
    34fa:	441d      	add	r5, r3
    34fc:	e7e2      	b.n	34c4 <ui2a+0x16>
    34fe:	4622      	mov	r2, r4
    3500:	462b      	mov	r3, r5
    3502:	4640      	mov	r0, r8
    3504:	4649      	mov	r1, r9
    3506:	f000 fa25 	bl	3954 <__aeabi_uldivmod>
    350a:	4606      	mov	r6, r0
    350c:	460f      	mov	r7, r1
        d /= p->base;
    350e:	4620      	mov	r0, r4
    3510:	4629      	mov	r1, r5
    3512:	4690      	mov	r8, r2
    3514:	4699      	mov	r9, r3
    3516:	f89b 2003 	ldrb.w	r2, [fp, #3]
    351a:	2300      	movs	r3, #0
    351c:	f000 fa1a 	bl	3954 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    3520:	9b01      	ldr	r3, [sp, #4]
        d /= p->base;
    3522:	4604      	mov	r4, r0
    3524:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    3526:	b93b      	cbnz	r3, 3538 <ui2a+0x8a>
    3528:	ea56 0307 	orrs.w	r3, r6, r7
    352c:	d104      	bne.n	3538 <ui2a+0x8a>
    352e:	ea54 0305 	orrs.w	r3, r4, r5
    3532:	d1d3      	bne.n	34dc <ui2a+0x2e>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    3534:	2330      	movs	r3, #48	; 0x30
    3536:	e00a      	b.n	354e <ui2a+0xa0>
    3538:	2f00      	cmp	r7, #0
    353a:	bf08      	it	eq
    353c:	2e0a      	cmpeq	r6, #10
    353e:	d3f9      	bcc.n	3534 <ui2a+0x86>
    3540:	f89b 3002 	ldrb.w	r3, [fp, #2]
    3544:	f013 0f04 	tst.w	r3, #4
    3548:	bf14      	ite	ne
    354a:	2337      	movne	r3, #55	; 0x37
    354c:	2357      	moveq	r3, #87	; 0x57
    354e:	441e      	add	r6, r3
            ++n;
    3550:	9b01      	ldr	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    3552:	f88a 6000 	strb.w	r6, [sl]
            ++n;
    3556:	3301      	adds	r3, #1
    3558:	9301      	str	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    355a:	f10a 0a01 	add.w	sl, sl, #1
    355e:	e7bd      	b.n	34dc <ui2a+0x2e>

00003560 <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
    3560:	b507      	push	{r0, r1, r2, lr}
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    if (stream->vmt->write == NULL) return 0;
    3562:	6803      	ldr	r3, [r0, #0]
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    3564:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    3568:	681b      	ldr	r3, [r3, #0]
    356a:	b91b      	cbnz	r3, 3574 <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
    356c:	2000      	movs	r0, #0
    else
        return 1;
}
    356e:	b003      	add	sp, #12
    3570:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    3574:	2201      	movs	r2, #1
    3576:	f10d 0107 	add.w	r1, sp, #7
    357a:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    357c:	2801      	cmp	r0, #1
    357e:	d1f5      	bne.n	356c <putf+0xc>
    3580:	e7f5      	b.n	356e <putf+0xe>
	...

00003584 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    3584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned written = 0;
    char ch;
    int n = p->width;
    char *bf = p->bf;
    3588:	684b      	ldr	r3, [r1, #4]
    int n = p->width;
    358a:	780c      	ldrb	r4, [r1, #0]
{
    358c:	4607      	mov	r7, r0
    358e:	460e      	mov	r6, r1

    /* Number of filling characters */
    while (*bf++ && n > 0)
    3590:	f813 2b01 	ldrb.w	r2, [r3], #1
    3594:	b10a      	cbz	r2, 359a <putchw+0x16>
    3596:	2c00      	cmp	r4, #0
    3598:	d152      	bne.n	3640 <putchw+0xbc>
        n--;
    if (p->sign)
    359a:	78b3      	ldrb	r3, [r6, #2]
    359c:	07d9      	lsls	r1, r3, #31
        n--;
    if (p->alt && p->base == 16)
    359e:	8873      	ldrh	r3, [r6, #2]
    35a0:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    35a4:	b29b      	uxth	r3, r3
    35a6:	f241 0202 	movw	r2, #4098	; 0x1002
        n--;
    35aa:	bf48      	it	mi
    35ac:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
    if (p->alt && p->base == 16)
    35b0:	4293      	cmp	r3, r2
    35b2:	d147      	bne.n	3644 <putchw+0xc0>
        n -= 2;
    35b4:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    35b6:	6833      	ldr	r3, [r6, #0]
    35b8:	4d38      	ldr	r5, [pc, #224]	; (369c <putchw+0x118>)
    35ba:	401d      	ands	r5, r3
    35bc:	2d00      	cmp	r5, #0
    35be:	d150      	bne.n	3662 <putchw+0xde>
    35c0:	46a0      	mov	r8, r4
        while (n-- > 0)
    35c2:	f1b8 0f00 	cmp.w	r8, #0
    35c6:	dc44      	bgt.n	3652 <putchw+0xce>
    35c8:	1e63      	subs	r3, r4, #1
    35ca:	2c00      	cmp	r4, #0
    35cc:	bfac      	ite	ge
    35ce:	1b1c      	subge	r4, r3, r4
    35d0:	461c      	movlt	r4, r3
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    35d2:	78b3      	ldrb	r3, [r6, #2]
    35d4:	07da      	lsls	r2, r3, #31
    35d6:	d504      	bpl.n	35e2 <putchw+0x5e>
        written += putf(putp, '-');
    35d8:	212d      	movs	r1, #45	; 0x2d
    35da:	4638      	mov	r0, r7
    35dc:	f7ff ffc0 	bl	3560 <putf>
    35e0:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
    35e2:	8873      	ldrh	r3, [r6, #2]
    35e4:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    35e8:	b29b      	uxth	r3, r3
    35ea:	f241 0202 	movw	r2, #4098	; 0x1002
    35ee:	4293      	cmp	r3, r2
    35f0:	d139      	bne.n	3666 <putchw+0xe2>
        written += putf(putp, '0');
    35f2:	2130      	movs	r1, #48	; 0x30
    35f4:	4638      	mov	r0, r7
    35f6:	f7ff ffb3 	bl	3560 <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
    35fa:	78b3      	ldrb	r3, [r6, #2]
    35fc:	f013 0f04 	tst.w	r3, #4
        written += putf(putp, '0');
    3600:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    3602:	bf14      	ite	ne
    3604:	2158      	movne	r1, #88	; 0x58
    3606:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
    3608:	4638      	mov	r0, r7
    360a:	f7ff ffa9 	bl	3560 <putf>
    360e:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    3610:	7873      	ldrb	r3, [r6, #1]
    3612:	b143      	cbz	r3, 3626 <putchw+0xa2>
    3614:	46a0      	mov	r8, r4
        while (n-- > 0)
    3616:	f1b8 0f00 	cmp.w	r8, #0
    361a:	dc2a      	bgt.n	3672 <putchw+0xee>
    361c:	1e63      	subs	r3, r4, #1
    361e:	2c00      	cmp	r4, #0
    3620:	bfac      	ite	ge
    3622:	1b1c      	subge	r4, r3, r4
    3624:	461c      	movlt	r4, r3
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    3626:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
    362a:	f818 1b01 	ldrb.w	r1, [r8], #1
    362e:	bb41      	cbnz	r1, 3682 <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    3630:	78b3      	ldrb	r3, [r6, #2]
    3632:	071b      	lsls	r3, r3, #28
    3634:	d501      	bpl.n	363a <putchw+0xb6>
        while (n-- > 0)
    3636:	2c00      	cmp	r4, #0
    3638:	dc28      	bgt.n	368c <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
    363a:	4628      	mov	r0, r5
    363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
    3640:	3c01      	subs	r4, #1
    3642:	e7a5      	b.n	3590 <putchw+0xc>
    else if (p->alt && p->base == 8)
    3644:	f640 0202 	movw	r2, #2050	; 0x802
    3648:	4293      	cmp	r3, r2
        n--;
    364a:	bf08      	it	eq
    364c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    3650:	e7b1      	b.n	35b6 <putchw+0x32>
            written += putf(putp, ' ');
    3652:	2120      	movs	r1, #32
    3654:	4638      	mov	r0, r7
    3656:	f7ff ff83 	bl	3560 <putf>
    365a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    365e:	4405      	add	r5, r0
    3660:	e7af      	b.n	35c2 <putchw+0x3e>
    unsigned written = 0;
    3662:	2500      	movs	r5, #0
    3664:	e7b5      	b.n	35d2 <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
    3666:	f640 0202 	movw	r2, #2050	; 0x802
    366a:	4293      	cmp	r3, r2
    366c:	d1d0      	bne.n	3610 <putchw+0x8c>
        written += putf(putp, '0');
    366e:	2130      	movs	r1, #48	; 0x30
    3670:	e7ca      	b.n	3608 <putchw+0x84>
            written += putf(putp, '0');
    3672:	2130      	movs	r1, #48	; 0x30
    3674:	4638      	mov	r0, r7
    3676:	f7ff ff73 	bl	3560 <putf>
    367a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    367e:	4405      	add	r5, r0
    3680:	e7c9      	b.n	3616 <putchw+0x92>
        written += putf(putp, ch);
    3682:	4638      	mov	r0, r7
    3684:	f7ff ff6c 	bl	3560 <putf>
    3688:	4405      	add	r5, r0
    368a:	e7ce      	b.n	362a <putchw+0xa6>
            written += putf(putp, ' ');
    368c:	2120      	movs	r1, #32
    368e:	4638      	mov	r0, r7
    3690:	f7ff ff66 	bl	3560 <putf>
    3694:	3c01      	subs	r4, #1
    3696:	4405      	add	r5, r0
    3698:	e7cd      	b.n	3636 <putchw+0xb2>
    369a:	bf00      	nop
    369c:	0008ff00 	.word	0x0008ff00

000036a0 <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    36a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36a4:	b089      	sub	sp, #36	; 0x24
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    36a6:	ad02      	add	r5, sp, #8
    size_t written = 0;
    36a8:	2600      	movs	r6, #0
{
    36aa:	4607      	mov	r7, r0
    36ac:	4614      	mov	r4, r2
    p.bf = bf;
    36ae:	9501      	str	r5, [sp, #4]
    while ((ch = *(fmt++))) {
        if (ch != '%') {
            written += putf(putp, ch);
        } else {
            /* Init parameter struct */
            p.lz = 0;
    36b0:	46b0      	mov	r8, r6
    while ((ch = *(fmt++))) {
    36b2:	f101 0901 	add.w	r9, r1, #1
    36b6:	7809      	ldrb	r1, [r1, #0]
    36b8:	b919      	cbnz	r1, 36c2 <tfp_format+0x22>
        }
    }
 abort:;
 
 return written;
}
    36ba:	4630      	mov	r0, r6
    36bc:	b009      	add	sp, #36	; 0x24
    36be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
    36c2:	2925      	cmp	r1, #37	; 0x25
    36c4:	d003      	beq.n	36ce <tfp_format+0x2e>
                written += putf(putp, ch);
    36c6:	4638      	mov	r0, r7
    36c8:	f7ff ff4a 	bl	3560 <putf>
    36cc:	e100      	b.n	38d0 <tfp_format+0x230>
            p.alt = 0;
    36ce:	f89d 3002 	ldrb.w	r3, [sp, #2]
            p.lz = 0;
    36d2:	f88d 8001 	strb.w	r8, [sp, #1]
            p.uc = 0;
    36d6:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
    36da:	f368 0382 	bfi	r3, r8, #2, #1
    36de:	f88d 3002 	strb.w	r3, [sp, #2]
            while ((ch = *(fmt++))) {
    36e2:	2300      	movs	r3, #0
            p.width = 0;
    36e4:	f88d 8000 	strb.w	r8, [sp]
    while ((ch = *(fmt++))) {
    36e8:	4648      	mov	r0, r9
            while ((ch = *(fmt++))) {
    36ea:	461a      	mov	r2, r3
    36ec:	f819 1b01 	ldrb.w	r1, [r9], #1
    36f0:	b949      	cbnz	r1, 3706 <tfp_format+0x66>
    36f2:	b10b      	cbz	r3, 36f8 <tfp_format+0x58>
    36f4:	f88d 2001 	strb.w	r2, [sp, #1]
            } else if (ch >= '0' && ch <= '9') {
    36f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    36fc:	2b09      	cmp	r3, #9
    36fe:	d835      	bhi.n	376c <tfp_format+0xcc>
    int num = 0;
    3700:	2200      	movs	r2, #0
        num = num * base + digit;
    3702:	200a      	movs	r0, #10
    3704:	e057      	b.n	37b6 <tfp_format+0x116>
                switch (ch) {
    3706:	292d      	cmp	r1, #45	; 0x2d
    3708:	d010      	beq.n	372c <tfp_format+0x8c>
    370a:	2930      	cmp	r1, #48	; 0x30
    370c:	d008      	beq.n	3720 <tfp_format+0x80>
    370e:	2923      	cmp	r1, #35	; 0x23
    3710:	d118      	bne.n	3744 <tfp_format+0xa4>
                    p.alt = 1;
    3712:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3716:	f041 0102 	orr.w	r1, r1, #2
    371a:	f88d 1002 	strb.w	r1, [sp, #2]
                    continue;
    371e:	e003      	b.n	3728 <tfp_format+0x88>
                    if (!p.left) {
    3720:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3724:	0709      	lsls	r1, r1, #28
    3726:	d50a      	bpl.n	373e <tfp_format+0x9e>
                    p.lz = 0;
    3728:	4648      	mov	r0, r9
    372a:	e7df      	b.n	36ec <tfp_format+0x4c>
                    p.left = 1;
    372c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3730:	f043 0308 	orr.w	r3, r3, #8
    3734:	f88d 3002 	strb.w	r3, [sp, #2]
                    p.lz = 0;
    3738:	2200      	movs	r2, #0
                    continue;
    373a:	2301      	movs	r3, #1
    373c:	e7f4      	b.n	3728 <tfp_format+0x88>
    373e:	2301      	movs	r3, #1
                        p.lz = 1;
    3740:	461a      	mov	r2, r3
    3742:	e7f1      	b.n	3728 <tfp_format+0x88>
    3744:	b10b      	cbz	r3, 374a <tfp_format+0xaa>
    3746:	f88d 2001 	strb.w	r2, [sp, #1]
            if (ch == '*') {
    374a:	292a      	cmp	r1, #42	; 0x2a
    374c:	d1d4      	bne.n	36f8 <tfp_format+0x58>
            val = va_arg(*va, int);
    374e:	6823      	ldr	r3, [r4, #0]
                if (i > UCHAR_MAX) {
    3750:	2bff      	cmp	r3, #255	; 0xff
            val = va_arg(*va, int);
    3752:	f104 0204 	add.w	r2, r4, #4
                if (i > UCHAR_MAX) {
    3756:	dd03      	ble.n	3760 <tfp_format+0xc0>
                    p.width = UCHAR_MAX;
    3758:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
    375a:	f88d 3000 	strb.w	r3, [sp]
    375e:	e001      	b.n	3764 <tfp_format+0xc4>
                } else if (i > 0) {
    3760:	2b00      	cmp	r3, #0
    3762:	dcfa      	bgt.n	375a <tfp_format+0xba>
                ch = *(fmt++);
    3764:	7841      	ldrb	r1, [r0, #1]
    3766:	f100 0902 	add.w	r9, r0, #2
            val = va_arg(*va, int);
    376a:	4614      	mov	r4, r2
            if (ch == 'l') {
    376c:	296c      	cmp	r1, #108	; 0x6c
    376e:	d13b      	bne.n	37e8 <tfp_format+0x148>
                ch = *(fmt++);
    3770:	f899 1000 	ldrb.w	r1, [r9]
                if (ch == 'l') {
    3774:	296c      	cmp	r1, #108	; 0x6c
                    ch = *(fmt++);
    3776:	bf0d      	iteet	eq
    3778:	f899 1001 	ldrbeq.w	r1, [r9, #1]
                ch = *(fmt++);
    377c:	f109 0901 	addne.w	r9, r9, #1
                lng = 1;
    3780:	2301      	movne	r3, #1
                    ch = *(fmt++);
    3782:	f109 0902 	addeq.w	r9, r9, #2
                    lng = 2;
    3786:	bf08      	it	eq
    3788:	2302      	moveq	r3, #2
            if (ch == 'z') {
    378a:	297a      	cmp	r1, #122	; 0x7a
                ch = *(fmt++);
    378c:	bf04      	itt	eq
    378e:	f899 1000 	ldrbeq.w	r1, [r9]
    3792:	f109 0901 	addeq.w	r9, r9, #1
            switch (ch) {
    3796:	2969      	cmp	r1, #105	; 0x69
    3798:	d02c      	beq.n	37f4 <tfp_format+0x154>
    379a:	d83a      	bhi.n	3812 <tfp_format+0x172>
    379c:	2958      	cmp	r1, #88	; 0x58
    379e:	d064      	beq.n	386a <tfp_format+0x1ca>
    37a0:	d824      	bhi.n	37ec <tfp_format+0x14c>
    37a2:	2900      	cmp	r1, #0
    37a4:	d089      	beq.n	36ba <tfp_format+0x1a>
    37a6:	2925      	cmp	r1, #37	; 0x25
    37a8:	d08d      	beq.n	36c6 <tfp_format+0x26>
                v = va_arg(va, void *);
    37aa:	4649      	mov	r1, r9
    37ac:	e781      	b.n	36b2 <tfp_format+0x12>
        ch = *p++;
    37ae:	f819 1b01 	ldrb.w	r1, [r9], #1
        num = num * base + digit;
    37b2:	fb00 3202 	mla	r2, r0, r2, r3
    if (ch >= '0' && ch <= '9')
    37b6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    37ba:	fa5f fc83 	uxtb.w	ip, r3
    37be:	f1bc 0f09 	cmp.w	ip, #9
    37c2:	d9f4      	bls.n	37ae <tfp_format+0x10e>
    else if (ch >= 'a' && ch <= 'f')
    37c4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
    37c8:	2b05      	cmp	r3, #5
    37ca:	d806      	bhi.n	37da <tfp_format+0x13a>
        return ch - 'a' + 10;
    37cc:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
    37d0:	2b0a      	cmp	r3, #10
    37d2:	ddec      	ble.n	37ae <tfp_format+0x10e>
    *nump = num;
    37d4:	f88d 2000 	strb.w	r2, [sp]
    37d8:	e7c8      	b.n	376c <tfp_format+0xcc>
    else if (ch >= 'A' && ch <= 'F')
    37da:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    37de:	2b05      	cmp	r3, #5
    37e0:	d8f8      	bhi.n	37d4 <tfp_format+0x134>
        return ch - 'A' + 10;
    37e2:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
    37e6:	e7f3      	b.n	37d0 <tfp_format+0x130>
            lng = 0;
    37e8:	2300      	movs	r3, #0
    37ea:	e7ce      	b.n	378a <tfp_format+0xea>
            switch (ch) {
    37ec:	2963      	cmp	r1, #99	; 0x63
    37ee:	d077      	beq.n	38e0 <tfp_format+0x240>
    37f0:	2964      	cmp	r1, #100	; 0x64
    37f2:	d1da      	bne.n	37aa <tfp_format+0x10a>
                p.base = 10;
    37f4:	220a      	movs	r2, #10
    37f6:	f88d 2003 	strb.w	r2, [sp, #3]
    switch (lng) {
    37fa:	2b00      	cmp	r3, #0
    37fc:	d051      	beq.n	38a2 <tfp_format+0x202>
    37fe:	2b01      	cmp	r3, #1
    3800:	d04f      	beq.n	38a2 <tfp_format+0x202>
            val = va_arg(*va, long long);
    3802:	3407      	adds	r4, #7
    3804:	f024 0307 	bic.w	r3, r4, #7
    3808:	f103 0408 	add.w	r4, r3, #8
    380c:	e9d3 0100 	ldrd	r0, r1, [r3]
    3810:	e04a      	b.n	38a8 <tfp_format+0x208>
            switch (ch) {
    3812:	2973      	cmp	r1, #115	; 0x73
    3814:	d06c      	beq.n	38f0 <tfp_format+0x250>
    3816:	d824      	bhi.n	3862 <tfp_format+0x1c2>
    3818:	296f      	cmp	r1, #111	; 0x6f
    381a:	d05b      	beq.n	38d4 <tfp_format+0x234>
    381c:	2970      	cmp	r1, #112	; 0x70
    381e:	d1c4      	bne.n	37aa <tfp_format+0x10a>
                ui2a((uintptr_t)v, &p);
    3820:	466a      	mov	r2, sp
                v = va_arg(va, void *);
    3822:	6820      	ldr	r0, [r4, #0]
                p.base = 16;
    3824:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
    3826:	2100      	movs	r1, #0
                p.base = 16;
    3828:	f88d 3003 	strb.w	r3, [sp, #3]
                ui2a((uintptr_t)v, &p);
    382c:	f7ff fe3f 	bl	34ae <ui2a>
                p.width = 2 * sizeof(void*);
    3830:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
    3834:	2130      	movs	r1, #48	; 0x30
    3836:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
    3838:	f8ad 3000 	strh.w	r3, [sp]
                written += putf(putp, '0');
    383c:	f7ff fe90 	bl	3560 <putf>
                written += putf(putp, 'x');
    3840:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
    3842:	4683      	mov	fp, r0
                written += putf(putp, 'x');
    3844:	4638      	mov	r0, r7
    3846:	f7ff fe8b 	bl	3560 <putf>
                v = va_arg(va, void *);
    384a:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
    384e:	4669      	mov	r1, sp
                written += putf(putp, 'x');
    3850:	4604      	mov	r4, r0
                written += putchw(putp, &p);
    3852:	4638      	mov	r0, r7
    3854:	f7ff fe96 	bl	3584 <putchw>
    3858:	4406      	add	r6, r0
    385a:	445e      	add	r6, fp
    385c:	4426      	add	r6, r4
                p.bf = va_arg(va, char *);
    385e:	4654      	mov	r4, sl
                break;
    3860:	e7a3      	b.n	37aa <tfp_format+0x10a>
            switch (ch) {
    3862:	2975      	cmp	r1, #117	; 0x75
    3864:	d019      	beq.n	389a <tfp_format+0x1fa>
    3866:	2978      	cmp	r1, #120	; 0x78
    3868:	d19f      	bne.n	37aa <tfp_format+0x10a>
                p.base = 16;
    386a:	2210      	movs	r2, #16
    386c:	f88d 2003 	strb.w	r2, [sp, #3]
                p.uc = (ch == 'X');
    3870:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    3874:	4251      	negs	r1, r2
    3876:	4151      	adcs	r1, r2
    3878:	f89d 2002 	ldrb.w	r2, [sp, #2]
    387c:	f361 0282 	bfi	r2, r1, #2, #1
    3880:	f88d 2002 	strb.w	r2, [sp, #2]
    switch (lng) {
    3884:	b343      	cbz	r3, 38d8 <tfp_format+0x238>
    3886:	2b01      	cmp	r3, #1
    3888:	d026      	beq.n	38d8 <tfp_format+0x238>
            val = va_arg(*va, unsigned long long);
    388a:	3407      	adds	r4, #7
    388c:	f024 0307 	bic.w	r3, r4, #7
    3890:	f103 0408 	add.w	r4, r3, #8
    3894:	e9d3 0100 	ldrd	r0, r1, [r3]
    3898:	e013      	b.n	38c2 <tfp_format+0x222>
                p.base = 10;
    389a:	220a      	movs	r2, #10
                p.base = 8;
    389c:	f88d 2003 	strb.w	r2, [sp, #3]
    38a0:	e7f0      	b.n	3884 <tfp_format+0x1e4>
            val = va_arg(*va, long);
    38a2:	6820      	ldr	r0, [r4, #0]
    38a4:	3404      	adds	r4, #4
    38a6:	17c1      	asrs	r1, r0, #31
    if (num < 0) {
    38a8:	2800      	cmp	r0, #0
    38aa:	f171 0300 	sbcs.w	r3, r1, #0
    38ae:	da08      	bge.n	38c2 <tfp_format+0x222>
        p->sign = 1;
    38b0:	f89d 3002 	ldrb.w	r3, [sp, #2]
        num = -num;
    38b4:	4240      	negs	r0, r0
        p->sign = 1;
    38b6:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
    38ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    38be:	f88d 3002 	strb.w	r3, [sp, #2]
                ui2a(intarg(lng, 0, &va), &p);
    38c2:	466a      	mov	r2, sp
    38c4:	f7ff fdf3 	bl	34ae <ui2a>
                written += putchw(putp, &p);
    38c8:	4669      	mov	r1, sp
    38ca:	4638      	mov	r0, r7
    38cc:	f7ff fe5a 	bl	3584 <putchw>
                written += putf(putp, ch);
    38d0:	4406      	add	r6, r0
                break;
    38d2:	e76a      	b.n	37aa <tfp_format+0x10a>
                p.base = 8;
    38d4:	2208      	movs	r2, #8
    38d6:	e7e1      	b.n	389c <tfp_format+0x1fc>
            val = va_arg(*va, unsigned long);
    38d8:	6820      	ldr	r0, [r4, #0]
    38da:	2100      	movs	r1, #0
    38dc:	3404      	adds	r4, #4
    38de:	e7f0      	b.n	38c2 <tfp_format+0x222>
                written += putf(putp, (char)(va_arg(va, int)));
    38e0:	7821      	ldrb	r1, [r4, #0]
    38e2:	4638      	mov	r0, r7
    38e4:	f7ff fe3c 	bl	3560 <putf>
    38e8:	f104 0a04 	add.w	sl, r4, #4
    38ec:	4406      	add	r6, r0
    38ee:	e7b6      	b.n	385e <tfp_format+0x1be>
                p.bf = va_arg(va, char *);
    38f0:	6823      	ldr	r3, [r4, #0]
    38f2:	9301      	str	r3, [sp, #4]
                written += putchw(putp, &p);
    38f4:	4669      	mov	r1, sp
    38f6:	4638      	mov	r0, r7
    38f8:	f7ff fe44 	bl	3584 <putchw>
                p.bf = va_arg(va, char *);
    38fc:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
    3900:	4406      	add	r6, r0
                p.bf = bf;
    3902:	9501      	str	r5, [sp, #4]
    3904:	e7ab      	b.n	385e <tfp_format+0x1be>

00003906 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
    3906:	f7ff becb 	b.w	36a0 <tfp_format>
	...

0000390c <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    390c:	b40f      	push	{r0, r1, r2, r3}
    390e:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
    3910:	4b06      	ldr	r3, [pc, #24]	; (392c <printf+0x20>)
{
    3912:	aa04      	add	r2, sp, #16
    return tfp_format(f, fmt, va);
    3914:	6818      	ldr	r0, [r3, #0]
{
    3916:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    391a:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
    391c:	f7ff fec0 	bl	36a0 <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
    3920:	b003      	add	sp, #12
    3922:	f85d eb04 	ldr.w	lr, [sp], #4
    3926:	b004      	add	sp, #16
    3928:	4770      	bx	lr
    392a:	bf00      	nop
    392c:	00004008 	.word	0x00004008

00003930 <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
    3930:	4b02      	ldr	r3, [pc, #8]	; (393c <vprintf+0xc>)
    3932:	460a      	mov	r2, r1
    3934:	4601      	mov	r1, r0
    3936:	6818      	ldr	r0, [r3, #0]
    3938:	f7ff bfe5 	b.w	3906 <vfprintf>
    393c:	00004008 	.word	0x00004008

00003940 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    3940:	2000      	movs	r0, #0
    3942:	4770      	bx	lr

00003944 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    3944:	b510      	push	{r4, lr}
    3946:	4608      	mov	r0, r1
    3948:	4614      	mov	r4, r2
    console_write(bp, n);
    394a:	4611      	mov	r1, r2
    394c:	f7fd ff9e 	bl	188c <console_write>
    return n;
}
    3950:	4620      	mov	r0, r4
    3952:	bd10      	pop	{r4, pc}

00003954 <__aeabi_uldivmod>:
    3954:	b953      	cbnz	r3, 396c <__aeabi_uldivmod+0x18>
    3956:	b94a      	cbnz	r2, 396c <__aeabi_uldivmod+0x18>
    3958:	2900      	cmp	r1, #0
    395a:	bf08      	it	eq
    395c:	2800      	cmpeq	r0, #0
    395e:	bf1c      	itt	ne
    3960:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    3964:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3968:	f000 b972 	b.w	3c50 <__aeabi_idiv0>
    396c:	f1ad 0c08 	sub.w	ip, sp, #8
    3970:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    3974:	f000 f806 	bl	3984 <__udivmoddi4>
    3978:	f8dd e004 	ldr.w	lr, [sp, #4]
    397c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3980:	b004      	add	sp, #16
    3982:	4770      	bx	lr

00003984 <__udivmoddi4>:
    3984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3988:	9e08      	ldr	r6, [sp, #32]
    398a:	4604      	mov	r4, r0
    398c:	4688      	mov	r8, r1
    398e:	2b00      	cmp	r3, #0
    3990:	d14b      	bne.n	3a2a <__udivmoddi4+0xa6>
    3992:	428a      	cmp	r2, r1
    3994:	4615      	mov	r5, r2
    3996:	d967      	bls.n	3a68 <__udivmoddi4+0xe4>
    3998:	fab2 f282 	clz	r2, r2
    399c:	b14a      	cbz	r2, 39b2 <__udivmoddi4+0x2e>
    399e:	f1c2 0720 	rsb	r7, r2, #32
    39a2:	fa01 f302 	lsl.w	r3, r1, r2
    39a6:	fa20 f707 	lsr.w	r7, r0, r7
    39aa:	4095      	lsls	r5, r2
    39ac:	ea47 0803 	orr.w	r8, r7, r3
    39b0:	4094      	lsls	r4, r2
    39b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    39b6:	0c23      	lsrs	r3, r4, #16
    39b8:	fbb8 f7fe 	udiv	r7, r8, lr
    39bc:	fa1f fc85 	uxth.w	ip, r5
    39c0:	fb0e 8817 	mls	r8, lr, r7, r8
    39c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    39c8:	fb07 f10c 	mul.w	r1, r7, ip
    39cc:	4299      	cmp	r1, r3
    39ce:	d909      	bls.n	39e4 <__udivmoddi4+0x60>
    39d0:	18eb      	adds	r3, r5, r3
    39d2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    39d6:	f080 811b 	bcs.w	3c10 <__udivmoddi4+0x28c>
    39da:	4299      	cmp	r1, r3
    39dc:	f240 8118 	bls.w	3c10 <__udivmoddi4+0x28c>
    39e0:	3f02      	subs	r7, #2
    39e2:	442b      	add	r3, r5
    39e4:	1a5b      	subs	r3, r3, r1
    39e6:	b2a4      	uxth	r4, r4
    39e8:	fbb3 f0fe 	udiv	r0, r3, lr
    39ec:	fb0e 3310 	mls	r3, lr, r0, r3
    39f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    39f4:	fb00 fc0c 	mul.w	ip, r0, ip
    39f8:	45a4      	cmp	ip, r4
    39fa:	d909      	bls.n	3a10 <__udivmoddi4+0x8c>
    39fc:	192c      	adds	r4, r5, r4
    39fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    3a02:	f080 8107 	bcs.w	3c14 <__udivmoddi4+0x290>
    3a06:	45a4      	cmp	ip, r4
    3a08:	f240 8104 	bls.w	3c14 <__udivmoddi4+0x290>
    3a0c:	3802      	subs	r0, #2
    3a0e:	442c      	add	r4, r5
    3a10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    3a14:	eba4 040c 	sub.w	r4, r4, ip
    3a18:	2700      	movs	r7, #0
    3a1a:	b11e      	cbz	r6, 3a24 <__udivmoddi4+0xa0>
    3a1c:	40d4      	lsrs	r4, r2
    3a1e:	2300      	movs	r3, #0
    3a20:	e9c6 4300 	strd	r4, r3, [r6]
    3a24:	4639      	mov	r1, r7
    3a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a2a:	428b      	cmp	r3, r1
    3a2c:	d909      	bls.n	3a42 <__udivmoddi4+0xbe>
    3a2e:	2e00      	cmp	r6, #0
    3a30:	f000 80eb 	beq.w	3c0a <__udivmoddi4+0x286>
    3a34:	2700      	movs	r7, #0
    3a36:	e9c6 0100 	strd	r0, r1, [r6]
    3a3a:	4638      	mov	r0, r7
    3a3c:	4639      	mov	r1, r7
    3a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a42:	fab3 f783 	clz	r7, r3
    3a46:	2f00      	cmp	r7, #0
    3a48:	d147      	bne.n	3ada <__udivmoddi4+0x156>
    3a4a:	428b      	cmp	r3, r1
    3a4c:	d302      	bcc.n	3a54 <__udivmoddi4+0xd0>
    3a4e:	4282      	cmp	r2, r0
    3a50:	f200 80fa 	bhi.w	3c48 <__udivmoddi4+0x2c4>
    3a54:	1a84      	subs	r4, r0, r2
    3a56:	eb61 0303 	sbc.w	r3, r1, r3
    3a5a:	2001      	movs	r0, #1
    3a5c:	4698      	mov	r8, r3
    3a5e:	2e00      	cmp	r6, #0
    3a60:	d0e0      	beq.n	3a24 <__udivmoddi4+0xa0>
    3a62:	e9c6 4800 	strd	r4, r8, [r6]
    3a66:	e7dd      	b.n	3a24 <__udivmoddi4+0xa0>
    3a68:	b902      	cbnz	r2, 3a6c <__udivmoddi4+0xe8>
    3a6a:	deff      	udf	#255	; 0xff
    3a6c:	fab2 f282 	clz	r2, r2
    3a70:	2a00      	cmp	r2, #0
    3a72:	f040 808f 	bne.w	3b94 <__udivmoddi4+0x210>
    3a76:	1b49      	subs	r1, r1, r5
    3a78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    3a7c:	fa1f f885 	uxth.w	r8, r5
    3a80:	2701      	movs	r7, #1
    3a82:	fbb1 fcfe 	udiv	ip, r1, lr
    3a86:	0c23      	lsrs	r3, r4, #16
    3a88:	fb0e 111c 	mls	r1, lr, ip, r1
    3a8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3a90:	fb08 f10c 	mul.w	r1, r8, ip
    3a94:	4299      	cmp	r1, r3
    3a96:	d907      	bls.n	3aa8 <__udivmoddi4+0x124>
    3a98:	18eb      	adds	r3, r5, r3
    3a9a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    3a9e:	d202      	bcs.n	3aa6 <__udivmoddi4+0x122>
    3aa0:	4299      	cmp	r1, r3
    3aa2:	f200 80cd 	bhi.w	3c40 <__udivmoddi4+0x2bc>
    3aa6:	4684      	mov	ip, r0
    3aa8:	1a59      	subs	r1, r3, r1
    3aaa:	b2a3      	uxth	r3, r4
    3aac:	fbb1 f0fe 	udiv	r0, r1, lr
    3ab0:	fb0e 1410 	mls	r4, lr, r0, r1
    3ab4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    3ab8:	fb08 f800 	mul.w	r8, r8, r0
    3abc:	45a0      	cmp	r8, r4
    3abe:	d907      	bls.n	3ad0 <__udivmoddi4+0x14c>
    3ac0:	192c      	adds	r4, r5, r4
    3ac2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    3ac6:	d202      	bcs.n	3ace <__udivmoddi4+0x14a>
    3ac8:	45a0      	cmp	r8, r4
    3aca:	f200 80b6 	bhi.w	3c3a <__udivmoddi4+0x2b6>
    3ace:	4618      	mov	r0, r3
    3ad0:	eba4 0408 	sub.w	r4, r4, r8
    3ad4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    3ad8:	e79f      	b.n	3a1a <__udivmoddi4+0x96>
    3ada:	f1c7 0c20 	rsb	ip, r7, #32
    3ade:	40bb      	lsls	r3, r7
    3ae0:	fa22 fe0c 	lsr.w	lr, r2, ip
    3ae4:	ea4e 0e03 	orr.w	lr, lr, r3
    3ae8:	fa01 f407 	lsl.w	r4, r1, r7
    3aec:	fa20 f50c 	lsr.w	r5, r0, ip
    3af0:	fa21 f30c 	lsr.w	r3, r1, ip
    3af4:	ea4f 481e 	mov.w	r8, lr, lsr #16
    3af8:	4325      	orrs	r5, r4
    3afa:	fbb3 f9f8 	udiv	r9, r3, r8
    3afe:	0c2c      	lsrs	r4, r5, #16
    3b00:	fb08 3319 	mls	r3, r8, r9, r3
    3b04:	fa1f fa8e 	uxth.w	sl, lr
    3b08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    3b0c:	fb09 f40a 	mul.w	r4, r9, sl
    3b10:	429c      	cmp	r4, r3
    3b12:	fa02 f207 	lsl.w	r2, r2, r7
    3b16:	fa00 f107 	lsl.w	r1, r0, r7
    3b1a:	d90b      	bls.n	3b34 <__udivmoddi4+0x1b0>
    3b1c:	eb1e 0303 	adds.w	r3, lr, r3
    3b20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    3b24:	f080 8087 	bcs.w	3c36 <__udivmoddi4+0x2b2>
    3b28:	429c      	cmp	r4, r3
    3b2a:	f240 8084 	bls.w	3c36 <__udivmoddi4+0x2b2>
    3b2e:	f1a9 0902 	sub.w	r9, r9, #2
    3b32:	4473      	add	r3, lr
    3b34:	1b1b      	subs	r3, r3, r4
    3b36:	b2ad      	uxth	r5, r5
    3b38:	fbb3 f0f8 	udiv	r0, r3, r8
    3b3c:	fb08 3310 	mls	r3, r8, r0, r3
    3b40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    3b44:	fb00 fa0a 	mul.w	sl, r0, sl
    3b48:	45a2      	cmp	sl, r4
    3b4a:	d908      	bls.n	3b5e <__udivmoddi4+0x1da>
    3b4c:	eb1e 0404 	adds.w	r4, lr, r4
    3b50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    3b54:	d26b      	bcs.n	3c2e <__udivmoddi4+0x2aa>
    3b56:	45a2      	cmp	sl, r4
    3b58:	d969      	bls.n	3c2e <__udivmoddi4+0x2aa>
    3b5a:	3802      	subs	r0, #2
    3b5c:	4474      	add	r4, lr
    3b5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    3b62:	fba0 8902 	umull	r8, r9, r0, r2
    3b66:	eba4 040a 	sub.w	r4, r4, sl
    3b6a:	454c      	cmp	r4, r9
    3b6c:	46c2      	mov	sl, r8
    3b6e:	464b      	mov	r3, r9
    3b70:	d354      	bcc.n	3c1c <__udivmoddi4+0x298>
    3b72:	d051      	beq.n	3c18 <__udivmoddi4+0x294>
    3b74:	2e00      	cmp	r6, #0
    3b76:	d069      	beq.n	3c4c <__udivmoddi4+0x2c8>
    3b78:	ebb1 050a 	subs.w	r5, r1, sl
    3b7c:	eb64 0403 	sbc.w	r4, r4, r3
    3b80:	fa04 fc0c 	lsl.w	ip, r4, ip
    3b84:	40fd      	lsrs	r5, r7
    3b86:	40fc      	lsrs	r4, r7
    3b88:	ea4c 0505 	orr.w	r5, ip, r5
    3b8c:	e9c6 5400 	strd	r5, r4, [r6]
    3b90:	2700      	movs	r7, #0
    3b92:	e747      	b.n	3a24 <__udivmoddi4+0xa0>
    3b94:	f1c2 0320 	rsb	r3, r2, #32
    3b98:	fa20 f703 	lsr.w	r7, r0, r3
    3b9c:	4095      	lsls	r5, r2
    3b9e:	fa01 f002 	lsl.w	r0, r1, r2
    3ba2:	fa21 f303 	lsr.w	r3, r1, r3
    3ba6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    3baa:	4338      	orrs	r0, r7
    3bac:	0c01      	lsrs	r1, r0, #16
    3bae:	fbb3 f7fe 	udiv	r7, r3, lr
    3bb2:	fa1f f885 	uxth.w	r8, r5
    3bb6:	fb0e 3317 	mls	r3, lr, r7, r3
    3bba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3bbe:	fb07 f308 	mul.w	r3, r7, r8
    3bc2:	428b      	cmp	r3, r1
    3bc4:	fa04 f402 	lsl.w	r4, r4, r2
    3bc8:	d907      	bls.n	3bda <__udivmoddi4+0x256>
    3bca:	1869      	adds	r1, r5, r1
    3bcc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    3bd0:	d22f      	bcs.n	3c32 <__udivmoddi4+0x2ae>
    3bd2:	428b      	cmp	r3, r1
    3bd4:	d92d      	bls.n	3c32 <__udivmoddi4+0x2ae>
    3bd6:	3f02      	subs	r7, #2
    3bd8:	4429      	add	r1, r5
    3bda:	1acb      	subs	r3, r1, r3
    3bdc:	b281      	uxth	r1, r0
    3bde:	fbb3 f0fe 	udiv	r0, r3, lr
    3be2:	fb0e 3310 	mls	r3, lr, r0, r3
    3be6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3bea:	fb00 f308 	mul.w	r3, r0, r8
    3bee:	428b      	cmp	r3, r1
    3bf0:	d907      	bls.n	3c02 <__udivmoddi4+0x27e>
    3bf2:	1869      	adds	r1, r5, r1
    3bf4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    3bf8:	d217      	bcs.n	3c2a <__udivmoddi4+0x2a6>
    3bfa:	428b      	cmp	r3, r1
    3bfc:	d915      	bls.n	3c2a <__udivmoddi4+0x2a6>
    3bfe:	3802      	subs	r0, #2
    3c00:	4429      	add	r1, r5
    3c02:	1ac9      	subs	r1, r1, r3
    3c04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    3c08:	e73b      	b.n	3a82 <__udivmoddi4+0xfe>
    3c0a:	4637      	mov	r7, r6
    3c0c:	4630      	mov	r0, r6
    3c0e:	e709      	b.n	3a24 <__udivmoddi4+0xa0>
    3c10:	4607      	mov	r7, r0
    3c12:	e6e7      	b.n	39e4 <__udivmoddi4+0x60>
    3c14:	4618      	mov	r0, r3
    3c16:	e6fb      	b.n	3a10 <__udivmoddi4+0x8c>
    3c18:	4541      	cmp	r1, r8
    3c1a:	d2ab      	bcs.n	3b74 <__udivmoddi4+0x1f0>
    3c1c:	ebb8 0a02 	subs.w	sl, r8, r2
    3c20:	eb69 020e 	sbc.w	r2, r9, lr
    3c24:	3801      	subs	r0, #1
    3c26:	4613      	mov	r3, r2
    3c28:	e7a4      	b.n	3b74 <__udivmoddi4+0x1f0>
    3c2a:	4660      	mov	r0, ip
    3c2c:	e7e9      	b.n	3c02 <__udivmoddi4+0x27e>
    3c2e:	4618      	mov	r0, r3
    3c30:	e795      	b.n	3b5e <__udivmoddi4+0x1da>
    3c32:	4667      	mov	r7, ip
    3c34:	e7d1      	b.n	3bda <__udivmoddi4+0x256>
    3c36:	4681      	mov	r9, r0
    3c38:	e77c      	b.n	3b34 <__udivmoddi4+0x1b0>
    3c3a:	3802      	subs	r0, #2
    3c3c:	442c      	add	r4, r5
    3c3e:	e747      	b.n	3ad0 <__udivmoddi4+0x14c>
    3c40:	f1ac 0c02 	sub.w	ip, ip, #2
    3c44:	442b      	add	r3, r5
    3c46:	e72f      	b.n	3aa8 <__udivmoddi4+0x124>
    3c48:	4638      	mov	r0, r7
    3c4a:	e708      	b.n	3a5e <__udivmoddi4+0xda>
    3c4c:	4637      	mov	r7, r6
    3c4e:	e6e9      	b.n	3a24 <__udivmoddi4+0xa0>

00003c50 <__aeabi_idiv0>:
    3c50:	4770      	bx	lr
    3c52:	bf00      	nop
    3c54:	72617453 	.word	0x72617453
    3c58:	676e6974 	.word	0x676e6974
    3c5c:	55434d20 	.word	0x55434d20
    3c60:	746f6f42 	.word	0x746f6f42
    3c64:	002e2e2e 	.word	0x002e2e2e

00003c68 <flash_devs>:
    3c68:	00003cbc 200000e8                       .<..... 

00003c70 <spiflash_characteristics>:
    3c70:	00007530 00061a80 0001d4c0 000c3500     0u...........5..
    3c80:	000249f0 000f4240 002dc6c0 00989680     .I..@B....-.....
    3c90:	000002bc 00000bb8 00000014 00000032     ............2...

00003ca0 <spiflash_flash_funcs>:
    3ca0:	000005fd 00000679 000007e3 000004d9     ....y...........
    3cb0:	00000000 000008f5 00000891              ............

00003cbc <nrf52k_flash_dev>:
    3cbc:	00003cd4 00000000 00080000 00000080     .<..............
    3ccc:	00000001 000000ff                       ........

00003cd4 <nrf52k_flash_funcs>:
    3cd4:	00000a71 000009a9 00000959 00000a7f     q.......Y.......
    3ce4:	00000000 000009a5 00000000              ............

00003cf0 <CSWTCH.24>:
    3cf0:	06040200                                ....

00003cf4 <nrf52_hal_spis>:
    3cf4:	20006298 00000000 00000000              .b. ........

00003d00 <os_bsp_spi0m_cfg>:
    3d00:	00040302                                ....

00003d04 <nrf52_hal_timers>:
    3d04:	200062c0 00000000 00000000 00000000     .b. ............
	...
    3d1c:	65737341 40207472 25783020 41000a78     Assert @ 0x%x..A
    3d2c:	72657373 20402074 78257830 25202d20     ssert @ 0x%x - %
    3d3c:	64253a73 6e55000a 646e6168 2064656c     s:%d..Unhandled 
    3d4c:	65746e69 70757272 25282074 2c29646c     interrupt (%ld),
    3d5c:	63786520 69747065 73206e6f 78302070      exception sp 0x
    3d6c:	6c383025 20000a78 303a3072 38302578     %08lx.. r0:0x%08
    3d7c:	2020786c 303a3172 38302578 2020786c     lx  r1:0x%08lx  
    3d8c:	303a3272 38302578 2020786c 303a3372     r2:0x%08lx  r3:0
    3d9c:	38302578 000a786c 3a347220 30257830     x%08lx.. r4:0x%0
    3dac:	20786c38 3a357220 30257830 20786c38     8lx  r5:0x%08lx 
    3dbc:	3a367220 30257830 20786c38 3a377220      r6:0x%08lx  r7:
    3dcc:	30257830 0a786c38 38722000 2578303a     0x%08lx.. r8:0x%
    3ddc:	786c3830 39722020 2578303a 786c3830     08lx  r9:0x%08lx
    3dec:	30317220 2578303a 786c3830 31317220      r10:0x%08lx r11
    3dfc:	2578303a 786c3830 3172000a 78303a32     :0x%08lx..r12:0x
    3e0c:	6c383025 6c202078 78303a72 6c383025     %08lx  lr:0x%08l
    3e1c:	70202078 78303a63 6c383025 73702078     x  pc:0x%08lx ps
    3e2c:	78303a72 6c383025 49000a78 3a525343     r:0x%08lx..ICSR:
    3e3c:	30257830 20786c38 52534648 2578303a     0x%08lx HFSR:0x%
    3e4c:	786c3830 53464320 78303a52 6c383025     08lx CFSR:0x%08l
    3e5c:	42000a78 3a524146 30257830 20786c38     x..BFAR:0x%08lx 
    3e6c:	41464d4d 78303a52 6c383025 6d000a78     MMFAR:0x%08lx..m
    3e7c:	5f737973 30250031 20756c36 00000000     sys_1.%06lu ....

00003e8c <sysflash_map_dflt>:
	...
    3e94:	00006000 00000001 00008000 00074000     .`...........@..
    3ea4:	00000102 00000000 00074000 00000003     .........@......
    3eb4:	0007c000 00001000 00000010 00006000     .............`..
    3ec4:	00002000 00000111 00074000 0038c000     . .......@....8.

00003ed4 <boot_status_tables>:
    3ed4:	00010501 02030501 01040104 02030403     ................

00003ee4 <boot_img_magic>:
    3ee4:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00003ef4 <boot_swap_tables>:
    3ef4:	03040104 01040204 03040104 04030301     ................
    3f04:	00000401                                ....

00003f08 <K>:
    3f08:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    3f18:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    3f28:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    3f38:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    3f48:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    3f58:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    3f68:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    3f78:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    3f88:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    3f98:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    3fa8:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    3fb8:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    3fc8:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    3fd8:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    3fe8:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    3ff8:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00004008 <stdout>:
    4008:	20000150                                P.. 

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  16420	    132	  25212	  41764	   a324	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
