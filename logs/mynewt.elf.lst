
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x00013bd0 vaddr 0x00003bd0 paddr 0x00003bd0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00003be8 memsz 0x00003be8 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x00003be8 align 2**16
         filesz 0x0000006c memsz 0x000018d0 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00003bd0  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00003bd0  00003bd0  00020144  2**0  CONTENTS
  2 .ARM.exidx         00000018  00003bd0  00003bd0  00013bd0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  00020144  2**0  CONTENTS
  5 .data              0000006c  200000d8  00003be8  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  20000144  20000144  00020144  2**0  CONTENTS
  7 .bss               00001864  20000144  00003c54  00020144  2**2  ALLOC
  8 .stack_dummy       000001b0  200019a8  200019a8  00020148  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  000202f8  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  00020327  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203a6  2**0  CONTENTS, READONLY
 12 .debug_line        0000ac9e  00000000  00000000  000203aa  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        0001b68a  00000000  00000000  0002b048  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      00004c7c  00000000  00000000  000466d2  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00000cf0  00000000  00000000  0004b350  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00004a66  00000000  00000000  0004c040  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         00009814  00000000  00000000  00050aa6  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      00000ac0  00000000  00000000  0005a2ba  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       000020d4  00000000  00000000  0005ad7c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00003bd0 l    d  .ARM.extab	00000000 .ARM.extab
00003bd0 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000144 l    d  .bss	00000000 .bss
200019a8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001ec l     F .text	0000003c errata_16
00000228 l     F .text	0000004c errata_31
00000274 l     F .text	0000003c errata_32
000002b0 l     F .text	0000004c errata_36
000002fc l     F .text	0000003c errata_37
00000338 l     F .text	0000003c errata_57
00000374 l     F .text	0000003c errata_66
000003b0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
000039a0 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
00000694 l     F .text	00000014 hal_spiflash_sector_info
000006a8 l     F .text	0000002e spiflash_release_power_down_generic
000006d6 l     F .text	00000008 spiflash_delay_us
00000778 l     F .text	00000050 spiflash_wait_ready_till
000007de l     F .text	0000006a hal_spiflash_read
00000868 l     F .text	000000c8 hal_spiflash_write
00000930 l     F .text	00000078 spiflash_execute_erase
000009a8 l     F .text	0000002c spiflash_erase_cmd
000009e2 l     F .text	00000008 hal_spiflash_erase_sector
00000ab4 l     F .text	00000008 hal_spiflash_erase
00000b20 l     F .text	0000003e hal_spiflash_init
000039d8 l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
000039a8 l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000b64 l     F .text	00000028 nrf52k_flash_wait_ready
00000b8c l     F .text	00000054 nrf52k_flash_erase_sector
00000be0 l     F .text	00000004 nrf52k_flash_init
00000be4 l     F .text	00000020 nrf52k_flash_sector_info
00000c04 l     F .text	000000d0 nrf52k_flash_write
00000cd4 l     F .text	0000000e nrf52k_flash_read
00003a0c l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
00000d3c l     F .text	0000006e nrf52_irqm_handler
00000dc4 l     F .text	00000014 hal_spi_stop_transfer
00000dd8 l     F .text	0000004a hal_spi_config_slave
00000e24 l     F .text	000000b8 hal_spi_init_master
00000edc l     F .text	000000de hal_spi_config_master
00003a28 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
00001232 l     F .text	0000000e nrf52_hal_wdt_default_handler
00001240 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
000012d8 l     F .text	00000034 nrf52_periph_create_timers
0000130c l     F .text	00000020 nrf52_periph_create_spi
00003a34 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
00001338 l     F .text	0000000a nrf_read_timer_cntr
00001344 l     F .text	000000b4 nrf_timer_set_ocmp
000013f8 l     F .text	0000000a nrf_timer_disable_ocmp
00001402 l     F .text	0000000a nrf_rtc_disable_ocmp
0000140c l     F .text	00000054 hal_timer_read_bsptimer
00001460 l     F .text	00000076 hal_timer_chk_queue
000014d6 l     F .text	0000002c hal_timer_irq_handler
00003a38 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00001770 l       .text	00000000 SVC_User
0000178e l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00001814 l       .text	00000000 test1
00001808 l       .text	00000000 loop1
0000181a l       .text	00000000 res1
00001836 l       .text	00000000 test2
0000183e l       .text	00000000 done
0000182a l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000184a l       .text	00000000 test1
00001846 l       .text	00000000 loop1
00001858 l       .text	00000000 test2
00001854 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 flash_map.c
00001896 l     F .text	00000078 flash_map_read_mfg
20000148 l     O .bss	00000078 mfg_areas.7780
00000000 l    df *ABS*	00000000 mfg.c
00001abc l     F .text	00000094 mfg_seek_next_aux
00001b50 l     F .text	00000070 mfg_read_mmr
00001bc0 l     F .text	00000054 mfg_read_next_mmr
00001c14 l     F .text	0000003c mfg_open_flash_area
00001c50 l     F .text	00000044 mfg_read_tlv_body
00001d08 l     F .text	0000004e mfg_read_mmr_refs
200001c0 l     O .bss	00000001 mfg_initialized
200001c4 l     O .bss	00000018 mfg_mmrs
200001dc l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 sysinit.c
00001d56 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
00001d5c l     F .text	00000040 boot_is_header_valid
00001d9c l     F .text	0000001c boot_write_sz
00001db8 l     F .text	0000009c boot_read_image_size
00001e54 l     F .text	00000054 boot_check_header_erased
00001ea8 l     F .text	00000048 boot_initialize_area
00001ef0 l     F .text	0000003a boot_read_sectors
00001f2c l     F .text	00000034 boot_image_check
00001f60 l     F .text	0000007e boot_validate_slot
00001fde l     F .text	00000038 boot_validated_swap_type
00002016 l     F .text	00000036 boot_read_image_headers
00002084 l     F .text	0000009c boot_swap_image
00002120 l     F .text	00000078 boot_complete_partial_swap
00002198 l     F .text	00000058 boot_perform_update
000021f0 l     F .text	000000be boot_prepare_image_for_update
200001e0 l     O .bss	0000006c boot_data
2000024c l     O .bss	00000400 buf.4971
2000064c l     O .bss	00000600 primary_slot_sectors.5011
20000c4c l     O .bss	00000600 scratch_sectors.5013
2000124c l     O .bss	00000600 secondary_slot_sectors.5012
2000184c l     O .bss	00000100 tmpbuf.4904
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00002692 l     F .text	0000002e boot_copy_sz
000026c0 l     F .text	00000332 boot_swap_sectors
00003a98 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002cda l     F .text	0000000c boot_flag_decode
00002ce8 l     F .text	00000018 boot_magic_decode
00002d00 l     F .text	00000060 boot_find_status
00002d60 l     F .text	0000006a boot_write_trailer
00002dca l     F .text	00000016 boot_write_trailer_flag
00003abc l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
000030a4 l     F .text	0000007e bootutil_img_hash
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00003ad0 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
0000370c l     F .text	0000001e hal_flash_check_addr
2000194c l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
200019a8 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
00000144  w    F .text	00000002 RTC0_IRQHandler
00002e58 g     F .text	000000c0 boot_read_swap_state
000024a0 g     F .text	00000010 boot_go
200000d8 g       .data	00000000 __data_start__
000039f4 g     O .text	00000018 nrf52k_flash_dev
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00000d1a g     F .text	00000022 hal_gpio_write
00003420 g     F .text	00000128 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
00001514 g     F .text	00000060 hal_timer_init
00001ca6 g     F .text	0000001a mfg_seek_next_with_type
00001228 g     F .text	0000000a hal_system_start
00002fa4 g     F .text	00000044 boot_write_swap_info
00003752 g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
00002de0 g     F .text	00000020 boot_magic_compatible_check
000017be g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
00001504 g     F .text	00000010 nrf52_timer0_irq_handler
00000144  w    F .text	00000002 PWM1_IRQHandler
200019a0 g     O .bss	00000004 flash_map
0000390c g     F .text	00000030 hal_flash_is_erased
00001794 g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
00003be8 g       .ARM.exidx	00000000 __exidx_end
00003370 g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000174 g     F .text	0000002c hal_system_reset
20000140 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
00003be8 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
000019f2 g     F .text	00000026 flash_area_write
20000144 g       .bssnz	00000000 __bssnz_start__
00000a26 g     F .text	0000008e spiflash_erase
00000144  w    F .text	00000002 PDM_IRQHandler
000024b0 g     F .text	00000084 swap_erase_trailer_sectors
00002378 g     F .text	00000128 context_boot_go
00002af2 g     F .text	000000e0 boot_slots_compatible
00001cc0 g     F .text	0000000a mfg_read_tlv_flash_area
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
0000170c g     F .text	0000000a timer_handler
00002c5c g     F .text	0000007e swap_run
00001844 g     F .text	0000001a memcpy
00001260 g     F .text	00000078 hal_watchdog_init
000016d8 g     F .text	0000000c os_cputime_init
00002658 g     F .text	0000003a swap_set_image_ok
0000393c g     F .text	00000062 hal_flash_isempty
00000000 g       *ABS*	00000000 _imghdr_size
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
000019cc g     F .text	00000026 flash_area_read
0000169c g     F .text	00000024 __assert_func
00000dac g     F .text	00000018 nrf52_spi0_irq_handler
0000013c  w    F .text	00000002 UsageFault_Handler
00000a0a g     F .text	0000001c spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
2000fe50 g       *ABS*	00000000 __HeapLimit
20000144 g       .bss	00000000 __bss_start__
00000164 g     F .text	00000010 hal_debugger_connected
000037c8 g     F .text	00000074 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00002e12 g     F .text	0000001e boot_status_entries
00002e00 g     F .text	00000008 boot_status_sz
20001994 g     O .bss	00000004 g_current_task
00001716 g     F .text	0000000c os_arch_save_sr
000029f2 g     F .text	00000034 boot_read_image_header
00002f68 g     F .text	00000020 boot_write_magic
00000abc g     F .text	00000064 spiflash_identify
000016ee g     F .text	00000016 os_cputime_delay_ticks
00003bd0 g       .text	00000000 __exidx_start
00002316 g     F .text	00000008 boot_erase_region
00002bd4 g     F .text	00000088 swap_status_source
00001cca g     F .text	0000000a mfg_read_tlv_mmr_ref
00001734 g     F .text	00000014 os_set_env
00000640 g     F .text	00000014 hal_bsp_flash_dev
0000132c g     F .text	0000000c nrf52_periph_create
00001a3e g     F .text	0000000a flash_area_align
00000144  w    F .text	00000002 I2S_IRQHandler
000005da g     F .text	00000002 _init
0000383c g     F .text	000000d0 hal_flash_erase
00002e52 g     F .text	00000006 boot_swap_info_off
00002fe8 g     F .text	00000022 boot_write_swap_size
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
000022ae g     F .text	00000068 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
0000300c g     F .text	00000098 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
00002f38 g     F .text	00000030 boot_read_swap_size
0000263a g     F .text	0000001e swap_set_copy_done
000017ca g     F .text	0000001e os_default_irq_asm
000025be g     F .text	0000007c swap_read_status
00001cd4 g     F .text	00000024 mfg_init
00000148 g     F .text	00000010 _sbrkInit
20000144 g       .bssnz	00000000 __bssnz_end__
00001a60 g     F .text	0000005c flash_map_init
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00002a28 g     F .text	000000b0 swap_read_status_bytes
00000144  w    F .text	00000002 PWM2_IRQHandler
20000144 g       .data	00000000 __data_end__
000035ce g     F .text	0000013e mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
2000199c g     O .bss	00000004 g_os_time
000010a8 g     F .text	00000060 hal_spi_init
200019a8 g       .bss	00000000 __bss_end__
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00000762 g     F .text	00000016 spiflash_device_ready
00000144 g     F .text	00000002 Default_Handler
000005cc g     F .text	0000000e _start
00002f88 g     F .text	0000000e boot_write_copy_done
00002ad8 g     F .text	0000001a boot_status_internal_off
00001748 g     F .text	00000006 os_arch_init_task_stack
00003aac g     O .text	00000010 boot_img_magic
00000ce2 g     F .text	00000038 hal_gpio_init_out
20000140 g     O .data	00000004 sysinit_panic_cb
00002060 g     F .text	00000022 boot_status_is_reset
000016c0 g     F .text	00000018 os_default_irq
000009d4 g     F .text	0000000e spiflash_sector_erase
00001a48 g     F .text	0000000a flash_area_erased_val
00002534 g     F .text	0000008a swap_status_init
20001998 g     O .bss	00000004 g_os_last_ctx_sw_time
000017fc g     F .text	00000048 memcmp
00001574 g     F .text	000000f8 hal_timer_config
0000335e g     F .text	00000012 flash_area_id_from_multi_image_slot
0000204c g     F .text	00000014 boot_status_reset
00002320 g     F .text	00000058 boot_copy_region
00001910 g     F .text	00000040 flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
00002f18 g     F .text	00000020 boot_read_swap_state_by_id
0000185e g     F .text	00000038 memset
00000000 g       .text	000000d8 __isr_vector
000005e2 g     F .text	0000005e main
00001150 g     F .text	0000002c hal_spi_set_txrx_cb
000006de g     F .text	0000005a spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
0000174e g     F .text	00000046 SVC_Handler
00003772 g     F .text	00000054 hal_flash_read
0000166c g     F .text	00000030 hal_timer_read
00001a18 g     F .text	00000026 flash_area_erase
20001950 g     O .bss	00000028 nrf52_hal_spi0
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
200019a4 g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00001c94 g     F .text	00000012 mfg_seek_next
00001a52 g     F .text	0000000e flash_area_read_is_empty
00002e30 g     F .text	00000022 boot_status_off
0000040c g     F .text	000001c0 SystemInit
000016e4 g     F .text	0000000a os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
00003762 g     F .text	00000010 hal_flash_erased_val
00003122 g     F .text	000000ba bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
00001108 g     F .text	00000048 hal_spi_tx_val
00000848 g     F .text	00000020 spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
00000fbc g     F .text	00000038 hal_spi_config
00001950 g     F .text	0000007c flash_area_to_sectors
00003a50 g     O .text	00000048 sysflash_map_dflt
20001978 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
00000ff4 g     F .text	0000004c hal_spi_enable
00001704 g     F .text	00000008 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
000007c8 g     F .text	00000016 spiflash_wait_ready
000009fa g     F .text	00000010 spiflash_block_64k_erase
00001cf8 g     F .text	00000010 mfg_open
20000138 g     O .data	00000008 g_os_run_list
00000660 g     F .text	00000034 NVIC_Relocate
20000144 g     O .bss	00000004 os_flags
2000fe50 g       *ABS*	000001b0 __StackLimit
00003548 g     F .text	00000086 mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000003fc g     F .text	00000010 SystemCoreClockUpdate
0000117c g     F .text	000000ac hal_spi_txrx
000031dc g     F .text	000000ca bootutil_tlv_iter_begin
00000b5e g     F .text	00000006 _exit
000001a0 g     F .text	0000004c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
00000738 g     F .text	0000002a spiflash_read_status
00001724 g     F .text	00000010 os_time_advance
0000372a g     F .text	00000028 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00000654 g     F .text	0000000c hal_bsp_init
00001040 g     F .text	00000068 hal_spi_disable
000005dc g     F .text	00000006 flash_device_base
000009ea g     F .text	00000010 spiflash_block_32k_erase
00002e08 g     F .text	0000000a boot_trailer_sz
000032a6 g     F .text	000000b8 bootutil_tlv_iter_next
00002f96 g     F .text	0000000e boot_write_image_ok
0000337c g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       8:	00000135 	.word	0x00000135
       c:	00000137 	.word	0x00000137
	...
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      2c:	0000174f 	.word	0x0000174f
	...
      38:	00001795 	.word	0x00001795
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      3c:	000017bf 	.word	0x000017bf
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      48:	00000145 	.word	0x00000145
      4c:	00000145 	.word	0x00000145
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      50:	00000145 	.word	0x00000145
      54:	00000145 	.word	0x00000145
      58:	00000145 	.word	0x00000145
      5c:	00000145 	.word	0x00000145
      60:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
                break;
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      74:	00000145 	.word	0x00000145
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	20000144 	.word	0x20000144
    ldr     r3, =__bss_end__
     114:	200019a8 	.word	0x200019a8
    ldr    r1, =__etext
     118:	00003be8 	.word	0x00003be8
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
     124:	200019a8 	.word	0x200019a8
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	0000040d 	.word	0x0000040d
    LDR     R0, =_start
     130:	000005cd 	.word	0x000005cd

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
     14a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
     14c:	6059      	str	r1, [r3, #4]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b02      	ldr	r3, [pc, #8]	; (170 <hal_debugger_connected+0xc>)
     166:	6818      	ldr	r0, [r3, #0]
}
     168:	f000 0001 	and.w	r0, r0, #1
     16c:	4770      	bx	lr
     16e:	bf00      	nop
     170:	e000edf0 	.word	0xe000edf0

00000174 <hal_system_reset>:
{
     174:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
     176:	f7ff fff5 	bl	164 <hal_debugger_connected>
     17a:	b100      	cbz	r0, 17e <hal_system_reset+0xa>
            asm("bkpt");
     17c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     17e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     182:	4905      	ldr	r1, [pc, #20]	; (198 <hal_system_reset+0x24>)
     184:	68ca      	ldr	r2, [r1, #12]
     186:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     18a:	4b04      	ldr	r3, [pc, #16]	; (19c <hal_system_reset+0x28>)
     18c:	4313      	orrs	r3, r2
     18e:	60cb      	str	r3, [r1, #12]
     190:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     194:	bf00      	nop
     196:	e7fd      	b.n	194 <hal_system_reset+0x20>
     198:	e000ed00 	.word	0xe000ed00
     19c:	05fa0004 	.word	0x05fa0004

000001a0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <Stack_Size+0x38>)
     1aa:	4013      	ands	r3, r2
     1ac:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1b0:	d018      	beq.n	1e4 <Stack_Size+0x34>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1b6:	2201      	movs	r2, #1
     1b8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1ba:	2100      	movs	r1, #0
     1bc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     1ce:	2b00      	cmp	r3, #0
     1d0:	d0f9      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1d6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <Stack_Size+0x38>)
     1dc:	4013      	ands	r3, r2
     1de:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1e2:	d1f0      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1e4:	4770      	bx	lr
     1e6:	bf00      	nop
     1e8:	00010003 	.word	0x00010003

000001ec <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1ec:	4b0b      	ldr	r3, [pc, #44]	; (21c <errata_16+0x30>)
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b06      	cmp	r3, #6
     1f2:	d001      	beq.n	1f8 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     1f4:	2000      	movs	r0, #0
     1f6:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1f8:	4b09      	ldr	r3, [pc, #36]	; (220 <errata_16+0x34>)
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	f013 0f0f 	tst.w	r3, #15
     200:	d107      	bne.n	212 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <errata_16+0x38>)
     204:	681b      	ldr	r3, [r3, #0]
     206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     20a:	2b30      	cmp	r3, #48	; 0x30
     20c:	d003      	beq.n	216 <errata_16+0x2a>
    return false;
     20e:	2000      	movs	r0, #0
     210:	4770      	bx	lr
     212:	2000      	movs	r0, #0
     214:	4770      	bx	lr
            return true;
     216:	2001      	movs	r0, #1
}
     218:	4770      	bx	lr
     21a:	bf00      	nop
     21c:	f0000fe0 	.word	0xf0000fe0
     220:	f0000fe4 	.word	0xf0000fe4
     224:	f0000fe8 	.word	0xf0000fe8

00000228 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     228:	4b0f      	ldr	r3, [pc, #60]	; (268 <errata_31+0x40>)
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	2b06      	cmp	r3, #6
     22e:	d001      	beq.n	234 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     230:	2000      	movs	r0, #0
     232:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     234:	4b0d      	ldr	r3, [pc, #52]	; (26c <errata_31+0x44>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	f013 0f0f 	tst.w	r3, #15
     23c:	d10b      	bne.n	256 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     23e:	4b0c      	ldr	r3, [pc, #48]	; (270 <errata_31+0x48>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     246:	2b30      	cmp	r3, #48	; 0x30
     248:	d007      	beq.n	25a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     24a:	2b40      	cmp	r3, #64	; 0x40
     24c:	d007      	beq.n	25e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     24e:	2b50      	cmp	r3, #80	; 0x50
     250:	d007      	beq.n	262 <errata_31+0x3a>
    return false;
     252:	2000      	movs	r0, #0
     254:	4770      	bx	lr
     256:	2000      	movs	r0, #0
     258:	4770      	bx	lr
            return true;
     25a:	2001      	movs	r0, #1
     25c:	4770      	bx	lr
            return true;
     25e:	2001      	movs	r0, #1
     260:	4770      	bx	lr
            return true;
     262:	2001      	movs	r0, #1
}
     264:	4770      	bx	lr
     266:	bf00      	nop
     268:	f0000fe0 	.word	0xf0000fe0
     26c:	f0000fe4 	.word	0xf0000fe4
     270:	f0000fe8 	.word	0xf0000fe8

00000274 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     274:	4b0b      	ldr	r3, [pc, #44]	; (2a4 <errata_32+0x30>)
     276:	781b      	ldrb	r3, [r3, #0]
     278:	2b06      	cmp	r3, #6
     27a:	d001      	beq.n	280 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     27c:	2000      	movs	r0, #0
     27e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <errata_32+0x34>)
     282:	681b      	ldr	r3, [r3, #0]
     284:	f013 0f0f 	tst.w	r3, #15
     288:	d107      	bne.n	29a <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     28a:	4b08      	ldr	r3, [pc, #32]	; (2ac <errata_32+0x38>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     292:	2b30      	cmp	r3, #48	; 0x30
     294:	d003      	beq.n	29e <errata_32+0x2a>
    return false;
     296:	2000      	movs	r0, #0
     298:	4770      	bx	lr
     29a:	2000      	movs	r0, #0
     29c:	4770      	bx	lr
            return true;
     29e:	2001      	movs	r0, #1
}
     2a0:	4770      	bx	lr
     2a2:	bf00      	nop
     2a4:	f0000fe0 	.word	0xf0000fe0
     2a8:	f0000fe4 	.word	0xf0000fe4
     2ac:	f0000fe8 	.word	0xf0000fe8

000002b0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2b0:	4b0f      	ldr	r3, [pc, #60]	; (2f0 <errata_36+0x40>)
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	2b06      	cmp	r3, #6
     2b6:	d001      	beq.n	2bc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     2b8:	2000      	movs	r0, #0
     2ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <errata_36+0x44>)
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	f013 0f0f 	tst.w	r3, #15
     2c4:	d10b      	bne.n	2de <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     2c6:	4b0c      	ldr	r3, [pc, #48]	; (2f8 <errata_36+0x48>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2ce:	2b30      	cmp	r3, #48	; 0x30
     2d0:	d007      	beq.n	2e2 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     2d2:	2b40      	cmp	r3, #64	; 0x40
     2d4:	d007      	beq.n	2e6 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d6:	2b50      	cmp	r3, #80	; 0x50
     2d8:	d007      	beq.n	2ea <errata_36+0x3a>
    return false;
     2da:	2000      	movs	r0, #0
     2dc:	4770      	bx	lr
     2de:	2000      	movs	r0, #0
     2e0:	4770      	bx	lr
            return true;
     2e2:	2001      	movs	r0, #1
     2e4:	4770      	bx	lr
            return true;
     2e6:	2001      	movs	r0, #1
     2e8:	4770      	bx	lr
            return true;
     2ea:	2001      	movs	r0, #1
}
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop
     2f0:	f0000fe0 	.word	0xf0000fe0
     2f4:	f0000fe4 	.word	0xf0000fe4
     2f8:	f0000fe8 	.word	0xf0000fe8

000002fc <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2fc:	4b0b      	ldr	r3, [pc, #44]	; (32c <errata_37+0x30>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	2b06      	cmp	r3, #6
     302:	d001      	beq.n	308 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     304:	2000      	movs	r0, #0
     306:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <errata_37+0x34>)
     30a:	681b      	ldr	r3, [r3, #0]
     30c:	f013 0f0f 	tst.w	r3, #15
     310:	d107      	bne.n	322 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     312:	4b08      	ldr	r3, [pc, #32]	; (334 <errata_37+0x38>)
     314:	681b      	ldr	r3, [r3, #0]
     316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     31a:	2b30      	cmp	r3, #48	; 0x30
     31c:	d003      	beq.n	326 <errata_37+0x2a>
    return false;
     31e:	2000      	movs	r0, #0
     320:	4770      	bx	lr
     322:	2000      	movs	r0, #0
     324:	4770      	bx	lr
            return true;
     326:	2001      	movs	r0, #1
}
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	f0000fe0 	.word	0xf0000fe0
     330:	f0000fe4 	.word	0xf0000fe4
     334:	f0000fe8 	.word	0xf0000fe8

00000338 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     338:	4b0b      	ldr	r3, [pc, #44]	; (368 <errata_57+0x30>)
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	2b06      	cmp	r3, #6
     33e:	d001      	beq.n	344 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <errata_57+0x34>)
     346:	681b      	ldr	r3, [r3, #0]
     348:	f013 0f0f 	tst.w	r3, #15
     34c:	d107      	bne.n	35e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     34e:	4b08      	ldr	r3, [pc, #32]	; (370 <errata_57+0x38>)
     350:	681b      	ldr	r3, [r3, #0]
     352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     356:	2b30      	cmp	r3, #48	; 0x30
     358:	d003      	beq.n	362 <errata_57+0x2a>
    return false;
     35a:	2000      	movs	r0, #0
     35c:	4770      	bx	lr
     35e:	2000      	movs	r0, #0
     360:	4770      	bx	lr
            return true;
     362:	2001      	movs	r0, #1
}
     364:	4770      	bx	lr
     366:	bf00      	nop
     368:	f0000fe0 	.word	0xf0000fe0
     36c:	f0000fe4 	.word	0xf0000fe4
     370:	f0000fe8 	.word	0xf0000fe8

00000374 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     374:	4b0b      	ldr	r3, [pc, #44]	; (3a4 <errata_66+0x30>)
     376:	781b      	ldrb	r3, [r3, #0]
     378:	2b06      	cmp	r3, #6
     37a:	d001      	beq.n	380 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     37c:	2000      	movs	r0, #0
     37e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <errata_66+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f013 0f0f 	tst.w	r3, #15
     388:	d107      	bne.n	39a <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     38a:	4b08      	ldr	r3, [pc, #32]	; (3ac <errata_66+0x38>)
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     392:	2b50      	cmp	r3, #80	; 0x50
     394:	d003      	beq.n	39e <errata_66+0x2a>
    return false;
     396:	2000      	movs	r0, #0
     398:	4770      	bx	lr
     39a:	2000      	movs	r0, #0
     39c:	4770      	bx	lr
            return true;
     39e:	2001      	movs	r0, #1
}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	f0000fe0 	.word	0xf0000fe0
     3a8:	f0000fe4 	.word	0xf0000fe4
     3ac:	f0000fe8 	.word	0xf0000fe8

000003b0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3b0:	4b0f      	ldr	r3, [pc, #60]	; (3f0 <errata_108+0x40>)
     3b2:	781b      	ldrb	r3, [r3, #0]
     3b4:	2b06      	cmp	r3, #6
     3b6:	d001      	beq.n	3bc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     3b8:	2000      	movs	r0, #0
     3ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3bc:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <errata_108+0x44>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f013 0f0f 	tst.w	r3, #15
     3c4:	d10b      	bne.n	3de <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     3c6:	4b0c      	ldr	r3, [pc, #48]	; (3f8 <errata_108+0x48>)
     3c8:	681b      	ldr	r3, [r3, #0]
     3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     3ce:	2b30      	cmp	r3, #48	; 0x30
     3d0:	d007      	beq.n	3e2 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     3d2:	2b40      	cmp	r3, #64	; 0x40
     3d4:	d007      	beq.n	3e6 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     3d6:	2b50      	cmp	r3, #80	; 0x50
     3d8:	d007      	beq.n	3ea <errata_108+0x3a>
    return false;
     3da:	2000      	movs	r0, #0
     3dc:	4770      	bx	lr
     3de:	2000      	movs	r0, #0
     3e0:	4770      	bx	lr
            return true;
     3e2:	2001      	movs	r0, #1
     3e4:	4770      	bx	lr
            return true;
     3e6:	2001      	movs	r0, #1
     3e8:	4770      	bx	lr
            return true;
     3ea:	2001      	movs	r0, #1
}
     3ec:	4770      	bx	lr
     3ee:	bf00      	nop
     3f0:	f0000fe0 	.word	0xf0000fe0
     3f4:	f0000fe4 	.word	0xf0000fe4
     3f8:	f0000fe8 	.word	0xf0000fe8

000003fc <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <SystemCoreClockUpdate+0x8>)
     3fe:	4a02      	ldr	r2, [pc, #8]	; (408 <SystemCoreClockUpdate+0xc>)
     400:	601a      	str	r2, [r3, #0]
}
     402:	4770      	bx	lr
     404:	200000e4 	.word	0x200000e4
     408:	03d09000 	.word	0x03d09000

0000040c <SystemInit>:
{
     40c:	b508      	push	{r3, lr}
    if (errata_16()){
     40e:	f7ff feed 	bl	1ec <errata_16>
     412:	b110      	cbz	r0, 41a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     414:	4b60      	ldr	r3, [pc, #384]	; (598 <SystemInit+0x18c>)
     416:	4a61      	ldr	r2, [pc, #388]	; (59c <SystemInit+0x190>)
     418:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     41a:	f7ff ff05 	bl	228 <errata_31>
     41e:	b128      	cbz	r0, 42c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     420:	4b5f      	ldr	r3, [pc, #380]	; (5a0 <SystemInit+0x194>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	f3c3 3342 	ubfx	r3, r3, #13, #3
     428:	4a5e      	ldr	r2, [pc, #376]	; (5a4 <SystemInit+0x198>)
     42a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     42c:	f7ff ff22 	bl	274 <errata_32>
     430:	b120      	cbz	r0, 43c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     432:	4a5d      	ldr	r2, [pc, #372]	; (5a8 <SystemInit+0x19c>)
     434:	68d3      	ldr	r3, [r2, #12]
     436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     43a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     43c:	f7ff ff38 	bl	2b0 <errata_36>
     440:	b140      	cbz	r0, 454 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     446:	2200      	movs	r2, #0
     448:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     44c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     450:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     454:	f7ff ff52 	bl	2fc <errata_37>
     458:	b110      	cbz	r0, 460 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     45a:	4b54      	ldr	r3, [pc, #336]	; (5ac <SystemInit+0x1a0>)
     45c:	2203      	movs	r2, #3
     45e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     460:	f7ff ff6a 	bl	338 <errata_57>
     464:	b158      	cbz	r0, 47e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     466:	4b52      	ldr	r3, [pc, #328]	; (5b0 <SystemInit+0x1a4>)
     468:	2205      	movs	r2, #5
     46a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     46c:	3378      	adds	r3, #120	; 0x78
     46e:	2201      	movs	r2, #1
     470:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     472:	3b70      	subs	r3, #112	; 0x70
     474:	2200      	movs	r2, #0
     476:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     478:	3b04      	subs	r3, #4
     47a:	223f      	movs	r2, #63	; 0x3f
     47c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
     47e:	f7ff ff79 	bl	374 <errata_66>
     482:	2800      	cmp	r0, #0
     484:	d046      	beq.n	514 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     48a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     48e:	4b49      	ldr	r3, [pc, #292]	; (5b4 <SystemInit+0x1a8>)
     490:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     494:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     498:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     49c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     4a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     4a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     4a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     4ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     4b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     4b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     4b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     4bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     4c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     4c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     4c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     4cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     4d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     4d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     4d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     4dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     4e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     4e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     4e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     4ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     4f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     4f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     4f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     4fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     500:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     504:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     508:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     50c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     510:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     514:	f7ff ff4c 	bl	3b0 <errata_108>
     518:	b128      	cbz	r0, 526 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <SystemInit+0x1ac>)
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     522:	4a26      	ldr	r2, [pc, #152]	; (5bc <SystemInit+0x1b0>)
     524:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     526:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     52a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     52e:	f013 0f01 	tst.w	r3, #1
     532:	d104      	bne.n	53e <SystemInit+0x132>
    SystemCoreClockUpdate();
     534:	f7ff ff62 	bl	3fc <SystemCoreClockUpdate>
    NVIC_Relocate();
     538:	f000 f892 	bl	660 <NVIC_Relocate>
}
     53c:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     53e:	4b20      	ldr	r3, [pc, #128]	; (5c0 <SystemInit+0x1b4>)
     540:	2201      	movs	r2, #1
     542:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     546:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <SystemInit+0x1b4>)
     548:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     54c:	2b00      	cmp	r3, #0
     54e:	d0fa      	beq.n	546 <SystemInit+0x13a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     550:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     554:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     558:	f023 0301 	bic.w	r3, r3, #1
     55c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     560:	4b17      	ldr	r3, [pc, #92]	; (5c0 <SystemInit+0x1b4>)
     562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     566:	2b00      	cmp	r3, #0
     568:	d0fa      	beq.n	560 <SystemInit+0x154>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     56a:	4b15      	ldr	r3, [pc, #84]	; (5c0 <SystemInit+0x1b4>)
     56c:	2200      	movs	r2, #0
     56e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     572:	4b13      	ldr	r3, [pc, #76]	; (5c0 <SystemInit+0x1b4>)
     574:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     578:	2b00      	cmp	r3, #0
     57a:	d0fa      	beq.n	572 <SystemInit+0x166>
     57c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     580:	4910      	ldr	r1, [pc, #64]	; (5c4 <SystemInit+0x1b8>)
     582:	68ca      	ldr	r2, [r1, #12]
     584:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <SystemInit+0x1bc>)
     58a:	4313      	orrs	r3, r2
     58c:	60cb      	str	r3, [r1, #12]
     58e:	f3bf 8f4f 	dsb	sy
    __NOP();
     592:	bf00      	nop
     594:	e7fd      	b.n	592 <SystemInit+0x186>
     596:	bf00      	nop
     598:	4007c074 	.word	0x4007c074
     59c:	baadf00d 	.word	0xbaadf00d
     5a0:	10000244 	.word	0x10000244
     5a4:	4000053c 	.word	0x4000053c
     5a8:	e000edf0 	.word	0xe000edf0
     5ac:	400005a0 	.word	0x400005a0
     5b0:	40005610 	.word	0x40005610
     5b4:	4000c000 	.word	0x4000c000
     5b8:	10000258 	.word	0x10000258
     5bc:	40000ee4 	.word	0x40000ee4
     5c0:	4001e000 	.word	0x4001e000
     5c4:	e000ed00 	.word	0xe000ed00
     5c8:	05fa0004 	.word	0x05fa0004

000005cc <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
     5cc:	b508      	push	{r3, lr}
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     5ce:	2100      	movs	r1, #0
     5d0:	4608      	mov	r0, r1
     5d2:	f000 f806 	bl	5e2 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     5d6:	f000 fac2 	bl	b5e <_exit>

000005da <_init>:
}

void
_init(void)
{
}
     5da:	4770      	bx	lr

000005dc <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     5dc:	2000      	movs	r0, #0
     5de:	6008      	str	r0, [r1, #0]
    return 0;
}
     5e0:	4770      	bx	lr

000005e2 <main>:

int
main(void)
{
     5e2:	b500      	push	{lr}
     5e4:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     5e6:	f000 f835 	bl	654 <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     5ea:	f247 5030 	movw	r0, #30000	; 0x7530
     5ee:	f000 fe37 	bl	1260 <hal_watchdog_init>
    assert(rc == 0);
     5f2:	b128      	cbz	r0, 600 <main+0x1e>
     5f4:	2300      	movs	r3, #0
     5f6:	461a      	mov	r2, r3
     5f8:	4619      	mov	r1, r3
     5fa:	4618      	mov	r0, r3
     5fc:	f001 f84e 	bl	169c <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     600:	f001 fa2e 	bl	1a60 <flash_map_init>
#endif

    rc = boot_go(&rsp);
     604:	a801      	add	r0, sp, #4
     606:	f001 ff4b 	bl	24a0 <boot_go>
    assert(rc == 0);
     60a:	b128      	cbz	r0, 618 <main+0x36>
     60c:	2300      	movs	r3, #0
     60e:	461a      	mov	r2, r3
     610:	4619      	mov	r1, r3
     612:	4618      	mov	r0, r3
     614:	f001 f842 	bl	169c <__assert_func>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     618:	4669      	mov	r1, sp
     61a:	f89d 0008 	ldrb.w	r0, [sp, #8]
     61e:	f7ff ffdd 	bl	5dc <flash_device_base>
    assert(rc == 0);
     622:	b128      	cbz	r0, 630 <main+0x4e>
     624:	2300      	movs	r3, #0
     626:	461a      	mov	r2, r3
     628:	4619      	mov	r1, r3
     62a:	4618      	mov	r0, r3
     62c:	f001 f836 	bl	169c <__assert_func>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     630:	9803      	ldr	r0, [sp, #12]
     632:	9b00      	ldr	r3, [sp, #0]
     634:	4418      	add	r0, r3
                              rsp.br_hdr->ih_hdr_size));
     636:	9b01      	ldr	r3, [sp, #4]
     638:	891b      	ldrh	r3, [r3, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     63a:	4418      	add	r0, r3
     63c:	f000 fdf4 	bl	1228 <hal_system_start>

00000640 <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     640:	2801      	cmp	r0, #1
     642:	d803      	bhi.n	64c <hal_bsp_flash_dev+0xc>
        return NULL;
    }
    return flash_devs[id];
     644:	4b02      	ldr	r3, [pc, #8]	; (650 <hal_bsp_flash_dev+0x10>)
     646:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     64a:	4770      	bx	lr
        return NULL;
     64c:	2000      	movs	r0, #0
}
     64e:	4770      	bx	lr
     650:	000039a0 	.word	0x000039a0

00000654 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     654:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     656:	f7ff fda3 	bl	1a0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
     65a:	f000 fe67 	bl	132c <nrf52_periph_create>
}
     65e:	bd08      	pop	{r3, pc}

00000660 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     660:	4a09      	ldr	r2, [pc, #36]	; (688 <NVIC_Relocate+0x28>)
     662:	4b0a      	ldr	r3, [pc, #40]	; (68c <NVIC_Relocate+0x2c>)
     664:	429a      	cmp	r2, r3
     666:	d00a      	beq.n	67e <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     668:	2300      	movs	r3, #0
     66a:	e006      	b.n	67a <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     66c:	4a07      	ldr	r2, [pc, #28]	; (68c <NVIC_Relocate+0x2c>)
     66e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     672:	4a05      	ldr	r2, [pc, #20]	; (688 <NVIC_Relocate+0x28>)
     674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     678:	3301      	adds	r3, #1
     67a:	2b35      	cmp	r3, #53	; 0x35
     67c:	ddf6      	ble.n	66c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     67e:	4a02      	ldr	r2, [pc, #8]	; (688 <NVIC_Relocate+0x28>)
     680:	4b03      	ldr	r3, [pc, #12]	; (690 <NVIC_Relocate+0x30>)
     682:	609a      	str	r2, [r3, #8]
#endif
}
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	20000000 	.word	0x20000000
     68c:	00000000 	.word	0x00000000
     690:	e000ed00 	.word	0xe000ed00

00000694 <hal_spiflash_sector_info>:
}

static int
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
     694:	b410      	push	{r4}
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     696:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
     698:	fb01 f104 	mul.w	r1, r1, r4
     69c:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     69e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     6a0:	601a      	str	r2, [r3, #0]
    return 0;
}
     6a2:	2000      	movs	r0, #0
     6a4:	bc10      	pop	{r4}
     6a6:	4770      	bx	lr

000006a8 <spiflash_release_power_down_generic>:
{
     6a8:	b530      	push	{r4, r5, lr}
     6aa:	b083      	sub	sp, #12
     6ac:	4605      	mov	r5, r0
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     6ae:	ac02      	add	r4, sp, #8
     6b0:	23ab      	movs	r3, #171	; 0xab
     6b2:	f804 3d04 	strb.w	r3, [r4, #-4]!
    hal_gpio_write(dev->ss_pin, 0);
     6b6:	2100      	movs	r1, #0
     6b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     6ba:	f000 fb2e 	bl	d1a <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     6be:	2301      	movs	r3, #1
     6c0:	4622      	mov	r2, r4
     6c2:	4621      	mov	r1, r4
     6c4:	6a28      	ldr	r0, [r5, #32]
     6c6:	f000 fd59 	bl	117c <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     6ca:	2101      	movs	r1, #1
     6cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     6ce:	f000 fb24 	bl	d1a <hal_gpio_write>
}
     6d2:	b003      	add	sp, #12
     6d4:	bd30      	pop	{r4, r5, pc}

000006d6 <spiflash_delay_us>:
{
     6d6:	b508      	push	{r3, lr}
    os_cputime_delay_usecs(usecs);
     6d8:	f001 f814 	bl	1704 <os_cputime_delay_usecs>
}
     6dc:	bd08      	pop	{r3, pc}

000006de <spiflash_read_jedec_id>:
{
     6de:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e0:	b083      	sub	sp, #12
     6e2:	4604      	mov	r4, r0
     6e4:	460f      	mov	r7, r1
     6e6:	4616      	mov	r6, r2
     6e8:	461d      	mov	r5, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     6ea:	239f      	movs	r3, #159	; 0x9f
     6ec:	f88d 3004 	strb.w	r3, [sp, #4]
     6f0:	2100      	movs	r1, #0
     6f2:	f88d 1005 	strb.w	r1, [sp, #5]
     6f6:	f88d 1006 	strb.w	r1, [sp, #6]
     6fa:	f88d 1007 	strb.w	r1, [sp, #7]
    hal_gpio_write(dev->ss_pin, 0);
     6fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
     700:	f000 fb0b 	bl	d1a <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     704:	2304      	movs	r3, #4
     706:	eb0d 0203 	add.w	r2, sp, r3
     70a:	4611      	mov	r1, r2
     70c:	6a20      	ldr	r0, [r4, #32]
     70e:	f000 fd35 	bl	117c <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     712:	2101      	movs	r1, #1
     714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     716:	f000 fb00 	bl	d1a <hal_gpio_write>
    if (manufacturer) {
     71a:	b117      	cbz	r7, 722 <spiflash_read_jedec_id+0x44>
        *manufacturer = cmd[1];
     71c:	f89d 3005 	ldrb.w	r3, [sp, #5]
     720:	703b      	strb	r3, [r7, #0]
    if (memory_type) {
     722:	b116      	cbz	r6, 72a <spiflash_read_jedec_id+0x4c>
        *memory_type = cmd[2];
     724:	f89d 3006 	ldrb.w	r3, [sp, #6]
     728:	7033      	strb	r3, [r6, #0]
    if (capacity) {
     72a:	b115      	cbz	r5, 732 <spiflash_read_jedec_id+0x54>
        *capacity = cmd[3];
     72c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     730:	702b      	strb	r3, [r5, #0]
}
     732:	2000      	movs	r0, #0
     734:	b003      	add	sp, #12
     736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000738 <spiflash_read_status>:
{
     738:	b538      	push	{r3, r4, r5, lr}
     73a:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     73c:	2100      	movs	r1, #0
     73e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     740:	f000 faeb 	bl	d1a <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     744:	2105      	movs	r1, #5
     746:	6a20      	ldr	r0, [r4, #32]
     748:	f000 fcde 	bl	1108 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     74c:	21ff      	movs	r1, #255	; 0xff
     74e:	6a20      	ldr	r0, [r4, #32]
     750:	f000 fcda 	bl	1108 <hal_spi_tx_val>
     754:	b2c5      	uxtb	r5, r0
    hal_gpio_write(dev->ss_pin, 1);
     756:	2101      	movs	r1, #1
     758:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     75a:	f000 fade 	bl	d1a <hal_gpio_write>
}
     75e:	4628      	mov	r0, r5
     760:	bd38      	pop	{r3, r4, r5, pc}

00000762 <spiflash_device_ready>:
{
     762:	b510      	push	{r4, lr}
     764:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     766:	f7ff ffe7 	bl	738 <spiflash_read_status>
     76a:	f080 0001 	eor.w	r0, r0, #1
     76e:	f000 0001 	and.w	r0, r0, #1
     772:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     776:	bd10      	pop	{r4, pc}

00000778 <spiflash_wait_ready_till>:
    if (dev->ready) {
     778:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     77c:	b9eb      	cbnz	r3, 7ba <spiflash_wait_ready_till+0x42>
{
     77e:	b570      	push	{r4, r5, r6, lr}
     780:	4604      	mov	r4, r0
     782:	460e      	mov	r6, r1
     784:	4615      	mov	r5, r2
    if (step_us < MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL)) {
     786:	2a09      	cmp	r2, #9
     788:	d904      	bls.n	794 <spiflash_wait_ready_till+0x1c>
    } else if (step_us > 1000000) {
     78a:	4b0e      	ldr	r3, [pc, #56]	; (7c4 <spiflash_wait_ready_till+0x4c>)
     78c:	429a      	cmp	r2, r3
     78e:	d902      	bls.n	796 <spiflash_wait_ready_till+0x1e>
        step_us = 1000000;
     790:	4d0c      	ldr	r5, [pc, #48]	; (7c4 <spiflash_wait_ready_till+0x4c>)
     792:	e000      	b.n	796 <spiflash_wait_ready_till+0x1e>
        step_us = MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL);
     794:	250a      	movs	r5, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     796:	f000 ffa5 	bl	16e4 <os_cputime_get32>
     79a:	4406      	add	r6, r0
        if (spiflash_device_ready(dev)) {
     79c:	4620      	mov	r0, r4
     79e:	f7ff ffe0 	bl	762 <spiflash_device_ready>
     7a2:	b960      	cbnz	r0, 7be <spiflash_wait_ready_till+0x46>
        spiflash_delay_us(step_us);
     7a4:	4628      	mov	r0, r5
     7a6:	f7ff ff96 	bl	6d6 <spiflash_delay_us>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     7aa:	f000 ff9b 	bl	16e4 <os_cputime_get32>
     7ae:	1b80      	subs	r0, r0, r6
     7b0:	2800      	cmp	r0, #0
     7b2:	dbf3      	blt.n	79c <spiflash_wait_ready_till+0x24>
    int rc = -1;
     7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7b8:	e002      	b.n	7c0 <spiflash_wait_ready_till+0x48>
        return 0;
     7ba:	2000      	movs	r0, #0
}
     7bc:	4770      	bx	lr
            rc = 0;
     7be:	2000      	movs	r0, #0
}
     7c0:	bd70      	pop	{r4, r5, r6, pc}
     7c2:	bf00      	nop
     7c4:	000f4240 	.word	0x000f4240

000007c8 <spiflash_wait_ready>:
{
     7c8:	b508      	push	{r3, lr}
    return spiflash_wait_ready_till(dev, timeout_ms * 1000, timeout_ms * 10);
     7ca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
     7ce:	005a      	lsls	r2, r3, #1
     7d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     7d4:	fb03 f101 	mul.w	r1, r3, r1
     7d8:	f7ff ffce 	bl	778 <spiflash_wait_ready_till>
}
     7dc:	bd08      	pop	{r3, pc}

000007de <hal_spiflash_read>:
{
     7de:	b570      	push	{r4, r5, r6, lr}
     7e0:	b082      	sub	sp, #8
     7e2:	4605      	mov	r5, r0
     7e4:	4616      	mov	r6, r2
     7e6:	461c      	mov	r4, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     7e8:	2303      	movs	r3, #3
     7ea:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     7ee:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     7f2:	f88d 3005 	strb.w	r3, [sp, #5]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     7f6:	f3c1 2307 	ubfx	r3, r1, #8, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     7fa:	f88d 3006 	strb.w	r3, [sp, #6]
     7fe:	f88d 1007 	strb.w	r1, [sp, #7]
    err = spiflash_wait_ready(dev, 100);
     802:	2164      	movs	r1, #100	; 0x64
     804:	f7ff ffe0 	bl	7c8 <spiflash_wait_ready>
    if (!err) {
     808:	b900      	cbnz	r0, 80c <hal_spiflash_read+0x2e>
        if (len > 0) {
     80a:	b914      	cbnz	r4, 812 <hal_spiflash_read+0x34>
}
     80c:	2000      	movs	r0, #0
     80e:	b002      	add	sp, #8
     810:	bd70      	pop	{r4, r5, r6, pc}
    hal_gpio_write(dev->ss_pin, 0);
     812:	2100      	movs	r1, #0
     814:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     816:	f000 fa80 	bl	d1a <hal_gpio_write>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     81a:	2304      	movs	r3, #4
     81c:	2200      	movs	r2, #0
     81e:	eb0d 0103 	add.w	r1, sp, r3
     822:	6a28      	ldr	r0, [r5, #32]
     824:	f000 fcaa 	bl	117c <hal_spi_txrx>
            memset(buf, 0xFF, len);
     828:	4622      	mov	r2, r4
     82a:	21ff      	movs	r1, #255	; 0xff
     82c:	4630      	mov	r0, r6
     82e:	f001 f816 	bl	185e <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     832:	4623      	mov	r3, r4
     834:	4632      	mov	r2, r6
     836:	4631      	mov	r1, r6
     838:	6a28      	ldr	r0, [r5, #32]
     83a:	f000 fc9f 	bl	117c <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     83e:	2101      	movs	r1, #1
     840:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     842:	f000 fa6a 	bl	d1a <hal_gpio_write>
     846:	e7e1      	b.n	80c <hal_spiflash_read+0x2e>

00000848 <spiflash_write_enable>:
{
     848:	b510      	push	{r4, lr}
     84a:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     84c:	2100      	movs	r1, #0
     84e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     850:	f000 fa63 	bl	d1a <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     854:	2106      	movs	r1, #6
     856:	6a20      	ldr	r0, [r4, #32]
     858:	f000 fc56 	bl	1108 <hal_spi_tx_val>
    hal_gpio_write(dev->ss_pin, 1);
     85c:	2101      	movs	r1, #1
     85e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     860:	f000 fa5b 	bl	d1a <hal_gpio_write>
}
     864:	2000      	movs	r0, #0
     866:	bd10      	pop	{r4, pc}

00000868 <hal_spiflash_write>:
{
     868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     86c:	b082      	sub	sp, #8
     86e:	4605      	mov	r5, r0
     870:	460e      	mov	r6, r1
     872:	4690      	mov	r8, r2
     874:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     876:	2300      	movs	r3, #0
     878:	9301      	str	r3, [sp, #4]
     87a:	2302      	movs	r3, #2
     87c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (spiflash_wait_ready(dev, 100) != 0) {
     880:	2164      	movs	r1, #100	; 0x64
     882:	f7ff ffa1 	bl	7c8 <spiflash_wait_ready>
     886:	2800      	cmp	r0, #0
     888:	d14a      	bne.n	920 <hal_spiflash_write+0xb8>
     88a:	4603      	mov	r3, r0
    pp_time_typical = dev->characteristics->tbp1.typical;
     88c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
     88e:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
    pp_time_maximum = dev->characteristics->tpp.maximum;
     892:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if (pp_time_maximum < pp_time_typical) {
     896:	45d1      	cmp	r9, sl
     898:	d840      	bhi.n	91c <hal_spiflash_write+0xb4>
    while (len) {
     89a:	2f00      	cmp	r7, #0
     89c:	d042      	beq.n	924 <hal_spiflash_write+0xbc>
        spiflash_write_enable(dev);
     89e:	4628      	mov	r0, r5
     8a0:	f7ff ffd2 	bl	848 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     8a4:	f3c6 4307 	ubfx	r3, r6, #16, #8
     8a8:	f88d 3005 	strb.w	r3, [sp, #5]
        cmd[2] = (uint8_t)(addr >> 8);
     8ac:	f3c6 2307 	ubfx	r3, r6, #8, #8
     8b0:	f88d 3006 	strb.w	r3, [sp, #6]
        cmd[3] = (uint8_t)(addr);
     8b4:	f88d 6007 	strb.w	r6, [sp, #7]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     8b8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     8ba:	425c      	negs	r4, r3
     8bc:	4034      	ands	r4, r6
     8be:	441c      	add	r4, r3
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     8c0:	1ba4      	subs	r4, r4, r6
     8c2:	42bc      	cmp	r4, r7
     8c4:	bf28      	it	cs
     8c6:	463c      	movcs	r4, r7
    hal_gpio_write(dev->ss_pin, 0);
     8c8:	2100      	movs	r1, #0
     8ca:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     8cc:	f000 fa25 	bl	d1a <hal_gpio_write>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     8d0:	2304      	movs	r3, #4
     8d2:	2200      	movs	r2, #0
     8d4:	eb0d 0103 	add.w	r1, sp, r3
     8d8:	6a28      	ldr	r0, [r5, #32]
     8da:	f000 fc4f 	bl	117c <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     8de:	4623      	mov	r3, r4
     8e0:	2200      	movs	r2, #0
     8e2:	4641      	mov	r1, r8
     8e4:	6a28      	ldr	r0, [r5, #32]
     8e6:	f000 fc49 	bl	117c <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     8ea:	2101      	movs	r1, #1
     8ec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     8ee:	f000 fa14 	bl	d1a <hal_gpio_write>
        dev->ready = false;
     8f2:	2300      	movs	r3, #0
     8f4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        spiflash_delay_us(pp_time_typical);
     8f8:	4648      	mov	r0, r9
     8fa:	f7ff feec 	bl	6d6 <spiflash_delay_us>
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     8fe:	ebaa 0109 	sub.w	r1, sl, r9
     902:	4a0a      	ldr	r2, [pc, #40]	; (92c <hal_spiflash_write+0xc4>)
     904:	fba2 3201 	umull	r3, r2, r2, r1
     908:	08d2      	lsrs	r2, r2, #3
     90a:	4628      	mov	r0, r5
     90c:	f7ff ff34 	bl	778 <spiflash_wait_ready_till>
        if (rc) {
     910:	4603      	mov	r3, r0
     912:	b938      	cbnz	r0, 924 <hal_spiflash_write+0xbc>
        addr += to_write;
     914:	4426      	add	r6, r4
        u8buf += to_write;
     916:	44a0      	add	r8, r4
        len -= to_write;
     918:	1b3f      	subs	r7, r7, r4
     91a:	e7be      	b.n	89a <hal_spiflash_write+0x32>
        pp_time_maximum = pp_time_typical;
     91c:	46ca      	mov	sl, r9
     91e:	e7bc      	b.n	89a <hal_spiflash_write+0x32>
        rc = -1;
     920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
     924:	4618      	mov	r0, r3
     926:	b002      	add	sp, #8
     928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     92c:	cccccccd 	.word	0xcccccccd

00000930 <spiflash_execute_erase>:
{
     930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     932:	4604      	mov	r4, r0
     934:	460d      	mov	r5, r1
     936:	4617      	mov	r7, r2
     938:	461e      	mov	r6, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     93a:	2164      	movs	r1, #100	; 0x64
     93c:	f7ff ff44 	bl	7c8 <spiflash_wait_ready>
     940:	bb68      	cbnz	r0, 99e <spiflash_execute_erase+0x6e>
    spiflash_write_enable(dev);
     942:	4620      	mov	r0, r4
     944:	f7ff ff80 	bl	848 <spiflash_write_enable>
    spiflash_read_status(dev);
     948:	4620      	mov	r0, r4
     94a:	f7ff fef5 	bl	738 <spiflash_read_status>
    hal_gpio_write(dev->ss_pin, 0);
     94e:	2100      	movs	r1, #0
     950:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     952:	f000 f9e2 	bl	d1a <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     956:	463b      	mov	r3, r7
     958:	2200      	movs	r2, #0
     95a:	4629      	mov	r1, r5
     95c:	6a20      	ldr	r0, [r4, #32]
     95e:	f000 fc0d 	bl	117c <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     962:	2101      	movs	r1, #1
     964:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     966:	f000 f9d8 	bl	d1a <hal_gpio_write>
    dev->ready = false;
     96a:	2300      	movs	r3, #0
     96c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     970:	f000 feb8 	bl	16e4 <os_cputime_get32>
     974:	4605      	mov	r5, r0
    spiflash_delay_us(delay_spec->typical);
     976:	6830      	ldr	r0, [r6, #0]
     978:	f7ff fead 	bl	6d6 <spiflash_delay_us>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     97c:	f000 feb2 	bl	16e4 <os_cputime_get32>
     980:	1b40      	subs	r0, r0, r5
    if (wait_time_us > delay_spec->maximum) {
     982:	6871      	ldr	r1, [r6, #4]
     984:	4281      	cmp	r1, r0
     986:	d308      	bcc.n	99a <spiflash_execute_erase+0x6a>
        wait_time_us = delay_spec->maximum - wait_time_us;
     988:	1a09      	subs	r1, r1, r0
    rc = spiflash_wait_ready_till(dev, wait_time_us, wait_time_us / 50);
     98a:	4a06      	ldr	r2, [pc, #24]	; (9a4 <spiflash_execute_erase+0x74>)
     98c:	fba2 3201 	umull	r3, r2, r2, r1
     990:	0912      	lsrs	r2, r2, #4
     992:	4620      	mov	r0, r4
     994:	f7ff fef0 	bl	778 <spiflash_wait_ready_till>
}
     998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wait_time_us = 0;
     99a:	2100      	movs	r1, #0
     99c:	e7f5      	b.n	98a <spiflash_execute_erase+0x5a>
        rc = -1;
     99e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     9a2:	e7f9      	b.n	998 <spiflash_execute_erase+0x68>
     9a4:	51eb851f 	.word	0x51eb851f

000009a8 <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     9a8:	b500      	push	{lr}
     9aa:	b083      	sub	sp, #12
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     9ac:	f88d 1004 	strb.w	r1, [sp, #4]
     9b0:	f3c2 4107 	ubfx	r1, r2, #16, #8
     9b4:	f88d 1005 	strb.w	r1, [sp, #5]
     9b8:	f3c2 2107 	ubfx	r1, r2, #8, #8
     9bc:	f88d 1006 	strb.w	r1, [sp, #6]
     9c0:	f88d 2007 	strb.w	r2, [sp, #7]
                       (uint8_t)addr };
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     9c4:	2204      	movs	r2, #4
     9c6:	eb0d 0102 	add.w	r1, sp, r2
     9ca:	f7ff ffb1 	bl	930 <spiflash_execute_erase>

}
     9ce:	b003      	add	sp, #12
     9d0:	f85d fb04 	ldr.w	pc, [sp], #4

000009d4 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
     9d4:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     9d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     9d8:	460a      	mov	r2, r1
     9da:	2120      	movs	r1, #32
     9dc:	f7ff ffe4 	bl	9a8 <spiflash_erase_cmd>
                              &dev->characteristics->tse);
}
     9e0:	bd08      	pop	{r3, pc}

000009e2 <hal_spiflash_erase_sector>:
{
     9e2:	b508      	push	{r3, lr}
    return spiflash_sector_erase(dev, addr);
     9e4:	f7ff fff6 	bl	9d4 <spiflash_sector_erase>
}
     9e8:	bd08      	pop	{r3, pc}

000009ea <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     9ea:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
                              &dev->characteristics->tbe1);
     9ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     9ee:	3308      	adds	r3, #8
     9f0:	460a      	mov	r2, r1
     9f2:	2152      	movs	r1, #82	; 0x52
     9f4:	f7ff ffd8 	bl	9a8 <spiflash_erase_cmd>
}
     9f8:	bd08      	pop	{r3, pc}

000009fa <spiflash_block_64k_erase>:
#endif

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     9fa:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
                              &dev->characteristics->tbe2);
     9fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     9fe:	3310      	adds	r3, #16
     a00:	460a      	mov	r2, r1
     a02:	21d8      	movs	r1, #216	; 0xd8
     a04:	f7ff ffd0 	bl	9a8 <spiflash_erase_cmd>
}
     a08:	bd08      	pop	{r3, pc}

00000a0a <spiflash_chip_erase>:
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     a0a:	b500      	push	{lr}
     a0c:	b083      	sub	sp, #12
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     a0e:	a902      	add	r1, sp, #8
     a10:	2360      	movs	r3, #96	; 0x60
     a12:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
                                  &dev->characteristics->tce);
     a16:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_execute_erase(dev, buf, sizeof(buf),
     a18:	3318      	adds	r3, #24
     a1a:	2201      	movs	r2, #1
     a1c:	f7ff ff88 	bl	930 <spiflash_execute_erase>
}
     a20:	b003      	add	sp, #12
     a22:	f85d fb04 	ldr.w	pc, [sp], #4

00000a26 <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     a26:	b570      	push	{r4, r5, r6, lr}
     a28:	4606      	mov	r6, r0
     a2a:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     a2c:	460c      	mov	r4, r1
     a2e:	b911      	cbnz	r1, a36 <spiflash_erase+0x10>
     a30:	6883      	ldr	r3, [r0, #8]
     a32:	4293      	cmp	r3, r2
     a34:	d005      	beq.n	a42 <spiflash_erase+0x1c>
        return spiflash_chip_erase(dev);
    }
    address &= ~0xFFFU;
     a36:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
     a3a:	f024 040f 	bic.w	r4, r4, #15
    int rc = 0;
     a3e:	2300      	movs	r3, #0
    while (size) {
     a40:	e01c      	b.n	a7c <spiflash_erase+0x56>
        return spiflash_chip_erase(dev);
     a42:	f7ff ffe2 	bl	a0a <spiflash_chip_erase>
     a46:	4603      	mov	r3, r0
     a48:	e010      	b.n	a6c <spiflash_erase+0x46>
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
            /* 64 KB erase if possible */
            rc = spiflash_block_64k_erase(dev, address);
     a4a:	4621      	mov	r1, r4
     a4c:	4630      	mov	r0, r6
     a4e:	f7ff ffd4 	bl	9fa <spiflash_block_64k_erase>
            if (rc) {
     a52:	4603      	mov	r3, r0
     a54:	b950      	cbnz	r0, a6c <spiflash_erase+0x46>
                goto err;
            }
            address += 0x10000;
     a56:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     a5a:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     a5e:	e00d      	b.n	a7c <spiflash_erase+0x56>
        }
#endif
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
            /* 32 KB erase if possible */
            rc = spiflash_block_32k_erase(dev, address);
     a60:	4621      	mov	r1, r4
     a62:	4630      	mov	r0, r6
     a64:	f7ff ffc1 	bl	9ea <spiflash_block_32k_erase>
            if (rc) {
     a68:	4603      	mov	r3, r0
     a6a:	b108      	cbz	r0, a70 <spiflash_erase+0x4a>
            size = 0;
        }
    }
err:
    return rc;
}
     a6c:	4618      	mov	r0, r3
     a6e:	bd70      	pop	{r4, r5, r6, pc}
            address += 0x8000;
     a70:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     a74:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     a78:	e000      	b.n	a7c <spiflash_erase+0x56>
            size = 0;
     a7a:	2500      	movs	r5, #0
    while (size) {
     a7c:	2d00      	cmp	r5, #0
     a7e:	d0f5      	beq.n	a6c <spiflash_erase+0x46>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     a80:	b2a3      	uxth	r3, r4
     a82:	b913      	cbnz	r3, a8a <spiflash_erase+0x64>
     a84:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     a88:	d2df      	bcs.n	a4a <spiflash_erase+0x24>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     a8a:	f3c4 030e 	ubfx	r3, r4, #0, #15
     a8e:	b913      	cbnz	r3, a96 <spiflash_erase+0x70>
     a90:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     a94:	d2e4      	bcs.n	a60 <spiflash_erase+0x3a>
        rc = spiflash_sector_erase(dev, address);
     a96:	4621      	mov	r1, r4
     a98:	4630      	mov	r0, r6
     a9a:	f7ff ff9b 	bl	9d4 <spiflash_sector_erase>
        if (rc) {
     a9e:	4603      	mov	r3, r0
     aa0:	2800      	cmp	r0, #0
     aa2:	d1e3      	bne.n	a6c <spiflash_erase+0x46>
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     aa4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     aa8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     aac:	d9e5      	bls.n	a7a <spiflash_erase+0x54>
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     aae:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     ab2:	e7e3      	b.n	a7c <spiflash_erase+0x56>

00000ab4 <hal_spiflash_erase>:
{
     ab4:	b508      	push	{r3, lr}
    return spiflash_erase(dev, address, size);
     ab6:	f7ff ffb6 	bl	a26 <spiflash_erase>
}
     aba:	bd08      	pop	{r3, pc}

00000abc <spiflash_identify>:

int
spiflash_identify(struct spiflash_dev *dev)
{
     abc:	b570      	push	{r4, r5, r6, lr}
     abe:	b082      	sub	sp, #8
     ac0:	4606      	mov	r6, r0
    int i;
    int j;
    uint8_t manufacturer = 0;
     ac2:	2300      	movs	r3, #0
     ac4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t memory_type = 0;
     ac8:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t capacity = 0;
     acc:	ac02      	add	r4, sp, #8
     ace:	f804 3d03 	strb.w	r3, [r4, #-3]!

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     ad2:	4d12      	ldr	r5, [pc, #72]	; (b1c <spiflash_identify+0x60>)
     ad4:	686b      	ldr	r3, [r5, #4]
     ad6:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     ad8:	4623      	mov	r3, r4
     ada:	f10d 0206 	add.w	r2, sp, #6
     ade:	f10d 0107 	add.w	r1, sp, #7
     ae2:	4630      	mov	r0, r6
     ae4:	f7ff fdfb 	bl	6de <spiflash_read_jedec_id>
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     ae8:	782a      	ldrb	r2, [r5, #0]
     aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
     aee:	429a      	cmp	r2, r3
     af0:	d10e      	bne.n	b10 <spiflash_identify+0x54>
     af2:	786a      	ldrb	r2, [r5, #1]
     af4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     af8:	429a      	cmp	r2, r3
     afa:	d109      	bne.n	b10 <spiflash_identify+0x54>
     afc:	78aa      	ldrb	r2, [r5, #2]
     afe:	f89d 3005 	ldrb.w	r3, [sp, #5]
     b02:	429a      	cmp	r2, r3
     b04:	d104      	bne.n	b10 <spiflash_identify+0x54>
            memory_type != supported_chips[0].fc_jedec_id.ji_type ||
            capacity != supported_chips[0].fc_jedec_id.ji_capacity) {
            rc = -1;
            goto err;
        }
        dev->flash_chip = &supported_chips[0];
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <spiflash_identify+0x60>)
     b08:	63b3      	str	r3, [r6, #56]	; 0x38
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     b0a:	2000      	movs	r0, #0
     b0c:	b002      	add	sp, #8
     b0e:	bd70      	pop	{r4, r5, r6, pc}
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     b10:	2300      	movs	r3, #0
     b12:	461a      	mov	r2, r3
     b14:	4619      	mov	r1, r3
     b16:	4618      	mov	r0, r3
     b18:	f000 fdc0 	bl	169c <__assert_func>
     b1c:	20000128 	.word	0x20000128

00000b20 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     b20:	b510      	push	{r4, lr}
     b22:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     b24:	2101      	movs	r1, #1
     b26:	6a80      	ldr	r0, [r0, #40]	; 0x28
     b28:	f000 f8db 	bl	ce2 <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     b2c:	6a20      	ldr	r0, [r4, #32]
     b2e:	f000 fa87 	bl	1040 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     b32:	f104 0118 	add.w	r1, r4, #24
     b36:	6a20      	ldr	r0, [r4, #32]
     b38:	f000 fa40 	bl	fbc <hal_spi_config>
    if (rc) {
     b3c:	4603      	mov	r3, r0
     b3e:	b108      	cbz	r0, b44 <hal_spiflash_init+0x24>
    hal_spi_enable(dev->spi_num);
#endif
    rc = spiflash_identify(dev);

    return rc;
}
     b40:	4618      	mov	r0, r3
     b42:	bd10      	pop	{r4, pc}
    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     b44:	2200      	movs	r2, #0
     b46:	4611      	mov	r1, r2
     b48:	6a20      	ldr	r0, [r4, #32]
     b4a:	f000 fb01 	bl	1150 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     b4e:	6a20      	ldr	r0, [r4, #32]
     b50:	f000 fa50 	bl	ff4 <hal_spi_enable>
    rc = spiflash_identify(dev);
     b54:	4620      	mov	r0, r4
     b56:	f7ff ffb1 	bl	abc <spiflash_identify>
     b5a:	4603      	mov	r3, r0
    return rc;
     b5c:	e7f0      	b.n	b40 <hal_spiflash_init+0x20>

00000b5e <_exit>:

void _exit(int status);

void
_exit(int status)
{
     b5e:	b508      	push	{r3, lr}
    hal_system_reset();
     b60:	f7ff fb08 	bl	174 <hal_system_reset>

00000b64 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     b64:	2300      	movs	r3, #0
     b66:	4a07      	ldr	r2, [pc, #28]	; (b84 <nrf52k_flash_wait_ready+0x20>)
     b68:	4293      	cmp	r3, r2
     b6a:	dc06      	bgt.n	b7a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     b6c:	4a06      	ldr	r2, [pc, #24]	; (b88 <nrf52k_flash_wait_ready+0x24>)
     b6e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     b72:	2a01      	cmp	r2, #1
     b74:	d004      	beq.n	b80 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
     b76:	3301      	adds	r3, #1
     b78:	e7f5      	b.n	b66 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
     b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b7e:	4770      	bx	lr
            return 0;
     b80:	2000      	movs	r0, #0
}
     b82:	4770      	bx	lr
     b84:	0001869f 	.word	0x0001869f
     b88:	4001e000 	.word	0x4001e000

00000b8c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     b8c:	b538      	push	{r3, r4, r5, lr}
     b8e:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     b90:	f7ff ffe8 	bl	b64 <nrf52k_flash_wait_ready>
     b94:	b9f0      	cbnz	r0, bd4 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b96:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     b9a:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     b9c:	4b0f      	ldr	r3, [pc, #60]	; (bdc <nrf52k_flash_erase_sector+0x50>)
     b9e:	2202      	movs	r2, #2
     ba0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     ba4:	f7ff ffde 	bl	b64 <nrf52k_flash_wait_ready>
     ba8:	b148      	cbz	r0, bbe <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
     baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     bae:	4a0b      	ldr	r2, [pc, #44]	; (bdc <nrf52k_flash_erase_sector+0x50>)
     bb0:	2100      	movs	r1, #0
     bb2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     bb6:	b904      	cbnz	r4, bba <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
     bb8:	b662      	cpsie	i
    return rc;
}
     bba:	4618      	mov	r0, r3
     bbc:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <nrf52k_flash_erase_sector+0x50>)
     bc0:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     bc4:	f7ff ffce 	bl	b64 <nrf52k_flash_wait_ready>
     bc8:	4603      	mov	r3, r0
     bca:	2800      	cmp	r0, #0
     bcc:	d0ef      	beq.n	bae <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
     bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     bd2:	e7ec      	b.n	bae <nrf52k_flash_erase_sector+0x22>
        return -1;
     bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     bd8:	e7ef      	b.n	bba <nrf52k_flash_erase_sector+0x2e>
     bda:	bf00      	nop
     bdc:	4001e000 	.word	0x4001e000

00000be0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     be0:	2000      	movs	r0, #0
     be2:	4770      	bx	lr

00000be4 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     be4:	297f      	cmp	r1, #127	; 0x7f
     be6:	dc06      	bgt.n	bf6 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     be8:	0309      	lsls	r1, r1, #12
     bea:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     bf0:	601a      	str	r2, [r3, #0]
}
     bf2:	2000      	movs	r0, #0
     bf4:	4770      	bx	lr
{
     bf6:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     bf8:	2300      	movs	r3, #0
     bfa:	461a      	mov	r2, r3
     bfc:	4619      	mov	r1, r3
     bfe:	4618      	mov	r0, r3
     c00:	f000 fd4c 	bl	169c <__assert_func>

00000c04 <nrf52k_flash_write>:
{
     c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c08:	b082      	sub	sp, #8
     c0a:	460d      	mov	r5, r1
     c0c:	4616      	mov	r6, r2
     c0e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
     c10:	f7ff ffa8 	bl	b64 <nrf52k_flash_wait_ready>
     c14:	2800      	cmp	r0, #0
     c16:	d158      	bne.n	cca <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c18:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     c1c:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     c1e:	4b2c      	ldr	r3, [pc, #176]	; (cd0 <nrf52k_flash_write+0xcc>)
     c20:	2201      	movs	r2, #1
     c22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     c26:	f015 0803 	ands.w	r8, r5, #3
     c2a:	d10b      	bne.n	c44 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
     c2c:	2c03      	cmp	r4, #3
     c2e:	d925      	bls.n	c7c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
     c30:	f7ff ff98 	bl	b64 <nrf52k_flash_wait_ready>
     c34:	2800      	cmp	r0, #0
     c36:	d139      	bne.n	cac <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
     c38:	f856 3b04 	ldr.w	r3, [r6], #4
     c3c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     c40:	3c04      	subs	r4, #4
     c42:	e7f3      	b.n	c2c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
     c44:	f7ff ff8e 	bl	b64 <nrf52k_flash_wait_ready>
     c48:	bb68      	cbnz	r0, ca6 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
     c4a:	f025 0a03 	bic.w	sl, r5, #3
     c4e:	f8da 3000 	ldr.w	r3, [sl]
     c52:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     c54:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     c58:	45a1      	cmp	r9, r4
     c5a:	d900      	bls.n	c5e <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
     c5c:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     c5e:	464a      	mov	r2, r9
     c60:	4631      	mov	r1, r6
     c62:	ab01      	add	r3, sp, #4
     c64:	eb03 0008 	add.w	r0, r3, r8
     c68:	f000 fdec 	bl	1844 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     c6c:	9b01      	ldr	r3, [sp, #4]
     c6e:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     c72:	444d      	add	r5, r9
        num_bytes -= cnt;
     c74:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     c78:	444e      	add	r6, r9
     c7a:	e7d7      	b.n	c2c <nrf52k_flash_write+0x28>
    if (num_bytes) {
     c7c:	b164      	cbz	r4, c98 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
     c7e:	682b      	ldr	r3, [r5, #0]
     c80:	a802      	add	r0, sp, #8
     c82:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     c86:	4622      	mov	r2, r4
     c88:	4631      	mov	r1, r6
     c8a:	f000 fddb 	bl	1844 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     c8e:	f7ff ff69 	bl	b64 <nrf52k_flash_wait_ready>
     c92:	b9b8      	cbnz	r0, cc4 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
     c94:	9b01      	ldr	r3, [sp, #4]
     c96:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
     c98:	f7ff ff64 	bl	b64 <nrf52k_flash_wait_ready>
     c9c:	4603      	mov	r3, r0
     c9e:	b138      	cbz	r0, cb0 <nrf52k_flash_write+0xac>
        rc = -1;
     ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ca4:	e004      	b.n	cb0 <nrf52k_flash_write+0xac>
    int rc = -1;
     ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     caa:	e001      	b.n	cb0 <nrf52k_flash_write+0xac>
     cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     cb0:	4a07      	ldr	r2, [pc, #28]	; (cd0 <nrf52k_flash_write+0xcc>)
     cb2:	2100      	movs	r1, #0
     cb4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     cb8:	b907      	cbnz	r7, cbc <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
     cba:	b662      	cpsie	i
}
     cbc:	4618      	mov	r0, r3
     cbe:	b002      	add	sp, #8
     cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cc8:	e7f2      	b.n	cb0 <nrf52k_flash_write+0xac>
        return -1;
     cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cce:	e7f5      	b.n	cbc <nrf52k_flash_write+0xb8>
     cd0:	4001e000 	.word	0x4001e000

00000cd4 <nrf52k_flash_read>:
{
     cd4:	b508      	push	{r3, lr}
     cd6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     cd8:	461a      	mov	r2, r3
     cda:	f000 fdb3 	bl	1844 <memcpy>
}
     cde:	2000      	movs	r0, #0
     ce0:	bd08      	pop	{r3, pc}

00000ce2 <hal_gpio_init_out>:
{
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
     ce2:	b999      	cbnz	r1, d0c <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     ce4:	2301      	movs	r3, #1
     ce6:	4083      	lsls	r3, r0
     ce8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     cec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
     cf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     cf4:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
     cf8:	2103      	movs	r1, #3
     cfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
     cfe:	2301      	movs	r3, #1
     d00:	fa03 f000 	lsl.w	r0, r3, r0
     d04:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518

    return 0;
}
     d08:	2000      	movs	r0, #0
     d0a:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d0c:	2301      	movs	r3, #1
     d0e:	4083      	lsls	r3, r0
     d10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
     d18:	e7ea      	b.n	cf0 <hal_gpio_init_out+0xe>

00000d1a <hal_gpio_write>:
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
     d1a:	b939      	cbnz	r1, d2c <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     d1c:	2301      	movs	r3, #1
     d1e:	fa03 f000 	lsl.w	r0, r3, r0
     d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d26:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
     d2a:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d2c:	2301      	movs	r3, #1
     d2e:	fa03 f000 	lsl.w	r0, r3, r0
     d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d36:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
     d3a:	4770      	bx	lr

00000d3c <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
     d3c:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
     d3e:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
     d40:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
     d44:	b32b      	cbz	r3, d92 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
     d46:	2300      	movs	r3, #0
     d48:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
     d4c:	7843      	ldrb	r3, [r0, #1]
     d4e:	b303      	cbz	r3, d92 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
     d50:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
     d54:	88c3      	ldrh	r3, [r0, #6]
     d56:	fa13 f382 	uxtah	r3, r3, r2
     d5a:	b29b      	uxth	r3, r3
     d5c:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     d5e:	8881      	ldrh	r1, [r0, #4]
     d60:	428b      	cmp	r3, r1
     d62:	d217      	bcs.n	d94 <nrf52_irqm_handler+0x58>
     d64:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
     d66:	6984      	ldr	r4, [r0, #24]
     d68:	4414      	add	r4, r2
     d6a:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
     d6c:	1acb      	subs	r3, r1, r3
     d6e:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
     d70:	2bff      	cmp	r3, #255	; 0xff
     d72:	bf28      	it	cs
     d74:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
     d76:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
     d7a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
     d7e:	69c1      	ldr	r1, [r0, #28]
     d80:	b129      	cbz	r1, d8e <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
     d82:	440a      	add	r2, r1
     d84:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
     d86:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
     d8a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
     d8e:	2301      	movs	r3, #1
     d90:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
     d92:	bd38      	pop	{r3, r4, r5, pc}
     d94:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
     d96:	6a03      	ldr	r3, [r0, #32]
     d98:	b10b      	cbz	r3, d9e <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
     d9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
     d9c:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
     d9e:	2300      	movs	r3, #0
     da0:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
     da2:	2340      	movs	r3, #64	; 0x40
     da4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
     da8:	e7f3      	b.n	d92 <nrf52_irqm_handler+0x56>
	...

00000dac <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
     dac:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
     dae:	4b04      	ldr	r3, [pc, #16]	; (dc0 <nrf52_spi0_irq_handler+0x14>)
     db0:	781b      	ldrb	r3, [r3, #0]
     db2:	b103      	cbz	r3, db6 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
     db4:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
     db6:	4802      	ldr	r0, [pc, #8]	; (dc0 <nrf52_spi0_irq_handler+0x14>)
     db8:	f7ff ffc0 	bl	d3c <nrf52_irqm_handler>
}
     dbc:	e7fa      	b.n	db4 <nrf52_spi0_irq_handler+0x8>
     dbe:	bf00      	nop
     dc0:	20001950 	.word	0x20001950

00000dc4 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
     dc4:	2301      	movs	r3, #1
     dc6:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
     dc8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
     dcc:	2b00      	cmp	r3, #0
     dce:	d0fb      	beq.n	dc8 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
     dd0:	2300      	movs	r3, #0
     dd2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
     dd6:	4770      	bx	lr

00000dd8 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
     dd8:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
     dda:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
     ddc:	780b      	ldrb	r3, [r1, #0]
     dde:	2b03      	cmp	r3, #3
     de0:	d80c      	bhi.n	dfc <hal_spi_config_slave+0x24>
     de2:	e8df f003 	tbb	[pc, r3]
     de6:	0e02      	.short	0x0e02
     de8:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     dea:	2300      	movs	r3, #0
    rc = 0;
     dec:	4618      	mov	r0, r3
     dee:	e00a      	b.n	e06 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     df0:	2304      	movs	r3, #4
    rc = 0;
     df2:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
     df4:	e007      	b.n	e06 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     df6:	2306      	movs	r3, #6
    rc = 0;
     df8:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
     dfa:	e004      	b.n	e06 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
     dfc:	2300      	movs	r3, #0
            rc = EINVAL;
     dfe:	2016      	movs	r0, #22
            break;
     e00:	e001      	b.n	e06 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     e02:	2302      	movs	r3, #2
    rc = 0;
     e04:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     e06:	784c      	ldrb	r4, [r1, #1]
     e08:	2c01      	cmp	r4, #1
     e0a:	d005      	beq.n	e18 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
     e0c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
     e10:	788b      	ldrb	r3, [r1, #2]
     e12:	b923      	cbnz	r3, e1e <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
     e14:	bc10      	pop	{r4}
     e16:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
     e18:	f043 0301 	orr.w	r3, r3, #1
     e1c:	e7f6      	b.n	e0c <hal_spi_config_slave+0x34>
            rc = EINVAL;
     e1e:	2016      	movs	r0, #22
    return rc;
     e20:	e7f8      	b.n	e14 <hal_spi_config_slave+0x3c>
	...

00000e24 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
     e24:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
     e26:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
     e28:	2501      	movs	r5, #1
     e2a:	409d      	lsls	r5, r3
     e2c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     e30:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
     e34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     e38:	2503      	movs	r5, #3
     e3a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
     e3e:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
     e40:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     e44:	2500      	movs	r5, #0
     e46:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
     e4a:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
     e4c:	780c      	ldrb	r4, [r1, #0]
     e4e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
     e52:	784c      	ldrb	r4, [r1, #1]
     e54:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
     e58:	7889      	ldrb	r1, [r1, #2]
     e5a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     e5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     e62:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
     e66:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     e6a:	4919      	ldr	r1, [pc, #100]	; (ed0 <hal_spi_init_master+0xac>)
     e6c:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     e6e:	3310      	adds	r3, #16
     e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
     e74:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     e78:	42ab      	cmp	r3, r5
     e7a:	db22      	blt.n	ec2 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     e80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     e84:	22e0      	movs	r2, #224	; 0xe0
     e86:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
     e8a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     e8e:	2b00      	cmp	r3, #0
     e90:	db08      	blt.n	ea4 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e92:	f003 011f 	and.w	r1, r3, #31
     e96:	095b      	lsrs	r3, r3, #5
     e98:	2201      	movs	r2, #1
     e9a:	408a      	lsls	r2, r1
     e9c:	3360      	adds	r3, #96	; 0x60
     e9e:	490d      	ldr	r1, [pc, #52]	; (ed4 <hal_spi_init_master+0xb0>)
     ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
     ea4:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     ea8:	2b00      	cmp	r3, #0
     eaa:	db07      	blt.n	ebc <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eac:	f003 011f 	and.w	r1, r3, #31
     eb0:	095b      	lsrs	r3, r3, #5
     eb2:	2201      	movs	r2, #1
     eb4:	408a      	lsls	r2, r1
     eb6:	4907      	ldr	r1, [pc, #28]	; (ed4 <hal_spi_init_master+0xb0>)
     eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
     ebc:	2000      	movs	r0, #0
     ebe:	bc30      	pop	{r4, r5}
     ec0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ec2:	f003 030f 	and.w	r3, r3, #15
     ec6:	4a04      	ldr	r2, [pc, #16]	; (ed8 <hal_spi_init_master+0xb4>)
     ec8:	441a      	add	r2, r3
     eca:	23e0      	movs	r3, #224	; 0xe0
     ecc:	7613      	strb	r3, [r2, #24]
     ece:	e7dc      	b.n	e8a <hal_spi_init_master+0x66>
     ed0:	e000ed00 	.word	0xe000ed00
     ed4:	e000e100 	.word	0xe000e100
     ed8:	e000ecfc 	.word	0xe000ecfc

00000edc <hal_spi_config_master>:
{
     edc:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
     ede:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
     ee0:	680c      	ldr	r4, [r1, #0]
     ee2:	684b      	ldr	r3, [r1, #4]
     ee4:	6084      	str	r4, [r0, #8]
     ee6:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     ee8:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     eec:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
     ef0:	7808      	ldrb	r0, [r1, #0]
     ef2:	2801      	cmp	r0, #1
     ef4:	d916      	bls.n	f24 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
     ef6:	2001      	movs	r0, #1
     ef8:	4098      	lsls	r0, r3
     efa:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     efe:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
     f02:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     f06:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
     f0a:	2403      	movs	r4, #3
     f0c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
     f10:	788b      	ldrb	r3, [r1, #2]
     f12:	b973      	cbnz	r3, f32 <hal_spi_config_master+0x56>
    rc = 0;
     f14:	2000      	movs	r0, #0
    switch (settings->data_mode) {
     f16:	780b      	ldrb	r3, [r1, #0]
     f18:	2b03      	cmp	r3, #3
     f1a:	d812      	bhi.n	f42 <hal_spi_config_master+0x66>
     f1c:	e8df f003 	tbb	[pc, r3]
     f20:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
     f24:	2001      	movs	r0, #1
     f26:	4098      	lsls	r0, r3
     f28:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     f2c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
     f30:	e7e7      	b.n	f02 <hal_spi_config_master+0x26>
            rc = EINVAL;
     f32:	2016      	movs	r0, #22
     f34:	e7ef      	b.n	f16 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     f36:	2300      	movs	r3, #0
     f38:	e007      	b.n	f4a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     f3a:	2304      	movs	r3, #4
            break;
     f3c:	e005      	b.n	f4a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     f3e:	2306      	movs	r3, #6
            break;
     f40:	e003      	b.n	f4a <hal_spi_config_master+0x6e>
            nrf_config = 0;
     f42:	2300      	movs	r3, #0
            rc = EINVAL;
     f44:	2016      	movs	r0, #22
            break;
     f46:	e000      	b.n	f4a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     f48:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     f4a:	784c      	ldrb	r4, [r1, #1]
     f4c:	2c01      	cmp	r4, #1
     f4e:	d010      	beq.n	f72 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
     f50:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
     f54:	684b      	ldr	r3, [r1, #4]
     f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     f5a:	d022      	beq.n	fa2 <hal_spi_config_master+0xc6>
     f5c:	d80c      	bhi.n	f78 <hal_spi_config_master+0x9c>
     f5e:	2bfa      	cmp	r3, #250	; 0xfa
     f60:	d028      	beq.n	fb4 <hal_spi_config_master+0xd8>
     f62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     f66:	d019      	beq.n	f9c <hal_spi_config_master+0xc0>
     f68:	2b7d      	cmp	r3, #125	; 0x7d
     f6a:	d011      	beq.n	f90 <hal_spi_config_master+0xb4>
            frequency = 0;
     f6c:	2300      	movs	r3, #0
            rc = EINVAL;
     f6e:	2016      	movs	r0, #22
            break;
     f70:	e010      	b.n	f94 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
     f72:	f043 0301 	orr.w	r3, r3, #1
     f76:	e7eb      	b.n	f50 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
     f78:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
     f7c:	d014      	beq.n	fa8 <hal_spi_config_master+0xcc>
     f7e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
     f82:	d014      	beq.n	fae <hal_spi_config_master+0xd2>
     f84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     f88:	d1f0      	bne.n	f6c <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
     f8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
     f8e:	e001      	b.n	f94 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
     f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
     f94:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
     f98:	bc10      	pop	{r4}
     f9a:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
     f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
     fa0:	e7f8      	b.n	f94 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
     fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
     fa6:	e7f5      	b.n	f94 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
     fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
     fac:	e7f2      	b.n	f94 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
     fae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
     fb2:	e7ef      	b.n	f94 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
     fb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
     fb8:	e7ec      	b.n	f94 <hal_spi_config_master+0xb8>
	...

00000fbc <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     fbc:	2802      	cmp	r0, #2
     fbe:	dc10      	bgt.n	fe2 <hal_spi_config+0x26>
{
     fc0:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     fc2:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <hal_spi_config+0x34>)
     fc4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     fc8:	b168      	cbz	r0, fe6 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
     fca:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
     fcc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
     fd0:	b95b      	cbnz	r3, fea <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     fd2:	7803      	ldrb	r3, [r0, #0]
     fd4:	b113      	cbz	r3, fdc <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
     fd6:	f7ff feff 	bl	dd8 <hal_spi_config_slave>
    }

err:
    return (rc);
}
     fda:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
     fdc:	f7ff ff7e 	bl	edc <hal_spi_config_master>
     fe0:	e7fb      	b.n	fda <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     fe2:	2016      	movs	r0, #22
}
     fe4:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     fe6:	2016      	movs	r0, #22
     fe8:	e7f7      	b.n	fda <hal_spi_config+0x1e>
        return -1;
     fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     fee:	e7f4      	b.n	fda <hal_spi_config+0x1e>
     ff0:	00003a28 	.word	0x00003a28

00000ff4 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     ff4:	2802      	cmp	r0, #2
     ff6:	dc1b      	bgt.n	1030 <hal_spi_enable+0x3c>
     ff8:	4b10      	ldr	r3, [pc, #64]	; (103c <hal_spi_enable+0x48>)
     ffa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     ffe:	b1cb      	cbz	r3, 1034 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1000:	781a      	ldrb	r2, [r3, #0]
    1002:	b17a      	cbz	r2, 1024 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
    1004:	6a1a      	ldr	r2, [r3, #32]
    1006:	b1ba      	cbz	r2, 1038 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
    1008:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
    100a:	2000      	movs	r0, #0
    100c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    1010:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    1014:	f240 4202 	movw	r2, #1026	; 0x402
    1018:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    101c:	2202      	movs	r2, #2
    101e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    1022:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
    1024:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    1026:	2201      	movs	r2, #1
    1028:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
    102c:	2000      	movs	r0, #0
    102e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1030:	2016      	movs	r0, #22
    1032:	4770      	bx	lr
    1034:	2016      	movs	r0, #22
    1036:	4770      	bx	lr
            rc = EINVAL;
    1038:	2016      	movs	r0, #22

err:
    return rc;
}
    103a:	4770      	bx	lr
    103c:	00003a28 	.word	0x00003a28

00001040 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1040:	2802      	cmp	r0, #2
    1042:	dc2a      	bgt.n	109a <hal_spi_disable+0x5a>
{
    1044:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1046:	4b17      	ldr	r3, [pc, #92]	; (10a4 <hal_spi_disable+0x64>)
    1048:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    104c:	b33c      	cbz	r4, 109e <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    104e:	7823      	ldrb	r3, [r4, #0]
    1050:	b9ab      	cbnz	r3, 107e <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
    1052:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    1054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1058:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
    105c:	7863      	ldrb	r3, [r4, #1]
    105e:	b943      	cbnz	r3, 1072 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
    1060:	2300      	movs	r3, #0
    1062:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
    1066:	2000      	movs	r0, #0
    1068:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
    106a:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
    106c:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
    106e:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
    1070:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
    1072:	4628      	mov	r0, r5
    1074:	f7ff fea6 	bl	dc4 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
    1078:	2300      	movs	r3, #0
    107a:	7063      	strb	r3, [r4, #1]
    107c:	e7f0      	b.n	1060 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
    107e:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    1080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1084:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
    1088:	2300      	movs	r3, #0
    108a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    108e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
    1092:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    1096:	70e3      	strb	r3, [r4, #3]
    1098:	e7e5      	b.n	1066 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    109a:	2016      	movs	r0, #22
}
    109c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    109e:	2016      	movs	r0, #22
    return rc;
    10a0:	e7e6      	b.n	1070 <hal_spi_disable+0x30>
    10a2:	bf00      	nop
    10a4:	00003a28 	.word	0x00003a28

000010a8 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10a8:	2802      	cmp	r0, #2
    10aa:	dc1d      	bgt.n	10e8 <hal_spi_init+0x40>
{
    10ac:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10ae:	4b13      	ldr	r3, [pc, #76]	; (10fc <hal_spi_init+0x54>)
    10b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    10b4:	b1d4      	cbz	r4, 10ec <hal_spi_init+0x44>
    if (cfg == NULL) {
    10b6:	b1d9      	cbz	r1, 10f0 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
    10b8:	2a01      	cmp	r2, #1
    10ba:	d81b      	bhi.n	10f4 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
    10bc:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
    10be:	b9d8      	cbnz	r0, 10f8 <hal_spi_init+0x50>
    10c0:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
    10c2:	2303      	movs	r3, #3
    10c4:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
    10c6:	b94a      	cbnz	r2, 10dc <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
    10c8:	4b0d      	ldr	r3, [pc, #52]	; (1100 <hal_spi_init+0x58>)
    10ca:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
    10cc:	f7ff ffb8 	bl	1040 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
    10d0:	4a0c      	ldr	r2, [pc, #48]	; (1104 <hal_spi_init+0x5c>)
    10d2:	4629      	mov	r1, r5
    10d4:	4620      	mov	r0, r4
    10d6:	f7ff fea5 	bl	e24 <hal_spi_init_master>
    10da:	e00c      	b.n	10f6 <hal_spi_init+0x4e>
            assert(0);
    10dc:	2300      	movs	r3, #0
    10de:	461a      	mov	r2, r3
    10e0:	4619      	mov	r1, r3
    10e2:	4618      	mov	r0, r3
    10e4:	f000 fada 	bl	169c <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10e8:	2016      	movs	r0, #22
}
    10ea:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10ec:	2016      	movs	r0, #22
    10ee:	e002      	b.n	10f6 <hal_spi_init+0x4e>
    rc = EINVAL;
    10f0:	2016      	movs	r0, #22
    10f2:	e000      	b.n	10f6 <hal_spi_init+0x4e>
    10f4:	2016      	movs	r0, #22
}
    10f6:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
    10f8:	2016      	movs	r0, #22
    return (rc);
    10fa:	e7fc      	b.n	10f6 <hal_spi_init+0x4e>
    10fc:	00003a28 	.word	0x00003a28
    1100:	40003000 	.word	0x40003000
    1104:	00000dad 	.word	0x00000dad

00001108 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    1108:	2802      	cmp	r0, #2
    110a:	dc17      	bgt.n	113c <hal_spi_tx_val+0x34>
    110c:	4b0f      	ldr	r3, [pc, #60]	; (114c <hal_spi_tx_val+0x44>)
    110e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1112:	b1ab      	cbz	r3, 1140 <hal_spi_tx_val+0x38>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1114:	781a      	ldrb	r2, [r3, #0]
    1116:	b9aa      	cbnz	r2, 1144 <hal_spi_tx_val+0x3c>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
    1118:	691a      	ldr	r2, [r3, #16]
        spi->EVENTS_READY = 0;
    111a:	2300      	movs	r3, #0
    111c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        spi->TXD = (uint8_t)val;
    1120:	b2c9      	uxtb	r1, r1
    1122:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
    1126:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    112a:	2b00      	cmp	r3, #0
    112c:	d0fb      	beq.n	1126 <hal_spi_tx_val+0x1e>
        spi->EVENTS_READY = 0;
    112e:	2300      	movs	r3, #0
    1130:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
    1134:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    1138:	b280      	uxth	r0, r0
    113a:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
    113c:	2016      	movs	r0, #22
    113e:	4770      	bx	lr
    1140:	2016      	movs	r0, #22
    1142:	4770      	bx	lr
        retval = 0xFFFF;
    1144:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1148:	4770      	bx	lr
    114a:	bf00      	nop
    114c:	00003a28 	.word	0x00003a28

00001150 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1150:	2802      	cmp	r0, #2
    1152:	dc0a      	bgt.n	116a <hal_spi_set_txrx_cb+0x1a>
    1154:	4b08      	ldr	r3, [pc, #32]	; (1178 <hal_spi_set_txrx_cb+0x28>)
    1156:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    115a:	b143      	cbz	r3, 116e <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    115c:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
    115e:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
    1162:	b930      	cbnz	r0, 1172 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
    1164:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
    1166:	625a      	str	r2, [r3, #36]	; 0x24
    1168:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    116a:	2016      	movs	r0, #22
    116c:	4770      	bx	lr
    116e:	2016      	movs	r0, #22
    1170:	4770      	bx	lr
        rc = -1;
    1172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
    1176:	4770      	bx	lr
    1178:	00003a28 	.word	0x00003a28

0000117c <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
    117c:	2b00      	cmp	r3, #0
    117e:	d046      	beq.n	120e <hal_spi_txrx+0x92>
{
    1180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1182:	460d      	mov	r5, r1
    1184:	4617      	mov	r7, r2
    1186:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    1188:	2802      	cmp	r0, #2
    118a:	dc42      	bgt.n	1212 <hal_spi_txrx+0x96>
    118c:	4b25      	ldr	r3, [pc, #148]	; (1224 <hal_spi_txrx+0xa8>)
    118e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1192:	2b00      	cmp	r3, #0
    1194:	d03f      	beq.n	1216 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1196:	781a      	ldrb	r2, [r3, #0]
    1198:	2a00      	cmp	r2, #0
    119a:	d13e      	bne.n	121a <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    119c:	2900      	cmp	r1, #0
    119e:	d03e      	beq.n	121e <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
    11a0:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
    11a2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
    11a6:	2b07      	cmp	r3, #7
    11a8:	d004      	beq.n	11b4 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
    11aa:	b95b      	cbnz	r3, 11c4 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    11ac:	2301      	movs	r3, #1
    11ae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    11b2:	e007      	b.n	11c4 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
    11b4:	f7ff ff44 	bl	1040 <hal_spi_disable>
    11b8:	e7f8      	b.n	11ac <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
    11ba:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
    11be:	2300      	movs	r3, #0
    11c0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
    11c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    11c8:	2b00      	cmp	r3, #0
    11ca:	d1f6      	bne.n	11ba <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
    11cc:	782b      	ldrb	r3, [r5, #0]
    11ce:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
    11d2:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
    11d4:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
    11d6:	2200      	movs	r2, #0
    11d8:	e00d      	b.n	11f6 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
    11da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    11de:	2b00      	cmp	r3, #0
    11e0:	d0fb      	beq.n	11da <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
    11e2:	2300      	movs	r3, #0
    11e4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
    11e8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    11ec:	b2db      	uxtb	r3, r3
            if (rxbuf) {
    11ee:	b10f      	cbz	r7, 11f4 <hal_spi_txrx+0x78>
                *rxd = rxval;
    11f0:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
    11f4:	3201      	adds	r2, #1
    11f6:	42b2      	cmp	r2, r6
    11f8:	da07      	bge.n	120a <hal_spi_txrx+0x8e>
            if (txcnt) {
    11fa:	2900      	cmp	r1, #0
    11fc:	d0ed      	beq.n	11da <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
    11fe:	786b      	ldrb	r3, [r5, #1]
    1200:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
    1204:	3901      	subs	r1, #1
                ++txd;
    1206:	3501      	adds	r5, #1
    1208:	e7e7      	b.n	11da <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
    120a:	2000      	movs	r0, #0
    }

err:
    return rc;
}
    120c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
    120e:	2016      	movs	r0, #22
}
    1210:	4770      	bx	lr
    return rc;
    1212:	2016      	movs	r0, #22
    1214:	e7fa      	b.n	120c <hal_spi_txrx+0x90>
    1216:	2016      	movs	r0, #22
    1218:	e7f8      	b.n	120c <hal_spi_txrx+0x90>
    121a:	2016      	movs	r0, #22
    121c:	e7f6      	b.n	120c <hal_spi_txrx+0x90>
    121e:	2016      	movs	r0, #22
    1220:	e7f4      	b.n	120c <hal_spi_txrx+0x90>
    1222:	bf00      	nop
    1224:	00003a28 	.word	0x00003a28

00001228 <hal_system_start>:
                  //// /* 1st word is stack pointer */ ////TODO
                  //// "    msr  psp, %0       \n" ////TODO
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
    1228:	6803      	ldr	r3, [r0, #0]
    122a:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
    122c:	f383 8808 	msr	MSP, r3
    1230:	4710      	bx	r2

00001232 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
    1232:	b508      	push	{r3, lr}
    assert(0);
    1234:	2300      	movs	r3, #0
    1236:	461a      	mov	r2, r3
    1238:	4619      	mov	r1, r3
    123a:	4618      	mov	r0, r3
    123c:	f000 fa2e 	bl	169c <__assert_func>

00001240 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    1240:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
    1242:	4b06      	ldr	r3, [pc, #24]	; (125c <nrf52_wdt_irq_handler+0x1c>)
    1244:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    1248:	f013 0f01 	tst.w	r3, #1
    124c:	d100      	bne.n	1250 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
    124e:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
    1250:	4b02      	ldr	r3, [pc, #8]	; (125c <nrf52_wdt_irq_handler+0x1c>)
    1252:	2200      	movs	r2, #0
    1254:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
    1258:	f7ff ffeb 	bl	1232 <nrf52_hal_wdt_default_handler>
    125c:	40010000 	.word	0x40010000

00001260 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    1260:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
    1262:	4b17      	ldr	r3, [pc, #92]	; (12c0 <hal_watchdog_init+0x60>)
    1264:	2201      	movs	r2, #1
    1266:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
    126a:	4b16      	ldr	r3, [pc, #88]	; (12c4 <hal_watchdog_init+0x64>)
    126c:	4298      	cmp	r0, r3
    126e:	d821      	bhi.n	12b4 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
    1270:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    1274:	0153      	lsls	r3, r2, #5
    1276:	4a14      	ldr	r2, [pc, #80]	; (12c8 <hal_watchdog_init+0x68>)
    1278:	fba2 2303 	umull	r2, r3, r2, r3
    127c:	08db      	lsrs	r3, r3, #3
    127e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1282:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <hal_watchdog_init+0x60>)
    1284:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1288:	4a10      	ldr	r2, [pc, #64]	; (12cc <hal_watchdog_init+0x6c>)
    128a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    128c:	4910      	ldr	r1, [pc, #64]	; (12d0 <hal_watchdog_init+0x70>)
    128e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1292:	4a10      	ldr	r2, [pc, #64]	; (12d4 <hal_watchdog_init+0x74>)
    1294:	21e0      	movs	r1, #224	; 0xe0
    1296:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    129a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    129e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12a2:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
    12a4:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    12a8:	f042 0201 	orr.w	r2, r2, #1
    12ac:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
    12b0:	2000      	movs	r0, #0
    12b2:	bd08      	pop	{r3, pc}
        assert(0);
    12b4:	2300      	movs	r3, #0
    12b6:	461a      	mov	r2, r3
    12b8:	4619      	mov	r1, r3
    12ba:	4618      	mov	r0, r3
    12bc:	f000 f9ee 	bl	169c <__assert_func>
    12c0:	40010000 	.word	0x40010000
    12c4:	02aaaaaa 	.word	0x02aaaaaa
    12c8:	10624dd3 	.word	0x10624dd3
    12cc:	e000ed00 	.word	0xe000ed00
    12d0:	00001241 	.word	0x00001241
    12d4:	e000e100 	.word	0xe000e100

000012d8 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
    12d8:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
    12da:	2100      	movs	r1, #0
    12dc:	4608      	mov	r0, r1
    12de:	f000 f919 	bl	1514 <hal_timer_init>
    assert(rc == 0);
    12e2:	b920      	cbnz	r0, 12ee <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    12e4:	4808      	ldr	r0, [pc, #32]	; (1308 <nrf52_periph_create_timers+0x30>)
    12e6:	f000 f9f7 	bl	16d8 <os_cputime_init>
    assert(rc == 0);
    12ea:	b930      	cbnz	r0, 12fa <nrf52_periph_create_timers+0x22>
#endif
}
    12ec:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    12ee:	2300      	movs	r3, #0
    12f0:	461a      	mov	r2, r3
    12f2:	4619      	mov	r1, r3
    12f4:	4618      	mov	r0, r3
    12f6:	f000 f9d1 	bl	169c <__assert_func>
    assert(rc == 0);
    12fa:	2300      	movs	r3, #0
    12fc:	461a      	mov	r2, r3
    12fe:	4619      	mov	r1, r3
    1300:	4618      	mov	r0, r3
    1302:	f000 f9cb 	bl	169c <__assert_func>
    1306:	bf00      	nop
    1308:	000f4240 	.word	0x000f4240

0000130c <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
    130c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    130e:	2200      	movs	r2, #0
    1310:	4905      	ldr	r1, [pc, #20]	; (1328 <nrf52_periph_create_spi+0x1c>)
    1312:	4610      	mov	r0, r2
    1314:	f7ff fec8 	bl	10a8 <hal_spi_init>
    assert(rc == 0);
    1318:	b900      	cbnz	r0, 131c <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
    131a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    131c:	2300      	movs	r3, #0
    131e:	461a      	mov	r2, r3
    1320:	4619      	mov	r1, r3
    1322:	4618      	mov	r0, r3
    1324:	f000 f9ba 	bl	169c <__assert_func>
    1328:	00003a34 	.word	0x00003a34

0000132c <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
    132c:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
    132e:	f7ff ffd3 	bl	12d8 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    1332:	f7ff ffeb 	bl	130c <nrf52_periph_create_spi>
}
    1336:	bd08      	pop	{r3, pc}

00001338 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1338:	2301      	movs	r3, #1
    133a:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    133c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
    1340:	4770      	bx	lr
	...

00001344 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
    1344:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
    1346:	7883      	ldrb	r3, [r0, #2]
    1348:	b393      	cbz	r3, 13b0 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    134a:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    134c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1350:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
    1354:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
    1356:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    135a:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    135e:	b11d      	cbz	r5, 1368 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
    1360:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
    1364:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
    1368:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
    136a:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
    136c:	2b02      	cmp	r3, #2
    136e:	dc0e      	bgt.n	138e <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1370:	7842      	ldrb	r2, [r0, #1]
    1372:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1374:	2b00      	cmp	r3, #0
    1376:	db15      	blt.n	13a4 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1378:	f002 021f 	and.w	r2, r2, #31
    137c:	095b      	lsrs	r3, r3, #5
    137e:	2101      	movs	r1, #1
    1380:	fa01 f202 	lsl.w	r2, r1, r2
    1384:	3340      	adds	r3, #64	; 0x40
    1386:	491b      	ldr	r1, [pc, #108]	; (13f4 <nrf_timer_set_ocmp+0xb0>)
    1388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    138c:	e00a      	b.n	13a4 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
    138e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1392:	d208      	bcs.n	13a6 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    1394:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1398:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    139c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    13a0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
    13a4:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    13a6:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
    13aa:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
    13ae:	e7f5      	b.n	139c <nrf_timer_set_ocmp+0x58>
    13b0:	460d      	mov	r5, r1
    13b2:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
    13b4:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    13b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    13ba:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    13be:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    13c2:	2200      	movs	r2, #0
    13c4:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    13c8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    13cc:	f7ff ffb4 	bl	1338 <nrf_read_timer_cntr>
    13d0:	1b40      	subs	r0, r0, r5
    13d2:	2800      	cmp	r0, #0
    13d4:	dbe6      	blt.n	13a4 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    13d6:	7862      	ldrb	r2, [r4, #1]
    13d8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    13da:	2b00      	cmp	r3, #0
    13dc:	dbe2      	blt.n	13a4 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13de:	f002 021f 	and.w	r2, r2, #31
    13e2:	095b      	lsrs	r3, r3, #5
    13e4:	2101      	movs	r1, #1
    13e6:	fa01 f202 	lsl.w	r2, r1, r2
    13ea:	3340      	adds	r3, #64	; 0x40
    13ec:	4901      	ldr	r1, [pc, #4]	; (13f4 <nrf_timer_set_ocmp+0xb0>)
    13ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    13f2:	e7d7      	b.n	13a4 <nrf_timer_set_ocmp+0x60>
    13f4:	e000e100 	.word	0xe000e100

000013f8 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    13f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    13fc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    1400:	4770      	bx	lr

00001402 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1402:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1406:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    140a:	4770      	bx	lr

0000140c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
    140c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    140e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1410:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1414:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    1416:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
    1418:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
    141c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    1420:	b1ad      	cbz	r5, 144e <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
    1422:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
    1426:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
    1428:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    142c:	2500      	movs	r5, #0
    142e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1432:	7840      	ldrb	r0, [r0, #1]
    1434:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    1436:	42aa      	cmp	r2, r5
    1438:	db09      	blt.n	144e <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    143a:	f000 001f 	and.w	r0, r0, #31
    143e:	0952      	lsrs	r2, r2, #5
    1440:	2501      	movs	r5, #1
    1442:	fa05 f000 	lsl.w	r0, r5, r0
    1446:	3240      	adds	r2, #64	; 0x40
    1448:	4d04      	ldr	r5, [pc, #16]	; (145c <hal_timer_read_bsptimer+0x50>)
    144a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
    144e:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
    1452:	b904      	cbnz	r4, 1456 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
    1454:	b662      	cpsie	i

    return tcntr;
}
    1456:	bc30      	pop	{r4, r5}
    1458:	4770      	bx	lr
    145a:	bf00      	nop
    145c:	e000e100 	.word	0xe000e100

00001460 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1464:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1468:	b672      	cpsid	i
    146a:	e013      	b.n	1494 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    146c:	6928      	ldr	r0, [r5, #16]
    146e:	f7ff ff63 	bl	1338 <nrf_read_timer_cntr>
            delta = 0;
    1472:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
    1474:	68e3      	ldr	r3, [r4, #12]
    1476:	1ac0      	subs	r0, r0, r3
    1478:	4290      	cmp	r0, r2
    147a:	db19      	blt.n	14b0 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    147c:	6923      	ldr	r3, [r4, #16]
    147e:	b1a3      	cbz	r3, 14aa <hal_timer_chk_queue+0x4a>
    1480:	6962      	ldr	r2, [r4, #20]
    1482:	615a      	str	r2, [r3, #20]
    1484:	6963      	ldr	r3, [r4, #20]
    1486:	6922      	ldr	r2, [r4, #16]
    1488:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    148a:	2300      	movs	r3, #0
    148c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    148e:	6863      	ldr	r3, [r4, #4]
    1490:	68a0      	ldr	r0, [r4, #8]
    1492:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    1494:	696c      	ldr	r4, [r5, #20]
    1496:	b15c      	cbz	r4, 14b0 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
    1498:	78ab      	ldrb	r3, [r5, #2]
    149a:	2b00      	cmp	r3, #0
    149c:	d0e6      	beq.n	146c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    149e:	4628      	mov	r0, r5
    14a0:	f7ff ffb4 	bl	140c <hal_timer_read_bsptimer>
            delta = -3;
    14a4:	f06f 0202 	mvn.w	r2, #2
    14a8:	e7e4      	b.n	1474 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    14aa:	6963      	ldr	r3, [r4, #20]
    14ac:	61ab      	str	r3, [r5, #24]
    14ae:	e7e9      	b.n	1484 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    14b0:	696b      	ldr	r3, [r5, #20]
    if (timer) {
    14b2:	b133      	cbz	r3, 14c2 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    14b4:	68d9      	ldr	r1, [r3, #12]
    14b6:	4628      	mov	r0, r5
    14b8:	f7ff ff44 	bl	1344 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
    14bc:	b906      	cbnz	r6, 14c0 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
    14be:	b662      	cpsie	i
}
    14c0:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
    14c2:	78ab      	ldrb	r3, [r5, #2]
    14c4:	b11b      	cbz	r3, 14ce <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
    14c6:	6928      	ldr	r0, [r5, #16]
    14c8:	f7ff ff9b 	bl	1402 <nrf_rtc_disable_ocmp>
    14cc:	e7f6      	b.n	14bc <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
    14ce:	6928      	ldr	r0, [r5, #16]
    14d0:	f7ff ff92 	bl	13f8 <nrf_timer_disable_ocmp>
    14d4:	e7f2      	b.n	14bc <hal_timer_chk_queue+0x5c>

000014d6 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
    14d6:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
    14d8:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    14da:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
    14de:	b113      	cbz	r3, 14e6 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    14e0:	2300      	movs	r3, #0
    14e2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
    14e6:	6883      	ldr	r3, [r0, #8]
    14e8:	3301      	adds	r3, #1
    14ea:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    14ec:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
    14f0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    14f4:	d100      	bne.n	14f8 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
    14f6:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
    14f8:	f7ff ffb2 	bl	1460 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    14fc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
    1500:	e7f9      	b.n	14f6 <hal_timer_irq_handler+0x20>
	...

00001504 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    1504:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
    1506:	4802      	ldr	r0, [pc, #8]	; (1510 <nrf52_timer0_irq_handler+0xc>)
    1508:	f7ff ffe5 	bl	14d6 <hal_timer_irq_handler>
}
    150c:	bd08      	pop	{r3, pc}
    150e:	bf00      	nop
    1510:	20001978 	.word	0x20001978

00001514 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1514:	2805      	cmp	r0, #5
    1516:	dc1c      	bgt.n	1552 <hal_timer_init+0x3e>
    1518:	4b12      	ldr	r3, [pc, #72]	; (1564 <hal_timer_init+0x50>)
    151a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    151e:	b1d3      	cbz	r3, 1556 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    1520:	781a      	ldrb	r2, [r3, #0]
    1522:	b9d2      	cbnz	r2, 155a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    1524:	b9d8      	cbnz	r0, 155e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    1526:	4a10      	ldr	r2, [pc, #64]	; (1568 <hal_timer_init+0x54>)
    1528:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    152a:	2208      	movs	r2, #8
    152c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    152e:	4b0f      	ldr	r3, [pc, #60]	; (156c <hal_timer_init+0x58>)
    1530:	f44f 7280 	mov.w	r2, #256	; 0x100
    1534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    153c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1540:	22e0      	movs	r2, #224	; 0xe0
    1542:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1546:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
    154a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    154c:	4a08      	ldr	r2, [pc, #32]	; (1570 <hal_timer_init+0x5c>)
    154e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
    1550:	4770      	bx	lr

err:
    return rc;
    1552:	2016      	movs	r0, #22
    1554:	4770      	bx	lr
    1556:	2016      	movs	r0, #22
    1558:	4770      	bx	lr
    155a:	2016      	movs	r0, #22
    155c:	4770      	bx	lr
    155e:	2016      	movs	r0, #22
}
    1560:	4770      	bx	lr
    1562:	bf00      	nop
    1564:	00003a38 	.word	0x00003a38
    1568:	40008000 	.word	0x40008000
    156c:	e000e100 	.word	0xe000e100
    1570:	00001505 	.word	0x00001505

00001574 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1574:	2805      	cmp	r0, #5
    1576:	dc65      	bgt.n	1644 <hal_timer_config+0xd0>
    1578:	4b39      	ldr	r3, [pc, #228]	; (1660 <hal_timer_config+0xec>)
    157a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    157e:	2800      	cmp	r0, #0
    1580:	d062      	beq.n	1648 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    1582:	4b38      	ldr	r3, [pc, #224]	; (1664 <hal_timer_config+0xf0>)
    1584:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    1588:	7803      	ldrb	r3, [r0, #0]
    158a:	2b00      	cmp	r3, #0
    158c:	d15e      	bne.n	164c <hal_timer_config+0xd8>
    158e:	2900      	cmp	r1, #0
    1590:	d05e      	beq.n	1650 <hal_timer_config+0xdc>
    1592:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1596:	d85d      	bhi.n	1654 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
    1598:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    159a:	2a00      	cmp	r2, #0
    159c:	d05c      	beq.n	1658 <hal_timer_config+0xe4>
{
    159e:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    15a0:	2901      	cmp	r1, #1
    15a2:	d013      	beq.n	15cc <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    15a4:	2301      	movs	r3, #1
    15a6:	2b09      	cmp	r3, #9
    15a8:	d810      	bhi.n	15cc <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
    15aa:	2201      	movs	r2, #1
    15ac:	409a      	lsls	r2, r3
    15ae:	428a      	cmp	r2, r1
    15b0:	d202      	bcs.n	15b8 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    15b2:	3301      	adds	r3, #1
    15b4:	b2db      	uxtb	r3, r3
    15b6:	e7f6      	b.n	15a6 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
    15b8:	1e5c      	subs	r4, r3, #1
    15ba:	2501      	movs	r5, #1
    15bc:	fa05 f404 	lsl.w	r4, r5, r4
    15c0:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
    15c2:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
    15c4:	428c      	cmp	r4, r1
    15c6:	d201      	bcs.n	15cc <hal_timer_config+0x58>
                    prescaler -= 1;
    15c8:	3b01      	subs	r3, #1
    15ca:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    15cc:	4a25      	ldr	r2, [pc, #148]	; (1664 <hal_timer_config+0xf0>)
    15ce:	411a      	asrs	r2, r3
    15d0:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
    15d2:	2201      	movs	r2, #1
    15d4:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    15d6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    15da:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    15dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15e0:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    15e4:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
    15e8:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    15ec:	d00c      	beq.n	1608 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    15ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15f2:	2100      	movs	r1, #0
    15f4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    15f8:	2101      	movs	r1, #1
    15fa:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    15fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1600:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    1604:	2a00      	cmp	r2, #0
    1606:	d0f9      	beq.n	15fc <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
    1608:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    160a:	2101      	movs	r1, #1
    160c:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
    160e:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    1610:	2500      	movs	r5, #0
    1612:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    1616:	2503      	movs	r5, #3
    1618:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    161c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    1620:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    1622:	7842      	ldrb	r2, [r0, #1]
    1624:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1626:	2b00      	cmp	r3, #0
    1628:	db07      	blt.n	163a <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    162a:	f002 021f 	and.w	r2, r2, #31
    162e:	095b      	lsrs	r3, r3, #5
    1630:	fa01 f202 	lsl.w	r2, r1, r2
    1634:	490c      	ldr	r1, [pc, #48]	; (1668 <hal_timer_config+0xf4>)
    1636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    163a:	b97c      	cbnz	r4, 165c <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
    163c:	b662      	cpsie	i

    return 0;
    163e:	2000      	movs	r0, #0

err:
    return rc;
}
    1640:	bc30      	pop	{r4, r5}
    1642:	4770      	bx	lr
    return rc;
    1644:	2016      	movs	r0, #22
    1646:	4770      	bx	lr
    1648:	2016      	movs	r0, #22
    164a:	4770      	bx	lr
    164c:	2016      	movs	r0, #22
    164e:	4770      	bx	lr
    1650:	2016      	movs	r0, #22
    1652:	4770      	bx	lr
    1654:	2016      	movs	r0, #22
    1656:	4770      	bx	lr
    1658:	2016      	movs	r0, #22
}
    165a:	4770      	bx	lr
    return 0;
    165c:	2000      	movs	r0, #0
    165e:	e7ef      	b.n	1640 <hal_timer_config+0xcc>
    1660:	00003a38 	.word	0x00003a38
    1664:	00f42400 	.word	0x00f42400
    1668:	e000e100 	.word	0xe000e100

0000166c <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
    166c:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    166e:	2805      	cmp	r0, #5
    1670:	dc0c      	bgt.n	168c <hal_timer_read+0x20>
    1672:	4b09      	ldr	r3, [pc, #36]	; (1698 <hal_timer_read+0x2c>)
    1674:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1678:	b140      	cbz	r0, 168c <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
    167a:	7883      	ldrb	r3, [r0, #2]
    167c:	b91b      	cbnz	r3, 1686 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    167e:	6900      	ldr	r0, [r0, #16]
    1680:	f7ff fe5a 	bl	1338 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    1684:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    1686:	f7ff fec1 	bl	140c <hal_timer_read_bsptimer>
    168a:	e7fb      	b.n	1684 <hal_timer_read+0x18>
    assert(0);
    168c:	2300      	movs	r3, #0
    168e:	461a      	mov	r2, r3
    1690:	4619      	mov	r1, r3
    1692:	4618      	mov	r0, r3
    1694:	f000 f802 	bl	169c <__assert_func>
    1698:	00003a38 	.word	0x00003a38

0000169c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    169c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    169e:	f000 f83a 	bl	1716 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    16a2:	f7fe fd5f 	bl	164 <hal_debugger_connected>
    16a6:	b100      	cbz	r0, 16aa <__assert_func+0xe>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    16a8:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    16aa:	4b04      	ldr	r3, [pc, #16]	; (16bc <__assert_func+0x20>)
    16ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    16b0:	605a      	str	r2, [r3, #4]
    asm("isb");
    16b2:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    16b6:	f7fe fd5d 	bl	174 <hal_system_reset>
    16ba:	bf00      	nop
    16bc:	e000ed00 	.word	0xe000ed00

000016c0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    16c0:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    16c2:	4b04      	ldr	r3, [pc, #16]	; (16d4 <os_default_irq+0x14>)
    16c4:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    16c6:	685a      	ldr	r2, [r3, #4]
    16c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    16cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    16ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
    16d0:	f7fe fd50 	bl	174 <hal_system_reset>
    16d4:	e000ed00 	.word	0xe000ed00

000016d8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    16d8:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    16da:	4601      	mov	r1, r0
    16dc:	2000      	movs	r0, #0
    16de:	f7ff ff49 	bl	1574 <hal_timer_config>
    return rc;
}
    16e2:	bd08      	pop	{r3, pc}

000016e4 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    16e4:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    16e6:	2000      	movs	r0, #0
    16e8:	f7ff ffc0 	bl	166c <hal_timer_read>
    return cpu_time;
}
    16ec:	bd08      	pop	{r3, pc}

000016ee <os_cputime_delay_ticks>:
{
    16ee:	b510      	push	{r4, lr}
    16f0:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    16f2:	f7ff fff7 	bl	16e4 <os_cputime_get32>
    16f6:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    16f8:	f7ff fff4 	bl	16e4 <os_cputime_get32>
    16fc:	1b00      	subs	r0, r0, r4
    16fe:	2800      	cmp	r0, #0
    1700:	dbfa      	blt.n	16f8 <os_cputime_delay_ticks+0xa>
}
    1702:	bd10      	pop	{r4, pc}

00001704 <os_cputime_delay_usecs>:
{
    1704:	b508      	push	{r3, lr}
    os_cputime_delay_ticks(ticks);
    1706:	f7ff fff2 	bl	16ee <os_cputime_delay_ticks>
}
    170a:	bd08      	pop	{r3, pc}

0000170c <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    170c:	b508      	push	{r3, lr}
    os_time_advance(1);
    170e:	2001      	movs	r0, #1
    1710:	f000 f808 	bl	1724 <os_time_advance>
}
    1714:	bd08      	pop	{r3, pc}

00001716 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1716:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    171a:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    171c:	f000 0001 	and.w	r0, r0, #1
    1720:	4770      	bx	lr
	...

00001724 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    1724:	4a02      	ldr	r2, [pc, #8]	; (1730 <os_time_advance+0xc>)
    1726:	6813      	ldr	r3, [r2, #0]
    1728:	4418      	add	r0, r3
    172a:	6010      	str	r0, [r2, #0]
}
    172c:	4770      	bx	lr
    172e:	bf00      	nop
    1730:	2000199c 	.word	0x2000199c

00001734 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    1734:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    1738:	482b      	ldr	r0, [pc, #172]	; (17e8 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    173a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    173c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    173e:	f380 8814 	msr	CONTROL, r0
        ISB
    1742:	f3bf 8f6f 	isb	sy
        BX      LR
    1746:	4770      	bx	lr

00001748 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    1748:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    174c:	4770      	bx	lr

0000174e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    174e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    1752:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    1754:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    1758:	b951      	cbnz	r1, 1770 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    175a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    175e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1760:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    1766:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    176a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    176e:	4770      	bx	lr

00001770 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1770:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    1772:	4a1e      	ldr	r2, [pc, #120]	; (17ec <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    1774:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    1776:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    1778:	d809      	bhi.n	178e <SVC_Done>

        LDR     R4,=SVC_Table-4
    177a:	4c1d      	ldr	r4, [pc, #116]	; (17f0 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    177c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1780:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1784:	47a0      	blx	r4

        MRS     R12,PSP
    1786:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    178a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000178e <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    178e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    1792:	4770      	bx	lr

00001794 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1794:	4b17      	ldr	r3, [pc, #92]	; (17f4 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    1796:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1798:	4b17      	ldr	r3, [pc, #92]	; (17f8 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    179a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    179c:	4291      	cmp	r1, r2
        IT      EQ
    179e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    17a0:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    17a2:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    17a6:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    17aa:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    17ae:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    17b0:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    17b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    17b8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    17bc:	4770      	bx	lr

000017be <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    17be:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    17c0:	f7ff ffa4 	bl	170c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    17c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    17c8:	4770      	bx	lr

000017ca <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    17ca:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    17ce:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    17d0:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    17d4:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    17d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    17dc:	4668      	mov	r0, sp
        BL      os_default_irq
    17de:	f7ff ff6f 	bl	16c0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    17e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    17e6:	4770      	bx	lr
        LDR     R0,=os_flags
    17e8:	20000144 	.word	0x20000144
        LDR     R2,=SVC_Count
    17ec:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    17f0:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    17f4:	20000138 	.word	0x20000138
        LDR     R3,=g_current_task      /* Get current task */
    17f8:	20001994 	.word	0x20001994

000017fc <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    17fc:	b470      	push	{r4, r5, r6}
    17fe:	f04f 0500 	mov.w	r5, #0
    1802:	f022 0603 	bic.w	r6, r2, #3
    1806:	e005      	b.n	1814 <test1>

00001808 <loop1>:
    1808:	5943      	ldr	r3, [r0, r5]
    180a:	594c      	ldr	r4, [r1, r5]
    180c:	42a3      	cmp	r3, r4
    180e:	d104      	bne.n	181a <res1>
    1810:	f105 0504 	add.w	r5, r5, #4

00001814 <test1>:
    1814:	42b5      	cmp	r5, r6
    1816:	d1f7      	bne.n	1808 <loop1>
    1818:	e00d      	b.n	1836 <test2>

0000181a <res1>:
    181a:	ba1b      	rev	r3, r3
    181c:	ba24      	rev	r4, r4
    181e:	1b1b      	subs	r3, r3, r4
    1820:	bf8c      	ite	hi
    1822:	2301      	movhi	r3, #1
    1824:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1828:	e009      	b.n	183e <done>

0000182a <loop2>:
    182a:	5d43      	ldrb	r3, [r0, r5]
    182c:	5d4c      	ldrb	r4, [r1, r5]
    182e:	1b1b      	subs	r3, r3, r4
    1830:	d105      	bne.n	183e <done>
    1832:	f105 0501 	add.w	r5, r5, #1

00001836 <test2>:
    1836:	4295      	cmp	r5, r2
    1838:	d1f7      	bne.n	182a <loop2>
    183a:	f04f 0300 	mov.w	r3, #0

0000183e <done>:
    183e:	4618      	mov	r0, r3
    1840:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    1842:	4770      	bx	lr

00001844 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    1844:	e001      	b.n	184a <test1>

00001846 <loop1>:
    1846:	588b      	ldr	r3, [r1, r2]
    1848:	5083      	str	r3, [r0, r2]

0000184a <test1>:
    184a:	3a04      	subs	r2, #4
    184c:	d5fb      	bpl.n	1846 <loop1>
    184e:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    1852:	e001      	b.n	1858 <test2>

00001854 <loop2>:
    1854:	5c8b      	ldrb	r3, [r1, r2]
    1856:	5483      	strb	r3, [r0, r2]

00001858 <test2>:
    1858:	3a01      	subs	r2, #1
    185a:	d5fb      	bpl.n	1854 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    185c:	4770      	bx	lr

0000185e <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    185e:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1860:	4605      	mov	r5, r0
    1862:	b2c9      	uxtb	r1, r1
    1864:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1868:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    186c:	18ab      	adds	r3, r5, r2
    186e:	2403      	movs	r4, #3
    1870:	4023      	ands	r3, r4
    1872:	1ad3      	subs	r3, r2, r3
    1874:	d40b      	bmi.n	188e <memset+0x30>
    1876:	e001      	b.n	187c <memset+0x1e>
    1878:	3a01      	subs	r2, #1
    187a:	54a9      	strb	r1, [r5, r2]
    187c:	429a      	cmp	r2, r3
    187e:	d1fb      	bne.n	1878 <memset+0x1a>
    1880:	e000      	b.n	1884 <memset+0x26>
    1882:	50a9      	str	r1, [r5, r2]
    1884:	3a04      	subs	r2, #4
    1886:	d5fc      	bpl.n	1882 <memset+0x24>
    1888:	3204      	adds	r2, #4
    188a:	e000      	b.n	188e <memset+0x30>
    188c:	54a9      	strb	r1, [r5, r2]
    188e:	3a01      	subs	r2, #1
    1890:	d5fc      	bpl.n	188c <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    1892:	bc30      	pop	{r4, r5}
    1894:	4770      	bx	lr

00001896 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
    1896:	b570      	push	{r4, r5, r6, lr}
    1898:	b086      	sub	sp, #24
    189a:	4605      	mov	r5, r0
    189c:	460e      	mov	r6, r1
    189e:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
    18a0:	2300      	movs	r3, #0
    18a2:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
    18a4:	f000 fa16 	bl	1cd4 <mfg_init>

    mfg_open(&reader);
    18a8:	a801      	add	r0, sp, #4
    18aa:	f000 fa25 	bl	1cf8 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
    18ae:	6823      	ldr	r3, [r4, #0]
    18b0:	42ab      	cmp	r3, r5
    18b2:	da29      	bge.n	1908 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    18b4:	2102      	movs	r1, #2
    18b6:	a801      	add	r0, sp, #4
    18b8:	f000 f9f5 	bl	1ca6 <mfg_seek_next_with_type>
    18bc:	4603      	mov	r3, r0
        switch (rc) {
    18be:	f110 0f0f 	cmn.w	r0, #15
    18c2:	d003      	beq.n	18cc <flash_map_read_mfg+0x36>
    18c4:	b120      	cbz	r0, 18d0 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
    18c6:	4618      	mov	r0, r3
    18c8:	b006      	add	sp, #24
    18ca:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    18cc:	2300      	movs	r3, #0
    18ce:	e7fa      	b.n	18c6 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    18d0:	a903      	add	r1, sp, #12
    18d2:	a801      	add	r0, sp, #4
    18d4:	f000 f9f4 	bl	1cc0 <mfg_read_tlv_flash_area>
        if (rc != 0) {
    18d8:	4603      	mov	r3, r0
    18da:	2800      	cmp	r0, #0
    18dc:	d1f3      	bne.n	18c6 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
    18de:	6823      	ldr	r3, [r4, #0]
    18e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18e4:	009a      	lsls	r2, r3, #2
    18e6:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
    18e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
    18ec:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
    18ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
    18f2:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    18f4:	f8dd 200e 	ldr.w	r2, [sp, #14]
    18f8:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    18fa:	f8dd 2012 	ldr.w	r2, [sp, #18]
    18fe:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
    1900:	6823      	ldr	r3, [r4, #0]
    1902:	3301      	adds	r3, #1
    1904:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
    1906:	e7d2      	b.n	18ae <flash_map_read_mfg+0x18>
            return -1;
    1908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    190c:	e7db      	b.n	18c6 <flash_map_read_mfg+0x30>
	...

00001910 <flash_area_open>:
{
    1910:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
    1912:	4b0d      	ldr	r3, [pc, #52]	; (1948 <flash_area_open+0x38>)
    1914:	681d      	ldr	r5, [r3, #0]
    1916:	b1a5      	cbz	r5, 1942 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
    1918:	2300      	movs	r3, #0
    191a:	4a0c      	ldr	r2, [pc, #48]	; (194c <flash_area_open+0x3c>)
    191c:	6812      	ldr	r2, [r2, #0]
    191e:	429a      	cmp	r2, r3
    1920:	dd0b      	ble.n	193a <flash_area_open+0x2a>
        area = flash_map + i;
    1922:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    1926:	00a2      	lsls	r2, r4, #2
    1928:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
    192a:	5caa      	ldrb	r2, [r5, r2]
    192c:	4282      	cmp	r2, r0
    192e:	d001      	beq.n	1934 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
    1930:	3301      	adds	r3, #1
    1932:	e7f2      	b.n	191a <flash_area_open+0xa>
            *fap = area;
    1934:	600c      	str	r4, [r1, #0]
            return 0;
    1936:	2000      	movs	r0, #0
    1938:	e001      	b.n	193e <flash_area_open+0x2e>
    return SYS_ENOENT;
    193a:	f06f 0003 	mvn.w	r0, #3
}
    193e:	bc30      	pop	{r4, r5}
    1940:	4770      	bx	lr
        return SYS_EACCES;
    1942:	f06f 0006 	mvn.w	r0, #6
    1946:	e7fa      	b.n	193e <flash_area_open+0x2e>
    1948:	200019a0 	.word	0x200019a0
    194c:	200019a4 	.word	0x200019a4

00001950 <flash_area_to_sectors>:
{
    1950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1954:	b084      	sub	sp, #16
    1956:	460f      	mov	r7, r1
    1958:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    195a:	fa5f f980 	uxtb.w	r9, r0
    195e:	a903      	add	r1, sp, #12
    1960:	4648      	mov	r0, r9
    1962:	f7ff ffd5 	bl	1910 <flash_area_open>
    if (rc != 0) {
    1966:	4680      	mov	r8, r0
    1968:	b118      	cbz	r0, 1972 <flash_area_to_sectors+0x22>
}
    196a:	4640      	mov	r0, r8
    196c:	b004      	add	sp, #16
    196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    1972:	2300      	movs	r3, #0
    1974:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1976:	9b03      	ldr	r3, [sp, #12]
    1978:	7858      	ldrb	r0, [r3, #1]
    197a:	f7fe fe61 	bl	640 <hal_bsp_flash_dev>
    197e:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1980:	4644      	mov	r4, r8
    1982:	e003      	b.n	198c <flash_area_to_sectors+0x3c>
            (*cnt)++;
    1984:	683b      	ldr	r3, [r7, #0]
    1986:	3301      	adds	r3, #1
    1988:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    198a:	3401      	adds	r4, #1
    198c:	68eb      	ldr	r3, [r5, #12]
    198e:	42a3      	cmp	r3, r4
    1990:	ddeb      	ble.n	196a <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    1992:	682b      	ldr	r3, [r5, #0]
    1994:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    1998:	ab01      	add	r3, sp, #4
    199a:	aa02      	add	r2, sp, #8
    199c:	4621      	mov	r1, r4
    199e:	4628      	mov	r0, r5
    19a0:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    19a2:	9903      	ldr	r1, [sp, #12]
    19a4:	684b      	ldr	r3, [r1, #4]
    19a6:	9a02      	ldr	r2, [sp, #8]
    19a8:	4293      	cmp	r3, r2
    19aa:	d8ee      	bhi.n	198a <flash_area_to_sectors+0x3a>
    19ac:	6889      	ldr	r1, [r1, #8]
    19ae:	440b      	add	r3, r1
    19b0:	429a      	cmp	r2, r3
    19b2:	d2ea      	bcs.n	198a <flash_area_to_sectors+0x3a>
            if (ret) {
    19b4:	2e00      	cmp	r6, #0
    19b6:	d0e5      	beq.n	1984 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    19b8:	f886 9000 	strb.w	r9, [r6]
                ret->fa_device_id = fa->fa_device_id;
    19bc:	9b03      	ldr	r3, [sp, #12]
    19be:	785b      	ldrb	r3, [r3, #1]
    19c0:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    19c2:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    19c4:	9b01      	ldr	r3, [sp, #4]
    19c6:	60b3      	str	r3, [r6, #8]
                ret++;
    19c8:	360c      	adds	r6, #12
    19ca:	e7db      	b.n	1984 <flash_area_to_sectors+0x34>

000019cc <flash_area_read>:
{
    19cc:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    19ce:	6884      	ldr	r4, [r0, #8]
    19d0:	428c      	cmp	r4, r1
    19d2:	d308      	bcc.n	19e6 <flash_area_read+0x1a>
    19d4:	18cd      	adds	r5, r1, r3
    19d6:	42ac      	cmp	r4, r5
    19d8:	d308      	bcc.n	19ec <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    19da:	6844      	ldr	r4, [r0, #4]
    19dc:	4421      	add	r1, r4
    19de:	7840      	ldrb	r0, [r0, #1]
    19e0:	f001 fec7 	bl	3772 <hal_flash_read>
}
    19e4:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    19e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19ea:	e7fb      	b.n	19e4 <flash_area_read+0x18>
    19ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19f0:	e7f8      	b.n	19e4 <flash_area_read+0x18>

000019f2 <flash_area_write>:
{
    19f2:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    19f4:	6884      	ldr	r4, [r0, #8]
    19f6:	428c      	cmp	r4, r1
    19f8:	d308      	bcc.n	1a0c <flash_area_write+0x1a>
    19fa:	18cd      	adds	r5, r1, r3
    19fc:	42ac      	cmp	r4, r5
    19fe:	d308      	bcc.n	1a12 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    1a00:	6844      	ldr	r4, [r0, #4]
    1a02:	4421      	add	r1, r4
    1a04:	7840      	ldrb	r0, [r0, #1]
    1a06:	f001 fedf 	bl	37c8 <hal_flash_write>
}
    1a0a:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    1a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a10:	e7fb      	b.n	1a0a <flash_area_write+0x18>
    1a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a16:	e7f8      	b.n	1a0a <flash_area_write+0x18>

00001a18 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1a18:	6883      	ldr	r3, [r0, #8]
    1a1a:	428b      	cmp	r3, r1
    1a1c:	d309      	bcc.n	1a32 <flash_area_erase+0x1a>
{
    1a1e:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1a20:	188c      	adds	r4, r1, r2
    1a22:	42a3      	cmp	r3, r4
    1a24:	d308      	bcc.n	1a38 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    1a26:	6843      	ldr	r3, [r0, #4]
    1a28:	4419      	add	r1, r3
    1a2a:	7840      	ldrb	r0, [r0, #1]
    1a2c:	f001 ff06 	bl	383c <hal_flash_erase>
}
    1a30:	bd10      	pop	{r4, pc}
        return -1;
    1a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1a36:	4770      	bx	lr
        return -1;
    1a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a3c:	e7f8      	b.n	1a30 <flash_area_erase+0x18>

00001a3e <flash_area_align>:
{
    1a3e:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    1a40:	7840      	ldrb	r0, [r0, #1]
    1a42:	f001 fe86 	bl	3752 <hal_flash_align>
}
    1a46:	bd08      	pop	{r3, pc}

00001a48 <flash_area_erased_val>:
{
    1a48:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    1a4a:	7840      	ldrb	r0, [r0, #1]
    1a4c:	f001 fe89 	bl	3762 <hal_flash_erased_val>
}
    1a50:	bd08      	pop	{r3, pc}

00001a52 <flash_area_read_is_empty>:
{
    1a52:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    1a54:	6844      	ldr	r4, [r0, #4]
    1a56:	4421      	add	r1, r4
    1a58:	7840      	ldrb	r0, [r0, #1]
    1a5a:	f001 ff6f 	bl	393c <hal_flash_isempty>
}
    1a5e:	bd10      	pop	{r4, pc}

00001a60 <flash_map_init>:

void
flash_map_init(void)
{
    1a60:	b510      	push	{r4, lr}
    1a62:	b084      	sub	sp, #16
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    1a64:	f001 fe61 	bl	372a <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1a68:	b138      	cbz	r0, 1a7a <flash_map_init+0x1a>
    1a6a:	2000      	movs	r0, #0
    1a6c:	9000      	str	r0, [sp, #0]
    1a6e:	4b0e      	ldr	r3, [pc, #56]	; (1aa8 <flash_map_init+0x48>)
    1a70:	681c      	ldr	r4, [r3, #0]
    1a72:	4603      	mov	r3, r0
    1a74:	4602      	mov	r2, r0
    1a76:	4601      	mov	r1, r0
    1a78:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    1a7a:	4b0c      	ldr	r3, [pc, #48]	; (1aac <flash_map_init+0x4c>)
    1a7c:	4a0c      	ldr	r2, [pc, #48]	; (1ab0 <flash_map_init+0x50>)
    1a7e:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    1a80:	4b0c      	ldr	r3, [pc, #48]	; (1ab4 <flash_map_init+0x54>)
    1a82:	2206      	movs	r2, #6
    1a84:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
    1a86:	aa03      	add	r2, sp, #12
    1a88:	490b      	ldr	r1, [pc, #44]	; (1ab8 <flash_map_init+0x58>)
    1a8a:	200a      	movs	r0, #10
    1a8c:	f7ff ff03 	bl	1896 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
    1a90:	b938      	cbnz	r0, 1aa2 <flash_map_init+0x42>
    1a92:	9b03      	ldr	r3, [sp, #12]
    1a94:	2b00      	cmp	r3, #0
    1a96:	dd04      	ble.n	1aa2 <flash_map_init+0x42>
        flash_map = mfg_areas;
    1a98:	4a04      	ldr	r2, [pc, #16]	; (1aac <flash_map_init+0x4c>)
    1a9a:	4907      	ldr	r1, [pc, #28]	; (1ab8 <flash_map_init+0x58>)
    1a9c:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
    1a9e:	4a05      	ldr	r2, [pc, #20]	; (1ab4 <flash_map_init+0x54>)
    1aa0:	6013      	str	r3, [r2, #0]
    }
}
    1aa2:	b004      	add	sp, #16
    1aa4:	bd10      	pop	{r4, pc}
    1aa6:	bf00      	nop
    1aa8:	20000140 	.word	0x20000140
    1aac:	200019a0 	.word	0x200019a0
    1ab0:	00003a50 	.word	0x00003a50
    1ab4:	200019a4 	.word	0x200019a4
    1ab8:	20000148 	.word	0x20000148

00001abc <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    1abc:	b530      	push	{r4, r5, lr}
    1abe:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    1ac0:	7885      	ldrb	r5, [r0, #2]
    1ac2:	4b21      	ldr	r3, [pc, #132]	; (1b48 <mfg_seek_next_aux+0x8c>)
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	429d      	cmp	r5, r3
    1ac8:	da32      	bge.n	1b30 <mfg_seek_next_aux+0x74>
    1aca:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    1acc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1ad0:	0093      	lsls	r3, r2, #2
    1ad2:	a901      	add	r1, sp, #4
    1ad4:	4a1d      	ldr	r2, [pc, #116]	; (1b4c <mfg_seek_next_aux+0x90>)
    1ad6:	5cd0      	ldrb	r0, [r2, r3]
    1ad8:	f7ff ff1a 	bl	1910 <flash_area_open>
    if (rc != 0) {
    1adc:	bb58      	cbnz	r0, 1b36 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    1ade:	6862      	ldr	r2, [r4, #4]
    1ae0:	b9c2      	cbnz	r2, 1b14 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    1ae2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1ae6:	00aa      	lsls	r2, r5, #2
    1ae8:	4b18      	ldr	r3, [pc, #96]	; (1b4c <mfg_seek_next_aux+0x90>)
    1aea:	4413      	add	r3, r2
    1aec:	685b      	ldr	r3, [r3, #4]
    1aee:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    1af0:	6861      	ldr	r1, [r4, #4]
    1af2:	9801      	ldr	r0, [sp, #4]
    1af4:	6883      	ldr	r3, [r0, #8]
    1af6:	3b08      	subs	r3, #8
    1af8:	4299      	cmp	r1, r3
    1afa:	d310      	bcc.n	1b1e <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    1afc:	78a3      	ldrb	r3, [r4, #2]
    1afe:	1c59      	adds	r1, r3, #1
    1b00:	4a11      	ldr	r2, [pc, #68]	; (1b48 <mfg_seek_next_aux+0x8c>)
    1b02:	6812      	ldr	r2, [r2, #0]
    1b04:	4291      	cmp	r1, r2
    1b06:	da19      	bge.n	1b3c <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    1b08:	2200      	movs	r2, #0
    1b0a:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    1b0c:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    1b0e:	f06f 0305 	mvn.w	r3, #5
    1b12:	e015      	b.n	1b40 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    1b14:	7863      	ldrb	r3, [r4, #1]
    1b16:	4413      	add	r3, r2
    1b18:	3302      	adds	r3, #2
    1b1a:	6063      	str	r3, [r4, #4]
    1b1c:	e7e8      	b.n	1af0 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    1b1e:	2302      	movs	r3, #2
    1b20:	4622      	mov	r2, r4
    1b22:	f7ff ff53 	bl	19cc <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    1b26:	4603      	mov	r3, r0
    1b28:	b150      	cbz	r0, 1b40 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    1b2a:	f06f 0304 	mvn.w	r3, #4
    1b2e:	e007      	b.n	1b40 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    1b30:	f06f 0301 	mvn.w	r3, #1
    1b34:	e004      	b.n	1b40 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    1b36:	f06f 0304 	mvn.w	r3, #4
    1b3a:	e001      	b.n	1b40 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    1b3c:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    1b40:	4618      	mov	r0, r3
    1b42:	b003      	add	sp, #12
    1b44:	bd30      	pop	{r4, r5, pc}
    1b46:	bf00      	nop
    1b48:	200001dc 	.word	0x200001dc
    1b4c:	200001c4 	.word	0x200001c4

00001b50 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    1b50:	b530      	push	{r4, r5, lr}
    1b52:	b085      	sub	sp, #20
    1b54:	4605      	mov	r5, r0
    1b56:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    1b58:	a903      	add	r1, sp, #12
    1b5a:	f7ff fed9 	bl	1910 <flash_area_open>
    if (rc != 0) {
    1b5e:	b9e8      	cbnz	r0, 1b9c <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    1b60:	9803      	ldr	r0, [sp, #12]
    1b62:	6881      	ldr	r1, [r0, #8]
    1b64:	2308      	movs	r3, #8
    1b66:	aa01      	add	r2, sp, #4
    1b68:	3908      	subs	r1, #8
    1b6a:	f7ff ff2f 	bl	19cc <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    1b6e:	4601      	mov	r1, r0
    1b70:	b9b8      	cbnz	r0, 1ba2 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    1b72:	9a02      	ldr	r2, [sp, #8]
    1b74:	4b11      	ldr	r3, [pc, #68]	; (1bbc <mfg_read_mmr+0x6c>)
    1b76:	429a      	cmp	r2, r3
    1b78:	d116      	bne.n	1ba8 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    1b7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1b7e:	2b02      	cmp	r3, #2
    1b80:	d115      	bne.n	1bae <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    1b82:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    1b86:	9b03      	ldr	r3, [sp, #12]
    1b88:	689b      	ldr	r3, [r3, #8]
    1b8a:	429a      	cmp	r2, r3
    1b8c:	d812      	bhi.n	1bb4 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    1b8e:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    1b90:	7025      	strb	r5, [r4, #0]
    1b92:	6063      	str	r3, [r4, #4]
    1b94:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    1b96:	4608      	mov	r0, r1
    1b98:	b005      	add	sp, #20
    1b9a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    1b9c:	f06f 0104 	mvn.w	r1, #4
    1ba0:	e7f9      	b.n	1b96 <mfg_read_mmr+0x46>
        return SYS_EIO;
    1ba2:	f06f 0104 	mvn.w	r1, #4
    1ba6:	e7f6      	b.n	1b96 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    1ba8:	f06f 0108 	mvn.w	r1, #8
    1bac:	e7f3      	b.n	1b96 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    1bae:	f06f 010b 	mvn.w	r1, #11
    1bb2:	e7f0      	b.n	1b96 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    1bb4:	f06f 0108 	mvn.w	r1, #8
    1bb8:	e7ed      	b.n	1b96 <mfg_read_mmr+0x46>
    1bba:	bf00      	nop
    1bbc:	3bb2a269 	.word	0x3bb2a269

00001bc0 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    1bc0:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    1bc2:	2300      	movs	r3, #0
    1bc4:	4a11      	ldr	r2, [pc, #68]	; (1c0c <mfg_read_next_mmr+0x4c>)
    1bc6:	6812      	ldr	r2, [r2, #0]
    1bc8:	429a      	cmp	r2, r3
    1bca:	dd08      	ble.n	1bde <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    1bcc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1bd0:	008a      	lsls	r2, r1, #2
    1bd2:	490f      	ldr	r1, [pc, #60]	; (1c10 <mfg_read_next_mmr+0x50>)
    1bd4:	5c8a      	ldrb	r2, [r1, r2]
    1bd6:	4282      	cmp	r2, r0
    1bd8:	d011      	beq.n	1bfe <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    1bda:	3301      	adds	r3, #1
    1bdc:	e7f2      	b.n	1bc4 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    1bde:	2a01      	cmp	r2, #1
    1be0:	dc11      	bgt.n	1c06 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    1be2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1be6:	0093      	lsls	r3, r2, #2
    1be8:	4909      	ldr	r1, [pc, #36]	; (1c10 <mfg_read_next_mmr+0x50>)
    1bea:	4419      	add	r1, r3
    1bec:	f7ff ffb0 	bl	1b50 <mfg_read_mmr>
    if (rc != 0) {
    1bf0:	4603      	mov	r3, r0
    1bf2:	b930      	cbnz	r0, 1c02 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    1bf4:	4905      	ldr	r1, [pc, #20]	; (1c0c <mfg_read_next_mmr+0x4c>)
    1bf6:	680a      	ldr	r2, [r1, #0]
    1bf8:	3201      	adds	r2, #1
    1bfa:	600a      	str	r2, [r1, #0]
    return 0;
    1bfc:	e001      	b.n	1c02 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    1bfe:	f06f 030a 	mvn.w	r3, #10
}
    1c02:	4618      	mov	r0, r3
    1c04:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    1c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1c0a:	e7fa      	b.n	1c02 <mfg_read_next_mmr+0x42>
    1c0c:	200001dc 	.word	0x200001dc
    1c10:	200001c4 	.word	0x200001c4

00001c14 <mfg_open_flash_area>:
{
    1c14:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    1c16:	7883      	ldrb	r3, [r0, #2]
    1c18:	4a0b      	ldr	r2, [pc, #44]	; (1c48 <mfg_open_flash_area+0x34>)
    1c1a:	6812      	ldr	r2, [r2, #0]
    1c1c:	4293      	cmp	r3, r2
    1c1e:	da0a      	bge.n	1c36 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    1c20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1c24:	009a      	lsls	r2, r3, #2
    1c26:	4b09      	ldr	r3, [pc, #36]	; (1c4c <mfg_open_flash_area+0x38>)
    1c28:	5c98      	ldrb	r0, [r3, r2]
    1c2a:	f7ff fe71 	bl	1910 <flash_area_open>
    if (rc != 0) {
    1c2e:	4603      	mov	r3, r0
    1c30:	b938      	cbnz	r0, 1c42 <mfg_open_flash_area+0x2e>
}
    1c32:	4618      	mov	r0, r3
    1c34:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    1c36:	2300      	movs	r3, #0
    1c38:	461a      	mov	r2, r3
    1c3a:	4619      	mov	r1, r3
    1c3c:	4618      	mov	r0, r3
    1c3e:	f7ff fd2d 	bl	169c <__assert_func>
        return SYS_EIO;
    1c42:	f06f 0304 	mvn.w	r3, #4
    1c46:	e7f4      	b.n	1c32 <mfg_open_flash_area+0x1e>
    1c48:	200001dc 	.word	0x200001dc
    1c4c:	200001c4 	.word	0x200001c4

00001c50 <mfg_read_tlv_body>:
{
    1c50:	b570      	push	{r4, r5, r6, lr}
    1c52:	b082      	sub	sp, #8
    1c54:	4606      	mov	r6, r0
    1c56:	460c      	mov	r4, r1
    1c58:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    1c5a:	a901      	add	r1, sp, #4
    1c5c:	f7ff ffda 	bl	1c14 <mfg_open_flash_area>
    if (rc != 0) {
    1c60:	4603      	mov	r3, r0
    1c62:	b110      	cbz	r0, 1c6a <mfg_read_tlv_body+0x1a>
}
    1c64:	4618      	mov	r0, r3
    1c66:	b002      	add	sp, #8
    1c68:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    1c6a:	462a      	mov	r2, r5
    1c6c:	2100      	movs	r1, #0
    1c6e:	4620      	mov	r0, r4
    1c70:	f7ff fdf5 	bl	185e <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    1c74:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    1c76:	6871      	ldr	r1, [r6, #4]
    1c78:	42ab      	cmp	r3, r5
    1c7a:	bfa8      	it	ge
    1c7c:	462b      	movge	r3, r5
    1c7e:	4622      	mov	r2, r4
    1c80:	3102      	adds	r1, #2
    1c82:	9801      	ldr	r0, [sp, #4]
    1c84:	f7ff fea2 	bl	19cc <flash_area_read>
    if (rc != 0) {
    1c88:	4603      	mov	r3, r0
    1c8a:	2800      	cmp	r0, #0
    1c8c:	d0ea      	beq.n	1c64 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    1c8e:	f06f 0304 	mvn.w	r3, #4
    1c92:	e7e7      	b.n	1c64 <mfg_read_tlv_body+0x14>

00001c94 <mfg_seek_next>:
{
    1c94:	b510      	push	{r4, lr}
    1c96:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    1c98:	4620      	mov	r0, r4
    1c9a:	f7ff ff0f 	bl	1abc <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    1c9e:	f110 0f06 	cmn.w	r0, #6
    1ca2:	d0f9      	beq.n	1c98 <mfg_seek_next+0x4>
}
    1ca4:	bd10      	pop	{r4, pc}

00001ca6 <mfg_seek_next_with_type>:
{
    1ca6:	b538      	push	{r3, r4, r5, lr}
    1ca8:	4604      	mov	r4, r0
    1caa:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    1cac:	4620      	mov	r0, r4
    1cae:	f7ff fff1 	bl	1c94 <mfg_seek_next>
        if (rc != 0) {
    1cb2:	4602      	mov	r2, r0
    1cb4:	b910      	cbnz	r0, 1cbc <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    1cb6:	7823      	ldrb	r3, [r4, #0]
    1cb8:	42ab      	cmp	r3, r5
    1cba:	d1f7      	bne.n	1cac <mfg_seek_next_with_type+0x6>
}
    1cbc:	4610      	mov	r0, r2
    1cbe:	bd38      	pop	{r3, r4, r5, pc}

00001cc0 <mfg_read_tlv_flash_area>:
{
    1cc0:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    1cc2:	220a      	movs	r2, #10
    1cc4:	f7ff ffc4 	bl	1c50 <mfg_read_tlv_body>
}
    1cc8:	bd08      	pop	{r3, pc}

00001cca <mfg_read_tlv_mmr_ref>:
{
    1cca:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    1ccc:	2201      	movs	r2, #1
    1cce:	f7ff ffbf 	bl	1c50 <mfg_read_tlv_body>
}
    1cd2:	bd08      	pop	{r3, pc}

00001cd4 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    1cd4:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    1cd6:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <mfg_init+0x20>)
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	b103      	cbz	r3, 1cde <mfg_init+0xa>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
    1cdc:	bd08      	pop	{r3, pc}
    mfg_initialized = true;
    1cde:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <mfg_init+0x20>)
    1ce0:	2201      	movs	r2, #1
    1ce2:	701a      	strb	r2, [r3, #0]
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    1ce4:	2000      	movs	r0, #0
    1ce6:	f7ff ff6b 	bl	1bc0 <mfg_read_next_mmr>
    if (rc != 0) {
    1cea:	2800      	cmp	r0, #0
    1cec:	d1f6      	bne.n	1cdc <mfg_init+0x8>
    rc = mfg_read_mmr_refs();
    1cee:	f000 f80b 	bl	1d08 <mfg_read_mmr_refs>
err:
    1cf2:	e7f3      	b.n	1cdc <mfg_init+0x8>
    1cf4:	200001c0 	.word	0x200001c0

00001cf8 <mfg_open>:
{
    1cf8:	b510      	push	{r4, lr}
    1cfa:	4604      	mov	r4, r0
    mfg_init();
    1cfc:	f7ff ffea 	bl	1cd4 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    1d00:	2300      	movs	r3, #0
    1d02:	6023      	str	r3, [r4, #0]
    1d04:	6063      	str	r3, [r4, #4]
}
    1d06:	bd10      	pop	{r4, pc}

00001d08 <mfg_read_mmr_refs>:
{
    1d08:	b500      	push	{lr}
    1d0a:	b085      	sub	sp, #20
    mfg_open(&reader);
    1d0c:	a801      	add	r0, sp, #4
    1d0e:	f7ff fff3 	bl	1cf8 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    1d12:	2104      	movs	r1, #4
    1d14:	eb0d 0001 	add.w	r0, sp, r1
    1d18:	f7ff ffc5 	bl	1ca6 <mfg_seek_next_with_type>
    1d1c:	4603      	mov	r3, r0
        switch (rc) {
    1d1e:	f110 0f0f 	cmn.w	r0, #15
    1d22:	d004      	beq.n	1d2e <mfg_read_mmr_refs+0x26>
    1d24:	b128      	cbz	r0, 1d32 <mfg_read_mmr_refs+0x2a>
}
    1d26:	4618      	mov	r0, r3
    1d28:	b005      	add	sp, #20
    1d2a:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    1d2e:	2300      	movs	r3, #0
    1d30:	e7f9      	b.n	1d26 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    1d32:	a903      	add	r1, sp, #12
    1d34:	a801      	add	r0, sp, #4
    1d36:	f7ff ffc8 	bl	1cca <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    1d3a:	4603      	mov	r3, r0
    1d3c:	2800      	cmp	r0, #0
    1d3e:	d1f2      	bne.n	1d26 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    1d40:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1d44:	f7ff ff3c 	bl	1bc0 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    1d48:	4603      	mov	r3, r0
    1d4a:	2800      	cmp	r0, #0
    1d4c:	d0e1      	beq.n	1d12 <mfg_read_mmr_refs+0xa>
    1d4e:	f110 0f0b 	cmn.w	r0, #11
    1d52:	d0de      	beq.n	1d12 <mfg_read_mmr_refs+0xa>
    1d54:	e7e7      	b.n	1d26 <mfg_read_mmr_refs+0x1e>

00001d56 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    1d56:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    1d58:	f7ff fca0 	bl	169c <__assert_func>

00001d5c <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    1d5c:	6802      	ldr	r2, [r0, #0]
    1d5e:	4b0e      	ldr	r3, [pc, #56]	; (1d98 <boot_is_header_valid+0x3c>)
    1d60:	429a      	cmp	r2, r3
    1d62:	d001      	beq.n	1d68 <boot_is_header_valid+0xc>
        return false;
    1d64:	2000      	movs	r0, #0
    1d66:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1d68:	68c2      	ldr	r2, [r0, #12]
    1d6a:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    1d6c:	43d8      	mvns	r0, r3
    1d6e:	4282      	cmp	r2, r0
    1d70:	d80a      	bhi.n	1d88 <boot_is_header_valid+0x2c>
{
    1d72:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    1d74:	18d4      	adds	r4, r2, r3
        return true;
    1d76:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1d78:	b110      	cbz	r0, 1d80 <boot_is_header_valid+0x24>
        return false;
    }

    if (size >= fap->fa_size) {
    1d7a:	688b      	ldr	r3, [r1, #8]
    1d7c:	42a3      	cmp	r3, r4
    1d7e:	d901      	bls.n	1d84 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    1d80:	bc10      	pop	{r4}
    1d82:	4770      	bx	lr
        return false;
    1d84:	2000      	movs	r0, #0
    1d86:	e7fb      	b.n	1d80 <boot_is_header_valid+0x24>
        return false;
    1d88:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1d8a:	b110      	cbz	r0, 1d92 <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    1d8c:	688b      	ldr	r3, [r1, #8]
    1d8e:	42a3      	cmp	r3, r4
    1d90:	d900      	bls.n	1d94 <boot_is_header_valid+0x38>
}
    1d92:	4770      	bx	lr
        return false;
    1d94:	2000      	movs	r0, #0
    1d96:	e7fc      	b.n	1d92 <boot_is_header_valid+0x36>
    1d98:	96f3b83d 	.word	0x96f3b83d

00001d9c <boot_write_sz>:
{
    1d9c:	b538      	push	{r3, r4, r5, lr}
    1d9e:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1da0:	6a00      	ldr	r0, [r0, #32]
    1da2:	f7ff fe4c 	bl	1a3e <flash_area_align>
    1da6:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    1da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1daa:	f7ff fe48 	bl	1a3e <flash_area_align>
    if (align > elem_sz) {
    1dae:	4285      	cmp	r5, r0
    1db0:	d200      	bcs.n	1db4 <boot_write_sz+0x18>
}
    1db2:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1db4:	4628      	mov	r0, r5
    return elem_sz;
    1db6:	e7fc      	b.n	1db2 <boot_write_sz+0x16>

00001db8 <boot_read_image_size>:
{
    1db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dbc:	b082      	sub	sp, #8
    1dbe:	4680      	mov	r8, r0
    1dc0:	460d      	mov	r5, r1
    1dc2:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1dc4:	2000      	movs	r0, #0
    1dc6:	f001 faca 	bl	335e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1dca:	a901      	add	r1, sp, #4
    1dcc:	b2c0      	uxtb	r0, r0
    1dce:	f7ff fd9f 	bl	1910 <flash_area_open>
    if (rc != 0) {
    1dd2:	b120      	cbz	r0, 1dde <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    1dd4:	2401      	movs	r4, #1
}
    1dd6:	4620      	mov	r0, r4
    1dd8:	b002      	add	sp, #8
    1dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1dde:	232c      	movs	r3, #44	; 0x2c
    1de0:	fb03 8305 	mla	r3, r3, r5, r8
    1de4:	891e      	ldrh	r6, [r3, #8]
    1de6:	68db      	ldr	r3, [r3, #12]
    1de8:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1dea:	2304      	movs	r3, #4
    1dec:	466a      	mov	r2, sp
    1dee:	4631      	mov	r1, r6
    1df0:	9801      	ldr	r0, [sp, #4]
    1df2:	f7ff fdeb 	bl	19cc <flash_area_read>
    1df6:	4604      	mov	r4, r0
    1df8:	bb30      	cbnz	r0, 1e48 <boot_read_image_size+0x90>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    1dfa:	232c      	movs	r3, #44	; 0x2c
    1dfc:	fb03 8505 	mla	r5, r3, r5, r8
    1e00:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1e02:	f8bd 2000 	ldrh.w	r2, [sp]
    1e06:	f646 1308 	movw	r3, #26888	; 0x6908
    1e0a:	429a      	cmp	r2, r3
    1e0c:	d00c      	beq.n	1e28 <boot_read_image_size+0x70>
    } else if (protect_tlv_size != 0) {
    1e0e:	b9ed      	cbnz	r5, 1e4c <boot_read_image_size+0x94>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1e10:	f8bd 2000 	ldrh.w	r2, [sp]
    1e14:	f646 1307 	movw	r3, #26887	; 0x6907
    1e18:	429a      	cmp	r2, r3
    1e1a:	d119      	bne.n	1e50 <boot_read_image_size+0x98>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    1e1c:	442e      	add	r6, r5
    1e1e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1e22:	441e      	add	r6, r3
    1e24:	603e      	str	r6, [r7, #0]
    1e26:	e7d6      	b.n	1dd6 <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    1e28:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    1e2c:	428d      	cmp	r5, r1
    1e2e:	d001      	beq.n	1e34 <boot_read_image_size+0x7c>
            rc = BOOT_EBADIMAGE;
    1e30:	2403      	movs	r4, #3
    1e32:	e7d0      	b.n	1dd6 <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1e34:	2304      	movs	r3, #4
    1e36:	466a      	mov	r2, sp
    1e38:	4431      	add	r1, r6
    1e3a:	9801      	ldr	r0, [sp, #4]
    1e3c:	f7ff fdc6 	bl	19cc <flash_area_read>
    1e40:	2800      	cmp	r0, #0
    1e42:	d0e5      	beq.n	1e10 <boot_read_image_size+0x58>
            rc = BOOT_EFLASH;
    1e44:	2401      	movs	r4, #1
    1e46:	e7c6      	b.n	1dd6 <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    1e48:	2401      	movs	r4, #1
    1e4a:	e7c4      	b.n	1dd6 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    1e4c:	2403      	movs	r4, #3
    1e4e:	e7c2      	b.n	1dd6 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    1e50:	2403      	movs	r4, #3
    return rc;
    1e52:	e7c0      	b.n	1dd6 <boot_read_image_size+0x1e>

00001e54 <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    1e54:	b570      	push	{r4, r5, r6, lr}
    1e56:	b082      	sub	sp, #8
    1e58:	4606      	mov	r6, r0
    1e5a:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1e5c:	2000      	movs	r0, #0
    1e5e:	f001 fa7e 	bl	335e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1e62:	a901      	add	r1, sp, #4
    1e64:	b2c0      	uxtb	r0, r0
    1e66:	f7ff fd53 	bl	1910 <flash_area_open>
    if (rc != 0) {
    1e6a:	b9d0      	cbnz	r0, 1ea2 <boot_check_header_erased+0x4e>
    1e6c:	4605      	mov	r5, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    1e6e:	9801      	ldr	r0, [sp, #4]
    1e70:	f7ff fdea 	bl	1a48 <flash_area_erased_val>
    1e74:	b2c0      	uxtb	r0, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    1e76:	212c      	movs	r1, #44	; 0x2c
    1e78:	fb01 6104 	mla	r1, r1, r4, r6
    for (i = 0; i < len; i++) {
    1e7c:	2300      	movs	r3, #0
    1e7e:	2b03      	cmp	r3, #3
    1e80:	d805      	bhi.n	1e8e <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    1e82:	5cca      	ldrb	r2, [r1, r3]
    1e84:	4290      	cmp	r0, r2
    1e86:	d107      	bne.n	1e98 <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    1e88:	3301      	adds	r3, #1
    1e8a:	b2db      	uxtb	r3, r3
    1e8c:	e7f7      	b.n	1e7e <boot_check_header_erased+0x2a>
    return true;
    1e8e:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    1e90:	b123      	cbz	r3, 1e9c <boot_check_header_erased+0x48>
        return -1;
    }

    return 0;
}
    1e92:	4628      	mov	r0, r5
    1e94:	b002      	add	sp, #8
    1e96:	bd70      	pop	{r4, r5, r6, pc}
            return false;
    1e98:	2300      	movs	r3, #0
    1e9a:	e7f9      	b.n	1e90 <boot_check_header_erased+0x3c>
        return -1;
    1e9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1ea0:	e7f7      	b.n	1e92 <boot_check_header_erased+0x3e>
        return -1;
    1ea2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1ea6:	e7f4      	b.n	1e92 <boot_check_header_erased+0x3e>

00001ea8 <boot_initialize_area>:
{
    1ea8:	b510      	push	{r4, lr}
    1eaa:	b082      	sub	sp, #8
    1eac:	4604      	mov	r4, r0
    1eae:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1eb0:	2380      	movs	r3, #128	; 0x80
    1eb2:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    1eb4:	2901      	cmp	r1, #1
    1eb6:	d006      	beq.n	1ec6 <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    1eb8:	2902      	cmp	r1, #2
    1eba:	d00b      	beq.n	1ed4 <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    1ebc:	2903      	cmp	r1, #3
    1ebe:	d010      	beq.n	1ee2 <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    1ec0:	2001      	movs	r0, #1
}
    1ec2:	b002      	add	sp, #8
    1ec4:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1ec6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1ec8:	a901      	add	r1, sp, #4
    1eca:	f7ff fd41 	bl	1950 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    1ece:	9b01      	ldr	r3, [sp, #4]
    1ed0:	62a3      	str	r3, [r4, #40]	; 0x28
    1ed2:	e7f6      	b.n	1ec2 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1ed4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    1ed6:	a901      	add	r1, sp, #4
    1ed8:	f7ff fd3a 	bl	1950 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    1edc:	9b01      	ldr	r3, [sp, #4]
    1ede:	6563      	str	r3, [r4, #84]	; 0x54
    1ee0:	e7ef      	b.n	1ec2 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1ee2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    1ee4:	a901      	add	r1, sp, #4
    1ee6:	f7ff fd33 	bl	1950 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    1eea:	9b01      	ldr	r3, [sp, #4]
    1eec:	6623      	str	r3, [r4, #96]	; 0x60
    1eee:	e7e8      	b.n	1ec2 <boot_initialize_area+0x1a>

00001ef0 <boot_read_sectors>:
{
    1ef0:	b538      	push	{r3, r4, r5, lr}
    1ef2:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    1ef4:	2101      	movs	r1, #1
    1ef6:	f7ff ffd7 	bl	1ea8 <boot_initialize_area>
    if (rc != 0) {
    1efa:	b110      	cbz	r0, 1f02 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    1efc:	2401      	movs	r4, #1
}
    1efe:	4620      	mov	r0, r4
    1f00:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    1f02:	2102      	movs	r1, #2
    1f04:	4628      	mov	r0, r5
    1f06:	f7ff ffcf 	bl	1ea8 <boot_initialize_area>
    if (rc != 0) {
    1f0a:	b108      	cbz	r0, 1f10 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    1f0c:	2401      	movs	r4, #1
    1f0e:	e7f6      	b.n	1efe <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    1f10:	2103      	movs	r1, #3
    1f12:	4628      	mov	r0, r5
    1f14:	f7ff ffc8 	bl	1ea8 <boot_initialize_area>
    if (rc != 0) {
    1f18:	4604      	mov	r4, r0
    1f1a:	b108      	cbz	r0, 1f20 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    1f1c:	2401      	movs	r4, #1
    1f1e:	e7ee      	b.n	1efe <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    1f20:	4628      	mov	r0, r5
    1f22:	f7ff ff3b 	bl	1d9c <boot_write_sz>
    1f26:	66a8      	str	r0, [r5, #104]	; 0x68
    return 0;
    1f28:	e7e9      	b.n	1efe <boot_read_sectors+0xe>
	...

00001f2c <boot_image_check>:
{
    1f2c:	b500      	push	{lr}
    1f2e:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    1f30:	2000      	movs	r0, #0
    1f32:	9004      	str	r0, [sp, #16]
    1f34:	9003      	str	r0, [sp, #12]
    1f36:	9002      	str	r0, [sp, #8]
    1f38:	f44f 7380 	mov.w	r3, #256	; 0x100
    1f3c:	9301      	str	r3, [sp, #4]
    1f3e:	4b07      	ldr	r3, [pc, #28]	; (1f5c <boot_image_check+0x30>)
    1f40:	9300      	str	r3, [sp, #0]
    1f42:	4613      	mov	r3, r2
    1f44:	460a      	mov	r2, r1
    1f46:	4601      	mov	r1, r0
    1f48:	f001 f8eb 	bl	3122 <bootutil_img_validate>
    1f4c:	4603      	mov	r3, r0
    1f4e:	b918      	cbnz	r0, 1f58 <boot_image_check+0x2c>
}
    1f50:	4618      	mov	r0, r3
    1f52:	b007      	add	sp, #28
    1f54:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
    1f58:	2303      	movs	r3, #3
    1f5a:	e7f9      	b.n	1f50 <boot_image_check+0x24>
    1f5c:	2000184c 	.word	0x2000184c

00001f60 <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    1f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f64:	b082      	sub	sp, #8
    1f66:	4605      	mov	r5, r0
    1f68:	460c      	mov	r4, r1
    1f6a:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1f6c:	2000      	movs	r0, #0
    1f6e:	f001 f9f6 	bl	335e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1f72:	a901      	add	r1, sp, #4
    1f74:	b2c0      	uxtb	r0, r0
    1f76:	f7ff fccb 	bl	1910 <flash_area_open>
    if (rc != 0) {
    1f7a:	bb30      	cbnz	r0, 1fca <boot_validate_slot+0x6a>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    1f7c:	202c      	movs	r0, #44	; 0x2c
    1f7e:	fb00 5604 	mla	r6, r0, r4, r5
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
    1f82:	4621      	mov	r1, r4
    1f84:	4628      	mov	r0, r5
    1f86:	f7ff ff65 	bl	1e54 <boot_check_header_erased>
    1f8a:	b308      	cbz	r0, 1fd0 <boot_validate_slot+0x70>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    1f8c:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    1f8e:	f013 0f10 	tst.w	r3, #16
    1f92:	d122      	bne.n	1fda <boot_validate_slot+0x7a>
            goto out;
        }
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    1f94:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1f98:	4641      	mov	r1, r8
    1f9a:	4630      	mov	r0, r6
    1f9c:	f7ff fede 	bl	1d5c <boot_is_header_valid>
    1fa0:	b910      	cbnz	r0, 1fa8 <boot_validate_slot+0x48>
        if (slot != BOOT_PRIMARY_SLOT) {
    1fa2:	b95c      	cbnz	r4, 1fbc <boot_validate_slot+0x5c>
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        rc = 1;
    1fa4:	2301      	movs	r3, #1
    1fa6:	e014      	b.n	1fd2 <boot_validate_slot+0x72>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    1fa8:	463b      	mov	r3, r7
    1faa:	4642      	mov	r2, r8
    1fac:	4631      	mov	r1, r6
    1fae:	4628      	mov	r0, r5
    1fb0:	f7ff ffbc 	bl	1f2c <boot_image_check>
    1fb4:	4603      	mov	r3, r0
    1fb6:	2800      	cmp	r0, #0
    1fb8:	d1f3      	bne.n	1fa2 <boot_validate_slot+0x42>
    1fba:	e00a      	b.n	1fd2 <boot_validate_slot+0x72>
            flash_area_erase(fap, 0, fap->fa_size);
    1fbc:	9801      	ldr	r0, [sp, #4]
    1fbe:	6882      	ldr	r2, [r0, #8]
    1fc0:	2100      	movs	r1, #0
    1fc2:	f7ff fd29 	bl	1a18 <flash_area_erase>
        rc = 1;
    1fc6:	2301      	movs	r3, #1
    1fc8:	e003      	b.n	1fd2 <boot_validate_slot+0x72>
        return -1;
    1fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fce:	e000      	b.n	1fd2 <boot_validate_slot+0x72>
        rc = 1;
    1fd0:	2301      	movs	r3, #1
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    1fd2:	4618      	mov	r0, r3
    1fd4:	b002      	add	sp, #8
    1fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
    1fda:	2301      	movs	r3, #1
    1fdc:	e7f9      	b.n	1fd2 <boot_validate_slot+0x72>

00001fde <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    1fde:	b570      	push	{r4, r5, r6, lr}
    1fe0:	4605      	mov	r5, r0
    1fe2:	460e      	mov	r6, r1
    int swap_type;
    int rc;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    1fe4:	2000      	movs	r0, #0
    1fe6:	f001 f811 	bl	300c <boot_swap_type_multi>
    1fea:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    1fec:	2802      	cmp	r0, #2
    1fee:	d005      	beq.n	1ffc <boot_validated_swap_type+0x1e>
    1ff0:	2804      	cmp	r0, #4
    1ff2:	d003      	beq.n	1ffc <boot_validated_swap_type+0x1e>
    1ff4:	2803      	cmp	r0, #3
    1ff6:	d001      	beq.n	1ffc <boot_validated_swap_type+0x1e>
            swap_type = BOOT_SWAP_TYPE_FAIL;
        }
    }

    return swap_type;
}
    1ff8:	4620      	mov	r0, r4
    1ffa:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    1ffc:	4632      	mov	r2, r6
    1ffe:	2101      	movs	r1, #1
    2000:	4628      	mov	r0, r5
    2002:	f7ff ffad 	bl	1f60 <boot_validate_slot>
        if (rc == 1) {
    2006:	2801      	cmp	r0, #1
    2008:	d003      	beq.n	2012 <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    200a:	2800      	cmp	r0, #0
    200c:	d0f4      	beq.n	1ff8 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    200e:	2405      	movs	r4, #5
    return swap_type;
    2010:	e7f2      	b.n	1ff8 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    2012:	4604      	mov	r4, r0
    2014:	e7f0      	b.n	1ff8 <boot_validated_swap_type+0x1a>

00002016 <boot_read_image_headers>:
{
    2016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2018:	4605      	mov	r5, r0
    201a:	460f      	mov	r7, r1
    201c:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    201e:	2400      	movs	r4, #0
    2020:	2c01      	cmp	r4, #1
    2022:	dc10      	bgt.n	2046 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    2024:	4633      	mov	r3, r6
    2026:	222c      	movs	r2, #44	; 0x2c
    2028:	fb02 5204 	mla	r2, r2, r4, r5
    202c:	4621      	mov	r1, r4
    202e:	4628      	mov	r0, r5
    2030:	f000 fcdf 	bl	29f2 <boot_read_image_header>
        if (rc != 0) {
    2034:	4603      	mov	r3, r0
    2036:	b908      	cbnz	r0, 203c <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2038:	3401      	adds	r4, #1
    203a:	e7f1      	b.n	2020 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    203c:	2c00      	cmp	r4, #0
    203e:	dd03      	ble.n	2048 <boot_read_image_headers+0x32>
    2040:	b917      	cbnz	r7, 2048 <boot_read_image_headers+0x32>
                return 0;
    2042:	2300      	movs	r3, #0
    2044:	e000      	b.n	2048 <boot_read_image_headers+0x32>
    return 0;
    2046:	2300      	movs	r3, #0
}
    2048:	4618      	mov	r0, r3
    204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000204c <boot_status_reset>:
    bs->use_scratch = 0;
    204c:	2300      	movs	r3, #0
    204e:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    2050:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    2052:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    2054:	2301      	movs	r3, #1
    2056:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    2058:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    205a:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    205c:	71c3      	strb	r3, [r0, #7]
}
    205e:	4770      	bx	lr

00002060 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2060:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2062:	2b01      	cmp	r3, #1
    2064:	d001      	beq.n	206a <boot_status_is_reset+0xa>
    2066:	2000      	movs	r0, #0
    2068:	4770      	bx	lr
    206a:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    206c:	2b01      	cmp	r3, #1
    206e:	d001      	beq.n	2074 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    2070:	2000      	movs	r0, #0
    2072:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    2074:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2076:	2b01      	cmp	r3, #1
    2078:	d001      	beq.n	207e <boot_status_is_reset+0x1e>
    207a:	2000      	movs	r0, #0
    207c:	4770      	bx	lr
    207e:	2001      	movs	r0, #1
}
    2080:	4770      	bx	lr
	...

00002084 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2084:	b530      	push	{r4, r5, lr}
    2086:	b083      	sub	sp, #12
    2088:	4605      	mov	r5, r0
    208a:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    208c:	2300      	movs	r3, #0
    208e:	9300      	str	r3, [sp, #0]
    2090:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    2092:	4608      	mov	r0, r1
    2094:	f7ff ffe4 	bl	2060 <boot_status_is_reset>
    2098:	2800      	cmp	r0, #0
    209a:	d030      	beq.n	20fe <boot_swap_image+0x7a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    209c:	682a      	ldr	r2, [r5, #0]
    209e:	4b1f      	ldr	r3, [pc, #124]	; (211c <boot_swap_image+0x98>)
    20a0:	429a      	cmp	r2, r3
    20a2:	d012      	beq.n	20ca <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    20a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    20a6:	4b1d      	ldr	r3, [pc, #116]	; (211c <boot_swap_image+0x98>)
    20a8:	429a      	cmp	r2, r3
    20aa:	d01b      	beq.n	20e4 <boot_swap_image+0x60>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    20ac:	9b01      	ldr	r3, [sp, #4]
    20ae:	9a00      	ldr	r2, [sp, #0]
    20b0:	4293      	cmp	r3, r2
    20b2:	d900      	bls.n	20b6 <boot_swap_image+0x32>
            copy_size = size;
    20b4:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    20b6:	9b00      	ldr	r3, [sp, #0]
    20b8:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    20ba:	9a00      	ldr	r2, [sp, #0]
    20bc:	4621      	mov	r1, r4
    20be:	4628      	mov	r0, r5
    20c0:	f000 fdcc 	bl	2c5c <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    20c4:	2000      	movs	r0, #0
    20c6:	b003      	add	sp, #12
    20c8:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    20ca:	466a      	mov	r2, sp
    20cc:	2100      	movs	r1, #0
    20ce:	4628      	mov	r0, r5
    20d0:	f7ff fe72 	bl	1db8 <boot_read_image_size>
            assert(rc == 0);
    20d4:	2800      	cmp	r0, #0
    20d6:	d0e5      	beq.n	20a4 <boot_swap_image+0x20>
    20d8:	2300      	movs	r3, #0
    20da:	461a      	mov	r2, r3
    20dc:	4619      	mov	r1, r3
    20de:	4618      	mov	r0, r3
    20e0:	f7ff fadc 	bl	169c <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    20e4:	aa01      	add	r2, sp, #4
    20e6:	2101      	movs	r1, #1
    20e8:	4628      	mov	r0, r5
    20ea:	f7ff fe65 	bl	1db8 <boot_read_image_size>
            assert(rc == 0);
    20ee:	2800      	cmp	r0, #0
    20f0:	d0dc      	beq.n	20ac <boot_swap_image+0x28>
    20f2:	2300      	movs	r3, #0
    20f4:	461a      	mov	r2, r3
    20f6:	4619      	mov	r1, r3
    20f8:	4618      	mov	r0, r3
    20fa:	f7ff facf 	bl	169c <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    20fe:	f104 0108 	add.w	r1, r4, #8
    2102:	2000      	movs	r0, #0
    2104:	f000 ff18 	bl	2f38 <boot_read_swap_size>
        assert(rc == 0);
    2108:	b910      	cbnz	r0, 2110 <boot_swap_image+0x8c>
        copy_size = bs->swap_size;
    210a:	68a3      	ldr	r3, [r4, #8]
    210c:	9300      	str	r3, [sp, #0]
    210e:	e7d4      	b.n	20ba <boot_swap_image+0x36>
        assert(rc == 0);
    2110:	2300      	movs	r3, #0
    2112:	461a      	mov	r2, r3
    2114:	4619      	mov	r1, r3
    2116:	4618      	mov	r0, r3
    2118:	f7ff fac0 	bl	169c <__assert_func>
    211c:	96f3b83d 	.word	0x96f3b83d

00002120 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    2120:	b538      	push	{r3, r4, r5, lr}
    2122:	4605      	mov	r5, r0
    2124:	460c      	mov	r4, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    2126:	f7ff ffad 	bl	2084 <boot_swap_image>
    assert(rc == 0);
    212a:	b9a8      	cbnz	r0, 2158 <boot_complete_partial_swap+0x38>
    212c:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    212e:	79e3      	ldrb	r3, [r4, #7]
    2130:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    2134:	79e3      	ldrb	r3, [r4, #7]
    2136:	3b03      	subs	r3, #3
    2138:	b2db      	uxtb	r3, r3
    213a:	2b01      	cmp	r3, #1
    213c:	d912      	bls.n	2164 <boot_complete_partial_swap+0x44>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    213e:	79e3      	ldrb	r3, [r4, #7]
    2140:	2b02      	cmp	r3, #2
    2142:	d019      	beq.n	2178 <boot_complete_partial_swap+0x58>
    2144:	2b04      	cmp	r3, #4
    2146:	d017      	beq.n	2178 <boot_complete_partial_swap+0x58>
    2148:	2b03      	cmp	r3, #3
    214a:	d015      	beq.n	2178 <boot_complete_partial_swap+0x58>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    214c:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2150:	2bff      	cmp	r3, #255	; 0xff
    2152:	d01b      	beq.n	218c <boot_complete_partial_swap+0x6c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    2154:	4610      	mov	r0, r2
    2156:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2158:	2300      	movs	r3, #0
    215a:	461a      	mov	r2, r3
    215c:	4619      	mov	r1, r3
    215e:	4618      	mov	r0, r3
    2160:	f7ff fa9c 	bl	169c <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2164:	2000      	movs	r0, #0
    2166:	f000 fa77 	bl	2658 <swap_set_image_ok>
        if (rc != 0) {
    216a:	4602      	mov	r2, r0
    216c:	2800      	cmp	r0, #0
    216e:	d0e6      	beq.n	213e <boot_complete_partial_swap+0x1e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2170:	23ff      	movs	r3, #255	; 0xff
    2172:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    2176:	e7e2      	b.n	213e <boot_complete_partial_swap+0x1e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2178:	2000      	movs	r0, #0
    217a:	f000 fa5e 	bl	263a <swap_set_copy_done>
        if (rc != 0) {
    217e:	4602      	mov	r2, r0
    2180:	2800      	cmp	r0, #0
    2182:	d0e3      	beq.n	214c <boot_complete_partial_swap+0x2c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2184:	23ff      	movs	r3, #255	; 0xff
    2186:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    218a:	e7df      	b.n	214c <boot_complete_partial_swap+0x2c>
        assert(0);
    218c:	2300      	movs	r3, #0
    218e:	461a      	mov	r2, r3
    2190:	4619      	mov	r1, r3
    2192:	4618      	mov	r0, r3
    2194:	f7ff fa82 	bl	169c <__assert_func>

00002198 <boot_perform_update>:
{
    2198:	b538      	push	{r3, r4, r5, lr}
    219a:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    219c:	f7ff ff72 	bl	2084 <boot_swap_image>
    assert(rc == 0);
    21a0:	b9b0      	cbnz	r0, 21d0 <boot_perform_update+0x38>
    21a2:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    21a4:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    21a8:	1ee3      	subs	r3, r4, #3
    21aa:	b2db      	uxtb	r3, r3
    21ac:	2b01      	cmp	r3, #1
    21ae:	d915      	bls.n	21dc <boot_perform_update+0x44>
    if (BOOT_IS_UPGRADE(swap_type)) {
    21b0:	2c02      	cmp	r4, #2
    21b2:	d003      	beq.n	21bc <boot_perform_update+0x24>
    21b4:	2c04      	cmp	r4, #4
    21b6:	d001      	beq.n	21bc <boot_perform_update+0x24>
    21b8:	2c03      	cmp	r4, #3
    21ba:	d107      	bne.n	21cc <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    21bc:	2000      	movs	r0, #0
    21be:	f000 fa3c 	bl	263a <swap_set_copy_done>
        if (rc != 0) {
    21c2:	4602      	mov	r2, r0
    21c4:	b110      	cbz	r0, 21cc <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    21c6:	23ff      	movs	r3, #255	; 0xff
    21c8:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    21cc:	4610      	mov	r0, r2
    21ce:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    21d0:	2300      	movs	r3, #0
    21d2:	461a      	mov	r2, r3
    21d4:	4619      	mov	r1, r3
    21d6:	4618      	mov	r0, r3
    21d8:	f7ff fa60 	bl	169c <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    21dc:	2000      	movs	r0, #0
    21de:	f000 fa3b 	bl	2658 <swap_set_image_ok>
        if (rc != 0) {
    21e2:	4602      	mov	r2, r0
    21e4:	2800      	cmp	r0, #0
    21e6:	d0e3      	beq.n	21b0 <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    21e8:	24ff      	movs	r4, #255	; 0xff
    21ea:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    21ee:	e7e1      	b.n	21b4 <boot_perform_update+0x1c>

000021f0 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    21f0:	b538      	push	{r3, r4, r5, lr}
    21f2:	4604      	mov	r4, r0
    21f4:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    21f6:	f7ff fe7b 	bl	1ef0 <boot_read_sectors>
    if (rc != 0) {
    21fa:	b118      	cbz	r0, 2204 <boot_prepare_image_for_update+0x14>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
                     " - too small?", BOOT_MAX_IMG_SECTORS);
        /* Unable to determine sector layout, continue with next image
         * if there is one.
         */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    21fc:	2301      	movs	r3, #1
    21fe:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    }
}
    2202:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_read_image_headers(state, false, NULL);
    2204:	2200      	movs	r2, #0
    2206:	4611      	mov	r1, r2
    2208:	4620      	mov	r0, r4
    220a:	f7ff ff04 	bl	2016 <boot_read_image_headers>
    if (rc != 0) {
    220e:	b118      	cbz	r0, 2218 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2210:	2301      	movs	r3, #1
    2212:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    2216:	e7f4      	b.n	2202 <boot_prepare_image_for_update+0x12>
    if (boot_slots_compatible(state)) {
    2218:	4620      	mov	r0, r4
    221a:	f000 fc6a 	bl	2af2 <boot_slots_compatible>
    221e:	b918      	cbnz	r0, 2228 <boot_prepare_image_for_update+0x38>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2220:	2301      	movs	r3, #1
    2222:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2226:	e7ec      	b.n	2202 <boot_prepare_image_for_update+0x12>
        boot_status_reset(bs);
    2228:	4628      	mov	r0, r5
    222a:	f7ff ff0f 	bl	204c <boot_status_reset>
        rc = swap_read_status(state, bs);
    222e:	4629      	mov	r1, r5
    2230:	4620      	mov	r0, r4
    2232:	f000 f9c4 	bl	25be <swap_read_status>
        if (rc != 0) {
    2236:	b980      	cbnz	r0, 225a <boot_prepare_image_for_update+0x6a>
        if (!boot_status_is_reset(bs)) {
    2238:	4628      	mov	r0, r5
    223a:	f7ff ff11 	bl	2060 <boot_status_is_reset>
    223e:	b180      	cbz	r0, 2262 <boot_prepare_image_for_update+0x72>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    2240:	79eb      	ldrb	r3, [r5, #7]
    2242:	2b01      	cmp	r3, #1
    2244:	d028      	beq.n	2298 <boot_prepare_image_for_update+0xa8>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    2246:	462a      	mov	r2, r5
    2248:	2101      	movs	r1, #1
    224a:	4620      	mov	r0, r4
    224c:	f7ff fe88 	bl	1f60 <boot_validate_slot>
    2250:	b348      	cbz	r0, 22a6 <boot_prepare_image_for_update+0xb6>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    2252:	2305      	movs	r3, #5
    2254:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2258:	e7d3      	b.n	2202 <boot_prepare_image_for_update+0x12>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    225a:	2301      	movs	r3, #1
    225c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    2260:	e7cf      	b.n	2202 <boot_prepare_image_for_update+0x12>
            rc = boot_complete_partial_swap(state, bs);
    2262:	4629      	mov	r1, r5
    2264:	4620      	mov	r0, r4
    2266:	f7ff ff5b 	bl	2120 <boot_complete_partial_swap>
            assert(rc == 0);
    226a:	b948      	cbnz	r0, 2280 <boot_prepare_image_for_update+0x90>
            rc = boot_read_image_headers(state, false, bs);
    226c:	462a      	mov	r2, r5
    226e:	2100      	movs	r1, #0
    2270:	4620      	mov	r0, r4
    2272:	f7ff fed0 	bl	2016 <boot_read_image_headers>
            assert(rc == 0);
    2276:	b948      	cbnz	r0, 228c <boot_prepare_image_for_update+0x9c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2278:	2301      	movs	r3, #1
    227a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    227e:	e7c0      	b.n	2202 <boot_prepare_image_for_update+0x12>
            assert(rc == 0);
    2280:	2300      	movs	r3, #0
    2282:	461a      	mov	r2, r3
    2284:	4619      	mov	r1, r3
    2286:	4618      	mov	r0, r3
    2288:	f7ff fa08 	bl	169c <__assert_func>
            assert(rc == 0);
    228c:	2300      	movs	r3, #0
    228e:	461a      	mov	r2, r3
    2290:	4619      	mov	r1, r3
    2292:	4618      	mov	r0, r3
    2294:	f7ff fa02 	bl	169c <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    2298:	4629      	mov	r1, r5
    229a:	4620      	mov	r0, r4
    229c:	f7ff fe9f 	bl	1fde <boot_validated_swap_type>
    22a0:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    22a4:	e7ad      	b.n	2202 <boot_prepare_image_for_update+0x12>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    22a6:	79eb      	ldrb	r3, [r5, #7]
    22a8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    22ac:	e7a9      	b.n	2202 <boot_prepare_image_for_update+0x12>

000022ae <boot_write_status>:
{
    22ae:	b570      	push	{r4, r5, r6, lr}
    22b0:	b084      	sub	sp, #16
    22b2:	4606      	mov	r6, r0
    22b4:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    22b6:	798b      	ldrb	r3, [r1, #6]
    22b8:	b143      	cbz	r3, 22cc <boot_write_status+0x1e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    22ba:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    22bc:	a903      	add	r1, sp, #12
    22be:	f7ff fb27 	bl	1910 <flash_area_open>
    if (rc != 0) {
    22c2:	b128      	cbz	r0, 22d0 <boot_write_status+0x22>
        rc = BOOT_EFLASH;
    22c4:	2301      	movs	r3, #1
}
    22c6:	4618      	mov	r0, r3
    22c8:	b004      	add	sp, #16
    22ca:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    22cc:	2001      	movs	r0, #1
    22ce:	e7f5      	b.n	22bc <boot_write_status+0xe>
    off = boot_status_off(fap) +
    22d0:	9803      	ldr	r0, [sp, #12]
    22d2:	f000 fdad 	bl	2e30 <boot_status_off>
    22d6:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    22d8:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    22da:	4620      	mov	r0, r4
    22dc:	f000 fbfc 	bl	2ad8 <boot_status_internal_off>
    off = boot_status_off(fap) +
    22e0:	4405      	add	r5, r0
    align = flash_area_align(fap);
    22e2:	9803      	ldr	r0, [sp, #12]
    22e4:	f7ff fbab 	bl	1a3e <flash_area_align>
    22e8:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    22ea:	9803      	ldr	r0, [sp, #12]
    22ec:	f7ff fbac 	bl	1a48 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    22f0:	2208      	movs	r2, #8
    22f2:	b2c1      	uxtb	r1, r0
    22f4:	a801      	add	r0, sp, #4
    22f6:	f7ff fab2 	bl	185e <memset>
    buf[0] = bs->state;
    22fa:	7923      	ldrb	r3, [r4, #4]
    22fc:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    2300:	4633      	mov	r3, r6
    2302:	aa01      	add	r2, sp, #4
    2304:	4629      	mov	r1, r5
    2306:	9803      	ldr	r0, [sp, #12]
    2308:	f7ff fb73 	bl	19f2 <flash_area_write>
    if (rc != 0) {
    230c:	4603      	mov	r3, r0
    230e:	2800      	cmp	r0, #0
    2310:	d0d9      	beq.n	22c6 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    2312:	2301      	movs	r3, #1
    2314:	e7d7      	b.n	22c6 <boot_write_status+0x18>

00002316 <boot_erase_region>:
{
    2316:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    2318:	f7ff fb7e 	bl	1a18 <flash_area_erase>
}
    231c:	bd08      	pop	{r3, pc}
	...

00002320 <boot_copy_region>:
{
    2320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2324:	4688      	mov	r8, r1
    2326:	4692      	mov	sl, r2
    2328:	461f      	mov	r7, r3
    232a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    232e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    2330:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    2332:	e00f      	b.n	2354 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    2334:	4623      	mov	r3, r4
    2336:	4a0f      	ldr	r2, [pc, #60]	; (2374 <boot_copy_region+0x54>)
    2338:	19e9      	adds	r1, r5, r7
    233a:	4640      	mov	r0, r8
    233c:	f7ff fb46 	bl	19cc <flash_area_read>
        if (rc != 0) {
    2340:	b9a0      	cbnz	r0, 236c <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    2342:	4623      	mov	r3, r4
    2344:	4a0b      	ldr	r2, [pc, #44]	; (2374 <boot_copy_region+0x54>)
    2346:	eb05 0109 	add.w	r1, r5, r9
    234a:	4650      	mov	r0, sl
    234c:	f7ff fb51 	bl	19f2 <flash_area_write>
        if (rc != 0) {
    2350:	b970      	cbnz	r0, 2370 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    2352:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    2354:	42b5      	cmp	r5, r6
    2356:	d206      	bcs.n	2366 <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    2358:	1b74      	subs	r4, r6, r5
    235a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    235e:	d9e9      	bls.n	2334 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    2360:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2364:	e7e6      	b.n	2334 <boot_copy_region+0x14>
    return 0;
    2366:	2000      	movs	r0, #0
}
    2368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    236c:	2001      	movs	r0, #1
    236e:	e7fb      	b.n	2368 <boot_copy_region+0x48>
            return BOOT_EFLASH;
    2370:	2001      	movs	r0, #1
    2372:	e7f9      	b.n	2368 <boot_copy_region+0x48>
    2374:	2000024c 	.word	0x2000024c

00002378 <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	b084      	sub	sp, #16
    237c:	4604      	mov	r4, r0
    237e:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    2380:	226c      	movs	r2, #108	; 0x6c
    2382:	2100      	movs	r1, #0
    2384:	f7ff fa6b 	bl	185e <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    2388:	4b41      	ldr	r3, [pc, #260]	; (2490 <context_boot_go+0x118>)
    238a:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    238c:	4b41      	ldr	r3, [pc, #260]	; (2494 <context_boot_go+0x11c>)
    238e:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    2390:	4b41      	ldr	r3, [pc, #260]	; (2498 <context_boot_go+0x120>)
    2392:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2394:	2500      	movs	r5, #0
    2396:	2d01      	cmp	r5, #1
    2398:	d814      	bhi.n	23c4 <context_boot_go+0x4c>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    239a:	4629      	mov	r1, r5
    239c:	2000      	movs	r0, #0
    239e:	f000 ffde 	bl	335e <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    23a2:	212c      	movs	r1, #44	; 0x2c
    23a4:	fb01 f105 	mul.w	r1, r1, r5
    23a8:	3120      	adds	r1, #32
    23aa:	4421      	add	r1, r4
    23ac:	b2c0      	uxtb	r0, r0
    23ae:	f7ff faaf 	bl	1910 <flash_area_open>
            assert(rc == 0);
    23b2:	b908      	cbnz	r0, 23b8 <context_boot_go+0x40>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    23b4:	3501      	adds	r5, #1
    23b6:	e7ee      	b.n	2396 <context_boot_go+0x1e>
            assert(rc == 0);
    23b8:	2300      	movs	r3, #0
    23ba:	461a      	mov	r2, r3
    23bc:	4619      	mov	r1, r3
    23be:	4618      	mov	r0, r3
    23c0:	f7ff f96c 	bl	169c <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    23c4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    23c8:	2003      	movs	r0, #3
    23ca:	f7ff faa1 	bl	1910 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    23ce:	4605      	mov	r5, r0
    23d0:	b978      	cbnz	r0, 23f2 <context_boot_go+0x7a>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    23d2:	4669      	mov	r1, sp
    23d4:	4620      	mov	r0, r4
    23d6:	f7ff ff0b 	bl	21f0 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    23da:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    23de:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    23e2:	3b01      	subs	r3, #1
    23e4:	2b04      	cmp	r3, #4
    23e6:	d82d      	bhi.n	2444 <context_boot_go+0xcc>
    23e8:	e8df f003 	tbb	[pc, r3]
    23ec:	0909090f 	.word	0x0909090f
    23f0:	22          	.byte	0x22
    23f1:	00          	.byte	0x00
        assert(rc == 0);
    23f2:	2300      	movs	r3, #0
    23f4:	461a      	mov	r2, r3
    23f6:	4619      	mov	r1, r3
    23f8:	4618      	mov	r0, r3
    23fa:	f7ff f94f 	bl	169c <__assert_func>
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    23fe:	4669      	mov	r1, sp
    2400:	4620      	mov	r0, r4
    2402:	f7ff fec9 	bl	2198 <boot_perform_update>
            assert(rc == 0);
    2406:	4605      	mov	r5, r0
    2408:	b960      	cbnz	r0, 2424 <context_boot_go+0xac>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    240a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    240e:	2bff      	cmp	r3, #255	; 0xff
    2410:	d01c      	beq.n	244c <context_boot_go+0xd4>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    2412:	2b01      	cmp	r3, #1
    2414:	d120      	bne.n	2458 <context_boot_go+0xe0>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    2416:	6822      	ldr	r2, [r4, #0]
    2418:	4b20      	ldr	r3, [pc, #128]	; (249c <context_boot_go+0x124>)
    241a:	429a      	cmp	r2, r3
    241c:	d025      	beq.n	246a <context_boot_go+0xf2>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    241e:	2503      	movs	r5, #3
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2420:	2300      	movs	r3, #0
    2422:	e030      	b.n	2486 <context_boot_go+0x10e>
            assert(rc == 0);
    2424:	2300      	movs	r3, #0
    2426:	461a      	mov	r2, r3
    2428:	4619      	mov	r1, r3
    242a:	4618      	mov	r0, r3
    242c:	f7ff f936 	bl	169c <__assert_func>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2430:	2000      	movs	r0, #0
    2432:	f000 f911 	bl	2658 <swap_set_image_ok>
            if (rc != 0) {
    2436:	4605      	mov	r5, r0
    2438:	2800      	cmp	r0, #0
    243a:	d0e6      	beq.n	240a <context_boot_go+0x92>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    243c:	23ff      	movs	r3, #255	; 0xff
    243e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2442:	e7e2      	b.n	240a <context_boot_go+0x92>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2444:	23ff      	movs	r3, #255	; 0xff
    2446:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    244a:	e7de      	b.n	240a <context_boot_go+0x92>
            assert(0);
    244c:	2300      	movs	r3, #0
    244e:	461a      	mov	r2, r3
    2450:	4619      	mov	r1, r3
    2452:	4618      	mov	r0, r3
    2454:	f7ff f922 	bl	169c <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    2458:	466a      	mov	r2, sp
    245a:	2100      	movs	r1, #0
    245c:	4620      	mov	r0, r4
    245e:	f7ff fdda 	bl	2016 <boot_read_image_headers>
            if (rc != 0) {
    2462:	4605      	mov	r5, r0
    2464:	2800      	cmp	r0, #0
    2466:	d1db      	bne.n	2420 <context_boot_go+0xa8>
    2468:	e7d5      	b.n	2416 <context_boot_go+0x9e>
    memset(&bs, 0, sizeof(struct boot_status));
    246a:	2300      	movs	r3, #0
    246c:	9300      	str	r3, [sp, #0]
    246e:	9301      	str	r3, [sp, #4]
    2470:	9302      	str	r3, [sp, #8]
    2472:	9303      	str	r3, [sp, #12]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    2474:	6a23      	ldr	r3, [r4, #32]
    2476:	785b      	ldrb	r3, [r3, #1]
    2478:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    247a:	6a23      	ldr	r3, [r4, #32]
    247c:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    247e:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    2480:	6034      	str	r4, [r6, #0]
    2482:	e7cd      	b.n	2420 <context_boot_go+0xa8>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2484:	3301      	adds	r3, #1
    2486:	2b01      	cmp	r3, #1
    2488:	d9fc      	bls.n	2484 <context_boot_go+0x10c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    248a:	4628      	mov	r0, r5
    248c:	b004      	add	sp, #16
    248e:	bd70      	pop	{r4, r5, r6, pc}
    2490:	2000064c 	.word	0x2000064c
    2494:	2000124c 	.word	0x2000124c
    2498:	20000c4c 	.word	0x20000c4c
    249c:	96f3b83d 	.word	0x96f3b83d

000024a0 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    24a0:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    24a2:	4601      	mov	r1, r0
    24a4:	4801      	ldr	r0, [pc, #4]	; (24ac <boot_go+0xc>)
    24a6:	f7ff ff67 	bl	2378 <context_boot_go>
}
    24aa:	bd08      	pop	{r3, pc}
    24ac:	200001e0 	.word	0x200001e0

000024b0 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    24b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24b4:	4606      	mov	r6, r0
    24b6:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    24b8:	2100      	movs	r1, #0
    24ba:	4608      	mov	r0, r1
    24bc:	f000 ff4f 	bl	335e <flash_area_id_from_multi_image_slot>
    24c0:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    24c2:	2101      	movs	r1, #1
    24c4:	2000      	movs	r0, #0
    24c6:	f000 ff4a 	bl	335e <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    24ca:	783b      	ldrb	r3, [r7, #0]
    24cc:	42a3      	cmp	r3, r4
    24ce:	d029      	beq.n	2524 <swap_erase_trailer_sectors+0x74>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    24d0:	4283      	cmp	r3, r0
    24d2:	d001      	beq.n	24d8 <swap_erase_trailer_sectors+0x28>
        slot = BOOT_SECONDARY_SLOT;
    } else {
        return BOOT_EFLASH;
    24d4:	2301      	movs	r3, #1
    24d6:	e022      	b.n	251e <swap_erase_trailer_sectors+0x6e>
        slot = BOOT_SECONDARY_SLOT;
    24d8:	2301      	movs	r3, #1
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    24da:	4698      	mov	r8, r3
    return BOOT_IMG(state, slot).num_sectors;
    24dc:	222c      	movs	r2, #44	; 0x2c
    24de:	fb02 6303 	mla	r3, r2, r3, r6
    24e2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    24e4:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    24e6:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    24e8:	f000 fc8e 	bl	2e08 <boot_trailer_sz>
    24ec:	4681      	mov	r9, r0
    total_sz = 0;
    24ee:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    24f0:	232c      	movs	r3, #44	; 0x2c
    24f2:	fb03 6308 	mla	r3, r3, r8, r6
    24f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    24f8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    24fc:	008b      	lsls	r3, r1, #2
    24fe:	4413      	add	r3, r2
    2500:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2504:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    2506:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    2508:	4652      	mov	r2, sl
    250a:	1ac9      	subs	r1, r1, r3
    250c:	4638      	mov	r0, r7
    250e:	f7ff ff02 	bl	2316 <boot_erase_region>
        assert(rc == 0);
    2512:	4603      	mov	r3, r0
    2514:	b940      	cbnz	r0, 2528 <swap_erase_trailer_sectors+0x78>

        sector--;
    2516:	3c01      	subs	r4, #1
        total_sz += sz;
    2518:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    251a:	45a9      	cmp	r9, r5
    251c:	d8e8      	bhi.n	24f0 <swap_erase_trailer_sectors+0x40>

    return rc;
}
    251e:	4618      	mov	r0, r3
    2520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    2524:	2300      	movs	r3, #0
    2526:	e7d8      	b.n	24da <swap_erase_trailer_sectors+0x2a>
        assert(rc == 0);
    2528:	2300      	movs	r3, #0
    252a:	461a      	mov	r2, r3
    252c:	4619      	mov	r1, r3
    252e:	4618      	mov	r0, r3
    2530:	f7ff f8b4 	bl	169c <__assert_func>

00002534 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    2534:	b530      	push	{r4, r5, lr}
    2536:	b083      	sub	sp, #12
    2538:	460c      	mov	r4, r1
    253a:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    253c:	4669      	mov	r1, sp
    253e:	2002      	movs	r0, #2
    2540:	f000 fcea 	bl	2f18 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    2544:	b990      	cbnz	r0, 256c <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    2546:	79e9      	ldrb	r1, [r5, #7]
    2548:	2901      	cmp	r1, #1
    254a:	d115      	bne.n	2578 <swap_status_init+0x44>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    254c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2550:	2b01      	cmp	r3, #1
    2552:	d01d      	beq.n	2590 <swap_status_init+0x5c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    2554:	68a9      	ldr	r1, [r5, #8]
    2556:	4620      	mov	r0, r4
    2558:	f000 fd46 	bl	2fe8 <boot_write_swap_size>
    assert(rc == 0);
    255c:	bb18      	cbnz	r0, 25a6 <swap_status_init+0x72>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    255e:	4620      	mov	r0, r4
    2560:	f000 fd02 	bl	2f68 <boot_write_magic>
    assert(rc == 0);
    2564:	bb28      	cbnz	r0, 25b2 <swap_status_init+0x7e>

    return 0;
}
    2566:	2000      	movs	r0, #0
    2568:	b003      	add	sp, #12
    256a:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    256c:	2300      	movs	r3, #0
    256e:	461a      	mov	r2, r3
    2570:	4619      	mov	r1, r3
    2572:	4618      	mov	r0, r3
    2574:	f7ff f892 	bl	169c <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    2578:	2200      	movs	r2, #0
    257a:	4620      	mov	r0, r4
    257c:	f000 fd12 	bl	2fa4 <boot_write_swap_info>
        assert(rc == 0);
    2580:	2800      	cmp	r0, #0
    2582:	d0e3      	beq.n	254c <swap_status_init+0x18>
    2584:	2300      	movs	r3, #0
    2586:	461a      	mov	r2, r3
    2588:	4619      	mov	r1, r3
    258a:	4618      	mov	r0, r3
    258c:	f7ff f886 	bl	169c <__assert_func>
        rc = boot_write_image_ok(fap);
    2590:	4620      	mov	r0, r4
    2592:	f000 fd00 	bl	2f96 <boot_write_image_ok>
        assert(rc == 0);
    2596:	2800      	cmp	r0, #0
    2598:	d0dc      	beq.n	2554 <swap_status_init+0x20>
    259a:	2300      	movs	r3, #0
    259c:	461a      	mov	r2, r3
    259e:	4619      	mov	r1, r3
    25a0:	4618      	mov	r0, r3
    25a2:	f7ff f87b 	bl	169c <__assert_func>
    assert(rc == 0);
    25a6:	2300      	movs	r3, #0
    25a8:	461a      	mov	r2, r3
    25aa:	4619      	mov	r1, r3
    25ac:	4618      	mov	r0, r3
    25ae:	f7ff f875 	bl	169c <__assert_func>
    assert(rc == 0);
    25b2:	2300      	movs	r3, #0
    25b4:	461a      	mov	r2, r3
    25b6:	4619      	mov	r1, r3
    25b8:	4618      	mov	r0, r3
    25ba:	f7ff f86f 	bl	169c <__assert_func>

000025be <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    25be:	b570      	push	{r4, r5, r6, lr}
    25c0:	b082      	sub	sp, #8
    25c2:	4606      	mov	r6, r0
    25c4:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    25c6:	f000 fb05 	bl	2bd4 <swap_status_source>
    25ca:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    25cc:	2801      	cmp	r0, #1
    25ce:	d009      	beq.n	25e4 <swap_read_status+0x26>
    25d0:	4604      	mov	r4, r0
    25d2:	2802      	cmp	r0, #2
    25d4:	d00f      	beq.n	25f6 <swap_read_status+0x38>
    25d6:	b158      	cbz	r0, 25f0 <swap_read_status+0x32>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    25d8:	2300      	movs	r3, #0
    25da:	461a      	mov	r2, r3
    25dc:	4619      	mov	r1, r3
    25de:	4618      	mov	r0, r3
    25e0:	f7ff f85c 	bl	169c <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    25e4:	2003      	movs	r0, #3
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    25e6:	a901      	add	r1, sp, #4
    25e8:	f7ff f992 	bl	1910 <flash_area_open>
    if (rc != 0) {
    25ec:	b128      	cbz	r0, 25fa <swap_read_status+0x3c>
        return BOOT_EFLASH;
    25ee:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    25f0:	4620      	mov	r0, r4
    25f2:	b002      	add	sp, #8
    25f4:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    25f6:	2001      	movs	r0, #1
    25f8:	e7f5      	b.n	25e6 <swap_read_status+0x28>
    rc = swap_read_status_bytes(fap, state, bs);
    25fa:	462a      	mov	r2, r5
    25fc:	4631      	mov	r1, r6
    25fe:	9801      	ldr	r0, [sp, #4]
    2600:	f000 fa12 	bl	2a28 <swap_read_status_bytes>
    if (rc == 0) {
    2604:	4604      	mov	r4, r0
    2606:	2800      	cmp	r0, #0
    2608:	d1f2      	bne.n	25f0 <swap_read_status+0x32>
        off = boot_swap_info_off(fap);
    260a:	9801      	ldr	r0, [sp, #4]
    260c:	f000 fc21 	bl	2e52 <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2610:	2301      	movs	r3, #1
    2612:	f10d 0203 	add.w	r2, sp, #3
    2616:	4601      	mov	r1, r0
    2618:	9801      	ldr	r0, [sp, #4]
    261a:	f7ff fa1a 	bl	1a52 <flash_area_read_is_empty>
        if (rc == 1) {
    261e:	2801      	cmp	r0, #1
    2620:	d006      	beq.n	2630 <swap_read_status+0x72>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2622:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2626:	f003 030f 	and.w	r3, r3, #15
    262a:	71eb      	strb	r3, [r5, #7]
    262c:	4604      	mov	r4, r0
    262e:	e7df      	b.n	25f0 <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    2630:	2301      	movs	r3, #1
    2632:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    2636:	4620      	mov	r0, r4
    2638:	e7f3      	b.n	2622 <swap_read_status+0x64>

0000263a <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    263a:	b500      	push	{lr}
    263c:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    263e:	a901      	add	r1, sp, #4
    2640:	2001      	movs	r0, #1
    2642:	f7ff f965 	bl	1910 <flash_area_open>
            &fap);
    if (rc != 0) {
    2646:	b118      	cbz	r0, 2650 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    2648:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    264a:	b003      	add	sp, #12
    264c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    2650:	9801      	ldr	r0, [sp, #4]
    2652:	f000 fc99 	bl	2f88 <boot_write_copy_done>
    return rc;
    2656:	e7f8      	b.n	264a <swap_set_copy_done+0x10>

00002658 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    2658:	b500      	push	{lr}
    265a:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    265c:	a903      	add	r1, sp, #12
    265e:	2001      	movs	r0, #1
    2660:	f7ff f956 	bl	1910 <flash_area_open>
            &fap);
    if (rc != 0) {
    2664:	b120      	cbz	r0, 2670 <swap_set_image_ok+0x18>
        return BOOT_EFLASH;
    2666:	2301      	movs	r3, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    2668:	4618      	mov	r0, r3
    266a:	b005      	add	sp, #20
    266c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    2670:	a901      	add	r1, sp, #4
    2672:	9803      	ldr	r0, [sp, #12]
    2674:	f000 fbf0 	bl	2e58 <boot_read_swap_state>
    if (rc != 0) {
    2678:	4603      	mov	r3, r0
    267a:	b940      	cbnz	r0, 268e <swap_set_image_ok+0x36>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    267c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    2680:	2a03      	cmp	r2, #3
    2682:	d1f1      	bne.n	2668 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    2684:	9803      	ldr	r0, [sp, #12]
    2686:	f000 fc86 	bl	2f96 <boot_write_image_ok>
    268a:	4603      	mov	r3, r0
    268c:	e7ec      	b.n	2668 <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    268e:	2301      	movs	r3, #1
    2690:	e7ea      	b.n	2668 <swap_set_image_ok+0x10>

00002692 <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    2692:	b4f0      	push	{r4, r5, r6, r7}
    2694:	4606      	mov	r6, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    2696:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2698:	689f      	ldr	r7, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    269a:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    269c:	2900      	cmp	r1, #0
    269e:	db0b      	blt.n	26b8 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    26a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
    26a2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    26a6:	00ac      	lsls	r4, r5, #2
    26a8:	4423      	add	r3, r4
    26aa:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    26ac:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    26ae:	429f      	cmp	r7, r3
    26b0:	d302      	bcc.n	26b8 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    26b2:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    26b4:	4618      	mov	r0, r3
    26b6:	e7f1      	b.n	269c <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    26b8:	3101      	adds	r1, #1
    26ba:	6011      	str	r1, [r2, #0]
    return sz;
}
    26bc:	bcf0      	pop	{r4, r5, r6, r7}
    26be:	4770      	bx	lr

000026c0 <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    26c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26c4:	b088      	sub	sp, #32
    26c6:	460f      	mov	r7, r1
    26c8:	4615      	mov	r5, r2
    26ca:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    26cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    26ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    26d2:	0083      	lsls	r3, r0, #2
    26d4:	4413      	add	r3, r2
    26d6:	685e      	ldr	r6, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    26d8:	6853      	ldr	r3, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    26da:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    26dc:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    26de:	f000 fb93 	bl	2e08 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    26e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    26e4:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    26e6:	eb07 0c06 	add.w	ip, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    26ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
    26ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26f0:	009a      	lsls	r2, r3, #2
    26f2:	440a      	add	r2, r1
    26f4:	6853      	ldr	r3, [r2, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    26f6:	684a      	ldr	r2, [r1, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    26f8:	1a9b      	subs	r3, r3, r2
    26fa:	459c      	cmp	ip, r3
    26fc:	d923      	bls.n	2746 <boot_swap_sectors+0x86>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    26fe:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    2702:	6823      	ldr	r3, [r4, #0]
    2704:	2b01      	cmp	r3, #1
    2706:	d020      	beq.n	274a <boot_swap_sectors+0x8a>
    2708:	2300      	movs	r3, #0
    270a:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    270c:	a907      	add	r1, sp, #28
    270e:	2001      	movs	r0, #1
    2710:	f7ff f8fe 	bl	1910 <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    2714:	b9f8      	cbnz	r0, 2756 <boot_swap_sectors+0x96>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2716:	a906      	add	r1, sp, #24
    2718:	2002      	movs	r0, #2
    271a:	f7ff f8f9 	bl	1910 <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    271e:	bb00      	cbnz	r0, 2762 <boot_swap_sectors+0xa2>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    2720:	a905      	add	r1, sp, #20
    2722:	2003      	movs	r0, #3
    2724:	f7ff f8f4 	bl	1910 <flash_area_open>
    assert (rc == 0);
    2728:	bb08      	cbnz	r0, 276e <boot_swap_sectors+0xae>

    if (bs->state == BOOT_STATUS_STATE_0) {
    272a:	7923      	ldrb	r3, [r4, #4]
    272c:	2b01      	cmp	r3, #1
    272e:	d024      	beq.n	277a <boot_swap_sectors+0xba>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    2730:	7923      	ldrb	r3, [r4, #4]
    2732:	2b02      	cmp	r3, #2
    2734:	f000 8083 	beq.w	283e <boot_swap_sectors+0x17e>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    2738:	7923      	ldrb	r3, [r4, #4]
    273a:	2b03      	cmp	r3, #3
    273c:	f000 80bb 	beq.w	28b6 <boot_swap_sectors+0x1f6>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    2740:	b008      	add	sp, #32
    2742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    2746:	46b8      	mov	r8, r7
    2748:	e7db      	b.n	2702 <boot_swap_sectors+0x42>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    274a:	45b8      	cmp	r8, r7
    274c:	d001      	beq.n	2752 <boot_swap_sectors+0x92>
    274e:	2301      	movs	r3, #1
    2750:	e7db      	b.n	270a <boot_swap_sectors+0x4a>
    2752:	2300      	movs	r3, #0
    2754:	e7d9      	b.n	270a <boot_swap_sectors+0x4a>
    assert (rc == 0);
    2756:	2300      	movs	r3, #0
    2758:	461a      	mov	r2, r3
    275a:	4619      	mov	r1, r3
    275c:	4618      	mov	r0, r3
    275e:	f7fe ff9d 	bl	169c <__assert_func>
    assert (rc == 0);
    2762:	2300      	movs	r3, #0
    2764:	461a      	mov	r2, r3
    2766:	4619      	mov	r1, r3
    2768:	4618      	mov	r0, r3
    276a:	f7fe ff97 	bl	169c <__assert_func>
    assert (rc == 0);
    276e:	2300      	movs	r3, #0
    2770:	461a      	mov	r2, r3
    2772:	4619      	mov	r1, r3
    2774:	4618      	mov	r0, r3
    2776:	f7fe ff91 	bl	169c <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    277a:	9805      	ldr	r0, [sp, #20]
    277c:	6882      	ldr	r2, [r0, #8]
    277e:	2100      	movs	r1, #0
    2780:	f7ff fdc9 	bl	2316 <boot_erase_region>
        assert(rc == 0);
    2784:	b9e0      	cbnz	r0, 27c0 <boot_swap_sectors+0x100>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    2786:	6823      	ldr	r3, [r4, #0]
    2788:	2b01      	cmp	r3, #1
    278a:	d01f      	beq.n	27cc <boot_swap_sectors+0x10c>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    278c:	f8cd 8004 	str.w	r8, [sp, #4]
    2790:	2300      	movs	r3, #0
    2792:	9300      	str	r3, [sp, #0]
    2794:	4633      	mov	r3, r6
    2796:	9a05      	ldr	r2, [sp, #20]
    2798:	9906      	ldr	r1, [sp, #24]
    279a:	4628      	mov	r0, r5
    279c:	f7ff fdc0 	bl	2320 <boot_copy_region>
        assert(rc == 0);
    27a0:	2800      	cmp	r0, #0
    27a2:	d146      	bne.n	2832 <boot_swap_sectors+0x172>
        rc = boot_write_status(state, bs);
    27a4:	4621      	mov	r1, r4
    27a6:	4628      	mov	r0, r5
    27a8:	f7ff fd81 	bl	22ae <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    27ac:	2302      	movs	r3, #2
    27ae:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    27b0:	2800      	cmp	r0, #0
    27b2:	d0bd      	beq.n	2730 <boot_swap_sectors+0x70>
    27b4:	2300      	movs	r3, #0
    27b6:	461a      	mov	r2, r3
    27b8:	4619      	mov	r1, r3
    27ba:	4618      	mov	r0, r3
    27bc:	f7fe ff6e 	bl	169c <__assert_func>
        assert(rc == 0);
    27c0:	2300      	movs	r3, #0
    27c2:	461a      	mov	r2, r3
    27c4:	4619      	mov	r1, r3
    27c6:	4618      	mov	r0, r3
    27c8:	f7fe ff68 	bl	169c <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    27cc:	4622      	mov	r2, r4
    27ce:	9905      	ldr	r1, [sp, #20]
    27d0:	4628      	mov	r0, r5
    27d2:	f7ff feaf 	bl	2534 <swap_status_init>
            assert(rc == 0);
    27d6:	b9d0      	cbnz	r0, 280e <boot_swap_sectors+0x14e>
            if (!bs->use_scratch) {
    27d8:	79a3      	ldrb	r3, [r4, #6]
    27da:	2b00      	cmp	r3, #0
    27dc:	d1d6      	bne.n	278c <boot_swap_sectors+0xcc>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    27de:	9907      	ldr	r1, [sp, #28]
    27e0:	4628      	mov	r0, r5
    27e2:	f7ff fe65 	bl	24b0 <swap_erase_trailer_sectors>
                assert(rc == 0);
    27e6:	b9c0      	cbnz	r0, 281a <boot_swap_sectors+0x15a>
                rc = swap_status_init(state, fap_primary_slot, bs);
    27e8:	4622      	mov	r2, r4
    27ea:	9907      	ldr	r1, [sp, #28]
    27ec:	4628      	mov	r0, r5
    27ee:	f7ff fea1 	bl	2534 <swap_status_init>
                assert(rc == 0);
    27f2:	b9c0      	cbnz	r0, 2826 <boot_swap_sectors+0x166>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    27f4:	9805      	ldr	r0, [sp, #20]
    27f6:	6882      	ldr	r2, [r0, #8]
    27f8:	2100      	movs	r1, #0
    27fa:	f7ff fd8c 	bl	2316 <boot_erase_region>
                assert(rc == 0);
    27fe:	2800      	cmp	r0, #0
    2800:	d0c4      	beq.n	278c <boot_swap_sectors+0xcc>
    2802:	2300      	movs	r3, #0
    2804:	461a      	mov	r2, r3
    2806:	4619      	mov	r1, r3
    2808:	4618      	mov	r0, r3
    280a:	f7fe ff47 	bl	169c <__assert_func>
            assert(rc == 0);
    280e:	2300      	movs	r3, #0
    2810:	461a      	mov	r2, r3
    2812:	4619      	mov	r1, r3
    2814:	4618      	mov	r0, r3
    2816:	f7fe ff41 	bl	169c <__assert_func>
                assert(rc == 0);
    281a:	2300      	movs	r3, #0
    281c:	461a      	mov	r2, r3
    281e:	4619      	mov	r1, r3
    2820:	4618      	mov	r0, r3
    2822:	f7fe ff3b 	bl	169c <__assert_func>
                assert(rc == 0);
    2826:	2300      	movs	r3, #0
    2828:	461a      	mov	r2, r3
    282a:	4619      	mov	r1, r3
    282c:	4618      	mov	r0, r3
    282e:	f7fe ff35 	bl	169c <__assert_func>
        assert(rc == 0);
    2832:	2300      	movs	r3, #0
    2834:	461a      	mov	r2, r3
    2836:	4619      	mov	r1, r3
    2838:	4618      	mov	r0, r3
    283a:	f7fe ff2f 	bl	169c <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    283e:	463a      	mov	r2, r7
    2840:	4631      	mov	r1, r6
    2842:	9806      	ldr	r0, [sp, #24]
    2844:	f7ff fd67 	bl	2316 <boot_erase_region>
        assert(rc == 0);
    2848:	b9e8      	cbnz	r0, 2886 <boot_swap_sectors+0x1c6>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    284a:	f8cd 8004 	str.w	r8, [sp, #4]
    284e:	9600      	str	r6, [sp, #0]
    2850:	4633      	mov	r3, r6
    2852:	9a06      	ldr	r2, [sp, #24]
    2854:	9907      	ldr	r1, [sp, #28]
    2856:	4628      	mov	r0, r5
    2858:	f7ff fd62 	bl	2320 <boot_copy_region>
        assert(rc == 0);
    285c:	b9c8      	cbnz	r0, 2892 <boot_swap_sectors+0x1d2>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    285e:	6823      	ldr	r3, [r4, #0]
    2860:	2b01      	cmp	r3, #1
    2862:	d101      	bne.n	2868 <boot_swap_sectors+0x1a8>
    2864:	79a3      	ldrb	r3, [r4, #6]
    2866:	b1d3      	cbz	r3, 289e <boot_swap_sectors+0x1de>
        rc = boot_write_status(state, bs);
    2868:	4621      	mov	r1, r4
    286a:	4628      	mov	r0, r5
    286c:	f7ff fd1f 	bl	22ae <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    2870:	2303      	movs	r3, #3
    2872:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2874:	2800      	cmp	r0, #0
    2876:	f43f af5f 	beq.w	2738 <boot_swap_sectors+0x78>
    287a:	2300      	movs	r3, #0
    287c:	461a      	mov	r2, r3
    287e:	4619      	mov	r1, r3
    2880:	4618      	mov	r0, r3
    2882:	f7fe ff0b 	bl	169c <__assert_func>
        assert(rc == 0);
    2886:	2300      	movs	r3, #0
    2888:	461a      	mov	r2, r3
    288a:	4619      	mov	r1, r3
    288c:	4618      	mov	r0, r3
    288e:	f7fe ff05 	bl	169c <__assert_func>
        assert(rc == 0);
    2892:	2300      	movs	r3, #0
    2894:	461a      	mov	r2, r3
    2896:	4619      	mov	r1, r3
    2898:	4618      	mov	r0, r3
    289a:	f7fe feff 	bl	169c <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    289e:	9906      	ldr	r1, [sp, #24]
    28a0:	4628      	mov	r0, r5
    28a2:	f7ff fe05 	bl	24b0 <swap_erase_trailer_sectors>
            assert(rc == 0);
    28a6:	2800      	cmp	r0, #0
    28a8:	d0de      	beq.n	2868 <boot_swap_sectors+0x1a8>
    28aa:	2300      	movs	r3, #0
    28ac:	461a      	mov	r2, r3
    28ae:	4619      	mov	r1, r3
    28b0:	4618      	mov	r0, r3
    28b2:	f7fe fef3 	bl	169c <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    28b6:	463a      	mov	r2, r7
    28b8:	4631      	mov	r1, r6
    28ba:	9807      	ldr	r0, [sp, #28]
    28bc:	f7ff fd2b 	bl	2316 <boot_erase_region>
        assert(rc == 0);
    28c0:	2800      	cmp	r0, #0
    28c2:	d15b      	bne.n	297c <boot_swap_sectors+0x2bc>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    28c4:	f8cd 8004 	str.w	r8, [sp, #4]
    28c8:	9600      	str	r6, [sp, #0]
    28ca:	2300      	movs	r3, #0
    28cc:	9a07      	ldr	r2, [sp, #28]
    28ce:	9905      	ldr	r1, [sp, #20]
    28d0:	4628      	mov	r0, r5
    28d2:	f7ff fd25 	bl	2320 <boot_copy_region>
        assert(rc == 0);
    28d6:	2800      	cmp	r0, #0
    28d8:	d156      	bne.n	2988 <boot_swap_sectors+0x2c8>
        if (bs->use_scratch) {
    28da:	79a3      	ldrb	r3, [r4, #6]
    28dc:	2b00      	cmp	r3, #0
    28de:	d02e      	beq.n	293e <boot_swap_sectors+0x27e>
            scratch_trailer_off = boot_status_off(fap_scratch);
    28e0:	9805      	ldr	r0, [sp, #20]
    28e2:	f000 faa5 	bl	2e30 <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    28e6:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    28e8:	6eab      	ldr	r3, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    28ea:	005b      	lsls	r3, r3, #1
    28ec:	9301      	str	r3, [sp, #4]
    28ee:	9600      	str	r6, [sp, #0]
    28f0:	4603      	mov	r3, r0
    28f2:	9a07      	ldr	r2, [sp, #28]
    28f4:	9905      	ldr	r1, [sp, #20]
    28f6:	4628      	mov	r0, r5
    28f8:	f7ff fd12 	bl	2320 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    28fc:	2800      	cmp	r0, #0
    28fe:	d149      	bne.n	2994 <boot_swap_sectors+0x2d4>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    2900:	a903      	add	r1, sp, #12
    2902:	2003      	movs	r0, #3
    2904:	f000 fb08 	bl	2f18 <boot_read_swap_state_by_id>
            assert(rc == 0);
    2908:	2800      	cmp	r0, #0
    290a:	d149      	bne.n	29a0 <boot_swap_sectors+0x2e0>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    290c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2910:	2b01      	cmp	r3, #1
    2912:	d04b      	beq.n	29ac <boot_swap_sectors+0x2ec>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    2914:	f89d 100d 	ldrb.w	r1, [sp, #13]
    2918:	2901      	cmp	r1, #1
    291a:	d005      	beq.n	2928 <boot_swap_sectors+0x268>
                rc = boot_write_swap_info(fap_primary_slot,
    291c:	2200      	movs	r2, #0
    291e:	9807      	ldr	r0, [sp, #28]
    2920:	f000 fb40 	bl	2fa4 <boot_write_swap_info>
                assert(rc == 0);
    2924:	2800      	cmp	r0, #0
    2926:	d14c      	bne.n	29c2 <boot_swap_sectors+0x302>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    2928:	68a1      	ldr	r1, [r4, #8]
    292a:	9807      	ldr	r0, [sp, #28]
    292c:	f000 fb5c 	bl	2fe8 <boot_write_swap_size>
            assert(rc == 0);
    2930:	2800      	cmp	r0, #0
    2932:	d14c      	bne.n	29ce <boot_swap_sectors+0x30e>
            rc = boot_write_magic(fap_primary_slot);
    2934:	9807      	ldr	r0, [sp, #28]
    2936:	f000 fb17 	bl	2f68 <boot_write_magic>
            assert(rc == 0);
    293a:	2800      	cmp	r0, #0
    293c:	d14d      	bne.n	29da <boot_swap_sectors+0x31a>
        erase_scratch = bs->use_scratch;
    293e:	79a6      	ldrb	r6, [r4, #6]
        bs->use_scratch = 0;
    2940:	2300      	movs	r3, #0
    2942:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    2944:	4621      	mov	r1, r4
    2946:	4628      	mov	r0, r5
    2948:	f7ff fcb1 	bl	22ae <boot_write_status>
        bs->idx++;
    294c:	6823      	ldr	r3, [r4, #0]
    294e:	3301      	adds	r3, #1
    2950:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    2952:	2301      	movs	r3, #1
    2954:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2956:	2800      	cmp	r0, #0
    2958:	d145      	bne.n	29e6 <boot_swap_sectors+0x326>
        if (erase_scratch) {
    295a:	2e00      	cmp	r6, #0
    295c:	f43f aef0 	beq.w	2740 <boot_swap_sectors+0x80>
            rc = boot_erase_region(fap_scratch, 0, sz);
    2960:	463a      	mov	r2, r7
    2962:	2100      	movs	r1, #0
    2964:	9805      	ldr	r0, [sp, #20]
    2966:	f7ff fcd6 	bl	2316 <boot_erase_region>
            assert(rc == 0);
    296a:	2800      	cmp	r0, #0
    296c:	f43f aee8 	beq.w	2740 <boot_swap_sectors+0x80>
    2970:	2300      	movs	r3, #0
    2972:	461a      	mov	r2, r3
    2974:	4619      	mov	r1, r3
    2976:	4618      	mov	r0, r3
    2978:	f7fe fe90 	bl	169c <__assert_func>
        assert(rc == 0);
    297c:	2300      	movs	r3, #0
    297e:	461a      	mov	r2, r3
    2980:	4619      	mov	r1, r3
    2982:	4618      	mov	r0, r3
    2984:	f7fe fe8a 	bl	169c <__assert_func>
        assert(rc == 0);
    2988:	2300      	movs	r3, #0
    298a:	461a      	mov	r2, r3
    298c:	4619      	mov	r1, r3
    298e:	4618      	mov	r0, r3
    2990:	f7fe fe84 	bl	169c <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    2994:	2300      	movs	r3, #0
    2996:	461a      	mov	r2, r3
    2998:	4619      	mov	r1, r3
    299a:	4618      	mov	r0, r3
    299c:	f7fe fe7e 	bl	169c <__assert_func>
            assert(rc == 0);
    29a0:	2300      	movs	r3, #0
    29a2:	461a      	mov	r2, r3
    29a4:	4619      	mov	r1, r3
    29a6:	4618      	mov	r0, r3
    29a8:	f7fe fe78 	bl	169c <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    29ac:	9807      	ldr	r0, [sp, #28]
    29ae:	f000 faf2 	bl	2f96 <boot_write_image_ok>
                assert(rc == 0);
    29b2:	2800      	cmp	r0, #0
    29b4:	d0ae      	beq.n	2914 <boot_swap_sectors+0x254>
    29b6:	2300      	movs	r3, #0
    29b8:	461a      	mov	r2, r3
    29ba:	4619      	mov	r1, r3
    29bc:	4618      	mov	r0, r3
    29be:	f7fe fe6d 	bl	169c <__assert_func>
                assert(rc == 0);
    29c2:	2300      	movs	r3, #0
    29c4:	461a      	mov	r2, r3
    29c6:	4619      	mov	r1, r3
    29c8:	4618      	mov	r0, r3
    29ca:	f7fe fe67 	bl	169c <__assert_func>
            assert(rc == 0);
    29ce:	2300      	movs	r3, #0
    29d0:	461a      	mov	r2, r3
    29d2:	4619      	mov	r1, r3
    29d4:	4618      	mov	r0, r3
    29d6:	f7fe fe61 	bl	169c <__assert_func>
            assert(rc == 0);
    29da:	2300      	movs	r3, #0
    29dc:	461a      	mov	r2, r3
    29de:	4619      	mov	r1, r3
    29e0:	4618      	mov	r0, r3
    29e2:	f7fe fe5b 	bl	169c <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    29e6:	2300      	movs	r3, #0
    29e8:	461a      	mov	r2, r3
    29ea:	4619      	mov	r1, r3
    29ec:	4618      	mov	r0, r3
    29ee:	f7fe fe55 	bl	169c <__assert_func>

000029f2 <boot_read_image_header>:
{
    29f2:	b510      	push	{r4, lr}
    29f4:	b082      	sub	sp, #8
    29f6:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    29f8:	2000      	movs	r0, #0
    29fa:	f000 fcb0 	bl	335e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    29fe:	a901      	add	r1, sp, #4
    2a00:	b2c0      	uxtb	r0, r0
    2a02:	f7fe ff85 	bl	1910 <flash_area_open>
    if (rc != 0) {
    2a06:	b118      	cbz	r0, 2a10 <boot_read_image_header+0x1e>
        rc = BOOT_EFLASH;
    2a08:	2301      	movs	r3, #1
}
    2a0a:	4618      	mov	r0, r3
    2a0c:	b002      	add	sp, #8
    2a0e:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    2a10:	2320      	movs	r3, #32
    2a12:	4622      	mov	r2, r4
    2a14:	2100      	movs	r1, #0
    2a16:	9801      	ldr	r0, [sp, #4]
    2a18:	f7fe ffd8 	bl	19cc <flash_area_read>
    if (rc != 0) {
    2a1c:	4603      	mov	r3, r0
    2a1e:	2800      	cmp	r0, #0
    2a20:	d0f3      	beq.n	2a0a <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    2a22:	2301      	movs	r3, #1
    2a24:	e7f1      	b.n	2a0a <boot_read_image_header+0x18>
	...

00002a28 <swap_read_status_bytes>:
{
    2a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a2c:	b083      	sub	sp, #12
    2a2e:	4606      	mov	r6, r0
    2a30:	4689      	mov	r9, r1
    2a32:	4693      	mov	fp, r2
    off = boot_status_off(fap);
    2a34:	f000 f9fc 	bl	2e30 <boot_status_off>
    2a38:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    2a3a:	4631      	mov	r1, r6
    2a3c:	2000      	movs	r0, #0
    2a3e:	f000 f9e8 	bl	2e12 <boot_status_entries>
    if (max_entries < 0) {
    2a42:	1e07      	subs	r7, r0, #0
    2a44:	db3f      	blt.n	2ac6 <swap_read_status_bytes+0x9e>
    for (i = 0; i < max_entries; i++) {
    2a46:	2400      	movs	r4, #0
    found_idx = 0;
    2a48:	46a2      	mov	sl, r4
    found = 0;
    2a4a:	4625      	mov	r5, r4
    2a4c:	e007      	b.n	2a5e <swap_read_status_bytes+0x36>
            if (found && !found_idx) {
    2a4e:	b12d      	cbz	r5, 2a5c <swap_read_status_bytes+0x34>
    2a50:	f1ba 0f00 	cmp.w	sl, #0
    2a54:	d102      	bne.n	2a5c <swap_read_status_bytes+0x34>
                found_idx = i;
    2a56:	46a2      	mov	sl, r4
    2a58:	e000      	b.n	2a5c <swap_read_status_bytes+0x34>
            found = 1;
    2a5a:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
    2a5c:	3401      	adds	r4, #1
    2a5e:	42bc      	cmp	r4, r7
    2a60:	da14      	bge.n	2a8c <swap_read_status_bytes+0x64>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    2a62:	f8d9 1068 	ldr.w	r1, [r9, #104]	; 0x68
    2a66:	2301      	movs	r3, #1
    2a68:	f10d 0207 	add.w	r2, sp, #7
    2a6c:	fb01 8104 	mla	r1, r1, r4, r8
    2a70:	4630      	mov	r0, r6
    2a72:	f7fe ffee 	bl	1a52 <flash_area_read_is_empty>
        if (rc < 0) {
    2a76:	2800      	cmp	r0, #0
    2a78:	db27      	blt.n	2aca <swap_read_status_bytes+0xa2>
        if (rc == 1) {
    2a7a:	2801      	cmp	r0, #1
    2a7c:	d0e7      	beq.n	2a4e <swap_read_status_bytes+0x26>
        } else if (!found) {
    2a7e:	2d00      	cmp	r5, #0
    2a80:	d0eb      	beq.n	2a5a <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    2a82:	f1ba 0f00 	cmp.w	sl, #0
    2a86:	d0e9      	beq.n	2a5c <swap_read_status_bytes+0x34>
            invalid = 1;
    2a88:	4629      	mov	r1, r5
    2a8a:	e000      	b.n	2a8e <swap_read_status_bytes+0x66>
    invalid = 0;
    2a8c:	2100      	movs	r1, #0
    if (invalid) {
    2a8e:	b9a1      	cbnz	r1, 2aba <swap_read_status_bytes+0x92>
    if (found) {
    2a90:	b1e5      	cbz	r5, 2acc <swap_read_status_bytes+0xa4>
        if (!found_idx) {
    2a92:	f1ba 0f00 	cmp.w	sl, #0
    2a96:	d000      	beq.n	2a9a <swap_read_status_bytes+0x72>
    2a98:	4654      	mov	r4, sl
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    2a9a:	4b0e      	ldr	r3, [pc, #56]	; (2ad4 <swap_read_status_bytes+0xac>)
    2a9c:	fb83 2304 	smull	r2, r3, r3, r4
    2aa0:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    2aa4:	1c5a      	adds	r2, r3, #1
    2aa6:	f8cb 2000 	str.w	r2, [fp]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    2aaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2aae:	1ae2      	subs	r2, r4, r3
    2ab0:	1c53      	adds	r3, r2, #1
    2ab2:	f88b 3004 	strb.w	r3, [fp, #4]
    return 0;
    2ab6:	460d      	mov	r5, r1
    2ab8:	e008      	b.n	2acc <swap_read_status_bytes+0xa4>
        assert(0);
    2aba:	2300      	movs	r3, #0
    2abc:	461a      	mov	r2, r3
    2abe:	4619      	mov	r1, r3
    2ac0:	4618      	mov	r0, r3
    2ac2:	f7fe fdeb 	bl	169c <__assert_func>
        return BOOT_EBADARGS;
    2ac6:	2507      	movs	r5, #7
    2ac8:	e000      	b.n	2acc <swap_read_status_bytes+0xa4>
            return BOOT_EFLASH;
    2aca:	2501      	movs	r5, #1
}
    2acc:	4628      	mov	r0, r5
    2ace:	b003      	add	sp, #12
    2ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ad4:	55555556 	.word	0x55555556

00002ad8 <boot_status_internal_off>:
{
    2ad8:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    2ada:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2ade:	6803      	ldr	r3, [r0, #0]
    2ae0:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2ae2:	7902      	ldrb	r2, [r0, #4]
    2ae4:	3a01      	subs	r2, #1
    2ae6:	fb01 f102 	mul.w	r1, r1, r2
}
    2aea:	fb03 1004 	mla	r0, r3, r4, r1
    2aee:	bc10      	pop	{r4}
    2af0:	4770      	bx	lr

00002af2 <boot_slots_compatible>:
{
    2af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return BOOT_IMG(state, slot).num_sectors;
    2af6:	6a86      	ldr	r6, [r0, #40]	; 0x28
    2af8:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    2afc:	2e80      	cmp	r6, #128	; 0x80
    2afe:	d859      	bhi.n	2bb4 <boot_slots_compatible+0xc2>
    2b00:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    2b04:	d859      	bhi.n	2bba <boot_slots_compatible+0xc8>
    2b06:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2b08:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    2b0c:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    2b0e:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    2b10:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    2b12:	46a9      	mov	r9, r5
    i = sz0 = primary_slot_sz = 0;
    2b14:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    2b16:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    2b18:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    2b1a:	e013      	b.n	2b44 <boot_slots_compatible+0x52>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2b1c:	6a47      	ldr	r7, [r0, #36]	; 0x24
    2b1e:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    2b22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    2b26:	4457      	add	r7, sl
    2b28:	68bf      	ldr	r7, [r7, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2b2a:	443b      	add	r3, r7
    2b2c:	6d07      	ldr	r7, [r0, #80]	; 0x50
    2b2e:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    2b32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    2b36:	4457      	add	r7, sl
    2b38:	68bf      	ldr	r7, [r7, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2b3a:	443a      	add	r2, r7
            i++;
    2b3c:	3101      	adds	r1, #1
            j++;
    2b3e:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    2b40:	4293      	cmp	r3, r2
    2b42:	d021      	beq.n	2b88 <boot_slots_compatible+0x96>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    2b44:	42b1      	cmp	r1, r6
    2b46:	d301      	bcc.n	2b4c <boot_slots_compatible+0x5a>
    2b48:	4564      	cmp	r4, ip
    2b4a:	d227      	bcs.n	2b9c <boot_slots_compatible+0xaa>
        if (sz0 == sz1) {
    2b4c:	4293      	cmp	r3, r2
    2b4e:	d0e5      	beq.n	2b1c <boot_slots_compatible+0x2a>
        } else if (sz0 < sz1) {
    2b50:	4293      	cmp	r3, r2
    2b52:	d20c      	bcs.n	2b6e <boot_slots_compatible+0x7c>
    2b54:	6a47      	ldr	r7, [r0, #36]	; 0x24
    2b56:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    2b5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    2b5e:	4457      	add	r7, sl
    2b60:	68bf      	ldr	r7, [r7, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2b62:	443b      	add	r3, r7
            if (smaller == 2) {
    2b64:	2d02      	cmp	r5, #2
    2b66:	d02a      	beq.n	2bbe <boot_slots_compatible+0xcc>
            i++;
    2b68:	3101      	adds	r1, #1
            smaller = 1;
    2b6a:	2501      	movs	r5, #1
    2b6c:	e7e8      	b.n	2b40 <boot_slots_compatible+0x4e>
    2b6e:	6d07      	ldr	r7, [r0, #80]	; 0x50
    2b70:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    2b74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    2b78:	4457      	add	r7, sl
    2b7a:	68bf      	ldr	r7, [r7, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2b7c:	443a      	add	r2, r7
            if (smaller == 1) {
    2b7e:	2d01      	cmp	r5, #1
    2b80:	d01f      	beq.n	2bc2 <boot_slots_compatible+0xd0>
            j++;
    2b82:	3401      	adds	r4, #1
            smaller = 2;
    2b84:	2502      	movs	r5, #2
    2b86:	e7db      	b.n	2b40 <boot_slots_compatible+0x4e>
            primary_slot_sz += sz0;
    2b88:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    2b8a:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2b8c:	4543      	cmp	r3, r8
    2b8e:	d81a      	bhi.n	2bc6 <boot_slots_compatible+0xd4>
    2b90:	4542      	cmp	r2, r8
    2b92:	d81a      	bhi.n	2bca <boot_slots_compatible+0xd8>
            smaller = sz0 = sz1 = 0;
    2b94:	2500      	movs	r5, #0
    2b96:	462a      	mov	r2, r5
    2b98:	462b      	mov	r3, r5
    2b9a:	e7d3      	b.n	2b44 <boot_slots_compatible+0x52>
    if ((i != num_sectors_primary) ||
    2b9c:	42b1      	cmp	r1, r6
    2b9e:	d001      	beq.n	2ba4 <boot_slots_compatible+0xb2>
        return 0;
    2ba0:	2000      	movs	r0, #0
    2ba2:	e008      	b.n	2bb6 <boot_slots_compatible+0xc4>
    if ((i != num_sectors_primary) ||
    2ba4:	4564      	cmp	r4, ip
    2ba6:	d001      	beq.n	2bac <boot_slots_compatible+0xba>
        return 0;
    2ba8:	2000      	movs	r0, #0
    2baa:	e004      	b.n	2bb6 <boot_slots_compatible+0xc4>
        (j != num_sectors_secondary) ||
    2bac:	45ce      	cmp	lr, r9
    2bae:	d00e      	beq.n	2bce <boot_slots_compatible+0xdc>
        return 0;
    2bb0:	2000      	movs	r0, #0
    2bb2:	e000      	b.n	2bb6 <boot_slots_compatible+0xc4>
        return 0;
    2bb4:	2000      	movs	r0, #0
}
    2bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
    2bba:	2000      	movs	r0, #0
    2bbc:	e7fb      	b.n	2bb6 <boot_slots_compatible+0xc4>
                return 0;
    2bbe:	2000      	movs	r0, #0
    2bc0:	e7f9      	b.n	2bb6 <boot_slots_compatible+0xc4>
                return 0;
    2bc2:	2000      	movs	r0, #0
    2bc4:	e7f7      	b.n	2bb6 <boot_slots_compatible+0xc4>
                return 0;
    2bc6:	2000      	movs	r0, #0
    2bc8:	e7f5      	b.n	2bb6 <boot_slots_compatible+0xc4>
    2bca:	2000      	movs	r0, #0
    2bcc:	e7f3      	b.n	2bb6 <boot_slots_compatible+0xc4>
    return 1;
    2bce:	2001      	movs	r0, #1
    2bd0:	e7f1      	b.n	2bb6 <boot_slots_compatible+0xc4>
	...

00002bd4 <swap_status_source>:
{
    2bd4:	b530      	push	{r4, r5, lr}
    2bd6:	b085      	sub	sp, #20
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2bd8:	4669      	mov	r1, sp
    2bda:	2001      	movs	r0, #1
    2bdc:	f000 f99c 	bl	2f18 <boot_read_swap_state_by_id>
    assert(rc == 0);
    2be0:	b938      	cbnz	r0, 2bf2 <swap_status_source+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    2be2:	a902      	add	r1, sp, #8
    2be4:	2003      	movs	r0, #3
    2be6:	f000 f997 	bl	2f18 <boot_read_swap_state_by_id>
    assert(rc == 0);
    2bea:	4605      	mov	r5, r0
    2bec:	b938      	cbnz	r0, 2bfe <swap_status_source+0x2a>
    2bee:	2400      	movs	r4, #0
    2bf0:	e00c      	b.n	2c0c <swap_status_source+0x38>
    assert(rc == 0);
    2bf2:	2300      	movs	r3, #0
    2bf4:	461a      	mov	r2, r3
    2bf6:	4619      	mov	r1, r3
    2bf8:	4618      	mov	r0, r3
    2bfa:	f7fe fd4f 	bl	169c <__assert_func>
    assert(rc == 0);
    2bfe:	2300      	movs	r3, #0
    2c00:	461a      	mov	r2, r3
    2c02:	4619      	mov	r1, r3
    2c04:	4618      	mov	r0, r3
    2c06:	f7fe fd49 	bl	169c <__assert_func>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    2c0a:	3401      	adds	r4, #1
    2c0c:	2c03      	cmp	r4, #3
    2c0e:	d820      	bhi.n	2c52 <swap_status_source+0x7e>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    2c10:	f89d 1000 	ldrb.w	r1, [sp]
    2c14:	4b10      	ldr	r3, [pc, #64]	; (2c58 <swap_status_source+0x84>)
    2c16:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    2c1a:	f000 f8e1 	bl	2de0 <boot_magic_compatible_check>
    2c1e:	2800      	cmp	r0, #0
    2c20:	d0f3      	beq.n	2c0a <swap_status_source+0x36>
            boot_magic_compatible_check(table->bst_magic_scratch,
    2c22:	4b0d      	ldr	r3, [pc, #52]	; (2c58 <swap_status_source+0x84>)
    2c24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2c28:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2c2c:	7858      	ldrb	r0, [r3, #1]
    2c2e:	f000 f8d7 	bl	2de0 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    2c32:	2800      	cmp	r0, #0
    2c34:	d0e9      	beq.n	2c0a <swap_status_source+0x36>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2c36:	4b08      	ldr	r3, [pc, #32]	; (2c58 <swap_status_source+0x84>)
    2c38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2c3c:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    2c3e:	2b04      	cmp	r3, #4
    2c40:	d003      	beq.n	2c4a <swap_status_source+0x76>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    2c42:	f89d 2002 	ldrb.w	r2, [sp, #2]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2c46:	4293      	cmp	r3, r2
    2c48:	d1df      	bne.n	2c0a <swap_status_source+0x36>
            source = table->bst_status_source;
    2c4a:	4b03      	ldr	r3, [pc, #12]	; (2c58 <swap_status_source+0x84>)
    2c4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2c50:	78e5      	ldrb	r5, [r4, #3]
}
    2c52:	4628      	mov	r0, r5
    2c54:	b005      	add	sp, #20
    2c56:	bd30      	pop	{r4, r5, pc}
    2c58:	00003a98 	.word	0x00003a98

00002c5c <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    2c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c5e:	b083      	sub	sp, #12
    2c60:	4605      	mov	r5, r0
    2c62:	460e      	mov	r6, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    2c64:	2000      	movs	r0, #0
    primary_slot_size = 0;
    2c66:	4603      	mov	r3, r0
    last_sector_idx = 0;
    2c68:	4601      	mov	r1, r0
    2c6a:	e000      	b.n	2c6e <swap_run+0x12>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    2c6c:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
    2c6e:	4293      	cmp	r3, r2
    2c70:	d301      	bcc.n	2c76 <swap_run+0x1a>
    2c72:	4283      	cmp	r3, r0
    2c74:	d207      	bcs.n	2c86 <swap_run+0x2a>
    2c76:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    2c78:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    2c7c:	ea4f 078c 	mov.w	r7, ip, lsl #2
    2c80:	443c      	add	r4, r7
    2c82:	68a4      	ldr	r4, [r4, #8]
           primary_slot_size += boot_img_sector_size(state,
    2c84:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
    2c86:	4290      	cmp	r0, r2
    2c88:	d301      	bcc.n	2c8e <swap_run+0x32>
    2c8a:	4283      	cmp	r3, r0
    2c8c:	d907      	bls.n	2c9e <swap_run+0x42>
    2c8e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    2c90:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    2c94:	ea4f 078c 	mov.w	r7, ip, lsl #2
    2c98:	443c      	add	r4, r7
    2c9a:	68a4      	ldr	r4, [r4, #8]
           secondary_slot_size += boot_img_sector_size(state,
    2c9c:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
    2c9e:	4293      	cmp	r3, r2
    2ca0:	d3e4      	bcc.n	2c6c <swap_run+0x10>
    2ca2:	4290      	cmp	r0, r2
    2ca4:	d3e2      	bcc.n	2c6c <swap_run+0x10>
                secondary_slot_size >= copy_size &&
    2ca6:	4283      	cmp	r3, r0
    2ca8:	d1e0      	bne.n	2c6c <swap_run+0x10>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    2caa:	2400      	movs	r4, #0
    2cac:	e002      	b.n	2cb4 <swap_run+0x58>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    2cae:	9901      	ldr	r1, [sp, #4]
    2cb0:	3901      	subs	r1, #1
        swap_idx++;
    2cb2:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    2cb4:	2900      	cmp	r1, #0
    2cb6:	db0e      	blt.n	2cd6 <swap_run+0x7a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    2cb8:	aa01      	add	r2, sp, #4
    2cba:	4628      	mov	r0, r5
    2cbc:	f7ff fce9 	bl	2692 <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    2cc0:	6833      	ldr	r3, [r6, #0]
    2cc2:	3b01      	subs	r3, #1
    2cc4:	42a3      	cmp	r3, r4
    2cc6:	d8f2      	bhi.n	2cae <swap_run+0x52>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    2cc8:	4633      	mov	r3, r6
    2cca:	462a      	mov	r2, r5
    2ccc:	4601      	mov	r1, r0
    2cce:	9801      	ldr	r0, [sp, #4]
    2cd0:	f7ff fcf6 	bl	26c0 <boot_swap_sectors>
    2cd4:	e7eb      	b.n	2cae <swap_run+0x52>
    }

}
    2cd6:	b003      	add	sp, #12
    2cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002cda <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    2cda:	2801      	cmp	r0, #1
    2cdc:	d101      	bne.n	2ce2 <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
    2cde:	2001      	movs	r0, #1
}
    2ce0:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    2ce2:	2002      	movs	r0, #2
    2ce4:	4770      	bx	lr
	...

00002ce8 <boot_magic_decode>:
{
    2ce8:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2cea:	2210      	movs	r2, #16
    2cec:	4903      	ldr	r1, [pc, #12]	; (2cfc <boot_magic_decode+0x14>)
    2cee:	f7fe fd85 	bl	17fc <memcmp>
    2cf2:	b908      	cbnz	r0, 2cf8 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    2cf4:	2001      	movs	r0, #1
}
    2cf6:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    2cf8:	2002      	movs	r0, #2
    2cfa:	e7fc      	b.n	2cf6 <boot_magic_decode+0xe>
    2cfc:	00003aac 	.word	0x00003aac

00002d00 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    2d00:	b530      	push	{r4, r5, lr}
    2d02:	b087      	sub	sp, #28
    2d04:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    2d06:	4b14      	ldr	r3, [pc, #80]	; (2d58 <boot_find_status+0x58>)
    2d08:	881b      	ldrh	r3, [r3, #0]
    2d0a:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2d0e:	2400      	movs	r4, #0
    2d10:	e000      	b.n	2d14 <boot_find_status+0x14>
    2d12:	3401      	adds	r4, #1
    2d14:	2c01      	cmp	r4, #1
    2d16:	d81a      	bhi.n	2d4e <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    2d18:	4629      	mov	r1, r5
    2d1a:	ab06      	add	r3, sp, #24
    2d1c:	4423      	add	r3, r4
    2d1e:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    2d22:	f7fe fdf5 	bl	1910 <flash_area_open>
        if (rc != 0) {
    2d26:	4603      	mov	r3, r0
    2d28:	b998      	cbnz	r0, 2d52 <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    2d2a:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2d2c:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    2d2e:	2310      	movs	r3, #16
    2d30:	aa02      	add	r2, sp, #8
    2d32:	3910      	subs	r1, #16
    2d34:	f7fe fe4a 	bl	19cc <flash_area_read>
        if (rc != 0) {
    2d38:	4603      	mov	r3, r0
    2d3a:	b950      	cbnz	r0, 2d52 <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2d3c:	2210      	movs	r2, #16
    2d3e:	4907      	ldr	r1, [pc, #28]	; (2d5c <boot_find_status+0x5c>)
    2d40:	a802      	add	r0, sp, #8
    2d42:	f7fe fd5b 	bl	17fc <memcmp>
    2d46:	4603      	mov	r3, r0
    2d48:	2800      	cmp	r0, #0
    2d4a:	d1e2      	bne.n	2d12 <boot_find_status+0x12>
    2d4c:	e001      	b.n	2d52 <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    2d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    2d52:	4618      	mov	r0, r3
    2d54:	b007      	add	sp, #28
    2d56:	bd30      	pop	{r4, r5, pc}
    2d58:	00003aa8 	.word	0x00003aa8
    2d5c:	00003aac 	.word	0x00003aac

00002d60 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    2d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d64:	b083      	sub	sp, #12
    2d66:	4606      	mov	r6, r0
    2d68:	460f      	mov	r7, r1
    2d6a:	4690      	mov	r8, r2
    2d6c:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    2d6e:	f7fe fe66 	bl	1a3e <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    2d72:	2c08      	cmp	r4, #8
    2d74:	d823      	bhi.n	2dbe <boot_write_trailer+0x5e>
    2d76:	4605      	mov	r5, r0
    2d78:	2808      	cmp	r0, #8
    2d7a:	d823      	bhi.n	2dc4 <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    2d7c:	4630      	mov	r0, r6
    2d7e:	f7fe fe63 	bl	1a48 <flash_area_erased_val>
    2d82:	4681      	mov	r9, r0
    if (align < inlen) {
    2d84:	42a5      	cmp	r5, r4
    2d86:	d200      	bcs.n	2d8a <boot_write_trailer+0x2a>
        align = inlen;
    2d88:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
    2d8a:	4622      	mov	r2, r4
    2d8c:	4641      	mov	r1, r8
    2d8e:	4668      	mov	r0, sp
    2d90:	f7fe fd58 	bl	1844 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    2d94:	1b2a      	subs	r2, r5, r4
    2d96:	fa5f f189 	uxtb.w	r1, r9
    2d9a:	eb0d 0004 	add.w	r0, sp, r4
    2d9e:	f7fe fd5e 	bl	185e <memset>

    rc = flash_area_write(fap, off, buf, align);
    2da2:	462b      	mov	r3, r5
    2da4:	466a      	mov	r2, sp
    2da6:	4639      	mov	r1, r7
    2da8:	4630      	mov	r0, r6
    2daa:	f7fe fe22 	bl	19f2 <flash_area_write>
    if (rc != 0) {
    2dae:	4603      	mov	r3, r0
    2db0:	b918      	cbnz	r0, 2dba <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
    2db2:	4618      	mov	r0, r3
    2db4:	b003      	add	sp, #12
    2db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    2dba:	2301      	movs	r3, #1
    2dbc:	e7f9      	b.n	2db2 <boot_write_trailer+0x52>
        return -1;
    2dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2dc2:	e7f6      	b.n	2db2 <boot_write_trailer+0x52>
    2dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2dc8:	e7f3      	b.n	2db2 <boot_write_trailer+0x52>

00002dca <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    2dca:	b510      	push	{r4, lr}
    2dcc:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    2dce:	ac02      	add	r4, sp, #8
    2dd0:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2dd4:	2301      	movs	r3, #1
    2dd6:	4622      	mov	r2, r4
    2dd8:	f7ff ffc2 	bl	2d60 <boot_write_trailer>
}
    2ddc:	b002      	add	sp, #8
    2dde:	bd10      	pop	{r4, pc}

00002de0 <boot_magic_compatible_check>:
    switch (tbl_val) {
    2de0:	2804      	cmp	r0, #4
    2de2:	d00b      	beq.n	2dfc <boot_magic_compatible_check+0x1c>
    2de4:	2805      	cmp	r0, #5
    2de6:	d104      	bne.n	2df2 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    2de8:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    2dec:	bf18      	it	ne
    2dee:	2001      	movne	r0, #1
    2df0:	4770      	bx	lr
        return tbl_val == val;
    2df2:	4288      	cmp	r0, r1
    2df4:	bf14      	ite	ne
    2df6:	2000      	movne	r0, #0
    2df8:	2001      	moveq	r0, #1
    2dfa:	4770      	bx	lr
        return 1;
    2dfc:	2001      	movs	r0, #1
}
    2dfe:	4770      	bx	lr

00002e00 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2e00:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2e04:	01d8      	lsls	r0, r3, #7
}
    2e06:	4770      	bx	lr

00002e08 <boot_trailer_sz>:
{
    2e08:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    2e0a:	f7ff fff9 	bl	2e00 <boot_status_sz>
}
    2e0e:	3030      	adds	r0, #48	; 0x30
    2e10:	bd08      	pop	{r3, pc}

00002e12 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    2e12:	780b      	ldrb	r3, [r1, #0]
    2e14:	2b03      	cmp	r3, #3
    2e16:	d006      	beq.n	2e26 <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    2e18:	3b01      	subs	r3, #1
    2e1a:	b2db      	uxtb	r3, r3
    2e1c:	2b01      	cmp	r3, #1
    2e1e:	d804      	bhi.n	2e2a <boot_status_entries+0x18>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    2e20:	f44f 70c0 	mov.w	r0, #384	; 0x180
    2e24:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    2e26:	2003      	movs	r0, #3
    2e28:	4770      	bx	lr
    return -1;
    2e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2e2e:	4770      	bx	lr

00002e30 <boot_status_off>:
{
    2e30:	b510      	push	{r4, lr}
    2e32:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    2e34:	f7fe fe03 	bl	1a3e <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    2e38:	f7ff ffe6 	bl	2e08 <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    2e3c:	68a3      	ldr	r3, [r4, #8]
    2e3e:	4283      	cmp	r3, r0
    2e40:	d301      	bcc.n	2e46 <boot_status_off+0x16>
}
    2e42:	1a18      	subs	r0, r3, r0
    2e44:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    2e46:	2300      	movs	r3, #0
    2e48:	461a      	mov	r2, r3
    2e4a:	4619      	mov	r1, r3
    2e4c:	4618      	mov	r0, r3
    2e4e:	f7fe fc25 	bl	169c <__assert_func>

00002e52 <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    2e52:	6880      	ldr	r0, [r0, #8]
}
    2e54:	3828      	subs	r0, #40	; 0x28
    2e56:	4770      	bx	lr

00002e58 <boot_read_swap_state>:
{
    2e58:	b530      	push	{r4, r5, lr}
    2e5a:	b087      	sub	sp, #28
    2e5c:	4604      	mov	r4, r0
    2e5e:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    2e60:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    2e62:	2310      	movs	r3, #16
    2e64:	aa02      	add	r2, sp, #8
    2e66:	3910      	subs	r1, #16
    2e68:	f7fe fdf3 	bl	1a52 <flash_area_read_is_empty>
    if (rc < 0) {
    2e6c:	2800      	cmp	r0, #0
    2e6e:	db4a      	blt.n	2f06 <boot_read_swap_state+0xae>
    if (rc == 1) {
    2e70:	2801      	cmp	r0, #1
    2e72:	d03e      	beq.n	2ef2 <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
    2e74:	a802      	add	r0, sp, #8
    2e76:	f7ff ff37 	bl	2ce8 <boot_magic_decode>
    2e7a:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
    2e7c:	4620      	mov	r0, r4
    2e7e:	f7ff ffe8 	bl	2e52 <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2e82:	2301      	movs	r3, #1
    2e84:	f10d 0207 	add.w	r2, sp, #7
    2e88:	4601      	mov	r1, r0
    2e8a:	4620      	mov	r0, r4
    2e8c:	f7fe fde1 	bl	1a52 <flash_area_read_is_empty>
    if (rc < 0) {
    2e90:	2800      	cmp	r0, #0
    2e92:	db3b      	blt.n	2f0c <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2e94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e98:	f003 020f 	and.w	r2, r3, #15
    2e9c:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2e9e:	091b      	lsrs	r3, r3, #4
    2ea0:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2ea2:	2801      	cmp	r0, #1
    2ea4:	d001      	beq.n	2eaa <boot_read_swap_state+0x52>
    2ea6:	2a04      	cmp	r2, #4
    2ea8:	d903      	bls.n	2eb2 <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2eaa:	2301      	movs	r3, #1
    2eac:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    2eae:	2300      	movs	r3, #0
    2eb0:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2eb2:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    2eb4:	2301      	movs	r3, #1
    2eb6:	1caa      	adds	r2, r5, #2
    2eb8:	3920      	subs	r1, #32
    2eba:	4620      	mov	r0, r4
    2ebc:	f7fe fdc9 	bl	1a52 <flash_area_read_is_empty>
    if (rc < 0) {
    2ec0:	2800      	cmp	r0, #0
    2ec2:	db25      	blt.n	2f10 <boot_read_swap_state+0xb8>
    if (rc == 1) {
    2ec4:	2801      	cmp	r0, #1
    2ec6:	d017      	beq.n	2ef8 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    2ec8:	78a8      	ldrb	r0, [r5, #2]
    2eca:	f7ff ff06 	bl	2cda <boot_flag_decode>
    2ece:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2ed0:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    2ed2:	2301      	movs	r3, #1
    2ed4:	1cea      	adds	r2, r5, #3
    2ed6:	3918      	subs	r1, #24
    2ed8:	4620      	mov	r0, r4
    2eda:	f7fe fdba 	bl	1a52 <flash_area_read_is_empty>
    if (rc < 0) {
    2ede:	2800      	cmp	r0, #0
    2ee0:	db18      	blt.n	2f14 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    2ee2:	2801      	cmp	r0, #1
    2ee4:	d00b      	beq.n	2efe <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    2ee6:	78e8      	ldrb	r0, [r5, #3]
    2ee8:	f7ff fef7 	bl	2cda <boot_flag_decode>
    2eec:	70e8      	strb	r0, [r5, #3]
    return 0;
    2eee:	2000      	movs	r0, #0
    2ef0:	e00a      	b.n	2f08 <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
    2ef2:	2303      	movs	r3, #3
    2ef4:	702b      	strb	r3, [r5, #0]
    2ef6:	e7c1      	b.n	2e7c <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
    2ef8:	2303      	movs	r3, #3
    2efa:	70ab      	strb	r3, [r5, #2]
    2efc:	e7e8      	b.n	2ed0 <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
    2efe:	2303      	movs	r3, #3
    2f00:	70eb      	strb	r3, [r5, #3]
    return 0;
    2f02:	2000      	movs	r0, #0
    2f04:	e000      	b.n	2f08 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2f06:	2001      	movs	r0, #1
}
    2f08:	b007      	add	sp, #28
    2f0a:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    2f0c:	2001      	movs	r0, #1
    2f0e:	e7fb      	b.n	2f08 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2f10:	2001      	movs	r0, #1
    2f12:	e7f9      	b.n	2f08 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2f14:	2001      	movs	r0, #1
    2f16:	e7f7      	b.n	2f08 <boot_read_swap_state+0xb0>

00002f18 <boot_read_swap_state_by_id>:
{
    2f18:	b510      	push	{r4, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    2f1e:	a901      	add	r1, sp, #4
    2f20:	b2c0      	uxtb	r0, r0
    2f22:	f7fe fcf5 	bl	1910 <flash_area_open>
    if (rc != 0) {
    2f26:	b110      	cbz	r0, 2f2e <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    2f28:	2001      	movs	r0, #1
}
    2f2a:	b002      	add	sp, #8
    2f2c:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    2f2e:	4621      	mov	r1, r4
    2f30:	9801      	ldr	r0, [sp, #4]
    2f32:	f7ff ff91 	bl	2e58 <boot_read_swap_state>
    return rc;
    2f36:	e7f8      	b.n	2f2a <boot_read_swap_state_by_id+0x12>

00002f38 <boot_read_swap_size>:
{
    2f38:	b530      	push	{r4, r5, lr}
    2f3a:	b083      	sub	sp, #12
    2f3c:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    2f3e:	a901      	add	r1, sp, #4
    2f40:	f7ff fede 	bl	2d00 <boot_find_status>
    if (rc == 0) {
    2f44:	4603      	mov	r3, r0
    2f46:	b110      	cbz	r0, 2f4e <boot_read_swap_size+0x16>
}
    2f48:	4618      	mov	r0, r3
    2f4a:	b003      	add	sp, #12
    2f4c:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    2f4e:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2f50:	4628      	mov	r0, r5
    2f52:	f7ff ff7e 	bl	2e52 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    2f56:	2304      	movs	r3, #4
    2f58:	4622      	mov	r2, r4
    2f5a:	f1a0 0108 	sub.w	r1, r0, #8
    2f5e:	4628      	mov	r0, r5
    2f60:	f7fe fd34 	bl	19cc <flash_area_read>
    2f64:	4603      	mov	r3, r0
    return rc;
    2f66:	e7ef      	b.n	2f48 <boot_read_swap_size+0x10>

00002f68 <boot_write_magic>:
{
    2f68:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2f6a:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2f6c:	2310      	movs	r3, #16
    2f6e:	4a05      	ldr	r2, [pc, #20]	; (2f84 <boot_write_magic+0x1c>)
    2f70:	3910      	subs	r1, #16
    2f72:	f7fe fd3e 	bl	19f2 <flash_area_write>
    if (rc != 0) {
    2f76:	4603      	mov	r3, r0
    2f78:	b908      	cbnz	r0, 2f7e <boot_write_magic+0x16>
}
    2f7a:	4618      	mov	r0, r3
    2f7c:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    2f7e:	2301      	movs	r3, #1
    2f80:	e7fb      	b.n	2f7a <boot_write_magic+0x12>
    2f82:	bf00      	nop
    2f84:	00003aac 	.word	0x00003aac

00002f88 <boot_write_copy_done>:

int
boot_write_copy_done(const struct flash_area *fap)
{
    2f88:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2f8a:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    2f8c:	2201      	movs	r2, #1
    2f8e:	3920      	subs	r1, #32
    2f90:	f7ff ff1b 	bl	2dca <boot_write_trailer_flag>
}
    2f94:	bd08      	pop	{r3, pc}

00002f96 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    2f96:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2f98:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    2f9a:	2201      	movs	r2, #1
    2f9c:	3918      	subs	r1, #24
    2f9e:	f7ff ff14 	bl	2dca <boot_write_trailer_flag>
}
    2fa2:	bd08      	pop	{r3, pc}

00002fa4 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    2fa4:	b530      	push	{r4, r5, lr}
    2fa6:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2fa8:	2a0e      	cmp	r2, #14
    2faa:	d811      	bhi.n	2fd0 <boot_write_swap_info+0x2c>
    2fac:	4605      	mov	r5, r0
    2fae:	290e      	cmp	r1, #14
    2fb0:	d814      	bhi.n	2fdc <boot_write_swap_info+0x38>
    2fb2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    2fb6:	ac02      	add	r4, sp, #8
    2fb8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
    2fbc:	f7ff ff49 	bl	2e52 <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2fc0:	2301      	movs	r3, #1
    2fc2:	4622      	mov	r2, r4
    2fc4:	4601      	mov	r1, r0
    2fc6:	4628      	mov	r0, r5
    2fc8:	f7ff feca 	bl	2d60 <boot_write_trailer>
}
    2fcc:	b003      	add	sp, #12
    2fce:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2fd0:	2300      	movs	r3, #0
    2fd2:	461a      	mov	r2, r3
    2fd4:	4619      	mov	r1, r3
    2fd6:	4618      	mov	r0, r3
    2fd8:	f7fe fb60 	bl	169c <__assert_func>
    2fdc:	2300      	movs	r3, #0
    2fde:	461a      	mov	r2, r3
    2fe0:	4619      	mov	r1, r3
    2fe2:	4618      	mov	r0, r3
    2fe4:	f7fe fb5a 	bl	169c <__assert_func>

00002fe8 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2fe8:	b530      	push	{r4, r5, lr}
    2fea:	b083      	sub	sp, #12
    2fec:	4605      	mov	r5, r0
    2fee:	ac02      	add	r4, sp, #8
    2ff0:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2ff4:	f7ff ff2d 	bl	2e52 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2ff8:	2304      	movs	r3, #4
    2ffa:	4622      	mov	r2, r4
    2ffc:	f1a0 0108 	sub.w	r1, r0, #8
    3000:	4628      	mov	r0, r5
    3002:	f7ff fead 	bl	2d60 <boot_write_trailer>
}
    3006:	b003      	add	sp, #12
    3008:	bd30      	pop	{r4, r5, pc}
	...

0000300c <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    300c:	b530      	push	{r4, r5, lr}
    300e:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3010:	a902      	add	r1, sp, #8
    3012:	2001      	movs	r0, #1
    3014:	f7ff ff80 	bl	2f18 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    3018:	2800      	cmp	r0, #0
    301a:	d13c      	bne.n	3096 <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    301c:	4669      	mov	r1, sp
    301e:	2002      	movs	r0, #2
    3020:	f7ff ff7a 	bl	2f18 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    3024:	2800      	cmp	r0, #0
    3026:	d139      	bne.n	309c <boot_swap_type_multi+0x90>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3028:	2400      	movs	r4, #0
    302a:	e007      	b.n	303c <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    302c:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    302e:	2b04      	cmp	r3, #4
    3030:	d028      	beq.n	3084 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    3032:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3036:	4293      	cmp	r3, r2
    3038:	d024      	beq.n	3084 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    303a:	3401      	adds	r4, #1
    303c:	2c02      	cmp	r4, #2
    303e:	d828      	bhi.n	3092 <boot_swap_type_multi+0x86>
        table = boot_swap_tables + i;
    3040:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3044:	0053      	lsls	r3, r2, #1
    3046:	4a16      	ldr	r2, [pc, #88]	; (30a0 <boot_swap_type_multi+0x94>)
    3048:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    304a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    304e:	5cd0      	ldrb	r0, [r2, r3]
    3050:	f7ff fec6 	bl	2de0 <boot_magic_compatible_check>
    3054:	2800      	cmp	r0, #0
    3056:	d0f0      	beq.n	303a <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    3058:	f89d 1000 	ldrb.w	r1, [sp]
    305c:	7868      	ldrb	r0, [r5, #1]
    305e:	f7ff febf 	bl	2de0 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3062:	2800      	cmp	r0, #0
    3064:	d0e9      	beq.n	303a <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3066:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    3068:	2b04      	cmp	r3, #4
    306a:	d003      	beq.n	3074 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    306c:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3070:	4293      	cmp	r3, r2
    3072:	d1e2      	bne.n	303a <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3074:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3076:	2b04      	cmp	r3, #4
    3078:	d0d8      	beq.n	302c <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    307a:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    307e:	4293      	cmp	r3, r2
    3080:	d1db      	bne.n	303a <boot_swap_type_multi+0x2e>
    3082:	e7d3      	b.n	302c <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    3084:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    3086:	1e83      	subs	r3, r0, #2
    3088:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    308a:	2b02      	cmp	r3, #2
    308c:	d904      	bls.n	3098 <boot_swap_type_multi+0x8c>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    308e:	20ff      	movs	r0, #255	; 0xff
    3090:	e002      	b.n	3098 <boot_swap_type_multi+0x8c>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    3092:	2001      	movs	r0, #1
    3094:	e000      	b.n	3098 <boot_swap_type_multi+0x8c>
        return BOOT_SWAP_TYPE_PANIC;
    3096:	20ff      	movs	r0, #255	; 0xff
}
    3098:	b005      	add	sp, #20
    309a:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    309c:	20ff      	movs	r0, #255	; 0xff
    309e:	e7fb      	b.n	3098 <boot_swap_type_multi+0x8c>
    30a0:	00003abc 	.word	0x00003abc

000030a4 <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    30a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30a8:	b09d      	sub	sp, #116	; 0x74
    30aa:	4615      	mov	r5, r2
    30ac:	4699      	mov	r9, r3
    30ae:	9f24      	ldr	r7, [sp, #144]	; 0x90
    30b0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    30b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    30b6:	a801      	add	r0, sp, #4
    30b8:	f000 f95a 	bl	3370 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    30bc:	2100      	movs	r1, #0
    30be:	a801      	add	r0, sp, #4
    30c0:	f000 f95c 	bl	337c <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    30c4:	b114      	cbz	r4, 30cc <bootutil_img_hash+0x28>
    30c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    30c8:	2b00      	cmp	r3, #0
    30ca:	dc06      	bgt.n	30da <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    30cc:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    30ce:	68ee      	ldr	r6, [r5, #12]
    30d0:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    30d2:	896e      	ldrh	r6, [r5, #10]
    30d4:	441e      	add	r6, r3

    for (off = 0; off < size; off += blk_sz) {
    30d6:	2500      	movs	r5, #0
    30d8:	e013      	b.n	3102 <bootutil_img_hash+0x5e>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    30da:	461a      	mov	r2, r3
    30dc:	4621      	mov	r1, r4
    30de:	a801      	add	r0, sp, #4
    30e0:	f000 fa32 	bl	3548 <mbedtls_sha256_update_ret>
    30e4:	e7f2      	b.n	30cc <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    30e6:	4623      	mov	r3, r4
    30e8:	463a      	mov	r2, r7
    30ea:	4629      	mov	r1, r5
    30ec:	4648      	mov	r0, r9
    30ee:	f7fe fc6d 	bl	19cc <flash_area_read>
        if (rc) {
    30f2:	4603      	mov	r3, r0
    30f4:	b988      	cbnz	r0, 311a <bootutil_img_hash+0x76>
    30f6:	4622      	mov	r2, r4
    30f8:	4639      	mov	r1, r7
    30fa:	a801      	add	r0, sp, #4
    30fc:	f000 fa24 	bl	3548 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    3100:	4425      	add	r5, r4
    3102:	42b5      	cmp	r5, r6
    3104:	d204      	bcs.n	3110 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    3106:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    3108:	4544      	cmp	r4, r8
    310a:	d9ec      	bls.n	30e6 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    310c:	4644      	mov	r4, r8
    310e:	e7ea      	b.n	30e6 <bootutil_img_hash+0x42>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    3110:	9926      	ldr	r1, [sp, #152]	; 0x98
    3112:	a801      	add	r0, sp, #4
    3114:	f000 fa5b 	bl	35ce <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
    3118:	2300      	movs	r3, #0
}
    311a:	4618      	mov	r0, r3
    311c:	b01d      	add	sp, #116	; 0x74
    311e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003122 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    3122:	b5f0      	push	{r4, r5, r6, r7, lr}
    3124:	b09f      	sub	sp, #124	; 0x7c
    3126:	4617      	mov	r7, r2
    3128:	461e      	mov	r6, r3
    312a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    312c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    312e:	9404      	str	r4, [sp, #16]
    3130:	9c26      	ldr	r4, [sp, #152]	; 0x98
    3132:	9403      	str	r4, [sp, #12]
    3134:	ac06      	add	r4, sp, #24
    3136:	9402      	str	r4, [sp, #8]
    3138:	9c25      	ldr	r4, [sp, #148]	; 0x94
    313a:	9401      	str	r4, [sp, #4]
    313c:	9c24      	ldr	r4, [sp, #144]	; 0x90
    313e:	9400      	str	r4, [sp, #0]
    3140:	f7ff ffb0 	bl	30a4 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    3144:	4604      	mov	r4, r0
    3146:	2800      	cmp	r0, #0
    3148:	d140      	bne.n	31cc <bootutil_img_validate+0xaa>
        return rc;
    }

    if (out_hash) {
    314a:	b155      	cbz	r5, 3162 <bootutil_img_validate+0x40>
        memcpy(out_hash, hash, 32);
    314c:	ac06      	add	r4, sp, #24
    314e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3150:	6028      	str	r0, [r5, #0]
    3152:	6069      	str	r1, [r5, #4]
    3154:	60aa      	str	r2, [r5, #8]
    3156:	60eb      	str	r3, [r5, #12]
    3158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    315a:	6128      	str	r0, [r5, #16]
    315c:	6169      	str	r1, [r5, #20]
    315e:	61aa      	str	r2, [r5, #24]
    3160:	61eb      	str	r3, [r5, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    3162:	2300      	movs	r3, #0
    3164:	9300      	str	r3, [sp, #0]
    3166:	f64f 73ff 	movw	r3, #65535	; 0xffff
    316a:	4632      	mov	r2, r6
    316c:	4639      	mov	r1, r7
    316e:	a816      	add	r0, sp, #88	; 0x58
    3170:	f000 f834 	bl	31dc <bootutil_tlv_iter_begin>
    if (rc) {
    3174:	4604      	mov	r4, r0
    3176:	bb48      	cbnz	r0, 31cc <bootutil_img_validate+0xaa>
    int sha256_valid = 0;
    3178:	4605      	mov	r5, r0
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    317a:	ab1c      	add	r3, sp, #112	; 0x70
    317c:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    3180:	a91d      	add	r1, sp, #116	; 0x74
    3182:	a816      	add	r0, sp, #88	; 0x58
    3184:	f000 f88f 	bl	32a6 <bootutil_tlv_iter_next>
        if (rc < 0) {
    3188:	2800      	cmp	r0, #0
    318a:	db1d      	blt.n	31c8 <bootutil_img_validate+0xa6>
            return -1;
        } else if (rc > 0) {
    318c:	dc18      	bgt.n	31c0 <bootutil_img_validate+0x9e>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    318e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    3192:	2b10      	cmp	r3, #16
    3194:	d1f1      	bne.n	317a <bootutil_img_validate+0x58>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    3196:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    319a:	2b20      	cmp	r3, #32
    319c:	d119      	bne.n	31d2 <bootutil_img_validate+0xb0>
                return -1;
            }
            rc = flash_area_read(fap, off, buf, sizeof hash);
    319e:	aa0e      	add	r2, sp, #56	; 0x38
    31a0:	991d      	ldr	r1, [sp, #116]	; 0x74
    31a2:	4630      	mov	r0, r6
    31a4:	f7fe fc12 	bl	19cc <flash_area_read>
            if (rc) {
    31a8:	b9b0      	cbnz	r0, 31d8 <bootutil_img_validate+0xb6>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
    31aa:	2220      	movs	r2, #32
    31ac:	a90e      	add	r1, sp, #56	; 0x38
    31ae:	a806      	add	r0, sp, #24
    31b0:	f7fe fb24 	bl	17fc <memcmp>
                return -1;
            }

            sha256_valid = 1;
    31b4:	2501      	movs	r5, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    31b6:	2800      	cmp	r0, #0
    31b8:	d0df      	beq.n	317a <bootutil_img_validate+0x58>
                return -1;
    31ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    31be:	e005      	b.n	31cc <bootutil_img_validate+0xaa>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
    31c0:	b925      	cbnz	r5, 31cc <bootutil_img_validate+0xaa>
        return -1;
    31c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    31c6:	e001      	b.n	31cc <bootutil_img_validate+0xaa>
            return -1;
    31c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    31cc:	4620      	mov	r0, r4
    31ce:	b01f      	add	sp, #124	; 0x7c
    31d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    31d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    31d6:	e7f9      	b.n	31cc <bootutil_img_validate+0xaa>
                return rc;
    31d8:	4604      	mov	r4, r0
    31da:	e7f7      	b.n	31cc <bootutil_img_validate+0xaa>

000031dc <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    31dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    31e0:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    31e2:	2800      	cmp	r0, #0
    31e4:	d04a      	beq.n	327c <bootutil_tlv_iter_begin+0xa0>
    31e6:	4605      	mov	r5, r0
    31e8:	2900      	cmp	r1, #0
    31ea:	d04a      	beq.n	3282 <bootutil_tlv_iter_begin+0xa6>
    31ec:	2a00      	cmp	r2, #0
    31ee:	d04b      	beq.n	3288 <bootutil_tlv_iter_begin+0xac>
    31f0:	4699      	mov	r9, r3
    31f2:	4617      	mov	r7, r2
    31f4:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    31f6:	890e      	ldrh	r6, [r1, #8]
    31f8:	68cb      	ldr	r3, [r1, #12]
    31fa:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    31fc:	2304      	movs	r3, #4
    31fe:	eb0d 0203 	add.w	r2, sp, r3
    3202:	4631      	mov	r1, r6
    3204:	4638      	mov	r0, r7
    3206:	f7fe fbe1 	bl	19cc <flash_area_read>
    320a:	4680      	mov	r8, r0
    320c:	2800      	cmp	r0, #0
    320e:	d13e      	bne.n	328e <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    3210:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3214:	f646 1308 	movw	r3, #26888	; 0x6908
    3218:	429a      	cmp	r2, r3
    321a:	d01e      	beq.n	325a <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    321c:	8963      	ldrh	r3, [r4, #10]
    321e:	2b00      	cmp	r3, #0
    3220:	d13b      	bne.n	329a <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    3222:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3226:	f646 1307 	movw	r3, #26887	; 0x6907
    322a:	429a      	cmp	r2, r3
    322c:	d138      	bne.n	32a0 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    322e:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    3230:	606f      	str	r7, [r5, #4]
    it->type = type;
    3232:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    3236:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    323a:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    323c:	8963      	ldrh	r3, [r4, #10]
    323e:	4433      	add	r3, r6
    3240:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    3242:	8963      	ldrh	r3, [r4, #10]
    3244:	4433      	add	r3, r6
    3246:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    324a:	4413      	add	r3, r2
    324c:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    324e:	3604      	adds	r6, #4
    3250:	612e      	str	r6, [r5, #16]
    return 0;
}
    3252:	4640      	mov	r0, r8
    3254:	b003      	add	sp, #12
    3256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    325a:	8963      	ldrh	r3, [r4, #10]
    325c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3260:	428b      	cmp	r3, r1
    3262:	d117      	bne.n	3294 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    3264:	2304      	movs	r3, #4
    3266:	eb0d 0203 	add.w	r2, sp, r3
    326a:	4431      	add	r1, r6
    326c:	4638      	mov	r0, r7
    326e:	f7fe fbad 	bl	19cc <flash_area_read>
    3272:	2800      	cmp	r0, #0
    3274:	d0d5      	beq.n	3222 <bootutil_tlv_iter_begin+0x46>
            return -1;
    3276:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    327a:	e7ea      	b.n	3252 <bootutil_tlv_iter_begin+0x76>
        return -1;
    327c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3280:	e7e7      	b.n	3252 <bootutil_tlv_iter_begin+0x76>
    3282:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3286:	e7e4      	b.n	3252 <bootutil_tlv_iter_begin+0x76>
    3288:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    328c:	e7e1      	b.n	3252 <bootutil_tlv_iter_begin+0x76>
        return -1;
    328e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3292:	e7de      	b.n	3252 <bootutil_tlv_iter_begin+0x76>
            return -1;
    3294:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3298:	e7db      	b.n	3252 <bootutil_tlv_iter_begin+0x76>
        return -1;
    329a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    329e:	e7d8      	b.n	3252 <bootutil_tlv_iter_begin+0x76>
        return -1;
    32a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    32a4:	e7d5      	b.n	3252 <bootutil_tlv_iter_begin+0x76>

000032a6 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    32a6:	2800      	cmp	r0, #0
    32a8:	d04d      	beq.n	3346 <bootutil_tlv_iter_next+0xa0>
{
    32aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ac:	b083      	sub	sp, #12
    32ae:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    32b0:	6800      	ldr	r0, [r0, #0]
    32b2:	2800      	cmp	r0, #0
    32b4:	d04b      	beq.n	334e <bootutil_tlv_iter_next+0xa8>
    32b6:	461d      	mov	r5, r3
    32b8:	4616      	mov	r6, r2
    32ba:	460f      	mov	r7, r1
    32bc:	6863      	ldr	r3, [r4, #4]
    32be:	bb0b      	cbnz	r3, 3304 <bootutil_tlv_iter_next+0x5e>
        return -1;
    32c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32c4:	e03a      	b.n	333c <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    32c6:	2304      	movs	r3, #4
    32c8:	eb0d 0203 	add.w	r2, sp, r3
    32cc:	6921      	ldr	r1, [r4, #16]
    32ce:	6860      	ldr	r0, [r4, #4]
    32d0:	f7fe fb7c 	bl	19cc <flash_area_read>
        if (rc) {
    32d4:	4601      	mov	r1, r0
    32d6:	2800      	cmp	r0, #0
    32d8:	d13c      	bne.n	3354 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    32da:	7aa3      	ldrb	r3, [r4, #10]
    32dc:	b11b      	cbz	r3, 32e6 <bootutil_tlv_iter_next+0x40>
    32de:	6922      	ldr	r2, [r4, #16]
    32e0:	68e3      	ldr	r3, [r4, #12]
    32e2:	429a      	cmp	r2, r3
    32e4:	d239      	bcs.n	335a <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    32e6:	8923      	ldrh	r3, [r4, #8]
    32e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    32ec:	4293      	cmp	r3, r2
    32ee:	d017      	beq.n	3320 <bootutil_tlv_iter_next+0x7a>
    32f0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    32f4:	4293      	cmp	r3, r2
    32f6:	d013      	beq.n	3320 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    32f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    32fc:	6923      	ldr	r3, [r4, #16]
    32fe:	4418      	add	r0, r3
    3300:	3004      	adds	r0, #4
    3302:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    3304:	6920      	ldr	r0, [r4, #16]
    3306:	6963      	ldr	r3, [r4, #20]
    3308:	4298      	cmp	r0, r3
    330a:	d21a      	bcs.n	3342 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    330c:	6823      	ldr	r3, [r4, #0]
    330e:	895b      	ldrh	r3, [r3, #10]
    3310:	2b00      	cmp	r3, #0
    3312:	d0d8      	beq.n	32c6 <bootutil_tlv_iter_next+0x20>
    3314:	68e3      	ldr	r3, [r4, #12]
    3316:	4283      	cmp	r3, r0
    3318:	d1d5      	bne.n	32c6 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    331a:	3004      	adds	r0, #4
    331c:	6120      	str	r0, [r4, #16]
    331e:	e7d2      	b.n	32c6 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    3320:	b115      	cbz	r5, 3328 <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    3322:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    3326:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    3328:	6923      	ldr	r3, [r4, #16]
    332a:	3304      	adds	r3, #4
    332c:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    332e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3332:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    3334:	6922      	ldr	r2, [r4, #16]
    3336:	4413      	add	r3, r2
    3338:	3304      	adds	r3, #4
    333a:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    333c:	4608      	mov	r0, r1
    333e:	b003      	add	sp, #12
    3340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    3342:	2101      	movs	r1, #1
    3344:	e7fa      	b.n	333c <bootutil_tlv_iter_next+0x96>
        return -1;
    3346:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    334a:	4608      	mov	r0, r1
    334c:	4770      	bx	lr
        return -1;
    334e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3352:	e7f3      	b.n	333c <bootutil_tlv_iter_next+0x96>
            return -1;
    3354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3358:	e7f0      	b.n	333c <bootutil_tlv_iter_next+0x96>
            return 1;
    335a:	2101      	movs	r1, #1
    335c:	e7ee      	b.n	333c <bootutil_tlv_iter_next+0x96>

0000335e <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    335e:	b119      	cbz	r1, 3368 <flash_area_id_from_multi_image_slot+0xa>
    3360:	2901      	cmp	r1, #1
    3362:	d003      	beq.n	336c <flash_area_id_from_multi_image_slot+0xe>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    3364:	20ff      	movs	r0, #255	; 0xff
    3366:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    3368:	2001      	movs	r0, #1
    336a:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    336c:	2002      	movs	r0, #2
}
    336e:	4770      	bx	lr

00003370 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    3370:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    3372:	226c      	movs	r2, #108	; 0x6c
    3374:	2100      	movs	r1, #0
    3376:	f7fe fa72 	bl	185e <memset>
}
    337a:	bd08      	pop	{r3, pc}

0000337c <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
    337c:	2300      	movs	r3, #0
    337e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3380:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3382:	460b      	mov	r3, r1
    3384:	b1e1      	cbz	r1, 33c0 <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    3386:	4a19      	ldr	r2, [pc, #100]	; (33ec <mbedtls_sha256_starts_ret+0x70>)
    3388:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    338a:	4a19      	ldr	r2, [pc, #100]	; (33f0 <mbedtls_sha256_starts_ret+0x74>)
    338c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    338e:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3392:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3396:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    339a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    339c:	4a15      	ldr	r2, [pc, #84]	; (33f4 <mbedtls_sha256_starts_ret+0x78>)
    339e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    33a0:	4a15      	ldr	r2, [pc, #84]	; (33f8 <mbedtls_sha256_starts_ret+0x7c>)
    33a2:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    33a4:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    33a8:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    33ac:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    33b0:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    33b2:	4a12      	ldr	r2, [pc, #72]	; (33fc <mbedtls_sha256_starts_ret+0x80>)
    33b4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    33b6:	4a12      	ldr	r2, [pc, #72]	; (3400 <mbedtls_sha256_starts_ret+0x84>)
    33b8:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    33ba:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    33bc:	2000      	movs	r0, #0
    33be:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    33c0:	4a10      	ldr	r2, [pc, #64]	; (3404 <mbedtls_sha256_starts_ret+0x88>)
    33c2:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    33c4:	4a10      	ldr	r2, [pc, #64]	; (3408 <mbedtls_sha256_starts_ret+0x8c>)
    33c6:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    33c8:	4a10      	ldr	r2, [pc, #64]	; (340c <mbedtls_sha256_starts_ret+0x90>)
    33ca:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    33cc:	4a10      	ldr	r2, [pc, #64]	; (3410 <mbedtls_sha256_starts_ret+0x94>)
    33ce:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    33d0:	4a10      	ldr	r2, [pc, #64]	; (3414 <mbedtls_sha256_starts_ret+0x98>)
    33d2:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    33d4:	4a10      	ldr	r2, [pc, #64]	; (3418 <mbedtls_sha256_starts_ret+0x9c>)
    33d6:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    33d8:	4a10      	ldr	r2, [pc, #64]	; (341c <mbedtls_sha256_starts_ret+0xa0>)
    33da:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    33dc:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    33e0:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    33e4:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    33e8:	6242      	str	r2, [r0, #36]	; 0x24
    33ea:	e7e6      	b.n	33ba <mbedtls_sha256_starts_ret+0x3e>
    33ec:	c1059ed8 	.word	0xc1059ed8
    33f0:	367cd507 	.word	0x367cd507
    33f4:	f70e5939 	.word	0xf70e5939
    33f8:	ffc00b31 	.word	0xffc00b31
    33fc:	64f98fa7 	.word	0x64f98fa7
    3400:	befa4fa4 	.word	0xbefa4fa4
    3404:	6a09e667 	.word	0x6a09e667
    3408:	bb67ae85 	.word	0xbb67ae85
    340c:	3c6ef372 	.word	0x3c6ef372
    3410:	a54ff53a 	.word	0xa54ff53a
    3414:	510e527f 	.word	0x510e527f
    3418:	9b05688c 	.word	0x9b05688c
    341c:	1f83d9ab 	.word	0x1f83d9ab

00003420 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3424:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
    3426:	2300      	movs	r3, #0
    3428:	e005      	b.n	3436 <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
    342a:	1c9a      	adds	r2, r3, #2
    342c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3430:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    3434:	3301      	adds	r3, #1
    3436:	2b07      	cmp	r3, #7
    3438:	d9f7      	bls.n	342a <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    343a:	2200      	movs	r2, #0
    343c:	e04b      	b.n	34d6 <mbedtls_internal_sha256_process+0xb6>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
    343e:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    3442:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    3446:	7863      	ldrb	r3, [r4, #1]
    3448:	041b      	lsls	r3, r3, #16
    344a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    344e:	78a5      	ldrb	r5, [r4, #2]
    3450:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3454:	78e4      	ldrb	r4, [r4, #3]
    3456:	4323      	orrs	r3, r4
    3458:	ac08      	add	r4, sp, #32
    345a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    345e:	9b07      	ldr	r3, [sp, #28]
    3460:	9c04      	ldr	r4, [sp, #16]
    3462:	ea4f 25f4 	mov.w	r5, r4, ror #11
    3466:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    346a:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    346e:	442b      	add	r3, r5
    3470:	9e06      	ldr	r6, [sp, #24]
    3472:	9f05      	ldr	r7, [sp, #20]
    3474:	ea86 0507 	eor.w	r5, r6, r7
    3478:	4025      	ands	r5, r4
    347a:	4075      	eors	r5, r6
    347c:	442b      	add	r3, r5
    347e:	4d31      	ldr	r5, [pc, #196]	; (3544 <mbedtls_internal_sha256_process+0x124>)
    3480:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    3484:	442b      	add	r3, r5
    3486:	ad08      	add	r5, sp, #32
    3488:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    348c:	442b      	add	r3, r5
    348e:	f8dd e000 	ldr.w	lr, [sp]
    3492:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    3496:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    349a:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    349e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    34a2:	ea0e 0508 	and.w	r5, lr, r8
    34a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    34aa:	ea4e 0a08 	orr.w	sl, lr, r8
    34ae:	ea09 0a0a 	and.w	sl, r9, sl
    34b2:	ea45 050a 	orr.w	r5, r5, sl
    34b6:	44ac      	add	ip, r5
    34b8:	9d03      	ldr	r5, [sp, #12]
    34ba:	441d      	add	r5, r3
    34bc:	4463      	add	r3, ip

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    34be:	9607      	str	r6, [sp, #28]
    34c0:	9706      	str	r7, [sp, #24]
    34c2:	9405      	str	r4, [sp, #20]
    34c4:	9504      	str	r5, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    34c6:	f8cd 900c 	str.w	r9, [sp, #12]
    34ca:	f8cd 8008 	str.w	r8, [sp, #8]
    34ce:	f8cd e004 	str.w	lr, [sp, #4]
    34d2:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
    34d4:	3201      	adds	r2, #1
    34d6:	2a3f      	cmp	r2, #63	; 0x3f
    34d8:	d822      	bhi.n	3520 <mbedtls_internal_sha256_process+0x100>
        if( i < 16 )
    34da:	2a0f      	cmp	r2, #15
    34dc:	d9af      	bls.n	343e <mbedtls_internal_sha256_process+0x1e>
            R( i );
    34de:	1e93      	subs	r3, r2, #2
    34e0:	ac08      	add	r4, sp, #32
    34e2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    34e6:	ea4f 43f5 	mov.w	r3, r5, ror #19
    34ea:	ea83 4375 	eor.w	r3, r3, r5, ror #17
    34ee:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
    34f2:	1fd5      	subs	r5, r2, #7
    34f4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    34f8:	442b      	add	r3, r5
    34fa:	f1a2 050f 	sub.w	r5, r2, #15
    34fe:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
    3502:	ea4f 45b6 	mov.w	r5, r6, ror #18
    3506:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
    350a:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
    350e:	442b      	add	r3, r5
    3510:	f1a2 0510 	sub.w	r5, r2, #16
    3514:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    3518:	442b      	add	r3, r5
    351a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    351e:	e79e      	b.n	345e <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3520:	2300      	movs	r3, #0
    3522:	e008      	b.n	3536 <mbedtls_internal_sha256_process+0x116>
        ctx->state[i] += A[i];
    3524:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
    3528:	1c99      	adds	r1, r3, #2
    352a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    352e:	4422      	add	r2, r4
    3530:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    3534:	3301      	adds	r3, #1
    3536:	2b07      	cmp	r3, #7
    3538:	d9f4      	bls.n	3524 <mbedtls_internal_sha256_process+0x104>

    return( 0 );
}
    353a:	2000      	movs	r0, #0
    353c:	b048      	add	sp, #288	; 0x120
    353e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3542:	bf00      	nop
    3544:	00003ad0 	.word	0x00003ad0

00003548 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    3548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    354c:	b3da      	cbz	r2, 35c6 <mbedtls_sha256_update_ret+0x7e>
    354e:	4606      	mov	r6, r0
    3550:	460d      	mov	r5, r1
    3552:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    3554:	6803      	ldr	r3, [r0, #0]
    3556:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    355a:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    355e:	4413      	add	r3, r2
    3560:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    3562:	4293      	cmp	r3, r2
    3564:	d202      	bcs.n	356c <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    3566:	6843      	ldr	r3, [r0, #4]
    3568:	3301      	adds	r3, #1
    356a:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    356c:	b10f      	cbz	r7, 3572 <mbedtls_sha256_update_ret+0x2a>
    356e:	4544      	cmp	r4, r8
    3570:	d20a      	bcs.n	3588 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    3572:	2c3f      	cmp	r4, #63	; 0x3f
    3574:	d91b      	bls.n	35ae <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    3576:	4629      	mov	r1, r5
    3578:	4630      	mov	r0, r6
    357a:	f7ff ff51 	bl	3420 <mbedtls_internal_sha256_process>
    357e:	4603      	mov	r3, r0
    3580:	bb10      	cbnz	r0, 35c8 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    3582:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    3584:	3c40      	subs	r4, #64	; 0x40
    3586:	e7f4      	b.n	3572 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    3588:	f106 0928 	add.w	r9, r6, #40	; 0x28
    358c:	4642      	mov	r2, r8
    358e:	4629      	mov	r1, r5
    3590:	eb09 0007 	add.w	r0, r9, r7
    3594:	f7fe f956 	bl	1844 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3598:	4649      	mov	r1, r9
    359a:	4630      	mov	r0, r6
    359c:	f7ff ff40 	bl	3420 <mbedtls_internal_sha256_process>
    35a0:	4603      	mov	r3, r0
    35a2:	b988      	cbnz	r0, 35c8 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    35a4:	4445      	add	r5, r8
        ilen  -= fill;
    35a6:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    35aa:	2700      	movs	r7, #0
    35ac:	e7e1      	b.n	3572 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    35ae:	b90c      	cbnz	r4, 35b4 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    35b0:	2300      	movs	r3, #0
    35b2:	e009      	b.n	35c8 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    35b4:	f106 0028 	add.w	r0, r6, #40	; 0x28
    35b8:	4622      	mov	r2, r4
    35ba:	4629      	mov	r1, r5
    35bc:	4438      	add	r0, r7
    35be:	f7fe f941 	bl	1844 <memcpy>
    return( 0 );
    35c2:	2300      	movs	r3, #0
    35c4:	e000      	b.n	35c8 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    35c6:	2300      	movs	r3, #0
}
    35c8:	4618      	mov	r0, r3
    35ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000035ce <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    35ce:	b570      	push	{r4, r5, r6, lr}
    35d0:	4604      	mov	r4, r0
    35d2:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    35d4:	6803      	ldr	r3, [r0, #0]
    35d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    35da:	1c58      	adds	r0, r3, #1
    35dc:	4423      	add	r3, r4
    35de:	2280      	movs	r2, #128	; 0x80
    35e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    35e4:	2838      	cmp	r0, #56	; 0x38
    35e6:	d87b      	bhi.n	36e0 <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    35e8:	f104 0328 	add.w	r3, r4, #40	; 0x28
    35ec:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    35f0:	2100      	movs	r1, #0
    35f2:	4418      	add	r0, r3
    35f4:	f7fe f933 	bl	185e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    35f8:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    35fa:	6863      	ldr	r3, [r4, #4]
    35fc:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    35fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    3602:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    3604:	0e19      	lsrs	r1, r3, #24
    3606:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    360a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    360e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    3612:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3616:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    361a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    361e:	0e13      	lsrs	r3, r2, #24
    3620:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3624:	f3c2 4307 	ubfx	r3, r2, #16, #8
    3628:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    362c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    3630:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    3634:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3638:	f104 0128 	add.w	r1, r4, #40	; 0x28
    363c:	4620      	mov	r0, r4
    363e:	f7ff feef 	bl	3420 <mbedtls_internal_sha256_process>
    3642:	4603      	mov	r3, r0
    3644:	2800      	cmp	r0, #0
    3646:	d159      	bne.n	36fc <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    3648:	7ae2      	ldrb	r2, [r4, #11]
    364a:	702a      	strb	r2, [r5, #0]
    364c:	7aa2      	ldrb	r2, [r4, #10]
    364e:	706a      	strb	r2, [r5, #1]
    3650:	7a62      	ldrb	r2, [r4, #9]
    3652:	70aa      	strb	r2, [r5, #2]
    3654:	7a22      	ldrb	r2, [r4, #8]
    3656:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    3658:	7be2      	ldrb	r2, [r4, #15]
    365a:	712a      	strb	r2, [r5, #4]
    365c:	7ba2      	ldrb	r2, [r4, #14]
    365e:	716a      	strb	r2, [r5, #5]
    3660:	7b62      	ldrb	r2, [r4, #13]
    3662:	71aa      	strb	r2, [r5, #6]
    3664:	7b22      	ldrb	r2, [r4, #12]
    3666:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    3668:	7ce2      	ldrb	r2, [r4, #19]
    366a:	722a      	strb	r2, [r5, #8]
    366c:	7ca2      	ldrb	r2, [r4, #18]
    366e:	726a      	strb	r2, [r5, #9]
    3670:	7c62      	ldrb	r2, [r4, #17]
    3672:	72aa      	strb	r2, [r5, #10]
    3674:	7c22      	ldrb	r2, [r4, #16]
    3676:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    3678:	7de2      	ldrb	r2, [r4, #23]
    367a:	732a      	strb	r2, [r5, #12]
    367c:	7da2      	ldrb	r2, [r4, #22]
    367e:	736a      	strb	r2, [r5, #13]
    3680:	7d62      	ldrb	r2, [r4, #21]
    3682:	73aa      	strb	r2, [r5, #14]
    3684:	7d22      	ldrb	r2, [r4, #20]
    3686:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    3688:	7ee2      	ldrb	r2, [r4, #27]
    368a:	742a      	strb	r2, [r5, #16]
    368c:	7ea2      	ldrb	r2, [r4, #26]
    368e:	746a      	strb	r2, [r5, #17]
    3690:	7e62      	ldrb	r2, [r4, #25]
    3692:	74aa      	strb	r2, [r5, #18]
    3694:	7e22      	ldrb	r2, [r4, #24]
    3696:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    3698:	7fe2      	ldrb	r2, [r4, #31]
    369a:	752a      	strb	r2, [r5, #20]
    369c:	7fa2      	ldrb	r2, [r4, #30]
    369e:	756a      	strb	r2, [r5, #21]
    36a0:	7f62      	ldrb	r2, [r4, #29]
    36a2:	75aa      	strb	r2, [r5, #22]
    36a4:	7f22      	ldrb	r2, [r4, #28]
    36a6:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    36a8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    36ac:	762a      	strb	r2, [r5, #24]
    36ae:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    36b2:	766a      	strb	r2, [r5, #25]
    36b4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    36b8:	76aa      	strb	r2, [r5, #26]
    36ba:	f894 2020 	ldrb.w	r2, [r4, #32]
    36be:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    36c0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    36c2:	b9da      	cbnz	r2, 36fc <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    36c4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    36c8:	772b      	strb	r3, [r5, #28]
    36ca:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    36ce:	776b      	strb	r3, [r5, #29]
    36d0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    36d4:	77ab      	strb	r3, [r5, #30]
    36d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    36da:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    36dc:	4613      	mov	r3, r2
    36de:	e00d      	b.n	36fc <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    36e0:	f104 0628 	add.w	r6, r4, #40	; 0x28
    36e4:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    36e8:	2100      	movs	r1, #0
    36ea:	4430      	add	r0, r6
    36ec:	f7fe f8b7 	bl	185e <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    36f0:	4631      	mov	r1, r6
    36f2:	4620      	mov	r0, r4
    36f4:	f7ff fe94 	bl	3420 <mbedtls_internal_sha256_process>
    36f8:	4603      	mov	r3, r0
    36fa:	b108      	cbz	r0, 3700 <mbedtls_sha256_finish_ret+0x132>
}
    36fc:	4618      	mov	r0, r3
    36fe:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    3700:	2238      	movs	r2, #56	; 0x38
    3702:	2100      	movs	r1, #0
    3704:	4630      	mov	r0, r6
    3706:	f7fe f8aa 	bl	185e <memset>
    370a:	e775      	b.n	35f8 <mbedtls_sha256_finish_ret+0x2a>

0000370c <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    370c:	6843      	ldr	r3, [r0, #4]
    370e:	428b      	cmp	r3, r1
    3710:	d808      	bhi.n	3724 <hal_flash_check_addr+0x18>
    3712:	6882      	ldr	r2, [r0, #8]
    3714:	4413      	add	r3, r2
    3716:	428b      	cmp	r3, r1
    3718:	d301      	bcc.n	371e <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
    371a:	2000      	movs	r0, #0
}
    371c:	4770      	bx	lr
        return SYS_EINVAL;
    371e:	f06f 0001 	mvn.w	r0, #1
    3722:	4770      	bx	lr
    3724:	f06f 0001 	mvn.w	r0, #1
    3728:	4770      	bx	lr

0000372a <hal_flash_init>:
{
    372a:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    372c:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
    372e:	462c      	mov	r4, r5
    3730:	e001      	b.n	3736 <hal_flash_init+0xc>
    3732:	3401      	adds	r4, #1
    3734:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    3736:	4620      	mov	r0, r4
    3738:	f7fc ff82 	bl	640 <hal_bsp_flash_dev>
        if (!hf) {
    373c:	b138      	cbz	r0, 374e <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
    373e:	6802      	ldr	r2, [r0, #0]
    3740:	6952      	ldr	r2, [r2, #20]
    3742:	4790      	blx	r2
    3744:	2800      	cmp	r0, #0
    3746:	d0f4      	beq.n	3732 <hal_flash_init+0x8>
            rc = SYS_EIO;
    3748:	f06f 0504 	mvn.w	r5, #4
    374c:	e7f1      	b.n	3732 <hal_flash_init+0x8>
}
    374e:	4628      	mov	r0, r5
    3750:	bd38      	pop	{r3, r4, r5, pc}

00003752 <hal_flash_align>:
{
    3752:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3754:	f7fc ff74 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    3758:	b108      	cbz	r0, 375e <hal_flash_align+0xc>
    return hf->hf_align;
    375a:	7c00      	ldrb	r0, [r0, #16]
}
    375c:	bd08      	pop	{r3, pc}
        return 1;
    375e:	2001      	movs	r0, #1
    3760:	e7fc      	b.n	375c <hal_flash_align+0xa>

00003762 <hal_flash_erased_val>:
{
    3762:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3764:	f7fc ff6c 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    3768:	b108      	cbz	r0, 376e <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    376a:	7d00      	ldrb	r0, [r0, #20]
}
    376c:	bd08      	pop	{r3, pc}
        return 1;
    376e:	2001      	movs	r0, #1
    3770:	e7fc      	b.n	376c <hal_flash_erased_val+0xa>

00003772 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    3772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3776:	460d      	mov	r5, r1
    3778:	4690      	mov	r8, r2
    377a:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    377c:	f7fc ff60 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    3780:	b1c0      	cbz	r0, 37b4 <hal_flash_read+0x42>
    3782:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3784:	4629      	mov	r1, r5
    3786:	f7ff ffc1 	bl	370c <hal_flash_check_addr>
    378a:	b9b0      	cbnz	r0, 37ba <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
    378c:	19a9      	adds	r1, r5, r6
    378e:	4620      	mov	r0, r4
    3790:	f7ff ffbc 	bl	370c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3794:	b9a0      	cbnz	r0, 37c0 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    3796:	6823      	ldr	r3, [r4, #0]
    3798:	681f      	ldr	r7, [r3, #0]
    379a:	4633      	mov	r3, r6
    379c:	4642      	mov	r2, r8
    379e:	4629      	mov	r1, r5
    37a0:	4620      	mov	r0, r4
    37a2:	47b8      	blx	r7
    if (rc != 0) {
    37a4:	4603      	mov	r3, r0
    37a6:	b910      	cbnz	r0, 37ae <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
    37a8:	4618      	mov	r0, r3
    37aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    37ae:	f06f 0304 	mvn.w	r3, #4
    37b2:	e7f9      	b.n	37a8 <hal_flash_read+0x36>
        return SYS_EINVAL;
    37b4:	f06f 0301 	mvn.w	r3, #1
    37b8:	e7f6      	b.n	37a8 <hal_flash_read+0x36>
        return SYS_EINVAL;
    37ba:	f06f 0301 	mvn.w	r3, #1
    37be:	e7f3      	b.n	37a8 <hal_flash_read+0x36>
    37c0:	f06f 0301 	mvn.w	r3, #1
    37c4:	e7f0      	b.n	37a8 <hal_flash_read+0x36>
	...

000037c8 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    37c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37cc:	4605      	mov	r5, r0
    37ce:	460e      	mov	r6, r1
    37d0:	4690      	mov	r8, r2
    37d2:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    37d4:	f7fc ff34 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    37d8:	b310      	cbz	r0, 3820 <hal_flash_write+0x58>
    37da:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    37dc:	4631      	mov	r1, r6
    37de:	f7ff ff95 	bl	370c <hal_flash_check_addr>
    37e2:	bb00      	cbnz	r0, 3826 <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    37e4:	19f1      	adds	r1, r6, r7
    37e6:	4620      	mov	r0, r4
    37e8:	f7ff ff90 	bl	370c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    37ec:	b9f0      	cbnz	r0, 382c <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    37ee:	08eb      	lsrs	r3, r5, #3
    37f0:	4a11      	ldr	r2, [pc, #68]	; (3838 <hal_flash_write+0x70>)
    37f2:	5cd3      	ldrb	r3, [r2, r3]
    37f4:	f005 0507 	and.w	r5, r5, #7
    37f8:	fa43 f505 	asr.w	r5, r3, r5
    37fc:	f015 0f01 	tst.w	r5, #1
    3800:	d117      	bne.n	3832 <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    3802:	6823      	ldr	r3, [r4, #0]
    3804:	685d      	ldr	r5, [r3, #4]
    3806:	463b      	mov	r3, r7
    3808:	4642      	mov	r2, r8
    380a:	4631      	mov	r1, r6
    380c:	4620      	mov	r0, r4
    380e:	47a8      	blx	r5
    if (rc != 0) {
    3810:	4603      	mov	r3, r0
    3812:	b910      	cbnz	r0, 381a <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    3814:	4618      	mov	r0, r3
    3816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    381a:	f06f 0304 	mvn.w	r3, #4
    381e:	e7f9      	b.n	3814 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    3820:	f06f 0301 	mvn.w	r3, #1
    3824:	e7f6      	b.n	3814 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    3826:	f06f 0301 	mvn.w	r3, #1
    382a:	e7f3      	b.n	3814 <hal_flash_write+0x4c>
    382c:	f06f 0301 	mvn.w	r3, #1
    3830:	e7f0      	b.n	3814 <hal_flash_write+0x4c>
        return SYS_EACCES;
    3832:	f06f 0306 	mvn.w	r3, #6
    3836:	e7ed      	b.n	3814 <hal_flash_write+0x4c>
    3838:	2000194c 	.word	0x2000194c

0000383c <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    383c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3840:	b083      	sub	sp, #12
    3842:	4605      	mov	r5, r0
    3844:	460e      	mov	r6, r1
    3846:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3848:	f7fc fefa 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    384c:	2800      	cmp	r0, #0
    384e:	d04b      	beq.n	38e8 <hal_flash_erase+0xac>
    3850:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3852:	4631      	mov	r1, r6
    3854:	f7ff ff5a 	bl	370c <hal_flash_check_addr>
    3858:	2800      	cmp	r0, #0
    385a:	d148      	bne.n	38ee <hal_flash_erase+0xb2>
      hal_flash_check_addr(hf, address + num_bytes)) {
    385c:	eb06 0708 	add.w	r7, r6, r8
    3860:	4639      	mov	r1, r7
    3862:	4620      	mov	r0, r4
    3864:	f7ff ff52 	bl	370c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3868:	2800      	cmp	r0, #0
    386a:	d143      	bne.n	38f4 <hal_flash_erase+0xb8>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    386c:	08eb      	lsrs	r3, r5, #3
    386e:	4a26      	ldr	r2, [pc, #152]	; (3908 <hal_flash_erase+0xcc>)
    3870:	5cd3      	ldrb	r3, [r2, r3]
    3872:	f005 0507 	and.w	r5, r5, #7
    3876:	fa43 f505 	asr.w	r5, r3, r5
    387a:	f015 0501 	ands.w	r5, r5, #1
    387e:	d13c      	bne.n	38fa <hal_flash_erase+0xbe>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    3880:	42b7      	cmp	r7, r6
    3882:	d93d      	bls.n	3900 <hal_flash_erase+0xc4>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    3884:	6823      	ldr	r3, [r4, #0]
    3886:	699b      	ldr	r3, [r3, #24]
    3888:	b363      	cbz	r3, 38e4 <hal_flash_erase+0xa8>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    388a:	4642      	mov	r2, r8
    388c:	4631      	mov	r1, r6
    388e:	4620      	mov	r0, r4
    3890:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    3892:	4628      	mov	r0, r5
    3894:	b003      	add	sp, #12
    3896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
    389a:	2300      	movs	r3, #0
    389c:	461a      	mov	r2, r3
    389e:	4619      	mov	r1, r3
    38a0:	4618      	mov	r0, r3
    38a2:	f7fd fefb 	bl	169c <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    38a6:	f108 0801 	add.w	r8, r8, #1
    38aa:	68e3      	ldr	r3, [r4, #12]
    38ac:	4543      	cmp	r3, r8
    38ae:	ddf0      	ble.n	3892 <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    38b0:	6823      	ldr	r3, [r4, #0]
    38b2:	f8d3 900c 	ldr.w	r9, [r3, #12]
    38b6:	466b      	mov	r3, sp
    38b8:	aa01      	add	r2, sp, #4
    38ba:	4641      	mov	r1, r8
    38bc:	4620      	mov	r0, r4
    38be:	47c8      	blx	r9
            assert(rc == 0);
    38c0:	2800      	cmp	r0, #0
    38c2:	d1ea      	bne.n	389a <hal_flash_erase+0x5e>
            end_area = start + size;
    38c4:	9901      	ldr	r1, [sp, #4]
    38c6:	9b00      	ldr	r3, [sp, #0]
    38c8:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    38ca:	429e      	cmp	r6, r3
    38cc:	d2eb      	bcs.n	38a6 <hal_flash_erase+0x6a>
    38ce:	428f      	cmp	r7, r1
    38d0:	d9e9      	bls.n	38a6 <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    38d2:	6823      	ldr	r3, [r4, #0]
    38d4:	689b      	ldr	r3, [r3, #8]
    38d6:	4620      	mov	r0, r4
    38d8:	4798      	blx	r3
    38da:	2800      	cmp	r0, #0
    38dc:	d0e3      	beq.n	38a6 <hal_flash_erase+0x6a>
                    return SYS_EIO;
    38de:	f06f 0504 	mvn.w	r5, #4
    38e2:	e7d6      	b.n	3892 <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    38e4:	46a8      	mov	r8, r5
    38e6:	e7e0      	b.n	38aa <hal_flash_erase+0x6e>
        return SYS_EINVAL;
    38e8:	f06f 0501 	mvn.w	r5, #1
    38ec:	e7d1      	b.n	3892 <hal_flash_erase+0x56>
        return SYS_EINVAL;
    38ee:	f06f 0501 	mvn.w	r5, #1
    38f2:	e7ce      	b.n	3892 <hal_flash_erase+0x56>
    38f4:	f06f 0501 	mvn.w	r5, #1
    38f8:	e7cb      	b.n	3892 <hal_flash_erase+0x56>
        return SYS_EACCES;
    38fa:	f06f 0506 	mvn.w	r5, #6
    38fe:	e7c8      	b.n	3892 <hal_flash_erase+0x56>
        return SYS_EINVAL;
    3900:	f06f 0501 	mvn.w	r5, #1
    3904:	e7c5      	b.n	3892 <hal_flash_erase+0x56>
    3906:	bf00      	nop
    3908:	2000194c 	.word	0x2000194c

0000390c <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    390e:	4604      	mov	r4, r0
    3910:	4616      	mov	r6, r2
    3912:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    3914:	6807      	ldr	r7, [r0, #0]
    3916:	683f      	ldr	r7, [r7, #0]
    3918:	47b8      	blx	r7
    if (rc != 0) {
    391a:	b960      	cbnz	r0, 3936 <hal_flash_is_erased+0x2a>
    391c:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    391e:	2300      	movs	r3, #0
    3920:	42ab      	cmp	r3, r5
    3922:	d205      	bcs.n	3930 <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
    3924:	5cf1      	ldrb	r1, [r6, r3]
    3926:	7d22      	ldrb	r2, [r4, #20]
    3928:	4291      	cmp	r1, r2
    392a:	d102      	bne.n	3932 <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
    392c:	3301      	adds	r3, #1
    392e:	e7f7      	b.n	3920 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
    3930:	2701      	movs	r7, #1
}
    3932:	4638      	mov	r0, r7
    3934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    3936:	f06f 0704 	mvn.w	r7, #4
    393a:	e7fa      	b.n	3932 <hal_flash_is_erased+0x26>

0000393c <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3940:	460d      	mov	r5, r1
    3942:	4690      	mov	r8, r2
    3944:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3946:	f7fc fe7b 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    394a:	b1f8      	cbz	r0, 398c <hal_flash_isempty+0x50>
    394c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    394e:	4629      	mov	r1, r5
    3950:	f7ff fedc 	bl	370c <hal_flash_check_addr>
    3954:	b9e8      	cbnz	r0, 3992 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3956:	19a9      	adds	r1, r5, r6
    3958:	4620      	mov	r0, r4
    395a:	f7ff fed7 	bl	370c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    395e:	b9d8      	cbnz	r0, 3998 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    3960:	6823      	ldr	r3, [r4, #0]
    3962:	691f      	ldr	r7, [r3, #16]
    3964:	b15f      	cbz	r7, 397e <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    3966:	4633      	mov	r3, r6
    3968:	4642      	mov	r2, r8
    396a:	4629      	mov	r1, r5
    396c:	4620      	mov	r0, r4
    396e:	47b8      	blx	r7
        if (rc < 0) {
    3970:	2800      	cmp	r0, #0
    3972:	db01      	blt.n	3978 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    3974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
    3978:	f06f 0004 	mvn.w	r0, #4
    397c:	e7fa      	b.n	3974 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    397e:	4633      	mov	r3, r6
    3980:	4642      	mov	r2, r8
    3982:	4629      	mov	r1, r5
    3984:	4620      	mov	r0, r4
    3986:	f7ff ffc1 	bl	390c <hal_flash_is_erased>
    398a:	e7f3      	b.n	3974 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    398c:	f06f 0001 	mvn.w	r0, #1
    3990:	e7f0      	b.n	3974 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    3992:	f06f 0001 	mvn.w	r0, #1
    3996:	e7ed      	b.n	3974 <hal_flash_isempty+0x38>
    3998:	f06f 0001 	mvn.w	r0, #1
    399c:	e7ea      	b.n	3974 <hal_flash_isempty+0x38>
	...

000039a0 <flash_devs>:
    39a0:	39f4 0000 00e8 2000                         .9..... 

000039a8 <spiflash_characteristics>:
    39a8:	7530 0000 1a80 0006 d4c0 0001 3500 000c     0u...........5..
    39b8:	49f0 0002 4240 000f c6c0 002d 9680 0098     .I..@B....-.....
    39c8:	02bc 0000 0bb8 0000 0014 0000 0032 0000     ............2...

000039d8 <spiflash_flash_funcs>:
    39d8:	07df 0000 0869 0000 09e3 0000 0695 0000     ....i...........
    39e8:	0000 0000 0b21 0000 0ab5 0000               ....!.......

000039f4 <nrf52k_flash_dev>:
    39f4:	3a0c 0000 0000 0000 0000 0008 0080 0000     .:..............
    3a04:	0001 0000 00ff 0000                         ........

00003a0c <nrf52k_flash_funcs>:
    3a0c:	0cd5 0000 0c05 0000 0b8d 0000 0be5 0000     ................
    3a1c:	0000 0000 0be1 0000 0000 0000               ............

00003a28 <nrf52_hal_spis>:
    3a28:	1950 2000 0000 0000 0000 0000               P.. ........

00003a34 <os_bsp_spi0m_cfg>:
    3a34:	0302 0004                                   ....

00003a38 <nrf52_hal_timers>:
    3a38:	1978 2000 0000 0000 0000 0000 0000 0000     x.. ............
	...

00003a50 <sysflash_map_dflt>:
	...
    3a58:	4000 0000 0001 0000 8000 0000 4000 0007     .@...........@..
    3a68:	0102 0000 0000 0000 4000 0007 0003 0000     .........@......
    3a78:	c000 0007 1000 0000 0010 0000 4000 0000     .............@..
    3a88:	4000 0000 0111 0000 4000 0007 c000 0038     .@.......@....8.

00003a98 <boot_status_tables>:
    3a98:	0501 0001 0501 0203 0104 0104 0403 0203     ................
    3aa8:	0103 0000                                   ....

00003aac <boot_img_magic>:
    3aac:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

00003abc <boot_swap_tables>:
    3abc:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    3acc:	0401 0000                                   ....

00003ad0 <K>:
    3ad0:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    3ae0:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    3af0:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    3b00:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    3b10:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    3b20:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    3b30:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    3b40:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    3b50:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    3b60:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    3b70:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    3b80:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    3b90:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    3ba0:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    3bb0:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    3bc0:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  15336	    108	   6460	  21904	   5590	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
