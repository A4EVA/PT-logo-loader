
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x00013e98 vaddr 0x00003e98 paddr 0x00003e98 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00003eb0 memsz 0x00003eb0 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x00003eb0 align 2**16
         filesz 0x00000084 memsz 0x000018f8 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00003e98  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00003e98  00003e98  0002015c  2**0  CONTENTS
  2 .ARM.exidx         00000018  00003e98  00003e98  00013e98  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  0002015c  2**0  CONTENTS
  5 .data              00000084  200000d8  00003eb0  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  2000015c  2000015c  0002015c  2**0  CONTENTS
  7 .bss               00001874  2000015c  00003f34  0002015c  2**2  ALLOC
  8 .stack_dummy       000001b0  200019d0  200019d0  00020160  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  00020310  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  0002033f  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203be  2**0  CONTENTS, READONLY
 12 .debug_line        0000deb9  00000000  00000000  000203c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        00023170  00000000  00000000  0002e27b  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      00006dc0  00000000  00000000  000513eb  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00000f68  00000000  00000000  000581b0  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00005841  00000000  00000000  00059118  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000c086  00000000  00000000  0005e959  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      00001360  00000000  00000000  0006a9df  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       00002598  00000000  00000000  0006bd40  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00003e98 l    d  .ARM.extab	00000000 .ARM.extab
00003e98 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
2000015c l    d  .bssnz	00000000 .bssnz
2000015c l    d  .bss	00000000 .bss
200019d0 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001e0 l     F .text	00000034 errata_16
000001e0 l     F .text	00000034 errata_57
000001e0 l     F .text	00000034 errata_37
000001e0 l     F .text	00000034 errata_32
00000214 l     F .text	00000040 errata_31
00000214 l     F .text	00000040 errata_108
00000214 l     F .text	00000040 errata_36
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00003afc l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
000004d4 l     F .text	0000000c hal_spiflash_sector_info
000004e0 l     F .text	00000006 spiflash_cs_activate.isra.4
000004e6 l     F .text	00000006 spiflash_cs_deactivate.isra.5
000004ec l     F .text	00000028 spiflash_release_power_down_generic
000005a0 l     F .text	00000040 spiflash_wait_ready_till.part.6
000005f8 l     F .text	00000060 hal_spiflash_read
00000674 l     F .text	000000c0 hal_spiflash_write
00000734 l     F .text	0000007a spiflash_execute_erase
000007ae l     F .text	00000026 spiflash_erase_cmd
000007de l     F .text	00000004 hal_spiflash_erase_sector
0000088c l     F .text	00000004 hal_spiflash_erase
000008f0 l     F .text	0000003a hal_spiflash_init
00003b34 l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
00003b04 l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000930 l     F .text	00000024 nrf52k_flash_wait_ready
00000954 l     F .text	0000004c nrf52k_flash_erase_sector
000009a0 l     F .text	00000004 nrf52k_flash_init
000009a4 l     F .text	000000c8 nrf52k_flash_write
00000a6c l     F .text	0000000e nrf52k_flash_read
00000a7a l     F .text	00000020 nrf52k_flash_sector_info
00003b68 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
00003b84 l     O .text	00000004 CSWTCH.24
00003b88 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000ef0 l     F .text	00000024 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00003b94 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
00000fbc l     F .text	00000020 __NVIC_SetPendingIRQ
00000fdc l     F .text	00000038 hal_timer_read_bsptimer
00001014 l     F .text	0000007e nrf_timer_set_ocmp
00003b98 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mempool.c
00000000 l    df *ABS*	00000000 os_msys.c
00001440 l     F .text	00000024 os_msys_find_pool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
000014ec l       .text	00000000 SVC_User
0000150a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 os_mbuf.c
00001578 l     F .text	00000016 _os_mbuf_trailingspace
00000000 l    df *ABS*	00000000 memcmp.c
000016d2 l       .text	00000000 test1
000016c6 l       .text	00000000 loop1
000016d8 l       .text	00000000 res1
000016f4 l       .text	00000000 test2
000016fc l       .text	00000000 done
000016e8 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001708 l       .text	00000000 test1
00001704 l       .text	00000000 loop1
00001716 l       .text	00000000 test2
00001712 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 console.c
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
20000160 l     O .bss	00000004 semihost_mbuf
20000148 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
20000164 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 flash_map.c
20000168 l     O .bss	00000078 mfg_areas.7780
00000000 l    df *ABS*	00000000 mfg.c
00001a8c l     F .text	000000a4 mfg_read_next_mmr
00001b30 l     F .text	00000064 mfg_read_tlv_body
200001e0 l     O .bss	00000001 mfg_initialized
200001e4 l     O .bss	00000018 mfg_mmrs
200001fc l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 sysinit.c
00001c90 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
00001c96 l     F .text	0000008a boot_read_image_size
00001d20 l     F .text	00000030 boot_read_image_headers
00001d50 l     F .text	000000b0 boot_validate_slot.isra.3.constprop.5
00001e00 l     F .text	00000066 boot_read_sectors
00001e94 l     F .text	0000007c boot_swap_image
20000200 l     O .bss	0000006c boot_data
2000026c l     O .bss	00000400 buf.4971
2000066c l     O .bss	00000600 primary_slot_sectors.5011
20000c6c l     O .bss	00000600 scratch_sectors.5013
2000126c l     O .bss	00000600 secondary_slot_sectors.5012
2000186c l     O .bss	00000100 tmpbuf.4904
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00003d60 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
0000281c l     F .text	0000005c boot_write_trailer
00003d80 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00003d94 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
00003100 l     F .text	0000001c hal_flash_check_addr
2000196c l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 tinyprintf.c
00003342 l     F .text	000000b2 ui2a
000033f4 l     F .text	00000022 putf
00003418 l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 mynewt.c
000037d4 l     F .text	00000004 stdin_read
000037d8 l     F .text	00000010 stdout_write
20000150 l     O .data	00000004 _stdin
20000154 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0000181c g     F .text	00000050 console_buffer
200019d0 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
00000144  w    F .text	00000002 RTC0_IRQHandler
000028e4 g     F .text	000000c4 boot_read_swap_state
000021bc g     F .text	0000000c boot_go
200000d8 g       .data	00000000 __data_start__
00003b50 g     O .text	00000018 nrf52k_flash_dev
000037a0 g     F .text	00000024 printf
00003e94 g     O .text	00000004 stdout
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00000ac0 g     F .text	00000018 hal_gpio_write
00002e2c g     F .text	00000130 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
0000113c g     F .text	00000058 hal_timer_init
00001c14 g     F .text	00000016 mfg_seek_next_with_type
00000ee4 g     F .text	0000000a hal_system_start
00002a70 g     F .text	00000030 boot_write_swap_info
00003140 g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
00002878 g     F .text	0000001e boot_magic_compatible_check
0000153a g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
00001094 g     F .text	000000a8 nrf52_timer0_irq_handler
00001414 g     F .text	0000002c os_memblock_put
00000144  w    F .text	00000002 PWM1_IRQHandler
00001464 g     F .text	00000030 os_msys_get_pkthdr
200019c8 g     O .bss	00000004 flash_map
000032c0 g     F .text	0000002e hal_flash_is_erased
00001510 g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
00003eb0 g       .ARM.exidx	00000000 __exidx_end
00002d80 g     F .text	00000008 mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000164 g     F .text	00000030 hal_system_reset
20000148 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
00003eb0 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
0000198c g     F .text	00000024 flash_area_write
2000015c g       .bssnz	00000000 __bssnz_start__
00000814 g     F .text	00000078 spiflash_erase
00000144  w    F .text	00000002 PDM_IRQHandler
000021c8 g     F .text	0000007a swap_erase_trailer_sectors
0000243a g     F .text	000000aa boot_slots_compatible
00001fcc g     F .text	000001f0 context_boot_go
00001c2a g     F .text	00000006 mfg_read_tlv_flash_area
000018a8 g     F .text	0000000c console_get_ticks
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
000013ac g     F .text	00000006 timer_handler
00002560 g     F .text	000002bc swap_run
00001702 g     F .text	0000001a memcpy
00000f14 g     F .text	00000070 hal_watchdog_init
00001384 g     F .text	00000008 os_cputime_init
00002332 g     F .text	00000030 swap_set_image_ok
000037e8 g     F .text	00000000 .hidden __aeabi_uldivmod
000032ee g     F .text	00000054 hal_flash_isempty
00000000 g       *ABS*	00000000 _imghdr_size
200019c0 g     O .bss	00000004 console_is_midline
000015e6 g     F .text	00000010 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00001968 g     F .text	00000024 flash_area_read
000012a0 g     F .text	0000004c __assert_func
00000ad8 g     F .text	00000074 nrf52_spi0_irq_handler
0000013c  w    F .text	00000002 UsageFault_Handler
000007fa g     F .text	0000001a spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
00003534 g     F .text	00000266 tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
2000015c g       .bss	00000000 __bss_start__
00000194 g     F .text	00000010 hal_debugger_connected
000031a4 g     F .text	00000064 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00003818 g     F .text	000002cc .hidden __udivmoddi4
000028a0 g     F .text	00000016 boot_status_entries
200019b4 g     O .bss	00000004 g_current_task
000013b2 g     F .text	0000000c os_arch_save_sr
00002362 g     F .text	0000002e boot_read_image_header
00002a24 g     F .text	0000001c boot_write_magic
00000890 g     F .text	00000060 spiflash_identify
00001392 g     F .text	00000016 os_cputime_delay_ticks
200019c4 g     O .bss	00000001 g_console_input_ignore
00003e98 g       .text	00000000 __exidx_start
00001f74 g     F .text	00000004 boot_erase_region
000024e4 g     F .text	0000007c swap_status_source
00001622 g     F .text	00000098 os_mbuf_append
00001c30 g     F .text	00000006 mfg_read_tlv_mmr_ref
000014b0 g     F .text	00000014 os_set_env
00000488 g     F .text	00000014 hal_bsp_flash_dev
00000f84 g     F .text	00000038 nrf52_periph_create
000019d4 g     F .text	00000006 flash_area_align
00001818 g     F .text	00000004 disable_buffer
00001774 g     F .text	00000040 console_printf
0000176e g     F .text	00000004 console_blocking_mode
00000144  w    F .text	00000002 I2S_IRQHandler
00000442 g     F .text	00000002 _init
00003208 g     F .text	000000b8 hal_flash_erase
000028dc g     F .text	00000006 boot_swap_info_off
00002aa0 g     F .text	00000018 boot_write_swap_size
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
00001f10 g     F .text	00000064 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
00002ab8 g     F .text	00000084 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
000029c8 g     F .text	0000005c boot_read_swap_size
00002316 g     F .text	0000001c swap_set_copy_done
00001546 g     F .text	0000001e os_default_irq_asm
0000229c g     F .text	0000007a swap_read_status
00001c38 g     F .text	00000048 mfg_init
00000148 g     F .text	00000010 _sbrkInit
2000015c g       .bssnz	00000000 __bssnz_end__
000019f4 g     F .text	00000098 flash_map_init
000037c4 g     F .text	00000010 vprintf
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00002390 g     F .text	00000094 swap_read_status_bytes
00000144  w    F .text	00000002 PWM2_IRQHandler
2000015c g       .data	00000000 __data_end__
00002fd6 g     F .text	0000012a mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
200019bc g     O .bss	00000004 g_os_time
00000d0c g     F .text	000000e0 hal_spi_init
200019d0 g       .bss	00000000 __bss_end__
0000158e g     F .text	0000002a os_mbuf_get
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000058c g     F .text	00000014 spiflash_device_ready
00000144 g     F .text	00000002 Default_Handler
00000434 g     F .text	0000000e _start
00002a40 g     F .text	00000018 boot_write_copy_done
00002424 g     F .text	00000016 boot_status_internal_off
000014c4 g     F .text	00000006 os_arch_init_task_stack
00003d70 g     O .text	00000010 boot_img_magic
00000a9a g     F .text	00000026 hal_gpio_init_out
2000014c g     O .data	00000004 sysinit_panic_cb
000013c4 g     F .text	00000032 os_memblock_get
00001e78 g     F .text	0000001a boot_status_is_reset
000012ec g     F .text	00000098 os_default_irq
000007d4 g     F .text	0000000a spiflash_sector_erase
000019da g     F .text	0000000a flash_area_erased_val
00002242 g     F .text	0000005a swap_status_init
200019b8 g     O .bss	00000004 g_os_last_ctx_sw_time
000016ba g     F .text	00000048 memcmp
00003ae4  w    F .text	00000002 .hidden __aeabi_ldiv0
00001194 g     F .text	000000d4 hal_timer_config
00002d70 g     F .text	00000010 flash_area_id_from_multi_image_slot
00001e66 g     F .text	00000012 boot_status_reset
00001f78 g     F .text	00000054 boot_copy_region
000018b4 g     F .text	0000003c flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
000029a8 g     F .text	0000001e boot_read_swap_state_by_id
0000171c g     F .text	00000036 memset
00000000 g       .text	000000d8 __isr_vector
00000444 g     F .text	00000044 main
00000e2c g     F .text	00000028 hal_spi_set_txrx_cb
0000186c g     F .text	0000003c console_out_nolock
00000514 g     F .text	00000052 spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
000014ca g     F .text	00000046 SVC_Handler
00003160 g     F .text	00000044 hal_flash_read
00001268 g     F .text	00000038 hal_timer_read
000019b0 g     F .text	00000024 flash_area_erase
20001970 g     O .bss	00000028 nrf52_hal_spi0
00001610 g     F .text	00000012 os_mbuf_len
200019c5 g     O .bss	00000001 g_silence_console
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
200019cc g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00001b94 g     F .text	00000080 mfg_seek_next
000019e4 g     F .text	0000000e flash_area_read_is_empty
00001752 g     F .text	0000001c console_write
000028b6 g     F .text	00000026 boot_status_off
00000254 g     F .text	000001e0 SystemInit
0000138c g     F .text	00000006 os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
00003150 g     F .text	00000010 hal_flash_erased_val
00002b3c g     F .text	00000104 bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
00000dec g     F .text	00000040 hal_spi_tx_val
00000658 g     F .text	0000001c spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
000017b4 g     F .text	00000064 console_flush
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
00000b4c g     F .text	00000124 hal_spi_config
000018f0 g     F .text	00000078 flash_area_to_sectors
00003d18 g     O .text	00000048 sysflash_map_dflt
20001998 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
00000c70 g     F .text	00000040 hal_spi_enable
000013a8 g     F .text	00000004 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
000005e0 g     F .text	00000018 spiflash_wait_ready
000007ee g     F .text	0000000c spiflash_block_64k_erase
00001c80 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
000004ac g     F .text	00000028 NVIC_Relocate
2000015c g     O .bss	00000004 os_flags
000013be g     F .text	00000006 os_arch_restore_sr
2000fe50 g       *ABS*	000001b0 __StackLimit
00002f5c g     F .text	0000007a mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000015f6 g     F .text	0000001a os_mbuf_free_chain
00001494 g     F .text	0000000c os_time_get
00000e54 g     F .text	00000090 hal_spi_txrx
000015b8 g     F .text	0000002e os_mbuf_get_pkthdr
00003ae4  w    F .text	00000002 .hidden __aeabi_idiv0
00002c40 g     F .text	00000098 bootutil_tlv_iter_begin
0000092a g     F .text	00000006 _exit
000001a4 g     F .text	0000003c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
00000566 g     F .text	00000026 spiflash_read_status
000013f6 g     F .text	0000001e os_memblock_put_from_cb
000014a0 g     F .text	00000010 os_time_advance
0000311c g     F .text	00000024 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000049c g     F .text	0000000e hal_bsp_init
00000cb0 g     F .text	0000005c hal_spi_disable
000007e2 g     F .text	0000000c spiflash_block_32k_erase
0000379a g     F .text	00000004 vfprintf
00002896 g     F .text	0000000a boot_trailer_sz
00002cd8 g     F .text	00000098 bootutil_tlv_iter_next
00002a58 g     F .text	00000018 boot_write_image_ok
00002d88 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
       8:	00000135 	.word	0x00000135
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       c:	00000137 	.word	0x00000137
	...
    t->t_state = OS_TASK_SLEEP;
    t->t_next_wakeup = os_time_get() + nticks;
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      2c:	000014cb 	.word	0x000014cb
	...
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
        } else {
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      38:	00001511 	.word	0x00001511
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      3c:	0000153b 	.word	0x0000153b
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      48:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      4c:	00000145 	.word	0x00000145
      50:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
      54:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      58:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      5c:	00000145 	.word	0x00000145
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      60:	00000145 	.word	0x00000145
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
    return (0);
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
      74:	00000145 	.word	0x00000145
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	2000015c 	.word	0x2000015c
    ldr     r3, =__bss_end__
     114:	200019d0 	.word	0x200019d0
    ldr    r1, =__etext
     118:	00003eb0 	.word	0x00003eb0
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	2000015c 	.word	0x2000015c
    LDR     R0, =__HeapBase
     124:	200019d0 	.word	0x200019d0
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	00000255 	.word	0x00000255
    LDR     R0, =_start
     130:	00000435 	.word	0x00000435

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
    sbrkLimit = limit;
     14a:	e9c3 0100 	strd	r0, r1, [r3]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_system_reset>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b08      	ldr	r3, [pc, #32]	; (188 <hal_system_reset+0x24>)
     166:	681b      	ldr	r3, [r3, #0]
        if (hal_debugger_connected()) {
     168:	07db      	lsls	r3, r3, #31
     16a:	d500      	bpl.n	16e <hal_system_reset+0xa>
            asm("bkpt");
     16c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     16e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     172:	4906      	ldr	r1, [pc, #24]	; (18c <hal_system_reset+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     174:	4b06      	ldr	r3, [pc, #24]	; (190 <hal_system_reset+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     176:	68ca      	ldr	r2, [r1, #12]
     178:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     17c:	4313      	orrs	r3, r2
     17e:	60cb      	str	r3, [r1, #12]
     180:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     184:	bf00      	nop
     186:	e7fd      	b.n	184 <hal_system_reset+0x20>
     188:	e000edf0 	.word	0xe000edf0
     18c:	e000ed00 	.word	0xe000ed00
     190:	05fa0004 	.word	0x05fa0004

00000194 <hal_debugger_connected>:
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     194:	4b02      	ldr	r3, [pc, #8]	; (1a0 <hal_debugger_connected+0xc>)
     196:	6818      	ldr	r0, [r3, #0]
}
     198:	f000 0001 	and.w	r0, r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop
     1a0:	e000edf0 	.word	0xe000edf0

000001a4 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a8:	4a0c      	ldr	r2, [pc, #48]	; (1dc <Stack_Size+0x2c>)
     1aa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
     1ae:	4011      	ands	r1, r2
     1b0:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
     1b4:	d011      	beq.n	1da <Stack_Size+0x2a>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b6:	2101      	movs	r1, #1
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1b8:	2000      	movs	r0, #0
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1ba:	60d9      	str	r1, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1bc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	6099      	str	r1, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
     1ca:	2900      	cmp	r1, #0
     1cc:	d0fb      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
     1d2:	4011      	ands	r1, r2
     1d4:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
     1d8:	d1f5      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1da:	4770      	bx	lr
     1dc:	00010003 	.word	0x00010003

000001e0 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1e0:	4b09      	ldr	r3, [pc, #36]	; (208 <errata_16+0x28>)
     1e2:	781b      	ldrb	r3, [r3, #0]
     1e4:	2b06      	cmp	r3, #6
     1e6:	d10c      	bne.n	202 <errata_16+0x22>
     1e8:	4b08      	ldr	r3, [pc, #32]	; (20c <errata_16+0x2c>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	071a      	lsls	r2, r3, #28
     1ee:	d108      	bne.n	202 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     1f0:	4b07      	ldr	r3, [pc, #28]	; (210 <errata_16+0x30>)
     1f2:	6818      	ldr	r0, [r3, #0]
     1f4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     1f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     1fc:	4258      	negs	r0, r3
     1fe:	4158      	adcs	r0, r3
     200:	4770      	bx	lr
            return true;
        }
    }

    return false;
     202:	2000      	movs	r0, #0
}
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	f0000fe0 	.word	0xf0000fe0
     20c:	f0000fe4 	.word	0xf0000fe4
     210:	f0000fe8 	.word	0xf0000fe8

00000214 <errata_108>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     214:	4b0c      	ldr	r3, [pc, #48]	; (248 <errata_108+0x34>)
     216:	781b      	ldrb	r3, [r3, #0]
     218:	2b06      	cmp	r3, #6
     21a:	d110      	bne.n	23e <errata_108+0x2a>
     21c:	4b0b      	ldr	r3, [pc, #44]	; (24c <errata_108+0x38>)
     21e:	681b      	ldr	r3, [r3, #0]
     220:	071a      	lsls	r2, r3, #28
     222:	d10c      	bne.n	23e <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     224:	4b0a      	ldr	r3, [pc, #40]	; (250 <errata_108+0x3c>)
     226:	6818      	ldr	r0, [r3, #0]
     228:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     22c:	2b30      	cmp	r3, #48	; 0x30
     22e:	d008      	beq.n	242 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     230:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     234:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     238:	4258      	negs	r0, r3
     23a:	4158      	adcs	r0, r3
     23c:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     23e:	2000      	movs	r0, #0
     240:	4770      	bx	lr
            return true;
     242:	2001      	movs	r0, #1
}
     244:	4770      	bx	lr
     246:	bf00      	nop
     248:	f0000fe0 	.word	0xf0000fe0
     24c:	f0000fe4 	.word	0xf0000fe4
     250:	f0000fe8 	.word	0xf0000fe8

00000254 <SystemInit>:
{
     254:	b508      	push	{r3, lr}
    if (errata_16()){
     256:	f7ff ffc3 	bl	1e0 <errata_16>
     25a:	b110      	cbz	r0, 262 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     25c:	4b63      	ldr	r3, [pc, #396]	; (3ec <SystemInit+0x198>)
     25e:	4a64      	ldr	r2, [pc, #400]	; (3f0 <SystemInit+0x19c>)
     260:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     262:	f7ff ffd7 	bl	214 <errata_108>
     266:	b128      	cbz	r0, 274 <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     268:	4b62      	ldr	r3, [pc, #392]	; (3f4 <SystemInit+0x1a0>)
     26a:	4a63      	ldr	r2, [pc, #396]	; (3f8 <SystemInit+0x1a4>)
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f3c3 3342 	ubfx	r3, r3, #13, #3
     272:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     274:	f7ff ffb4 	bl	1e0 <errata_16>
     278:	b120      	cbz	r0, 284 <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     27a:	4a60      	ldr	r2, [pc, #384]	; (3fc <SystemInit+0x1a8>)
     27c:	68d3      	ldr	r3, [r2, #12]
     27e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     282:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     284:	f7ff ffc6 	bl	214 <errata_108>
     288:	b140      	cbz	r0, 29c <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     28a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     28e:	2200      	movs	r2, #0
     290:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     294:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     298:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     29c:	f7ff ffa0 	bl	1e0 <errata_16>
     2a0:	b110      	cbz	r0, 2a8 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     2a2:	4b57      	ldr	r3, [pc, #348]	; (400 <SystemInit+0x1ac>)
     2a4:	2203      	movs	r2, #3
     2a6:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     2a8:	f7ff ff9a 	bl	1e0 <errata_16>
     2ac:	b140      	cbz	r0, 2c0 <SystemInit+0x6c>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     2ae:	4b55      	ldr	r3, [pc, #340]	; (404 <SystemInit+0x1b0>)
     2b0:	2205      	movs	r2, #5
     2b2:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     2b4:	2201      	movs	r2, #1
     2b6:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     2b8:	2200      	movs	r2, #0
     2ba:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     2bc:	223f      	movs	r2, #63	; 0x3f
     2be:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2c0:	4b51      	ldr	r3, [pc, #324]	; (408 <SystemInit+0x1b4>)
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	2b06      	cmp	r3, #6
     2c6:	d150      	bne.n	36a <SystemInit+0x116>
     2c8:	4b50      	ldr	r3, [pc, #320]	; (40c <SystemInit+0x1b8>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	071a      	lsls	r2, r3, #28
     2ce:	d14c      	bne.n	36a <SystemInit+0x116>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d0:	4b4f      	ldr	r3, [pc, #316]	; (410 <SystemInit+0x1bc>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2d8:	2b50      	cmp	r3, #80	; 0x50
     2da:	d146      	bne.n	36a <SystemInit+0x116>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     2e0:	4b4c      	ldr	r3, [pc, #304]	; (414 <SystemInit+0x1c0>)
     2e2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     2e6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     2ea:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     2ee:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     2f2:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     2f6:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     2fa:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     2fe:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     302:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     306:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     30a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     30e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     312:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     316:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     31a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     31e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     322:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     326:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     32a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     32e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     332:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     336:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     33a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     33e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     342:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     346:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     34a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     34e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     352:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     356:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     35a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     35e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     362:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     366:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     36a:	f7ff ff53 	bl	214 <errata_108>
     36e:	b128      	cbz	r0, 37c <SystemInit+0x128>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     370:	4b29      	ldr	r3, [pc, #164]	; (418 <SystemInit+0x1c4>)
     372:	4a2a      	ldr	r2, [pc, #168]	; (41c <SystemInit+0x1c8>)
     374:	681b      	ldr	r3, [r3, #0]
     376:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     37a:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     37c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     380:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     384:	07db      	lsls	r3, r3, #31
     386:	d529      	bpl.n	3dc <SystemInit+0x188>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     388:	4b25      	ldr	r3, [pc, #148]	; (420 <SystemInit+0x1cc>)
     38a:	2201      	movs	r2, #1
     38c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     390:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     394:	2a00      	cmp	r2, #0
     396:	d0fb      	beq.n	390 <SystemInit+0x13c>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     398:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     39c:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     3a0:	f023 0301 	bic.w	r3, r3, #1
     3a4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3a8:	4b1d      	ldr	r3, [pc, #116]	; (420 <SystemInit+0x1cc>)
     3aa:	461a      	mov	r2, r3
     3ac:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     3b0:	2900      	cmp	r1, #0
     3b2:	d0fb      	beq.n	3ac <SystemInit+0x158>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     3b4:	2100      	movs	r1, #0
     3b6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     3be:	2b00      	cmp	r3, #0
     3c0:	d0fb      	beq.n	3ba <SystemInit+0x166>
     3c2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3c6:	4917      	ldr	r1, [pc, #92]	; (424 <SystemInit+0x1d0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3c8:	4b17      	ldr	r3, [pc, #92]	; (428 <SystemInit+0x1d4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3ca:	68ca      	ldr	r2, [r1, #12]
     3cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3d0:	4313      	orrs	r3, r2
     3d2:	60cb      	str	r3, [r1, #12]
     3d4:	f3bf 8f4f 	dsb	sy
    __NOP();
     3d8:	bf00      	nop
     3da:	e7fd      	b.n	3d8 <SystemInit+0x184>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3dc:	4b13      	ldr	r3, [pc, #76]	; (42c <SystemInit+0x1d8>)
     3de:	4a14      	ldr	r2, [pc, #80]	; (430 <SystemInit+0x1dc>)
     3e0:	601a      	str	r2, [r3, #0]
}
     3e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    NVIC_Relocate();
     3e6:	f000 b861 	b.w	4ac <NVIC_Relocate>
     3ea:	bf00      	nop
     3ec:	4007c074 	.word	0x4007c074
     3f0:	baadf00d 	.word	0xbaadf00d
     3f4:	10000244 	.word	0x10000244
     3f8:	4000053c 	.word	0x4000053c
     3fc:	e000edf0 	.word	0xe000edf0
     400:	400005a0 	.word	0x400005a0
     404:	40005610 	.word	0x40005610
     408:	f0000fe0 	.word	0xf0000fe0
     40c:	f0000fe4 	.word	0xf0000fe4
     410:	f0000fe8 	.word	0xf0000fe8
     414:	4000c000 	.word	0x4000c000
     418:	10000258 	.word	0x10000258
     41c:	40000ee4 	.word	0x40000ee4
     420:	4001e000 	.word	0x4001e000
     424:	e000ed00 	.word	0xe000ed00
     428:	05fa0004 	.word	0x05fa0004
     42c:	200000e4 	.word	0x200000e4
     430:	03d09000 	.word	0x03d09000

00000434 <_start>:
void _start(void)
{
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     434:	2100      	movs	r1, #0
{
     436:	b508      	push	{r3, lr}
    rc = main(0, NULL);
     438:	4608      	mov	r0, r1
     43a:	f000 f803 	bl	444 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     43e:	f000 fa74 	bl	92a <_exit>

00000442 <_init>:
}

void
_init(void)
{
}
     442:	4770      	bx	lr

00000444 <main>:
    return 0;
}

int
main(void)
{
     444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     446:	f000 f829 	bl	49c <hal_bsp_init>
    console_printf("Starting MCUBoot..."); console_flush(); ////
     44a:	480e      	ldr	r0, [pc, #56]	; (484 <main+0x40>)
     44c:	f001 f992 	bl	1774 <console_printf>
     450:	f001 f9b0 	bl	17b4 <console_flush>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     454:	f247 5030 	movw	r0, #30000	; 0x7530
     458:	f000 fd5c 	bl	f14 <hal_watchdog_init>
    assert(rc == 0);
     45c:	b128      	cbz	r0, 46a <main+0x26>
     45e:	2300      	movs	r3, #0
     460:	461a      	mov	r2, r3
     462:	4619      	mov	r1, r3
     464:	4618      	mov	r0, r3
     466:	f000 ff1b 	bl	12a0 <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     46a:	f001 fac3 	bl	19f4 <flash_map_init>
#endif

    rc = boot_go(&rsp);
     46e:	a801      	add	r0, sp, #4
     470:	f001 fea4 	bl	21bc <boot_go>
    assert(rc == 0);
     474:	2800      	cmp	r0, #0
     476:	d1f2      	bne.n	45e <main+0x1a>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_system_start((void *)(flash_base + rsp.br_image_off +
                              rsp.br_hdr->ih_hdr_size));
     478:	9b01      	ldr	r3, [sp, #4]
     47a:	8918      	ldrh	r0, [r3, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     47c:	9b03      	ldr	r3, [sp, #12]
     47e:	4418      	add	r0, r3
     480:	f000 fd30 	bl	ee4 <hal_system_start>
     484:	00003ae8 	.word	0x00003ae8

00000488 <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     488:	2801      	cmp	r0, #1
        return NULL;
    }
    return flash_devs[id];
     48a:	bf9a      	itte	ls
     48c:	4b02      	ldrls	r3, [pc, #8]	; (498 <hal_bsp_flash_dev+0x10>)
     48e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
        return NULL;
     492:	2000      	movhi	r0, #0
}
     494:	4770      	bx	lr
     496:	bf00      	nop
     498:	00003afc 	.word	0x00003afc

0000049c <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     49c:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     49e:	f7ff fe81 	bl	1a4 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
}
     4a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf52_periph_create();
     4a6:	f000 bd6d 	b.w	f84 <nrf52_periph_create>
	...

000004ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     4ac:	4b06      	ldr	r3, [pc, #24]	; (4c8 <NVIC_Relocate+0x1c>)
     4ae:	4907      	ldr	r1, [pc, #28]	; (4cc <NVIC_Relocate+0x20>)
     4b0:	428b      	cmp	r3, r1
     4b2:	d005      	beq.n	4c0 <NVIC_Relocate+0x14>
     4b4:	2200      	movs	r2, #0
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
     4b6:	5888      	ldr	r0, [r1, r2]
     4b8:	5098      	str	r0, [r3, r2]
     4ba:	3204      	adds	r2, #4
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     4bc:	2ad8      	cmp	r2, #216	; 0xd8
     4be:	d1fa      	bne.n	4b6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     4c0:	4a03      	ldr	r2, [pc, #12]	; (4d0 <NVIC_Relocate+0x24>)
     4c2:	6093      	str	r3, [r2, #8]
#endif
}
     4c4:	4770      	bx	lr
     4c6:	bf00      	nop
     4c8:	20000000 	.word	0x20000000
     4cc:	00000000 	.word	0x00000000
     4d0:	e000ed00 	.word	0xe000ed00

000004d4 <hal_spiflash_sector_info>:
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     4d4:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
     4d6:	4341      	muls	r1, r0
     4d8:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     4da:	6018      	str	r0, [r3, #0]
    return 0;
}
     4dc:	2000      	movs	r0, #0
     4de:	4770      	bx	lr

000004e0 <spiflash_cs_activate.isra.4>:
    hal_gpio_write(dev->ss_pin, 0);
     4e0:	2100      	movs	r1, #0
     4e2:	f000 baed 	b.w	ac0 <hal_gpio_write>

000004e6 <spiflash_cs_deactivate.isra.5>:
    hal_gpio_write(dev->ss_pin, 1);
     4e6:	2101      	movs	r1, #1
     4e8:	f000 baea 	b.w	ac0 <hal_gpio_write>

000004ec <spiflash_release_power_down_generic>:
{
     4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     4ee:	ad02      	add	r5, sp, #8
     4f0:	23ab      	movs	r3, #171	; 0xab
     4f2:	f805 3d04 	strb.w	r3, [r5, #-4]!
{
     4f6:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     4f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     4fa:	f7ff fff1 	bl	4e0 <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     4fe:	2301      	movs	r3, #1
     500:	462a      	mov	r2, r5
     502:	4629      	mov	r1, r5
     504:	6a20      	ldr	r0, [r4, #32]
     506:	f000 fca5 	bl	e54 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     50a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     50c:	f7ff ffeb 	bl	4e6 <spiflash_cs_deactivate.isra.5>
}
     510:	b003      	add	sp, #12
     512:	bd30      	pop	{r4, r5, pc}

00000514 <spiflash_read_jedec_id>:
{
     514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     518:	ad02      	add	r5, sp, #8
{
     51a:	461e      	mov	r6, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     51c:	239f      	movs	r3, #159	; 0x9f
     51e:	f845 3d04 	str.w	r3, [r5, #-4]!
{
     522:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     524:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
     526:	4688      	mov	r8, r1
     528:	4617      	mov	r7, r2
    spiflash_cs_activate(dev);
     52a:	f7ff ffd9 	bl	4e0 <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     52e:	2304      	movs	r3, #4
     530:	462a      	mov	r2, r5
     532:	4629      	mov	r1, r5
     534:	6a20      	ldr	r0, [r4, #32]
     536:	f000 fc8d 	bl	e54 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     53a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     53c:	f7ff ffd3 	bl	4e6 <spiflash_cs_deactivate.isra.5>
    if (manufacturer) {
     540:	f1b8 0f00 	cmp.w	r8, #0
     544:	d003      	beq.n	54e <spiflash_read_jedec_id+0x3a>
        *manufacturer = cmd[1];
     546:	f89d 3005 	ldrb.w	r3, [sp, #5]
     54a:	f888 3000 	strb.w	r3, [r8]
    if (memory_type) {
     54e:	b117      	cbz	r7, 556 <spiflash_read_jedec_id+0x42>
        *memory_type = cmd[2];
     550:	f89d 3006 	ldrb.w	r3, [sp, #6]
     554:	703b      	strb	r3, [r7, #0]
    if (capacity) {
     556:	b116      	cbz	r6, 55e <spiflash_read_jedec_id+0x4a>
        *capacity = cmd[3];
     558:	f89d 3007 	ldrb.w	r3, [sp, #7]
     55c:	7033      	strb	r3, [r6, #0]
}
     55e:	2000      	movs	r0, #0
     560:	b002      	add	sp, #8
     562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000566 <spiflash_read_status>:
{
     566:	b538      	push	{r3, r4, r5, lr}
     568:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     56a:	6a80      	ldr	r0, [r0, #40]	; 0x28
     56c:	f7ff ffb8 	bl	4e0 <spiflash_cs_activate.isra.4>
    hal_spi_tx_val(dev->spi_num, cmd);
     570:	2105      	movs	r1, #5
     572:	6a20      	ldr	r0, [r4, #32]
     574:	f000 fc3a 	bl	dec <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     578:	21ff      	movs	r1, #255	; 0xff
     57a:	6a20      	ldr	r0, [r4, #32]
     57c:	f000 fc36 	bl	dec <hal_spi_tx_val>
     580:	4605      	mov	r5, r0
    spiflash_cs_deactivate(dev);
     582:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     584:	f7ff ffaf 	bl	4e6 <spiflash_cs_deactivate.isra.5>
}
     588:	b2e8      	uxtb	r0, r5
     58a:	bd38      	pop	{r3, r4, r5, pc}

0000058c <spiflash_device_ready>:
{
     58c:	b510      	push	{r4, lr}
     58e:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     590:	f7ff ffe9 	bl	566 <spiflash_read_status>
     594:	43c0      	mvns	r0, r0
     596:	f000 0001 	and.w	r0, r0, #1
     59a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     59e:	bd10      	pop	{r4, pc}

000005a0 <spiflash_wait_ready_till.part.6>:
spiflash_wait_ready_till(struct spiflash_dev *dev, uint32_t timeout_us,
     5a0:	b570      	push	{r4, r5, r6, lr}
     5a2:	4c0e      	ldr	r4, [pc, #56]	; (5dc <spiflash_wait_ready_till.part.6+0x3c>)
     5a4:	4294      	cmp	r4, r2
     5a6:	bf28      	it	cs
     5a8:	4614      	movcs	r4, r2
     5aa:	2c0a      	cmp	r4, #10
     5ac:	460d      	mov	r5, r1
     5ae:	4606      	mov	r6, r0
     5b0:	bf38      	it	cc
     5b2:	240a      	movcc	r4, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     5b4:	f000 feea 	bl	138c <os_cputime_get32>
     5b8:	4405      	add	r5, r0
        if (spiflash_device_ready(dev)) {
     5ba:	4630      	mov	r0, r6
     5bc:	f7ff ffe6 	bl	58c <spiflash_device_ready>
     5c0:	b950      	cbnz	r0, 5d8 <spiflash_wait_ready_till.part.6+0x38>
    os_cputime_delay_usecs(usecs);
     5c2:	4620      	mov	r0, r4
     5c4:	f000 fef0 	bl	13a8 <os_cputime_delay_usecs>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     5c8:	f000 fee0 	bl	138c <os_cputime_get32>
     5cc:	1b40      	subs	r0, r0, r5
     5ce:	2800      	cmp	r0, #0
     5d0:	dbf3      	blt.n	5ba <spiflash_wait_ready_till.part.6+0x1a>
    int rc = -1;
     5d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     5d6:	bd70      	pop	{r4, r5, r6, pc}
            rc = 0;
     5d8:	2000      	movs	r0, #0
     5da:	e7fc      	b.n	5d6 <spiflash_wait_ready_till.part.6+0x36>
     5dc:	000f4240 	.word	0x000f4240

000005e0 <spiflash_wait_ready>:
    if (dev->ready) {
     5e0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     5e4:	b933      	cbnz	r3, 5f4 <spiflash_wait_ready+0x14>
     5e6:	220a      	movs	r2, #10
     5e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     5ec:	434a      	muls	r2, r1
     5ee:	4359      	muls	r1, r3
     5f0:	f7ff bfd6 	b.w	5a0 <spiflash_wait_ready_till.part.6>
}
     5f4:	2000      	movs	r0, #0
     5f6:	4770      	bx	lr

000005f8 <hal_spiflash_read>:
{
     5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     5fa:	461d      	mov	r5, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     5fc:	2303      	movs	r3, #3
     5fe:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     602:	0c0b      	lsrs	r3, r1, #16
     604:	f88d 3005 	strb.w	r3, [sp, #5]
     608:	f88d 1007 	strb.w	r1, [sp, #7]
     60c:	0a0b      	lsrs	r3, r1, #8
    err = spiflash_wait_ready(dev, 100);
     60e:	2164      	movs	r1, #100	; 0x64
{
     610:	4604      	mov	r4, r0
     612:	4616      	mov	r6, r2
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     614:	f88d 3006 	strb.w	r3, [sp, #6]
    err = spiflash_wait_ready(dev, 100);
     618:	f7ff ffe2 	bl	5e0 <spiflash_wait_ready>
    if (!err) {
     61c:	4607      	mov	r7, r0
     61e:	b9c0      	cbnz	r0, 652 <hal_spiflash_read+0x5a>
        if (len > 0) {
     620:	b1bd      	cbz	r5, 652 <hal_spiflash_read+0x5a>
            spiflash_cs_activate(dev);
     622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     624:	f7ff ff5c 	bl	4e0 <spiflash_cs_activate.isra.4>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     628:	2304      	movs	r3, #4
     62a:	eb0d 0103 	add.w	r1, sp, r3
     62e:	463a      	mov	r2, r7
     630:	6a20      	ldr	r0, [r4, #32]
     632:	f000 fc0f 	bl	e54 <hal_spi_txrx>
            memset(buf, 0xFF, len);
     636:	462a      	mov	r2, r5
     638:	21ff      	movs	r1, #255	; 0xff
     63a:	4630      	mov	r0, r6
     63c:	f001 f86e 	bl	171c <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     640:	462b      	mov	r3, r5
     642:	4632      	mov	r2, r6
     644:	4631      	mov	r1, r6
     646:	6a20      	ldr	r0, [r4, #32]
     648:	f000 fc04 	bl	e54 <hal_spi_txrx>
            spiflash_cs_deactivate(dev);
     64c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     64e:	f7ff ff4a 	bl	4e6 <spiflash_cs_deactivate.isra.5>
}
     652:	2000      	movs	r0, #0
     654:	b003      	add	sp, #12
     656:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000658 <spiflash_write_enable>:
{
     658:	b510      	push	{r4, lr}
     65a:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     65c:	6a80      	ldr	r0, [r0, #40]	; 0x28
     65e:	f7ff ff3f 	bl	4e0 <spiflash_cs_activate.isra.4>
    hal_spi_tx_val(dev->spi_num, cmd);
     662:	2106      	movs	r1, #6
     664:	6a20      	ldr	r0, [r4, #32]
     666:	f000 fbc1 	bl	dec <hal_spi_tx_val>
    spiflash_cs_deactivate(dev);
     66a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     66c:	f7ff ff3b 	bl	4e6 <spiflash_cs_deactivate.isra.5>
}
     670:	2000      	movs	r0, #0
     672:	bd10      	pop	{r4, pc}

00000674 <hal_spiflash_write>:
{
     674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     678:	b085      	sub	sp, #20
     67a:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     67c:	2300      	movs	r3, #0
     67e:	9303      	str	r3, [sp, #12]
{
     680:	460e      	mov	r6, r1
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     682:	2302      	movs	r3, #2
    if (spiflash_wait_ready(dev, 100) != 0) {
     684:	2164      	movs	r1, #100	; 0x64
{
     686:	4605      	mov	r5, r0
     688:	4693      	mov	fp, r2
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     68a:	f88d 300c 	strb.w	r3, [sp, #12]
    if (spiflash_wait_ready(dev, 100) != 0) {
     68e:	f7ff ffa7 	bl	5e0 <spiflash_wait_ready>
     692:	2800      	cmp	r0, #0
     694:	d14b      	bne.n	72e <hal_spiflash_write+0xba>
    pp_time_typical = dev->characteristics->tbp1.typical;
     696:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    pp_time_maximum = dev->characteristics->tpp.maximum;
     698:	e9d3 3a09 	ldrd	r3, sl, [r3, #36]	; 0x24
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     69c:	4681      	mov	r9, r0
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     69e:	459a      	cmp	sl, r3
     6a0:	bf2c      	ite	cs
     6a2:	ebca 080a 	rsbcs	r8, sl, sl
     6a6:	ebca 0803 	rsbcc	r8, sl, r3
     6aa:	230a      	movs	r3, #10
     6ac:	fbb8 f3f3 	udiv	r3, r8, r3
     6b0:	9301      	str	r3, [sp, #4]
    while (len) {
     6b2:	b90f      	cbnz	r7, 6b8 <hal_spiflash_write+0x44>
err:
     6b4:	4638      	mov	r0, r7
     6b6:	e037      	b.n	728 <hal_spiflash_write+0xb4>
        spiflash_write_enable(dev);
     6b8:	4628      	mov	r0, r5
     6ba:	f7ff ffcd 	bl	658 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     6be:	0c33      	lsrs	r3, r6, #16
     6c0:	f88d 300d 	strb.w	r3, [sp, #13]
        cmd[2] = (uint8_t)(addr >> 8);
     6c4:	0a33      	lsrs	r3, r6, #8
     6c6:	f88d 300e 	strb.w	r3, [sp, #14]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     6ca:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
        spiflash_cs_activate(dev);
     6cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
        cmd[3] = (uint8_t)(addr);
     6ce:	f88d 600f 	strb.w	r6, [sp, #15]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     6d2:	425c      	negs	r4, r3
     6d4:	4034      	ands	r4, r6
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     6d6:	1ba4      	subs	r4, r4, r6
     6d8:	441c      	add	r4, r3
     6da:	42bc      	cmp	r4, r7
     6dc:	bf28      	it	cs
     6de:	463c      	movcs	r4, r7
        spiflash_cs_activate(dev);
     6e0:	f7ff fefe 	bl	4e0 <spiflash_cs_activate.isra.4>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     6e4:	2304      	movs	r3, #4
     6e6:	2200      	movs	r2, #0
     6e8:	a903      	add	r1, sp, #12
     6ea:	6a28      	ldr	r0, [r5, #32]
     6ec:	f000 fbb2 	bl	e54 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     6f0:	4623      	mov	r3, r4
     6f2:	2200      	movs	r2, #0
     6f4:	4659      	mov	r1, fp
     6f6:	6a28      	ldr	r0, [r5, #32]
     6f8:	f000 fbac 	bl	e54 <hal_spi_txrx>
        spiflash_cs_deactivate(dev);
     6fc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     6fe:	f7ff fef2 	bl	4e6 <spiflash_cs_deactivate.isra.5>
        dev->ready = false;
     702:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
    os_cputime_delay_usecs(usecs);
     706:	4650      	mov	r0, sl
     708:	f000 fe4e 	bl	13a8 <os_cputime_delay_usecs>
    if (dev->ready) {
     70c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
     710:	b11b      	cbz	r3, 71a <hal_spiflash_write+0xa6>
        addr += to_write;
     712:	4426      	add	r6, r4
        u8buf += to_write;
     714:	44a3      	add	fp, r4
        len -= to_write;
     716:	1b3f      	subs	r7, r7, r4
     718:	e7cb      	b.n	6b2 <hal_spiflash_write+0x3e>
     71a:	9a01      	ldr	r2, [sp, #4]
     71c:	4641      	mov	r1, r8
     71e:	4628      	mov	r0, r5
     720:	f7ff ff3e 	bl	5a0 <spiflash_wait_ready_till.part.6>
        if (rc) {
     724:	2800      	cmp	r0, #0
     726:	d0f4      	beq.n	712 <hal_spiflash_write+0x9e>
}
     728:	b005      	add	sp, #20
     72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = -1;
     72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     732:	e7f9      	b.n	728 <hal_spiflash_write+0xb4>

00000734 <spiflash_execute_erase>:
{
     734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     738:	460e      	mov	r6, r1
    if (spiflash_wait_ready(dev, 100) != 0) {
     73a:	2164      	movs	r1, #100	; 0x64
{
     73c:	4604      	mov	r4, r0
     73e:	4690      	mov	r8, r2
     740:	461f      	mov	r7, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     742:	f7ff ff4d 	bl	5e0 <spiflash_wait_ready>
     746:	4605      	mov	r5, r0
     748:	bb60      	cbnz	r0, 7a4 <spiflash_execute_erase+0x70>
    spiflash_write_enable(dev);
     74a:	4620      	mov	r0, r4
     74c:	f7ff ff84 	bl	658 <spiflash_write_enable>
    spiflash_read_status(dev);
     750:	4620      	mov	r0, r4
     752:	f7ff ff08 	bl	566 <spiflash_read_status>
    spiflash_cs_activate(dev);
     756:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     758:	f7ff fec2 	bl	4e0 <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     75c:	4631      	mov	r1, r6
     75e:	4643      	mov	r3, r8
     760:	462a      	mov	r2, r5
     762:	6a20      	ldr	r0, [r4, #32]
     764:	f000 fb76 	bl	e54 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     768:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     76a:	f7ff febc 	bl	4e6 <spiflash_cs_deactivate.isra.5>
    dev->ready = false;
     76e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     772:	f000 fe0b 	bl	138c <os_cputime_get32>
     776:	4606      	mov	r6, r0
    os_cputime_delay_usecs(usecs);
     778:	6838      	ldr	r0, [r7, #0]
     77a:	f000 fe15 	bl	13a8 <os_cputime_delay_usecs>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     77e:	f000 fe05 	bl	138c <os_cputime_get32>
    if (wait_time_us > delay_spec->maximum) {
     782:	6879      	ldr	r1, [r7, #4]
    if (dev->ready) {
     784:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     788:	1b80      	subs	r0, r0, r6
    if (wait_time_us > delay_spec->maximum) {
     78a:	4281      	cmp	r1, r0
        wait_time_us = delay_spec->maximum - wait_time_us;
     78c:	bf2c      	ite	cs
     78e:	1a09      	subcs	r1, r1, r0
        wait_time_us = 0;
     790:	4629      	movcc	r1, r5
    if (dev->ready) {
     792:	b94b      	cbnz	r3, 7a8 <spiflash_execute_erase+0x74>
     794:	2232      	movs	r2, #50	; 0x32
     796:	4620      	mov	r0, r4
     798:	fbb1 f2f2 	udiv	r2, r1, r2
}
     79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     7a0:	f7ff befe 	b.w	5a0 <spiflash_wait_ready_till.part.6>
        rc = -1;
     7a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
     7a8:	4628      	mov	r0, r5
     7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000007ae <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     7ae:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7b0:	f88d 1004 	strb.w	r1, [sp, #4]
     7b4:	0c11      	lsrs	r1, r2, #16
     7b6:	f88d 1005 	strb.w	r1, [sp, #5]
                       (uint8_t)addr };
     7ba:	f88d 2007 	strb.w	r2, [sp, #7]
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7be:	0a11      	lsrs	r1, r2, #8
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     7c0:	2204      	movs	r2, #4
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7c2:	f88d 1006 	strb.w	r1, [sp, #6]
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     7c6:	eb0d 0102 	add.w	r1, sp, r2
     7ca:	f7ff ffb3 	bl	734 <spiflash_execute_erase>

}
     7ce:	b003      	add	sp, #12
     7d0:	f85d fb04 	ldr.w	pc, [sp], #4

000007d4 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     7d4:	460a      	mov	r2, r1
     7d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7d8:	2120      	movs	r1, #32
     7da:	f7ff bfe8 	b.w	7ae <spiflash_erase_cmd>

000007de <hal_spiflash_erase_sector>:
    return spiflash_sector_erase(dev, addr);
     7de:	f7ff bff9 	b.w	7d4 <spiflash_sector_erase>

000007e2 <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     7e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7e4:	460a      	mov	r2, r1
     7e6:	3308      	adds	r3, #8
     7e8:	2152      	movs	r1, #82	; 0x52
     7ea:	f7ff bfe0 	b.w	7ae <spiflash_erase_cmd>

000007ee <spiflash_block_64k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     7ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7f0:	460a      	mov	r2, r1
     7f2:	3310      	adds	r3, #16
     7f4:	21d8      	movs	r1, #216	; 0xd8
     7f6:	f7ff bfda 	b.w	7ae <spiflash_erase_cmd>

000007fa <spiflash_chip_erase>:
}
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     7fa:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     7fc:	a902      	add	r1, sp, #8
     7fe:	2360      	movs	r3, #96	; 0x60
     800:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
     804:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     806:	2201      	movs	r2, #1
     808:	3318      	adds	r3, #24
     80a:	f7ff ff93 	bl	734 <spiflash_execute_erase>
                                  &dev->characteristics->tce);
}
     80e:	b003      	add	sp, #12
     810:	f85d fb04 	ldr.w	pc, [sp], #4

00000814 <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     814:	b570      	push	{r4, r5, r6, lr}
     816:	4606      	mov	r6, r0
     818:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     81a:	b931      	cbnz	r1, 82a <spiflash_erase+0x16>
     81c:	6883      	ldr	r3, [r0, #8]
     81e:	4293      	cmp	r3, r2
     820:	d103      	bne.n	82a <spiflash_erase+0x16>
            size = 0;
        }
    }
err:
    return rc;
}
     822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return spiflash_chip_erase(dev);
     826:	f7ff bfe8 	b.w	7fa <spiflash_chip_erase>
    address &= ~0xFFFU;
     82a:	f421 647f 	bic.w	r4, r1, #4080	; 0xff0
     82e:	f024 040f 	bic.w	r4, r4, #15
    while (size) {
     832:	b325      	cbz	r5, 87e <spiflash_erase+0x6a>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     834:	b2a3      	uxth	r3, r4
     836:	b963      	cbnz	r3, 852 <spiflash_erase+0x3e>
     838:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     83c:	d309      	bcc.n	852 <spiflash_erase+0x3e>
            rc = spiflash_block_64k_erase(dev, address);
     83e:	4621      	mov	r1, r4
     840:	4630      	mov	r0, r6
     842:	f7ff ffd4 	bl	7ee <spiflash_block_64k_erase>
            if (rc) {
     846:	b9d8      	cbnz	r0, 880 <spiflash_erase+0x6c>
            address += 0x10000;
     848:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     84c:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     850:	e7ef      	b.n	832 <spiflash_erase+0x1e>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     852:	f3c4 030e 	ubfx	r3, r4, #0, #15
            rc = spiflash_block_32k_erase(dev, address);
     856:	4621      	mov	r1, r4
     858:	4630      	mov	r0, r6
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     85a:	b953      	cbnz	r3, 872 <spiflash_erase+0x5e>
     85c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     860:	d307      	bcc.n	872 <spiflash_erase+0x5e>
            rc = spiflash_block_32k_erase(dev, address);
     862:	f7ff ffbe 	bl	7e2 <spiflash_block_32k_erase>
            if (rc) {
     866:	b958      	cbnz	r0, 880 <spiflash_erase+0x6c>
            address += 0x8000;
     868:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     86c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     870:	e7df      	b.n	832 <spiflash_erase+0x1e>
        rc = spiflash_sector_erase(dev, address);
     872:	f7ff ffaf 	bl	7d4 <spiflash_sector_erase>
        if (rc) {
     876:	b918      	cbnz	r0, 880 <spiflash_erase+0x6c>
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     878:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     87c:	d801      	bhi.n	882 <spiflash_erase+0x6e>
{
     87e:	2000      	movs	r0, #0
}
     880:	bd70      	pop	{r4, r5, r6, pc}
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     882:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     886:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     88a:	e7d2      	b.n	832 <spiflash_erase+0x1e>

0000088c <hal_spiflash_erase>:
    return spiflash_erase(dev, address, size);
     88c:	f7ff bfc2 	b.w	814 <spiflash_erase>

00000890 <spiflash_identify>:

int
spiflash_identify(struct spiflash_dev *dev)
{
     890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int i;
    int j;
    uint8_t manufacturer = 0;
    uint8_t memory_type = 0;
    uint8_t capacity = 0;
     892:	ae02      	add	r6, sp, #8
    uint8_t manufacturer = 0;
     894:	2500      	movs	r5, #0

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     896:	4c15      	ldr	r4, [pc, #84]	; (8ec <spiflash_identify+0x5c>)
    uint8_t capacity = 0;
     898:	f806 5d01 	strb.w	r5, [r6, #-1]!
{
     89c:	4607      	mov	r7, r0
        supported_chips[0].fc_release_power_down(dev);
     89e:	6863      	ldr	r3, [r4, #4]
    uint8_t manufacturer = 0;
     8a0:	f88d 5005 	strb.w	r5, [sp, #5]
    uint8_t memory_type = 0;
     8a4:	f88d 5006 	strb.w	r5, [sp, #6]
        supported_chips[0].fc_release_power_down(dev);
     8a8:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     8aa:	4633      	mov	r3, r6
     8ac:	f10d 0206 	add.w	r2, sp, #6
     8b0:	f10d 0105 	add.w	r1, sp, #5
     8b4:	4638      	mov	r0, r7
     8b6:	f7ff fe2d 	bl	514 <spiflash_read_jedec_id>
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     8ba:	7822      	ldrb	r2, [r4, #0]
     8bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
     8c0:	429a      	cmp	r2, r3
     8c2:	d109      	bne.n	8d8 <spiflash_identify+0x48>
     8c4:	7862      	ldrb	r2, [r4, #1]
     8c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
     8ca:	429a      	cmp	r2, r3
     8cc:	d104      	bne.n	8d8 <spiflash_identify+0x48>
     8ce:	78a2      	ldrb	r2, [r4, #2]
     8d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8d4:	429a      	cmp	r2, r3
     8d6:	d005      	beq.n	8e4 <spiflash_identify+0x54>
     8d8:	2300      	movs	r3, #0
     8da:	461a      	mov	r2, r3
     8dc:	4619      	mov	r1, r3
     8de:	4618      	mov	r0, r3
     8e0:	f000 fcde 	bl	12a0 <__assert_func>
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     8e4:	4628      	mov	r0, r5
        dev->flash_chip = &supported_chips[0];
     8e6:	63bc      	str	r4, [r7, #56]	; 0x38
}
     8e8:	b003      	add	sp, #12
     8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ec:	20000128 	.word	0x20000128

000008f0 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     8f0:	b510      	push	{r4, lr}
     8f2:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     8f4:	2101      	movs	r1, #1
     8f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
     8f8:	f000 f8cf 	bl	a9a <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     8fc:	6a20      	ldr	r0, [r4, #32]
     8fe:	f000 f9d7 	bl	cb0 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     902:	f104 0118 	add.w	r1, r4, #24
     906:	6a20      	ldr	r0, [r4, #32]
     908:	f000 f920 	bl	b4c <hal_spi_config>
    if (rc) {
     90c:	4602      	mov	r2, r0
     90e:	b958      	cbnz	r0, 928 <hal_spiflash_init+0x38>
        return (rc);
    }

    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     910:	4601      	mov	r1, r0
     912:	6a20      	ldr	r0, [r4, #32]
     914:	f000 fa8a 	bl	e2c <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     918:	6a20      	ldr	r0, [r4, #32]
     91a:	f000 f9a9 	bl	c70 <hal_spi_enable>
#endif
    rc = spiflash_identify(dev);
     91e:	4620      	mov	r0, r4

    return rc;
}
     920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = spiflash_identify(dev);
     924:	f7ff bfb4 	b.w	890 <spiflash_identify>
}
     928:	bd10      	pop	{r4, pc}

0000092a <_exit>:

void _exit(int status);

void
_exit(int status)
{
     92a:	b508      	push	{r3, lr}
    hal_system_reset();
     92c:	f7ff fc1a 	bl	164 <hal_system_reset>

00000930 <nrf52k_flash_wait_ready>:

#define NRF52K_FLASH_READY() (NRF_NVMC->READY == NVMC_READY_READY_Ready)

static int
nrf52k_flash_wait_ready(void)
{
     930:	4b06      	ldr	r3, [pc, #24]	; (94c <nrf52k_flash_wait_ready+0x1c>)
    int i;

    for (i = 0; i < 100000; i++) {
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     932:	4a07      	ldr	r2, [pc, #28]	; (950 <nrf52k_flash_wait_ready+0x20>)
     934:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     938:	2901      	cmp	r1, #1
     93a:	d004      	beq.n	946 <nrf52k_flash_wait_ready+0x16>
    for (i = 0; i < 100000; i++) {
     93c:	3b01      	subs	r3, #1
     93e:	d1f9      	bne.n	934 <nrf52k_flash_wait_ready+0x4>
            return 0;
        }
    }
    return -1;
     940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     944:	4770      	bx	lr
            return 0;
     946:	2000      	movs	r0, #0
}
     948:	4770      	bx	lr
     94a:	bf00      	nop
     94c:	000186a0 	.word	0x000186a0
     950:	4001e000 	.word	0x4001e000

00000954 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     954:	b570      	push	{r4, r5, r6, lr}
     956:	460e      	mov	r6, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     958:	f7ff ffea 	bl	930 <nrf52k_flash_wait_ready>
     95c:	b9d0      	cbnz	r0, 994 <nrf52k_flash_erase_sector+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     95e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     962:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     964:	4c0d      	ldr	r4, [pc, #52]	; (99c <nrf52k_flash_erase_sector+0x48>)
     966:	2302      	movs	r3, #2
     968:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     96c:	f7ff ffe0 	bl	930 <nrf52k_flash_wait_ready>
     970:	b968      	cbnz	r0, 98e <nrf52k_flash_erase_sector+0x3a>
        goto out;
    }

    NRF_NVMC->ERASEPAGE = sector_address;
     972:	f8c4 6508 	str.w	r6, [r4, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     976:	f7ff ffdb 	bl	930 <nrf52k_flash_wait_ready>
     97a:	3000      	adds	r0, #0
     97c:	bf18      	it	ne
     97e:	2001      	movne	r0, #1
     980:	4240      	negs	r0, r0
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     982:	2300      	movs	r3, #0
     984:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     988:	b905      	cbnz	r5, 98c <nrf52k_flash_erase_sector+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
     98a:	b662      	cpsie	i
    return rc;
}
     98c:	bd70      	pop	{r4, r5, r6, pc}
    int rc = -1;
     98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     992:	e7f6      	b.n	982 <nrf52k_flash_erase_sector+0x2e>
        return -1;
     994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     998:	e7f8      	b.n	98c <nrf52k_flash_erase_sector+0x38>
     99a:	bf00      	nop
     99c:	4001e000 	.word	0x4001e000

000009a0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     9a0:	2000      	movs	r0, #0
     9a2:	4770      	bx	lr

000009a4 <nrf52k_flash_write>:
{
     9a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
     9a8:	460e      	mov	r6, r1
     9aa:	4614      	mov	r4, r2
     9ac:	461d      	mov	r5, r3
    if (nrf52k_flash_wait_ready()) {
     9ae:	f7ff ffbf 	bl	930 <nrf52k_flash_wait_ready>
     9b2:	2800      	cmp	r0, #0
     9b4:	d154      	bne.n	a60 <nrf52k_flash_write+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9b6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     9ba:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     9bc:	4b2a      	ldr	r3, [pc, #168]	; (a68 <nrf52k_flash_write+0xc4>)
     9be:	2201      	movs	r2, #1
    if (tmp) {
     9c0:	f016 0a03 	ands.w	sl, r6, #3
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     9c4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     9c8:	d026      	beq.n	a18 <nrf52k_flash_write+0x74>
        if (nrf52k_flash_wait_ready()) {
     9ca:	f7ff ffb1 	bl	930 <nrf52k_flash_wait_ready>
     9ce:	b160      	cbz	r0, 9ea <nrf52k_flash_write+0x46>
    int rc = -1;
     9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     9d4:	4b24      	ldr	r3, [pc, #144]	; (a68 <nrf52k_flash_write+0xc4>)
     9d6:	2200      	movs	r2, #0
     9d8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     9dc:	f1b8 0f00 	cmp.w	r8, #0
     9e0:	d100      	bne.n	9e4 <nrf52k_flash_write+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
     9e2:	b662      	cpsie	i
}
     9e4:	b002      	add	sp, #8
     9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        val = *(uint32_t *)(address & ~0x3);
     9ea:	f026 0903 	bic.w	r9, r6, #3
     9ee:	a802      	add	r0, sp, #8
        cnt = 4 - tmp;
     9f0:	f1ca 0704 	rsb	r7, sl, #4
        val = *(uint32_t *)(address & ~0x3);
     9f4:	f8d9 3000 	ldr.w	r3, [r9]
     9f8:	f840 3d04 	str.w	r3, [r0, #-4]!
     9fc:	42af      	cmp	r7, r5
     9fe:	bf28      	it	cs
     a00:	462f      	movcs	r7, r5
        memcpy((uint8_t *)&val + tmp, src, cnt);
     a02:	4621      	mov	r1, r4
     a04:	463a      	mov	r2, r7
     a06:	4450      	add	r0, sl
     a08:	f000 fe7b 	bl	1702 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     a0c:	9b01      	ldr	r3, [sp, #4]
     a0e:	f8c9 3000 	str.w	r3, [r9]
        address += cnt;
     a12:	443e      	add	r6, r7
        num_bytes -= cnt;
     a14:	1bed      	subs	r5, r5, r7
        src += cnt;
     a16:	443c      	add	r4, r7
     a18:	1b36      	subs	r6, r6, r4
     a1a:	e007      	b.n	a2c <nrf52k_flash_write+0x88>
        if (nrf52k_flash_wait_ready()) {
     a1c:	f7ff ff88 	bl	930 <nrf52k_flash_wait_ready>
     a20:	2800      	cmp	r0, #0
     a22:	d1d5      	bne.n	9d0 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = *(uint32_t *)src;
     a24:	f854 3b04 	ldr.w	r3, [r4], #4
     a28:	603b      	str	r3, [r7, #0]
        num_bytes -= sizeof(uint32_t);
     a2a:	3d04      	subs	r5, #4
    while (num_bytes >= sizeof(uint32_t)) {
     a2c:	2d03      	cmp	r5, #3
     a2e:	eb04 0706 	add.w	r7, r4, r6
     a32:	d8f3      	bhi.n	a1c <nrf52k_flash_write+0x78>
    if (num_bytes) {
     a34:	b16d      	cbz	r5, a52 <nrf52k_flash_write+0xae>
        val = *(uint32_t *)address;
     a36:	a802      	add	r0, sp, #8
     a38:	683b      	ldr	r3, [r7, #0]
     a3a:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     a3e:	462a      	mov	r2, r5
     a40:	4621      	mov	r1, r4
     a42:	f000 fe5e 	bl	1702 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     a46:	f7ff ff73 	bl	930 <nrf52k_flash_wait_ready>
     a4a:	2800      	cmp	r0, #0
     a4c:	d1c0      	bne.n	9d0 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = val;
     a4e:	9b01      	ldr	r3, [sp, #4]
     a50:	603b      	str	r3, [r7, #0]
    if (nrf52k_flash_wait_ready()) {
     a52:	f7ff ff6d 	bl	930 <nrf52k_flash_wait_ready>
     a56:	3000      	adds	r0, #0
     a58:	bf18      	it	ne
     a5a:	2001      	movne	r0, #1
     a5c:	4240      	negs	r0, r0
out:
     a5e:	e7b9      	b.n	9d4 <nrf52k_flash_write+0x30>
        return -1;
     a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a64:	e7be      	b.n	9e4 <nrf52k_flash_write+0x40>
     a66:	bf00      	nop
     a68:	4001e000 	.word	0x4001e000

00000a6c <nrf52k_flash_read>:
{
     a6c:	b508      	push	{r3, lr}
     a6e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     a70:	461a      	mov	r2, r3
     a72:	f000 fe46 	bl	1702 <memcpy>
}
     a76:	2000      	movs	r0, #0
     a78:	bd08      	pop	{r3, pc}

00000a7a <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     a7a:	297f      	cmp	r1, #127	; 0x7f
{
     a7c:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     a7e:	dd05      	ble.n	a8c <nrf52k_flash_sector_info+0x12>
     a80:	2300      	movs	r3, #0
     a82:	461a      	mov	r2, r3
     a84:	4619      	mov	r1, r3
     a86:	4618      	mov	r0, r3
     a88:	f000 fc0a 	bl	12a0 <__assert_func>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     a8c:	0309      	lsls	r1, r1, #12
     a8e:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a94:	601a      	str	r2, [r3, #0]
}
     a96:	2000      	movs	r0, #0
     a98:	bd08      	pop	{r3, pc}

00000a9a <hal_gpio_init_out>:
 *
 * @return int  0: no error; -1 otherwise.
 */
int
hal_gpio_init_out(int pin, int val)
{
     a9a:	2301      	movs	r3, #1
     a9c:	4083      	lsls	r3, r0
     a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
     aa2:	b151      	cbz	r1, aba <hal_gpio_init_out+0x20>
        port->OUTSET = HAL_GPIO_MASK(pin);
     aa4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
     aa8:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
     aac:	2103      	movs	r1, #3
     aae:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
     ab2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

    return 0;
}
     ab6:	2000      	movs	r0, #0
     ab8:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
     aba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
     abe:	e7f3      	b.n	aa8 <hal_gpio_init_out+0xe>

00000ac0 <hal_gpio_write>:
 * @param pin Pin to set
 * @param val Value to set pin (0:low 1:high)
 */
void
hal_gpio_write(int pin, int val)
{
     ac0:	2301      	movs	r3, #1
     ac2:	fa03 f000 	lsl.w	r0, r3, r0
     ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
     aca:	b111      	cbz	r1, ad2 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
     acc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
     ad0:	4770      	bx	lr
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     ad2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
     ad6:	4770      	bx	lr

00000ad8 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
     ad8:	b538      	push	{r3, r4, r5, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
     ada:	4b1b      	ldr	r3, [pc, #108]	; (b48 <nrf52_spi0_irq_handler+0x70>)
     adc:	781a      	ldrb	r2, [r3, #0]
     ade:	461d      	mov	r5, r3
     ae0:	bb3a      	cbnz	r2, b32 <nrf52_spi0_irq_handler+0x5a>
    spim = spi->nhs_spi.spim;
     ae2:	691c      	ldr	r4, [r3, #16]
    if (spim->EVENTS_END) {
     ae4:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
     ae8:	b319      	cbz	r1, b32 <nrf52_spi0_irq_handler+0x5a>
        spim->EVENTS_END = 0;
     aea:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
        if (spi->spi_xfr_flag == 0) {
     aee:	785a      	ldrb	r2, [r3, #1]
     af0:	b1fa      	cbz	r2, b32 <nrf52_spi0_irq_handler+0x5a>
        spi->nhs_bytes_txd += xfr_bytes;
     af2:	88d9      	ldrh	r1, [r3, #6]
        xfr_bytes = spim->TXD.AMOUNT;
     af4:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
     af8:	4401      	add	r1, r0
     afa:	b28a      	uxth	r2, r1
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     afc:	8899      	ldrh	r1, [r3, #4]
        spi->nhs_bytes_txd += xfr_bytes;
     afe:	80da      	strh	r2, [r3, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     b00:	428a      	cmp	r2, r1
     b02:	d217      	bcs.n	b34 <nrf52_spi0_irq_handler+0x5c>
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
     b04:	1a89      	subs	r1, r1, r2
     b06:	b289      	uxth	r1, r1
            spi->nhs_txbuf += xfr_bytes;
     b08:	699d      	ldr	r5, [r3, #24]
            if (spi->nhs_rxbuf) {
     b0a:	69da      	ldr	r2, [r3, #28]
     b0c:	b280      	uxth	r0, r0
            spim->TXD.MAXCNT = len;
     b0e:	29ff      	cmp	r1, #255	; 0xff
            spi->nhs_txbuf += xfr_bytes;
     b10:	4405      	add	r5, r0
            spim->TXD.MAXCNT = len;
     b12:	bf28      	it	cs
     b14:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
     b16:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
            spi->nhs_txbuf += xfr_bytes;
     b1a:	619d      	str	r5, [r3, #24]
            spim->TXD.MAXCNT = len;
     b1c:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
            if (spi->nhs_rxbuf) {
     b20:	b12a      	cbz	r2, b2e <nrf52_spi0_irq_handler+0x56>
                spi->nhs_rxbuf += xfr_bytes;
     b22:	4402      	add	r2, r0
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
     b24:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
                spi->nhs_rxbuf += xfr_bytes;
     b28:	61da      	str	r2, [r3, #28]
                spim->RXD.MAXCNT = len;
     b2a:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
            spim->TASKS_START = 1;
     b2e:	2301      	movs	r3, #1
     b30:	6123      	str	r3, [r4, #16]
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
     b32:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
     b34:	6a1b      	ldr	r3, [r3, #32]
     b36:	b10b      	cbz	r3, b3c <nrf52_spi0_irq_handler+0x64>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
     b38:	6a68      	ldr	r0, [r5, #36]	; 0x24
     b3a:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
     b3c:	2300      	movs	r3, #0
     b3e:	706b      	strb	r3, [r5, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
     b40:	2340      	movs	r3, #64	; 0x40
     b42:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
     b46:	e7f4      	b.n	b32 <nrf52_spi0_irq_handler+0x5a>
     b48:	20001970 	.word	0x20001970

00000b4c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     b4c:	2802      	cmp	r0, #2
{
     b4e:	b530      	push	{r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     b50:	f300 8085 	bgt.w	c5e <hal_spi_config+0x112>
     b54:	4b44      	ldr	r3, [pc, #272]	; (c68 <hal_spi_config+0x11c>)
     b56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d07f      	beq.n	c5e <hal_spi_config+0x112>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
     b5e:	691c      	ldr	r4, [r3, #16]
    if (spim->ENABLE != 0) {
     b60:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
     b64:	2800      	cmp	r0, #0
     b66:	d17c      	bne.n	c62 <hal_spi_config+0x116>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     b68:	781a      	ldrb	r2, [r3, #0]
     b6a:	2a00      	cmp	r2, #0
     b6c:	d164      	bne.n	c38 <hal_spi_config+0xec>
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
     b6e:	680a      	ldr	r2, [r1, #0]
     b70:	609a      	str	r2, [r3, #8]
     b72:	684a      	ldr	r2, [r1, #4]
     b74:	60da      	str	r2, [r3, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     b76:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    if (settings->data_mode <= HAL_SPI_MODE1) {
     b7a:	780d      	ldrb	r5, [r1, #0]
     b7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     b80:	f003 031f 	and.w	r3, r3, #31
     b84:	2201      	movs	r2, #1
        port->OUTCLR = (1UL << pin);
     b86:	409a      	lsls	r2, r3
    if (settings->data_mode <= HAL_SPI_MODE1) {
     b88:	2d01      	cmp	r5, #1
        port->OUTCLR = (1UL << pin);
     b8a:	bf94      	ite	ls
     b8c:	f8c0 250c 	strls.w	r2, [r0, #1292]	; 0x50c
        port->OUTSET = (1UL << pin);
     b90:	f8c0 2508 	strhi.w	r2, [r0, #1288]	; 0x508
    port->PIN_CNF[pin] =
     b94:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     b9c:	2003      	movs	r0, #3
     b9e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    switch (settings->word_size) {
     ba2:	788b      	ldrb	r3, [r1, #2]
     ba4:	2b00      	cmp	r3, #0
            rc = EINVAL;
     ba6:	bf0c      	ite	eq
     ba8:	2000      	moveq	r0, #0
     baa:	2016      	movne	r0, #22
    switch (settings->data_mode) {
     bac:	2d03      	cmp	r5, #3
     bae:	d81e      	bhi.n	bee <hal_spi_config+0xa2>
     bb0:	e8df f005 	tbb	[pc, r5]
     bb4:	1b190220 	.word	0x1b190220
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     bb8:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     bba:	784a      	ldrb	r2, [r1, #1]
     bbc:	2a01      	cmp	r2, #1
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
     bbe:	bf08      	it	eq
     bc0:	f043 0301 	orreq.w	r3, r3, #1
    spim->CONFIG = nrf_config;
     bc4:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    switch (settings->baudrate) {
     bc8:	684b      	ldr	r3, [r1, #4]
     bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     bce:	d027      	beq.n	c20 <hal_spi_config+0xd4>
     bd0:	d812      	bhi.n	bf8 <hal_spi_config+0xac>
     bd2:	2bfa      	cmp	r3, #250	; 0xfa
     bd4:	d01c      	beq.n	c10 <hal_spi_config+0xc4>
     bd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     bda:	d01e      	beq.n	c1a <hal_spi_config+0xce>
     bdc:	2b7d      	cmp	r3, #125	; 0x7d
     bde:	d128      	bne.n	c32 <hal_spi_config+0xe6>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
     be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     be4:	e016      	b.n	c14 <hal_spi_config+0xc8>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     be6:	2304      	movs	r3, #4
     be8:	e7e7      	b.n	bba <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     bea:	2306      	movs	r3, #6
     bec:	e7e5      	b.n	bba <hal_spi_config+0x6e>
            nrf_config = 0;
     bee:	2300      	movs	r3, #0
            rc = EINVAL;
     bf0:	2016      	movs	r0, #22
     bf2:	e7e2      	b.n	bba <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     bf4:	2300      	movs	r3, #0
     bf6:	e7e0      	b.n	bba <hal_spi_config+0x6e>
    switch (settings->baudrate) {
     bf8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
     bfc:	d013      	beq.n	c26 <hal_spi_config+0xda>
     bfe:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
     c02:	d013      	beq.n	c2c <hal_spi_config+0xe0>
     c04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     c08:	d113      	bne.n	c32 <hal_spi_config+0xe6>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
     c0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     c0e:	e001      	b.n	c14 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
     c10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    spim->FREQUENCY = frequency;
     c14:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
     c18:	bd30      	pop	{r4, r5, pc}
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
     c1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c1e:	e7f9      	b.n	c14 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
     c20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     c24:	e7f6      	b.n	c14 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
     c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c2a:	e7f3      	b.n	c14 <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
     c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
     c30:	e7f0      	b.n	c14 <hal_spi_config+0xc8>
            frequency = 0;
     c32:	2300      	movs	r3, #0
            rc = EINVAL;
     c34:	2016      	movs	r0, #22
     c36:	e7ed      	b.n	c14 <hal_spi_config+0xc8>
        rc = hal_spi_config_slave(spi, settings);
     c38:	780b      	ldrb	r3, [r1, #0]
     c3a:	784d      	ldrb	r5, [r1, #1]
     c3c:	788a      	ldrb	r2, [r1, #2]
     c3e:	2b03      	cmp	r3, #3
     c40:	bf99      	ittee	ls
     c42:	490a      	ldrls	r1, [pc, #40]	; (c6c <hal_spi_config+0x120>)
     c44:	5ccb      	ldrbls	r3, [r1, r3]
     c46:	4603      	movhi	r3, r0
     c48:	2016      	movhi	r0, #22
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     c4a:	2d01      	cmp	r5, #1
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
     c4c:	bf08      	it	eq
     c4e:	f043 0301 	orreq.w	r3, r3, #1
    switch (settings->word_size) {
     c52:	2a00      	cmp	r2, #0
    spis->CONFIG = nrf_config;
     c54:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
            rc = EINVAL;
     c58:	bf18      	it	ne
     c5a:	2016      	movne	r0, #22
     c5c:	e7dc      	b.n	c18 <hal_spi_config+0xcc>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     c5e:	2016      	movs	r0, #22
     c60:	e7da      	b.n	c18 <hal_spi_config+0xcc>
        return -1;
     c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c66:	e7d7      	b.n	c18 <hal_spi_config+0xcc>
     c68:	00003b88 	.word	0x00003b88
     c6c:	00003b84 	.word	0x00003b84

00000c70 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     c70:	2802      	cmp	r0, #2
     c72:	dc18      	bgt.n	ca6 <hal_spi_enable+0x36>
     c74:	4b0d      	ldr	r3, [pc, #52]	; (cac <hal_spi_enable+0x3c>)
     c76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     c7a:	b1a3      	cbz	r3, ca6 <hal_spi_enable+0x36>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     c7c:	7818      	ldrb	r0, [r3, #0]
     c7e:	b920      	cbnz	r0, c8a <hal_spi_enable+0x1a>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
     c80:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
     c82:	2201      	movs	r2, #1

        spis = spi->nhs_spi.spis;
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
     c84:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     c88:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
     c8a:	6a1a      	ldr	r2, [r3, #32]
     c8c:	b15a      	cbz	r2, ca6 <hal_spi_enable+0x36>
        spis = spi->nhs_spi.spis;
     c8e:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
     c90:	2000      	movs	r0, #0
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
     c92:	f240 4202 	movw	r2, #1026	; 0x402
        spis->EVENTS_END = 0;
     c96:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
     c9a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
     c9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
     ca2:	2202      	movs	r2, #2
     ca4:	e7ee      	b.n	c84 <hal_spi_enable+0x14>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     ca6:	2016      	movs	r0, #22
    }
    rc = 0;

err:
    return rc;
}
     ca8:	4770      	bx	lr
     caa:	bf00      	nop
     cac:	00003b88 	.word	0x00003b88

00000cb0 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     cb0:	2802      	cmp	r0, #2
     cb2:	dc27      	bgt.n	d04 <hal_spi_disable+0x54>
     cb4:	4b14      	ldr	r3, [pc, #80]	; (d08 <hal_spi_disable+0x58>)
     cb6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     cba:	b31b      	cbz	r3, d04 <hal_spi_disable+0x54>
     cbc:	691a      	ldr	r2, [r3, #16]

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     cbe:	7818      	ldrb	r0, [r3, #0]
     cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        spim = spi->nhs_spi.spim;
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     cc4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     cc8:	b998      	cbnz	r0, cf2 <hal_spi_disable+0x42>

        if (spi->spi_xfr_flag) {
     cca:	7859      	ldrb	r1, [r3, #1]
     ccc:	b149      	cbz	r1, ce2 <hal_spi_disable+0x32>
    spim->TASKS_STOP = 1;
     cce:	2101      	movs	r1, #1
     cd0:	6151      	str	r1, [r2, #20]
    while (!spim->EVENTS_STOPPED) {}
     cd2:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
     cd6:	2900      	cmp	r1, #0
     cd8:	d0fb      	beq.n	cd2 <hal_spi_disable+0x22>
    spim->EVENTS_STOPPED = 0;
     cda:	2100      	movs	r1, #0
     cdc:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
     ce0:	7059      	strb	r1, [r3, #1]
        }
        spim->ENABLE = 0;
     ce2:	2100      	movs	r1, #0
     ce4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
     ce8:	2000      	movs	r0, #0
    spi->nhs_rxbuf = NULL;
     cea:	e9c3 0006 	strd	r0, r0, [r3, #24]
    spi->nhs_buflen = 0;
     cee:	6058      	str	r0, [r3, #4]
     cf0:	4770      	bx	lr
        spis->EVENTS_END = 0;
     cf2:	2100      	movs	r1, #0
     cf4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
     cf8:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
        spis->ENABLE = 0;
     cfc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
     d00:	70d9      	strb	r1, [r3, #3]
     d02:	e7f1      	b.n	ce8 <hal_spi_disable+0x38>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d04:	2016      	movs	r0, #22

    rc = 0;

err:
    return rc;
}
     d06:	4770      	bx	lr
     d08:	00003b88 	.word	0x00003b88

00000d0c <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d0c:	2802      	cmp	r0, #2
{
     d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d10:	4604      	mov	r4, r0
     d12:	460e      	mov	r6, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d14:	dc5e      	bgt.n	dd4 <hal_spi_init+0xc8>
     d16:	4b30      	ldr	r3, [pc, #192]	; (dd8 <hal_spi_init+0xcc>)
     d18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     d1c:	2b00      	cmp	r3, #0
     d1e:	d059      	beq.n	dd4 <hal_spi_init+0xc8>
    if (cfg == NULL) {
     d20:	2900      	cmp	r1, #0
     d22:	d057      	beq.n	dd4 <hal_spi_init+0xc8>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
     d24:	2a01      	cmp	r2, #1
     d26:	d855      	bhi.n	dd4 <hal_spi_init+0xc8>
    spi->spi_type  = spi_type;
     d28:	701a      	strb	r2, [r3, #0]
    if (spi_num == 0) {
     d2a:	2800      	cmp	r0, #0
     d2c:	d152      	bne.n	dd4 <hal_spi_init+0xc8>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
     d2e:	4d2b      	ldr	r5, [pc, #172]	; (ddc <hal_spi_init+0xd0>)
     d30:	2703      	movs	r7, #3
     d32:	752f      	strb	r7, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
     d34:	2a00      	cmp	r2, #0
     d36:	d148      	bne.n	dca <hal_spi_init+0xbe>
            spi->nhs_spi.spim = NRF_SPIM0;
     d38:	4b29      	ldr	r3, [pc, #164]	; (de0 <hal_spi_init+0xd4>)
     d3a:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
     d3c:	f7ff ffb8 	bl	cb0 <hal_spi_disable>
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
     d40:	7871      	ldrb	r1, [r6, #1]
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
     d42:	78b0      	ldrb	r0, [r6, #2]
     d44:	f896 c000 	ldrb.w	ip, [r6]
    port->OUTCLR = (1UL << pin);
     d48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d4c:	2301      	movs	r3, #1
     d4e:	fa03 f601 	lsl.w	r6, r3, r1
     d52:	f8c2 650c 	str.w	r6, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin] =
     d56:	f501 76e0 	add.w	r6, r1, #448	; 0x1c0
     d5a:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
    port->PIN_CNF[pin] =
     d5e:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
     d62:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
     d66:	692a      	ldr	r2, [r5, #16]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     d68:	4e1e      	ldr	r6, [pc, #120]	; (de4 <hal_spi_init+0xd8>)
    spim->PSEL.SCK = cfg->sck_pin;
     d6a:	f8c2 c508 	str.w	ip, [r2, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
     d6e:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     d72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    spim->PSEL.MISO = cfg->miso_pin;
     d76:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     d7a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
     d7e:	f995 2014 	ldrsb.w	r2, [r5, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     d82:	4919      	ldr	r1, [pc, #100]	; (de8 <hal_spi_init+0xdc>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     d84:	f102 0510 	add.w	r5, r2, #16
  uint32_t vectors = (uint32_t )SCB->VTOR;
     d88:	6888      	ldr	r0, [r1, #8]
  if ((int32_t)(IRQn) >= 0)
     d8a:	2a00      	cmp	r2, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     d8c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
  if ((int32_t)(IRQn) >= 0)
     d90:	db14      	blt.n	dbc <hal_spi_init+0xb0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d92:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
     d96:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
     d9a:	20e0      	movs	r0, #224	; 0xe0
     d9c:	f881 0300 	strb.w	r0, [r1, #768]	; 0x300
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     da0:	f002 011f 	and.w	r1, r2, #31
     da4:	0952      	lsrs	r2, r2, #5
     da6:	0092      	lsls	r2, r2, #2
     da8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
     dac:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
     db0:	408b      	lsls	r3, r1
     db2:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     db6:	6013      	str	r3, [r2, #0]
}
     db8:	4620      	mov	r0, r4
     dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dbc:	f002 020f 	and.w	r2, r2, #15
     dc0:	3a04      	subs	r2, #4
     dc2:	440a      	add	r2, r1
     dc4:	23e0      	movs	r3, #224	; 0xe0
     dc6:	7613      	strb	r3, [r2, #24]
     dc8:	e7f6      	b.n	db8 <hal_spi_init+0xac>
            assert(0);
     dca:	4603      	mov	r3, r0
     dcc:	4602      	mov	r2, r0
     dce:	4601      	mov	r1, r0
     dd0:	f000 fa66 	bl	12a0 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     dd4:	2416      	movs	r4, #22
     dd6:	e7ef      	b.n	db8 <hal_spi_init+0xac>
     dd8:	00003b88 	.word	0x00003b88
     ddc:	20001970 	.word	0x20001970
     de0:	40003000 	.word	0x40003000
     de4:	00000ad9 	.word	0x00000ad9
     de8:	e000ed00 	.word	0xe000ed00

00000dec <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
     dec:	2802      	cmp	r0, #2
     dee:	dc16      	bgt.n	e1e <hal_spi_tx_val+0x32>
     df0:	4b0d      	ldr	r3, [pc, #52]	; (e28 <hal_spi_tx_val+0x3c>)
     df2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     df6:	b193      	cbz	r3, e1e <hal_spi_tx_val+0x32>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     df8:	781a      	ldrb	r2, [r3, #0]
     dfa:	b992      	cbnz	r2, e22 <hal_spi_tx_val+0x36>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
     dfc:	691b      	ldr	r3, [r3, #16]
        spi->EVENTS_READY = 0;
        spi->TXD = (uint8_t)val;
     dfe:	b2c9      	uxtb	r1, r1
        spi->EVENTS_READY = 0;
     e00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        spi->TXD = (uint8_t)val;
     e04:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
     e08:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     e0c:	2a00      	cmp	r2, #0
     e0e:	d0fb      	beq.n	e08 <hal_spi_tx_val+0x1c>
        spi->EVENTS_READY = 0;
     e10:	2200      	movs	r2, #0
     e12:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
     e16:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
     e1a:	b280      	uxth	r0, r0
     e1c:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
     e1e:	2016      	movs	r0, #22
     e20:	4770      	bx	lr
        retval = 0xFFFF;
     e22:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
     e26:	4770      	bx	lr
     e28:	00003b88 	.word	0x00003b88

00000e2c <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     e2c:	2802      	cmp	r0, #2
     e2e:	dc0a      	bgt.n	e46 <hal_spi_set_txrx_cb+0x1a>
     e30:	4b07      	ldr	r3, [pc, #28]	; (e50 <hal_spi_set_txrx_cb+0x24>)
     e32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     e36:	b133      	cbz	r3, e46 <hal_spi_set_txrx_cb+0x1a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
     e38:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
     e3a:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
     e3e:	b920      	cbnz	r0, e4a <hal_spi_set_txrx_cb+0x1e>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
        spi->txrx_cb_arg = arg;
     e40:	e9c3 1208 	strd	r1, r2, [r3, #32]
     e44:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     e46:	2016      	movs	r0, #22
     e48:	4770      	bx	lr
        rc = -1;
     e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
     e4e:	4770      	bx	lr
     e50:	00003b88 	.word	0x00003b88

00000e54 <hal_spi_txrx>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx(int spi_num, void *txbuf, void *rxbuf, int len)
{
     e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e56:	460d      	mov	r5, r1
     e58:	4617      	mov	r7, r2
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
     e5a:	461e      	mov	r6, r3
     e5c:	2b00      	cmp	r3, #0
     e5e:	d03d      	beq.n	edc <hal_spi_txrx+0x88>
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
     e60:	2802      	cmp	r0, #2
     e62:	dc3b      	bgt.n	edc <hal_spi_txrx+0x88>
     e64:	4b1e      	ldr	r3, [pc, #120]	; (ee0 <hal_spi_txrx+0x8c>)
     e66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     e6a:	b3bb      	cbz	r3, edc <hal_spi_txrx+0x88>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     e6c:	781a      	ldrb	r2, [r3, #0]
     e6e:	bbaa      	cbnz	r2, edc <hal_spi_txrx+0x88>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
     e70:	b3a1      	cbz	r1, edc <hal_spi_txrx+0x88>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
     e72:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
     e74:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
     e78:	2b07      	cmp	r3, #7
     e7a:	d105      	bne.n	e88 <hal_spi_txrx+0x34>
            hal_spi_disable(spi_num);
     e7c:	f7ff ff18 	bl	cb0 <hal_spi_disable>
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
     e80:	2301      	movs	r3, #1
     e82:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
     e86:	e001      	b.n	e8c <hal_spi_txrx+0x38>
        if (enabled == 0) {
     e88:	2b00      	cmp	r3, #0
     e8a:	d0f9      	beq.n	e80 <hal_spi_txrx+0x2c>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
            spi->EVENTS_READY = 0;
     e8c:	2300      	movs	r3, #0
        while (spi->EVENTS_READY) {
     e8e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
     e92:	b948      	cbnz	r0, ea8 <hal_spi_txrx+0x54>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
     e94:	782b      	ldrb	r3, [r5, #0]
     e96:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
        rxd = (uint8_t *)rxbuf;
     e9a:	4639      	mov	r1, r7
        txcnt = len - 1;
     e9c:	1e73      	subs	r3, r6, #1
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
            spi->EVENTS_READY = 0;
     e9e:	4602      	mov	r2, r0
        for (i = 0; i < len; ++i) {
     ea0:	42b0      	cmp	r0, r6
     ea2:	db06      	blt.n	eb2 <hal_spi_txrx+0x5e>
            if (rxbuf) {
                *rxd = rxval;
                ++rxd;
            }
        }
        return 0;
     ea4:	2000      	movs	r0, #0
    }

err:
    return rc;
}
     ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxval = (uint8_t)spi->RXD;
     ea8:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
     eac:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
     eb0:	e7ed      	b.n	e8e <hal_spi_txrx+0x3a>
            if (txcnt) {
     eb2:	b12b      	cbz	r3, ec0 <hal_spi_txrx+0x6c>
                spi->TXD = *txd;
     eb4:	f895 c001 	ldrb.w	ip, [r5, #1]
     eb8:	f8c4 c51c 	str.w	ip, [r4, #1308]	; 0x51c
                --txcnt;
     ebc:	3b01      	subs	r3, #1
                ++txd;
     ebe:	3501      	adds	r5, #1
            while (!spi->EVENTS_READY) {}
     ec0:	f8d4 c108 	ldr.w	ip, [r4, #264]	; 0x108
     ec4:	f1bc 0f00 	cmp.w	ip, #0
     ec8:	d0fa      	beq.n	ec0 <hal_spi_txrx+0x6c>
            spi->EVENTS_READY = 0;
     eca:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
     ece:	f8d4 c518 	ldr.w	ip, [r4, #1304]	; 0x518
            if (rxbuf) {
     ed2:	b10f      	cbz	r7, ed8 <hal_spi_txrx+0x84>
            rxval = (uint8_t)spi->RXD;
     ed4:	f801 cb01 	strb.w	ip, [r1], #1
        for (i = 0; i < len; ++i) {
     ed8:	3001      	adds	r0, #1
     eda:	e7e1      	b.n	ea0 <hal_spi_txrx+0x4c>
    return rc;
     edc:	2016      	movs	r0, #22
     ede:	e7e2      	b.n	ea6 <hal_spi_txrx+0x52>
     ee0:	00003b88 	.word	0x00003b88

00000ee4 <hal_system_start>:
void __attribute__((naked))
hal_system_start(void *img_start)
{
    uint32_t *img_data = img_start;

    asm volatile (".syntax unified        \n"
     ee4:	e9d0 3200 	ldrd	r3, r2, [r0]
     ee8:	f383 8808 	msr	MSP, r3
     eec:	4710      	bx	r2
	...

00000ef0 <nrf52_wdt_irq_handler>:
/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     ef0:	4a07      	ldr	r2, [pc, #28]	; (f10 <nrf52_wdt_irq_handler+0x20>)
{
     ef2:	b508      	push	{r3, lr}
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     ef4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
     ef8:	07db      	lsls	r3, r3, #31
     efa:	d507      	bpl.n	f0c <nrf52_wdt_irq_handler+0x1c>
        NRF_WDT->EVENTS_TIMEOUT = 0;
     efc:	2300      	movs	r3, #0
     efe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    assert(0);
     f02:	4619      	mov	r1, r3
     f04:	461a      	mov	r2, r3
     f06:	4618      	mov	r0, r3
     f08:	f000 f9ca 	bl	12a0 <__assert_func>
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
     f0c:	bd08      	pop	{r3, pc}
     f0e:	bf00      	nop
     f10:	40010000 	.word	0x40010000

00000f14 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     f14:	4a16      	ldr	r2, [pc, #88]	; (f70 <hal_watchdog_init+0x5c>)
{
     f16:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     f18:	2301      	movs	r3, #1
     f1a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
     f1e:	4b15      	ldr	r3, [pc, #84]	; (f74 <hal_watchdog_init+0x60>)
     f20:	4298      	cmp	r0, r3
     f22:	d905      	bls.n	f30 <hal_watchdog_init+0x1c>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
     f24:	2300      	movs	r3, #0
     f26:	461a      	mov	r2, r3
     f28:	4619      	mov	r1, r3
     f2a:	4618      	mov	r0, r3
     f2c:	f000 f9b8 	bl	12a0 <__assert_func>
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
     f30:	2360      	movs	r3, #96	; 0x60
     f32:	4343      	muls	r3, r0
     f34:	217d      	movs	r1, #125	; 0x7d
     f36:	fbb3 f3f1 	udiv	r3, r3, r1
     f3a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  uint32_t vectors = (uint32_t )SCB->VTOR;
     f3e:	4b0e      	ldr	r3, [pc, #56]	; (f78 <hal_watchdog_init+0x64>)
     f40:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
     f44:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     f46:	490d      	ldr	r1, [pc, #52]	; (f7c <hal_watchdog_init+0x68>)
     f48:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f4c:	4b0c      	ldr	r3, [pc, #48]	; (f80 <hal_watchdog_init+0x6c>)
     f4e:	21e0      	movs	r1, #224	; 0xe0
     f50:	f883 1310 	strb.w	r1, [r3, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f54:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     f58:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f5c:	6019      	str	r1, [r3, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
     f5e:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     f62:	f043 0301 	orr.w	r3, r3, #1
     f66:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

    return (0);
}
     f6a:	2000      	movs	r0, #0
     f6c:	bd08      	pop	{r3, pc}
     f6e:	bf00      	nop
     f70:	40010000 	.word	0x40010000
     f74:	02aaaaaa 	.word	0x02aaaaaa
     f78:	e000ed00 	.word	0xe000ed00
     f7c:	00000ef1 	.word	0x00000ef1
     f80:	e000e100 	.word	0xe000e100

00000f84 <nrf52_periph_create>:
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
     f84:	2100      	movs	r1, #0
#endif
}

void
nrf52_periph_create(void)
{
     f86:	b508      	push	{r3, lr}
    rc = hal_timer_init(0, NULL);
     f88:	4608      	mov	r0, r1
     f8a:	f000 f8d7 	bl	113c <hal_timer_init>
    assert(rc == 0);
     f8e:	b128      	cbz	r0, f9c <nrf52_periph_create+0x18>
     f90:	2300      	movs	r3, #0
     f92:	461a      	mov	r2, r3
     f94:	4619      	mov	r1, r3
     f96:	4618      	mov	r0, r3
     f98:	f000 f982 	bl	12a0 <__assert_func>
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
     f9c:	4805      	ldr	r0, [pc, #20]	; (fb4 <nrf52_periph_create+0x30>)
     f9e:	f000 f9f1 	bl	1384 <os_cputime_init>
    assert(rc == 0);
     fa2:	4602      	mov	r2, r0
     fa4:	2800      	cmp	r0, #0
     fa6:	d1f3      	bne.n	f90 <nrf52_periph_create+0xc>
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
     fa8:	4903      	ldr	r1, [pc, #12]	; (fb8 <nrf52_periph_create+0x34>)
     faa:	f7ff feaf 	bl	d0c <hal_spi_init>
    assert(rc == 0);
     fae:	2800      	cmp	r0, #0
     fb0:	d1ee      	bne.n	f90 <nrf52_periph_create+0xc>
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
     fb2:	bd08      	pop	{r3, pc}
     fb4:	000f4240 	.word	0x000f4240
     fb8:	00003b94 	.word	0x00003b94

00000fbc <__NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
     fbc:	2800      	cmp	r0, #0
     fbe:	db09      	blt.n	fd4 <__NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fc0:	0943      	lsrs	r3, r0, #5
     fc2:	2201      	movs	r2, #1
     fc4:	f000 001f 	and.w	r0, r0, #31
     fc8:	fa02 f000 	lsl.w	r0, r2, r0
     fcc:	3340      	adds	r3, #64	; 0x40
     fce:	4a02      	ldr	r2, [pc, #8]	; (fd8 <__NVIC_SetPendingIRQ+0x1c>)
     fd0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     fd4:	4770      	bx	lr
     fd6:	bf00      	nop
     fd8:	e000e100 	.word	0xe000e100

00000fdc <hal_timer_read_bsptimer>:
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
}

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
     fdc:	b538      	push	{r3, r4, r5, lr}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     fde:	6903      	ldr	r3, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fe0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     fe4:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    low32 = rtctimer->COUNTER;
     fe6:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
     fea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    tcntr = bsptimer->tmr_cntr;
     fee:	6844      	ldr	r4, [r0, #4]
    if (rtctimer->EVENTS_OVRFLW) {
     ff0:	b15a      	cbz	r2, 100a <hal_timer_read_bsptimer+0x2e>
        tcntr += (1UL << 24);
     ff2:	f104 7480 	add.w	r4, r4, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
        low32 = rtctimer->COUNTER;
        rtctimer->EVENTS_OVRFLW = 0;
     ff6:	2200      	movs	r2, #0
        bsptimer->tmr_cntr = tcntr;
     ff8:	6044      	str	r4, [r0, #4]
        low32 = rtctimer->COUNTER;
     ffa:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
     ffe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1002:	f990 0001 	ldrsb.w	r0, [r0, #1]
    1006:	f7ff ffd9 	bl	fbc <__NVIC_SetPendingIRQ>
    }
    tcntr |= low32;
    100a:	ea41 0004 	orr.w	r0, r1, r4
    __HAL_ENABLE_INTERRUPTS(ctx);
    100e:	b905      	cbnz	r5, 1012 <hal_timer_read_bsptimer+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
    1010:	b662      	cpsie	i

    return tcntr;
}
    1012:	bd38      	pop	{r3, r4, r5, pc}

00001014 <nrf_timer_set_ocmp>:
{
    1014:	b430      	push	{r4, r5}
    if (bsptimer->tmr_rtc) {
    1016:	7884      	ldrb	r4, [r0, #2]
    1018:	6903      	ldr	r3, [r0, #16]
    101a:	b344      	cbz	r4, 106e <nrf_timer_set_ocmp+0x5a>
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    101c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1020:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        cntr = rtctimer->COUNTER;
    1024:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    1028:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
        temp = bsptimer->tmr_cntr;
    102c:	6842      	ldr	r2, [r0, #4]
        if (rtctimer->EVENTS_OVRFLW) {
    102e:	b11d      	cbz	r5, 1038 <nrf_timer_set_ocmp+0x24>
            cntr = rtctimer->COUNTER;
    1030:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
            temp += (1UL << 24);
    1034:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
        temp |= cntr;
    1038:	4322      	orrs	r2, r4
        delta_t = (int32_t)(expiry - temp);
    103a:	1a8a      	subs	r2, r1, r2
        if (delta_t < 3) {
    103c:	2a02      	cmp	r2, #2
    103e:	dc04      	bgt.n	104a <nrf_timer_set_ocmp+0x36>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1040:	f990 0001 	ldrsb.w	r0, [r0, #1]
}
    1044:	bc30      	pop	{r4, r5}
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1046:	f7ff bfb9 	b.w	fbc <__NVIC_SetPendingIRQ>
            if (delta_t < (1UL << 24)) {
    104a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    104e:	bf34      	ite	cc
    1050:	f021 417f 	biccc.w	r1, r1, #4278190080	; 0xff000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    1054:	f504 0400 	addcs.w	r4, r4, #8388608	; 0x800000
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1058:	f44f 2280 	mov.w	r2, #262144	; 0x40000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    105c:	bf34      	ite	cc
    105e:	f8c3 1548 	strcc.w	r1, [r3, #1352]	; 0x548
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    1062:	f8c3 4548 	strcs.w	r4, [r3, #1352]	; 0x548
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1066:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    106a:	bc30      	pop	{r4, r5}
    106c:	4770      	bx	lr
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    106e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1072:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    1076:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    107a:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    107e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1082:	2201      	movs	r2, #1
    1084:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1086:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    108a:	1a59      	subs	r1, r3, r1
    108c:	2900      	cmp	r1, #0
    108e:	dad7      	bge.n	1040 <nrf_timer_set_ocmp+0x2c>
    1090:	e7eb      	b.n	106a <nrf_timer_set_ocmp+0x56>
	...

00001094 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    1094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hwtimer = bsptimer->tmr_reg;
    1098:	4c27      	ldr	r4, [pc, #156]	; (1138 <nrf52_timer0_irq_handler+0xa4>)
    109a:	6926      	ldr	r6, [r4, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    109c:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    if (compare) {
    10a0:	b113      	cbz	r3, 10a8 <nrf52_timer0_irq_handler+0x14>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    10a2:	2300      	movs	r3, #0
    10a4:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
    ++bsptimer->timer_isrs;
    10a8:	68a3      	ldr	r3, [r4, #8]
    10aa:	3301      	adds	r3, #1
    10ac:	60a3      	str	r3, [r4, #8]
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    10ae:	f8d6 3308 	ldr.w	r3, [r6, #776]	; 0x308
    10b2:	031b      	lsls	r3, r3, #12
    10b4:	d53b      	bpl.n	112e <nrf52_timer0_irq_handler+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10b6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    10ba:	b672      	cpsid	i
            tcntr = hal_timer_read_bsptimer(bsptimer);
    10bc:	f8df a078 	ldr.w	sl, [pc, #120]	; 1138 <nrf52_timer0_irq_handler+0xa4>
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    10c0:	f04f 0801 	mov.w	r8, #1
            delta = 0;
    10c4:	f04f 0900 	mov.w	r9, #0
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    10c8:	6965      	ldr	r5, [r4, #20]
    10ca:	b155      	cbz	r5, 10e2 <nrf52_timer0_irq_handler+0x4e>
        if (bsptimer->tmr_rtc) {
    10cc:	78a3      	ldrb	r3, [r4, #2]
    10ce:	b193      	cbz	r3, 10f6 <nrf52_timer0_irq_handler+0x62>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    10d0:	4650      	mov	r0, sl
    10d2:	f7ff ff83 	bl	fdc <hal_timer_read_bsptimer>
            delta = -3;
    10d6:	f06f 0302 	mvn.w	r3, #2
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
    10da:	68ea      	ldr	r2, [r5, #12]
    10dc:	1a80      	subs	r0, r0, r2
    10de:	4298      	cmp	r0, r3
    10e0:	da0f      	bge.n	1102 <nrf52_timer0_irq_handler+0x6e>
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    10e2:	6963      	ldr	r3, [r4, #20]
    if (timer) {
    10e4:	b9db      	cbnz	r3, 111e <nrf52_timer0_irq_handler+0x8a>
        if (bsptimer->tmr_rtc) {
    10e6:	78a2      	ldrb	r2, [r4, #2]
    10e8:	6923      	ldr	r3, [r4, #16]
    10ea:	b312      	cbz	r2, 1132 <nrf52_timer0_irq_handler+0x9e>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    10ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    10f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    10f4:	e017      	b.n	1126 <nrf52_timer0_irq_handler+0x92>
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    10f6:	6922      	ldr	r2, [r4, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    10f8:	f8c2 8048 	str.w	r8, [r2, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    10fc:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
    1100:	e7eb      	b.n	10da <nrf52_timer0_irq_handler+0x46>
    1102:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    1106:	b143      	cbz	r3, 111a <nrf52_timer0_irq_handler+0x86>
    1108:	615a      	str	r2, [r3, #20]
    110a:	696a      	ldr	r2, [r5, #20]
    110c:	6013      	str	r3, [r2, #0]
            timer->cb_func(timer->cb_arg);
    110e:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
            timer->link.tqe_prev = NULL;
    1112:	f8c5 9014 	str.w	r9, [r5, #20]
            timer->cb_func(timer->cb_arg);
    1116:	4798      	blx	r3
    1118:	e7d6      	b.n	10c8 <nrf52_timer0_irq_handler+0x34>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    111a:	61a2      	str	r2, [r4, #24]
    111c:	e7f5      	b.n	110a <nrf52_timer0_irq_handler+0x76>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    111e:	68d9      	ldr	r1, [r3, #12]
    1120:	4805      	ldr	r0, [pc, #20]	; (1138 <nrf52_timer0_irq_handler+0xa4>)
    1122:	f7ff ff77 	bl	1014 <nrf_timer_set_ocmp>
    __HAL_ENABLE_INTERRUPTS(ctx);
    1126:	b907      	cbnz	r7, 112a <nrf52_timer0_irq_handler+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
    1128:	b662      	cpsie	i
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    112a:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    hal_timer_irq_handler(&nrf52_hal_timer0);
}
    112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1132:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1136:	e7db      	b.n	10f0 <nrf52_timer0_irq_handler+0x5c>
    1138:	20001998 	.word	0x20001998

0000113c <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    113c:	2805      	cmp	r0, #5
    113e:	dc1d      	bgt.n	117c <hal_timer_init+0x40>
    1140:	4b0f      	ldr	r3, [pc, #60]	; (1180 <hal_timer_init+0x44>)
    1142:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1146:	b1cb      	cbz	r3, 117c <hal_timer_init+0x40>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	b9bb      	cbnz	r3, 117c <hal_timer_init+0x40>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    114c:	b9b0      	cbnz	r0, 117c <hal_timer_init+0x40>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    114e:	4b0d      	ldr	r3, [pc, #52]	; (1184 <hal_timer_init+0x48>)
    1150:	4a0d      	ldr	r2, [pc, #52]	; (1188 <hal_timer_init+0x4c>)
    1152:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    1154:	2208      	movs	r2, #8
    1156:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1158:	4b0c      	ldr	r3, [pc, #48]	; (118c <hal_timer_init+0x50>)
    115a:	f44f 7280 	mov.w	r2, #256	; 0x100
    115e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1162:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1166:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    116a:	22e0      	movs	r2, #224	; 0xe0
    116c:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1170:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1174:	4a06      	ldr	r2, [pc, #24]	; (1190 <hal_timer_init+0x54>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1176:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1178:	661a      	str	r2, [r3, #96]	; 0x60
    117a:	4770      	bx	lr
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;

err:
    return rc;
    117c:	2016      	movs	r0, #22
}
    117e:	4770      	bx	lr
    1180:	00003b98 	.word	0x00003b98
    1184:	20001998 	.word	0x20001998
    1188:	40008000 	.word	0x40008000
    118c:	e000e100 	.word	0xe000e100
    1190:	00001095 	.word	0x00001095

00001194 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1194:	2805      	cmp	r0, #5
{
    1196:	b530      	push	{r4, r5, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1198:	dc5c      	bgt.n	1254 <hal_timer_config+0xc0>
    119a:	4b30      	ldr	r3, [pc, #192]	; (125c <hal_timer_config+0xc8>)
    119c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    11a0:	2c00      	cmp	r4, #0
    11a2:	d057      	beq.n	1254 <hal_timer_config+0xc0>
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    11a4:	7822      	ldrb	r2, [r4, #0]
    11a6:	2a00      	cmp	r2, #0
    11a8:	d154      	bne.n	1254 <hal_timer_config+0xc0>
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    11aa:	4b2d      	ldr	r3, [pc, #180]	; (1260 <hal_timer_config+0xcc>)
    11ac:	fbb3 f1f1 	udiv	r1, r3, r1
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    11b0:	1e4b      	subs	r3, r1, #1
    11b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    11b6:	d24d      	bcs.n	1254 <hal_timer_config+0xc0>
    11b8:	6923      	ldr	r3, [r4, #16]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d04a      	beq.n	1254 <hal_timer_config+0xc0>
        (bsptimer->tmr_reg == NULL)) {
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    11be:	2901      	cmp	r1, #1
    11c0:	d00f      	beq.n	11e2 <hal_timer_config+0x4e>
    11c2:	2301      	movs	r3, #1
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
            if (div <= (1 << prescaler)) {
    11c4:	4618      	mov	r0, r3
    11c6:	fa00 f503 	lsl.w	r5, r0, r3
    11ca:	428d      	cmp	r5, r1
    11cc:	b2da      	uxtb	r2, r3
    11ce:	d33c      	bcc.n	124a <hal_timer_config+0xb6>
                min_delta = div - (1 << (prescaler - 1));
    11d0:	3b01      	subs	r3, #1
    11d2:	fa00 f303 	lsl.w	r3, r0, r3
    11d6:	1acb      	subs	r3, r1, r3
                max_delta = (1 << prescaler) - div;
    11d8:	1a69      	subs	r1, r5, r1
                if (min_delta < max_delta) {
    11da:	428b      	cmp	r3, r1
    11dc:	d201      	bcs.n	11e2 <hal_timer_config+0x4e>
                    prescaler -= 1;
    11de:	3a01      	subs	r2, #1
    11e0:	b2d2      	uxtb	r2, r2
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    11e2:	4b1f      	ldr	r3, [pc, #124]	; (1260 <hal_timer_config+0xcc>)
    bsptimer->tmr_enabled = 1;
    11e4:	2501      	movs	r5, #1
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    11e6:	4113      	asrs	r3, r2
    11e8:	60e3      	str	r3, [r4, #12]
    bsptimer->tmr_enabled = 1;
    11ea:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    11ec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    11f0:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    11f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11f6:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    11fa:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    11fe:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
    1202:	d007      	beq.n	1214 <hal_timer_config+0x80>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1204:	2100      	movs	r1, #0
    1206:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    120a:	601d      	str	r5, [r3, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    120c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    1210:	2900      	cmp	r1, #0
    1212:	d0fb      	beq.n	120c <hal_timer_config+0x78>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
    1214:	6921      	ldr	r1, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    1216:	2301      	movs	r3, #1
    hwtimer->TASKS_CLEAR = 1;

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    1218:	2500      	movs	r5, #0
    hwtimer->TASKS_STOP = 1;
    121a:	604b      	str	r3, [r1, #4]
    hwtimer->TASKS_CLEAR = 1;
    121c:	60cb      	str	r3, [r1, #12]
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    121e:	f8c1 5504 	str.w	r5, [r1, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    1222:	2503      	movs	r5, #3
    1224:	f8c1 5508 	str.w	r5, [r1, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    1228:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    122c:	600b      	str	r3, [r1, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    122e:	7861      	ldrb	r1, [r4, #1]
    1230:	b24a      	sxtb	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1232:	2a00      	cmp	r2, #0
    1234:	db06      	blt.n	1244 <hal_timer_config+0xb0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1236:	f001 011f 	and.w	r1, r1, #31
    123a:	408b      	lsls	r3, r1
    123c:	0952      	lsrs	r2, r2, #5
    123e:	4909      	ldr	r1, [pc, #36]	; (1264 <hal_timer_config+0xd0>)
    1240:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    1244:	b940      	cbnz	r0, 1258 <hal_timer_config+0xc4>
  __ASM volatile ("cpsie i" : : : "memory");
    1246:	b662      	cpsie	i

    return 0;

err:
    return rc;
}
    1248:	bd30      	pop	{r4, r5, pc}
    124a:	3301      	adds	r3, #1
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    124c:	2b0a      	cmp	r3, #10
    124e:	d1ba      	bne.n	11c6 <hal_timer_config+0x32>
    1250:	461a      	mov	r2, r3
    1252:	e7c6      	b.n	11e2 <hal_timer_config+0x4e>
    return rc;
    1254:	2016      	movs	r0, #22
    1256:	e7f7      	b.n	1248 <hal_timer_config+0xb4>
    return 0;
    1258:	2000      	movs	r0, #0
    125a:	e7f5      	b.n	1248 <hal_timer_config+0xb4>
    125c:	00003b98 	.word	0x00003b98
    1260:	00f42400 	.word	0x00f42400
    1264:	e000e100 	.word	0xe000e100

00001268 <hal_timer_read>:
{
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1268:	2805      	cmp	r0, #5
{
    126a:	b508      	push	{r3, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    126c:	dc09      	bgt.n	1282 <hal_timer_read+0x1a>
    126e:	4b0b      	ldr	r3, [pc, #44]	; (129c <hal_timer_read+0x34>)
    1270:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1274:	b128      	cbz	r0, 1282 <hal_timer_read+0x1a>
    if (bsptimer->tmr_rtc) {
    1276:	7883      	ldrb	r3, [r0, #2]
    1278:	b14b      	cbz	r3, 128e <hal_timer_read+0x26>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    127a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    127e:	f7ff bead 	b.w	fdc <hal_timer_read_bsptimer>
    assert(0);
    1282:	2300      	movs	r3, #0
    1284:	461a      	mov	r2, r3
    1286:	4619      	mov	r1, r3
    1288:	4618      	mov	r0, r3
    128a:	f000 f809 	bl	12a0 <__assert_func>
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    128e:	6903      	ldr	r3, [r0, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1290:	2201      	movs	r2, #1
    1292:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1294:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    1298:	bd08      	pop	{r3, pc}
    129a:	bf00      	nop
    129c:	00003b98 	.word	0x00003b98

000012a0 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    12a0:	b508      	push	{r3, lr}
    12a2:	4605      	mov	r5, r0
    12a4:	4674      	mov	r4, lr
    12a6:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    12a8:	f000 f883 	bl	13b2 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    12ac:	f000 fa5f 	bl	176e <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    12b0:	b97d      	cbnz	r5, 12d2 <__assert_func+0x32>
    12b2:	4621      	mov	r1, r4
    12b4:	480a      	ldr	r0, [pc, #40]	; (12e0 <__assert_func+0x40>)
    12b6:	f000 fa5d 	bl	1774 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    12ba:	f7fe ff6b 	bl	194 <hal_debugger_connected>
    12be:	b100      	cbz	r0, 12c2 <__assert_func+0x22>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    12c0:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    12c2:	4b08      	ldr	r3, [pc, #32]	; (12e4 <__assert_func+0x44>)
    12c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    12c8:	605a      	str	r2, [r3, #4]
    asm("isb");
    12ca:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    12ce:	f7fe ff49 	bl	164 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    12d2:	4633      	mov	r3, r6
    12d4:	462a      	mov	r2, r5
    12d6:	4621      	mov	r1, r4
    12d8:	4803      	ldr	r0, [pc, #12]	; (12e8 <__assert_func+0x48>)
    12da:	f000 fa4b 	bl	1774 <console_printf>
    12de:	e7ec      	b.n	12ba <__assert_func+0x1a>
    12e0:	00003bb0 	.word	0x00003bb0
    12e4:	e000ed00 	.word	0xe000ed00
    12e8:	00003bbf 	.word	0x00003bbf

000012ec <os_default_irq>:
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    12ec:	4d1d      	ldr	r5, [pc, #116]	; (1364 <os_default_irq+0x78>)
{
    12ee:	b507      	push	{r0, r1, r2, lr}
    12f0:	4604      	mov	r4, r0
    console_blocking_mode();
    12f2:	f000 fa3c 	bl	176e <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    12f6:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    12f8:	6822      	ldr	r2, [r4, #0]
    12fa:	481b      	ldr	r0, [pc, #108]	; (1368 <os_default_irq+0x7c>)
    12fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1300:	f000 fa38 	bl	1774 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    1304:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    1306:	4819      	ldr	r0, [pc, #100]	; (136c <os_default_irq+0x80>)
    1308:	68cb      	ldr	r3, [r1, #12]
    130a:	9300      	str	r3, [sp, #0]
    130c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    1310:	6809      	ldr	r1, [r1, #0]
    1312:	f000 fa2f 	bl	1774 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    1316:	6923      	ldr	r3, [r4, #16]
    1318:	9300      	str	r3, [sp, #0]
    131a:	6861      	ldr	r1, [r4, #4]
    131c:	4814      	ldr	r0, [pc, #80]	; (1370 <os_default_irq+0x84>)
    131e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    1322:	f000 fa27 	bl	1774 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    1326:	6a23      	ldr	r3, [r4, #32]
    1328:	9300      	str	r3, [sp, #0]
    132a:	6961      	ldr	r1, [r4, #20]
    132c:	4811      	ldr	r0, [pc, #68]	; (1374 <os_default_irq+0x88>)
    132e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    1332:	f000 fa1f 	bl	1774 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    1336:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    1338:	480f      	ldr	r0, [pc, #60]	; (1378 <os_default_irq+0x8c>)
    133a:	69cb      	ldr	r3, [r1, #28]
    133c:	9300      	str	r3, [sp, #0]
    133e:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
    1342:	6909      	ldr	r1, [r1, #16]
    1344:	f000 fa16 	bl	1774 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    1348:	6869      	ldr	r1, [r5, #4]
    134a:	480c      	ldr	r0, [pc, #48]	; (137c <os_default_irq+0x90>)
    134c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    134e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1350:	f000 fa10 	bl	1774 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    1354:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    1356:	480a      	ldr	r0, [pc, #40]	; (1380 <os_default_irq+0x94>)
    1358:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    135a:	f000 fa0b 	bl	1774 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    135e:	f7fe ff01 	bl	164 <hal_system_reset>
    1362:	bf00      	nop
    1364:	e000ed00 	.word	0xe000ed00
    1368:	00003bd6 	.word	0x00003bd6
    136c:	00003c07 	.word	0x00003c07
    1370:	00003c38 	.word	0x00003c38
    1374:	00003c69 	.word	0x00003c69
    1378:	00003c9a 	.word	0x00003c9a
    137c:	00003ccb 	.word	0x00003ccb
    1380:	00003cf3 	.word	0x00003cf3

00001384 <os_cputime_init>:

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    1384:	4601      	mov	r1, r0
    1386:	2000      	movs	r0, #0
    1388:	f7ff bf04 	b.w	1194 <hal_timer_config>

0000138c <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    138c:	2000      	movs	r0, #0
    138e:	f7ff bf6b 	b.w	1268 <hal_timer_read>

00001392 <os_cputime_delay_ticks>:
{
    1392:	b510      	push	{r4, lr}
    1394:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    1396:	f7ff fff9 	bl	138c <os_cputime_get32>
    139a:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    139c:	f7ff fff6 	bl	138c <os_cputime_get32>
    13a0:	1b00      	subs	r0, r0, r4
    13a2:	2800      	cmp	r0, #0
    13a4:	dbfa      	blt.n	139c <os_cputime_delay_ticks+0xa>
}
    13a6:	bd10      	pop	{r4, pc}

000013a8 <os_cputime_delay_usecs>:
    os_cputime_delay_ticks(ticks);
    13a8:	f7ff bff3 	b.w	1392 <os_cputime_delay_ticks>

000013ac <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
    13ac:	2001      	movs	r0, #1
    13ae:	f000 b877 	b.w	14a0 <os_time_advance>

000013b2 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    13b6:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    13b8:	f000 0001 	and.w	r0, r0, #1
    13bc:	4770      	bx	lr

000013be <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    13be:	b900      	cbnz	r0, 13c2 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    13c0:	b662      	cpsie	i
        __enable_irq();
    }
}
    13c2:	4770      	bx	lr

000013c4 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    13c4:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    13c6:	4604      	mov	r4, r0
    13c8:	b198      	cbz	r0, 13f2 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    13ca:	f7ff fff2 	bl	13b2 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    13ce:	88e3      	ldrh	r3, [r4, #6]
    13d0:	b16b      	cbz	r3, 13ee <os_memblock_get+0x2a>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    13d2:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    13d4:	682a      	ldr	r2, [r5, #0]
    13d6:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    13d8:	3b01      	subs	r3, #1
            if (mp->mp_min_free > mp->mp_num_free) {
    13da:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
    13dc:	b29b      	uxth	r3, r3
            if (mp->mp_min_free > mp->mp_num_free) {
    13de:	429a      	cmp	r2, r3
            mp->mp_num_free--;
    13e0:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    13e2:	d900      	bls.n	13e6 <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
    13e4:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
    13e6:	f7ff ffea 	bl	13be <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    13ea:	4628      	mov	r0, r5
    13ec:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    13ee:	461d      	mov	r5, r3
    13f0:	e7f9      	b.n	13e6 <os_memblock_get+0x22>
    13f2:	4605      	mov	r5, r0
    return (void *)block;
    13f4:	e7f9      	b.n	13ea <os_memblock_get+0x26>

000013f6 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    13f6:	b538      	push	{r3, r4, r5, lr}
    13f8:	4604      	mov	r4, r0
    13fa:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    13fc:	f7ff ffd9 	bl	13b2 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    1400:	6963      	ldr	r3, [r4, #20]
    1402:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    1404:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
    1406:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
    1408:	3301      	adds	r3, #1
    140a:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    140c:	f7ff ffd7 	bl	13be <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    1410:	2000      	movs	r0, #0
    1412:	bd38      	pop	{r3, r4, r5, pc}

00001414 <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
    1414:	b410      	push	{r4}
    1416:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    1418:	4603      	mov	r3, r0
    141a:	b170      	cbz	r0, 143a <os_memblock_put+0x26>
    141c:	b169      	cbz	r1, 143a <os_memblock_put+0x26>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    141e:	7a84      	ldrb	r4, [r0, #10]
    1420:	07e4      	lsls	r4, r4, #31
    1422:	d505      	bpl.n	1430 <os_memblock_put+0x1c>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    1424:	69c4      	ldr	r4, [r0, #28]
    1426:	b11c      	cbz	r4, 1430 <os_memblock_put+0x1c>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    1428:	4623      	mov	r3, r4
    142a:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    142c:	bc10      	pop	{r4}
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    142e:	4718      	bx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);
    1430:	4611      	mov	r1, r2
    1432:	4618      	mov	r0, r3
}
    1434:	bc10      	pop	{r4}
    ret = os_memblock_put_from_cb(mp, block_addr);
    1436:	f7ff bfde 	b.w	13f6 <os_memblock_put_from_cb>
}
    143a:	2003      	movs	r0, #3
    143c:	bc10      	pop	{r4}
    143e:	4770      	bx	lr

00001440 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1440:	4a07      	ldr	r2, [pc, #28]	; (1460 <os_msys_find_pool+0x20>)
{
    1442:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1444:	6811      	ldr	r1, [r2, #0]
    1446:	460b      	mov	r3, r1
    1448:	b923      	cbnz	r3, 1454 <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    144a:	b109      	cbz	r1, 1450 <os_msys_find_pool+0x10>
    144c:	6853      	ldr	r3, [r2, #4]
    144e:	3b08      	subs	r3, #8
    }

    return (pool);
}
    1450:	4618      	mov	r0, r3
    1452:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
    1454:	881c      	ldrh	r4, [r3, #0]
    1456:	4284      	cmp	r4, r0
    1458:	d2fa      	bcs.n	1450 <os_msys_find_pool+0x10>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    145a:	689b      	ldr	r3, [r3, #8]
    145c:	e7f4      	b.n	1448 <os_msys_find_pool+0x8>
    145e:	bf00      	nop
    1460:	20000138 	.word	0x20000138

00001464 <os_msys_get_pkthdr>:
    return (NULL);
}

struct os_mbuf *
os_msys_get_pkthdr(uint16_t dsize, uint16_t user_hdr_len)
{
    1464:	b510      	push	{r4, lr}
    1466:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);

    /* If dsize = 0 that means user has no idea how big block size is needed,
     * therefore lets find for him the biggest one
     */
    if (dsize == 0) {
    1468:	b950      	cbnz	r0, 1480 <os_msys_get_pkthdr+0x1c>
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    146a:	4b09      	ldr	r3, [pc, #36]	; (1490 <os_msys_get_pkthdr+0x2c>)
    146c:	681a      	ldr	r2, [r3, #0]
    146e:	b16a      	cbz	r2, 148c <os_msys_get_pkthdr+0x28>
    1470:	6858      	ldr	r0, [r3, #4]
    1472:	3808      	subs	r0, #8
        pool = os_msys_find_biggest_pool();
    } else {
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    }

    if (!pool) {
    1474:	b150      	cbz	r0, 148c <os_msys_get_pkthdr+0x28>
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    1476:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
    1478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    147c:	f000 b89c 	b.w	15b8 <os_mbuf_get_pkthdr>
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    1480:	3008      	adds	r0, #8
    1482:	4408      	add	r0, r1
    1484:	b280      	uxth	r0, r0
    1486:	f7ff ffdb 	bl	1440 <os_msys_find_pool>
    148a:	e7f3      	b.n	1474 <os_msys_get_pkthdr+0x10>
}
    148c:	2000      	movs	r0, #0
    148e:	bd10      	pop	{r4, pc}
    1490:	20000138 	.word	0x20000138

00001494 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1494:	4b01      	ldr	r3, [pc, #4]	; (149c <os_time_get+0x8>)
    1496:	6818      	ldr	r0, [r3, #0]
    1498:	4770      	bx	lr
    149a:	bf00      	nop
    149c:	200019bc 	.word	0x200019bc

000014a0 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    14a0:	4a02      	ldr	r2, [pc, #8]	; (14ac <os_time_advance+0xc>)
    14a2:	6813      	ldr	r3, [r2, #0]
    14a4:	4418      	add	r0, r3
    14a6:	6010      	str	r0, [r2, #0]
}
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop
    14ac:	200019bc 	.word	0x200019bc

000014b0 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    14b0:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    14b4:	482b      	ldr	r0, [pc, #172]	; (1564 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    14b6:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    14b8:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    14ba:	f380 8814 	msr	CONTROL, r0
        ISB
    14be:	f3bf 8f6f 	isb	sy
        BX      LR
    14c2:	4770      	bx	lr

000014c4 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    14c4:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    14c8:	4770      	bx	lr

000014ca <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    14ca:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    14ce:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    14d0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    14d4:	b951      	cbnz	r1, 14ec <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    14d6:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    14da:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    14dc:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    14de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    14e2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    14e6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    14ea:	4770      	bx	lr

000014ec <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    14ec:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    14ee:	4a1e      	ldr	r2, [pc, #120]	; (1568 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    14f0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    14f2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    14f4:	d809      	bhi.n	150a <SVC_Done>

        LDR     R4,=SVC_Table-4
    14f6:	4c1d      	ldr	r4, [pc, #116]	; (156c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    14f8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    14fc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1500:	47a0      	blx	r4

        MRS     R12,PSP
    1502:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    1506:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000150a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    150a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    150e:	4770      	bx	lr

00001510 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1510:	4b17      	ldr	r3, [pc, #92]	; (1570 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    1512:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1514:	4b17      	ldr	r3, [pc, #92]	; (1574 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    1516:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    1518:	4291      	cmp	r1, r2
        IT      EQ
    151a:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    151c:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    151e:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    1522:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    1526:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    152a:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    152c:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    1530:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    1534:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    1538:	4770      	bx	lr

0000153a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    153a:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    153c:	f7ff ff36 	bl	13ac <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    1544:	4770      	bx	lr

00001546 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    1546:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    154a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    154c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    1550:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    1554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    1558:	4668      	mov	r0, sp
        BL      os_default_irq
    155a:	f7ff fec7 	bl	12ec <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    155e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    1562:	4770      	bx	lr
        LDR     R0,=os_flags
    1564:	2000015c 	.word	0x2000015c
        LDR     R2,=SVC_Count
    1568:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    156c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1570:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    1574:	200019b4 	.word	0x200019b4

00001578 <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    1578:	6882      	ldr	r2, [r0, #8]
    157a:	8812      	ldrh	r2, [r2, #0]
    157c:	f100 0310 	add.w	r3, r0, #16
    1580:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    1582:	88c2      	ldrh	r2, [r0, #6]
    1584:	6800      	ldr	r0, [r0, #0]
    1586:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    1588:	1a18      	subs	r0, r3, r0
}
    158a:	b280      	uxth	r0, r0
    158c:	4770      	bx	lr

0000158e <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    158e:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    1590:	8803      	ldrh	r3, [r0, #0]
    1592:	428b      	cmp	r3, r1
{
    1594:	4604      	mov	r4, r0
    1596:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
    1598:	d30c      	bcc.n	15b4 <os_mbuf_get+0x26>
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    159a:	6840      	ldr	r0, [r0, #4]
    159c:	f7ff ff12 	bl	13c4 <os_memblock_get>
    if (!om) {
    15a0:	b138      	cbz	r0, 15b2 <os_mbuf_get+0x24>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    15a2:	2300      	movs	r3, #0
    15a4:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    15a6:	6043      	str	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    om->om_len = 0;
    om->om_data = (&om->om_databuf[0] + leadingspace);
    15a8:	f100 0310 	add.w	r3, r0, #16
    15ac:	442b      	add	r3, r5
    15ae:	6003      	str	r3, [r0, #0]
    om->om_omp = omp;
    15b0:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    15b2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    15b4:	2000      	movs	r0, #0
    return om;
    15b6:	e7fc      	b.n	15b2 <os_mbuf_get+0x24>

000015b8 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    15b8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    15ba:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    15be:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    15c0:	b2ac      	uxth	r4, r5
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    15c2:	42a3      	cmp	r3, r4
    15c4:	d30d      	bcc.n	15e2 <os_mbuf_get_pkthdr+0x2a>
    15c6:	2cff      	cmp	r4, #255	; 0xff
    15c8:	d80b      	bhi.n	15e2 <os_mbuf_get_pkthdr+0x2a>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    15ca:	2100      	movs	r1, #0
    15cc:	f7ff ffdf 	bl	158e <os_mbuf_get>
    if (om) {
    15d0:	b130      	cbz	r0, 15e0 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
        om->om_data += pkthdr_len;
    15d2:	6803      	ldr	r3, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
    15d4:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    15d6:	4423      	add	r3, r4
    15d8:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    15da:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
    15dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    15e0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    15e2:	2000      	movs	r0, #0
    return om;
    15e4:	e7fc      	b.n	15e0 <os_mbuf_get_pkthdr+0x28>

000015e6 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    15e6:	4601      	mov	r1, r0
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    15e8:	6880      	ldr	r0, [r0, #8]
{
    15ea:	b508      	push	{r3, lr}
    if (om->om_omp != NULL) {
    15ec:	b110      	cbz	r0, 15f4 <os_mbuf_free+0xe>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    15ee:	6840      	ldr	r0, [r0, #4]
    15f0:	f7ff ff10 	bl	1414 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    15f4:	bd08      	pop	{r3, pc}

000015f6 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    15f6:	b510      	push	{r4, lr}
    15f8:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    15fa:	b90b      	cbnz	r3, 1600 <os_mbuf_free_chain+0xa>
        }

        om = next;
    }

    rc = 0;
    15fc:	4618      	mov	r0, r3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
    15fe:	e006      	b.n	160e <os_mbuf_free_chain+0x18>
        rc = os_mbuf_free(om);
    1600:	4618      	mov	r0, r3
        next = SLIST_NEXT(om, om_next);
    1602:	68dc      	ldr	r4, [r3, #12]
        rc = os_mbuf_free(om);
    1604:	f7ff ffef 	bl	15e6 <os_mbuf_free>
        om = next;
    1608:	4623      	mov	r3, r4
        if (rc != 0) {
    160a:	2800      	cmp	r0, #0
    160c:	d0f5      	beq.n	15fa <os_mbuf_free_chain+0x4>
}
    160e:	bd10      	pop	{r4, pc}

00001610 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
    1610:	2300      	movs	r3, #0
    while (om != NULL) {
    1612:	b908      	cbnz	r0, 1618 <os_mbuf_len+0x8>
        len += om->om_len;
        om = SLIST_NEXT(om, om_next);
    }

    return len;
}
    1614:	4618      	mov	r0, r3
    1616:	4770      	bx	lr
        len += om->om_len;
    1618:	88c2      	ldrh	r2, [r0, #6]
        om = SLIST_NEXT(om, om_next);
    161a:	68c0      	ldr	r0, [r0, #12]
        len += om->om_len;
    161c:	4413      	add	r3, r2
    161e:	b29b      	uxth	r3, r3
    1620:	e7f7      	b.n	1612 <os_mbuf_len+0x2>

00001622 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    1622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1626:	4688      	mov	r8, r1
    1628:	4616      	mov	r6, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    162a:	4607      	mov	r7, r0
    162c:	2800      	cmp	r0, #0
    162e:	d042      	beq.n	16b6 <os_mbuf_append+0x94>
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    1630:	f8d0 a008 	ldr.w	sl, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
    1634:	4605      	mov	r5, r0
    1636:	68eb      	ldr	r3, [r5, #12]
    1638:	bb23      	cbnz	r3, 1684 <os_mbuf_append+0x62>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
    163a:	4628      	mov	r0, r5
    remainder = len;
    163c:	4634      	mov	r4, r6
    space = OS_MBUF_TRAILINGSPACE(last);
    163e:	f7ff ff9b 	bl	1578 <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    1642:	b178      	cbz	r0, 1664 <os_mbuf_append+0x42>
    1644:	42b0      	cmp	r0, r6
    1646:	bfa8      	it	ge
    1648:	4630      	movge	r0, r6
    164a:	4604      	mov	r4, r0
        if (space > remainder) {
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    164c:	682b      	ldr	r3, [r5, #0]
    164e:	88e8      	ldrh	r0, [r5, #6]
    1650:	4622      	mov	r2, r4
    1652:	4641      	mov	r1, r8
    1654:	4418      	add	r0, r3
    1656:	f000 f854 	bl	1702 <memcpy>

        last->om_len += space;
    165a:	88eb      	ldrh	r3, [r5, #6]
    165c:	4423      	add	r3, r4
        data += space;
    165e:	44a0      	add	r8, r4
        last->om_len += space;
    1660:	80eb      	strh	r3, [r5, #6]
        remainder -= space;
    1662:	1b34      	subs	r4, r6, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    1664:	2c00      	cmp	r4, #0
    1666:	dd05      	ble.n	1674 <os_mbuf_append+0x52>
        new = os_mbuf_get(omp, 0);
    1668:	2100      	movs	r1, #0
    166a:	4650      	mov	r0, sl
    166c:	f7ff ff8f 	bl	158e <os_mbuf_get>
        if (!new) {
    1670:	4681      	mov	r9, r0
    1672:	b948      	cbnz	r0, 1688 <os_mbuf_append+0x66>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    1674:	797b      	ldrb	r3, [r7, #5]
    1676:	2b07      	cmp	r3, #7
    1678:	d818      	bhi.n	16ac <os_mbuf_append+0x8a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
    167a:	1c20      	adds	r0, r4, #0
    167c:	bf18      	it	ne
    167e:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
    1680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1684:	461d      	mov	r5, r3
    1686:	e7d6      	b.n	1636 <os_mbuf_append+0x14>
        new->om_len = min(omp->omp_databuf_len, remainder);
    1688:	f8ba 2000 	ldrh.w	r2, [sl]
    168c:	42a2      	cmp	r2, r4
    168e:	bfa8      	it	ge
    1690:	4622      	movge	r2, r4
    1692:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    1694:	4641      	mov	r1, r8
    1696:	6800      	ldr	r0, [r0, #0]
    1698:	f000 f833 	bl	1702 <memcpy>
        data += new->om_len;
    169c:	f8b9 3006 	ldrh.w	r3, [r9, #6]
        SLIST_NEXT(last, om_next) = new;
    16a0:	f8c5 900c 	str.w	r9, [r5, #12]
        data += new->om_len;
    16a4:	4498      	add	r8, r3
        remainder -= new->om_len;
    16a6:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
    16a8:	464d      	mov	r5, r9
    16aa:	e7db      	b.n	1664 <os_mbuf_append+0x42>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    16ac:	8a3b      	ldrh	r3, [r7, #16]
    16ae:	441e      	add	r6, r3
    16b0:	1b36      	subs	r6, r6, r4
    16b2:	823e      	strh	r6, [r7, #16]
    16b4:	e7e1      	b.n	167a <os_mbuf_append+0x58>
        rc = OS_EINVAL;
    16b6:	2002      	movs	r0, #2
    16b8:	e7e2      	b.n	1680 <os_mbuf_append+0x5e>

000016ba <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    16ba:	b470      	push	{r4, r5, r6}
    16bc:	f04f 0500 	mov.w	r5, #0
    16c0:	f022 0603 	bic.w	r6, r2, #3
    16c4:	e005      	b.n	16d2 <test1>

000016c6 <loop1>:
    16c6:	5943      	ldr	r3, [r0, r5]
    16c8:	594c      	ldr	r4, [r1, r5]
    16ca:	42a3      	cmp	r3, r4
    16cc:	d104      	bne.n	16d8 <res1>
    16ce:	f105 0504 	add.w	r5, r5, #4

000016d2 <test1>:
    16d2:	42b5      	cmp	r5, r6
    16d4:	d1f7      	bne.n	16c6 <loop1>
    16d6:	e00d      	b.n	16f4 <test2>

000016d8 <res1>:
    16d8:	ba1b      	rev	r3, r3
    16da:	ba24      	rev	r4, r4
    16dc:	1b1b      	subs	r3, r3, r4
    16de:	bf8c      	ite	hi
    16e0:	2301      	movhi	r3, #1
    16e2:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    16e6:	e009      	b.n	16fc <done>

000016e8 <loop2>:
    16e8:	5d43      	ldrb	r3, [r0, r5]
    16ea:	5d4c      	ldrb	r4, [r1, r5]
    16ec:	1b1b      	subs	r3, r3, r4
    16ee:	d105      	bne.n	16fc <done>
    16f0:	f105 0501 	add.w	r5, r5, #1

000016f4 <test2>:
    16f4:	4295      	cmp	r5, r2
    16f6:	d1f7      	bne.n	16e8 <loop2>
    16f8:	f04f 0300 	mov.w	r3, #0

000016fc <done>:
    16fc:	4618      	mov	r0, r3
    16fe:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    1700:	4770      	bx	lr

00001702 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    1702:	e001      	b.n	1708 <test1>

00001704 <loop1>:
    1704:	588b      	ldr	r3, [r1, r2]
    1706:	5083      	str	r3, [r0, r2]

00001708 <test1>:
    1708:	3a04      	subs	r2, #4
    170a:	d5fb      	bpl.n	1704 <loop1>
    170c:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    1710:	e001      	b.n	1716 <test2>

00001712 <loop2>:
    1712:	5c8b      	ldrb	r3, [r1, r2]
    1714:	5483      	strb	r3, [r0, r2]

00001716 <test2>:
    1716:	3a01      	subs	r2, #1
    1718:	d5fb      	bpl.n	1712 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    171a:	4770      	bx	lr

0000171c <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    171c:	b530      	push	{r4, r5, lr}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    171e:	4605      	mov	r5, r0
    1720:	b2c9      	uxtb	r1, r1
    1722:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1726:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    172a:	18ab      	adds	r3, r5, r2
    172c:	2403      	movs	r4, #3
    172e:	4023      	ands	r3, r4
    1730:	1ad3      	subs	r3, r2, r3
    1732:	d40b      	bmi.n	174c <memset+0x30>
    1734:	e001      	b.n	173a <memset+0x1e>
    1736:	3a01      	subs	r2, #1
    1738:	54a9      	strb	r1, [r5, r2]
    173a:	429a      	cmp	r2, r3
    173c:	d1fb      	bne.n	1736 <memset+0x1a>
    173e:	e000      	b.n	1742 <memset+0x26>
    1740:	50a9      	str	r1, [r5, r2]
    1742:	3a04      	subs	r2, #4
    1744:	d5fc      	bpl.n	1740 <memset+0x24>
    1746:	3204      	adds	r2, #4
    1748:	e000      	b.n	174c <memset+0x30>
    174a:	54a9      	strb	r1, [r5, r2]
    174c:	3a01      	subs	r2, #1
    174e:	d5fc      	bpl.n	174a <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    1750:	bd30      	pop	{r4, r5, pc}

00001752 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    1752:	b570      	push	{r4, r5, r6, lr}
    1754:	4605      	mov	r5, r0
    1756:	460e      	mov	r6, r1
    int i;
    for (i = 0; i < cnt; i++) {
    1758:	4604      	mov	r4, r0
    175a:	1b63      	subs	r3, r4, r5
    175c:	429e      	cmp	r6, r3
    175e:	dd05      	ble.n	176c <console_write+0x1a>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    1760:	f814 0b01 	ldrb.w	r0, [r4], #1
    1764:	f000 f882 	bl	186c <console_out_nolock>
    1768:	3001      	adds	r0, #1
    176a:	d1f6      	bne.n	175a <console_write+0x8>
    }
}
    176c:	bd70      	pop	{r4, r5, r6, pc}

0000176e <console_blocking_mode>:

void console_blocking_mode(void) {
    disable_buffer();
    176e:	f000 b853 	b.w	1818 <disable_buffer>
	...

00001774 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    1774:	b40f      	push	{r0, r1, r2, r3}
    1776:	b513      	push	{r0, r1, r4, lr}
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    1778:	f000 f896 	bl	18a8 <console_get_ticks>
    177c:	b140      	cbz	r0, 1790 <console_printf+0x1c>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    177e:	4b0b      	ldr	r3, [pc, #44]	; (17ac <console_printf+0x38>)
    1780:	681b      	ldr	r3, [r3, #0]
    1782:	b98b      	cbnz	r3, 17a8 <console_printf+0x34>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    1784:	f7ff fe86 	bl	1494 <os_time_get>
    1788:	4601      	mov	r1, r0
    178a:	4809      	ldr	r0, [pc, #36]	; (17b0 <console_printf+0x3c>)
    178c:	f002 f808 	bl	37a0 <printf>
    num_chars = 0;
    1790:	4604      	mov	r4, r0
        }
    }

    va_start(args, fmt);
    1792:	a905      	add	r1, sp, #20
    num_chars += vprintf(fmt, args);
    1794:	9804      	ldr	r0, [sp, #16]
    va_start(args, fmt);
    1796:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    1798:	f002 f814 	bl	37c4 <vprintf>
    va_end(args);

    return num_chars;
}
    179c:	4420      	add	r0, r4
    179e:	b002      	add	sp, #8
    17a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17a4:	b004      	add	sp, #16
    17a6:	4770      	bx	lr
    num_chars = 0;
    17a8:	2400      	movs	r4, #0
    17aa:	e7f2      	b.n	1792 <console_printf+0x1e>
    17ac:	200019c0 	.word	0x200019c0
    17b0:	00003d0f 	.word	0x00003d0f

000017b4 <console_flush>:
#endif  //  DISABLE_SEMIHOSTING
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    17b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    17b6:	4c14      	ldr	r4, [pc, #80]	; (1808 <console_flush+0x54>)
    17b8:	7822      	ldrb	r2, [r4, #0]
void console_flush(void) {
    17ba:	b085      	sub	sp, #20
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    17bc:	b312      	cbz	r2, 1804 <console_flush+0x50>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    17be:	4913      	ldr	r1, [pc, #76]	; (180c <console_flush+0x58>)
    17c0:	680a      	ldr	r2, [r1, #0]
    17c2:	b1fa      	cbz	r2, 1804 <console_flush+0x50>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    17c4:	4b12      	ldr	r3, [pc, #72]	; (1810 <console_flush+0x5c>)
    17c6:	685b      	ldr	r3, [r3, #4]
    17c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    17cc:	b9d3      	cbnz	r3, 1804 <console_flush+0x50>
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    17ce:	4d11      	ldr	r5, [pc, #68]	; (1814 <console_flush+0x60>)

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    17d0:	600b      	str	r3, [r1, #0]
    args[0] = (uint32_t)fh;
    17d2:	2602      	movs	r6, #2
    semihost_mbuf = NULL;
    17d4:	4613      	mov	r3, r2
    __asm( 
    17d6:	2705      	movs	r7, #5
    17d8:	f10d 0c04 	add.w	ip, sp, #4
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    17dc:	6829      	ldr	r1, [r5, #0]
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
    17de:	07c9      	lsls	r1, r1, #31
    17e0:	d50a      	bpl.n	17f8 <console_flush+0x44>

    struct os_mbuf *m = old;
    while (m) {  //  For each mbuf in the chain...
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
    17e2:	88d9      	ldrh	r1, [r3, #6]
    if (length == 0) { return 0; }
    17e4:	b141      	cbz	r1, 17f8 <console_flush+0x44>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
    17e6:	6818      	ldr	r0, [r3, #0]
    args[2] = (uint32_t)length;
    17e8:	9103      	str	r1, [sp, #12]
    if (!log_enabled) return -1;
    17ea:	7821      	ldrb	r1, [r4, #0]
    args[1] = (uint32_t)buffer;
    17ec:	e9cd 6001 	strd	r6, r0, [sp, #4]
    if (!log_enabled) return -1;
    17f0:	b111      	cbz	r1, 17f8 <console_flush+0x44>
    __asm( 
    17f2:	4638      	mov	r0, r7
    17f4:	4661      	mov	r1, ip
    17f6:	beab      	bkpt	0x00ab
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    17f8:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
    17fa:	2b00      	cmp	r3, #0
    17fc:	d1ee      	bne.n	17dc <console_flush+0x28>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    17fe:	4610      	mov	r0, r2
    1800:	f7ff fef9 	bl	15f6 <os_mbuf_free_chain>
}
    1804:	b005      	add	sp, #20
    1806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1808:	20000148 	.word	0x20000148
    180c:	20000160 	.word	0x20000160
    1810:	e000ed00 	.word	0xe000ed00
    1814:	e000edf0 	.word	0xe000edf0

00001818 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    1818:	f7ff bfcc 	b.w	17b4 <console_flush>

0000181c <console_buffer>:
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    181c:	4b10      	ldr	r3, [pc, #64]	; (1860 <console_buffer+0x44>)
    181e:	781b      	ldrb	r3, [r3, #0]
void console_buffer(const char *buffer, unsigned int length) {
    1820:	b570      	push	{r4, r5, r6, lr}
    1822:	4606      	mov	r6, r0
    1824:	460d      	mov	r5, r1
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    1826:	b1d3      	cbz	r3, 185e <console_buffer+0x42>
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    1828:	4b0e      	ldr	r3, [pc, #56]	; (1864 <console_buffer+0x48>)
    182a:	681b      	ldr	r3, [r3, #0]
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
    182c:	07db      	lsls	r3, r3, #31
    182e:	d516      	bpl.n	185e <console_buffer+0x42>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
    1830:	4c0d      	ldr	r4, [pc, #52]	; (1868 <console_buffer+0x4c>)
    1832:	6821      	ldr	r1, [r4, #0]
    1834:	b169      	cbz	r1, 1852 <console_buffer+0x36>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    }
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    1836:	6820      	ldr	r0, [r4, #0]
    1838:	f7ff feea 	bl	1610 <os_mbuf_len>
    183c:	4428      	add	r0, r5
    183e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1842:	d20c      	bcs.n	185e <console_buffer+0x42>
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    1844:	b2aa      	uxth	r2, r5
    1846:	4631      	mov	r1, r6
    1848:	6820      	ldr	r0, [r4, #0]
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
    184a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    184e:	f7ff bee8 	b.w	1622 <os_mbuf_append>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
    1852:	b2a8      	uxth	r0, r5
    1854:	f7ff fe06 	bl	1464 <os_msys_get_pkthdr>
    1858:	6020      	str	r0, [r4, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    185a:	2800      	cmp	r0, #0
    185c:	d1eb      	bne.n	1836 <console_buffer+0x1a>
}
    185e:	bd70      	pop	{r4, r5, r6, pc}
    1860:	20000148 	.word	0x20000148
    1864:	e000edf0 	.word	0xe000edf0
    1868:	20000160 	.word	0x20000160

0000186c <console_out_nolock>:
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    if (g_silence_console) { return c; }
    186c:	4b0c      	ldr	r3, [pc, #48]	; (18a0 <console_out_nolock+0x34>)
int console_out_nolock(int character) {
    186e:	b513      	push	{r0, r1, r4, lr}
    if (g_silence_console) { return c; }
    1870:	7819      	ldrb	r1, [r3, #0]
int console_out_nolock(int character) {
    1872:	4604      	mov	r4, r0
    1874:	b2c3      	uxtb	r3, r0
    if (g_silence_console) { return c; }
    1876:	b119      	cbz	r1, 1880 <console_out_nolock+0x14>
    1878:	461c      	mov	r4, r3
    } else {
        console_is_midline = 1;
    }
    semihosting_console_write_ch(c);
    return character;
}
    187a:	4620      	mov	r0, r4
    187c:	b002      	add	sp, #8
    187e:	bd10      	pop	{r4, pc}
    if ('\n' == c) {
    1880:	2b0a      	cmp	r3, #10
    1882:	4a08      	ldr	r2, [pc, #32]	; (18a4 <console_out_nolock+0x38>)
    1884:	f88d 3007 	strb.w	r3, [sp, #7]
        console_is_midline = 1;
    1888:	bf18      	it	ne
    188a:	2101      	movne	r1, #1
    if (c == '\r') { return; }  //  Don't display \r.
    188c:	2b0d      	cmp	r3, #13
        console_is_midline = 1;
    188e:	6011      	str	r1, [r2, #0]
    if (c == '\r') { return; }  //  Don't display \r.
    1890:	d0f3      	beq.n	187a <console_out_nolock+0xe>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    1892:	2101      	movs	r1, #1
    1894:	f10d 0007 	add.w	r0, sp, #7
    1898:	f7ff ffc0 	bl	181c <console_buffer>
    189c:	e7ed      	b.n	187a <console_out_nolock+0xe>
    189e:	bf00      	nop
    18a0:	200019c5 	.word	0x200019c5
    18a4:	200019c0 	.word	0x200019c0

000018a8 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    18a8:	4b01      	ldr	r3, [pc, #4]	; (18b0 <console_get_ticks+0x8>)
    18aa:	7818      	ldrb	r0, [r3, #0]
    18ac:	4770      	bx	lr
    18ae:	bf00      	nop
    18b0:	20000164 	.word	0x20000164

000018b4 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
    18b4:	4b0c      	ldr	r3, [pc, #48]	; (18e8 <flash_area_open+0x34>)
    18b6:	681b      	ldr	r3, [r3, #0]
{
    18b8:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
    18ba:	b18b      	cbz	r3, 18e0 <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
    18bc:	4a0b      	ldr	r2, [pc, #44]	; (18ec <flash_area_open+0x38>)
    18be:	6814      	ldr	r4, [r2, #0]
    18c0:	2200      	movs	r2, #0
    18c2:	4294      	cmp	r4, r2
    18c4:	dc02      	bgt.n	18cc <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
    18c6:	f06f 0003 	mvn.w	r0, #3
    18ca:	e006      	b.n	18da <flash_area_open+0x26>
        area = flash_map + i;
    18cc:	461d      	mov	r5, r3
        if (area->fa_id == id) {
    18ce:	f813 6b0c 	ldrb.w	r6, [r3], #12
    18d2:	4286      	cmp	r6, r0
    18d4:	d102      	bne.n	18dc <flash_area_open+0x28>
            *fap = area;
    18d6:	600d      	str	r5, [r1, #0]
            return 0;
    18d8:	2000      	movs	r0, #0
}
    18da:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
    18dc:	3201      	adds	r2, #1
    18de:	e7f0      	b.n	18c2 <flash_area_open+0xe>
        return SYS_EACCES;
    18e0:	f06f 0006 	mvn.w	r0, #6
    18e4:	e7f9      	b.n	18da <flash_area_open+0x26>
    18e6:	bf00      	nop
    18e8:	200019c8 	.word	0x200019c8
    18ec:	200019cc 	.word	0x200019cc

000018f0 <flash_area_to_sectors>:

int
flash_area_to_sectors(int id, int *cnt, struct flash_area *ret)
{
    18f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t start;
    uint32_t size;
    int rc;
    int i;

    rc = flash_area_open(id, &fa);
    18f4:	fa5f f980 	uxtb.w	r9, r0
{
    18f8:	4688      	mov	r8, r1
    rc = flash_area_open(id, &fa);
    18fa:	4648      	mov	r0, r9
    18fc:	a901      	add	r1, sp, #4
{
    18fe:	4614      	mov	r4, r2
    rc = flash_area_open(id, &fa);
    1900:	f7ff ffd8 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1904:	4605      	mov	r5, r0
    1906:	b950      	cbnz	r0, 191e <flash_area_to_sectors+0x2e>
        return rc;
    }

    *cnt = 0;

    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1908:	9b01      	ldr	r3, [sp, #4]
    *cnt = 0;
    190a:	f8c8 0000 	str.w	r0, [r8]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    190e:	7858      	ldrb	r0, [r3, #1]
    1910:	f7fe fdba 	bl	488 <hal_bsp_flash_dev>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1914:	462e      	mov	r6, r5
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1916:	4607      	mov	r7, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1918:	68fb      	ldr	r3, [r7, #12]
    191a:	42b3      	cmp	r3, r6
    191c:	dc03      	bgt.n	1926 <flash_area_to_sectors+0x36>
            (*cnt)++;
        }
    }
    flash_area_close(fa);
    return 0;
}
    191e:	4628      	mov	r0, r5
    1920:	b004      	add	sp, #16
    1922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    1926:	683b      	ldr	r3, [r7, #0]
    1928:	aa02      	add	r2, sp, #8
    192a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    192e:	4631      	mov	r1, r6
    1930:	ab03      	add	r3, sp, #12
    1932:	4638      	mov	r0, r7
    1934:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    1936:	9901      	ldr	r1, [sp, #4]
    1938:	9a02      	ldr	r2, [sp, #8]
    193a:	684b      	ldr	r3, [r1, #4]
    193c:	4293      	cmp	r3, r2
    193e:	d811      	bhi.n	1964 <flash_area_to_sectors+0x74>
    1940:	6888      	ldr	r0, [r1, #8]
    1942:	4403      	add	r3, r0
    1944:	429a      	cmp	r2, r3
    1946:	d20d      	bcs.n	1964 <flash_area_to_sectors+0x74>
            if (ret) {
    1948:	b13c      	cbz	r4, 195a <flash_area_to_sectors+0x6a>
                ret->fa_id = id;
    194a:	f884 9000 	strb.w	r9, [r4]
                ret->fa_device_id = fa->fa_device_id;
    194e:	784b      	ldrb	r3, [r1, #1]
    1950:	7063      	strb	r3, [r4, #1]
                ret->fa_size = size;
    1952:	9b03      	ldr	r3, [sp, #12]
                ret->fa_off = start;
    1954:	6062      	str	r2, [r4, #4]
                ret->fa_size = size;
    1956:	60a3      	str	r3, [r4, #8]
                ret++;
    1958:	340c      	adds	r4, #12
            (*cnt)++;
    195a:	f8d8 3000 	ldr.w	r3, [r8]
    195e:	3301      	adds	r3, #1
    1960:	f8c8 3000 	str.w	r3, [r8]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1964:	3601      	adds	r6, #1
    1966:	e7d7      	b.n	1918 <flash_area_to_sectors+0x28>

00001968 <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
    1968:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    196a:	6885      	ldr	r5, [r0, #8]
    196c:	428d      	cmp	r5, r1
{
    196e:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1970:	d308      	bcc.n	1984 <flash_area_read+0x1c>
    1972:	440c      	add	r4, r1
    1974:	42a5      	cmp	r5, r4
    1976:	d305      	bcc.n	1984 <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    1978:	6844      	ldr	r4, [r0, #4]
    197a:	7840      	ldrb	r0, [r0, #1]
    197c:	4421      	add	r1, r4
}
    197e:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    1980:	f001 bbee 	b.w	3160 <hal_flash_read>
}
    1984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1988:	bc30      	pop	{r4, r5}
    198a:	4770      	bx	lr

0000198c <flash_area_write>:

int
flash_area_write(const struct flash_area *fa, uint32_t off, const void *src,
    uint32_t len)
{
    198c:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    198e:	6885      	ldr	r5, [r0, #8]
    1990:	428d      	cmp	r5, r1
{
    1992:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1994:	d308      	bcc.n	19a8 <flash_area_write+0x1c>
    1996:	440c      	add	r4, r1
    1998:	42a5      	cmp	r5, r4
    199a:	d305      	bcc.n	19a8 <flash_area_write+0x1c>
        return -1;
    }
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    199c:	6844      	ldr	r4, [r0, #4]
    199e:	7840      	ldrb	r0, [r0, #1]
    19a0:	4421      	add	r1, r4
                           (void *)src, len);
}
    19a2:	bc30      	pop	{r4, r5}
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    19a4:	f001 bbfe 	b.w	31a4 <hal_flash_write>
}
    19a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19ac:	bc30      	pop	{r4, r5}
    19ae:	4770      	bx	lr

000019b0 <flash_area_erase>:

int
flash_area_erase(const struct flash_area *fa, uint32_t off, uint32_t len)
{
    19b0:	b410      	push	{r4}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    19b2:	6884      	ldr	r4, [r0, #8]
    19b4:	428c      	cmp	r4, r1
{
    19b6:	4613      	mov	r3, r2
    if (off > fa->fa_size || off + len > fa->fa_size) {
    19b8:	d308      	bcc.n	19cc <flash_area_erase+0x1c>
    19ba:	440b      	add	r3, r1
    19bc:	429c      	cmp	r4, r3
    19be:	d305      	bcc.n	19cc <flash_area_erase+0x1c>
        return -1;
    }
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    19c0:	6843      	ldr	r3, [r0, #4]
}
    19c2:	bc10      	pop	{r4}
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    19c4:	7840      	ldrb	r0, [r0, #1]
    19c6:	4419      	add	r1, r3
    19c8:	f001 bc1e 	b.w	3208 <hal_flash_erase>
}
    19cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19d0:	bc10      	pop	{r4}
    19d2:	4770      	bx	lr

000019d4 <flash_area_align>:

uint8_t
flash_area_align(const struct flash_area *fa)
{
    return hal_flash_align(fa->fa_device_id);
    19d4:	7840      	ldrb	r0, [r0, #1]
    19d6:	f001 bbb3 	b.w	3140 <hal_flash_align>

000019da <flash_area_erased_val>:
}

uint32_t
flash_area_erased_val(const struct flash_area *fa)
{
    19da:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    19dc:	7840      	ldrb	r0, [r0, #1]
    19de:	f001 fbb7 	bl	3150 <hal_flash_erased_val>
}
    19e2:	bd08      	pop	{r3, pc}

000019e4 <flash_area_read_is_empty>:
}

int
flash_area_read_is_empty(const struct flash_area *fa, uint32_t off, void *dst,
                         uint32_t len)
{
    19e4:	b410      	push	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    19e6:	6844      	ldr	r4, [r0, #4]
    19e8:	7840      	ldrb	r0, [r0, #1]
    19ea:	4421      	add	r1, r4
}
    19ec:	bc10      	pop	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    19ee:	f001 bc7e 	b.w	32ee <hal_flash_isempty>
	...

000019f4 <flash_map_init>:
    }
}

void
flash_map_init(void)
{
    19f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f6:	b089      	sub	sp, #36	; 0x24
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    19f8:	f001 fb90 	bl	311c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    19fc:	b138      	cbz	r0, 1a0e <flash_map_init+0x1a>
    19fe:	2300      	movs	r3, #0
    1a00:	4a1d      	ldr	r2, [pc, #116]	; (1a78 <flash_map_init+0x84>)
    1a02:	9300      	str	r3, [sp, #0]
    1a04:	6814      	ldr	r4, [r2, #0]
    1a06:	4619      	mov	r1, r3
    1a08:	461a      	mov	r2, r3
    1a0a:	4618      	mov	r0, r3
    1a0c:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    1a0e:	4e1b      	ldr	r6, [pc, #108]	; (1a7c <flash_map_init+0x88>)
    1a10:	4b1b      	ldr	r3, [pc, #108]	; (1a80 <flash_map_init+0x8c>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    1a12:	4f1c      	ldr	r7, [pc, #112]	; (1a84 <flash_map_init+0x90>)
    flash_map = sysflash_map_dflt;
    1a14:	6033      	str	r3, [r6, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    1a16:	2306      	movs	r3, #6
    1a18:	603b      	str	r3, [r7, #0]
    mfg_init();
    1a1a:	f000 f90d 	bl	1c38 <mfg_init>
    mfg_open(&reader);
    1a1e:	a803      	add	r0, sp, #12
    1a20:	f000 f92e 	bl	1c80 <mfg_open>
        fap->fa_id = meta_flash_area.area_id;
    1a24:	4d18      	ldr	r5, [pc, #96]	; (1a88 <flash_map_init+0x94>)
    *out_num_areas = 0;
    1a26:	2400      	movs	r4, #0
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    1a28:	2102      	movs	r1, #2
    1a2a:	a803      	add	r0, sp, #12
    1a2c:	f000 f8f2 	bl	1c14 <mfg_seek_next_with_type>
        switch (rc) {
    1a30:	f110 0f0f 	cmn.w	r0, #15
    1a34:	d019      	beq.n	1a6a <flash_map_init+0x76>
    1a36:	b9b0      	cbnz	r0, 1a66 <flash_map_init+0x72>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    1a38:	a905      	add	r1, sp, #20
    1a3a:	a803      	add	r0, sp, #12
    1a3c:	f000 f8f5 	bl	1c2a <mfg_read_tlv_flash_area>
        if (rc != 0) {
    1a40:	b988      	cbnz	r0, 1a66 <flash_map_init+0x72>
    1a42:	230c      	movs	r3, #12
    1a44:	4363      	muls	r3, r4
        fap->fa_id = meta_flash_area.area_id;
    1a46:	f89d 2014 	ldrb.w	r2, [sp, #20]
    1a4a:	555a      	strb	r2, [r3, r5]
    1a4c:	442b      	add	r3, r5
        fap->fa_device_id = meta_flash_area.device_id;
    1a4e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    1a52:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    1a54:	f8dd 2016 	ldr.w	r2, [sp, #22]
    1a58:	605a      	str	r2, [r3, #4]
        (*out_num_areas)++;
    1a5a:	3401      	adds	r4, #1
        fap->fa_size = meta_flash_area.size;
    1a5c:	f8dd 201a 	ldr.w	r2, [sp, #26]
    1a60:	609a      	str	r2, [r3, #8]
        if (*out_num_areas >= max_areas) {
    1a62:	2c0a      	cmp	r4, #10
    1a64:	d1e0      	bne.n	1a28 <flash_map_init+0x34>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
    1a66:	b009      	add	sp, #36	; 0x24
    1a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == 0 && num_areas > 0) {
    1a6a:	2c00      	cmp	r4, #0
    1a6c:	d0fb      	beq.n	1a66 <flash_map_init+0x72>
        flash_map = mfg_areas;
    1a6e:	4b06      	ldr	r3, [pc, #24]	; (1a88 <flash_map_init+0x94>)
    1a70:	6033      	str	r3, [r6, #0]
        flash_map_entries = num_areas;
    1a72:	603c      	str	r4, [r7, #0]
}
    1a74:	e7f7      	b.n	1a66 <flash_map_init+0x72>
    1a76:	bf00      	nop
    1a78:	2000014c 	.word	0x2000014c
    1a7c:	200019c8 	.word	0x200019c8
    1a80:	00003d18 	.word	0x00003d18
    1a84:	200019cc 	.word	0x200019cc
    1a88:	20000168 	.word	0x20000168

00001a8c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    1a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    1a8e:	4c25      	ldr	r4, [pc, #148]	; (1b24 <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
    1a90:	4a25      	ldr	r2, [pc, #148]	; (1b28 <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
    1a92:	6826      	ldr	r6, [r4, #0]
{
    1a94:	b085      	sub	sp, #20
    1a96:	4605      	mov	r5, r0
    for (i = 0; i < mfg_num_mmrs; i++) {
    1a98:	2300      	movs	r3, #0
        if (mfg_mmrs[i].area_id == area_id) {
    1a9a:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
    1a9c:	429e      	cmp	r6, r3
    1a9e:	dc0a      	bgt.n	1ab6 <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    1aa0:	2e02      	cmp	r6, #2
    1aa2:	d03c      	beq.n	1b1e <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
    1aa4:	a901      	add	r1, sp, #4
    1aa6:	4628      	mov	r0, r5
    1aa8:	f7ff ff04 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1aac:	b150      	cbz	r0, 1ac4 <mfg_read_next_mmr+0x38>
        return SYS_EIO;
    1aae:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
    1ab2:	b005      	add	sp, #20
    1ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
    1ab6:	fb01 f003 	mul.w	r0, r1, r3
    1aba:	5c80      	ldrb	r0, [r0, r2]
    1abc:	42a8      	cmp	r0, r5
    1abe:	d02b      	beq.n	1b18 <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
    1ac0:	3301      	adds	r3, #1
    1ac2:	e7eb      	b.n	1a9c <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    1ac4:	9801      	ldr	r0, [sp, #4]
    1ac6:	6881      	ldr	r1, [r0, #8]
    1ac8:	2308      	movs	r3, #8
    1aca:	eb0d 0203 	add.w	r2, sp, r3
    1ace:	3908      	subs	r1, #8
    1ad0:	f7ff ff4a 	bl	1968 <flash_area_read>
    if (rc != 0) {
    1ad4:	2800      	cmp	r0, #0
    1ad6:	d1ea      	bne.n	1aae <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
    1ad8:	4b14      	ldr	r3, [pc, #80]	; (1b2c <mfg_read_next_mmr+0xa0>)
    1ada:	9a03      	ldr	r2, [sp, #12]
    1adc:	429a      	cmp	r2, r3
    1ade:	d115      	bne.n	1b0c <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
    1ae0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    1ae4:	2b02      	cmp	r3, #2
    1ae6:	d114      	bne.n	1b12 <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
    1ae8:	9b01      	ldr	r3, [sp, #4]
    1aea:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    1aee:	689b      	ldr	r3, [r3, #8]
    1af0:	4299      	cmp	r1, r3
    1af2:	d80b      	bhi.n	1b0c <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
    1af4:	4f0c      	ldr	r7, [pc, #48]	; (1b28 <mfg_read_next_mmr+0x9c>)
    1af6:	220c      	movs	r2, #12
    1af8:	4372      	muls	r2, r6
        .offset = fap->fa_size - ftr.size,
    1afa:	1a5b      	subs	r3, r3, r1
    *out_mmr = (struct mfg_mmr) {
    1afc:	18be      	adds	r6, r7, r2
    1afe:	e9c6 3101 	strd	r3, r1, [r6, #4]
    mfg_num_mmrs++;
    1b02:	6823      	ldr	r3, [r4, #0]
    *out_mmr = (struct mfg_mmr) {
    1b04:	54bd      	strb	r5, [r7, r2]
    mfg_num_mmrs++;
    1b06:	3301      	adds	r3, #1
    1b08:	6023      	str	r3, [r4, #0]
    1b0a:	e7d2      	b.n	1ab2 <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
    1b0c:	f06f 0008 	mvn.w	r0, #8
    1b10:	e7cf      	b.n	1ab2 <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
    1b12:	f06f 000b 	mvn.w	r0, #11
    1b16:	e7cc      	b.n	1ab2 <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
    1b18:	f06f 000a 	mvn.w	r0, #10
    1b1c:	e7c9      	b.n	1ab2 <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
    1b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b22:	e7c6      	b.n	1ab2 <mfg_read_next_mmr+0x26>
    1b24:	200001fc 	.word	0x200001fc
    1b28:	200001e4 	.word	0x200001e4
    1b2c:	3bb2a269 	.word	0x3bb2a269

00001b30 <mfg_read_tlv_body>:
{
    1b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    1b32:	4b16      	ldr	r3, [pc, #88]	; (1b8c <mfg_read_tlv_body+0x5c>)
{
    1b34:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	7882      	ldrb	r2, [r0, #2]
    1b3a:	429a      	cmp	r2, r3
{
    1b3c:	4604      	mov	r4, r0
    1b3e:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
    1b40:	db05      	blt.n	1b4e <mfg_read_tlv_body+0x1e>
    1b42:	2300      	movs	r3, #0
    1b44:	461a      	mov	r2, r3
    1b46:	4619      	mov	r1, r3
    1b48:	4618      	mov	r0, r3
    1b4a:	f7ff fba9 	bl	12a0 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
    1b4e:	230c      	movs	r3, #12
    1b50:	4353      	muls	r3, r2
    1b52:	4a0f      	ldr	r2, [pc, #60]	; (1b90 <mfg_read_tlv_body+0x60>)
    1b54:	a901      	add	r1, sp, #4
    1b56:	5cd0      	ldrb	r0, [r2, r3]
    1b58:	f7ff feac 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1b5c:	4601      	mov	r1, r0
    1b5e:	b118      	cbz	r0, 1b68 <mfg_read_tlv_body+0x38>
        return SYS_EIO;
    1b60:	f06f 0004 	mvn.w	r0, #4
}
    1b64:	b002      	add	sp, #8
    1b66:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    1b68:	4632      	mov	r2, r6
    1b6a:	4628      	mov	r0, r5
    1b6c:	f7ff fdd6 	bl	171c <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    1b70:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    1b72:	6861      	ldr	r1, [r4, #4]
    1b74:	9801      	ldr	r0, [sp, #4]
    1b76:	42b3      	cmp	r3, r6
    1b78:	bfa8      	it	ge
    1b7a:	4633      	movge	r3, r6
    1b7c:	462a      	mov	r2, r5
    1b7e:	3102      	adds	r1, #2
    1b80:	f7ff fef2 	bl	1968 <flash_area_read>
    if (rc != 0) {
    1b84:	2800      	cmp	r0, #0
    1b86:	d0ed      	beq.n	1b64 <mfg_read_tlv_body+0x34>
    1b88:	e7ea      	b.n	1b60 <mfg_read_tlv_body+0x30>
    1b8a:	bf00      	nop
    1b8c:	200001fc 	.word	0x200001fc
    1b90:	200001e4 	.word	0x200001e4

00001b94 <mfg_seek_next>:
{
    1b94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
    1b98:	4d1c      	ldr	r5, [pc, #112]	; (1c0c <mfg_seek_next+0x78>)
    rc = flash_area_open(mmr->area_id, &fap);
    1b9a:	4e1d      	ldr	r6, [pc, #116]	; (1c10 <mfg_seek_next+0x7c>)
{
    1b9c:	4604      	mov	r4, r0
    1b9e:	462f      	mov	r7, r5
    if (reader->mmr_idx >= mfg_num_mmrs) {
    1ba0:	78a2      	ldrb	r2, [r4, #2]
    1ba2:	682b      	ldr	r3, [r5, #0]
    1ba4:	429a      	cmp	r2, r3
    1ba6:	db04      	blt.n	1bb2 <mfg_seek_next+0x1e>
        return SYS_EINVAL;
    1ba8:	f06f 0001 	mvn.w	r0, #1
}
    1bac:	b002      	add	sp, #8
    1bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_open(mmr->area_id, &fap);
    1bb2:	230c      	movs	r3, #12
    1bb4:	4353      	muls	r3, r2
    1bb6:	a901      	add	r1, sp, #4
    1bb8:	5cf0      	ldrb	r0, [r6, r3]
    1bba:	eb06 0803 	add.w	r8, r6, r3
    1bbe:	f7ff fe79 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1bc2:	b9e8      	cbnz	r0, 1c00 <mfg_seek_next+0x6c>
    if (reader->offset == 0) {
    1bc4:	6863      	ldr	r3, [r4, #4]
    1bc6:	b98b      	cbnz	r3, 1bec <mfg_seek_next+0x58>
        reader->offset = mmr->offset;
    1bc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    1bcc:	9801      	ldr	r0, [sp, #4]
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    1bce:	6063      	str	r3, [r4, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    1bd0:	6883      	ldr	r3, [r0, #8]
    1bd2:	6861      	ldr	r1, [r4, #4]
    1bd4:	3b08      	subs	r3, #8
    1bd6:	4299      	cmp	r1, r3
    1bd8:	d30c      	bcc.n	1bf4 <mfg_seek_next+0x60>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    1bda:	78a3      	ldrb	r3, [r4, #2]
    1bdc:	683a      	ldr	r2, [r7, #0]
    1bde:	3301      	adds	r3, #1
    1be0:	4293      	cmp	r3, r2
    1be2:	da10      	bge.n	1c06 <mfg_seek_next+0x72>
            reader->offset = 0;
    1be4:	2200      	movs	r2, #0
    1be6:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    1be8:	70a3      	strb	r3, [r4, #2]
    1bea:	e7d9      	b.n	1ba0 <mfg_seek_next+0xc>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    1bec:	7862      	ldrb	r2, [r4, #1]
    1bee:	3302      	adds	r3, #2
    1bf0:	4413      	add	r3, r2
    1bf2:	e7eb      	b.n	1bcc <mfg_seek_next+0x38>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    1bf4:	2302      	movs	r3, #2
    1bf6:	4622      	mov	r2, r4
    1bf8:	f7ff feb6 	bl	1968 <flash_area_read>
    if (rc != 0) {
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d0d5      	beq.n	1bac <mfg_seek_next+0x18>
        rc = SYS_EIO;
    1c00:	f06f 0004 	mvn.w	r0, #4
    1c04:	e7d2      	b.n	1bac <mfg_seek_next+0x18>
            rc = SYS_EDONE;
    1c06:	f06f 000e 	mvn.w	r0, #14
    1c0a:	e7cf      	b.n	1bac <mfg_seek_next+0x18>
    1c0c:	200001fc 	.word	0x200001fc
    1c10:	200001e4 	.word	0x200001e4

00001c14 <mfg_seek_next_with_type>:
{
    1c14:	b538      	push	{r3, r4, r5, lr}
    1c16:	4604      	mov	r4, r0
    1c18:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    1c1a:	4620      	mov	r0, r4
    1c1c:	f7ff ffba 	bl	1b94 <mfg_seek_next>
        if (rc != 0) {
    1c20:	b910      	cbnz	r0, 1c28 <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
    1c22:	7823      	ldrb	r3, [r4, #0]
    1c24:	42ab      	cmp	r3, r5
    1c26:	d1f8      	bne.n	1c1a <mfg_seek_next_with_type+0x6>
}
    1c28:	bd38      	pop	{r3, r4, r5, pc}

00001c2a <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    1c2a:	220a      	movs	r2, #10
    1c2c:	f7ff bf80 	b.w	1b30 <mfg_read_tlv_body>

00001c30 <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    1c30:	2201      	movs	r2, #1
    1c32:	f7ff bf7d 	b.w	1b30 <mfg_read_tlv_body>
	...

00001c38 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    1c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
    1c3a:	4b10      	ldr	r3, [pc, #64]	; (1c7c <mfg_init+0x44>)
    1c3c:	7818      	ldrb	r0, [r3, #0]
    1c3e:	b9c8      	cbnz	r0, 1c74 <mfg_init+0x3c>
        return;
    }
    mfg_initialized = true;
    1c40:	2201      	movs	r2, #1
    1c42:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    1c44:	f7ff ff22 	bl	1a8c <mfg_read_next_mmr>
    if (rc != 0) {
    1c48:	b9a0      	cbnz	r0, 1c74 <mfg_init+0x3c>
    mfg_open(&reader);
    1c4a:	a802      	add	r0, sp, #8
    1c4c:	f000 f818 	bl	1c80 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    1c50:	2104      	movs	r1, #4
    1c52:	a802      	add	r0, sp, #8
    1c54:	f7ff ffde 	bl	1c14 <mfg_seek_next_with_type>
        switch (rc) {
    1c58:	b960      	cbnz	r0, 1c74 <mfg_init+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    1c5a:	a901      	add	r1, sp, #4
    1c5c:	a802      	add	r0, sp, #8
    1c5e:	f7ff ffe7 	bl	1c30 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    1c62:	b938      	cbnz	r0, 1c74 <mfg_init+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    1c64:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1c68:	f7ff ff10 	bl	1a8c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    1c6c:	2800      	cmp	r0, #0
    1c6e:	d0ef      	beq.n	1c50 <mfg_init+0x18>
    1c70:	300b      	adds	r0, #11
    1c72:	d0ed      	beq.n	1c50 <mfg_init+0x18>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
    1c74:	b005      	add	sp, #20
    1c76:	f85d fb04 	ldr.w	pc, [sp], #4
    1c7a:	bf00      	nop
    1c7c:	200001e0 	.word	0x200001e0

00001c80 <mfg_open>:
{
    1c80:	b510      	push	{r4, lr}
    1c82:	4604      	mov	r4, r0
    mfg_init();
    1c84:	f7ff ffd8 	bl	1c38 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    1c88:	2300      	movs	r3, #0
    1c8a:	e9c4 3300 	strd	r3, r3, [r4]
}
    1c8e:	bd10      	pop	{r4, pc}

00001c90 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    1c90:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    1c92:	f7ff fb05 	bl	12a0 <__assert_func>

00001c96 <boot_read_image_size>:
 * the TLVs.
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY) || defined(MCUBOOT_OVERWRITE_ONLY_FAST)
static int
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
{
    1c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c98:	4604      	mov	r4, r0

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1c9a:	2000      	movs	r0, #0
{
    1c9c:	460d      	mov	r5, r1
    1c9e:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1ca0:	f001 f866 	bl	2d70 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1ca4:	4669      	mov	r1, sp
    1ca6:	b2c0      	uxtb	r0, r0
    1ca8:	f7ff fe04 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1cac:	b118      	cbz	r0, 1cb6 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    1cae:	2601      	movs	r6, #1
    rc = 0;

done:
    flash_area_close(fap);
    return rc;
}
    1cb0:	4630      	mov	r0, r6
    1cb2:	b003      	add	sp, #12
    1cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1cb6:	232c      	movs	r3, #44	; 0x2c
    1cb8:	fb03 4505 	mla	r5, r3, r5, r4
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1cbc:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1cbe:	8929      	ldrh	r1, [r5, #8]
    1cc0:	68eb      	ldr	r3, [r5, #12]
    1cc2:	18cc      	adds	r4, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1cc4:	2304      	movs	r3, #4
    1cc6:	eb0d 0203 	add.w	r2, sp, r3
    1cca:	4621      	mov	r1, r4
    1ccc:	f7ff fe4c 	bl	1968 <flash_area_read>
    1cd0:	4606      	mov	r6, r0
    1cd2:	2800      	cmp	r0, #0
    1cd4:	d1eb      	bne.n	1cae <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1cd6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    1cda:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1cdc:	f646 1308 	movw	r3, #26888	; 0x6908
    1ce0:	429a      	cmp	r2, r3
    1ce2:	d11a      	bne.n	1d1a <boot_read_image_size+0x84>
        if (protect_tlv_size != info.it_tlv_tot) {
    1ce4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1ce8:	42ab      	cmp	r3, r5
    1cea:	d001      	beq.n	1cf0 <boot_read_image_size+0x5a>
            rc = BOOT_EBADIMAGE;
    1cec:	2603      	movs	r6, #3
    1cee:	e7df      	b.n	1cb0 <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1cf0:	2304      	movs	r3, #4
    1cf2:	eb0d 0203 	add.w	r2, sp, r3
    1cf6:	1961      	adds	r1, r4, r5
    1cf8:	9800      	ldr	r0, [sp, #0]
    1cfa:	f7ff fe35 	bl	1968 <flash_area_read>
    1cfe:	2800      	cmp	r0, #0
    1d00:	d1d5      	bne.n	1cae <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1d02:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    1d06:	f646 1307 	movw	r3, #26887	; 0x6907
    1d0a:	429a      	cmp	r2, r3
    1d0c:	d1ee      	bne.n	1cec <boot_read_image_size+0x56>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    1d0e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    1d12:	4429      	add	r1, r5
    1d14:	4421      	add	r1, r4
    1d16:	6039      	str	r1, [r7, #0]
    return rc;
    1d18:	e7ca      	b.n	1cb0 <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    1d1a:	2d00      	cmp	r5, #0
    1d1c:	d0f1      	beq.n	1d02 <boot_read_image_size+0x6c>
    1d1e:	e7e5      	b.n	1cec <boot_read_image_size+0x56>

00001d20 <boot_read_image_headers>:
#endif /* !MCUBOOT_OVERWRITE_ONLY */

static int
boot_read_image_headers(struct boot_loader_state *state, bool require_all,
        struct boot_status *bs)
{
    1d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    int i;

    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1d22:	4613      	mov	r3, r2
{
    1d24:	460f      	mov	r7, r1
    1d26:	4616      	mov	r6, r2
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1d28:	2100      	movs	r1, #0
    1d2a:	4602      	mov	r2, r0
{
    1d2c:	4605      	mov	r5, r0
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1d2e:	f000 fb18 	bl	2362 <boot_read_image_header>
        if (rc != 0) {
    1d32:	4604      	mov	r4, r0
    1d34:	b950      	cbnz	r0, 1d4c <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    1d36:	4633      	mov	r3, r6
    1d38:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    1d3c:	2101      	movs	r1, #1
    1d3e:	4628      	mov	r0, r5
    1d40:	f000 fb0f 	bl	2362 <boot_read_image_header>
        if (rc != 0) {
    1d44:	b110      	cbz	r0, 1d4c <boot_read_image_headers+0x2c>
             * if at least the first slot's header was read successfully,
             * then the boot loader can attempt a boot.
             *
             * Failure to read any headers is a fatal error.
             */
            if (i > 0 && !require_all) {
    1d46:	2f00      	cmp	r7, #0
    1d48:	bf18      	it	ne
    1d4a:	4604      	movne	r4, r0
            }
        }
    }

    return 0;
}
    1d4c:	4620      	mov	r0, r4
    1d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001d50 <boot_validate_slot.isra.3.constprop.5>:
 *         0 if image was successfully validated
 *         1 if no bootloable image was found
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
    1d50:	b530      	push	{r4, r5, lr}
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1d52:	2101      	movs	r1, #1
boot_validate_slot(struct boot_loader_state *state, int slot,
    1d54:	b089      	sub	sp, #36	; 0x24
    1d56:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1d58:	2000      	movs	r0, #0
    1d5a:	f001 f809 	bl	2d70 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1d5e:	a906      	add	r1, sp, #24
    1d60:	b2c0      	uxtb	r0, r0
    1d62:	f7ff fda7 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1d66:	2800      	cmp	r0, #0
    1d68:	d142      	bne.n	1df0 <boot_validate_slot.isra.3.constprop.5+0xa0>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1d6a:	2101      	movs	r1, #1
    1d6c:	f001 f800 	bl	2d70 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1d70:	a907      	add	r1, sp, #28
    1d72:	b2c0      	uxtb	r0, r0
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    1d74:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    1d78:	f7ff fd9c 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1d7c:	b128      	cbz	r0, 1d8a <boot_validate_slot.isra.3.constprop.5+0x3a>
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    1d7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if (boot_check_header_erased(state, slot) == 0 ||
    1d80:	f011 0110 	ands.w	r1, r1, #16
    1d84:	d010      	beq.n	1da8 <boot_validate_slot.isra.3.constprop.5+0x58>
        /* No bootable image in slot; continue booting from the primary slot. */
        rc = 1;
    1d86:	2001      	movs	r0, #1
    1d88:	e030      	b.n	1dec <boot_validate_slot.isra.3.constprop.5+0x9c>
    erased_val = flash_area_erased_val(fap);
    1d8a:	9807      	ldr	r0, [sp, #28]
    1d8c:	f7ff fe25 	bl	19da <flash_area_erased_val>
    1d90:	f104 032b 	add.w	r3, r4, #43	; 0x2b
    1d94:	b2c0      	uxtb	r0, r0
    1d96:	f104 022f 	add.w	r2, r4, #47	; 0x2f
    for (i = 0; i < len; i++) {
    1d9a:	4293      	cmp	r3, r2
    1d9c:	d0f3      	beq.n	1d86 <boot_validate_slot.isra.3.constprop.5+0x36>
        if (val != p[i]) {
    1d9e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    1da2:	4281      	cmp	r1, r0
    1da4:	d0f9      	beq.n	1d9a <boot_validate_slot.isra.3.constprop.5+0x4a>
    1da6:	e7ea      	b.n	1d7e <boot_validate_slot.isra.3.constprop.5+0x2e>
    if (hdr->ih_magic != IMAGE_MAGIC) {
    1da8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1daa:	4b13      	ldr	r3, [pc, #76]	; (1df8 <boot_validate_slot.isra.3.constprop.5+0xa8>)
    1dac:	429a      	cmp	r2, r3
    1dae:	d005      	beq.n	1dbc <boot_validate_slot.isra.3.constprop.5+0x6c>
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
        if (slot != BOOT_PRIMARY_SLOT) {
            flash_area_erase(fap, 0, fap->fa_size);
    1db0:	9806      	ldr	r0, [sp, #24]
    1db2:	2100      	movs	r1, #0
    1db4:	6882      	ldr	r2, [r0, #8]
    1db6:	f7ff fdfb 	bl	19b0 <flash_area_erase>
    1dba:	e7e4      	b.n	1d86 <boot_validate_slot.isra.3.constprop.5+0x36>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1dbc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
    1dbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (a > UINT32_MAX - b) {
    1dc0:	43c3      	mvns	r3, r0
    1dc2:	429a      	cmp	r2, r3
    1dc4:	d8f4      	bhi.n	1db0 <boot_validate_slot.isra.3.constprop.5+0x60>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    1dc6:	9b06      	ldr	r3, [sp, #24]
        *dest = a + b;
    1dc8:	4402      	add	r2, r0
    if (size >= fap->fa_size) {
    1dca:	6898      	ldr	r0, [r3, #8]
    1dcc:	4290      	cmp	r0, r2
    1dce:	d9ef      	bls.n	1db0 <boot_validate_slot.isra.3.constprop.5+0x60>
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    1dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
    1dd4:	9201      	str	r2, [sp, #4]
    1dd6:	4a09      	ldr	r2, [pc, #36]	; (1dfc <boot_validate_slot.isra.3.constprop.5+0xac>)
    1dd8:	9200      	str	r2, [sp, #0]
    1dda:	e9cd 1103 	strd	r1, r1, [sp, #12]
    1dde:	9102      	str	r1, [sp, #8]
    1de0:	462a      	mov	r2, r5
    1de2:	4608      	mov	r0, r1
    1de4:	f000 feaa 	bl	2b3c <bootutil_img_validate>
    1de8:	2800      	cmp	r0, #0
    1dea:	d1e1      	bne.n	1db0 <boot_validate_slot.isra.3.constprop.5+0x60>
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    1dec:	b009      	add	sp, #36	; 0x24
    1dee:	bd30      	pop	{r4, r5, pc}
        return -1;
    1df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1df4:	e7fa      	b.n	1dec <boot_validate_slot.isra.3.constprop.5+0x9c>
    1df6:	bf00      	nop
    1df8:	96f3b83d 	.word	0x96f3b83d
    1dfc:	2000186c 	.word	0x2000186c

00001e00 <boot_read_sectors>:
{
    1e00:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1e02:	ad02      	add	r5, sp, #8
    1e04:	2680      	movs	r6, #128	; 0x80
    1e06:	f845 6d04 	str.w	r6, [r5, #-4]!
{
    1e0a:	4604      	mov	r4, r0
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1e0c:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1e0e:	4629      	mov	r1, r5
    1e10:	2001      	movs	r0, #1
    1e12:	f7ff fd6d 	bl	18f0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    1e16:	9b01      	ldr	r3, [sp, #4]
    1e18:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
    1e1a:	b118      	cbz	r0, 1e24 <boot_read_sectors+0x24>
        return BOOT_EFLASH;
    1e1c:	2501      	movs	r5, #1
}
    1e1e:	4628      	mov	r0, r5
    1e20:	b002      	add	sp, #8
    1e22:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1e24:	6d22      	ldr	r2, [r4, #80]	; 0x50
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1e26:	9601      	str	r6, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1e28:	4629      	mov	r1, r5
    1e2a:	2002      	movs	r0, #2
    1e2c:	f7ff fd60 	bl	18f0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    1e30:	9b01      	ldr	r3, [sp, #4]
    1e32:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
    1e34:	2800      	cmp	r0, #0
    1e36:	d1f1      	bne.n	1e1c <boot_read_sectors+0x1c>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1e38:	4629      	mov	r1, r5
    1e3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1e3c:	9601      	str	r6, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    1e3e:	2003      	movs	r0, #3
    1e40:	f7ff fd56 	bl	18f0 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    1e44:	9b01      	ldr	r3, [sp, #4]
    1e46:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
    1e48:	4605      	mov	r5, r0
    1e4a:	2800      	cmp	r0, #0
    1e4c:	d1e6      	bne.n	1e1c <boot_read_sectors+0x1c>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1e4e:	6a20      	ldr	r0, [r4, #32]
    1e50:	f7ff fdc0 	bl	19d4 <flash_area_align>
    1e54:	4606      	mov	r6, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    1e56:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1e58:	f7ff fdbc 	bl	19d4 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    1e5c:	42b0      	cmp	r0, r6
    1e5e:	bf2c      	ite	cs
    1e60:	66a0      	strcs	r0, [r4, #104]	; 0x68
    1e62:	66a6      	strcc	r6, [r4, #104]	; 0x68
    1e64:	e7db      	b.n	1e1e <boot_read_sectors+0x1e>

00001e66 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    1e66:	2301      	movs	r3, #1
    1e68:	6003      	str	r3, [r0, #0]
    1e6a:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    1e6e:	6043      	str	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1e70:	2300      	movs	r3, #0
    bs->swap_size = 0;
    1e72:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    1e76:	4770      	bx	lr

00001e78 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    1e78:	7943      	ldrb	r3, [r0, #5]
    1e7a:	2b01      	cmp	r3, #1
    1e7c:	d107      	bne.n	1e8e <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    1e7e:	6803      	ldr	r3, [r0, #0]
    1e80:	2b01      	cmp	r3, #1
    1e82:	d104      	bne.n	1e8e <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    1e84:	7900      	ldrb	r0, [r0, #4]
    1e86:	1e43      	subs	r3, r0, #1
    1e88:	4258      	negs	r0, r3
    1e8a:	4158      	adcs	r0, r3
    1e8c:	4770      	bx	lr
    1e8e:	2000      	movs	r0, #0
}
    1e90:	4770      	bx	lr
	...

00001e94 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    1e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1e96:	460d      	mov	r5, r1
    1e98:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    1e9a:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    1e9c:	4628      	mov	r0, r5
    size = copy_size = 0;
    1e9e:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
    1ea2:	f7ff ffe9 	bl	1e78 <boot_status_is_reset>
    1ea6:	b338      	cbz	r0, 1ef8 <boot_swap_image+0x64>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    1ea8:	4e18      	ldr	r6, [pc, #96]	; (1f0c <boot_swap_image+0x78>)
    1eaa:	6822      	ldr	r2, [r4, #0]
    1eac:	42b2      	cmp	r2, r6
    1eae:	d10a      	bne.n	1ec6 <boot_swap_image+0x32>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    1eb0:	aa01      	add	r2, sp, #4
    1eb2:	4620      	mov	r0, r4
    1eb4:	f7ff feef 	bl	1c96 <boot_read_image_size>
            assert(rc == 0);
    1eb8:	b128      	cbz	r0, 1ec6 <boot_swap_image+0x32>
    1eba:	2300      	movs	r3, #0
    1ebc:	461a      	mov	r2, r3
    1ebe:	4619      	mov	r1, r3
    1ec0:	4618      	mov	r0, r3
    1ec2:	f7ff f9ed 	bl	12a0 <__assert_func>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    1ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ec8:	42b3      	cmp	r3, r6
    1eca:	d106      	bne.n	1eda <boot_swap_image+0x46>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    1ecc:	466a      	mov	r2, sp
    1ece:	2101      	movs	r1, #1
    1ed0:	4620      	mov	r0, r4
    1ed2:	f7ff fee0 	bl	1c96 <boot_read_image_size>
            assert(rc == 0);
    1ed6:	2800      	cmp	r0, #0
    1ed8:	d1ef      	bne.n	1eba <boot_swap_image+0x26>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    1eda:	e9dd 3200 	ldrd	r3, r2, [sp]
    1ede:	4293      	cmp	r3, r2
            copy_size = size;
    1ee0:	bf88      	it	hi
    1ee2:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
    1ee4:	9b01      	ldr	r3, [sp, #4]
    1ee6:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    1ee8:	4620      	mov	r0, r4
    1eea:	9a01      	ldr	r2, [sp, #4]
    1eec:	4629      	mov	r1, r5
    1eee:	f000 fb37 	bl	2560 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    1ef2:	2000      	movs	r0, #0
    1ef4:	b002      	add	sp, #8
    1ef6:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    1ef8:	f105 0108 	add.w	r1, r5, #8
    1efc:	f000 fd64 	bl	29c8 <boot_read_swap_size>
        assert(rc == 0);
    1f00:	2800      	cmp	r0, #0
    1f02:	d1da      	bne.n	1eba <boot_swap_image+0x26>
        copy_size = bs->swap_size;
    1f04:	68ab      	ldr	r3, [r5, #8]
    1f06:	9301      	str	r3, [sp, #4]
    1f08:	e7ee      	b.n	1ee8 <boot_swap_image+0x54>
    1f0a:	bf00      	nop
    1f0c:	96f3b83d 	.word	0x96f3b83d

00001f10 <boot_write_status>:
{
    1f10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bs->use_scratch) {
    1f12:	798b      	ldrb	r3, [r1, #6]
    1f14:	2b00      	cmp	r3, #0
{
    1f16:	4606      	mov	r6, r0
    1f18:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    1f1a:	bf14      	ite	ne
    1f1c:	2003      	movne	r0, #3
    1f1e:	2001      	moveq	r0, #1
    1f20:	a901      	add	r1, sp, #4
    1f22:	f7ff fcc7 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    1f26:	bb18      	cbnz	r0, 1f70 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    1f28:	9801      	ldr	r0, [sp, #4]
    1f2a:	f000 fcc4 	bl	28b6 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    1f2e:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    off = boot_status_off(fap) +
    1f30:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    1f32:	4628      	mov	r0, r5
    1f34:	f000 fa76 	bl	2424 <boot_status_internal_off>
    off = boot_status_off(fap) +
    1f38:	4404      	add	r4, r0
    align = flash_area_align(fap);
    1f3a:	9801      	ldr	r0, [sp, #4]
    1f3c:	f7ff fd4a 	bl	19d4 <flash_area_align>
    1f40:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    1f42:	9801      	ldr	r0, [sp, #4]
    1f44:	f7ff fd49 	bl	19da <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    1f48:	2208      	movs	r2, #8
    1f4a:	b2c1      	uxtb	r1, r0
    1f4c:	eb0d 0002 	add.w	r0, sp, r2
    1f50:	f7ff fbe4 	bl	171c <memset>
    buf[0] = bs->state;
    1f54:	792b      	ldrb	r3, [r5, #4]
    1f56:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    1f5a:	aa02      	add	r2, sp, #8
    1f5c:	4633      	mov	r3, r6
    1f5e:	4621      	mov	r1, r4
    1f60:	9801      	ldr	r0, [sp, #4]
    1f62:	f7ff fd13 	bl	198c <flash_area_write>
    if (rc != 0) {
    1f66:	3000      	adds	r0, #0
    1f68:	bf18      	it	ne
    1f6a:	2001      	movne	r0, #1
}
    1f6c:	b004      	add	sp, #16
    1f6e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    1f70:	2001      	movs	r0, #1
    return rc;
    1f72:	e7fb      	b.n	1f6c <boot_write_status+0x5c>

00001f74 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    1f74:	f7ff bd1c 	b.w	19b0 <flash_area_erase>

00001f78 <boot_copy_region>:
{
    1f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    1f7e:	4f12      	ldr	r7, [pc, #72]	; (1fc8 <boot_copy_region+0x50>)
{
    1f80:	4688      	mov	r8, r1
    1f82:	4691      	mov	r9, r2
    1f84:	469a      	mov	sl, r3
    bytes_copied = 0;
    1f86:	2400      	movs	r4, #0
    while (bytes_copied < sz) {
    1f88:	42b4      	cmp	r4, r6
    1f8a:	d301      	bcc.n	1f90 <boot_copy_region+0x18>
    return 0;
    1f8c:	2000      	movs	r0, #0
    1f8e:	e00e      	b.n	1fae <boot_copy_region+0x36>
        if (sz - bytes_copied > sizeof buf) {
    1f90:	1b35      	subs	r5, r6, r4
    1f92:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    1f96:	bf28      	it	cs
    1f98:	f44f 6580 	movcs.w	r5, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    1f9c:	462b      	mov	r3, r5
    1f9e:	4a0a      	ldr	r2, [pc, #40]	; (1fc8 <boot_copy_region+0x50>)
    1fa0:	eb04 010a 	add.w	r1, r4, sl
    1fa4:	4640      	mov	r0, r8
    1fa6:	f7ff fcdf 	bl	1968 <flash_area_read>
        if (rc != 0) {
    1faa:	b110      	cbz	r0, 1fb2 <boot_copy_region+0x3a>
            return BOOT_EFLASH;
    1fac:	2001      	movs	r0, #1
}
    1fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    1fb2:	9908      	ldr	r1, [sp, #32]
    1fb4:	462b      	mov	r3, r5
    1fb6:	463a      	mov	r2, r7
    1fb8:	1861      	adds	r1, r4, r1
    1fba:	4648      	mov	r0, r9
    1fbc:	f7ff fce6 	bl	198c <flash_area_write>
        if (rc != 0) {
    1fc0:	2800      	cmp	r0, #0
    1fc2:	d1f3      	bne.n	1fac <boot_copy_region+0x34>
        bytes_copied += chunk_sz;
    1fc4:	442c      	add	r4, r5
    1fc6:	e7df      	b.n	1f88 <boot_copy_region+0x10>
    1fc8:	2000026c 	.word	0x2000026c

00001fcc <context_boot_go>:
    }
}

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    1fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    1fce:	226c      	movs	r2, #108	; 0x6c
{
    1fd0:	4604      	mov	r4, r0
    1fd2:	b085      	sub	sp, #20
    1fd4:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
    1fd6:	2100      	movs	r1, #0
    1fd8:	f7ff fba0 	bl	171c <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    1fdc:	4b73      	ldr	r3, [pc, #460]	; (21ac <context_boot_go+0x1e0>)
    1fde:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    1fe0:	4b73      	ldr	r3, [pc, #460]	; (21b0 <context_boot_go+0x1e4>)
    1fe2:	6523      	str	r3, [r4, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    1fe4:	2100      	movs	r1, #0
        state->scratch.sectors = scratch_sectors;
    1fe6:	4b73      	ldr	r3, [pc, #460]	; (21b4 <context_boot_go+0x1e8>)
    1fe8:	65e3      	str	r3, [r4, #92]	; 0x5c
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    1fea:	4608      	mov	r0, r1
    1fec:	f000 fec0 	bl	2d70 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    1ff0:	f104 0120 	add.w	r1, r4, #32
    1ff4:	b2c0      	uxtb	r0, r0
    1ff6:	f7ff fc5d 	bl	18b4 <flash_area_open>
            assert(rc == 0);
    1ffa:	b978      	cbnz	r0, 201c <context_boot_go+0x50>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    1ffc:	2101      	movs	r1, #1
    1ffe:	f000 feb7 	bl	2d70 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    2002:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    2006:	b2c0      	uxtb	r0, r0
    2008:	f7ff fc54 	bl	18b4 <flash_area_open>
            assert(rc == 0);
    200c:	b930      	cbnz	r0, 201c <context_boot_go+0x50>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    200e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    2012:	2003      	movs	r0, #3
    2014:	f7ff fc4e 	bl	18b4 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    2018:	4605      	mov	r5, r0
    201a:	b128      	cbz	r0, 2028 <context_boot_go+0x5c>
            assert(rc == 0);
    201c:	2300      	movs	r3, #0
    201e:	461a      	mov	r2, r3
    2020:	4619      	mov	r1, r3
    2022:	4618      	mov	r0, r3
    2024:	f7ff f93c 	bl	12a0 <__assert_func>
    rc = boot_read_sectors(state);
    2028:	4620      	mov	r0, r4
    202a:	f7ff fee9 	bl	1e00 <boot_read_sectors>
    if (rc != 0) {
    202e:	b118      	cbz	r0, 2038 <context_boot_go+0x6c>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2030:	2301      	movs	r3, #1
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    2032:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2036:	e05a      	b.n	20ee <context_boot_go+0x122>
    rc = boot_read_image_headers(state, false, NULL);
    2038:	462a      	mov	r2, r5
    203a:	4629      	mov	r1, r5
    203c:	4620      	mov	r0, r4
    203e:	f7ff fe6f 	bl	1d20 <boot_read_image_headers>
    if (rc != 0) {
    2042:	2800      	cmp	r0, #0
    2044:	d1f4      	bne.n	2030 <context_boot_go+0x64>
    if (boot_slots_compatible(state)) {
    2046:	4620      	mov	r0, r4
    2048:	f000 f9f7 	bl	243a <boot_slots_compatible>
    204c:	2800      	cmp	r0, #0
    204e:	d0ef      	beq.n	2030 <context_boot_go+0x64>
        boot_status_reset(bs);
    2050:	4668      	mov	r0, sp
    2052:	f7ff ff08 	bl	1e66 <boot_status_reset>
        rc = swap_read_status(state, bs);
    2056:	4669      	mov	r1, sp
    2058:	4620      	mov	r0, r4
    205a:	f000 f91f 	bl	229c <swap_read_status>
        if (rc != 0) {
    205e:	2800      	cmp	r0, #0
    2060:	d1e6      	bne.n	2030 <context_boot_go+0x64>
        if (!boot_status_is_reset(bs)) {
    2062:	4668      	mov	r0, sp
    2064:	f7ff ff08 	bl	1e78 <boot_status_is_reset>
    2068:	bb60      	cbnz	r0, 20c4 <context_boot_go+0xf8>
    rc = boot_swap_image(state, bs);
    206a:	4669      	mov	r1, sp
    206c:	4620      	mov	r0, r4
    206e:	f7ff ff11 	bl	1e94 <boot_swap_image>
    assert(rc == 0);
    2072:	2800      	cmp	r0, #0
    2074:	d1d2      	bne.n	201c <context_boot_go+0x50>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
    2076:	f89d 3007 	ldrb.w	r3, [sp, #7]
    207a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    207e:	3b03      	subs	r3, #3
    2080:	2b01      	cmp	r3, #1
    2082:	d805      	bhi.n	2090 <context_boot_go+0xc4>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2084:	f000 f955 	bl	2332 <swap_set_image_ok>
        if (rc != 0) {
    2088:	b110      	cbz	r0, 2090 <context_boot_go+0xc4>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    208a:	23ff      	movs	r3, #255	; 0xff
    208c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    2090:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2094:	3b02      	subs	r3, #2
    2096:	2b02      	cmp	r3, #2
    2098:	d806      	bhi.n	20a8 <context_boot_go+0xdc>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    209a:	2000      	movs	r0, #0
    209c:	f000 f93b 	bl	2316 <swap_set_copy_done>
        if (rc != 0) {
    20a0:	b110      	cbz	r0, 20a8 <context_boot_go+0xdc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    20a2:	23ff      	movs	r3, #255	; 0xff
    20a4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    20a8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    20ac:	2bff      	cmp	r3, #255	; 0xff
    20ae:	d0b5      	beq.n	201c <context_boot_go+0x50>
            assert(rc == 0);
    20b0:	2800      	cmp	r0, #0
    20b2:	d1b3      	bne.n	201c <context_boot_go+0x50>
            rc = boot_read_image_headers(state, false, bs);
    20b4:	4601      	mov	r1, r0
    20b6:	466a      	mov	r2, sp
    20b8:	4620      	mov	r0, r4
    20ba:	f7ff fe31 	bl	1d20 <boot_read_image_headers>
            assert(rc == 0);
    20be:	2800      	cmp	r0, #0
    20c0:	d0b6      	beq.n	2030 <context_boot_go+0x64>
    20c2:	e7ab      	b.n	201c <context_boot_go+0x50>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    20c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    20c8:	2b01      	cmp	r3, #1
    20ca:	d11e      	bne.n	210a <context_boot_go+0x13e>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    20cc:	4628      	mov	r0, r5
    20ce:	f000 fcf3 	bl	2ab8 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
    20d2:	1e83      	subs	r3, r0, #2
    20d4:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    20d6:	4606      	mov	r6, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    20d8:	d807      	bhi.n	20ea <context_boot_go+0x11e>
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    20da:	4620      	mov	r0, r4
    20dc:	f7ff fe38 	bl	1d50 <boot_validate_slot.isra.3.constprop.5>
        if (rc == 1) {
    20e0:	2801      	cmp	r0, #1
    20e2:	d010      	beq.n	2106 <context_boot_go+0x13a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    20e4:	2800      	cmp	r0, #0
    20e6:	bf18      	it	ne
    20e8:	2605      	movne	r6, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    20ea:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    20ee:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    20f2:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    20f6:	3b01      	subs	r3, #1
    20f8:	2b04      	cmp	r3, #4
    20fa:	d850      	bhi.n	219e <context_boot_go+0x1d2>
    20fc:	e8df f003 	tbb	[pc, r3]
    2100:	0e0e0e29 	.word	0x0e0e0e29
    2104:	49          	.byte	0x49
    2105:	00          	.byte	0x00
            swap_type = BOOT_SWAP_TYPE_NONE;
    2106:	4606      	mov	r6, r0
    2108:	e7ef      	b.n	20ea <context_boot_go+0x11e>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    210a:	4620      	mov	r0, r4
    210c:	f7ff fe20 	bl	1d50 <boot_validate_slot.isra.3.constprop.5>
    2110:	b108      	cbz	r0, 2116 <context_boot_go+0x14a>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    2112:	2305      	movs	r3, #5
    2114:	e78d      	b.n	2032 <context_boot_go+0x66>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    2116:	f89d 3007 	ldrb.w	r3, [sp, #7]
    211a:	e78a      	b.n	2032 <context_boot_go+0x66>
        rc = boot_swap_image(state, bs);
    211c:	4669      	mov	r1, sp
    211e:	4620      	mov	r0, r4
    2120:	f7ff feb8 	bl	1e94 <boot_swap_image>
    assert(rc == 0);
    2124:	4605      	mov	r5, r0
    2126:	2800      	cmp	r0, #0
    2128:	f47f af78 	bne.w	201c <context_boot_go+0x50>
    swap_type = BOOT_SWAP_TYPE(state);
    212c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    2130:	1eda      	subs	r2, r3, #3
    2132:	2a01      	cmp	r2, #1
    2134:	d806      	bhi.n	2144 <context_boot_go+0x178>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2136:	f000 f8fc 	bl	2332 <swap_set_image_ok>
        if (rc != 0) {
    213a:	b128      	cbz	r0, 2148 <context_boot_go+0x17c>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    213c:	23ff      	movs	r3, #255	; 0xff
    213e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2142:	e76b      	b.n	201c <context_boot_go+0x50>
    if (BOOT_IS_UPGRADE(swap_type)) {
    2144:	2b02      	cmp	r3, #2
    2146:	d104      	bne.n	2152 <context_boot_go+0x186>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2148:	2000      	movs	r0, #0
    214a:	f000 f8e4 	bl	2316 <swap_set_copy_done>
        if (rc != 0) {
    214e:	2800      	cmp	r0, #0
    2150:	d1f4      	bne.n	213c <context_boot_go+0x170>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2152:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2156:	2bff      	cmp	r3, #255	; 0xff
    2158:	f43f af60 	beq.w	201c <context_boot_go+0x50>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    215c:	2b01      	cmp	r3, #1
    215e:	d006      	beq.n	216e <context_boot_go+0x1a2>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
    2160:	466a      	mov	r2, sp
    2162:	2100      	movs	r1, #0
    2164:	4620      	mov	r0, r4
    2166:	f7ff fddb 	bl	1d20 <boot_read_image_headers>
            if (rc != 0) {
    216a:	4605      	mov	r5, r0
    216c:	b970      	cbnz	r0, 218c <context_boot_go+0x1c0>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    216e:	6822      	ldr	r2, [r4, #0]
    2170:	4b11      	ldr	r3, [pc, #68]	; (21b8 <context_boot_go+0x1ec>)
    2172:	429a      	cmp	r2, r3
    2174:	d117      	bne.n	21a6 <context_boot_go+0x1da>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
    2176:	2210      	movs	r2, #16
    2178:	2100      	movs	r1, #0
    217a:	4668      	mov	r0, sp
    217c:	f7ff face 	bl	171c <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    2180:	6a23      	ldr	r3, [r4, #32]
    2182:	785a      	ldrb	r2, [r3, #1]
    2184:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    2186:	685b      	ldr	r3, [r3, #4]
    2188:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    218a:	603c      	str	r4, [r7, #0]
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    218c:	4628      	mov	r0, r5
    218e:	b005      	add	sp, #20
    2190:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2192:	2000      	movs	r0, #0
    2194:	f000 f8cd 	bl	2332 <swap_set_image_ok>
            if (rc != 0) {
    2198:	4605      	mov	r5, r0
    219a:	2800      	cmp	r0, #0
    219c:	d0d9      	beq.n	2152 <context_boot_go+0x186>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    219e:	23ff      	movs	r3, #255	; 0xff
    21a0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    21a4:	e7d5      	b.n	2152 <context_boot_go+0x186>
            rc = BOOT_EBADIMAGE;
    21a6:	2503      	movs	r5, #3
    return rc;
    21a8:	e7f0      	b.n	218c <context_boot_go+0x1c0>
    21aa:	bf00      	nop
    21ac:	2000066c 	.word	0x2000066c
    21b0:	2000126c 	.word	0x2000126c
    21b4:	20000c6c 	.word	0x20000c6c
    21b8:	96f3b83d 	.word	0x96f3b83d

000021bc <boot_go>:
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    return context_boot_go(&boot_data, rsp);
    21bc:	4601      	mov	r1, r0
    21be:	4801      	ldr	r0, [pc, #4]	; (21c4 <boot_go+0x8>)
    21c0:	f7ff bf04 	b.w	1fcc <context_boot_go>
    21c4:	20000200 	.word	0x20000200

000021c8 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    21c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21cc:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    21ce:	2100      	movs	r1, #0
{
    21d0:	4606      	mov	r6, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    21d2:	4608      	mov	r0, r1
    21d4:	f000 fdcc 	bl	2d70 <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    21d8:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    21da:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    21dc:	2000      	movs	r0, #0
    21de:	f000 fdc7 	bl	2d70 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    21e2:	783b      	ldrb	r3, [r7, #0]
    21e4:	42a3      	cmp	r3, r4
    21e6:	d021      	beq.n	222c <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    21e8:	4283      	cmp	r3, r0
    21ea:	d128      	bne.n	223e <swap_erase_trailer_sectors+0x76>
        slot = BOOT_SECONDARY_SLOT;
    21ec:	2501      	movs	r5, #1
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
    21ee:	232c      	movs	r3, #44	; 0x2c
    21f0:	fb03 6505 	mla	r5, r3, r5, r6
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    21f4:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    21f6:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
    21fa:	f000 fb4c 	bl	2896 <boot_trailer_sz>
    21fe:	240c      	movs	r4, #12
    2200:	fb04 f409 	mul.w	r4, r4, r9
    2204:	4680      	mov	r8, r0
    2206:	3c0c      	subs	r4, #12
    total_sz = 0;
    2208:	2600      	movs	r6, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    220a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    220c:	191a      	adds	r2, r3, r4
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    220e:	e9d2 1901 	ldrd	r1, r9, [r2, #4]
    2212:	685b      	ldr	r3, [r3, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    2214:	464a      	mov	r2, r9
    2216:	1ac9      	subs	r1, r1, r3
    2218:	4638      	mov	r0, r7
    221a:	f7ff feab 	bl	1f74 <boot_erase_region>
        assert(rc == 0);
    221e:	b138      	cbz	r0, 2230 <swap_erase_trailer_sectors+0x68>
    2220:	2300      	movs	r3, #0
    2222:	461a      	mov	r2, r3
    2224:	4619      	mov	r1, r3
    2226:	4618      	mov	r0, r3
    2228:	f7ff f83a 	bl	12a0 <__assert_func>
        slot = BOOT_PRIMARY_SLOT;
    222c:	2500      	movs	r5, #0
    222e:	e7de      	b.n	21ee <swap_erase_trailer_sectors+0x26>

        sector--;
        total_sz += sz;
    2230:	444e      	add	r6, r9
    } while (total_sz < trailer_sz);
    2232:	45b0      	cmp	r8, r6
    2234:	f1a4 040c 	sub.w	r4, r4, #12
    2238:	d8e7      	bhi.n	220a <swap_erase_trailer_sectors+0x42>

    return rc;
}
    223a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    223e:	2001      	movs	r0, #1
    2240:	e7fb      	b.n	223a <swap_erase_trailer_sectors+0x72>

00002242 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    2242:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2244:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2246:	2002      	movs	r0, #2
    2248:	4669      	mov	r1, sp
{
    224a:	4615      	mov	r5, r2
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    224c:	f000 fbac 	bl	29a8 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    2250:	4602      	mov	r2, r0
    2252:	b128      	cbz	r0, 2260 <swap_status_init+0x1e>
    2254:	2300      	movs	r3, #0
    2256:	461a      	mov	r2, r3
    2258:	4619      	mov	r1, r3
    225a:	4618      	mov	r0, r3
    225c:	f7ff f820 	bl	12a0 <__assert_func>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    2260:	79e9      	ldrb	r1, [r5, #7]
    2262:	2901      	cmp	r1, #1
    2264:	d004      	beq.n	2270 <swap_status_init+0x2e>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    2266:	4620      	mov	r0, r4
    2268:	f000 fc02 	bl	2a70 <boot_write_swap_info>
        assert(rc == 0);
    226c:	2800      	cmp	r0, #0
    226e:	d1f1      	bne.n	2254 <swap_status_init+0x12>
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    2270:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2274:	2b01      	cmp	r3, #1
    2276:	d104      	bne.n	2282 <swap_status_init+0x40>
        rc = boot_write_image_ok(fap);
    2278:	4620      	mov	r0, r4
    227a:	f000 fbed 	bl	2a58 <boot_write_image_ok>
        assert(rc == 0);
    227e:	2800      	cmp	r0, #0
    2280:	d1e8      	bne.n	2254 <swap_status_init+0x12>
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    2282:	68a9      	ldr	r1, [r5, #8]
    2284:	4620      	mov	r0, r4
    2286:	f000 fc0b 	bl	2aa0 <boot_write_swap_size>
    assert(rc == 0);
    228a:	2800      	cmp	r0, #0
    228c:	d1e2      	bne.n	2254 <swap_status_init+0x12>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    228e:	4620      	mov	r0, r4
    2290:	f000 fbc8 	bl	2a24 <boot_write_magic>
    assert(rc == 0);
    2294:	2800      	cmp	r0, #0
    2296:	d1dd      	bne.n	2254 <swap_status_init+0x12>

    return 0;
}
    2298:	b003      	add	sp, #12
    229a:	bd30      	pop	{r4, r5, pc}

0000229c <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    229c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    229e:	460d      	mov	r5, r1
    22a0:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    22a2:	f000 f91f 	bl	24e4 <swap_status_source>
    switch (bs->source) {
    22a6:	2801      	cmp	r0, #1
    bs->source = swap_status_source(state);
    22a8:	4604      	mov	r4, r0
    22aa:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    22ac:	d02f      	beq.n	230e <swap_read_status+0x72>
    22ae:	2802      	cmp	r0, #2
    22b0:	d003      	beq.n	22ba <swap_read_status+0x1e>
    22b2:	bb30      	cbnz	r0, 2302 <swap_read_status+0x66>
    }

    flash_area_close(fap);

    return rc;
}
    22b4:	4620      	mov	r0, r4
    22b6:	b002      	add	sp, #8
    22b8:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    22ba:	2001      	movs	r0, #1
    rc = flash_area_open(area_id, &fap);
    22bc:	a901      	add	r1, sp, #4
    22be:	f7ff faf9 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    22c2:	bb30      	cbnz	r0, 2312 <swap_read_status+0x76>
    rc = swap_read_status_bytes(fap, state, bs);
    22c4:	462a      	mov	r2, r5
    22c6:	4631      	mov	r1, r6
    22c8:	9801      	ldr	r0, [sp, #4]
    22ca:	f000 f861 	bl	2390 <swap_read_status_bytes>
    if (rc == 0) {
    22ce:	4604      	mov	r4, r0
    22d0:	2800      	cmp	r0, #0
    22d2:	d1ef      	bne.n	22b4 <swap_read_status+0x18>
        off = boot_swap_info_off(fap);
    22d4:	9801      	ldr	r0, [sp, #4]
    22d6:	f000 fb01 	bl	28dc <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    22da:	2301      	movs	r3, #1
    22dc:	4601      	mov	r1, r0
    22de:	f10d 0203 	add.w	r2, sp, #3
    22e2:	9801      	ldr	r0, [sp, #4]
    22e4:	f7ff fb7e 	bl	19e4 <flash_area_read_is_empty>
        if (rc == 1) {
    22e8:	2801      	cmp	r0, #1
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    22ea:	bf08      	it	eq
    22ec:	f88d 0003 	strbeq.w	r0, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    22f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rc = 0;
    22f4:	bf08      	it	eq
    22f6:	4620      	moveq	r0, r4
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    22f8:	f003 030f 	and.w	r3, r3, #15
    22fc:	71eb      	strb	r3, [r5, #7]
    22fe:	4604      	mov	r4, r0
    2300:	e7d8      	b.n	22b4 <swap_read_status+0x18>
        assert(0);
    2302:	2300      	movs	r3, #0
    2304:	461a      	mov	r2, r3
    2306:	4619      	mov	r1, r3
    2308:	4618      	mov	r0, r3
    230a:	f7fe ffc9 	bl	12a0 <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    230e:	2003      	movs	r0, #3
    2310:	e7d4      	b.n	22bc <swap_read_status+0x20>
        return BOOT_EFLASH;
    2312:	2401      	movs	r4, #1
    2314:	e7ce      	b.n	22b4 <swap_read_status+0x18>

00002316 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    2316:	b507      	push	{r0, r1, r2, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2318:	2001      	movs	r0, #1
    231a:	a901      	add	r1, sp, #4
    231c:	f7ff faca 	bl	18b4 <flash_area_open>
            &fap);
    if (rc != 0) {
    2320:	b928      	cbnz	r0, 232e <swap_set_copy_done+0x18>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    2322:	9801      	ldr	r0, [sp, #4]
    2324:	f000 fb8c 	bl	2a40 <boot_write_copy_done>
    flash_area_close(fap);
    return rc;
}
    2328:	b003      	add	sp, #12
    232a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EFLASH;
    232e:	2001      	movs	r0, #1
    2330:	e7fa      	b.n	2328 <swap_set_copy_done+0x12>

00002332 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    2332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2334:	2001      	movs	r0, #1
    2336:	a901      	add	r1, sp, #4
    2338:	f7ff fabc 	bl	18b4 <flash_area_open>
            &fap);
    if (rc != 0) {
    233c:	b118      	cbz	r0, 2346 <swap_set_image_ok+0x14>
        return BOOT_EFLASH;
    233e:	2001      	movs	r0, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    2340:	b005      	add	sp, #20
    2342:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    2346:	a902      	add	r1, sp, #8
    2348:	9801      	ldr	r0, [sp, #4]
    234a:	f000 facb 	bl	28e4 <boot_read_swap_state>
    if (rc != 0) {
    234e:	2800      	cmp	r0, #0
    2350:	d1f5      	bne.n	233e <swap_set_image_ok+0xc>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    2352:	f89d 300b 	ldrb.w	r3, [sp, #11]
    2356:	2b03      	cmp	r3, #3
    2358:	d1f2      	bne.n	2340 <swap_set_image_ok+0xe>
        rc = boot_write_image_ok(fap);
    235a:	9801      	ldr	r0, [sp, #4]
    235c:	f000 fb7c 	bl	2a58 <boot_write_image_ok>
    2360:	e7ee      	b.n	2340 <swap_set_image_ok+0xe>

00002362 <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    2362:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2364:	2000      	movs	r0, #0
{
    2366:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2368:	f000 fd02 	bl	2d70 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    236c:	a901      	add	r1, sp, #4
    236e:	b2c0      	uxtb	r0, r0
    2370:	f7ff faa0 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    2374:	4601      	mov	r1, r0
    2376:	b948      	cbnz	r0, 238c <boot_read_image_header+0x2a>
        rc = BOOT_EFLASH;
        goto done;
    }

    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    2378:	2320      	movs	r3, #32
    237a:	4622      	mov	r2, r4
    237c:	9801      	ldr	r0, [sp, #4]
    237e:	f7ff faf3 	bl	1968 <flash_area_read>
    if (rc != 0) {
    2382:	3000      	adds	r0, #0
    2384:	bf18      	it	ne
    2386:	2001      	movne	r0, #1
    rc = 0;

done:
    flash_area_close(fap);
    return rc;
}
    2388:	b002      	add	sp, #8
    238a:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    238c:	2001      	movs	r0, #1
    return rc;
    238e:	e7fb      	b.n	2388 <boot_read_image_header+0x26>

00002390 <swap_read_status_bytes>:
 * operation.
 */
int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
    2390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2394:	4680      	mov	r8, r0
    2396:	468b      	mov	fp, r1
    2398:	4616      	mov	r6, r2
    int found_idx;
    int invalid;
    int rc;
    int i;

    off = boot_status_off(fap);
    239a:	f000 fa8c 	bl	28b6 <boot_status_off>
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    239e:	4641      	mov	r1, r8
    off = boot_status_off(fap);
    23a0:	4682      	mov	sl, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    23a2:	2000      	movs	r0, #0
    23a4:	f000 fa7c 	bl	28a0 <boot_status_entries>
    if (max_entries < 0) {
    23a8:	f1b0 0900 	subs.w	r9, r0, #0
    23ac:	db36      	blt.n	241c <swap_read_status_bytes+0x8c>
    }

    found = 0;
    found_idx = 0;
    invalid = 0;
    for (i = 0; i < max_entries; i++) {
    23ae:	2700      	movs	r7, #0
    found_idx = 0;
    23b0:	463c      	mov	r4, r7
    found = 0;
    23b2:	463d      	mov	r5, r7
    for (i = 0; i < max_entries; i++) {
    23b4:	454f      	cmp	r7, r9
    23b6:	d112      	bne.n	23de <swap_read_status_bytes+0x4e>
         */
        assert(0);
#endif
    }

    if (found) {
    23b8:	b16d      	cbz	r5, 23d6 <swap_read_status_bytes+0x46>
        if (!found_idx) {
    23ba:	2c00      	cmp	r4, #0
    23bc:	bf08      	it	eq
    23be:	463c      	moveq	r4, r7
            found_idx = i;
        }
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    23c0:	2303      	movs	r3, #3
    23c2:	fb94 f3f3 	sdiv	r3, r4, r3
    23c6:	1c5a      	adds	r2, r3, #1
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    23c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    23cc:	1ae3      	subs	r3, r4, r3
    23ce:	3301      	adds	r3, #1
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    23d0:	6032      	str	r2, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    23d2:	7133      	strb	r3, [r6, #4]
    }

    return 0;
    23d4:	2500      	movs	r5, #0
}
    23d6:	4628      	mov	r0, r5
    23d8:	b003      	add	sp, #12
    23da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    23de:	f8db 1068 	ldr.w	r1, [fp, #104]	; 0x68
    23e2:	2301      	movs	r3, #1
    23e4:	f10d 0207 	add.w	r2, sp, #7
    23e8:	fb01 a107 	mla	r1, r1, r7, sl
    23ec:	4640      	mov	r0, r8
    23ee:	f7ff faf9 	bl	19e4 <flash_area_read_is_empty>
        if (rc < 0) {
    23f2:	2800      	cmp	r0, #0
    23f4:	db14      	blt.n	2420 <swap_read_status_bytes+0x90>
        if (rc == 1) {
    23f6:	2801      	cmp	r0, #1
    23f8:	d105      	bne.n	2406 <swap_read_status_bytes+0x76>
            if (found && !found_idx) {
    23fa:	b115      	cbz	r5, 2402 <swap_read_status_bytes+0x72>
    23fc:	2c00      	cmp	r4, #0
    23fe:	bf08      	it	eq
    2400:	463c      	moveq	r4, r7
    for (i = 0; i < max_entries; i++) {
    2402:	3701      	adds	r7, #1
    2404:	e7d6      	b.n	23b4 <swap_read_status_bytes+0x24>
        } else if (!found) {
    2406:	b13d      	cbz	r5, 2418 <swap_read_status_bytes+0x88>
        } else if (found_idx) {
    2408:	2c00      	cmp	r4, #0
    240a:	d0fa      	beq.n	2402 <swap_read_status_bytes+0x72>
        assert(0);
    240c:	2300      	movs	r3, #0
    240e:	461a      	mov	r2, r3
    2410:	4619      	mov	r1, r3
    2412:	4618      	mov	r0, r3
    2414:	f7fe ff44 	bl	12a0 <__assert_func>
            found = 1;
    2418:	2501      	movs	r5, #1
    241a:	e7f2      	b.n	2402 <swap_read_status_bytes+0x72>
        return BOOT_EBADARGS;
    241c:	2507      	movs	r5, #7
    241e:	e7da      	b.n	23d6 <swap_read_status_bytes+0x46>
            return BOOT_EFLASH;
    2420:	2501      	movs	r5, #1
    2422:	e7d8      	b.n	23d6 <swap_read_status_bytes+0x46>

00002424 <boot_status_internal_off>:

uint32_t
boot_status_internal_off(const struct boot_status *bs, int elem_sz)
{
    2424:	b510      	push	{r4, lr}
    int idx_sz;

    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;

    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2426:	7902      	ldrb	r2, [r0, #4]
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2428:	6803      	ldr	r3, [r0, #0]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    242a:	3a01      	subs	r2, #1
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    242c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2430:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2432:	4351      	muls	r1, r2
}
    2434:	fb04 1003 	mla	r0, r4, r3, r1
    2438:	bd10      	pop	{r4, pc}

0000243a <boot_slots_compatible>:
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    243a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return BOOT_IMG(state, slot).num_sectors;
    243e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    2442:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    2446:	d84b      	bhi.n	24e0 <boot_slots_compatible+0xa6>
    2448:	f8d0 e054 	ldr.w	lr, [r0, #84]	; 0x54
    244c:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    2450:	d846      	bhi.n	24e0 <boot_slots_compatible+0xa6>
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    2452:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2454:	f8d3 a008 	ldr.w	sl, [r3, #8]
     * number of a slot's sectors are able to fit into another, which only
     * excludes cases where sector sizes are not a multiple of each other.
     */
    i = sz0 = primary_slot_sz = 0;
    j = sz1 = secondary_slot_sz = 0;
    smaller = 0;
    2458:	2300      	movs	r3, #0
    j = sz1 = secondary_slot_sz = 0;
    245a:	461c      	mov	r4, r3
    i = sz0 = primary_slot_sz = 0;
    245c:	461d      	mov	r5, r3
    j = sz1 = secondary_slot_sz = 0;
    245e:	4699      	mov	r9, r3
    i = sz0 = primary_slot_sz = 0;
    2460:	461a      	mov	r2, r3
    j = sz1 = secondary_slot_sz = 0;
    2462:	461e      	mov	r6, r3
    i = sz0 = primary_slot_sz = 0;
    2464:	4619      	mov	r1, r3
    2466:	f04f 0c0c 	mov.w	ip, #12
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    246a:	4545      	cmp	r5, r8
    246c:	d30b      	bcc.n	2486 <boot_slots_compatible+0x4c>
    246e:	4574      	cmp	r4, lr
    2470:	d309      	bcc.n	2486 <boot_slots_compatible+0x4c>
            smaller = sz0 = sz1 = 0;
        }
#endif
    }

    if ((i != num_sectors_primary) ||
    2472:	4545      	cmp	r5, r8
    2474:	d134      	bne.n	24e0 <boot_slots_compatible+0xa6>
    2476:	4574      	cmp	r4, lr
    2478:	d132      	bne.n	24e0 <boot_slots_compatible+0xa6>
        (j != num_sectors_secondary) ||
    247a:	eba2 0309 	sub.w	r3, r2, r9
    247e:	4258      	negs	r0, r3
    2480:	4158      	adcs	r0, r3
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
        return 0;
    }

    return 1;
}
    2482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (sz0 == sz1) {
    2486:	42b1      	cmp	r1, r6
    2488:	d115      	bne.n	24b6 <boot_slots_compatible+0x7c>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    248a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    248c:	fb0c 7705 	mla	r7, ip, r5, r7
            i++;
    2490:	3501      	adds	r5, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2492:	68bf      	ldr	r7, [r7, #8]
    2494:	4439      	add	r1, r7
    2496:	6d07      	ldr	r7, [r0, #80]	; 0x50
    2498:	fb0c 7704 	mla	r7, ip, r4, r7
            j++;
    249c:	3401      	adds	r4, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    249e:	68bf      	ldr	r7, [r7, #8]
    24a0:	443e      	add	r6, r7
        if (sz0 == sz1) {
    24a2:	42b1      	cmp	r1, r6
    24a4:	d1e1      	bne.n	246a <boot_slots_compatible+0x30>
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    24a6:	4551      	cmp	r1, sl
            primary_slot_sz += sz0;
    24a8:	440a      	add	r2, r1
            secondary_slot_sz += sz1;
    24aa:	4489      	add	r9, r1
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    24ac:	d818      	bhi.n	24e0 <boot_slots_compatible+0xa6>
            smaller = sz0 = sz1 = 0;
    24ae:	2300      	movs	r3, #0
    24b0:	461e      	mov	r6, r3
    24b2:	4619      	mov	r1, r3
    24b4:	e7d9      	b.n	246a <boot_slots_compatible+0x30>
        } else if (sz0 < sz1) {
    24b6:	d209      	bcs.n	24cc <boot_slots_compatible+0x92>
    24b8:	6a47      	ldr	r7, [r0, #36]	; 0x24
    24ba:	fb0c 7705 	mla	r7, ip, r5, r7
            if (smaller == 2) {
    24be:	2b02      	cmp	r3, #2
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    24c0:	68bf      	ldr	r7, [r7, #8]
    24c2:	4439      	add	r1, r7
            if (smaller == 2) {
    24c4:	d00c      	beq.n	24e0 <boot_slots_compatible+0xa6>
            i++;
    24c6:	3501      	adds	r5, #1
            smaller = 1;
    24c8:	2301      	movs	r3, #1
    24ca:	e7ea      	b.n	24a2 <boot_slots_compatible+0x68>
    24cc:	6d07      	ldr	r7, [r0, #80]	; 0x50
    24ce:	fb0c 7704 	mla	r7, ip, r4, r7
            if (smaller == 1) {
    24d2:	2b01      	cmp	r3, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    24d4:	68bf      	ldr	r7, [r7, #8]
    24d6:	443e      	add	r6, r7
            if (smaller == 1) {
    24d8:	d002      	beq.n	24e0 <boot_slots_compatible+0xa6>
            j++;
    24da:	3401      	adds	r4, #1
            smaller = 2;
    24dc:	2302      	movs	r3, #2
    24de:	e7e0      	b.n	24a2 <boot_slots_compatible+0x68>
        return 0;
    24e0:	2000      	movs	r0, #0
    24e2:	e7ce      	b.n	2482 <boot_slots_compatible+0x48>

000024e4 <swap_status_source>:
 * @return      A BOOT_STATUS_SOURCE_[...] code indicating where status should
 *              be read from.
 */
int
swap_status_source(struct boot_loader_state *state)
{
    24e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24e8:	b085      	sub	sp, #20
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    24ea:	a902      	add	r1, sp, #8
    24ec:	2001      	movs	r0, #1
    24ee:	f000 fa5b 	bl	29a8 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);
    24f2:	b128      	cbz	r0, 2500 <swap_status_source+0x1c>
    24f4:	2300      	movs	r3, #0
    24f6:	461a      	mov	r2, r3
    24f8:	4619      	mov	r1, r3
    24fa:	4618      	mov	r0, r3
    24fc:	f7fe fed0 	bl	12a0 <__assert_func>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    2500:	4669      	mov	r1, sp
    2502:	2003      	movs	r0, #3
    2504:	f000 fa50 	bl	29a8 <boot_read_swap_state_by_id>
    assert(rc == 0);
    2508:	4605      	mov	r5, r0
    250a:	2800      	cmp	r0, #0
    250c:	d1f2      	bne.n	24f4 <swap_status_source+0x10>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);

    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
        table = &boot_status_tables[i];

        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    250e:	4e13      	ldr	r6, [pc, #76]	; (255c <swap_status_source+0x78>)
    2510:	4604      	mov	r4, r0
    2512:	4637      	mov	r7, r6
    2514:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2518:	f816 0024 	ldrb.w	r0, [r6, r4, lsl #2]
    251c:	ea4f 0884 	mov.w	r8, r4, lsl #2
    2520:	f000 f9aa 	bl	2878 <boot_magic_compatible_check>
    2524:	b1b0      	cbz	r0, 2554 <swap_status_source+0x70>
    2526:	eb06 0908 	add.w	r9, r6, r8
                          state_primary_slot.magic) &&
            boot_magic_compatible_check(table->bst_magic_scratch,
    252a:	f89d 1000 	ldrb.w	r1, [sp]
    252e:	f899 0001 	ldrb.w	r0, [r9, #1]
    2532:	f000 f9a1 	bl	2878 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    2536:	b168      	cbz	r0, 2554 <swap_status_source+0x70>
                          state_scratch.magic) &&
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2538:	f899 3002 	ldrb.w	r3, [r9, #2]
                          state_scratch.magic) &&
    253c:	2b04      	cmp	r3, #4
    253e:	d003      	beq.n	2548 <swap_status_source+0x64>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2540:	f89d 200a 	ldrb.w	r2, [sp, #10]
    2544:	429a      	cmp	r2, r3
    2546:	d105      	bne.n	2554 <swap_status_source+0x70>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
        {
            source = table->bst_status_source;
    2548:	4447      	add	r7, r8
            BOOT_LOG_INF("Boot source: %s",
                         source == BOOT_STATUS_SOURCE_NONE ? "none" :
                         source == BOOT_STATUS_SOURCE_SCRATCH ? "scratch" :
                         source == BOOT_STATUS_SOURCE_PRIMARY_SLOT ?
                                   "primary slot" : "BUG; can't happen");
            return source;
    254a:	78fd      	ldrb	r5, [r7, #3]
        }
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    254c:	4628      	mov	r0, r5
    254e:	b005      	add	sp, #20
    2550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    2554:	3401      	adds	r4, #1
    2556:	2c04      	cmp	r4, #4
    2558:	d1dc      	bne.n	2514 <swap_status_source+0x30>
    255a:	e7f7      	b.n	254c <swap_status_source+0x68>
    255c:	00003d60 	.word	0x00003d60

00002560 <swap_run>:
}

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    2560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    2564:	2300      	movs	r3, #0
{
    2566:	4605      	mov	r5, r0
    2568:	200c      	movs	r0, #12
    256a:	460c      	mov	r4, r1
    256c:	b08b      	sub	sp, #44	; 0x2c
    primary_slot_size = 0;
    256e:	4619      	mov	r1, r3
    last_sector_idx = 0;
    2570:	461e      	mov	r6, r3
    2572:	4684      	mov	ip, r0
     * find what is the last sector in the primary slot that needs swapping.
     * Since we already know that both slots are compatible, the secondary
     * slot's last sector is not really required after this check is finished.
     */
    while (1) {
        if ((primary_slot_size < copy_size) ||
    2574:	4291      	cmp	r1, r2
    2576:	d302      	bcc.n	257e <swap_run+0x1e>
    2578:	4299      	cmp	r1, r3
    257a:	f080 8144 	bcs.w	2806 <swap_run+0x2a6>
    257e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    2580:	fb00 7706 	mla	r7, r0, r6, r7
            (primary_slot_size < secondary_slot_size)) {
           primary_slot_size += boot_img_sector_size(state,
                                                     BOOT_PRIMARY_SLOT,
                                                     last_sector_idx);
        }
        if ((secondary_slot_size < copy_size) ||
    2584:	4293      	cmp	r3, r2
           primary_slot_size += boot_img_sector_size(state,
    2586:	68bf      	ldr	r7, [r7, #8]
    2588:	4439      	add	r1, r7
        if ((secondary_slot_size < copy_size) ||
    258a:	d302      	bcc.n	2592 <swap_run+0x32>
    258c:	428b      	cmp	r3, r1
    258e:	f080 8138 	bcs.w	2802 <swap_run+0x2a2>
    2592:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    2594:	fb0c 7706 	mla	r7, ip, r6, r7
            (secondary_slot_size < primary_slot_size)) {
           secondary_slot_size += boot_img_sector_size(state,
                                                       BOOT_SECONDARY_SLOT,
                                                       last_idx_secondary_slot);
        }
        if (primary_slot_size >= copy_size &&
    2598:	428a      	cmp	r2, r1
           secondary_slot_size += boot_img_sector_size(state,
    259a:	68bf      	ldr	r7, [r7, #8]
    259c:	443b      	add	r3, r7
        if (primary_slot_size >= copy_size &&
    259e:	d803      	bhi.n	25a8 <swap_run+0x48>
    25a0:	429a      	cmp	r2, r3
    25a2:	d801      	bhi.n	25a8 <swap_run+0x48>
                secondary_slot_size >= copy_size &&
    25a4:	4299      	cmp	r1, r3
    25a6:	d001      	beq.n	25ac <swap_run+0x4c>
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    25a8:	3601      	adds	r6, #1
        if ((primary_slot_size < copy_size) ||
    25aa:	e7e3      	b.n	2574 <swap_run+0x14>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    25ac:	f04f 0b00 	mov.w	fp, #0
    25b0:	f04f 0a0c 	mov.w	sl, #12
    25b4:	6dab      	ldr	r3, [r5, #88]	; 0x58
    25b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    25b8:	6899      	ldr	r1, [r3, #8]
    sz = 0;
    25ba:	f04f 0900 	mov.w	r9, #0
    25be:	fb0a 2306 	mla	r3, sl, r6, r2
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    25c2:	689b      	ldr	r3, [r3, #8]
    25c4:	444b      	add	r3, r9
        if (new_sz > scratch_sz) {
    25c6:	4299      	cmp	r1, r3
    25c8:	d303      	bcc.n	25d2 <swap_run+0x72>
    for (i = last_sector_idx; i >= 0; i--) {
    25ca:	3e01      	subs	r6, #1
    25cc:	1c70      	adds	r0, r6, #1
    25ce:	4699      	mov	r9, r3
    25d0:	d1f5      	bne.n	25be <swap_run+0x5e>
    while (last_sector_idx >= 0) {
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    25d2:	6823      	ldr	r3, [r4, #0]
    25d4:	3b01      	subs	r3, #1
    25d6:	455b      	cmp	r3, fp
    25d8:	f200 810b 	bhi.w	27f2 <swap_run+0x292>
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    25dc:	fb06 a30a 	mla	r3, r6, sl, sl
    25e0:	4413      	add	r3, r2
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    25e2:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    25e4:	685f      	ldr	r7, [r3, #4]
    25e6:	6853      	ldr	r3, [r2, #4]
    25e8:	eba7 0803 	sub.w	r8, r7, r3
    25ec:	f000 f953 	bl	2896 <boot_trailer_sz>
    25f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    25f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    25f4:	3b01      	subs	r3, #1
    25f6:	fb0a 1303 	mla	r3, sl, r3, r1
    25fa:	6849      	ldr	r1, [r1, #4]
    25fc:	685b      	ldr	r3, [r3, #4]
    if ((img_off + sz) >
    25fe:	eb08 0209 	add.w	r2, r8, r9
    2602:	1a5b      	subs	r3, r3, r1
    2604:	429a      	cmp	r2, r3
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    2606:	6823      	ldr	r3, [r4, #0]
        copy_sz -= trailer_sz;
    2608:	bf8c      	ite	hi
    260a:	eba9 0700 	subhi.w	r7, r9, r0
    if ((img_off + sz) >
    260e:	464f      	movls	r7, r9
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    2610:	2b01      	cmp	r3, #1
    2612:	d10f      	bne.n	2634 <swap_run+0xd4>
    2614:	ebb7 0309 	subs.w	r3, r7, r9
    2618:	bf18      	it	ne
    261a:	2301      	movne	r3, #1
    261c:	71a3      	strb	r3, [r4, #6]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    261e:	a905      	add	r1, sp, #20
    2620:	2001      	movs	r0, #1
    2622:	f7ff f947 	bl	18b4 <flash_area_open>
    assert (rc == 0);
    2626:	b138      	cbz	r0, 2638 <swap_run+0xd8>
    2628:	2300      	movs	r3, #0
    262a:	461a      	mov	r2, r3
    262c:	4619      	mov	r1, r3
    262e:	4618      	mov	r0, r3
    2630:	f7fe fe36 	bl	12a0 <__assert_func>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    2634:	2300      	movs	r3, #0
    2636:	e7f1      	b.n	261c <swap_run+0xbc>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2638:	a906      	add	r1, sp, #24
    263a:	2002      	movs	r0, #2
    263c:	f7ff f93a 	bl	18b4 <flash_area_open>
    assert (rc == 0);
    2640:	2800      	cmp	r0, #0
    2642:	d1f1      	bne.n	2628 <swap_run+0xc8>
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    2644:	a907      	add	r1, sp, #28
    2646:	2003      	movs	r0, #3
    2648:	f7ff f934 	bl	18b4 <flash_area_open>
    assert (rc == 0);
    264c:	4601      	mov	r1, r0
    264e:	2800      	cmp	r0, #0
    2650:	d1ea      	bne.n	2628 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_0) {
    2652:	7923      	ldrb	r3, [r4, #4]
    2654:	2b01      	cmp	r3, #1
    2656:	d138      	bne.n	26ca <swap_run+0x16a>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    2658:	9807      	ldr	r0, [sp, #28]
    265a:	6882      	ldr	r2, [r0, #8]
    265c:	f7ff fc8a 	bl	1f74 <boot_erase_region>
        assert(rc == 0);
    2660:	2800      	cmp	r0, #0
    2662:	d1e1      	bne.n	2628 <swap_run+0xc8>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    2664:	6823      	ldr	r3, [r4, #0]
    2666:	2b01      	cmp	r3, #1
    2668:	d11c      	bne.n	26a4 <swap_run+0x144>
            rc = swap_status_init(state, fap_scratch, bs);
    266a:	4622      	mov	r2, r4
    266c:	9907      	ldr	r1, [sp, #28]
    266e:	4628      	mov	r0, r5
    2670:	f7ff fde7 	bl	2242 <swap_status_init>
            assert(rc == 0);
    2674:	2800      	cmp	r0, #0
    2676:	d1d7      	bne.n	2628 <swap_run+0xc8>
            if (!bs->use_scratch) {
    2678:	79a3      	ldrb	r3, [r4, #6]
    267a:	b99b      	cbnz	r3, 26a4 <swap_run+0x144>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    267c:	9905      	ldr	r1, [sp, #20]
    267e:	4628      	mov	r0, r5
    2680:	f7ff fda2 	bl	21c8 <swap_erase_trailer_sectors>
                assert(rc == 0);
    2684:	2800      	cmp	r0, #0
    2686:	d1cf      	bne.n	2628 <swap_run+0xc8>
                rc = swap_status_init(state, fap_primary_slot, bs);
    2688:	4622      	mov	r2, r4
    268a:	9905      	ldr	r1, [sp, #20]
    268c:	4628      	mov	r0, r5
    268e:	f7ff fdd8 	bl	2242 <swap_status_init>
                assert(rc == 0);
    2692:	2800      	cmp	r0, #0
    2694:	d1c8      	bne.n	2628 <swap_run+0xc8>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    2696:	9807      	ldr	r0, [sp, #28]
    2698:	2100      	movs	r1, #0
    269a:	6882      	ldr	r2, [r0, #8]
    269c:	f7ff fc6a 	bl	1f74 <boot_erase_region>
                assert(rc == 0);
    26a0:	2800      	cmp	r0, #0
    26a2:	d1c1      	bne.n	2628 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    26a4:	2300      	movs	r3, #0
    26a6:	9300      	str	r3, [sp, #0]
    26a8:	9701      	str	r7, [sp, #4]
    26aa:	4643      	mov	r3, r8
    26ac:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    26b0:	4628      	mov	r0, r5
    26b2:	f7ff fc61 	bl	1f78 <boot_copy_region>
        assert(rc == 0);
    26b6:	2800      	cmp	r0, #0
    26b8:	d1b6      	bne.n	2628 <swap_run+0xc8>
        rc = boot_write_status(state, bs);
    26ba:	4621      	mov	r1, r4
    26bc:	4628      	mov	r0, r5
    26be:	f7ff fc27 	bl	1f10 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    26c2:	2302      	movs	r3, #2
    26c4:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    26c6:	2800      	cmp	r0, #0
    26c8:	d1ae      	bne.n	2628 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_1) {
    26ca:	7923      	ldrb	r3, [r4, #4]
    26cc:	2b02      	cmp	r3, #2
    26ce:	d123      	bne.n	2718 <swap_run+0x1b8>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    26d0:	464a      	mov	r2, r9
    26d2:	4641      	mov	r1, r8
    26d4:	9806      	ldr	r0, [sp, #24]
    26d6:	f7ff fc4d 	bl	1f74 <boot_erase_region>
        assert(rc == 0);
    26da:	2800      	cmp	r0, #0
    26dc:	d1a4      	bne.n	2628 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    26de:	e9cd 8700 	strd	r8, r7, [sp]
    26e2:	4643      	mov	r3, r8
    26e4:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    26e8:	4628      	mov	r0, r5
    26ea:	f7ff fc45 	bl	1f78 <boot_copy_region>
        assert(rc == 0);
    26ee:	2800      	cmp	r0, #0
    26f0:	d19a      	bne.n	2628 <swap_run+0xc8>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    26f2:	6823      	ldr	r3, [r4, #0]
    26f4:	2b01      	cmp	r3, #1
    26f6:	d107      	bne.n	2708 <swap_run+0x1a8>
    26f8:	79a3      	ldrb	r3, [r4, #6]
    26fa:	b92b      	cbnz	r3, 2708 <swap_run+0x1a8>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    26fc:	9906      	ldr	r1, [sp, #24]
    26fe:	4628      	mov	r0, r5
    2700:	f7ff fd62 	bl	21c8 <swap_erase_trailer_sectors>
            assert(rc == 0);
    2704:	2800      	cmp	r0, #0
    2706:	d18f      	bne.n	2628 <swap_run+0xc8>
        rc = boot_write_status(state, bs);
    2708:	4621      	mov	r1, r4
    270a:	4628      	mov	r0, r5
    270c:	f7ff fc00 	bl	1f10 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    2710:	2303      	movs	r3, #3
    2712:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2714:	2800      	cmp	r0, #0
    2716:	d187      	bne.n	2628 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_2) {
    2718:	7923      	ldrb	r3, [r4, #4]
    271a:	9303      	str	r3, [sp, #12]
    271c:	2b03      	cmp	r3, #3
    271e:	d168      	bne.n	27f2 <swap_run+0x292>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    2720:	464a      	mov	r2, r9
    2722:	4641      	mov	r1, r8
    2724:	9805      	ldr	r0, [sp, #20]
    2726:	f7ff fc25 	bl	1f74 <boot_erase_region>
        assert(rc == 0);
    272a:	4603      	mov	r3, r0
    272c:	2800      	cmp	r0, #0
    272e:	f47f af7b 	bne.w	2628 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    2732:	e9cd 8700 	strd	r8, r7, [sp]
    2736:	9a05      	ldr	r2, [sp, #20]
    2738:	9907      	ldr	r1, [sp, #28]
    273a:	4628      	mov	r0, r5
    273c:	f7ff fc1c 	bl	1f78 <boot_copy_region>
        assert(rc == 0);
    2740:	2800      	cmp	r0, #0
    2742:	f47f af71 	bne.w	2628 <swap_run+0xc8>
        if (bs->use_scratch) {
    2746:	79a3      	ldrb	r3, [r4, #6]
    2748:	2b00      	cmp	r3, #0
    274a:	d039      	beq.n	27c0 <swap_run+0x260>
            scratch_trailer_off = boot_status_off(fap_scratch);
    274c:	9807      	ldr	r0, [sp, #28]
    274e:	f000 f8b2 	bl	28b6 <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    2752:	6eab      	ldr	r3, [r5, #104]	; 0x68
    2754:	9a05      	ldr	r2, [sp, #20]
    2756:	9907      	ldr	r1, [sp, #28]
    2758:	005b      	lsls	r3, r3, #1
    275a:	4447      	add	r7, r8
    275c:	9301      	str	r3, [sp, #4]
    275e:	9700      	str	r7, [sp, #0]
    2760:	4603      	mov	r3, r0
    2762:	4628      	mov	r0, r5
    2764:	f7ff fc08 	bl	1f78 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    2768:	2800      	cmp	r0, #0
    276a:	f47f af5d 	bne.w	2628 <swap_run+0xc8>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    276e:	a908      	add	r1, sp, #32
    2770:	9803      	ldr	r0, [sp, #12]
    2772:	f000 f919 	bl	29a8 <boot_read_swap_state_by_id>
            assert(rc == 0);
    2776:	2800      	cmp	r0, #0
    2778:	f47f af56 	bne.w	2628 <swap_run+0xc8>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    277c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    2780:	2b01      	cmp	r3, #1
    2782:	d105      	bne.n	2790 <swap_run+0x230>
                rc = boot_write_image_ok(fap_primary_slot);
    2784:	9805      	ldr	r0, [sp, #20]
    2786:	f000 f967 	bl	2a58 <boot_write_image_ok>
                assert(rc == 0);
    278a:	2800      	cmp	r0, #0
    278c:	f47f af4c 	bne.w	2628 <swap_run+0xc8>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    2790:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    2794:	2901      	cmp	r1, #1
    2796:	d006      	beq.n	27a6 <swap_run+0x246>
                rc = boot_write_swap_info(fap_primary_slot,
    2798:	2200      	movs	r2, #0
    279a:	9805      	ldr	r0, [sp, #20]
    279c:	f000 f968 	bl	2a70 <boot_write_swap_info>
                assert(rc == 0);
    27a0:	2800      	cmp	r0, #0
    27a2:	f47f af41 	bne.w	2628 <swap_run+0xc8>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    27a6:	68a1      	ldr	r1, [r4, #8]
    27a8:	9805      	ldr	r0, [sp, #20]
    27aa:	f000 f979 	bl	2aa0 <boot_write_swap_size>
            assert(rc == 0);
    27ae:	2800      	cmp	r0, #0
    27b0:	f47f af3a 	bne.w	2628 <swap_run+0xc8>
            rc = boot_write_magic(fap_primary_slot);
    27b4:	9805      	ldr	r0, [sp, #20]
    27b6:	f000 f935 	bl	2a24 <boot_write_magic>
            assert(rc == 0);
    27ba:	2800      	cmp	r0, #0
    27bc:	f47f af34 	bne.w	2628 <swap_run+0xc8>
        bs->use_scratch = 0;
    27c0:	f04f 0300 	mov.w	r3, #0
        erase_scratch = bs->use_scratch;
    27c4:	79a7      	ldrb	r7, [r4, #6]
        bs->use_scratch = 0;
    27c6:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    27c8:	4621      	mov	r1, r4
    27ca:	4628      	mov	r0, r5
    27cc:	f7ff fba0 	bl	1f10 <boot_write_status>
        bs->idx++;
    27d0:	6823      	ldr	r3, [r4, #0]
    27d2:	3301      	adds	r3, #1
    27d4:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    27d6:	2301      	movs	r3, #1
    27d8:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    27da:	4601      	mov	r1, r0
    27dc:	2800      	cmp	r0, #0
    27de:	f47f af23 	bne.w	2628 <swap_run+0xc8>
        if (erase_scratch) {
    27e2:	b137      	cbz	r7, 27f2 <swap_run+0x292>
            rc = boot_erase_region(fap_scratch, 0, sz);
    27e4:	464a      	mov	r2, r9
    27e6:	9807      	ldr	r0, [sp, #28]
    27e8:	f7ff fbc4 	bl	1f74 <boot_erase_region>
            assert(rc == 0);
    27ec:	2800      	cmp	r0, #0
    27ee:	f47f af1b 	bne.w	2628 <swap_run+0xc8>
    while (last_sector_idx >= 0) {
    27f2:	1c73      	adds	r3, r6, #1
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
        swap_idx++;
    27f4:	f10b 0b01 	add.w	fp, fp, #1
    while (last_sector_idx >= 0) {
    27f8:	f47f aedc 	bne.w	25b4 <swap_run+0x54>
    }

}
    27fc:	b00b      	add	sp, #44	; 0x2c
    27fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (primary_slot_size >= copy_size &&
    2802:	428a      	cmp	r2, r1
    2804:	e6cd      	b.n	25a2 <swap_run+0x42>
        if ((secondary_slot_size < copy_size) ||
    2806:	4293      	cmp	r3, r2
    2808:	d205      	bcs.n	2816 <swap_run+0x2b6>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    280a:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    280c:	fb00 7706 	mla	r7, r0, r6, r7
           secondary_slot_size += boot_img_sector_size(state,
    2810:	68bf      	ldr	r7, [r7, #8]
    2812:	443b      	add	r3, r7
    2814:	e6c4      	b.n	25a0 <swap_run+0x40>
        if ((secondary_slot_size < copy_size) ||
    2816:	4299      	cmp	r1, r3
    2818:	d8f7      	bhi.n	280a <swap_run+0x2aa>
    281a:	e6c3      	b.n	25a4 <swap_run+0x44>

0000281c <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    281c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2820:	4606      	mov	r6, r0
    2822:	460f      	mov	r7, r1
    2824:	4691      	mov	r9, r2
    2826:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    2828:	f7ff f8d4 	bl	19d4 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    282c:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    282e:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    2830:	d81f      	bhi.n	2872 <boot_write_trailer+0x56>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    2832:	4630      	mov	r0, r6
    2834:	f7ff f8d1 	bl	19da <flash_area_erased_val>
    2838:	42ac      	cmp	r4, r5
    283a:	bf38      	it	cc
    283c:	462c      	movcc	r4, r5
    283e:	4680      	mov	r8, r0
    2840:	b2e4      	uxtb	r4, r4
    if (align < inlen) {
        align = inlen;
    }
    memcpy(buf, inbuf, inlen);
    2842:	462a      	mov	r2, r5
    2844:	4649      	mov	r1, r9
    2846:	4668      	mov	r0, sp
    2848:	f7fe ff5b 	bl	1702 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    284c:	1b62      	subs	r2, r4, r5
    284e:	fa5f f188 	uxtb.w	r1, r8
    2852:	eb0d 0005 	add.w	r0, sp, r5
    2856:	f7fe ff61 	bl	171c <memset>

    rc = flash_area_write(fap, off, buf, align);
    285a:	4623      	mov	r3, r4
    285c:	466a      	mov	r2, sp
    285e:	4639      	mov	r1, r7
    2860:	4630      	mov	r0, r6
    2862:	f7ff f893 	bl	198c <flash_area_write>
    if (rc != 0) {
    2866:	3000      	adds	r0, #0
    2868:	bf18      	it	ne
    286a:	2001      	movne	r0, #1
        return BOOT_EFLASH;
    }

    return 0;
}
    286c:	b003      	add	sp, #12
    286e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    2872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2876:	e7f9      	b.n	286c <boot_write_trailer+0x50>

00002878 <boot_magic_compatible_check>:
    switch (tbl_val) {
    2878:	2804      	cmp	r0, #4
    287a:	d00a      	beq.n	2892 <boot_magic_compatible_check+0x1a>
    287c:	2805      	cmp	r0, #5
    287e:	d104      	bne.n	288a <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    2880:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    2884:	bf18      	it	ne
    2886:	2001      	movne	r0, #1
    2888:	4770      	bx	lr
        return tbl_val == val;
    288a:	1a43      	subs	r3, r0, r1
    288c:	4258      	negs	r0, r3
    288e:	4158      	adcs	r0, r3
    2890:	4770      	bx	lr
        return 1;
    2892:	2001      	movs	r0, #1
}
    2894:	4770      	bx	lr

00002896 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2896:	f44f 73c0 	mov.w	r3, #384	; 0x180
    289a:	4358      	muls	r0, r3
}
    289c:	3030      	adds	r0, #48	; 0x30
    289e:	4770      	bx	lr

000028a0 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    28a0:	7808      	ldrb	r0, [r1, #0]
    28a2:	2803      	cmp	r0, #3
    28a4:	d006      	beq.n	28b4 <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    28a6:	3801      	subs	r0, #1
    return -1;
    28a8:	2801      	cmp	r0, #1
    28aa:	bf94      	ite	ls
    28ac:	f44f 70c0 	movls.w	r0, #384	; 0x180
    28b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
    28b4:	4770      	bx	lr

000028b6 <boot_status_off>:
{
    28b6:	b510      	push	{r4, lr}
    28b8:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    28ba:	f7ff f88b 	bl	19d4 <flash_area_align>
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    28be:	f44f 73c0 	mov.w	r3, #384	; 0x180
    28c2:	4358      	muls	r0, r3
    assert(off_from_end <= fap->fa_size);
    28c4:	68a3      	ldr	r3, [r4, #8]
           BOOT_MAX_ALIGN * 4                     +
    28c6:	3030      	adds	r0, #48	; 0x30
    assert(off_from_end <= fap->fa_size);
    28c8:	4283      	cmp	r3, r0
    28ca:	d205      	bcs.n	28d8 <boot_status_off+0x22>
    28cc:	2300      	movs	r3, #0
    28ce:	461a      	mov	r2, r3
    28d0:	4619      	mov	r1, r3
    28d2:	4618      	mov	r0, r3
    28d4:	f7fe fce4 	bl	12a0 <__assert_func>
}
    28d8:	1a18      	subs	r0, r3, r0
    28da:	bd10      	pop	{r4, pc}

000028dc <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    28dc:	6880      	ldr	r0, [r0, #8]
}
    28de:	3828      	subs	r0, #40	; 0x28
    28e0:	4770      	bx	lr
	...

000028e4 <boot_read_swap_state>:
{
    28e4:	b530      	push	{r4, r5, lr}
    28e6:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    28e8:	6881      	ldr	r1, [r0, #8]
{
    28ea:	b087      	sub	sp, #28
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    28ec:	2310      	movs	r3, #16
    28ee:	aa02      	add	r2, sp, #8
    28f0:	3910      	subs	r1, #16
{
    28f2:	4605      	mov	r5, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    28f4:	f7ff f876 	bl	19e4 <flash_area_read_is_empty>
    if (rc < 0) {
    28f8:	2800      	cmp	r0, #0
    28fa:	db0d      	blt.n	2918 <boot_read_swap_state+0x34>
    if (rc == 1) {
    28fc:	2801      	cmp	r0, #1
    28fe:	d10d      	bne.n	291c <boot_read_swap_state+0x38>
        state->magic = BOOT_MAGIC_UNSET;
    2900:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    2902:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    2904:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2906:	2301      	movs	r3, #1
    2908:	f10d 0207 	add.w	r2, sp, #7
    290c:	3928      	subs	r1, #40	; 0x28
    290e:	4628      	mov	r0, r5
    2910:	f7ff f868 	bl	19e4 <flash_area_read_is_empty>
    if (rc < 0) {
    2914:	2800      	cmp	r0, #0
    2916:	da0b      	bge.n	2930 <boot_read_swap_state+0x4c>
        return BOOT_EFLASH;
    2918:	2001      	movs	r0, #1
    291a:	e034      	b.n	2986 <boot_read_swap_state+0xa2>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    291c:	2210      	movs	r2, #16
    291e:	4921      	ldr	r1, [pc, #132]	; (29a4 <boot_read_swap_state+0xc0>)
    2920:	a802      	add	r0, sp, #8
    2922:	f7fe feca 	bl	16ba <memcmp>
    return BOOT_MAGIC_BAD;
    2926:	2800      	cmp	r0, #0
    2928:	bf0c      	ite	eq
    292a:	2301      	moveq	r3, #1
    292c:	2302      	movne	r3, #2
    292e:	e7e8      	b.n	2902 <boot_read_swap_state+0x1e>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2930:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2934:	2801      	cmp	r0, #1
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2936:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    293a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    293e:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2940:	7123      	strb	r3, [r4, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2942:	d001      	beq.n	2948 <boot_read_swap_state+0x64>
    2944:	2a04      	cmp	r2, #4
    2946:	d903      	bls.n	2950 <boot_read_swap_state+0x6c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2948:	2301      	movs	r3, #1
    294a:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    294c:	2300      	movs	r3, #0
    294e:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    2950:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    2952:	2301      	movs	r3, #1
    2954:	1ca2      	adds	r2, r4, #2
    2956:	3920      	subs	r1, #32
    2958:	4628      	mov	r0, r5
    295a:	f7ff f843 	bl	19e4 <flash_area_read_is_empty>
    if (rc < 0) {
    295e:	2800      	cmp	r0, #0
    2960:	dbda      	blt.n	2918 <boot_read_swap_state+0x34>
    if (rc == 1) {
    2962:	2801      	cmp	r0, #1
    2964:	d111      	bne.n	298a <boot_read_swap_state+0xa6>
        state->copy_done = BOOT_FLAG_UNSET;
    2966:	2303      	movs	r3, #3
        state->copy_done = boot_flag_decode(state->copy_done);
    2968:	70a3      	strb	r3, [r4, #2]
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    296a:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    296c:	2301      	movs	r3, #1
    296e:	1ce2      	adds	r2, r4, #3
    2970:	3918      	subs	r1, #24
    2972:	4628      	mov	r0, r5
    2974:	f7ff f836 	bl	19e4 <flash_area_read_is_empty>
    if (rc < 0) {
    2978:	2800      	cmp	r0, #0
    297a:	dbcd      	blt.n	2918 <boot_read_swap_state+0x34>
    if (rc == 1) {
    297c:	2801      	cmp	r0, #1
    297e:	d10a      	bne.n	2996 <boot_read_swap_state+0xb2>
        state->image_ok = BOOT_FLAG_UNSET;
    2980:	2303      	movs	r3, #3
        state->image_ok = boot_flag_decode(state->image_ok);
    2982:	70e3      	strb	r3, [r4, #3]
    return 0;
    2984:	2000      	movs	r0, #0
}
    2986:	b007      	add	sp, #28
    2988:	bd30      	pop	{r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    298a:	78a3      	ldrb	r3, [r4, #2]
    return BOOT_FLAG_SET;
    298c:	2b01      	cmp	r3, #1
    298e:	bf14      	ite	ne
    2990:	2302      	movne	r3, #2
    2992:	2301      	moveq	r3, #1
    2994:	e7e8      	b.n	2968 <boot_read_swap_state+0x84>
    if (flag != BOOT_FLAG_SET) {
    2996:	78e3      	ldrb	r3, [r4, #3]
    return BOOT_FLAG_SET;
    2998:	2b01      	cmp	r3, #1
    299a:	bf14      	ite	ne
    299c:	2302      	movne	r3, #2
    299e:	2301      	moveq	r3, #1
    29a0:	e7ef      	b.n	2982 <boot_read_swap_state+0x9e>
    29a2:	bf00      	nop
    29a4:	00003d70 	.word	0x00003d70

000029a8 <boot_read_swap_state_by_id>:
{
    29a8:	b513      	push	{r0, r1, r4, lr}
    29aa:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    29ac:	b2c0      	uxtb	r0, r0
    29ae:	a901      	add	r1, sp, #4
    29b0:	f7fe ff80 	bl	18b4 <flash_area_open>
    if (rc != 0) {
    29b4:	b928      	cbnz	r0, 29c2 <boot_read_swap_state_by_id+0x1a>
    rc = boot_read_swap_state(fap, state);
    29b6:	4621      	mov	r1, r4
    29b8:	9801      	ldr	r0, [sp, #4]
    29ba:	f7ff ff93 	bl	28e4 <boot_read_swap_state>
}
    29be:	b002      	add	sp, #8
    29c0:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    29c2:	2001      	movs	r0, #1
    29c4:	e7fb      	b.n	29be <boot_read_swap_state_by_id+0x16>
	...

000029c8 <boot_read_swap_size>:
{
    29c8:	b570      	push	{r4, r5, r6, lr}
    29ca:	b086      	sub	sp, #24
    uint8_t areas[2] = {
    29cc:	f240 1303 	movw	r3, #259	; 0x103
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    29d0:	4e13      	ldr	r6, [pc, #76]	; (2a20 <boot_read_swap_size+0x58>)
    uint8_t areas[2] = {
    29d2:	f8ad 3000 	strh.w	r3, [sp]
{
    29d6:	460d      	mov	r5, r1
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    29d8:	2400      	movs	r4, #0
        rc = flash_area_open(areas[i], fap);
    29da:	a901      	add	r1, sp, #4
    29dc:	f81d 0004 	ldrb.w	r0, [sp, r4]
    29e0:	f7fe ff68 	bl	18b4 <flash_area_open>
        if (rc != 0) {
    29e4:	b980      	cbnz	r0, 2a08 <boot_read_swap_size+0x40>
        off = boot_magic_off(*fap);
    29e6:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    29e8:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    29ea:	2310      	movs	r3, #16
    29ec:	aa02      	add	r2, sp, #8
    29ee:	3910      	subs	r1, #16
    29f0:	f7fe ffba 	bl	1968 <flash_area_read>
        if (rc != 0) {
    29f4:	b940      	cbnz	r0, 2a08 <boot_read_swap_size+0x40>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    29f6:	2210      	movs	r2, #16
    29f8:	4631      	mov	r1, r6
    29fa:	a802      	add	r0, sp, #8
    29fc:	f7fe fe5d 	bl	16ba <memcmp>
    2a00:	b130      	cbz	r0, 2a10 <boot_read_swap_size+0x48>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2a02:	b11c      	cbz	r4, 2a0c <boot_read_swap_size+0x44>
    return -1;
    2a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2a08:	b006      	add	sp, #24
    2a0a:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2a0c:	2401      	movs	r4, #1
    2a0e:	e7e4      	b.n	29da <boot_read_swap_size+0x12>
        off = boot_swap_size_off(fap);
    2a10:	9801      	ldr	r0, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2a12:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    2a14:	2304      	movs	r3, #4
    2a16:	462a      	mov	r2, r5
    2a18:	3930      	subs	r1, #48	; 0x30
    2a1a:	f7fe ffa5 	bl	1968 <flash_area_read>
    2a1e:	e7f3      	b.n	2a08 <boot_read_swap_size+0x40>
    2a20:	00003d70 	.word	0x00003d70

00002a24 <boot_write_magic>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    2a24:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2a26:	4a05      	ldr	r2, [pc, #20]	; (2a3c <boot_write_magic+0x18>)
{
    2a28:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2a2a:	3910      	subs	r1, #16
    2a2c:	2310      	movs	r3, #16
    2a2e:	f7fe ffad 	bl	198c <flash_area_write>
}
    2a32:	3000      	adds	r0, #0
    2a34:	bf18      	it	ne
    2a36:	2001      	movne	r0, #1
    2a38:	bd08      	pop	{r3, pc}
    2a3a:	bf00      	nop
    2a3c:	00003d70 	.word	0x00003d70

00002a40 <boot_write_copy_done>:
    return boot_write_trailer(fap, off, buf, 1);
}

int
boot_write_copy_done(const struct flash_area *fap)
{
    2a40:	b507      	push	{r0, r1, r2, lr}
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    2a42:	6881      	ldr	r1, [r0, #8]
    const uint8_t buf[1] = { flag_val };
    2a44:	aa02      	add	r2, sp, #8
    2a46:	2301      	movs	r3, #1
    2a48:	f802 3d04 	strb.w	r3, [r2, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2a4c:	3920      	subs	r1, #32
    2a4e:	f7ff fee5 	bl	281c <boot_write_trailer>
    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    2a52:	b003      	add	sp, #12
    2a54:	f85d fb04 	ldr.w	pc, [sp], #4

00002a58 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    2a58:	b507      	push	{r0, r1, r2, lr}
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    2a5a:	6881      	ldr	r1, [r0, #8]
    const uint8_t buf[1] = { flag_val };
    2a5c:	aa02      	add	r2, sp, #8
    2a5e:	2301      	movs	r3, #1
    2a60:	f802 3d04 	strb.w	r3, [r2, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2a64:	3918      	subs	r1, #24
    2a66:	f7ff fed9 	bl	281c <boot_write_trailer>
    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    2a6a:	b003      	add	sp, #12
    2a6c:	f85d fb04 	ldr.w	pc, [sp], #4

00002a70 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2a70:	2a0e      	cmp	r2, #14
{
    2a72:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2a74:	d905      	bls.n	2a82 <boot_write_swap_info+0x12>
    2a76:	2300      	movs	r3, #0
    2a78:	461a      	mov	r2, r3
    2a7a:	4619      	mov	r1, r3
    2a7c:	4618      	mov	r0, r3
    2a7e:	f7fe fc0f 	bl	12a0 <__assert_func>
    2a82:	290e      	cmp	r1, #14
    2a84:	d8f7      	bhi.n	2a76 <boot_write_swap_info+0x6>
    2a86:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    2a8a:	aa02      	add	r2, sp, #8
    off = boot_swap_info_off(fap);
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2a8c:	2301      	movs	r3, #1
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2a8e:	f802 1d01 	strb.w	r1, [r2, #-1]!
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    2a92:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2a94:	3928      	subs	r1, #40	; 0x28
    2a96:	f7ff fec1 	bl	281c <boot_write_trailer>
}
    2a9a:	b003      	add	sp, #12
    2a9c:	f85d fb04 	ldr.w	pc, [sp], #4

00002aa0 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2aa0:	b507      	push	{r0, r1, r2, lr}
    2aa2:	aa02      	add	r2, sp, #8

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2aa4:	2304      	movs	r3, #4
{
    2aa6:	f842 1d04 	str.w	r1, [r2, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2aaa:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2aac:	3930      	subs	r1, #48	; 0x30
    2aae:	f7ff feb5 	bl	281c <boot_write_trailer>
}
    2ab2:	b003      	add	sp, #12
    2ab4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ab8 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    2ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2abc:	2001      	movs	r0, #1
    2abe:	4669      	mov	r1, sp
    2ac0:	f7ff ff72 	bl	29a8 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    2ac4:	bb60      	cbnz	r0, 2b20 <boot_swap_type_multi+0x68>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2ac6:	a902      	add	r1, sp, #8
    2ac8:	2002      	movs	r0, #2
    2aca:	f7ff ff6d 	bl	29a8 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    2ace:	bb38      	cbnz	r0, 2b20 <boot_swap_type_multi+0x68>
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
    2ad0:	f89d 6000 	ldrb.w	r6, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    2ad4:	f89d 7008 	ldrb.w	r7, [sp, #8]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2ad8:	f89d 8003 	ldrb.w	r8, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2adc:	f89d 900b 	ldrb.w	r9, [sp, #11]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    2ae0:	f89d a002 	ldrb.w	sl, [sp, #2]
    2ae4:	4d14      	ldr	r5, [pc, #80]	; (2b38 <boot_swap_type_multi+0x80>)
    2ae6:	4602      	mov	r2, r0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2ae8:	4631      	mov	r1, r6
    2aea:	5ca8      	ldrb	r0, [r5, r2]
    2aec:	18ac      	adds	r4, r5, r2
    2aee:	f7ff fec3 	bl	2878 <boot_magic_compatible_check>
    2af2:	b1c8      	cbz	r0, 2b28 <boot_swap_type_multi+0x70>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2af4:	4639      	mov	r1, r7
    2af6:	7860      	ldrb	r0, [r4, #1]
    2af8:	f7ff febe 	bl	2878 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    2afc:	b1a0      	cbz	r0, 2b28 <boot_swap_type_multi+0x70>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2afe:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    2b00:	2b04      	cmp	r3, #4
    2b02:	d001      	beq.n	2b08 <boot_swap_type_multi+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2b04:	4543      	cmp	r3, r8
    2b06:	d10f      	bne.n	2b28 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2b08:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2b0a:	2b04      	cmp	r3, #4
    2b0c:	d001      	beq.n	2b12 <boot_swap_type_multi+0x5a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2b0e:	454b      	cmp	r3, r9
    2b10:	d10a      	bne.n	2b28 <boot_swap_type_multi+0x70>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2b12:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2b14:	2b04      	cmp	r3, #4
    2b16:	d105      	bne.n	2b24 <boot_swap_type_multi+0x6c>
            BOOT_LOG_INF("Swap type: %s",
    2b18:	7960      	ldrb	r0, [r4, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2b1a:	1e83      	subs	r3, r0, #2
    2b1c:	2b02      	cmp	r3, #2
    2b1e:	d907      	bls.n	2b30 <boot_swap_type_multi+0x78>
        return BOOT_SWAP_TYPE_PANIC;
    2b20:	20ff      	movs	r0, #255	; 0xff
    2b22:	e005      	b.n	2b30 <boot_swap_type_multi+0x78>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2b24:	4553      	cmp	r3, sl
    2b26:	d0f7      	beq.n	2b18 <boot_swap_type_multi+0x60>
    2b28:	3206      	adds	r2, #6
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2b2a:	2a12      	cmp	r2, #18
    2b2c:	d1dc      	bne.n	2ae8 <boot_swap_type_multi+0x30>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    2b2e:	2001      	movs	r0, #1
}
    2b30:	b004      	add	sp, #16
    2b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b36:	bf00      	nop
    2b38:	00003d80 	.word	0x00003d80

00002b3c <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    2b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b40:	b0af      	sub	sp, #188	; 0xbc
    2b42:	e9dd 473a 	ldrd	r4, r7, [sp, #232]	; 0xe8
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    2b46:	ad13      	add	r5, sp, #76	; 0x4c
    2b48:	4628      	mov	r0, r5
    2b4a:	4692      	mov	sl, r2
    2b4c:	469b      	mov	fp, r3
    2b4e:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
    2b50:	f000 f916 	bl	2d80 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    2b54:	2100      	movs	r1, #0
    2b56:	4628      	mov	r0, r5
    2b58:	f000 f916 	bl	2d88 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    2b5c:	b134      	cbz	r4, 2b6c <bootutil_img_validate+0x30>
    2b5e:	2f00      	cmp	r7, #0
    2b60:	dd04      	ble.n	2b6c <bootutil_img_validate+0x30>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    2b62:	463a      	mov	r2, r7
    2b64:	4621      	mov	r1, r4
    2b66:	4628      	mov	r0, r5
    2b68:	f000 f9f8 	bl	2f5c <mbedtls_sha256_update_ret>
    size += hdr->ih_protect_tlv_size;
    2b6c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    size = hdr_size = hdr->ih_hdr_size;
    2b70:	f8ba 7008 	ldrh.w	r7, [sl, #8]
    2b74:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
    2b76:	f8da 300c 	ldr.w	r3, [sl, #12]
    for (off = 0; off < size; off += blk_sz) {
    2b7a:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
    2b7e:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
    2b80:	4547      	cmp	r7, r8
    2b82:	d828      	bhi.n	2bd6 <bootutil_img_validate+0x9a>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    2b84:	a90b      	add	r1, sp, #44	; 0x2c
    2b86:	4628      	mov	r0, r5
    2b88:	f000 fa25 	bl	2fd6 <mbedtls_sha256_finish_ret>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        return rc;
    }

    if (out_hash) {
    2b8c:	b14e      	cbz	r6, 2ba2 <bootutil_img_validate+0x66>
        memcpy(out_hash, hash, 32);
    2b8e:	aa0b      	add	r2, sp, #44	; 0x2c
    2b90:	4613      	mov	r3, r2
    2b92:	cb03      	ldmia	r3!, {r0, r1}
    2b94:	42ab      	cmp	r3, r5
    2b96:	6030      	str	r0, [r6, #0]
    2b98:	6071      	str	r1, [r6, #4]
    2b9a:	461a      	mov	r2, r3
    2b9c:	f106 0608 	add.w	r6, r6, #8
    2ba0:	d1f6      	bne.n	2b90 <bootutil_img_validate+0x54>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    2ba2:	2300      	movs	r3, #0
    2ba4:	9300      	str	r3, [sp, #0]
    2ba6:	465a      	mov	r2, fp
    2ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bac:	4651      	mov	r1, sl
    2bae:	a805      	add	r0, sp, #20
    2bb0:	f000 f846 	bl	2c40 <bootutil_tlv_iter_begin>
    if (rc) {
    2bb4:	4604      	mov	r4, r0
    2bb6:	b950      	cbnz	r0, 2bce <bootutil_img_validate+0x92>
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    2bb8:	f10d 030e 	add.w	r3, sp, #14
    2bbc:	aa03      	add	r2, sp, #12
    2bbe:	a904      	add	r1, sp, #16
    2bc0:	a805      	add	r0, sp, #20
    2bc2:	f000 f889 	bl	2cd8 <bootutil_tlv_iter_next>
        if (rc < 0) {
    2bc6:	2800      	cmp	r0, #0
    2bc8:	da1b      	bge.n	2c02 <bootutil_img_validate+0xc6>
            return -1;
    2bca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    2bce:	4620      	mov	r0, r4
    2bd0:	b02f      	add	sp, #188	; 0xbc
    2bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    2bd8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
        blk_sz = size - off;
    2bda:	eba7 0908 	sub.w	r9, r7, r8
    2bde:	4599      	cmp	r9, r3
    2be0:	bf28      	it	cs
    2be2:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    2be4:	464b      	mov	r3, r9
    2be6:	4641      	mov	r1, r8
    2be8:	4658      	mov	r0, fp
    2bea:	f7fe febd 	bl	1968 <flash_area_read>
        if (rc) {
    2bee:	4604      	mov	r4, r0
    2bf0:	2800      	cmp	r0, #0
    2bf2:	d1ec      	bne.n	2bce <bootutil_img_validate+0x92>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    2bf4:	464a      	mov	r2, r9
    2bf6:	9938      	ldr	r1, [sp, #224]	; 0xe0
    2bf8:	4628      	mov	r0, r5
    2bfa:	f000 f9af 	bl	2f5c <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    2bfe:	44c8      	add	r8, r9
    2c00:	e7be      	b.n	2b80 <bootutil_img_validate+0x44>
        } else if (rc > 0) {
    2c02:	d119      	bne.n	2c38 <bootutil_img_validate+0xfc>
        if (type == IMAGE_TLV_SHA256) {
    2c04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2c08:	2b10      	cmp	r3, #16
    2c0a:	d1d5      	bne.n	2bb8 <bootutil_img_validate+0x7c>
            if (len != sizeof(hash)) {
    2c0c:	f8bd 600c 	ldrh.w	r6, [sp, #12]
    2c10:	2e20      	cmp	r6, #32
    2c12:	d1da      	bne.n	2bca <bootutil_img_validate+0x8e>
            rc = flash_area_read(fap, off, buf, sizeof hash);
    2c14:	4633      	mov	r3, r6
    2c16:	462a      	mov	r2, r5
    2c18:	9904      	ldr	r1, [sp, #16]
    2c1a:	4658      	mov	r0, fp
    2c1c:	f7fe fea4 	bl	1968 <flash_area_read>
            if (rc) {
    2c20:	4604      	mov	r4, r0
    2c22:	2800      	cmp	r0, #0
    2c24:	d1d3      	bne.n	2bce <bootutil_img_validate+0x92>
            if (memcmp(hash, buf, sizeof(hash))) {
    2c26:	4632      	mov	r2, r6
    2c28:	4629      	mov	r1, r5
    2c2a:	a80b      	add	r0, sp, #44	; 0x2c
    2c2c:	f7fe fd45 	bl	16ba <memcmp>
            sha256_valid = 1;
    2c30:	2401      	movs	r4, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    2c32:	2800      	cmp	r0, #0
    2c34:	d0c0      	beq.n	2bb8 <bootutil_img_validate+0x7c>
    2c36:	e7c8      	b.n	2bca <bootutil_img_validate+0x8e>
    if (!sha256_valid) {
    2c38:	f084 0401 	eor.w	r4, r4, #1
    2c3c:	4264      	negs	r4, r4
    2c3e:	e7c6      	b.n	2bce <bootutil_img_validate+0x92>

00002c40 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    2c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2c44:	460e      	mov	r6, r1
    2c46:	4617      	mov	r7, r2
    2c48:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    2c4a:	4604      	mov	r4, r0
    2c4c:	b928      	cbnz	r0, 2c5a <bootutil_tlv_iter_begin+0x1a>
        return -1;
    2c4e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    2c52:	4640      	mov	r0, r8
    2c54:	b003      	add	sp, #12
    2c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    2c5a:	2900      	cmp	r1, #0
    2c5c:	d0f7      	beq.n	2c4e <bootutil_tlv_iter_begin+0xe>
    2c5e:	2a00      	cmp	r2, #0
    2c60:	d0f5      	beq.n	2c4e <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    2c62:	68cb      	ldr	r3, [r1, #12]
    2c64:	890d      	ldrh	r5, [r1, #8]
    2c66:	441d      	add	r5, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    2c68:	2304      	movs	r3, #4
    2c6a:	eb0d 0203 	add.w	r2, sp, r3
    2c6e:	4629      	mov	r1, r5
    2c70:	4638      	mov	r0, r7
    2c72:	f7fe fe79 	bl	1968 <flash_area_read>
    2c76:	4680      	mov	r8, r0
    2c78:	2800      	cmp	r0, #0
    2c7a:	d1e8      	bne.n	2c4e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    2c7c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2c80:	8973      	ldrh	r3, [r6, #10]
    2c82:	f646 1208 	movw	r2, #26888	; 0x6908
    2c86:	4291      	cmp	r1, r2
    2c88:	d123      	bne.n	2cd2 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    2c8a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2c8e:	4299      	cmp	r1, r3
    2c90:	d1dd      	bne.n	2c4e <bootutil_tlv_iter_begin+0xe>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    2c92:	2304      	movs	r3, #4
    2c94:	eb0d 0203 	add.w	r2, sp, r3
    2c98:	4429      	add	r1, r5
    2c9a:	4638      	mov	r0, r7
    2c9c:	f7fe fe64 	bl	1968 <flash_area_read>
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d1d4      	bne.n	2c4e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    2ca4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2ca8:	f646 1307 	movw	r3, #26887	; 0x6907
    2cac:	429a      	cmp	r2, r3
    2cae:	d1ce      	bne.n	2c4e <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    2cb0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2cb4:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    2cb6:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2cb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    2cbc:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    2cc0:	442b      	add	r3, r5
    2cc2:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    2cc4:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2cc6:	4413      	add	r3, r2
    it->fap = fap;
    2cc8:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2ccc:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    2cce:	6125      	str	r5, [r4, #16]
    return 0;
    2cd0:	e7bf      	b.n	2c52 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d0e6      	beq.n	2ca4 <bootutil_tlv_iter_begin+0x64>
    2cd6:	e7ba      	b.n	2c4e <bootutil_tlv_iter_begin+0xe>

00002cd8 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    2cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2cdc:	460e      	mov	r6, r1
    2cde:	4617      	mov	r7, r2
    2ce0:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    2ce2:	4604      	mov	r4, r0
    2ce4:	b920      	cbnz	r0, 2cf0 <bootutil_tlv_iter_next+0x18>
        return -1;
    2ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    2cea:	b002      	add	sp, #8
    2cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    2cf0:	6803      	ldr	r3, [r0, #0]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d0f7      	beq.n	2ce6 <bootutil_tlv_iter_next+0xe>
    2cf6:	6843      	ldr	r3, [r0, #4]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d0f4      	beq.n	2ce6 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    2cfc:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    2d00:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2d04:	429a      	cmp	r2, r3
    2d06:	d216      	bcs.n	2d36 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    2d08:	6823      	ldr	r3, [r4, #0]
    2d0a:	895b      	ldrh	r3, [r3, #10]
    2d0c:	b123      	cbz	r3, 2d18 <bootutil_tlv_iter_next+0x40>
    2d0e:	68e3      	ldr	r3, [r4, #12]
    2d10:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    2d12:	bf04      	itt	eq
    2d14:	3304      	addeq	r3, #4
    2d16:	6123      	streq	r3, [r4, #16]
        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    2d18:	2304      	movs	r3, #4
    2d1a:	eb0d 0203 	add.w	r2, sp, r3
    2d1e:	6921      	ldr	r1, [r4, #16]
    2d20:	6860      	ldr	r0, [r4, #4]
    2d22:	f7fe fe21 	bl	1968 <flash_area_read>
        if (rc) {
    2d26:	2800      	cmp	r0, #0
    2d28:	d1dd      	bne.n	2ce6 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    2d2a:	7aa2      	ldrb	r2, [r4, #10]
    2d2c:	6923      	ldr	r3, [r4, #16]
    2d2e:	b122      	cbz	r2, 2d3a <bootutil_tlv_iter_next+0x62>
    2d30:	68e2      	ldr	r2, [r4, #12]
    2d32:	429a      	cmp	r2, r3
    2d34:	d801      	bhi.n	2d3a <bootutil_tlv_iter_next+0x62>
            return 1;
    2d36:	2001      	movs	r0, #1
    2d38:	e7d7      	b.n	2cea <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    2d3a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    2d3e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2d42:	45c4      	cmp	ip, r8
    2d44:	f102 0104 	add.w	r1, r2, #4
    2d48:	d003      	beq.n	2d52 <bootutil_tlv_iter_next+0x7a>
    2d4a:	f8bd e004 	ldrh.w	lr, [sp, #4]
    2d4e:	45e6      	cmp	lr, ip
    2d50:	d10b      	bne.n	2d6a <bootutil_tlv_iter_next+0x92>
            if (type != NULL) {
    2d52:	b11d      	cbz	r5, 2d5c <bootutil_tlv_iter_next+0x84>
                *type = tlv.it_type;
    2d54:	f8bd c004 	ldrh.w	ip, [sp, #4]
    2d58:	f8a5 c000 	strh.w	ip, [r5]
            *off = it->tlv_off + sizeof(tlv);
    2d5c:	3304      	adds	r3, #4
    2d5e:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    2d60:	803a      	strh	r2, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    2d62:	6922      	ldr	r2, [r4, #16]
    2d64:	440a      	add	r2, r1
    2d66:	6122      	str	r2, [r4, #16]
            return 0;
    2d68:	e7bf      	b.n	2cea <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    2d6a:	440b      	add	r3, r1
    2d6c:	6123      	str	r3, [r4, #16]
    2d6e:	e7c7      	b.n	2d00 <bootutil_tlv_iter_next+0x28>

00002d70 <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    2d70:	b121      	cbz	r1, 2d7c <flash_area_id_from_multi_image_slot+0xc>
    2d72:	2901      	cmp	r1, #1
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    2d74:	bf0c      	ite	eq
    2d76:	2002      	moveq	r0, #2
    2d78:	20ff      	movne	r0, #255	; 0xff
    2d7a:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    2d7c:	2001      	movs	r0, #1
}
    2d7e:	4770      	bx	lr

00002d80 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    2d80:	226c      	movs	r2, #108	; 0x6c
    2d82:	2100      	movs	r1, #0
    2d84:	f7fe bcca 	b.w	171c <memset>

00002d88 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
    2d88:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    2d8a:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    2d8e:	b9c1      	cbnz	r1, 2dc2 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    2d90:	4a19      	ldr	r2, [pc, #100]	; (2df8 <mbedtls_sha256_starts_ret+0x70>)
    2d92:	4b1a      	ldr	r3, [pc, #104]	; (2dfc <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    2d94:	f8df c08c 	ldr.w	ip, [pc, #140]	; 2e24 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
    2d98:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    2d9c:	4b18      	ldr	r3, [pc, #96]	; (2e00 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    2d9e:	4a19      	ldr	r2, [pc, #100]	; (2e04 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
    2da0:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    2da4:	4b18      	ldr	r3, [pc, #96]	; (2e08 <mbedtls_sha256_starts_ret+0x80>)
    2da6:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    2daa:	4b18      	ldr	r3, [pc, #96]	; (2e0c <mbedtls_sha256_starts_ret+0x84>)
    2dac:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    2dae:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    2db2:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    2db6:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    2dba:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    2dbc:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    2dbe:	2000      	movs	r0, #0
    2dc0:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    2dc2:	4b13      	ldr	r3, [pc, #76]	; (2e10 <mbedtls_sha256_starts_ret+0x88>)
    2dc4:	4a13      	ldr	r2, [pc, #76]	; (2e14 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
    2dc6:	f8df c060 	ldr.w	ip, [pc, #96]	; 2e28 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
    2dca:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    2dce:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    2dd2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    2dd6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    2dda:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    2ddc:	4b0e      	ldr	r3, [pc, #56]	; (2e18 <mbedtls_sha256_starts_ret+0x90>)
    2dde:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    2de2:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    2de6:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    2dea:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    2dee:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    2df0:	4b0a      	ldr	r3, [pc, #40]	; (2e1c <mbedtls_sha256_starts_ret+0x94>)
    2df2:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    2df4:	4b0a      	ldr	r3, [pc, #40]	; (2e20 <mbedtls_sha256_starts_ret+0x98>)
    2df6:	e7e0      	b.n	2dba <mbedtls_sha256_starts_ret+0x32>
    2df8:	6a09e667 	.word	0x6a09e667
    2dfc:	bb67ae85 	.word	0xbb67ae85
    2e00:	a54ff53a 	.word	0xa54ff53a
    2e04:	510e527f 	.word	0x510e527f
    2e08:	9b05688c 	.word	0x9b05688c
    2e0c:	1f83d9ab 	.word	0x1f83d9ab
    2e10:	367cd507 	.word	0x367cd507
    2e14:	c1059ed8 	.word	0xc1059ed8
    2e18:	ffc00b31 	.word	0xffc00b31
    2e1c:	64f98fa7 	.word	0x64f98fa7
    2e20:	befa4fa4 	.word	0xbefa4fa4
    2e24:	3c6ef372 	.word	0x3c6ef372
    2e28:	f70e5939 	.word	0xf70e5939

00002e2c <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    2e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e30:	b0cb      	sub	sp, #300	; 0x12c
    2e32:	f100 0308 	add.w	r3, r0, #8
    2e36:	9300      	str	r3, [sp, #0]
    2e38:	461a      	mov	r2, r3
    2e3a:	9101      	str	r1, [sp, #4]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
    2e3c:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
    2e3e:	a802      	add	r0, sp, #8
    2e40:	f852 1b04 	ldr.w	r1, [r2], #4
    2e44:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    2e48:	3301      	adds	r3, #1
    2e4a:	2b08      	cmp	r3, #8
    2e4c:	d1f7      	bne.n	2e3e <mbedtls_internal_sha256_process+0x12>
    2e4e:	e9dd 8707 	ldrd	r8, r7, [sp, #28]
    2e52:	e9dd 3602 	ldrd	r3, r6, [sp, #8]
    2e56:	e9dd eb04 	ldrd	lr, fp, [sp, #16]
    2e5a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    2e5e:	9906      	ldr	r1, [sp, #24]
    2e60:	aa09      	add	r2, sp, #36	; 0x24

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    2e62:	2400      	movs	r4, #0
    {
        if( i < 16 )
    2e64:	2c0f      	cmp	r4, #15
    2e66:	d85e      	bhi.n	2f26 <mbedtls_internal_sha256_process+0xfa>
    2e68:	9d01      	ldr	r5, [sp, #4]
    2e6a:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
            GET_UINT32_BE( W[i], data, 4 * i );
    2e6e:	f815 a024 	ldrb.w	sl, [r5, r4, lsl #2]
    2e72:	f89c 5003 	ldrb.w	r5, [ip, #3]
    2e76:	ea45 650a 	orr.w	r5, r5, sl, lsl #24
    2e7a:	f89c a001 	ldrb.w	sl, [ip, #1]
    2e7e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
    2e82:	f89c a002 	ldrb.w	sl, [ip, #2]
    2e86:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
        else
            R( i );
    2e8a:	6055      	str	r5, [r2, #4]

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    2e8c:	ea4f 2cf1 	mov.w	ip, r1, ror #11
    2e90:	ea88 0507 	eor.w	r5, r8, r7
    2e94:	ea8c 1cb1 	eor.w	ip, ip, r1, ror #6
    2e98:	400d      	ands	r5, r1
    2e9a:	ea8c 6a71 	eor.w	sl, ip, r1, ror #25
    2e9e:	407d      	eors	r5, r7
    2ea0:	eb0a 0c05 	add.w	ip, sl, r5
    2ea4:	4d2c      	ldr	r5, [pc, #176]	; (2f58 <mbedtls_internal_sha256_process+0x12c>)
    2ea6:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    2eaa:	4465      	add	r5, ip
    2eac:	f852 cf04 	ldr.w	ip, [r2, #4]!
    2eb0:	4465      	add	r5, ip
    2eb2:	44a9      	add	r9, r5
    2eb4:	ea46 0a03 	orr.w	sl, r6, r3
    2eb8:	ea4f 3573 	mov.w	r5, r3, ror #13
    2ebc:	eb09 0c0b 	add.w	ip, r9, fp
    2ec0:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
    2ec4:	ea06 0b03 	and.w	fp, r6, r3
    2ec8:	ea0a 0a0e 	and.w	sl, sl, lr
    2ecc:	ea4a 0a0b 	orr.w	sl, sl, fp
    2ed0:	ea85 55b3 	eor.w	r5, r5, r3, ror #22
    for( i = 0; i < 64; i++ )
    2ed4:	3401      	adds	r4, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    2ed6:	4455      	add	r5, sl
    for( i = 0; i < 64; i++ )
    2ed8:	2c40      	cmp	r4, #64	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    2eda:	444d      	add	r5, r9
    2edc:	46f3      	mov	fp, lr
    2ede:	46b9      	mov	r9, r7
    for( i = 0; i < 64; i++ )
    2ee0:	d11a      	bne.n	2f18 <mbedtls_internal_sha256_process+0xec>
    2ee2:	e9cd 1807 	strd	r1, r8, [sp, #28]
    2ee6:	e9cd 6e04 	strd	r6, lr, [sp, #16]
    2eea:	e9cd 5302 	strd	r5, r3, [sp, #8]
    2eee:	9709      	str	r7, [sp, #36]	; 0x24
    2ef0:	f8cd c018 	str.w	ip, [sp, #24]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    2ef4:	2300      	movs	r3, #0
        ctx->state[i] += A[i];
    2ef6:	9a00      	ldr	r2, [sp, #0]
    2ef8:	6811      	ldr	r1, [r2, #0]
    2efa:	aa02      	add	r2, sp, #8
    2efc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2f00:	440a      	add	r2, r1
    2f02:	9900      	ldr	r1, [sp, #0]
    for( i = 0; i < 8; i++ )
    2f04:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
    2f06:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
    2f0a:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
    2f0c:	9100      	str	r1, [sp, #0]
    for( i = 0; i < 8; i++ )
    2f0e:	d1f2      	bne.n	2ef6 <mbedtls_internal_sha256_process+0xca>

    return( 0 );
}
    2f10:	2000      	movs	r0, #0
    2f12:	b04b      	add	sp, #300	; 0x12c
    2f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f18:	46b6      	mov	lr, r6
    2f1a:	4647      	mov	r7, r8
    2f1c:	461e      	mov	r6, r3
    2f1e:	4688      	mov	r8, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    2f20:	462b      	mov	r3, r5
    2f22:	4661      	mov	r1, ip
    2f24:	e79e      	b.n	2e64 <mbedtls_internal_sha256_process+0x38>
            R( i );
    2f26:	f852 5c04 	ldr.w	r5, [r2, #-4]
    2f2a:	f852 ac38 	ldr.w	sl, [r2, #-56]
    2f2e:	f852 0c18 	ldr.w	r0, [r2, #-24]
    2f32:	ea4f 4cf5 	mov.w	ip, r5, ror #19
    2f36:	ea8c 4c75 	eor.w	ip, ip, r5, ror #17
    2f3a:	ea8c 2c95 	eor.w	ip, ip, r5, lsr #10
    2f3e:	f852 5c3c 	ldr.w	r5, [r2, #-60]
    2f42:	4428      	add	r0, r5
    2f44:	ea4f 45ba 	mov.w	r5, sl, ror #18
    2f48:	ea85 15fa 	eor.w	r5, r5, sl, ror #7
    2f4c:	4484      	add	ip, r0
    2f4e:	ea85 0ada 	eor.w	sl, r5, sl, lsr #3
    2f52:	eb0c 050a 	add.w	r5, ip, sl
    2f56:	e798      	b.n	2e8a <mbedtls_internal_sha256_process+0x5e>
    2f58:	00003d94 	.word	0x00003d94

00002f5c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    2f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f60:	4605      	mov	r5, r0
    2f62:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    2f64:	4614      	mov	r4, r2
    2f66:	b912      	cbnz	r2, 2f6e <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    2f68:	2000      	movs	r0, #0
}
    2f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    2f6e:	6803      	ldr	r3, [r0, #0]
    2f70:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    2f74:	18d3      	adds	r3, r2, r3
    ctx->total[0] += (uint32_t) ilen;
    2f76:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    2f78:	bf22      	ittt	cs
    2f7a:	6843      	ldrcs	r3, [r0, #4]
    2f7c:	3301      	addcs	r3, #1
    2f7e:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    2f80:	b1a7      	cbz	r7, 2fac <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    2f82:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
    2f86:	4542      	cmp	r2, r8
    2f88:	d310      	bcc.n	2fac <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    2f8a:	f100 0928 	add.w	r9, r0, #40	; 0x28
    2f8e:	4642      	mov	r2, r8
    2f90:	eb09 0007 	add.w	r0, r9, r7
    2f94:	f7fe fbb5 	bl	1702 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2f98:	4649      	mov	r1, r9
    2f9a:	4628      	mov	r0, r5
    2f9c:	f7ff ff46 	bl	2e2c <mbedtls_internal_sha256_process>
    2fa0:	2800      	cmp	r0, #0
    2fa2:	d1e2      	bne.n	2f6a <mbedtls_sha256_update_ret+0xe>
        input += fill;
    2fa4:	4446      	add	r6, r8
        ilen  -= fill;
    2fa6:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    2faa:	4607      	mov	r7, r0
    2fac:	4426      	add	r6, r4
    2fae:	e005      	b.n	2fbc <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    2fb0:	4628      	mov	r0, r5
    2fb2:	f7ff ff3b 	bl	2e2c <mbedtls_internal_sha256_process>
    2fb6:	2800      	cmp	r0, #0
    2fb8:	d1d7      	bne.n	2f6a <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    2fba:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    2fbc:	2c3f      	cmp	r4, #63	; 0x3f
    2fbe:	eba6 0104 	sub.w	r1, r6, r4
    2fc2:	d8f5      	bhi.n	2fb0 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    2fc4:	2c00      	cmp	r4, #0
    2fc6:	d0cf      	beq.n	2f68 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    2fc8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    2fcc:	4622      	mov	r2, r4
    2fce:	4438      	add	r0, r7
    2fd0:	f7fe fb97 	bl	1702 <memcpy>
    2fd4:	e7c8      	b.n	2f68 <mbedtls_sha256_update_ret+0xc>

00002fd6 <mbedtls_sha256_finish_ret>:
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    2fd6:	6803      	ldr	r3, [r0, #0]
    2fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    2fdc:	1c5a      	adds	r2, r3, #1
    2fde:	4403      	add	r3, r0
{
    2fe0:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    2fe2:	2a38      	cmp	r2, #56	; 0x38
{
    2fe4:	460d      	mov	r5, r1
    2fe6:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    2fea:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    2fee:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    2ff0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    2ff4:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    2ff8:	d873      	bhi.n	30e2 <mbedtls_sha256_finish_ret+0x10c>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    2ffa:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    2ffe:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    3000:	f7fe fb8c 	bl	171c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    3004:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    3008:	0f5a      	lsrs	r2, r3, #29
    300a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    300e:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
    3010:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    3012:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    3016:	0c11      	lsrs	r1, r2, #16
    3018:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    301c:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
    3020:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3022:	0e1a      	lsrs	r2, r3, #24
    3024:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
    3028:	0c1a      	lsrs	r2, r3, #16
    302a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    302e:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    3030:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3034:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    3038:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    303c:	4631      	mov	r1, r6
    303e:	4620      	mov	r0, r4
    3040:	f7ff fef4 	bl	2e2c <mbedtls_internal_sha256_process>
    3044:	2800      	cmp	r0, #0
    3046:	d14b      	bne.n	30e0 <mbedtls_sha256_finish_ret+0x10a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    3048:	7ae3      	ldrb	r3, [r4, #11]
    304a:	702b      	strb	r3, [r5, #0]
    304c:	8963      	ldrh	r3, [r4, #10]
    304e:	706b      	strb	r3, [r5, #1]
    3050:	68a3      	ldr	r3, [r4, #8]
    3052:	0a1b      	lsrs	r3, r3, #8
    3054:	70ab      	strb	r3, [r5, #2]
    3056:	68a3      	ldr	r3, [r4, #8]
    3058:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    305a:	7be3      	ldrb	r3, [r4, #15]
    305c:	712b      	strb	r3, [r5, #4]
    305e:	89e3      	ldrh	r3, [r4, #14]
    3060:	716b      	strb	r3, [r5, #5]
    3062:	68e3      	ldr	r3, [r4, #12]
    3064:	0a1b      	lsrs	r3, r3, #8
    3066:	71ab      	strb	r3, [r5, #6]
    3068:	68e3      	ldr	r3, [r4, #12]
    306a:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    306c:	7ce3      	ldrb	r3, [r4, #19]
    306e:	722b      	strb	r3, [r5, #8]
    3070:	8a63      	ldrh	r3, [r4, #18]
    3072:	726b      	strb	r3, [r5, #9]
    3074:	6923      	ldr	r3, [r4, #16]
    3076:	0a1b      	lsrs	r3, r3, #8
    3078:	72ab      	strb	r3, [r5, #10]
    307a:	6923      	ldr	r3, [r4, #16]
    307c:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    307e:	7de3      	ldrb	r3, [r4, #23]
    3080:	732b      	strb	r3, [r5, #12]
    3082:	8ae3      	ldrh	r3, [r4, #22]
    3084:	736b      	strb	r3, [r5, #13]
    3086:	6963      	ldr	r3, [r4, #20]
    3088:	0a1b      	lsrs	r3, r3, #8
    308a:	73ab      	strb	r3, [r5, #14]
    308c:	6963      	ldr	r3, [r4, #20]
    308e:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    3090:	7ee3      	ldrb	r3, [r4, #27]
    3092:	742b      	strb	r3, [r5, #16]
    3094:	8b63      	ldrh	r3, [r4, #26]
    3096:	746b      	strb	r3, [r5, #17]
    3098:	69a3      	ldr	r3, [r4, #24]
    309a:	0a1b      	lsrs	r3, r3, #8
    309c:	74ab      	strb	r3, [r5, #18]
    309e:	69a3      	ldr	r3, [r4, #24]
    30a0:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    30a2:	7fe3      	ldrb	r3, [r4, #31]
    30a4:	752b      	strb	r3, [r5, #20]
    30a6:	8be3      	ldrh	r3, [r4, #30]
    30a8:	756b      	strb	r3, [r5, #21]
    30aa:	69e3      	ldr	r3, [r4, #28]
    30ac:	0a1b      	lsrs	r3, r3, #8
    30ae:	75ab      	strb	r3, [r5, #22]
    30b0:	69e3      	ldr	r3, [r4, #28]
    30b2:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    30b4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    30b8:	762b      	strb	r3, [r5, #24]
    30ba:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    30bc:	766b      	strb	r3, [r5, #25]
    30be:	6a23      	ldr	r3, [r4, #32]
    30c0:	0a1b      	lsrs	r3, r3, #8
    30c2:	76ab      	strb	r3, [r5, #26]
    30c4:	6a23      	ldr	r3, [r4, #32]
    30c6:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    30c8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    30ca:	b94b      	cbnz	r3, 30e0 <mbedtls_sha256_finish_ret+0x10a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    30cc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    30d0:	772b      	strb	r3, [r5, #28]
    30d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    30d4:	776b      	strb	r3, [r5, #29]
    30d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    30d8:	0a1b      	lsrs	r3, r3, #8
    30da:	77ab      	strb	r3, [r5, #30]
    30dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    30de:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    30e0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    30e2:	2100      	movs	r1, #0
    30e4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    30e8:	f7fe fb18 	bl	171c <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    30ec:	4631      	mov	r1, r6
    30ee:	4620      	mov	r0, r4
    30f0:	f7ff fe9c 	bl	2e2c <mbedtls_internal_sha256_process>
    30f4:	2800      	cmp	r0, #0
    30f6:	d1f3      	bne.n	30e0 <mbedtls_sha256_finish_ret+0x10a>
        memset( ctx->buffer, 0, 56 );
    30f8:	4601      	mov	r1, r0
    30fa:	2238      	movs	r2, #56	; 0x38
    30fc:	4630      	mov	r0, r6
    30fe:	e77f      	b.n	3000 <mbedtls_sha256_finish_ret+0x2a>

00003100 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    3100:	6843      	ldr	r3, [r0, #4]
    3102:	428b      	cmp	r3, r1
    3104:	d807      	bhi.n	3116 <hal_flash_check_addr+0x16>
    3106:	6882      	ldr	r2, [r0, #8]
    3108:	4413      	add	r3, r2
    310a:	428b      	cmp	r3, r1
        return SYS_EINVAL;
    }
    return 0;
    310c:	bf34      	ite	cc
    310e:	f06f 0001 	mvncc.w	r0, #1
    3112:	2000      	movcs	r0, #0
    3114:	4770      	bx	lr
        return SYS_EINVAL;
    3116:	f06f 0001 	mvn.w	r0, #1
}
    311a:	4770      	bx	lr

0000311c <hal_flash_init>:
{
    311c:	b538      	push	{r3, r4, r5, lr}
    311e:	2400      	movs	r4, #0
    int rc = 0;
    3120:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
    3122:	b2e0      	uxtb	r0, r4
    3124:	f7fd f9b0 	bl	488 <hal_bsp_flash_dev>
        if (!hf) {
    3128:	b140      	cbz	r0, 313c <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
    312a:	6803      	ldr	r3, [r0, #0]
    312c:	695b      	ldr	r3, [r3, #20]
    312e:	4798      	blx	r3
            rc = SYS_EIO;
    3130:	2800      	cmp	r0, #0
    3132:	bf18      	it	ne
    3134:	f06f 0504 	mvnne.w	r5, #4
    3138:	3401      	adds	r4, #1
        hf = hal_bsp_flash_dev(i);
    313a:	e7f2      	b.n	3122 <hal_flash_init+0x6>
}
    313c:	4628      	mov	r0, r5
    313e:	bd38      	pop	{r3, r4, r5, pc}

00003140 <hal_flash_align>:
{
    3140:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3142:	f7fd f9a1 	bl	488 <hal_bsp_flash_dev>
    if (!hf) {
    3146:	b108      	cbz	r0, 314c <hal_flash_align+0xc>
    return hf->hf_align;
    3148:	7c00      	ldrb	r0, [r0, #16]
}
    314a:	bd08      	pop	{r3, pc}
        return 1;
    314c:	2001      	movs	r0, #1
    314e:	e7fc      	b.n	314a <hal_flash_align+0xa>

00003150 <hal_flash_erased_val>:
{
    3150:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3152:	f7fd f999 	bl	488 <hal_bsp_flash_dev>
    if (!hf) {
    3156:	b108      	cbz	r0, 315c <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    3158:	7d00      	ldrb	r0, [r0, #20]
}
    315a:	bd08      	pop	{r3, pc}
        return 1;
    315c:	2001      	movs	r0, #1
    315e:	e7fc      	b.n	315a <hal_flash_erased_val+0xa>

00003160 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    3160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3164:	460d      	mov	r5, r1
    3166:	4690      	mov	r8, r2
    3168:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    316a:	f7fd f98d 	bl	488 <hal_bsp_flash_dev>
    if (!hf) {
    316e:	4604      	mov	r4, r0
    3170:	b1a8      	cbz	r0, 319e <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3172:	4629      	mov	r1, r5
    3174:	f7ff ffc4 	bl	3100 <hal_flash_check_addr>
    3178:	b988      	cbnz	r0, 319e <hal_flash_read+0x3e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    317a:	19a9      	adds	r1, r5, r6
    317c:	4620      	mov	r0, r4
    317e:	f7ff ffbf 	bl	3100 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3182:	b960      	cbnz	r0, 319e <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    3184:	6823      	ldr	r3, [r4, #0]
    3186:	4642      	mov	r2, r8
    3188:	681f      	ldr	r7, [r3, #0]
    318a:	4629      	mov	r1, r5
    318c:	4633      	mov	r3, r6
    318e:	4620      	mov	r0, r4
    3190:	47b8      	blx	r7
    if (rc != 0) {
    3192:	2800      	cmp	r0, #0
        return SYS_EIO;
    3194:	bf18      	it	ne
    3196:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
    319a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    319e:	f06f 0001 	mvn.w	r0, #1
    31a2:	e7fa      	b.n	319a <hal_flash_read+0x3a>

000031a4 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    31a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31a8:	4604      	mov	r4, r0
    31aa:	460e      	mov	r6, r1
    31ac:	4690      	mov	r8, r2
    31ae:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    31b0:	f7fd f96a 	bl	488 <hal_bsp_flash_dev>
    if (!hf) {
    31b4:	4605      	mov	r5, r0
    31b6:	b1f0      	cbz	r0, 31f6 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    31b8:	4631      	mov	r1, r6
    31ba:	f7ff ffa1 	bl	3100 <hal_flash_check_addr>
    31be:	b9d0      	cbnz	r0, 31f6 <hal_flash_write+0x52>
      hal_flash_check_addr(hf, address + num_bytes)) {
    31c0:	19f1      	adds	r1, r6, r7
    31c2:	4628      	mov	r0, r5
    31c4:	f7ff ff9c 	bl	3100 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    31c8:	b9a8      	cbnz	r0, 31f6 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    31ca:	08e3      	lsrs	r3, r4, #3
    31cc:	4a0d      	ldr	r2, [pc, #52]	; (3204 <hal_flash_write+0x60>)
    31ce:	5cd3      	ldrb	r3, [r2, r3]
    31d0:	f004 0407 	and.w	r4, r4, #7
    31d4:	fa43 f404 	asr.w	r4, r3, r4
    31d8:	07e3      	lsls	r3, r4, #31
    31da:	d40f      	bmi.n	31fc <hal_flash_write+0x58>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    31dc:	682b      	ldr	r3, [r5, #0]
    31de:	4642      	mov	r2, r8
    31e0:	685c      	ldr	r4, [r3, #4]
    31e2:	4631      	mov	r1, r6
    31e4:	463b      	mov	r3, r7
    31e6:	4628      	mov	r0, r5
    31e8:	47a0      	blx	r4
    if (rc != 0) {
    31ea:	2800      	cmp	r0, #0
        return SYS_EIO;
    31ec:	bf18      	it	ne
    31ee:	f06f 0004 	mvnne.w	r0, #4
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    31f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    31f6:	f06f 0001 	mvn.w	r0, #1
    31fa:	e7fa      	b.n	31f2 <hal_flash_write+0x4e>
        return SYS_EACCES;
    31fc:	f06f 0006 	mvn.w	r0, #6
    3200:	e7f7      	b.n	31f2 <hal_flash_write+0x4e>
    3202:	bf00      	nop
    3204:	2000196c 	.word	0x2000196c

00003208 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    3208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    320c:	4605      	mov	r5, r0
    320e:	460f      	mov	r7, r1
    3210:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3212:	f7fd f939 	bl	488 <hal_bsp_flash_dev>
    if (!hf) {
    3216:	4606      	mov	r6, r0
    3218:	2800      	cmp	r0, #0
    321a:	d04b      	beq.n	32b4 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    321c:	4639      	mov	r1, r7
    321e:	f7ff ff6f 	bl	3100 <hal_flash_check_addr>
    3222:	2800      	cmp	r0, #0
    3224:	d146      	bne.n	32b4 <hal_flash_erase+0xac>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3226:	eb07 0809 	add.w	r8, r7, r9
    322a:	4641      	mov	r1, r8
    322c:	4630      	mov	r0, r6
    322e:	f7ff ff67 	bl	3100 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3232:	2800      	cmp	r0, #0
    3234:	d13e      	bne.n	32b4 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    3236:	08eb      	lsrs	r3, r5, #3
    3238:	4a20      	ldr	r2, [pc, #128]	; (32bc <hal_flash_erase+0xb4>)
    323a:	5cd4      	ldrb	r4, [r2, r3]
    323c:	f005 0507 	and.w	r5, r5, #7
    3240:	412c      	asrs	r4, r5
    3242:	f014 0401 	ands.w	r4, r4, #1
    3246:	d132      	bne.n	32ae <hal_flash_erase+0xa6>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    3248:	45b8      	cmp	r8, r7
    324a:	d933      	bls.n	32b4 <hal_flash_erase+0xac>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    324c:	6833      	ldr	r3, [r6, #0]
    324e:	699b      	ldr	r3, [r3, #24]
    3250:	b35b      	cbz	r3, 32aa <hal_flash_erase+0xa2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    3252:	464a      	mov	r2, r9
    3254:	4639      	mov	r1, r7
    3256:	4630      	mov	r0, r6
    3258:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    325a:	4620      	mov	r0, r4
    325c:	b003      	add	sp, #12
    325e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            end_area = start + size;
    3262:	e9dd 1300 	ldrd	r1, r3, [sp]
    3266:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    3268:	429f      	cmp	r7, r3
    326a:	d313      	bcc.n	3294 <hal_flash_erase+0x8c>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    326c:	3501      	adds	r5, #1
    326e:	68f3      	ldr	r3, [r6, #12]
    3270:	42ab      	cmp	r3, r5
    3272:	ddf2      	ble.n	325a <hal_flash_erase+0x52>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    3274:	6833      	ldr	r3, [r6, #0]
    3276:	466a      	mov	r2, sp
    3278:	f8d3 900c 	ldr.w	r9, [r3, #12]
    327c:	4629      	mov	r1, r5
    327e:	ab01      	add	r3, sp, #4
    3280:	4630      	mov	r0, r6
    3282:	47c8      	blx	r9
            assert(rc == 0);
    3284:	2800      	cmp	r0, #0
    3286:	d0ec      	beq.n	3262 <hal_flash_erase+0x5a>
    3288:	2300      	movs	r3, #0
    328a:	461a      	mov	r2, r3
    328c:	4619      	mov	r1, r3
    328e:	4618      	mov	r0, r3
    3290:	f7fe f806 	bl	12a0 <__assert_func>
            if (address < end_area && end > start) {
    3294:	4588      	cmp	r8, r1
    3296:	d9e9      	bls.n	326c <hal_flash_erase+0x64>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    3298:	6833      	ldr	r3, [r6, #0]
    329a:	4630      	mov	r0, r6
    329c:	689b      	ldr	r3, [r3, #8]
    329e:	4798      	blx	r3
    32a0:	2800      	cmp	r0, #0
    32a2:	d0e3      	beq.n	326c <hal_flash_erase+0x64>
                    return SYS_EIO;
    32a4:	f06f 0404 	mvn.w	r4, #4
    32a8:	e7d7      	b.n	325a <hal_flash_erase+0x52>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    32aa:	4625      	mov	r5, r4
    32ac:	e7df      	b.n	326e <hal_flash_erase+0x66>
        return SYS_EACCES;
    32ae:	f06f 0406 	mvn.w	r4, #6
    32b2:	e7d2      	b.n	325a <hal_flash_erase+0x52>
        return SYS_EINVAL;
    32b4:	f06f 0401 	mvn.w	r4, #1
    32b8:	e7cf      	b.n	325a <hal_flash_erase+0x52>
    32ba:	bf00      	nop
    32bc:	2000196c 	.word	0x2000196c

000032c0 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    32c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    32c2:	6807      	ldr	r7, [r0, #0]
    32c4:	683f      	ldr	r7, [r7, #0]
{
    32c6:	4606      	mov	r6, r0
    32c8:	4614      	mov	r4, r2
    32ca:	461d      	mov	r5, r3
    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    32cc:	47b8      	blx	r7
    if (rc != 0) {
    32ce:	b958      	cbnz	r0, 32e8 <hal_flash_is_erased+0x28>
    32d0:	4622      	mov	r2, r4
    32d2:	4425      	add	r5, r4
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    32d4:	4295      	cmp	r5, r2
    32d6:	d101      	bne.n	32dc <hal_flash_is_erased+0x1c>
        if (buf[i] != hf->hf_erased_val) {
            return 0;
        }
    }
    return 1;
    32d8:	2001      	movs	r0, #1
    32da:	e004      	b.n	32e6 <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
    32dc:	f812 3b01 	ldrb.w	r3, [r2], #1
    32e0:	7d31      	ldrb	r1, [r6, #20]
    32e2:	4299      	cmp	r1, r3
    32e4:	d0f6      	beq.n	32d4 <hal_flash_is_erased+0x14>
}
    32e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    32e8:	f06f 0004 	mvn.w	r0, #4
    32ec:	e7fb      	b.n	32e6 <hal_flash_is_erased+0x26>

000032ee <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    32ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32f2:	460d      	mov	r5, r1
    32f4:	4617      	mov	r7, r2
    32f6:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    32f8:	f7fd f8c6 	bl	488 <hal_bsp_flash_dev>
    if (!hf) {
    32fc:	4604      	mov	r4, r0
    32fe:	b1e8      	cbz	r0, 333c <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3300:	4629      	mov	r1, r5
    3302:	f7ff fefd 	bl	3100 <hal_flash_check_addr>
    3306:	b9c8      	cbnz	r0, 333c <hal_flash_isempty+0x4e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3308:	19a9      	adds	r1, r5, r6
    330a:	4620      	mov	r0, r4
    330c:	f7ff fef8 	bl	3100 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3310:	b9a0      	cbnz	r0, 333c <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    3312:	6823      	ldr	r3, [r4, #0]
    3314:	f8d3 8010 	ldr.w	r8, [r3, #16]
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    3318:	463a      	mov	r2, r7
    331a:	4633      	mov	r3, r6
    331c:	4629      	mov	r1, r5
    331e:	4620      	mov	r0, r4
    if (hf->hf_itf->hff_is_empty) {
    3320:	f1b8 0f00 	cmp.w	r8, #0
    3324:	d006      	beq.n	3334 <hal_flash_isempty+0x46>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    3326:	47c0      	blx	r8
        if (rc < 0) {
    3328:	2800      	cmp	r0, #0
            return SYS_EIO;
    332a:	bfb8      	it	lt
    332c:	f06f 0004 	mvnlt.w	r0, #4
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    3330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    3338:	f7ff bfc2 	b.w	32c0 <hal_flash_is_erased>
        return SYS_EINVAL;
    333c:	f06f 0001 	mvn.w	r0, #1
    3340:	e7f6      	b.n	3330 <hal_flash_isempty+0x42>

00003342 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    3342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    3346:	f8d2 a004 	ldr.w	sl, [r2, #4]
    while (num / d >= p->base)
    334a:	78d6      	ldrb	r6, [r2, #3]
{
    334c:	4680      	mov	r8, r0
    334e:	4689      	mov	r9, r1
    3350:	4693      	mov	fp, r2
    while (num / d >= p->base)
    3352:	2700      	movs	r7, #0
    unsigned long long int d = 1;
    3354:	2401      	movs	r4, #1
    3356:	2500      	movs	r5, #0
    while (num / d >= p->base)
    3358:	4622      	mov	r2, r4
    335a:	462b      	mov	r3, r5
    335c:	4640      	mov	r0, r8
    335e:	4649      	mov	r1, r9
    3360:	f000 fa42 	bl	37e8 <__aeabi_uldivmod>
    3364:	42b9      	cmp	r1, r7
    3366:	bf08      	it	eq
    3368:	42b0      	cmpeq	r0, r6
    336a:	d20a      	bcs.n	3382 <ui2a+0x40>
    int n = 0;
    336c:	2300      	movs	r3, #0
    336e:	9301      	str	r3, [sp, #4]
        d *= p->base;
    while (d != 0) {
    3370:	ea54 0305 	orrs.w	r3, r4, r5
    3374:	d10d      	bne.n	3392 <ui2a+0x50>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    3376:	2300      	movs	r3, #0
    3378:	f88a 3000 	strb.w	r3, [sl]
}
    337c:	b003      	add	sp, #12
    337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
    3382:	fb04 f307 	mul.w	r3, r4, r7
    3386:	fb06 3305 	mla	r3, r6, r5, r3
    338a:	fba4 4506 	umull	r4, r5, r4, r6
    338e:	441d      	add	r5, r3
    3390:	e7e2      	b.n	3358 <ui2a+0x16>
    3392:	4622      	mov	r2, r4
    3394:	462b      	mov	r3, r5
    3396:	4640      	mov	r0, r8
    3398:	4649      	mov	r1, r9
    339a:	f000 fa25 	bl	37e8 <__aeabi_uldivmod>
    339e:	4606      	mov	r6, r0
    33a0:	460f      	mov	r7, r1
        d /= p->base;
    33a2:	4620      	mov	r0, r4
    33a4:	4629      	mov	r1, r5
    33a6:	4690      	mov	r8, r2
    33a8:	4699      	mov	r9, r3
    33aa:	f89b 2003 	ldrb.w	r2, [fp, #3]
    33ae:	2300      	movs	r3, #0
    33b0:	f000 fa1a 	bl	37e8 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    33b4:	9b01      	ldr	r3, [sp, #4]
        d /= p->base;
    33b6:	4604      	mov	r4, r0
    33b8:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    33ba:	b93b      	cbnz	r3, 33cc <ui2a+0x8a>
    33bc:	ea56 0307 	orrs.w	r3, r6, r7
    33c0:	d104      	bne.n	33cc <ui2a+0x8a>
    33c2:	ea54 0305 	orrs.w	r3, r4, r5
    33c6:	d1d3      	bne.n	3370 <ui2a+0x2e>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    33c8:	2330      	movs	r3, #48	; 0x30
    33ca:	e00a      	b.n	33e2 <ui2a+0xa0>
    33cc:	2f00      	cmp	r7, #0
    33ce:	bf08      	it	eq
    33d0:	2e0a      	cmpeq	r6, #10
    33d2:	d3f9      	bcc.n	33c8 <ui2a+0x86>
    33d4:	f89b 3002 	ldrb.w	r3, [fp, #2]
    33d8:	f013 0f04 	tst.w	r3, #4
    33dc:	bf14      	ite	ne
    33de:	2337      	movne	r3, #55	; 0x37
    33e0:	2357      	moveq	r3, #87	; 0x57
    33e2:	441e      	add	r6, r3
            ++n;
    33e4:	9b01      	ldr	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    33e6:	f88a 6000 	strb.w	r6, [sl]
            ++n;
    33ea:	3301      	adds	r3, #1
    33ec:	9301      	str	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    33ee:	f10a 0a01 	add.w	sl, sl, #1
    33f2:	e7bd      	b.n	3370 <ui2a+0x2e>

000033f4 <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
    33f4:	b507      	push	{r0, r1, r2, lr}
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    if (stream->vmt->write == NULL) return 0;
    33f6:	6803      	ldr	r3, [r0, #0]
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    33f8:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    33fc:	681b      	ldr	r3, [r3, #0]
    33fe:	b91b      	cbnz	r3, 3408 <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
    3400:	2000      	movs	r0, #0
    else
        return 1;
}
    3402:	b003      	add	sp, #12
    3404:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    3408:	2201      	movs	r2, #1
    340a:	f10d 0107 	add.w	r1, sp, #7
    340e:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    3410:	2801      	cmp	r0, #1
    3412:	d1f5      	bne.n	3400 <putf+0xc>
    3414:	e7f5      	b.n	3402 <putf+0xe>
	...

00003418 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    3418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned written = 0;
    char ch;
    int n = p->width;
    char *bf = p->bf;
    341c:	684b      	ldr	r3, [r1, #4]
    int n = p->width;
    341e:	780c      	ldrb	r4, [r1, #0]
{
    3420:	4607      	mov	r7, r0
    3422:	460e      	mov	r6, r1

    /* Number of filling characters */
    while (*bf++ && n > 0)
    3424:	f813 2b01 	ldrb.w	r2, [r3], #1
    3428:	b10a      	cbz	r2, 342e <putchw+0x16>
    342a:	2c00      	cmp	r4, #0
    342c:	d152      	bne.n	34d4 <putchw+0xbc>
        n--;
    if (p->sign)
    342e:	78b3      	ldrb	r3, [r6, #2]
    3430:	07d9      	lsls	r1, r3, #31
        n--;
    if (p->alt && p->base == 16)
    3432:	8873      	ldrh	r3, [r6, #2]
    3434:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    3438:	b29b      	uxth	r3, r3
    343a:	f241 0202 	movw	r2, #4098	; 0x1002
        n--;
    343e:	bf48      	it	mi
    3440:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
    if (p->alt && p->base == 16)
    3444:	4293      	cmp	r3, r2
    3446:	d147      	bne.n	34d8 <putchw+0xc0>
        n -= 2;
    3448:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    344a:	6833      	ldr	r3, [r6, #0]
    344c:	4d38      	ldr	r5, [pc, #224]	; (3530 <putchw+0x118>)
    344e:	401d      	ands	r5, r3
    3450:	2d00      	cmp	r5, #0
    3452:	d150      	bne.n	34f6 <putchw+0xde>
    3454:	46a0      	mov	r8, r4
        while (n-- > 0)
    3456:	f1b8 0f00 	cmp.w	r8, #0
    345a:	dc44      	bgt.n	34e6 <putchw+0xce>
    345c:	1e63      	subs	r3, r4, #1
    345e:	2c00      	cmp	r4, #0
    3460:	bfac      	ite	ge
    3462:	1b1c      	subge	r4, r3, r4
    3464:	461c      	movlt	r4, r3
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    3466:	78b3      	ldrb	r3, [r6, #2]
    3468:	07da      	lsls	r2, r3, #31
    346a:	d504      	bpl.n	3476 <putchw+0x5e>
        written += putf(putp, '-');
    346c:	212d      	movs	r1, #45	; 0x2d
    346e:	4638      	mov	r0, r7
    3470:	f7ff ffc0 	bl	33f4 <putf>
    3474:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
    3476:	8873      	ldrh	r3, [r6, #2]
    3478:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    347c:	b29b      	uxth	r3, r3
    347e:	f241 0202 	movw	r2, #4098	; 0x1002
    3482:	4293      	cmp	r3, r2
    3484:	d139      	bne.n	34fa <putchw+0xe2>
        written += putf(putp, '0');
    3486:	2130      	movs	r1, #48	; 0x30
    3488:	4638      	mov	r0, r7
    348a:	f7ff ffb3 	bl	33f4 <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
    348e:	78b3      	ldrb	r3, [r6, #2]
    3490:	f013 0f04 	tst.w	r3, #4
        written += putf(putp, '0');
    3494:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    3496:	bf14      	ite	ne
    3498:	2158      	movne	r1, #88	; 0x58
    349a:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
    349c:	4638      	mov	r0, r7
    349e:	f7ff ffa9 	bl	33f4 <putf>
    34a2:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    34a4:	7873      	ldrb	r3, [r6, #1]
    34a6:	b143      	cbz	r3, 34ba <putchw+0xa2>
    34a8:	46a0      	mov	r8, r4
        while (n-- > 0)
    34aa:	f1b8 0f00 	cmp.w	r8, #0
    34ae:	dc2a      	bgt.n	3506 <putchw+0xee>
    34b0:	1e63      	subs	r3, r4, #1
    34b2:	2c00      	cmp	r4, #0
    34b4:	bfac      	ite	ge
    34b6:	1b1c      	subge	r4, r3, r4
    34b8:	461c      	movlt	r4, r3
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    34ba:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
    34be:	f818 1b01 	ldrb.w	r1, [r8], #1
    34c2:	bb41      	cbnz	r1, 3516 <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    34c4:	78b3      	ldrb	r3, [r6, #2]
    34c6:	071b      	lsls	r3, r3, #28
    34c8:	d501      	bpl.n	34ce <putchw+0xb6>
        while (n-- > 0)
    34ca:	2c00      	cmp	r4, #0
    34cc:	dc28      	bgt.n	3520 <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
    34ce:	4628      	mov	r0, r5
    34d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
    34d4:	3c01      	subs	r4, #1
    34d6:	e7a5      	b.n	3424 <putchw+0xc>
    else if (p->alt && p->base == 8)
    34d8:	f640 0202 	movw	r2, #2050	; 0x802
    34dc:	4293      	cmp	r3, r2
        n--;
    34de:	bf08      	it	eq
    34e0:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    34e4:	e7b1      	b.n	344a <putchw+0x32>
            written += putf(putp, ' ');
    34e6:	2120      	movs	r1, #32
    34e8:	4638      	mov	r0, r7
    34ea:	f7ff ff83 	bl	33f4 <putf>
    34ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    34f2:	4405      	add	r5, r0
    34f4:	e7af      	b.n	3456 <putchw+0x3e>
    unsigned written = 0;
    34f6:	2500      	movs	r5, #0
    34f8:	e7b5      	b.n	3466 <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
    34fa:	f640 0202 	movw	r2, #2050	; 0x802
    34fe:	4293      	cmp	r3, r2
    3500:	d1d0      	bne.n	34a4 <putchw+0x8c>
        written += putf(putp, '0');
    3502:	2130      	movs	r1, #48	; 0x30
    3504:	e7ca      	b.n	349c <putchw+0x84>
            written += putf(putp, '0');
    3506:	2130      	movs	r1, #48	; 0x30
    3508:	4638      	mov	r0, r7
    350a:	f7ff ff73 	bl	33f4 <putf>
    350e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3512:	4405      	add	r5, r0
    3514:	e7c9      	b.n	34aa <putchw+0x92>
        written += putf(putp, ch);
    3516:	4638      	mov	r0, r7
    3518:	f7ff ff6c 	bl	33f4 <putf>
    351c:	4405      	add	r5, r0
    351e:	e7ce      	b.n	34be <putchw+0xa6>
            written += putf(putp, ' ');
    3520:	2120      	movs	r1, #32
    3522:	4638      	mov	r0, r7
    3524:	f7ff ff66 	bl	33f4 <putf>
    3528:	3c01      	subs	r4, #1
    352a:	4405      	add	r5, r0
    352c:	e7cd      	b.n	34ca <putchw+0xb2>
    352e:	bf00      	nop
    3530:	0008ff00 	.word	0x0008ff00

00003534 <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    3534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3538:	b089      	sub	sp, #36	; 0x24
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    353a:	ad02      	add	r5, sp, #8
    size_t written = 0;
    353c:	2600      	movs	r6, #0
{
    353e:	4607      	mov	r7, r0
    3540:	4614      	mov	r4, r2
    p.bf = bf;
    3542:	9501      	str	r5, [sp, #4]
    while ((ch = *(fmt++))) {
        if (ch != '%') {
            written += putf(putp, ch);
        } else {
            /* Init parameter struct */
            p.lz = 0;
    3544:	46b0      	mov	r8, r6
    while ((ch = *(fmt++))) {
    3546:	f101 0901 	add.w	r9, r1, #1
    354a:	7809      	ldrb	r1, [r1, #0]
    354c:	b919      	cbnz	r1, 3556 <tfp_format+0x22>
        }
    }
 abort:;
 
 return written;
}
    354e:	4630      	mov	r0, r6
    3550:	b009      	add	sp, #36	; 0x24
    3552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
    3556:	2925      	cmp	r1, #37	; 0x25
    3558:	d003      	beq.n	3562 <tfp_format+0x2e>
                written += putf(putp, ch);
    355a:	4638      	mov	r0, r7
    355c:	f7ff ff4a 	bl	33f4 <putf>
    3560:	e100      	b.n	3764 <tfp_format+0x230>
            p.alt = 0;
    3562:	f89d 3002 	ldrb.w	r3, [sp, #2]
            p.lz = 0;
    3566:	f88d 8001 	strb.w	r8, [sp, #1]
            p.uc = 0;
    356a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
    356e:	f368 0382 	bfi	r3, r8, #2, #1
    3572:	f88d 3002 	strb.w	r3, [sp, #2]
            while ((ch = *(fmt++))) {
    3576:	2300      	movs	r3, #0
            p.width = 0;
    3578:	f88d 8000 	strb.w	r8, [sp]
    while ((ch = *(fmt++))) {
    357c:	4648      	mov	r0, r9
            while ((ch = *(fmt++))) {
    357e:	461a      	mov	r2, r3
    3580:	f819 1b01 	ldrb.w	r1, [r9], #1
    3584:	b949      	cbnz	r1, 359a <tfp_format+0x66>
    3586:	b10b      	cbz	r3, 358c <tfp_format+0x58>
    3588:	f88d 2001 	strb.w	r2, [sp, #1]
            } else if (ch >= '0' && ch <= '9') {
    358c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    3590:	2b09      	cmp	r3, #9
    3592:	d835      	bhi.n	3600 <tfp_format+0xcc>
    int num = 0;
    3594:	2200      	movs	r2, #0
        num = num * base + digit;
    3596:	200a      	movs	r0, #10
    3598:	e057      	b.n	364a <tfp_format+0x116>
                switch (ch) {
    359a:	292d      	cmp	r1, #45	; 0x2d
    359c:	d010      	beq.n	35c0 <tfp_format+0x8c>
    359e:	2930      	cmp	r1, #48	; 0x30
    35a0:	d008      	beq.n	35b4 <tfp_format+0x80>
    35a2:	2923      	cmp	r1, #35	; 0x23
    35a4:	d118      	bne.n	35d8 <tfp_format+0xa4>
                    p.alt = 1;
    35a6:	f89d 1002 	ldrb.w	r1, [sp, #2]
    35aa:	f041 0102 	orr.w	r1, r1, #2
    35ae:	f88d 1002 	strb.w	r1, [sp, #2]
                    continue;
    35b2:	e003      	b.n	35bc <tfp_format+0x88>
                    if (!p.left) {
    35b4:	f89d 1002 	ldrb.w	r1, [sp, #2]
    35b8:	0709      	lsls	r1, r1, #28
    35ba:	d50a      	bpl.n	35d2 <tfp_format+0x9e>
                    p.lz = 0;
    35bc:	4648      	mov	r0, r9
    35be:	e7df      	b.n	3580 <tfp_format+0x4c>
                    p.left = 1;
    35c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    35c4:	f043 0308 	orr.w	r3, r3, #8
    35c8:	f88d 3002 	strb.w	r3, [sp, #2]
                    p.lz = 0;
    35cc:	2200      	movs	r2, #0
                    continue;
    35ce:	2301      	movs	r3, #1
    35d0:	e7f4      	b.n	35bc <tfp_format+0x88>
    35d2:	2301      	movs	r3, #1
                        p.lz = 1;
    35d4:	461a      	mov	r2, r3
    35d6:	e7f1      	b.n	35bc <tfp_format+0x88>
    35d8:	b10b      	cbz	r3, 35de <tfp_format+0xaa>
    35da:	f88d 2001 	strb.w	r2, [sp, #1]
            if (ch == '*') {
    35de:	292a      	cmp	r1, #42	; 0x2a
    35e0:	d1d4      	bne.n	358c <tfp_format+0x58>
            val = va_arg(*va, int);
    35e2:	6823      	ldr	r3, [r4, #0]
                if (i > UCHAR_MAX) {
    35e4:	2bff      	cmp	r3, #255	; 0xff
            val = va_arg(*va, int);
    35e6:	f104 0204 	add.w	r2, r4, #4
                if (i > UCHAR_MAX) {
    35ea:	dd03      	ble.n	35f4 <tfp_format+0xc0>
                    p.width = UCHAR_MAX;
    35ec:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
    35ee:	f88d 3000 	strb.w	r3, [sp]
    35f2:	e001      	b.n	35f8 <tfp_format+0xc4>
                } else if (i > 0) {
    35f4:	2b00      	cmp	r3, #0
    35f6:	dcfa      	bgt.n	35ee <tfp_format+0xba>
                ch = *(fmt++);
    35f8:	7841      	ldrb	r1, [r0, #1]
    35fa:	f100 0902 	add.w	r9, r0, #2
            val = va_arg(*va, int);
    35fe:	4614      	mov	r4, r2
            if (ch == 'l') {
    3600:	296c      	cmp	r1, #108	; 0x6c
    3602:	d13b      	bne.n	367c <tfp_format+0x148>
                ch = *(fmt++);
    3604:	f899 1000 	ldrb.w	r1, [r9]
                if (ch == 'l') {
    3608:	296c      	cmp	r1, #108	; 0x6c
                    ch = *(fmt++);
    360a:	bf0d      	iteet	eq
    360c:	f899 1001 	ldrbeq.w	r1, [r9, #1]
                ch = *(fmt++);
    3610:	f109 0901 	addne.w	r9, r9, #1
                lng = 1;
    3614:	2301      	movne	r3, #1
                    ch = *(fmt++);
    3616:	f109 0902 	addeq.w	r9, r9, #2
                    lng = 2;
    361a:	bf08      	it	eq
    361c:	2302      	moveq	r3, #2
            if (ch == 'z') {
    361e:	297a      	cmp	r1, #122	; 0x7a
                ch = *(fmt++);
    3620:	bf04      	itt	eq
    3622:	f899 1000 	ldrbeq.w	r1, [r9]
    3626:	f109 0901 	addeq.w	r9, r9, #1
            switch (ch) {
    362a:	2969      	cmp	r1, #105	; 0x69
    362c:	d02c      	beq.n	3688 <tfp_format+0x154>
    362e:	d83a      	bhi.n	36a6 <tfp_format+0x172>
    3630:	2958      	cmp	r1, #88	; 0x58
    3632:	d064      	beq.n	36fe <tfp_format+0x1ca>
    3634:	d824      	bhi.n	3680 <tfp_format+0x14c>
    3636:	2900      	cmp	r1, #0
    3638:	d089      	beq.n	354e <tfp_format+0x1a>
    363a:	2925      	cmp	r1, #37	; 0x25
    363c:	d08d      	beq.n	355a <tfp_format+0x26>
                v = va_arg(va, void *);
    363e:	4649      	mov	r1, r9
    3640:	e781      	b.n	3546 <tfp_format+0x12>
        ch = *p++;
    3642:	f819 1b01 	ldrb.w	r1, [r9], #1
        num = num * base + digit;
    3646:	fb00 3202 	mla	r2, r0, r2, r3
    if (ch >= '0' && ch <= '9')
    364a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    364e:	fa5f fc83 	uxtb.w	ip, r3
    3652:	f1bc 0f09 	cmp.w	ip, #9
    3656:	d9f4      	bls.n	3642 <tfp_format+0x10e>
    else if (ch >= 'a' && ch <= 'f')
    3658:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
    365c:	2b05      	cmp	r3, #5
    365e:	d806      	bhi.n	366e <tfp_format+0x13a>
        return ch - 'a' + 10;
    3660:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
    3664:	2b0a      	cmp	r3, #10
    3666:	ddec      	ble.n	3642 <tfp_format+0x10e>
    *nump = num;
    3668:	f88d 2000 	strb.w	r2, [sp]
    366c:	e7c8      	b.n	3600 <tfp_format+0xcc>
    else if (ch >= 'A' && ch <= 'F')
    366e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    3672:	2b05      	cmp	r3, #5
    3674:	d8f8      	bhi.n	3668 <tfp_format+0x134>
        return ch - 'A' + 10;
    3676:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
    367a:	e7f3      	b.n	3664 <tfp_format+0x130>
            lng = 0;
    367c:	2300      	movs	r3, #0
    367e:	e7ce      	b.n	361e <tfp_format+0xea>
            switch (ch) {
    3680:	2963      	cmp	r1, #99	; 0x63
    3682:	d077      	beq.n	3774 <tfp_format+0x240>
    3684:	2964      	cmp	r1, #100	; 0x64
    3686:	d1da      	bne.n	363e <tfp_format+0x10a>
                p.base = 10;
    3688:	220a      	movs	r2, #10
    368a:	f88d 2003 	strb.w	r2, [sp, #3]
    switch (lng) {
    368e:	2b00      	cmp	r3, #0
    3690:	d051      	beq.n	3736 <tfp_format+0x202>
    3692:	2b01      	cmp	r3, #1
    3694:	d04f      	beq.n	3736 <tfp_format+0x202>
            val = va_arg(*va, long long);
    3696:	3407      	adds	r4, #7
    3698:	f024 0307 	bic.w	r3, r4, #7
    369c:	f103 0408 	add.w	r4, r3, #8
    36a0:	e9d3 0100 	ldrd	r0, r1, [r3]
    36a4:	e04a      	b.n	373c <tfp_format+0x208>
            switch (ch) {
    36a6:	2973      	cmp	r1, #115	; 0x73
    36a8:	d06c      	beq.n	3784 <tfp_format+0x250>
    36aa:	d824      	bhi.n	36f6 <tfp_format+0x1c2>
    36ac:	296f      	cmp	r1, #111	; 0x6f
    36ae:	d05b      	beq.n	3768 <tfp_format+0x234>
    36b0:	2970      	cmp	r1, #112	; 0x70
    36b2:	d1c4      	bne.n	363e <tfp_format+0x10a>
                ui2a((uintptr_t)v, &p);
    36b4:	466a      	mov	r2, sp
                v = va_arg(va, void *);
    36b6:	6820      	ldr	r0, [r4, #0]
                p.base = 16;
    36b8:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
    36ba:	2100      	movs	r1, #0
                p.base = 16;
    36bc:	f88d 3003 	strb.w	r3, [sp, #3]
                ui2a((uintptr_t)v, &p);
    36c0:	f7ff fe3f 	bl	3342 <ui2a>
                p.width = 2 * sizeof(void*);
    36c4:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
    36c8:	2130      	movs	r1, #48	; 0x30
    36ca:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
    36cc:	f8ad 3000 	strh.w	r3, [sp]
                written += putf(putp, '0');
    36d0:	f7ff fe90 	bl	33f4 <putf>
                written += putf(putp, 'x');
    36d4:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
    36d6:	4683      	mov	fp, r0
                written += putf(putp, 'x');
    36d8:	4638      	mov	r0, r7
    36da:	f7ff fe8b 	bl	33f4 <putf>
                v = va_arg(va, void *);
    36de:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
    36e2:	4669      	mov	r1, sp
                written += putf(putp, 'x');
    36e4:	4604      	mov	r4, r0
                written += putchw(putp, &p);
    36e6:	4638      	mov	r0, r7
    36e8:	f7ff fe96 	bl	3418 <putchw>
    36ec:	4406      	add	r6, r0
    36ee:	445e      	add	r6, fp
    36f0:	4426      	add	r6, r4
                p.bf = va_arg(va, char *);
    36f2:	4654      	mov	r4, sl
                break;
    36f4:	e7a3      	b.n	363e <tfp_format+0x10a>
            switch (ch) {
    36f6:	2975      	cmp	r1, #117	; 0x75
    36f8:	d019      	beq.n	372e <tfp_format+0x1fa>
    36fa:	2978      	cmp	r1, #120	; 0x78
    36fc:	d19f      	bne.n	363e <tfp_format+0x10a>
                p.base = 16;
    36fe:	2210      	movs	r2, #16
    3700:	f88d 2003 	strb.w	r2, [sp, #3]
                p.uc = (ch == 'X');
    3704:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    3708:	4251      	negs	r1, r2
    370a:	4151      	adcs	r1, r2
    370c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    3710:	f361 0282 	bfi	r2, r1, #2, #1
    3714:	f88d 2002 	strb.w	r2, [sp, #2]
    switch (lng) {
    3718:	b343      	cbz	r3, 376c <tfp_format+0x238>
    371a:	2b01      	cmp	r3, #1
    371c:	d026      	beq.n	376c <tfp_format+0x238>
            val = va_arg(*va, unsigned long long);
    371e:	3407      	adds	r4, #7
    3720:	f024 0307 	bic.w	r3, r4, #7
    3724:	f103 0408 	add.w	r4, r3, #8
    3728:	e9d3 0100 	ldrd	r0, r1, [r3]
    372c:	e013      	b.n	3756 <tfp_format+0x222>
                p.base = 10;
    372e:	220a      	movs	r2, #10
                p.base = 8;
    3730:	f88d 2003 	strb.w	r2, [sp, #3]
    3734:	e7f0      	b.n	3718 <tfp_format+0x1e4>
            val = va_arg(*va, long);
    3736:	6820      	ldr	r0, [r4, #0]
    3738:	3404      	adds	r4, #4
    373a:	17c1      	asrs	r1, r0, #31
    if (num < 0) {
    373c:	2800      	cmp	r0, #0
    373e:	f171 0300 	sbcs.w	r3, r1, #0
    3742:	da08      	bge.n	3756 <tfp_format+0x222>
        p->sign = 1;
    3744:	f89d 3002 	ldrb.w	r3, [sp, #2]
        num = -num;
    3748:	4240      	negs	r0, r0
        p->sign = 1;
    374a:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
    374e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    3752:	f88d 3002 	strb.w	r3, [sp, #2]
                ui2a(intarg(lng, 0, &va), &p);
    3756:	466a      	mov	r2, sp
    3758:	f7ff fdf3 	bl	3342 <ui2a>
                written += putchw(putp, &p);
    375c:	4669      	mov	r1, sp
    375e:	4638      	mov	r0, r7
    3760:	f7ff fe5a 	bl	3418 <putchw>
                written += putf(putp, ch);
    3764:	4406      	add	r6, r0
                break;
    3766:	e76a      	b.n	363e <tfp_format+0x10a>
                p.base = 8;
    3768:	2208      	movs	r2, #8
    376a:	e7e1      	b.n	3730 <tfp_format+0x1fc>
            val = va_arg(*va, unsigned long);
    376c:	6820      	ldr	r0, [r4, #0]
    376e:	2100      	movs	r1, #0
    3770:	3404      	adds	r4, #4
    3772:	e7f0      	b.n	3756 <tfp_format+0x222>
                written += putf(putp, (char)(va_arg(va, int)));
    3774:	7821      	ldrb	r1, [r4, #0]
    3776:	4638      	mov	r0, r7
    3778:	f7ff fe3c 	bl	33f4 <putf>
    377c:	f104 0a04 	add.w	sl, r4, #4
    3780:	4406      	add	r6, r0
    3782:	e7b6      	b.n	36f2 <tfp_format+0x1be>
                p.bf = va_arg(va, char *);
    3784:	6823      	ldr	r3, [r4, #0]
    3786:	9301      	str	r3, [sp, #4]
                written += putchw(putp, &p);
    3788:	4669      	mov	r1, sp
    378a:	4638      	mov	r0, r7
    378c:	f7ff fe44 	bl	3418 <putchw>
                p.bf = va_arg(va, char *);
    3790:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
    3794:	4406      	add	r6, r0
                p.bf = bf;
    3796:	9501      	str	r5, [sp, #4]
    3798:	e7ab      	b.n	36f2 <tfp_format+0x1be>

0000379a <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
    379a:	f7ff becb 	b.w	3534 <tfp_format>
	...

000037a0 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    37a0:	b40f      	push	{r0, r1, r2, r3}
    37a2:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
    37a4:	4b06      	ldr	r3, [pc, #24]	; (37c0 <printf+0x20>)
{
    37a6:	aa04      	add	r2, sp, #16
    return tfp_format(f, fmt, va);
    37a8:	6818      	ldr	r0, [r3, #0]
{
    37aa:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    37ae:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
    37b0:	f7ff fec0 	bl	3534 <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
    37b4:	b003      	add	sp, #12
    37b6:	f85d eb04 	ldr.w	lr, [sp], #4
    37ba:	b004      	add	sp, #16
    37bc:	4770      	bx	lr
    37be:	bf00      	nop
    37c0:	00003e94 	.word	0x00003e94

000037c4 <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
    37c4:	4b02      	ldr	r3, [pc, #8]	; (37d0 <vprintf+0xc>)
    37c6:	460a      	mov	r2, r1
    37c8:	4601      	mov	r1, r0
    37ca:	6818      	ldr	r0, [r3, #0]
    37cc:	f7ff bfe5 	b.w	379a <vfprintf>
    37d0:	00003e94 	.word	0x00003e94

000037d4 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    37d4:	2000      	movs	r0, #0
    37d6:	4770      	bx	lr

000037d8 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    37d8:	b510      	push	{r4, lr}
    37da:	4608      	mov	r0, r1
    37dc:	4614      	mov	r4, r2
    console_write(bp, n);
    37de:	4611      	mov	r1, r2
    37e0:	f7fd ffb7 	bl	1752 <console_write>
    return n;
}
    37e4:	4620      	mov	r0, r4
    37e6:	bd10      	pop	{r4, pc}

000037e8 <__aeabi_uldivmod>:
    37e8:	b953      	cbnz	r3, 3800 <__aeabi_uldivmod+0x18>
    37ea:	b94a      	cbnz	r2, 3800 <__aeabi_uldivmod+0x18>
    37ec:	2900      	cmp	r1, #0
    37ee:	bf08      	it	eq
    37f0:	2800      	cmpeq	r0, #0
    37f2:	bf1c      	itt	ne
    37f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    37f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    37fc:	f000 b972 	b.w	3ae4 <__aeabi_idiv0>
    3800:	f1ad 0c08 	sub.w	ip, sp, #8
    3804:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    3808:	f000 f806 	bl	3818 <__udivmoddi4>
    380c:	f8dd e004 	ldr.w	lr, [sp, #4]
    3810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3814:	b004      	add	sp, #16
    3816:	4770      	bx	lr

00003818 <__udivmoddi4>:
    3818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    381c:	9e08      	ldr	r6, [sp, #32]
    381e:	4604      	mov	r4, r0
    3820:	4688      	mov	r8, r1
    3822:	2b00      	cmp	r3, #0
    3824:	d14b      	bne.n	38be <__udivmoddi4+0xa6>
    3826:	428a      	cmp	r2, r1
    3828:	4615      	mov	r5, r2
    382a:	d967      	bls.n	38fc <__udivmoddi4+0xe4>
    382c:	fab2 f282 	clz	r2, r2
    3830:	b14a      	cbz	r2, 3846 <__udivmoddi4+0x2e>
    3832:	f1c2 0720 	rsb	r7, r2, #32
    3836:	fa01 f302 	lsl.w	r3, r1, r2
    383a:	fa20 f707 	lsr.w	r7, r0, r7
    383e:	4095      	lsls	r5, r2
    3840:	ea47 0803 	orr.w	r8, r7, r3
    3844:	4094      	lsls	r4, r2
    3846:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    384a:	0c23      	lsrs	r3, r4, #16
    384c:	fbb8 f7fe 	udiv	r7, r8, lr
    3850:	fa1f fc85 	uxth.w	ip, r5
    3854:	fb0e 8817 	mls	r8, lr, r7, r8
    3858:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    385c:	fb07 f10c 	mul.w	r1, r7, ip
    3860:	4299      	cmp	r1, r3
    3862:	d909      	bls.n	3878 <__udivmoddi4+0x60>
    3864:	18eb      	adds	r3, r5, r3
    3866:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    386a:	f080 811b 	bcs.w	3aa4 <__udivmoddi4+0x28c>
    386e:	4299      	cmp	r1, r3
    3870:	f240 8118 	bls.w	3aa4 <__udivmoddi4+0x28c>
    3874:	3f02      	subs	r7, #2
    3876:	442b      	add	r3, r5
    3878:	1a5b      	subs	r3, r3, r1
    387a:	b2a4      	uxth	r4, r4
    387c:	fbb3 f0fe 	udiv	r0, r3, lr
    3880:	fb0e 3310 	mls	r3, lr, r0, r3
    3884:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3888:	fb00 fc0c 	mul.w	ip, r0, ip
    388c:	45a4      	cmp	ip, r4
    388e:	d909      	bls.n	38a4 <__udivmoddi4+0x8c>
    3890:	192c      	adds	r4, r5, r4
    3892:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    3896:	f080 8107 	bcs.w	3aa8 <__udivmoddi4+0x290>
    389a:	45a4      	cmp	ip, r4
    389c:	f240 8104 	bls.w	3aa8 <__udivmoddi4+0x290>
    38a0:	3802      	subs	r0, #2
    38a2:	442c      	add	r4, r5
    38a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    38a8:	eba4 040c 	sub.w	r4, r4, ip
    38ac:	2700      	movs	r7, #0
    38ae:	b11e      	cbz	r6, 38b8 <__udivmoddi4+0xa0>
    38b0:	40d4      	lsrs	r4, r2
    38b2:	2300      	movs	r3, #0
    38b4:	e9c6 4300 	strd	r4, r3, [r6]
    38b8:	4639      	mov	r1, r7
    38ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38be:	428b      	cmp	r3, r1
    38c0:	d909      	bls.n	38d6 <__udivmoddi4+0xbe>
    38c2:	2e00      	cmp	r6, #0
    38c4:	f000 80eb 	beq.w	3a9e <__udivmoddi4+0x286>
    38c8:	2700      	movs	r7, #0
    38ca:	e9c6 0100 	strd	r0, r1, [r6]
    38ce:	4638      	mov	r0, r7
    38d0:	4639      	mov	r1, r7
    38d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38d6:	fab3 f783 	clz	r7, r3
    38da:	2f00      	cmp	r7, #0
    38dc:	d147      	bne.n	396e <__udivmoddi4+0x156>
    38de:	428b      	cmp	r3, r1
    38e0:	d302      	bcc.n	38e8 <__udivmoddi4+0xd0>
    38e2:	4282      	cmp	r2, r0
    38e4:	f200 80fa 	bhi.w	3adc <__udivmoddi4+0x2c4>
    38e8:	1a84      	subs	r4, r0, r2
    38ea:	eb61 0303 	sbc.w	r3, r1, r3
    38ee:	2001      	movs	r0, #1
    38f0:	4698      	mov	r8, r3
    38f2:	2e00      	cmp	r6, #0
    38f4:	d0e0      	beq.n	38b8 <__udivmoddi4+0xa0>
    38f6:	e9c6 4800 	strd	r4, r8, [r6]
    38fa:	e7dd      	b.n	38b8 <__udivmoddi4+0xa0>
    38fc:	b902      	cbnz	r2, 3900 <__udivmoddi4+0xe8>
    38fe:	deff      	udf	#255	; 0xff
    3900:	fab2 f282 	clz	r2, r2
    3904:	2a00      	cmp	r2, #0
    3906:	f040 808f 	bne.w	3a28 <__udivmoddi4+0x210>
    390a:	1b49      	subs	r1, r1, r5
    390c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    3910:	fa1f f885 	uxth.w	r8, r5
    3914:	2701      	movs	r7, #1
    3916:	fbb1 fcfe 	udiv	ip, r1, lr
    391a:	0c23      	lsrs	r3, r4, #16
    391c:	fb0e 111c 	mls	r1, lr, ip, r1
    3920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3924:	fb08 f10c 	mul.w	r1, r8, ip
    3928:	4299      	cmp	r1, r3
    392a:	d907      	bls.n	393c <__udivmoddi4+0x124>
    392c:	18eb      	adds	r3, r5, r3
    392e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    3932:	d202      	bcs.n	393a <__udivmoddi4+0x122>
    3934:	4299      	cmp	r1, r3
    3936:	f200 80cd 	bhi.w	3ad4 <__udivmoddi4+0x2bc>
    393a:	4684      	mov	ip, r0
    393c:	1a59      	subs	r1, r3, r1
    393e:	b2a3      	uxth	r3, r4
    3940:	fbb1 f0fe 	udiv	r0, r1, lr
    3944:	fb0e 1410 	mls	r4, lr, r0, r1
    3948:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    394c:	fb08 f800 	mul.w	r8, r8, r0
    3950:	45a0      	cmp	r8, r4
    3952:	d907      	bls.n	3964 <__udivmoddi4+0x14c>
    3954:	192c      	adds	r4, r5, r4
    3956:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    395a:	d202      	bcs.n	3962 <__udivmoddi4+0x14a>
    395c:	45a0      	cmp	r8, r4
    395e:	f200 80b6 	bhi.w	3ace <__udivmoddi4+0x2b6>
    3962:	4618      	mov	r0, r3
    3964:	eba4 0408 	sub.w	r4, r4, r8
    3968:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    396c:	e79f      	b.n	38ae <__udivmoddi4+0x96>
    396e:	f1c7 0c20 	rsb	ip, r7, #32
    3972:	40bb      	lsls	r3, r7
    3974:	fa22 fe0c 	lsr.w	lr, r2, ip
    3978:	ea4e 0e03 	orr.w	lr, lr, r3
    397c:	fa01 f407 	lsl.w	r4, r1, r7
    3980:	fa20 f50c 	lsr.w	r5, r0, ip
    3984:	fa21 f30c 	lsr.w	r3, r1, ip
    3988:	ea4f 481e 	mov.w	r8, lr, lsr #16
    398c:	4325      	orrs	r5, r4
    398e:	fbb3 f9f8 	udiv	r9, r3, r8
    3992:	0c2c      	lsrs	r4, r5, #16
    3994:	fb08 3319 	mls	r3, r8, r9, r3
    3998:	fa1f fa8e 	uxth.w	sl, lr
    399c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    39a0:	fb09 f40a 	mul.w	r4, r9, sl
    39a4:	429c      	cmp	r4, r3
    39a6:	fa02 f207 	lsl.w	r2, r2, r7
    39aa:	fa00 f107 	lsl.w	r1, r0, r7
    39ae:	d90b      	bls.n	39c8 <__udivmoddi4+0x1b0>
    39b0:	eb1e 0303 	adds.w	r3, lr, r3
    39b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    39b8:	f080 8087 	bcs.w	3aca <__udivmoddi4+0x2b2>
    39bc:	429c      	cmp	r4, r3
    39be:	f240 8084 	bls.w	3aca <__udivmoddi4+0x2b2>
    39c2:	f1a9 0902 	sub.w	r9, r9, #2
    39c6:	4473      	add	r3, lr
    39c8:	1b1b      	subs	r3, r3, r4
    39ca:	b2ad      	uxth	r5, r5
    39cc:	fbb3 f0f8 	udiv	r0, r3, r8
    39d0:	fb08 3310 	mls	r3, r8, r0, r3
    39d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    39d8:	fb00 fa0a 	mul.w	sl, r0, sl
    39dc:	45a2      	cmp	sl, r4
    39de:	d908      	bls.n	39f2 <__udivmoddi4+0x1da>
    39e0:	eb1e 0404 	adds.w	r4, lr, r4
    39e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    39e8:	d26b      	bcs.n	3ac2 <__udivmoddi4+0x2aa>
    39ea:	45a2      	cmp	sl, r4
    39ec:	d969      	bls.n	3ac2 <__udivmoddi4+0x2aa>
    39ee:	3802      	subs	r0, #2
    39f0:	4474      	add	r4, lr
    39f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    39f6:	fba0 8902 	umull	r8, r9, r0, r2
    39fa:	eba4 040a 	sub.w	r4, r4, sl
    39fe:	454c      	cmp	r4, r9
    3a00:	46c2      	mov	sl, r8
    3a02:	464b      	mov	r3, r9
    3a04:	d354      	bcc.n	3ab0 <__udivmoddi4+0x298>
    3a06:	d051      	beq.n	3aac <__udivmoddi4+0x294>
    3a08:	2e00      	cmp	r6, #0
    3a0a:	d069      	beq.n	3ae0 <__udivmoddi4+0x2c8>
    3a0c:	ebb1 050a 	subs.w	r5, r1, sl
    3a10:	eb64 0403 	sbc.w	r4, r4, r3
    3a14:	fa04 fc0c 	lsl.w	ip, r4, ip
    3a18:	40fd      	lsrs	r5, r7
    3a1a:	40fc      	lsrs	r4, r7
    3a1c:	ea4c 0505 	orr.w	r5, ip, r5
    3a20:	e9c6 5400 	strd	r5, r4, [r6]
    3a24:	2700      	movs	r7, #0
    3a26:	e747      	b.n	38b8 <__udivmoddi4+0xa0>
    3a28:	f1c2 0320 	rsb	r3, r2, #32
    3a2c:	fa20 f703 	lsr.w	r7, r0, r3
    3a30:	4095      	lsls	r5, r2
    3a32:	fa01 f002 	lsl.w	r0, r1, r2
    3a36:	fa21 f303 	lsr.w	r3, r1, r3
    3a3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    3a3e:	4338      	orrs	r0, r7
    3a40:	0c01      	lsrs	r1, r0, #16
    3a42:	fbb3 f7fe 	udiv	r7, r3, lr
    3a46:	fa1f f885 	uxth.w	r8, r5
    3a4a:	fb0e 3317 	mls	r3, lr, r7, r3
    3a4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3a52:	fb07 f308 	mul.w	r3, r7, r8
    3a56:	428b      	cmp	r3, r1
    3a58:	fa04 f402 	lsl.w	r4, r4, r2
    3a5c:	d907      	bls.n	3a6e <__udivmoddi4+0x256>
    3a5e:	1869      	adds	r1, r5, r1
    3a60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    3a64:	d22f      	bcs.n	3ac6 <__udivmoddi4+0x2ae>
    3a66:	428b      	cmp	r3, r1
    3a68:	d92d      	bls.n	3ac6 <__udivmoddi4+0x2ae>
    3a6a:	3f02      	subs	r7, #2
    3a6c:	4429      	add	r1, r5
    3a6e:	1acb      	subs	r3, r1, r3
    3a70:	b281      	uxth	r1, r0
    3a72:	fbb3 f0fe 	udiv	r0, r3, lr
    3a76:	fb0e 3310 	mls	r3, lr, r0, r3
    3a7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3a7e:	fb00 f308 	mul.w	r3, r0, r8
    3a82:	428b      	cmp	r3, r1
    3a84:	d907      	bls.n	3a96 <__udivmoddi4+0x27e>
    3a86:	1869      	adds	r1, r5, r1
    3a88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    3a8c:	d217      	bcs.n	3abe <__udivmoddi4+0x2a6>
    3a8e:	428b      	cmp	r3, r1
    3a90:	d915      	bls.n	3abe <__udivmoddi4+0x2a6>
    3a92:	3802      	subs	r0, #2
    3a94:	4429      	add	r1, r5
    3a96:	1ac9      	subs	r1, r1, r3
    3a98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    3a9c:	e73b      	b.n	3916 <__udivmoddi4+0xfe>
    3a9e:	4637      	mov	r7, r6
    3aa0:	4630      	mov	r0, r6
    3aa2:	e709      	b.n	38b8 <__udivmoddi4+0xa0>
    3aa4:	4607      	mov	r7, r0
    3aa6:	e6e7      	b.n	3878 <__udivmoddi4+0x60>
    3aa8:	4618      	mov	r0, r3
    3aaa:	e6fb      	b.n	38a4 <__udivmoddi4+0x8c>
    3aac:	4541      	cmp	r1, r8
    3aae:	d2ab      	bcs.n	3a08 <__udivmoddi4+0x1f0>
    3ab0:	ebb8 0a02 	subs.w	sl, r8, r2
    3ab4:	eb69 020e 	sbc.w	r2, r9, lr
    3ab8:	3801      	subs	r0, #1
    3aba:	4613      	mov	r3, r2
    3abc:	e7a4      	b.n	3a08 <__udivmoddi4+0x1f0>
    3abe:	4660      	mov	r0, ip
    3ac0:	e7e9      	b.n	3a96 <__udivmoddi4+0x27e>
    3ac2:	4618      	mov	r0, r3
    3ac4:	e795      	b.n	39f2 <__udivmoddi4+0x1da>
    3ac6:	4667      	mov	r7, ip
    3ac8:	e7d1      	b.n	3a6e <__udivmoddi4+0x256>
    3aca:	4681      	mov	r9, r0
    3acc:	e77c      	b.n	39c8 <__udivmoddi4+0x1b0>
    3ace:	3802      	subs	r0, #2
    3ad0:	442c      	add	r4, r5
    3ad2:	e747      	b.n	3964 <__udivmoddi4+0x14c>
    3ad4:	f1ac 0c02 	sub.w	ip, ip, #2
    3ad8:	442b      	add	r3, r5
    3ada:	e72f      	b.n	393c <__udivmoddi4+0x124>
    3adc:	4638      	mov	r0, r7
    3ade:	e708      	b.n	38f2 <__udivmoddi4+0xda>
    3ae0:	4637      	mov	r7, r6
    3ae2:	e6e9      	b.n	38b8 <__udivmoddi4+0xa0>

00003ae4 <__aeabi_idiv0>:
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop
    3ae8:	72617453 	.word	0x72617453
    3aec:	676e6974 	.word	0x676e6974
    3af0:	55434d20 	.word	0x55434d20
    3af4:	746f6f42 	.word	0x746f6f42
    3af8:	002e2e2e 	.word	0x002e2e2e

00003afc <flash_devs>:
    3afc:	00003b50 200000e8                       P;..... 

00003b04 <spiflash_characteristics>:
    3b04:	00007530 00061a80 0001d4c0 000c3500     0u...........5..
    3b14:	000249f0 000f4240 002dc6c0 00989680     .I..@B....-.....
    3b24:	000002bc 00000bb8 00000014 00000032     ............2...

00003b34 <spiflash_flash_funcs>:
    3b34:	000005f9 00000675 000007df 000004d5     ....u...........
    3b44:	00000000 000008f1 0000088d              ............

00003b50 <nrf52k_flash_dev>:
    3b50:	00003b68 00000000 00080000 00000080     h;..............
    3b60:	00000001 000000ff                       ........

00003b68 <nrf52k_flash_funcs>:
    3b68:	00000a6d 000009a5 00000955 00000a7b     m.......U...{...
    3b78:	00000000 000009a1 00000000              ............

00003b84 <CSWTCH.24>:
    3b84:	06040200                                ....

00003b88 <nrf52_hal_spis>:
    3b88:	20001970 00000000 00000000              p.. ........

00003b94 <os_bsp_spi0m_cfg>:
    3b94:	00040302                                ....

00003b98 <nrf52_hal_timers>:
    3b98:	20001998 00000000 00000000 00000000     ... ............
	...
    3bb0:	65737341 40207472 25783020 41000a78     Assert @ 0x%x..A
    3bc0:	72657373 20402074 78257830 25202d20     ssert @ 0x%x - %
    3bd0:	64253a73 6e55000a 646e6168 2064656c     s:%d..Unhandled 
    3be0:	65746e69 70757272 25282074 2c29646c     interrupt (%ld),
    3bf0:	63786520 69747065 73206e6f 78302070      exception sp 0x
    3c00:	6c383025 20000a78 303a3072 38302578     %08lx.. r0:0x%08
    3c10:	2020786c 303a3172 38302578 2020786c     lx  r1:0x%08lx  
    3c20:	303a3272 38302578 2020786c 303a3372     r2:0x%08lx  r3:0
    3c30:	38302578 000a786c 3a347220 30257830     x%08lx.. r4:0x%0
    3c40:	20786c38 3a357220 30257830 20786c38     8lx  r5:0x%08lx 
    3c50:	3a367220 30257830 20786c38 3a377220      r6:0x%08lx  r7:
    3c60:	30257830 0a786c38 38722000 2578303a     0x%08lx.. r8:0x%
    3c70:	786c3830 39722020 2578303a 786c3830     08lx  r9:0x%08lx
    3c80:	30317220 2578303a 786c3830 31317220      r10:0x%08lx r11
    3c90:	2578303a 786c3830 3172000a 78303a32     :0x%08lx..r12:0x
    3ca0:	6c383025 6c202078 78303a72 6c383025     %08lx  lr:0x%08l
    3cb0:	70202078 78303a63 6c383025 73702078     x  pc:0x%08lx ps
    3cc0:	78303a72 6c383025 49000a78 3a525343     r:0x%08lx..ICSR:
    3cd0:	30257830 20786c38 52534648 2578303a     0x%08lx HFSR:0x%
    3ce0:	786c3830 53464320 78303a52 6c383025     08lx CFSR:0x%08l
    3cf0:	42000a78 3a524146 30257830 20786c38     x..BFAR:0x%08lx 
    3d00:	41464d4d 78303a52 6c383025 25000a78     MMFAR:0x%08lx..%
    3d10:	756c3630 00000020                       06lu ...

00003d18 <sysflash_map_dflt>:
	...
    3d20:	00004000 00000001 00008000 00074000     .@...........@..
    3d30:	00000102 00000000 00074000 00000003     .........@......
    3d40:	0007c000 00001000 00000010 00004000     .............@..
    3d50:	00004000 00000111 00074000 0038c000     .@.......@....8.

00003d60 <boot_status_tables>:
    3d60:	00010501 02030501 01040104 02030403     ................

00003d70 <boot_img_magic>:
    3d70:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00003d80 <boot_swap_tables>:
    3d80:	03040104 01040204 03040104 04030301     ................
    3d90:	00000401                                ....

00003d94 <K>:
    3d94:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    3da4:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    3db4:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    3dc4:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    3dd4:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    3de4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    3df4:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    3e04:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    3e14:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    3e24:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    3e34:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    3e44:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    3e54:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    3e64:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    3e74:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    3e84:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00003e94 <stdout>:
    3e94:	20000150                                P.. 

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  16048	    132	   6476	  22656	   5880	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
